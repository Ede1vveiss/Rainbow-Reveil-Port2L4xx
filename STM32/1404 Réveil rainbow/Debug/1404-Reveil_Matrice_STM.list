
1404-Reveil_Matrice_STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006164  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08006224  08006224  00016224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800635c  0800635c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800635c  0800635c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800635c  0800635c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800635c  0800635c  0001635c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006360  08006360  00016360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006364  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c88  2000000c  08006370  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c94  08006370  00020c94  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001045d  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002306  00000000  00000000  00030491  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e50  00000000  00000000  00032798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d78  00000000  00000000  000335e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018cec  00000000  00000000  00034360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010e10  00000000  00000000  0004d04c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000910cb  00000000  00000000  0005de5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eef27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033ac  00000000  00000000  000eef78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800620c 	.word	0x0800620c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800620c 	.word	0x0800620c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <ws2812_start>:
/* Variables -----------------------------------------------*/
static uint8_t LEDbuffer[LED_BUFFER_SIZE];
extern TIM_HandleTypeDef htim2;

/* Functions -----------------------------------------------*/
void ws2812_start(void) {
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	fillBufferBlack();
 8000224:	f000 f89a 	bl	800035c <fillBufferBlack>
	htim2.Init.Period = TIMER_PERIOD - 1;
 8000228:	4b07      	ldr	r3, [pc, #28]	; (8000248 <ws2812_start+0x28>)
 800022a:	2209      	movs	r2, #9
 800022c:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Init(&htim2);
 800022e:	4b06      	ldr	r3, [pc, #24]	; (8000248 <ws2812_start+0x28>)
 8000230:	0018      	movs	r0, r3
 8000232:	f003 fd9b 	bl	8003d6c <HAL_TIM_Base_Init>
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *) LEDbuffer,
 8000236:	4b05      	ldr	r3, [pc, #20]	; (800024c <ws2812_start+0x2c>)
 8000238:	4a05      	ldr	r2, [pc, #20]	; (8000250 <ws2812_start+0x30>)
 800023a:	4803      	ldr	r0, [pc, #12]	; (8000248 <ws2812_start+0x28>)
 800023c:	2100      	movs	r1, #0
 800023e:	f003 fe3d 	bl	8003ebc <HAL_TIM_PWM_Start_DMA>
				LED_BUFFER_SIZE);
	//HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	20000b10 	.word	0x20000b10
 800024c:	00000a61 	.word	0x00000a61
 8000250:	20000028 	.word	0x20000028

08000254 <setLEDcolor>:
void ws2812_update(void) {
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *) LEDbuffer,
			LED_BUFFER_SIZE);
}

void setLEDcolor(uint32_t LEDnumber, uint8_t RED, uint8_t GREEN, uint8_t BLUE) {
 8000254:	b590      	push	{r4, r7, lr}
 8000256:	b08b      	sub	sp, #44	; 0x2c
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
 800025c:	000c      	movs	r4, r1
 800025e:	0010      	movs	r0, r2
 8000260:	0019      	movs	r1, r3
 8000262:	1cfb      	adds	r3, r7, #3
 8000264:	1c22      	adds	r2, r4, #0
 8000266:	701a      	strb	r2, [r3, #0]
 8000268:	1cbb      	adds	r3, r7, #2
 800026a:	1c02      	adds	r2, r0, #0
 800026c:	701a      	strb	r2, [r3, #0]
 800026e:	1c7b      	adds	r3, r7, #1
 8000270:	1c0a      	adds	r2, r1, #0
 8000272:	701a      	strb	r2, [r3, #0]
	uint8_t tempBuffer[24];
	uint32_t i;
	uint32_t LEDindex;
	LEDindex = LEDnumber % LED_NUMBER;
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	215e      	movs	r1, #94	; 0x5e
 8000278:	0018      	movs	r0, r3
 800027a:	f7ff ffcb 	bl	8000214 <__aeabi_uidivmod>
 800027e:	000b      	movs	r3, r1
 8000280:	623b      	str	r3, [r7, #32]

	for (i = 0; i < 8; i++) // GREEN data
 8000282:	2300      	movs	r3, #0
 8000284:	627b      	str	r3, [r7, #36]	; 0x24
 8000286:	e013      	b.n	80002b0 <setLEDcolor+0x5c>
		tempBuffer[i] = ((GREEN << i) & 0x80) ? WS2812_1 : WS2812_0;
 8000288:	1cbb      	adds	r3, r7, #2
 800028a:	781a      	ldrb	r2, [r3, #0]
 800028c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800028e:	409a      	lsls	r2, r3
 8000290:	0013      	movs	r3, r2
 8000292:	2280      	movs	r2, #128	; 0x80
 8000294:	4013      	ands	r3, r2
 8000296:	d001      	beq.n	800029c <setLEDcolor+0x48>
 8000298:	2106      	movs	r1, #6
 800029a:	e000      	b.n	800029e <setLEDcolor+0x4a>
 800029c:	2103      	movs	r1, #3
 800029e:	2308      	movs	r3, #8
 80002a0:	18fa      	adds	r2, r7, r3
 80002a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002a4:	18d3      	adds	r3, r2, r3
 80002a6:	1c0a      	adds	r2, r1, #0
 80002a8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) // GREEN data
 80002aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002ac:	3301      	adds	r3, #1
 80002ae:	627b      	str	r3, [r7, #36]	; 0x24
 80002b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002b2:	2b07      	cmp	r3, #7
 80002b4:	d9e8      	bls.n	8000288 <setLEDcolor+0x34>
	for (i = 0; i < 8; i++) // RED
 80002b6:	2300      	movs	r3, #0
 80002b8:	627b      	str	r3, [r7, #36]	; 0x24
 80002ba:	e012      	b.n	80002e2 <setLEDcolor+0x8e>
		tempBuffer[8 + i] = ((RED << i) & 0x80) ? WS2812_1 : WS2812_0;
 80002bc:	1cfb      	adds	r3, r7, #3
 80002be:	781a      	ldrb	r2, [r3, #0]
 80002c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002c2:	409a      	lsls	r2, r3
 80002c4:	0013      	movs	r3, r2
 80002c6:	2280      	movs	r2, #128	; 0x80
 80002c8:	4013      	ands	r3, r2
 80002ca:	d001      	beq.n	80002d0 <setLEDcolor+0x7c>
 80002cc:	2106      	movs	r1, #6
 80002ce:	e000      	b.n	80002d2 <setLEDcolor+0x7e>
 80002d0:	2103      	movs	r1, #3
 80002d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002d4:	3308      	adds	r3, #8
 80002d6:	2208      	movs	r2, #8
 80002d8:	18ba      	adds	r2, r7, r2
 80002da:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < 8; i++) // RED
 80002dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002de:	3301      	adds	r3, #1
 80002e0:	627b      	str	r3, [r7, #36]	; 0x24
 80002e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002e4:	2b07      	cmp	r3, #7
 80002e6:	d9e9      	bls.n	80002bc <setLEDcolor+0x68>
	for (i = 0; i < 8; i++) // BLUE
 80002e8:	2300      	movs	r3, #0
 80002ea:	627b      	str	r3, [r7, #36]	; 0x24
 80002ec:	e012      	b.n	8000314 <setLEDcolor+0xc0>
		tempBuffer[16 + i] = ((BLUE << i) & 0x80) ? WS2812_1 : WS2812_0;
 80002ee:	1c7b      	adds	r3, r7, #1
 80002f0:	781a      	ldrb	r2, [r3, #0]
 80002f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002f4:	409a      	lsls	r2, r3
 80002f6:	0013      	movs	r3, r2
 80002f8:	2280      	movs	r2, #128	; 0x80
 80002fa:	4013      	ands	r3, r2
 80002fc:	d001      	beq.n	8000302 <setLEDcolor+0xae>
 80002fe:	2106      	movs	r1, #6
 8000300:	e000      	b.n	8000304 <setLEDcolor+0xb0>
 8000302:	2103      	movs	r1, #3
 8000304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000306:	3310      	adds	r3, #16
 8000308:	2208      	movs	r2, #8
 800030a:	18ba      	adds	r2, r7, r2
 800030c:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < 8; i++) // BLUE
 800030e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000310:	3301      	adds	r3, #1
 8000312:	627b      	str	r3, [r7, #36]	; 0x24
 8000314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000316:	2b07      	cmp	r3, #7
 8000318:	d9e9      	bls.n	80002ee <setLEDcolor+0x9a>

	for (i = 0; i < 24; i++)
 800031a:	2300      	movs	r3, #0
 800031c:	627b      	str	r3, [r7, #36]	; 0x24
 800031e:	e012      	b.n	8000346 <setLEDcolor+0xf2>
		LEDbuffer[RESET_SLOTS_BEGIN + LEDindex * 24 + i] = tempBuffer[i];
 8000320:	6a3a      	ldr	r2, [r7, #32]
 8000322:	0013      	movs	r3, r2
 8000324:	005b      	lsls	r3, r3, #1
 8000326:	189b      	adds	r3, r3, r2
 8000328:	00db      	lsls	r3, r3, #3
 800032a:	001a      	movs	r2, r3
 800032c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800032e:	18d3      	adds	r3, r2, r3
 8000330:	33c8      	adds	r3, #200	; 0xc8
 8000332:	2208      	movs	r2, #8
 8000334:	18b9      	adds	r1, r7, r2
 8000336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000338:	188a      	adds	r2, r1, r2
 800033a:	7811      	ldrb	r1, [r2, #0]
 800033c:	4a06      	ldr	r2, [pc, #24]	; (8000358 <setLEDcolor+0x104>)
 800033e:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < 24; i++)
 8000340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000342:	3301      	adds	r3, #1
 8000344:	627b      	str	r3, [r7, #36]	; 0x24
 8000346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000348:	2b17      	cmp	r3, #23
 800034a:	d9e9      	bls.n	8000320 <setLEDcolor+0xcc>
}
 800034c:	46c0      	nop			; (mov r8, r8)
 800034e:	46c0      	nop			; (mov r8, r8)
 8000350:	46bd      	mov	sp, r7
 8000352:	b00b      	add	sp, #44	; 0x2c
 8000354:	bd90      	pop	{r4, r7, pc}
 8000356:	46c0      	nop			; (mov r8, r8)
 8000358:	20000028 	.word	0x20000028

0800035c <fillBufferBlack>:

	for (index = 0; index < LED_NUMBER; index++)
		setLEDcolor(index, RED, GREEN, BLUE);
}

void fillBufferBlack(void) {
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
	/*Fill LED buffer - ALL OFF*/
	uint32_t index, buffIndex;
	buffIndex = 0;
 8000362:	2300      	movs	r3, #0
 8000364:	603b      	str	r3, [r7, #0]

	for (index = 0; index < RESET_SLOTS_BEGIN; index++) {
 8000366:	2300      	movs	r3, #0
 8000368:	607b      	str	r3, [r7, #4]
 800036a:	e00a      	b.n	8000382 <fillBufferBlack+0x26>
		LEDbuffer[buffIndex] = WS2812_RESET;
 800036c:	4a1f      	ldr	r2, [pc, #124]	; (80003ec <fillBufferBlack+0x90>)
 800036e:	683b      	ldr	r3, [r7, #0]
 8000370:	18d3      	adds	r3, r2, r3
 8000372:	2200      	movs	r2, #0
 8000374:	701a      	strb	r2, [r3, #0]
		buffIndex++;
 8000376:	683b      	ldr	r3, [r7, #0]
 8000378:	3301      	adds	r3, #1
 800037a:	603b      	str	r3, [r7, #0]
	for (index = 0; index < RESET_SLOTS_BEGIN; index++) {
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	3301      	adds	r3, #1
 8000380:	607b      	str	r3, [r7, #4]
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	2bc7      	cmp	r3, #199	; 0xc7
 8000386:	d9f1      	bls.n	800036c <fillBufferBlack+0x10>
	}
	for (index = 0; index < LED_DATA_SIZE; index++) {
 8000388:	2300      	movs	r3, #0
 800038a:	607b      	str	r3, [r7, #4]
 800038c:	e00a      	b.n	80003a4 <fillBufferBlack+0x48>
		LEDbuffer[buffIndex] = WS2812_0;
 800038e:	4a17      	ldr	r2, [pc, #92]	; (80003ec <fillBufferBlack+0x90>)
 8000390:	683b      	ldr	r3, [r7, #0]
 8000392:	18d3      	adds	r3, r2, r3
 8000394:	2203      	movs	r2, #3
 8000396:	701a      	strb	r2, [r3, #0]
		buffIndex++;
 8000398:	683b      	ldr	r3, [r7, #0]
 800039a:	3301      	adds	r3, #1
 800039c:	603b      	str	r3, [r7, #0]
	for (index = 0; index < LED_DATA_SIZE; index++) {
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	3301      	adds	r3, #1
 80003a2:	607b      	str	r3, [r7, #4]
 80003a4:	687a      	ldr	r2, [r7, #4]
 80003a6:	238d      	movs	r3, #141	; 0x8d
 80003a8:	011b      	lsls	r3, r3, #4
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d3ef      	bcc.n	800038e <fillBufferBlack+0x32>
	}
	LEDbuffer[buffIndex] = WS2812_0;
 80003ae:	4a0f      	ldr	r2, [pc, #60]	; (80003ec <fillBufferBlack+0x90>)
 80003b0:	683b      	ldr	r3, [r7, #0]
 80003b2:	18d3      	adds	r3, r2, r3
 80003b4:	2203      	movs	r2, #3
 80003b6:	701a      	strb	r2, [r3, #0]
	buffIndex++;
 80003b8:	683b      	ldr	r3, [r7, #0]
 80003ba:	3301      	adds	r3, #1
 80003bc:	603b      	str	r3, [r7, #0]
	for (index = 0; index < RESET_SLOTS_END; index++) {
 80003be:	2300      	movs	r3, #0
 80003c0:	607b      	str	r3, [r7, #4]
 80003c2:	e00a      	b.n	80003da <fillBufferBlack+0x7e>
		LEDbuffer[buffIndex] = 0;
 80003c4:	4a09      	ldr	r2, [pc, #36]	; (80003ec <fillBufferBlack+0x90>)
 80003c6:	683b      	ldr	r3, [r7, #0]
 80003c8:	18d3      	adds	r3, r2, r3
 80003ca:	2200      	movs	r2, #0
 80003cc:	701a      	strb	r2, [r3, #0]
		buffIndex++;
 80003ce:	683b      	ldr	r3, [r7, #0]
 80003d0:	3301      	adds	r3, #1
 80003d2:	603b      	str	r3, [r7, #0]
	for (index = 0; index < RESET_SLOTS_END; index++) {
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	3301      	adds	r3, #1
 80003d8:	607b      	str	r3, [r7, #4]
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	2bc7      	cmp	r3, #199	; 0xc7
 80003de:	d9f1      	bls.n	80003c4 <fillBufferBlack+0x68>
	}
}
 80003e0:	46c0      	nop			; (mov r8, r8)
 80003e2:	46c0      	nop			; (mov r8, r8)
 80003e4:	46bd      	mov	sp, r7
 80003e6:	b002      	add	sp, #8
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	46c0      	nop			; (mov r8, r8)
 80003ec:	20000028 	.word	0x20000028

080003f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f4:	f001 fe38 	bl	8002068 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003f8:	f000 f902 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003fc:	f000 fa98 	bl	8000930 <MX_GPIO_Init>
  MX_DMA_Init();
 8000400:	f000 fa68 	bl	80008d4 <MX_DMA_Init>
  MX_TIM2_Init();
 8000404:	f000 f9b6 	bl	8000774 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000408:	f000 fa32 	bl	8000870 <MX_USART1_UART_Init>
  MX_ADC_Init();
 800040c:	f000 f956 	bl	80006bc <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  ws2812_start();
 8000410:	f7ff ff06 	bl	8000220 <ws2812_start>
  HAL_UART_Receive_IT(&huart1, Rx_data, 19);
 8000414:	496f      	ldr	r1, [pc, #444]	; (80005d4 <main+0x1e4>)
 8000416:	4b70      	ldr	r3, [pc, #448]	; (80005d8 <main+0x1e8>)
 8000418:	2213      	movs	r2, #19
 800041a:	0018      	movs	r0, r3
 800041c:	f004 fd3e 	bl	8004e9c <HAL_UART_Receive_IT>
  HAL_ADC_Start(&hadc);
 8000420:	4b6e      	ldr	r3, [pc, #440]	; (80005dc <main+0x1ec>)
 8000422:	0018      	movs	r0, r3
 8000424:	f001 ffc4 	bl	80023b0 <HAL_ADC_Start>
//
//	  ReadADC = HAL_ADC_GetValue(&hadc);



	  if(HAL_UART_Receive_IT(&huart1, Rx_data, 19) != HAL_BUSY)
 8000428:	496a      	ldr	r1, [pc, #424]	; (80005d4 <main+0x1e4>)
 800042a:	4b6b      	ldr	r3, [pc, #428]	; (80005d8 <main+0x1e8>)
 800042c:	2213      	movs	r2, #19
 800042e:	0018      	movs	r0, r3
 8000430:	f004 fd34 	bl	8004e9c <HAL_UART_Receive_IT>
 8000434:	0003      	movs	r3, r0
 8000436:	2b02      	cmp	r3, #2
 8000438:	d005      	beq.n	8000446 <main+0x56>
	  {
		  HAL_UART_Receive_IT(&huart1, Rx_data, 19);
 800043a:	4966      	ldr	r1, [pc, #408]	; (80005d4 <main+0x1e4>)
 800043c:	4b66      	ldr	r3, [pc, #408]	; (80005d8 <main+0x1e8>)
 800043e:	2213      	movs	r2, #19
 8000440:	0018      	movs	r0, r3
 8000442:	f004 fd2b 	bl	8004e9c <HAL_UART_Receive_IT>
	  }

	  /**********Caractère Minute Unité***************/
	  switch(Minutes_U)
 8000446:	4b66      	ldr	r3, [pc, #408]	; (80005e0 <main+0x1f0>)
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	2b09      	cmp	r3, #9
 800044c:	d82c      	bhi.n	80004a8 <main+0xb8>
 800044e:	009a      	lsls	r2, r3, #2
 8000450:	4b64      	ldr	r3, [pc, #400]	; (80005e4 <main+0x1f4>)
 8000452:	18d3      	adds	r3, r2, r3
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	469f      	mov	pc, r3
	  {
	  case 0:
		  Chara_0(MinuteUnite);
 8000458:	2000      	movs	r0, #0
 800045a:	f000 fb65 	bl	8000b28 <Chara_0>
		  break;
 800045e:	e023      	b.n	80004a8 <main+0xb8>

	  case 1:
		  Chara_1(MinuteUnite);
 8000460:	2000      	movs	r0, #0
 8000462:	f000 fc31 	bl	8000cc8 <Chara_1>
	  	  break;
 8000466:	e01f      	b.n	80004a8 <main+0xb8>

	  case 2:
		  Chara_2(MinuteUnite);
 8000468:	2000      	movs	r0, #0
 800046a:	f000 fcfd 	bl	8000e68 <Chara_2>
		  break;
 800046e:	e01b      	b.n	80004a8 <main+0xb8>

	  case 3:
		  Chara_3(MinuteUnite);
 8000470:	2000      	movs	r0, #0
 8000472:	f000 fdc9 	bl	8001008 <Chara_3>
	  	  break;
 8000476:	e017      	b.n	80004a8 <main+0xb8>

	  case 4:
		  Chara_4(MinuteUnite);
 8000478:	2000      	movs	r0, #0
 800047a:	f000 fe95 	bl	80011a8 <Chara_4>
		  break;
 800047e:	e013      	b.n	80004a8 <main+0xb8>

	  case 5:
		  Chara_5(MinuteUnite);
 8000480:	2000      	movs	r0, #0
 8000482:	f000 ff61 	bl	8001348 <Chara_5>
	  	  break;
 8000486:	e00f      	b.n	80004a8 <main+0xb8>

	  case 6:
		  Chara_6(MinuteUnite);
 8000488:	2000      	movs	r0, #0
 800048a:	f001 f82d 	bl	80014e8 <Chara_6>
		  break;
 800048e:	e00b      	b.n	80004a8 <main+0xb8>

	  case 7:
		  Chara_7(MinuteUnite);
 8000490:	2000      	movs	r0, #0
 8000492:	f001 f8f9 	bl	8001688 <Chara_7>
		  break;
 8000496:	e007      	b.n	80004a8 <main+0xb8>

	  case 8:
		  Chara_8(MinuteUnite);
 8000498:	2000      	movs	r0, #0
 800049a:	f001 f9c5 	bl	8001828 <Chara_8>
		  break;
 800049e:	e003      	b.n	80004a8 <main+0xb8>

	  case 9:
		  Chara_9(MinuteUnite);
 80004a0:	2000      	movs	r0, #0
 80004a2:	f001 fa91 	bl	80019c8 <Chara_9>
		  break;
 80004a6:	46c0      	nop			; (mov r8, r8)
	  }

	  /**********Caractère Minute Dizaine***************/
	  switch(Minutes_D)
 80004a8:	4b4f      	ldr	r3, [pc, #316]	; (80005e8 <main+0x1f8>)
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	2b09      	cmp	r3, #9
 80004ae:	d82c      	bhi.n	800050a <main+0x11a>
 80004b0:	009a      	lsls	r2, r3, #2
 80004b2:	4b4e      	ldr	r3, [pc, #312]	; (80005ec <main+0x1fc>)
 80004b4:	18d3      	adds	r3, r2, r3
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	469f      	mov	pc, r3
	  {
	  case 0:
		  Chara_0(MinuteDizaine);
 80004ba:	2001      	movs	r0, #1
 80004bc:	f000 fb34 	bl	8000b28 <Chara_0>
		  break;
 80004c0:	e023      	b.n	800050a <main+0x11a>

	  case 1:
		  Chara_1(MinuteDizaine);
 80004c2:	2001      	movs	r0, #1
 80004c4:	f000 fc00 	bl	8000cc8 <Chara_1>
		  break;
 80004c8:	e01f      	b.n	800050a <main+0x11a>

	  case 2:
		  Chara_2(MinuteDizaine);
 80004ca:	2001      	movs	r0, #1
 80004cc:	f000 fccc 	bl	8000e68 <Chara_2>
		  break;
 80004d0:	e01b      	b.n	800050a <main+0x11a>

	  case 3:
		  Chara_3(MinuteDizaine);
 80004d2:	2001      	movs	r0, #1
 80004d4:	f000 fd98 	bl	8001008 <Chara_3>
		  break;
 80004d8:	e017      	b.n	800050a <main+0x11a>

	  case 4:
		  Chara_4(MinuteDizaine);
 80004da:	2001      	movs	r0, #1
 80004dc:	f000 fe64 	bl	80011a8 <Chara_4>
		  break;
 80004e0:	e013      	b.n	800050a <main+0x11a>

	  case 5:
		  Chara_5(MinuteDizaine);
 80004e2:	2001      	movs	r0, #1
 80004e4:	f000 ff30 	bl	8001348 <Chara_5>
		  break;
 80004e8:	e00f      	b.n	800050a <main+0x11a>

	  case 6:
		  Chara_6(MinuteDizaine);
 80004ea:	2001      	movs	r0, #1
 80004ec:	f000 fffc 	bl	80014e8 <Chara_6>
		  break;
 80004f0:	e00b      	b.n	800050a <main+0x11a>

	  case 7:
		  Chara_7(MinuteDizaine);
 80004f2:	2001      	movs	r0, #1
 80004f4:	f001 f8c8 	bl	8001688 <Chara_7>
		  break;
 80004f8:	e007      	b.n	800050a <main+0x11a>

	  case 8:
		  Chara_8(MinuteDizaine);
 80004fa:	2001      	movs	r0, #1
 80004fc:	f001 f994 	bl	8001828 <Chara_8>
		  break;
 8000500:	e003      	b.n	800050a <main+0x11a>

	  case 9:
		  Chara_9(MinuteDizaine);
 8000502:	2001      	movs	r0, #1
 8000504:	f001 fa60 	bl	80019c8 <Chara_9>
		  break;
 8000508:	46c0      	nop			; (mov r8, r8)
	  }

	  /**********Caractère Heure Unité***************/
	  switch(Heures_U)
 800050a:	4b39      	ldr	r3, [pc, #228]	; (80005f0 <main+0x200>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	2b09      	cmp	r3, #9
 8000510:	d82c      	bhi.n	800056c <main+0x17c>
 8000512:	009a      	lsls	r2, r3, #2
 8000514:	4b37      	ldr	r3, [pc, #220]	; (80005f4 <main+0x204>)
 8000516:	18d3      	adds	r3, r2, r3
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	469f      	mov	pc, r3
	  {
	  case 0:
		  Chara_0(HeureUnite);
 800051c:	2002      	movs	r0, #2
 800051e:	f000 fb03 	bl	8000b28 <Chara_0>
		  break;
 8000522:	e023      	b.n	800056c <main+0x17c>

	  case 1:
		  Chara_1(HeureUnite);
 8000524:	2002      	movs	r0, #2
 8000526:	f000 fbcf 	bl	8000cc8 <Chara_1>
		  break;
 800052a:	e01f      	b.n	800056c <main+0x17c>

	  case 2:
		  Chara_2(HeureUnite);
 800052c:	2002      	movs	r0, #2
 800052e:	f000 fc9b 	bl	8000e68 <Chara_2>
		  break;
 8000532:	e01b      	b.n	800056c <main+0x17c>

	  case 3:
		  Chara_3(HeureUnite);
 8000534:	2002      	movs	r0, #2
 8000536:	f000 fd67 	bl	8001008 <Chara_3>
		  break;
 800053a:	e017      	b.n	800056c <main+0x17c>

	  case 4:
		  Chara_4(HeureUnite);
 800053c:	2002      	movs	r0, #2
 800053e:	f000 fe33 	bl	80011a8 <Chara_4>
		  break;
 8000542:	e013      	b.n	800056c <main+0x17c>

	  case 5:
		  Chara_5(HeureUnite);
 8000544:	2002      	movs	r0, #2
 8000546:	f000 feff 	bl	8001348 <Chara_5>
		  break;
 800054a:	e00f      	b.n	800056c <main+0x17c>

	  case 6:
		  Chara_6(HeureUnite);
 800054c:	2002      	movs	r0, #2
 800054e:	f000 ffcb 	bl	80014e8 <Chara_6>
		  break;
 8000552:	e00b      	b.n	800056c <main+0x17c>

	  case 7:
		  Chara_7(HeureUnite);
 8000554:	2002      	movs	r0, #2
 8000556:	f001 f897 	bl	8001688 <Chara_7>
		  break;
 800055a:	e007      	b.n	800056c <main+0x17c>

	  case 8:
		  Chara_8(HeureUnite);
 800055c:	2002      	movs	r0, #2
 800055e:	f001 f963 	bl	8001828 <Chara_8>
		  break;
 8000562:	e003      	b.n	800056c <main+0x17c>

	  case 9:
		  Chara_9(HeureUnite);
 8000564:	2002      	movs	r0, #2
 8000566:	f001 fa2f 	bl	80019c8 <Chara_9>
		  break;
 800056a:	46c0      	nop			; (mov r8, r8)
	  }

	/**********Caractère Heure Dizaine***************/
	  switch(Heures_D)
 800056c:	4b22      	ldr	r3, [pc, #136]	; (80005f8 <main+0x208>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	2b09      	cmp	r3, #9
 8000572:	d82c      	bhi.n	80005ce <main+0x1de>
 8000574:	009a      	lsls	r2, r3, #2
 8000576:	4b21      	ldr	r3, [pc, #132]	; (80005fc <main+0x20c>)
 8000578:	18d3      	adds	r3, r2, r3
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	469f      	mov	pc, r3
	  {
	  case 0:
		  Chara_0(HeureDizaine);
 800057e:	2003      	movs	r0, #3
 8000580:	f000 fad2 	bl	8000b28 <Chara_0>
		  break;
 8000584:	e023      	b.n	80005ce <main+0x1de>

	  case 1:
		  Chara_1(HeureDizaine);
 8000586:	2003      	movs	r0, #3
 8000588:	f000 fb9e 	bl	8000cc8 <Chara_1>
		  break;
 800058c:	e01f      	b.n	80005ce <main+0x1de>

	  case 2:
		  Chara_2(HeureDizaine);
 800058e:	2003      	movs	r0, #3
 8000590:	f000 fc6a 	bl	8000e68 <Chara_2>
		  break;
 8000594:	e01b      	b.n	80005ce <main+0x1de>

	  case 3:
		  Chara_3(HeureDizaine);
 8000596:	2003      	movs	r0, #3
 8000598:	f000 fd36 	bl	8001008 <Chara_3>
		  break;
 800059c:	e017      	b.n	80005ce <main+0x1de>

	  case 4:
		  Chara_4(HeureDizaine);
 800059e:	2003      	movs	r0, #3
 80005a0:	f000 fe02 	bl	80011a8 <Chara_4>
		  break;
 80005a4:	e013      	b.n	80005ce <main+0x1de>

	  case 5:
		  Chara_5(HeureDizaine);
 80005a6:	2003      	movs	r0, #3
 80005a8:	f000 fece 	bl	8001348 <Chara_5>
		  break;
 80005ac:	e00f      	b.n	80005ce <main+0x1de>

	  case 6:
		  Chara_6(HeureDizaine);
 80005ae:	2003      	movs	r0, #3
 80005b0:	f000 ff9a 	bl	80014e8 <Chara_6>
		  break;
 80005b4:	e00b      	b.n	80005ce <main+0x1de>

	  case 7:
		  Chara_7(HeureDizaine);
 80005b6:	2003      	movs	r0, #3
 80005b8:	f001 f866 	bl	8001688 <Chara_7>
		  break;
 80005bc:	e007      	b.n	80005ce <main+0x1de>

	  case 8:
		  Chara_8(HeureDizaine);
 80005be:	2003      	movs	r0, #3
 80005c0:	f001 f932 	bl	8001828 <Chara_8>
		  break;
 80005c4:	e003      	b.n	80005ce <main+0x1de>

	  case 9:
		  Chara_9(HeureDizaine);
 80005c6:	2003      	movs	r0, #3
 80005c8:	f001 f9fe 	bl	80019c8 <Chara_9>
		  break;
 80005cc:	46c0      	nop			; (mov r8, r8)
	  }

	  Clignotement1S();
 80005ce:	f001 facb 	bl	8001b68 <Clignotement1S>
	  if(HAL_UART_Receive_IT(&huart1, Rx_data, 19) != HAL_BUSY)
 80005d2:	e729      	b.n	8000428 <main+0x38>
 80005d4:	20000c70 	.word	0x20000c70
 80005d8:	20000b9c 	.word	0x20000b9c
 80005dc:	20000a8c 	.word	0x20000a8c
 80005e0:	20000c6c 	.word	0x20000c6c
 80005e4:	08006284 	.word	0x08006284
 80005e8:	20000c6d 	.word	0x20000c6d
 80005ec:	080062ac 	.word	0x080062ac
 80005f0:	20000c69 	.word	0x20000c69
 80005f4:	080062d4 	.word	0x080062d4
 80005f8:	20000c6a 	.word	0x20000c6a
 80005fc:	080062fc 	.word	0x080062fc

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b590      	push	{r4, r7, lr}
 8000602:	b099      	sub	sp, #100	; 0x64
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	242c      	movs	r4, #44	; 0x2c
 8000608:	193b      	adds	r3, r7, r4
 800060a:	0018      	movs	r0, r3
 800060c:	2334      	movs	r3, #52	; 0x34
 800060e:	001a      	movs	r2, r3
 8000610:	2100      	movs	r1, #0
 8000612:	f005 fdf2 	bl	80061fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000616:	231c      	movs	r3, #28
 8000618:	18fb      	adds	r3, r7, r3
 800061a:	0018      	movs	r0, r3
 800061c:	2310      	movs	r3, #16
 800061e:	001a      	movs	r2, r3
 8000620:	2100      	movs	r1, #0
 8000622:	f005 fdea 	bl	80061fa <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	0018      	movs	r0, r3
 800062a:	2318      	movs	r3, #24
 800062c:	001a      	movs	r2, r3
 800062e:	2100      	movs	r1, #0
 8000630:	f005 fde3 	bl	80061fa <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000634:	0021      	movs	r1, r4
 8000636:	187b      	adds	r3, r7, r1
 8000638:	2212      	movs	r2, #18
 800063a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800063c:	187b      	adds	r3, r7, r1
 800063e:	2201      	movs	r2, #1
 8000640:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000642:	187b      	adds	r3, r7, r1
 8000644:	2201      	movs	r2, #1
 8000646:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000648:	187b      	adds	r3, r7, r1
 800064a:	2210      	movs	r2, #16
 800064c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800064e:	187b      	adds	r3, r7, r1
 8000650:	2210      	movs	r2, #16
 8000652:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000654:	187b      	adds	r3, r7, r1
 8000656:	2200      	movs	r2, #0
 8000658:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065a:	187b      	adds	r3, r7, r1
 800065c:	0018      	movs	r0, r3
 800065e:	f002 fda5 	bl	80031ac <HAL_RCC_OscConfig>
 8000662:	1e03      	subs	r3, r0, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000666:	f001 fab9 	bl	8001bdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066a:	211c      	movs	r1, #28
 800066c:	187b      	adds	r3, r7, r1
 800066e:	2207      	movs	r2, #7
 8000670:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000672:	187b      	adds	r3, r7, r1
 8000674:	2200      	movs	r2, #0
 8000676:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000678:	187b      	adds	r3, r7, r1
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800067e:	187b      	adds	r3, r7, r1
 8000680:	2200      	movs	r2, #0
 8000682:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000684:	187b      	adds	r3, r7, r1
 8000686:	2100      	movs	r1, #0
 8000688:	0018      	movs	r0, r3
 800068a:	f003 f915 	bl	80038b8 <HAL_RCC_ClockConfig>
 800068e:	1e03      	subs	r3, r0, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000692:	f001 faa3 	bl	8001bdc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	2201      	movs	r2, #1
 800069a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	2200      	movs	r2, #0
 80006a0:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	0018      	movs	r0, r3
 80006a6:	f003 fa73 	bl	8003b90 <HAL_RCCEx_PeriphCLKConfig>
 80006aa:	1e03      	subs	r3, r0, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80006ae:	f001 fa95 	bl	8001bdc <Error_Handler>
  }
}
 80006b2:	46c0      	nop			; (mov r8, r8)
 80006b4:	46bd      	mov	sp, r7
 80006b6:	b019      	add	sp, #100	; 0x64
 80006b8:	bd90      	pop	{r4, r7, pc}
	...

080006bc <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	0018      	movs	r0, r3
 80006c6:	230c      	movs	r3, #12
 80006c8:	001a      	movs	r2, r3
 80006ca:	2100      	movs	r1, #0
 80006cc:	f005 fd95 	bl	80061fa <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80006d0:	4b26      	ldr	r3, [pc, #152]	; (800076c <MX_ADC_Init+0xb0>)
 80006d2:	4a27      	ldr	r2, [pc, #156]	; (8000770 <MX_ADC_Init+0xb4>)
 80006d4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006d6:	4b25      	ldr	r3, [pc, #148]	; (800076c <MX_ADC_Init+0xb0>)
 80006d8:	2200      	movs	r2, #0
 80006da:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80006dc:	4b23      	ldr	r3, [pc, #140]	; (800076c <MX_ADC_Init+0xb0>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006e2:	4b22      	ldr	r3, [pc, #136]	; (800076c <MX_ADC_Init+0xb0>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80006e8:	4b20      	ldr	r3, [pc, #128]	; (800076c <MX_ADC_Init+0xb0>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006ee:	4b1f      	ldr	r3, [pc, #124]	; (800076c <MX_ADC_Init+0xb0>)
 80006f0:	2204      	movs	r2, #4
 80006f2:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80006f4:	4b1d      	ldr	r3, [pc, #116]	; (800076c <MX_ADC_Init+0xb0>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80006fa:	4b1c      	ldr	r3, [pc, #112]	; (800076c <MX_ADC_Init+0xb0>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000700:	4b1a      	ldr	r3, [pc, #104]	; (800076c <MX_ADC_Init+0xb0>)
 8000702:	2201      	movs	r2, #1
 8000704:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000706:	4b19      	ldr	r3, [pc, #100]	; (800076c <MX_ADC_Init+0xb0>)
 8000708:	2200      	movs	r2, #0
 800070a:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800070c:	4b17      	ldr	r3, [pc, #92]	; (800076c <MX_ADC_Init+0xb0>)
 800070e:	22c2      	movs	r2, #194	; 0xc2
 8000710:	32ff      	adds	r2, #255	; 0xff
 8000712:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000714:	4b15      	ldr	r3, [pc, #84]	; (800076c <MX_ADC_Init+0xb0>)
 8000716:	2200      	movs	r2, #0
 8000718:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800071a:	4b14      	ldr	r3, [pc, #80]	; (800076c <MX_ADC_Init+0xb0>)
 800071c:	2224      	movs	r2, #36	; 0x24
 800071e:	2100      	movs	r1, #0
 8000720:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000722:	4b12      	ldr	r3, [pc, #72]	; (800076c <MX_ADC_Init+0xb0>)
 8000724:	2201      	movs	r2, #1
 8000726:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000728:	4b10      	ldr	r3, [pc, #64]	; (800076c <MX_ADC_Init+0xb0>)
 800072a:	0018      	movs	r0, r3
 800072c:	f001 fd00 	bl	8002130 <HAL_ADC_Init>
 8000730:	1e03      	subs	r3, r0, #0
 8000732:	d001      	beq.n	8000738 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000734:	f001 fa52 	bl	8001bdc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000738:	1d3b      	adds	r3, r7, #4
 800073a:	2207      	movs	r2, #7
 800073c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	2280      	movs	r2, #128	; 0x80
 8000742:	0152      	lsls	r2, r2, #5
 8000744:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	2280      	movs	r2, #128	; 0x80
 800074a:	0552      	lsls	r2, r2, #21
 800074c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800074e:	1d3a      	adds	r2, r7, #4
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <MX_ADC_Init+0xb0>)
 8000752:	0011      	movs	r1, r2
 8000754:	0018      	movs	r0, r3
 8000756:	f001 ff3b 	bl	80025d0 <HAL_ADC_ConfigChannel>
 800075a:	1e03      	subs	r3, r0, #0
 800075c:	d001      	beq.n	8000762 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 800075e:	f001 fa3d 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	46bd      	mov	sp, r7
 8000766:	b004      	add	sp, #16
 8000768:	bd80      	pop	{r7, pc}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	20000a8c 	.word	0x20000a8c
 8000770:	40012400 	.word	0x40012400

08000774 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08e      	sub	sp, #56	; 0x38
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800077a:	2328      	movs	r3, #40	; 0x28
 800077c:	18fb      	adds	r3, r7, r3
 800077e:	0018      	movs	r0, r3
 8000780:	2310      	movs	r3, #16
 8000782:	001a      	movs	r2, r3
 8000784:	2100      	movs	r1, #0
 8000786:	f005 fd38 	bl	80061fa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800078a:	2320      	movs	r3, #32
 800078c:	18fb      	adds	r3, r7, r3
 800078e:	0018      	movs	r0, r3
 8000790:	2308      	movs	r3, #8
 8000792:	001a      	movs	r2, r3
 8000794:	2100      	movs	r1, #0
 8000796:	f005 fd30 	bl	80061fa <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	0018      	movs	r0, r3
 800079e:	231c      	movs	r3, #28
 80007a0:	001a      	movs	r2, r3
 80007a2:	2100      	movs	r1, #0
 80007a4:	f005 fd29 	bl	80061fa <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007a8:	4b30      	ldr	r3, [pc, #192]	; (800086c <MX_TIM2_Init+0xf8>)
 80007aa:	2280      	movs	r2, #128	; 0x80
 80007ac:	05d2      	lsls	r2, r2, #23
 80007ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007b0:	4b2e      	ldr	r3, [pc, #184]	; (800086c <MX_TIM2_Init+0xf8>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b6:	4b2d      	ldr	r3, [pc, #180]	; (800086c <MX_TIM2_Init+0xf8>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 80007bc:	4b2b      	ldr	r3, [pc, #172]	; (800086c <MX_TIM2_Init+0xf8>)
 80007be:	2209      	movs	r2, #9
 80007c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c2:	4b2a      	ldr	r3, [pc, #168]	; (800086c <MX_TIM2_Init+0xf8>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007c8:	4b28      	ldr	r3, [pc, #160]	; (800086c <MX_TIM2_Init+0xf8>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007ce:	4b27      	ldr	r3, [pc, #156]	; (800086c <MX_TIM2_Init+0xf8>)
 80007d0:	0018      	movs	r0, r3
 80007d2:	f003 facb 	bl	8003d6c <HAL_TIM_Base_Init>
 80007d6:	1e03      	subs	r3, r0, #0
 80007d8:	d001      	beq.n	80007de <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80007da:	f001 f9ff 	bl	8001bdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007de:	2128      	movs	r1, #40	; 0x28
 80007e0:	187b      	adds	r3, r7, r1
 80007e2:	2280      	movs	r2, #128	; 0x80
 80007e4:	0152      	lsls	r2, r2, #5
 80007e6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007e8:	187a      	adds	r2, r7, r1
 80007ea:	4b20      	ldr	r3, [pc, #128]	; (800086c <MX_TIM2_Init+0xf8>)
 80007ec:	0011      	movs	r1, r2
 80007ee:	0018      	movs	r0, r3
 80007f0:	f003 fdd4 	bl	800439c <HAL_TIM_ConfigClockSource>
 80007f4:	1e03      	subs	r3, r0, #0
 80007f6:	d001      	beq.n	80007fc <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80007f8:	f001 f9f0 	bl	8001bdc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007fc:	4b1b      	ldr	r3, [pc, #108]	; (800086c <MX_TIM2_Init+0xf8>)
 80007fe:	0018      	movs	r0, r3
 8000800:	f003 fb04 	bl	8003e0c <HAL_TIM_PWM_Init>
 8000804:	1e03      	subs	r3, r0, #0
 8000806:	d001      	beq.n	800080c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000808:	f001 f9e8 	bl	8001bdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800080c:	2120      	movs	r1, #32
 800080e:	187b      	adds	r3, r7, r1
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000814:	187b      	adds	r3, r7, r1
 8000816:	2200      	movs	r2, #0
 8000818:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800081a:	187a      	adds	r2, r7, r1
 800081c:	4b13      	ldr	r3, [pc, #76]	; (800086c <MX_TIM2_Init+0xf8>)
 800081e:	0011      	movs	r1, r2
 8000820:	0018      	movs	r0, r3
 8000822:	f004 fa8f 	bl	8004d44 <HAL_TIMEx_MasterConfigSynchronization>
 8000826:	1e03      	subs	r3, r0, #0
 8000828:	d001      	beq.n	800082e <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 800082a:	f001 f9d7 	bl	8001bdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2260      	movs	r2, #96	; 0x60
 8000832:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	2200      	movs	r2, #0
 8000838:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000840:	1d3b      	adds	r3, r7, #4
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000846:	1d39      	adds	r1, r7, #4
 8000848:	4b08      	ldr	r3, [pc, #32]	; (800086c <MX_TIM2_Init+0xf8>)
 800084a:	2200      	movs	r2, #0
 800084c:	0018      	movs	r0, r3
 800084e:	f003 fcdf 	bl	8004210 <HAL_TIM_PWM_ConfigChannel>
 8000852:	1e03      	subs	r3, r0, #0
 8000854:	d001      	beq.n	800085a <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8000856:	f001 f9c1 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800085a:	4b04      	ldr	r3, [pc, #16]	; (800086c <MX_TIM2_Init+0xf8>)
 800085c:	0018      	movs	r0, r3
 800085e:	f001 faa9 	bl	8001db4 <HAL_TIM_MspPostInit>

}
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	46bd      	mov	sp, r7
 8000866:	b00e      	add	sp, #56	; 0x38
 8000868:	bd80      	pop	{r7, pc}
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	20000b10 	.word	0x20000b10

08000870 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000874:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <MX_USART1_UART_Init+0x58>)
 8000876:	4a15      	ldr	r2, [pc, #84]	; (80008cc <MX_USART1_UART_Init+0x5c>)
 8000878:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 250000;
 800087a:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <MX_USART1_UART_Init+0x58>)
 800087c:	4a14      	ldr	r2, [pc, #80]	; (80008d0 <MX_USART1_UART_Init+0x60>)
 800087e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000880:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_USART1_UART_Init+0x58>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000886:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <MX_USART1_UART_Init+0x58>)
 8000888:	2200      	movs	r2, #0
 800088a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800088c:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <MX_USART1_UART_Init+0x58>)
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000892:	4b0d      	ldr	r3, [pc, #52]	; (80008c8 <MX_USART1_UART_Init+0x58>)
 8000894:	220c      	movs	r2, #12
 8000896:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000898:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <MX_USART1_UART_Init+0x58>)
 800089a:	2200      	movs	r2, #0
 800089c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800089e:	4b0a      	ldr	r3, [pc, #40]	; (80008c8 <MX_USART1_UART_Init+0x58>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008a4:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <MX_USART1_UART_Init+0x58>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008aa:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <MX_USART1_UART_Init+0x58>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008b0:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <MX_USART1_UART_Init+0x58>)
 80008b2:	0018      	movs	r0, r3
 80008b4:	f004 fa9e 	bl	8004df4 <HAL_UART_Init>
 80008b8:	1e03      	subs	r3, r0, #0
 80008ba:	d001      	beq.n	80008c0 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 80008bc:	f001 f98e 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008c0:	46c0      	nop			; (mov r8, r8)
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	20000b9c 	.word	0x20000b9c
 80008cc:	40013800 	.word	0x40013800
 80008d0:	0003d090 	.word	0x0003d090

080008d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008da:	4b14      	ldr	r3, [pc, #80]	; (800092c <MX_DMA_Init+0x58>)
 80008dc:	695a      	ldr	r2, [r3, #20]
 80008de:	4b13      	ldr	r3, [pc, #76]	; (800092c <MX_DMA_Init+0x58>)
 80008e0:	2101      	movs	r1, #1
 80008e2:	430a      	orrs	r2, r1
 80008e4:	615a      	str	r2, [r3, #20]
 80008e6:	4b11      	ldr	r3, [pc, #68]	; (800092c <MX_DMA_Init+0x58>)
 80008e8:	695b      	ldr	r3, [r3, #20]
 80008ea:	2201      	movs	r2, #1
 80008ec:	4013      	ands	r3, r2
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2100      	movs	r1, #0
 80008f6:	2009      	movs	r0, #9
 80008f8:	f002 f8a8 	bl	8002a4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80008fc:	2009      	movs	r0, #9
 80008fe:	f002 f8ba 	bl	8002a76 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000902:	2200      	movs	r2, #0
 8000904:	2100      	movs	r1, #0
 8000906:	200a      	movs	r0, #10
 8000908:	f002 f8a0 	bl	8002a4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800090c:	200a      	movs	r0, #10
 800090e:	f002 f8b2 	bl	8002a76 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8000912:	2200      	movs	r2, #0
 8000914:	2100      	movs	r1, #0
 8000916:	200b      	movs	r0, #11
 8000918:	f002 f898 	bl	8002a4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 800091c:	200b      	movs	r0, #11
 800091e:	f002 f8aa 	bl	8002a76 <HAL_NVIC_EnableIRQ>

}
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	46bd      	mov	sp, r7
 8000926:	b002      	add	sp, #8
 8000928:	bd80      	pop	{r7, pc}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	40021000 	.word	0x40021000

08000930 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000930:	b590      	push	{r4, r7, lr}
 8000932:	b089      	sub	sp, #36	; 0x24
 8000934:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000936:	240c      	movs	r4, #12
 8000938:	193b      	adds	r3, r7, r4
 800093a:	0018      	movs	r0, r3
 800093c:	2314      	movs	r3, #20
 800093e:	001a      	movs	r2, r3
 8000940:	2100      	movs	r1, #0
 8000942:	f005 fc5a 	bl	80061fa <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000946:	4b27      	ldr	r3, [pc, #156]	; (80009e4 <MX_GPIO_Init+0xb4>)
 8000948:	695a      	ldr	r2, [r3, #20]
 800094a:	4b26      	ldr	r3, [pc, #152]	; (80009e4 <MX_GPIO_Init+0xb4>)
 800094c:	2180      	movs	r1, #128	; 0x80
 800094e:	03c9      	lsls	r1, r1, #15
 8000950:	430a      	orrs	r2, r1
 8000952:	615a      	str	r2, [r3, #20]
 8000954:	4b23      	ldr	r3, [pc, #140]	; (80009e4 <MX_GPIO_Init+0xb4>)
 8000956:	695a      	ldr	r2, [r3, #20]
 8000958:	2380      	movs	r3, #128	; 0x80
 800095a:	03db      	lsls	r3, r3, #15
 800095c:	4013      	ands	r3, r2
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000962:	4b20      	ldr	r3, [pc, #128]	; (80009e4 <MX_GPIO_Init+0xb4>)
 8000964:	695a      	ldr	r2, [r3, #20]
 8000966:	4b1f      	ldr	r3, [pc, #124]	; (80009e4 <MX_GPIO_Init+0xb4>)
 8000968:	2180      	movs	r1, #128	; 0x80
 800096a:	0289      	lsls	r1, r1, #10
 800096c:	430a      	orrs	r2, r1
 800096e:	615a      	str	r2, [r3, #20]
 8000970:	4b1c      	ldr	r3, [pc, #112]	; (80009e4 <MX_GPIO_Init+0xb4>)
 8000972:	695a      	ldr	r2, [r3, #20]
 8000974:	2380      	movs	r3, #128	; 0x80
 8000976:	029b      	lsls	r3, r3, #10
 8000978:	4013      	ands	r3, r2
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097e:	4b19      	ldr	r3, [pc, #100]	; (80009e4 <MX_GPIO_Init+0xb4>)
 8000980:	695a      	ldr	r2, [r3, #20]
 8000982:	4b18      	ldr	r3, [pc, #96]	; (80009e4 <MX_GPIO_Init+0xb4>)
 8000984:	2180      	movs	r1, #128	; 0x80
 8000986:	02c9      	lsls	r1, r1, #11
 8000988:	430a      	orrs	r2, r1
 800098a:	615a      	str	r2, [r3, #20]
 800098c:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <MX_GPIO_Init+0xb4>)
 800098e:	695a      	ldr	r2, [r3, #20]
 8000990:	2380      	movs	r3, #128	; 0x80
 8000992:	02db      	lsls	r3, r3, #11
 8000994:	4013      	ands	r3, r2
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : SW4_Pin SW3_Pin */
  GPIO_InitStruct.Pin = SW4_Pin|SW3_Pin;
 800099a:	193b      	adds	r3, r7, r4
 800099c:	2290      	movs	r2, #144	; 0x90
 800099e:	0112      	lsls	r2, r2, #4
 80009a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a2:	193b      	adds	r3, r7, r4
 80009a4:	2200      	movs	r2, #0
 80009a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	193b      	adds	r3, r7, r4
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ae:	193a      	adds	r2, r7, r4
 80009b0:	2390      	movs	r3, #144	; 0x90
 80009b2:	05db      	lsls	r3, r3, #23
 80009b4:	0011      	movs	r1, r2
 80009b6:	0018      	movs	r0, r3
 80009b8:	f002 fa90 	bl	8002edc <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 80009bc:	193b      	adds	r3, r7, r4
 80009be:	2230      	movs	r2, #48	; 0x30
 80009c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c2:	193b      	adds	r3, r7, r4
 80009c4:	2200      	movs	r2, #0
 80009c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	193b      	adds	r3, r7, r4
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ce:	193b      	adds	r3, r7, r4
 80009d0:	4a05      	ldr	r2, [pc, #20]	; (80009e8 <MX_GPIO_Init+0xb8>)
 80009d2:	0019      	movs	r1, r3
 80009d4:	0010      	movs	r0, r2
 80009d6:	f002 fa81 	bl	8002edc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	46bd      	mov	sp, r7
 80009de:	b009      	add	sp, #36	; 0x24
 80009e0:	bd90      	pop	{r4, r7, pc}
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	40021000 	.word	0x40021000
 80009e8:	48000400 	.word	0x48000400

080009ec <HAL_UART_RxCpltCallback>:
* Interruption qui va mettre dans des variables la réception UART comme le	  *
* temps										 								  *
******************************************************************************/

void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]

	if(&huart1 == huart)
 80009f4:	687a      	ldr	r2, [r7, #4]
 80009f6:	4b1c      	ldr	r3, [pc, #112]	; (8000a68 <HAL_UART_RxCpltCallback+0x7c>)
 80009f8:	429a      	cmp	r2, r3
 80009fa:	d130      	bne.n	8000a5e <HAL_UART_RxCpltCallback+0x72>
	{
		Heures_brt = Rx_data[4];	//Stock le data des heures, "brt" = brute
 80009fc:	4b1b      	ldr	r3, [pc, #108]	; (8000a6c <HAL_UART_RxCpltCallback+0x80>)
 80009fe:	791a      	ldrb	r2, [r3, #4]
 8000a00:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <HAL_UART_RxCpltCallback+0x84>)
 8000a02:	701a      	strb	r2, [r3, #0]
		Minutes_brt = Rx_data[5];	//Stock le data des minutes
 8000a04:	4b19      	ldr	r3, [pc, #100]	; (8000a6c <HAL_UART_RxCpltCallback+0x80>)
 8000a06:	795a      	ldrb	r2, [r3, #5]
 8000a08:	4b1a      	ldr	r3, [pc, #104]	; (8000a74 <HAL_UART_RxCpltCallback+0x88>)
 8000a0a:	701a      	strb	r2, [r3, #0]

		Heures_U = Heures_brt & 0x0F;	//Traite le data pour avoir l'Unité des Heures
 8000a0c:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <HAL_UART_RxCpltCallback+0x84>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	220f      	movs	r2, #15
 8000a12:	4013      	ands	r3, r2
 8000a14:	b2da      	uxtb	r2, r3
 8000a16:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <HAL_UART_RxCpltCallback+0x8c>)
 8000a18:	701a      	strb	r2, [r3, #0]

		Heures_D = (Heures_brt & 0xF0) >> 4;	//Traite le data pour avoir la Dizaine des Heures
 8000a1a:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <HAL_UART_RxCpltCallback+0x84>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	091b      	lsrs	r3, r3, #4
 8000a20:	b2da      	uxtb	r2, r3
 8000a22:	4b16      	ldr	r3, [pc, #88]	; (8000a7c <HAL_UART_RxCpltCallback+0x90>)
 8000a24:	701a      	strb	r2, [r3, #0]

		Minutes_U = Minutes_brt & 0x0F;	//Traite le data pour avoir l'Unité des Minutes
 8000a26:	4b13      	ldr	r3, [pc, #76]	; (8000a74 <HAL_UART_RxCpltCallback+0x88>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	220f      	movs	r2, #15
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <HAL_UART_RxCpltCallback+0x94>)
 8000a32:	701a      	strb	r2, [r3, #0]

		Minutes_D = (Minutes_brt & 0xF0) >> 4;	//Traite le data pour avoir la Dizaine des Minutes
 8000a34:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <HAL_UART_RxCpltCallback+0x88>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	091b      	lsrs	r3, r3, #4
 8000a3a:	b2da      	uxtb	r2, r3
 8000a3c:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <HAL_UART_RxCpltCallback+0x98>)
 8000a3e:	701a      	strb	r2, [r3, #0]

		if(HAL_UART_Receive_IT(&huart1, Rx_data, 19) == HAL_ERROR)	//Réception d'UART lors d'une erreur
 8000a40:	490a      	ldr	r1, [pc, #40]	; (8000a6c <HAL_UART_RxCpltCallback+0x80>)
 8000a42:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <HAL_UART_RxCpltCallback+0x7c>)
 8000a44:	2213      	movs	r2, #19
 8000a46:	0018      	movs	r0, r3
 8000a48:	f004 fa28 	bl	8004e9c <HAL_UART_Receive_IT>
 8000a4c:	0003      	movs	r3, r0
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d105      	bne.n	8000a5e <HAL_UART_RxCpltCallback+0x72>
		{
			HAL_UART_Receive_IT(&huart1, Rx_data, 19);
 8000a52:	4906      	ldr	r1, [pc, #24]	; (8000a6c <HAL_UART_RxCpltCallback+0x80>)
 8000a54:	4b04      	ldr	r3, [pc, #16]	; (8000a68 <HAL_UART_RxCpltCallback+0x7c>)
 8000a56:	2213      	movs	r2, #19
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f004 fa1f 	bl	8004e9c <HAL_UART_Receive_IT>
		}
	}
}
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	46bd      	mov	sp, r7
 8000a62:	b002      	add	sp, #8
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	20000b9c 	.word	0x20000b9c
 8000a6c:	20000c70 	.word	0x20000c70
 8000a70:	20000c68 	.word	0x20000c68
 8000a74:	20000c6b 	.word	0x20000c6b
 8000a78:	20000c69 	.word	0x20000c69
 8000a7c:	20000c6a 	.word	0x20000c6a
 8000a80:	20000c6c 	.word	0x20000c6c
 8000a84:	20000c6d 	.word	0x20000c6d

08000a88 <HAL_UART_ErrorCallback>:
* Interruption lorsqu'il y a un problème dans la transmission UART qui permet *
* de refaire une réception									 				  *
******************************************************************************/

void HAL_UART_ErrorCallback (UART_HandleTypeDef * huart)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	if(&huart1 == huart)
 8000a90:	687a      	ldr	r2, [r7, #4]
 8000a92:	4b06      	ldr	r3, [pc, #24]	; (8000aac <HAL_UART_ErrorCallback+0x24>)
 8000a94:	429a      	cmp	r2, r3
 8000a96:	d105      	bne.n	8000aa4 <HAL_UART_ErrorCallback+0x1c>
	{
		HAL_UART_Receive_IT(&huart1, Rx_data, 19);
 8000a98:	4905      	ldr	r1, [pc, #20]	; (8000ab0 <HAL_UART_ErrorCallback+0x28>)
 8000a9a:	4b04      	ldr	r3, [pc, #16]	; (8000aac <HAL_UART_ErrorCallback+0x24>)
 8000a9c:	2213      	movs	r2, #19
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f004 f9fc 	bl	8004e9c <HAL_UART_Receive_IT>
	}
}
 8000aa4:	46c0      	nop			; (mov r8, r8)
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	b002      	add	sp, #8
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20000b9c 	.word	0x20000b9c
 8000ab0:	20000c70 	.word	0x20000c70

08000ab4 <LEDs_L_C_RGB>:
* Allume la LED qu'on veut grâce aux paramètres "Ligne" et "Colonne".		  *
* Choisi l'intensité des couleurs RGB									 	  *
******************************************************************************/

void LEDs_L_C_RGB (uint8_t Ligne, uint8_t Colonne, uint8_t Red, uint8_t Green, uint8_t Blue)
{
 8000ab4:	b5b0      	push	{r4, r5, r7, lr}
 8000ab6:	b09a      	sub	sp, #104	; 0x68
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	0005      	movs	r5, r0
 8000abc:	000c      	movs	r4, r1
 8000abe:	0010      	movs	r0, r2
 8000ac0:	0019      	movs	r1, r3
 8000ac2:	1dfb      	adds	r3, r7, #7
 8000ac4:	1c2a      	adds	r2, r5, #0
 8000ac6:	701a      	strb	r2, [r3, #0]
 8000ac8:	1dbb      	adds	r3, r7, #6
 8000aca:	1c22      	adds	r2, r4, #0
 8000acc:	701a      	strb	r2, [r3, #0]
 8000ace:	1d7b      	adds	r3, r7, #5
 8000ad0:	1c02      	adds	r2, r0, #0
 8000ad2:	701a      	strb	r2, [r3, #0]
 8000ad4:	1d3b      	adds	r3, r7, #4
 8000ad6:	1c0a      	adds	r2, r1, #0
 8000ad8:	701a      	strb	r2, [r3, #0]
	uint8_t led_l_c[5][19] = {
 8000ada:	2408      	movs	r4, #8
 8000adc:	193a      	adds	r2, r7, r4
 8000ade:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <LEDs_L_C_RGB+0x70>)
 8000ae0:	0010      	movs	r0, r2
 8000ae2:	0019      	movs	r1, r3
 8000ae4:	235f      	movs	r3, #95	; 0x5f
 8000ae6:	001a      	movs	r2, r3
 8000ae8:	f005 fb7e 	bl	80061e8 <memcpy>
			{1, 6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56, 61, 66, 71, 76, 81, 86, 91},
			{0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90}
	};


	setLEDcolor(led_l_c[Ligne][Colonne], Red, Green, Blue);
 8000aec:	1dfb      	adds	r3, r7, #7
 8000aee:	781a      	ldrb	r2, [r3, #0]
 8000af0:	1dbb      	adds	r3, r7, #6
 8000af2:	7819      	ldrb	r1, [r3, #0]
 8000af4:	1938      	adds	r0, r7, r4
 8000af6:	0013      	movs	r3, r2
 8000af8:	00db      	lsls	r3, r3, #3
 8000afa:	189b      	adds	r3, r3, r2
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	189b      	adds	r3, r3, r2
 8000b00:	18c3      	adds	r3, r0, r3
 8000b02:	5c5b      	ldrb	r3, [r3, r1]
 8000b04:	001c      	movs	r4, r3
 8000b06:	2378      	movs	r3, #120	; 0x78
 8000b08:	18fb      	adds	r3, r7, r3
 8000b0a:	7818      	ldrb	r0, [r3, #0]
 8000b0c:	1d3b      	adds	r3, r7, #4
 8000b0e:	781a      	ldrb	r2, [r3, #0]
 8000b10:	1d7b      	adds	r3, r7, #5
 8000b12:	7819      	ldrb	r1, [r3, #0]
 8000b14:	0003      	movs	r3, r0
 8000b16:	0020      	movs	r0, r4
 8000b18:	f7ff fb9c 	bl	8000254 <setLEDcolor>
}
 8000b1c:	46c0      	nop			; (mov r8, r8)
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	b01a      	add	sp, #104	; 0x68
 8000b22:	bdb0      	pop	{r4, r5, r7, pc}
 8000b24:	08006224 	.word	0x08006224

08000b28 <Chara_0>:
* Dessine la caractère "0" sur la matrice et la positionne aux emplacements	  *
* prédéfini des Heures(unité ou dizaine) et des Minutes(unité ou dizaine)	  *
******************************************************************************/

void Chara_0 (CharShiftTypeDef Shift)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af02      	add	r7, sp, #8
 8000b2e:	0002      	movs	r2, r0
 8000b30:	1dfb      	adds	r3, r7, #7
 8000b32:	701a      	strb	r2, [r3, #0]
	static uint8_t shiftChar;

	/*Décalage du caractère pour le placer dans la colonne des unité/dizaine ; Heure/Minute*/

	switch (Shift)
 8000b34:	1dfb      	adds	r3, r7, #7
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	2b03      	cmp	r3, #3
 8000b3a:	d014      	beq.n	8000b66 <Chara_0+0x3e>
 8000b3c:	dc17      	bgt.n	8000b6e <Chara_0+0x46>
 8000b3e:	2b02      	cmp	r3, #2
 8000b40:	d00d      	beq.n	8000b5e <Chara_0+0x36>
 8000b42:	dc14      	bgt.n	8000b6e <Chara_0+0x46>
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d002      	beq.n	8000b4e <Chara_0+0x26>
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d004      	beq.n	8000b56 <Chara_0+0x2e>
	case HeureDizaine:
		shiftChar = 0;
		break;

	default:
		break;
 8000b4c:	e00f      	b.n	8000b6e <Chara_0+0x46>
		shiftChar = 14;
 8000b4e:	4b5d      	ldr	r3, [pc, #372]	; (8000cc4 <Chara_0+0x19c>)
 8000b50:	220e      	movs	r2, #14
 8000b52:	701a      	strb	r2, [r3, #0]
		break;
 8000b54:	e00c      	b.n	8000b70 <Chara_0+0x48>
		shiftChar = 10;
 8000b56:	4b5b      	ldr	r3, [pc, #364]	; (8000cc4 <Chara_0+0x19c>)
 8000b58:	220a      	movs	r2, #10
 8000b5a:	701a      	strb	r2, [r3, #0]
		break;
 8000b5c:	e008      	b.n	8000b70 <Chara_0+0x48>
		shiftChar = 4;
 8000b5e:	4b59      	ldr	r3, [pc, #356]	; (8000cc4 <Chara_0+0x19c>)
 8000b60:	2204      	movs	r2, #4
 8000b62:	701a      	strb	r2, [r3, #0]
		break;
 8000b64:	e004      	b.n	8000b70 <Chara_0+0x48>
		shiftChar = 0;
 8000b66:	4b57      	ldr	r3, [pc, #348]	; (8000cc4 <Chara_0+0x19c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	701a      	strb	r2, [r3, #0]
		break;
 8000b6c:	e000      	b.n	8000b70 <Chara_0+0x48>
		break;
 8000b6e:	46c0      	nop			; (mov r8, r8)
	}

	/*Création du caractère 0 sur la matrice*/

	LEDs_L_C_RGB(0, 1+shiftChar, 10, 0, 0);
 8000b70:	4b54      	ldr	r3, [pc, #336]	; (8000cc4 <Chara_0+0x19c>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	3301      	adds	r3, #1
 8000b76:	b2d9      	uxtb	r1, r3
 8000b78:	2300      	movs	r3, #0
 8000b7a:	9300      	str	r3, [sp, #0]
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	220a      	movs	r2, #10
 8000b80:	2000      	movs	r0, #0
 8000b82:	f7ff ff97 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(1, 1+shiftChar, 10, 0, 0);
 8000b86:	4b4f      	ldr	r3, [pc, #316]	; (8000cc4 <Chara_0+0x19c>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	b2d9      	uxtb	r1, r3
 8000b8e:	2300      	movs	r3, #0
 8000b90:	9300      	str	r3, [sp, #0]
 8000b92:	2300      	movs	r3, #0
 8000b94:	220a      	movs	r2, #10
 8000b96:	2001      	movs	r0, #1
 8000b98:	f7ff ff8c 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(2, 1+shiftChar, 10, 0, 0);
 8000b9c:	4b49      	ldr	r3, [pc, #292]	; (8000cc4 <Chara_0+0x19c>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	b2d9      	uxtb	r1, r3
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	9300      	str	r3, [sp, #0]
 8000ba8:	2300      	movs	r3, #0
 8000baa:	220a      	movs	r2, #10
 8000bac:	2002      	movs	r0, #2
 8000bae:	f7ff ff81 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(3, 1+shiftChar, 10, 0, 0);
 8000bb2:	4b44      	ldr	r3, [pc, #272]	; (8000cc4 <Chara_0+0x19c>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	b2d9      	uxtb	r1, r3
 8000bba:	2300      	movs	r3, #0
 8000bbc:	9300      	str	r3, [sp, #0]
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	220a      	movs	r2, #10
 8000bc2:	2003      	movs	r0, #3
 8000bc4:	f7ff ff76 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(4, 1+shiftChar, 10, 0, 0);
 8000bc8:	4b3e      	ldr	r3, [pc, #248]	; (8000cc4 <Chara_0+0x19c>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	b2d9      	uxtb	r1, r3
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	9300      	str	r3, [sp, #0]
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	220a      	movs	r2, #10
 8000bd8:	2004      	movs	r0, #4
 8000bda:	f7ff ff6b 	bl	8000ab4 <LEDs_L_C_RGB>

	LEDs_L_C_RGB(0, 2+shiftChar, 10, 0, 0);
 8000bde:	4b39      	ldr	r3, [pc, #228]	; (8000cc4 <Chara_0+0x19c>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	3302      	adds	r3, #2
 8000be4:	b2d9      	uxtb	r1, r3
 8000be6:	2300      	movs	r3, #0
 8000be8:	9300      	str	r3, [sp, #0]
 8000bea:	2300      	movs	r3, #0
 8000bec:	220a      	movs	r2, #10
 8000bee:	2000      	movs	r0, #0
 8000bf0:	f7ff ff60 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(1, 2+shiftChar, 0, 0, 0);
 8000bf4:	4b33      	ldr	r3, [pc, #204]	; (8000cc4 <Chara_0+0x19c>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	3302      	adds	r3, #2
 8000bfa:	b2d9      	uxtb	r1, r3
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	9300      	str	r3, [sp, #0]
 8000c00:	2300      	movs	r3, #0
 8000c02:	2200      	movs	r2, #0
 8000c04:	2001      	movs	r0, #1
 8000c06:	f7ff ff55 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(2, 2+shiftChar, 0, 0, 0);
 8000c0a:	4b2e      	ldr	r3, [pc, #184]	; (8000cc4 <Chara_0+0x19c>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	3302      	adds	r3, #2
 8000c10:	b2d9      	uxtb	r1, r3
 8000c12:	2300      	movs	r3, #0
 8000c14:	9300      	str	r3, [sp, #0]
 8000c16:	2300      	movs	r3, #0
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2002      	movs	r0, #2
 8000c1c:	f7ff ff4a 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(3, 2+shiftChar, 0, 0, 0);
 8000c20:	4b28      	ldr	r3, [pc, #160]	; (8000cc4 <Chara_0+0x19c>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	3302      	adds	r3, #2
 8000c26:	b2d9      	uxtb	r1, r3
 8000c28:	2300      	movs	r3, #0
 8000c2a:	9300      	str	r3, [sp, #0]
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2003      	movs	r0, #3
 8000c32:	f7ff ff3f 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(4, 2+shiftChar, 10, 0, 0);
 8000c36:	4b23      	ldr	r3, [pc, #140]	; (8000cc4 <Chara_0+0x19c>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	3302      	adds	r3, #2
 8000c3c:	b2d9      	uxtb	r1, r3
 8000c3e:	2300      	movs	r3, #0
 8000c40:	9300      	str	r3, [sp, #0]
 8000c42:	2300      	movs	r3, #0
 8000c44:	220a      	movs	r2, #10
 8000c46:	2004      	movs	r0, #4
 8000c48:	f7ff ff34 	bl	8000ab4 <LEDs_L_C_RGB>

	LEDs_L_C_RGB(0, 3+shiftChar, 10, 0, 0);
 8000c4c:	4b1d      	ldr	r3, [pc, #116]	; (8000cc4 <Chara_0+0x19c>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	3303      	adds	r3, #3
 8000c52:	b2d9      	uxtb	r1, r3
 8000c54:	2300      	movs	r3, #0
 8000c56:	9300      	str	r3, [sp, #0]
 8000c58:	2300      	movs	r3, #0
 8000c5a:	220a      	movs	r2, #10
 8000c5c:	2000      	movs	r0, #0
 8000c5e:	f7ff ff29 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(1, 3+shiftChar, 10, 0, 0);
 8000c62:	4b18      	ldr	r3, [pc, #96]	; (8000cc4 <Chara_0+0x19c>)
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	3303      	adds	r3, #3
 8000c68:	b2d9      	uxtb	r1, r3
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	9300      	str	r3, [sp, #0]
 8000c6e:	2300      	movs	r3, #0
 8000c70:	220a      	movs	r2, #10
 8000c72:	2001      	movs	r0, #1
 8000c74:	f7ff ff1e 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(2, 3+shiftChar, 10, 0, 0);
 8000c78:	4b12      	ldr	r3, [pc, #72]	; (8000cc4 <Chara_0+0x19c>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	3303      	adds	r3, #3
 8000c7e:	b2d9      	uxtb	r1, r3
 8000c80:	2300      	movs	r3, #0
 8000c82:	9300      	str	r3, [sp, #0]
 8000c84:	2300      	movs	r3, #0
 8000c86:	220a      	movs	r2, #10
 8000c88:	2002      	movs	r0, #2
 8000c8a:	f7ff ff13 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(3, 3+shiftChar, 10, 0, 0);
 8000c8e:	4b0d      	ldr	r3, [pc, #52]	; (8000cc4 <Chara_0+0x19c>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	3303      	adds	r3, #3
 8000c94:	b2d9      	uxtb	r1, r3
 8000c96:	2300      	movs	r3, #0
 8000c98:	9300      	str	r3, [sp, #0]
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	220a      	movs	r2, #10
 8000c9e:	2003      	movs	r0, #3
 8000ca0:	f7ff ff08 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(4, 3+shiftChar, 10, 0, 0);
 8000ca4:	4b07      	ldr	r3, [pc, #28]	; (8000cc4 <Chara_0+0x19c>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	3303      	adds	r3, #3
 8000caa:	b2d9      	uxtb	r1, r3
 8000cac:	2300      	movs	r3, #0
 8000cae:	9300      	str	r3, [sp, #0]
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	220a      	movs	r2, #10
 8000cb4:	2004      	movs	r0, #4
 8000cb6:	f7ff fefd 	bl	8000ab4 <LEDs_L_C_RGB>
}
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	b002      	add	sp, #8
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	20000c83 	.word	0x20000c83

08000cc8 <Chara_1>:
* Dessine la caractère "1" sur la matrice et la positionne aux emplacements	  *
* prédéfini des Heures(unité ou dizaine) et des Minutes(unité ou dizaine)	  *
******************************************************************************/

void Chara_1 (CharShiftTypeDef Shift)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af02      	add	r7, sp, #8
 8000cce:	0002      	movs	r2, r0
 8000cd0:	1dfb      	adds	r3, r7, #7
 8000cd2:	701a      	strb	r2, [r3, #0]
	static uint8_t shiftChar;

	switch (Shift)
 8000cd4:	1dfb      	adds	r3, r7, #7
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	2b03      	cmp	r3, #3
 8000cda:	d014      	beq.n	8000d06 <Chara_1+0x3e>
 8000cdc:	dc17      	bgt.n	8000d0e <Chara_1+0x46>
 8000cde:	2b02      	cmp	r3, #2
 8000ce0:	d00d      	beq.n	8000cfe <Chara_1+0x36>
 8000ce2:	dc14      	bgt.n	8000d0e <Chara_1+0x46>
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d002      	beq.n	8000cee <Chara_1+0x26>
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d004      	beq.n	8000cf6 <Chara_1+0x2e>
	case HeureDizaine:
		shiftChar = 0;
		break;

	default:
		break;
 8000cec:	e00f      	b.n	8000d0e <Chara_1+0x46>
		shiftChar = 14;
 8000cee:	4b5d      	ldr	r3, [pc, #372]	; (8000e64 <Chara_1+0x19c>)
 8000cf0:	220e      	movs	r2, #14
 8000cf2:	701a      	strb	r2, [r3, #0]
		break;
 8000cf4:	e00c      	b.n	8000d10 <Chara_1+0x48>
		shiftChar = 10;
 8000cf6:	4b5b      	ldr	r3, [pc, #364]	; (8000e64 <Chara_1+0x19c>)
 8000cf8:	220a      	movs	r2, #10
 8000cfa:	701a      	strb	r2, [r3, #0]
		break;
 8000cfc:	e008      	b.n	8000d10 <Chara_1+0x48>
		shiftChar = 4;
 8000cfe:	4b59      	ldr	r3, [pc, #356]	; (8000e64 <Chara_1+0x19c>)
 8000d00:	2204      	movs	r2, #4
 8000d02:	701a      	strb	r2, [r3, #0]
		break;
 8000d04:	e004      	b.n	8000d10 <Chara_1+0x48>
		shiftChar = 0;
 8000d06:	4b57      	ldr	r3, [pc, #348]	; (8000e64 <Chara_1+0x19c>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	701a      	strb	r2, [r3, #0]
		break;
 8000d0c:	e000      	b.n	8000d10 <Chara_1+0x48>
		break;
 8000d0e:	46c0      	nop			; (mov r8, r8)
	}

	LEDs_L_C_RGB(0, 1+shiftChar, 0, 0, 0);
 8000d10:	4b54      	ldr	r3, [pc, #336]	; (8000e64 <Chara_1+0x19c>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	3301      	adds	r3, #1
 8000d16:	b2d9      	uxtb	r1, r3
 8000d18:	2300      	movs	r3, #0
 8000d1a:	9300      	str	r3, [sp, #0]
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2000      	movs	r0, #0
 8000d22:	f7ff fec7 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(1, 1+shiftChar, 10, 0, 0);
 8000d26:	4b4f      	ldr	r3, [pc, #316]	; (8000e64 <Chara_1+0x19c>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	b2d9      	uxtb	r1, r3
 8000d2e:	2300      	movs	r3, #0
 8000d30:	9300      	str	r3, [sp, #0]
 8000d32:	2300      	movs	r3, #0
 8000d34:	220a      	movs	r2, #10
 8000d36:	2001      	movs	r0, #1
 8000d38:	f7ff febc 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(2, 1+shiftChar, 0, 0, 0);
 8000d3c:	4b49      	ldr	r3, [pc, #292]	; (8000e64 <Chara_1+0x19c>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	3301      	adds	r3, #1
 8000d42:	b2d9      	uxtb	r1, r3
 8000d44:	2300      	movs	r3, #0
 8000d46:	9300      	str	r3, [sp, #0]
 8000d48:	2300      	movs	r3, #0
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2002      	movs	r0, #2
 8000d4e:	f7ff feb1 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(3, 1+shiftChar, 0, 0, 0);
 8000d52:	4b44      	ldr	r3, [pc, #272]	; (8000e64 <Chara_1+0x19c>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	3301      	adds	r3, #1
 8000d58:	b2d9      	uxtb	r1, r3
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	9300      	str	r3, [sp, #0]
 8000d5e:	2300      	movs	r3, #0
 8000d60:	2200      	movs	r2, #0
 8000d62:	2003      	movs	r0, #3
 8000d64:	f7ff fea6 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(4, 1+shiftChar, 10, 0, 0);
 8000d68:	4b3e      	ldr	r3, [pc, #248]	; (8000e64 <Chara_1+0x19c>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	b2d9      	uxtb	r1, r3
 8000d70:	2300      	movs	r3, #0
 8000d72:	9300      	str	r3, [sp, #0]
 8000d74:	2300      	movs	r3, #0
 8000d76:	220a      	movs	r2, #10
 8000d78:	2004      	movs	r0, #4
 8000d7a:	f7ff fe9b 	bl	8000ab4 <LEDs_L_C_RGB>

	LEDs_L_C_RGB(0, 2+shiftChar, 10, 0, 0);
 8000d7e:	4b39      	ldr	r3, [pc, #228]	; (8000e64 <Chara_1+0x19c>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	3302      	adds	r3, #2
 8000d84:	b2d9      	uxtb	r1, r3
 8000d86:	2300      	movs	r3, #0
 8000d88:	9300      	str	r3, [sp, #0]
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	220a      	movs	r2, #10
 8000d8e:	2000      	movs	r0, #0
 8000d90:	f7ff fe90 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(1, 2+shiftChar, 10, 0, 0);
 8000d94:	4b33      	ldr	r3, [pc, #204]	; (8000e64 <Chara_1+0x19c>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	3302      	adds	r3, #2
 8000d9a:	b2d9      	uxtb	r1, r3
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	9300      	str	r3, [sp, #0]
 8000da0:	2300      	movs	r3, #0
 8000da2:	220a      	movs	r2, #10
 8000da4:	2001      	movs	r0, #1
 8000da6:	f7ff fe85 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(2, 2+shiftChar, 10, 0, 0);
 8000daa:	4b2e      	ldr	r3, [pc, #184]	; (8000e64 <Chara_1+0x19c>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	3302      	adds	r3, #2
 8000db0:	b2d9      	uxtb	r1, r3
 8000db2:	2300      	movs	r3, #0
 8000db4:	9300      	str	r3, [sp, #0]
 8000db6:	2300      	movs	r3, #0
 8000db8:	220a      	movs	r2, #10
 8000dba:	2002      	movs	r0, #2
 8000dbc:	f7ff fe7a 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(3, 2+shiftChar, 10, 0, 0);
 8000dc0:	4b28      	ldr	r3, [pc, #160]	; (8000e64 <Chara_1+0x19c>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	3302      	adds	r3, #2
 8000dc6:	b2d9      	uxtb	r1, r3
 8000dc8:	2300      	movs	r3, #0
 8000dca:	9300      	str	r3, [sp, #0]
 8000dcc:	2300      	movs	r3, #0
 8000dce:	220a      	movs	r2, #10
 8000dd0:	2003      	movs	r0, #3
 8000dd2:	f7ff fe6f 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(4, 2+shiftChar, 10, 0, 0);
 8000dd6:	4b23      	ldr	r3, [pc, #140]	; (8000e64 <Chara_1+0x19c>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	3302      	adds	r3, #2
 8000ddc:	b2d9      	uxtb	r1, r3
 8000dde:	2300      	movs	r3, #0
 8000de0:	9300      	str	r3, [sp, #0]
 8000de2:	2300      	movs	r3, #0
 8000de4:	220a      	movs	r2, #10
 8000de6:	2004      	movs	r0, #4
 8000de8:	f7ff fe64 	bl	8000ab4 <LEDs_L_C_RGB>

	LEDs_L_C_RGB(0, 3+shiftChar, 0, 0, 0);
 8000dec:	4b1d      	ldr	r3, [pc, #116]	; (8000e64 <Chara_1+0x19c>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	3303      	adds	r3, #3
 8000df2:	b2d9      	uxtb	r1, r3
 8000df4:	2300      	movs	r3, #0
 8000df6:	9300      	str	r3, [sp, #0]
 8000df8:	2300      	movs	r3, #0
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	f7ff fe59 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(1, 3+shiftChar, 0, 0, 0);
 8000e02:	4b18      	ldr	r3, [pc, #96]	; (8000e64 <Chara_1+0x19c>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	3303      	adds	r3, #3
 8000e08:	b2d9      	uxtb	r1, r3
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	9300      	str	r3, [sp, #0]
 8000e0e:	2300      	movs	r3, #0
 8000e10:	2200      	movs	r2, #0
 8000e12:	2001      	movs	r0, #1
 8000e14:	f7ff fe4e 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(2, 3+shiftChar, 0, 0, 0);
 8000e18:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <Chara_1+0x19c>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	3303      	adds	r3, #3
 8000e1e:	b2d9      	uxtb	r1, r3
 8000e20:	2300      	movs	r3, #0
 8000e22:	9300      	str	r3, [sp, #0]
 8000e24:	2300      	movs	r3, #0
 8000e26:	2200      	movs	r2, #0
 8000e28:	2002      	movs	r0, #2
 8000e2a:	f7ff fe43 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(3, 3+shiftChar, 0, 0, 0);
 8000e2e:	4b0d      	ldr	r3, [pc, #52]	; (8000e64 <Chara_1+0x19c>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	3303      	adds	r3, #3
 8000e34:	b2d9      	uxtb	r1, r3
 8000e36:	2300      	movs	r3, #0
 8000e38:	9300      	str	r3, [sp, #0]
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2003      	movs	r0, #3
 8000e40:	f7ff fe38 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(4, 3+shiftChar, 10, 0, 0);
 8000e44:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <Chara_1+0x19c>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	3303      	adds	r3, #3
 8000e4a:	b2d9      	uxtb	r1, r3
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	9300      	str	r3, [sp, #0]
 8000e50:	2300      	movs	r3, #0
 8000e52:	220a      	movs	r2, #10
 8000e54:	2004      	movs	r0, #4
 8000e56:	f7ff fe2d 	bl	8000ab4 <LEDs_L_C_RGB>
}
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	b002      	add	sp, #8
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	20000c84 	.word	0x20000c84

08000e68 <Chara_2>:
* Dessine la caractère "2" sur la matrice et la positionne aux emplacements	  *
* prédéfini des Heures(unité ou dizaine) et des Minutes(unité ou dizaine)	  *
******************************************************************************/

void Chara_2 (CharShiftTypeDef Shift)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af02      	add	r7, sp, #8
 8000e6e:	0002      	movs	r2, r0
 8000e70:	1dfb      	adds	r3, r7, #7
 8000e72:	701a      	strb	r2, [r3, #0]
	static uint8_t shiftChar;

	switch (Shift)
 8000e74:	1dfb      	adds	r3, r7, #7
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	2b03      	cmp	r3, #3
 8000e7a:	d014      	beq.n	8000ea6 <Chara_2+0x3e>
 8000e7c:	dc17      	bgt.n	8000eae <Chara_2+0x46>
 8000e7e:	2b02      	cmp	r3, #2
 8000e80:	d00d      	beq.n	8000e9e <Chara_2+0x36>
 8000e82:	dc14      	bgt.n	8000eae <Chara_2+0x46>
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d002      	beq.n	8000e8e <Chara_2+0x26>
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d004      	beq.n	8000e96 <Chara_2+0x2e>
	case HeureDizaine:
		shiftChar = 0;
		break;

	default:
		break;
 8000e8c:	e00f      	b.n	8000eae <Chara_2+0x46>
		shiftChar = 14;
 8000e8e:	4b5d      	ldr	r3, [pc, #372]	; (8001004 <Chara_2+0x19c>)
 8000e90:	220e      	movs	r2, #14
 8000e92:	701a      	strb	r2, [r3, #0]
		break;
 8000e94:	e00c      	b.n	8000eb0 <Chara_2+0x48>
		shiftChar = 10;
 8000e96:	4b5b      	ldr	r3, [pc, #364]	; (8001004 <Chara_2+0x19c>)
 8000e98:	220a      	movs	r2, #10
 8000e9a:	701a      	strb	r2, [r3, #0]
		break;
 8000e9c:	e008      	b.n	8000eb0 <Chara_2+0x48>
		shiftChar = 4;
 8000e9e:	4b59      	ldr	r3, [pc, #356]	; (8001004 <Chara_2+0x19c>)
 8000ea0:	2204      	movs	r2, #4
 8000ea2:	701a      	strb	r2, [r3, #0]
		break;
 8000ea4:	e004      	b.n	8000eb0 <Chara_2+0x48>
		shiftChar = 0;
 8000ea6:	4b57      	ldr	r3, [pc, #348]	; (8001004 <Chara_2+0x19c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	701a      	strb	r2, [r3, #0]
		break;
 8000eac:	e000      	b.n	8000eb0 <Chara_2+0x48>
		break;
 8000eae:	46c0      	nop			; (mov r8, r8)
	}

	LEDs_L_C_RGB(0, 1+shiftChar, 10, 0, 0);
 8000eb0:	4b54      	ldr	r3, [pc, #336]	; (8001004 <Chara_2+0x19c>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	b2d9      	uxtb	r1, r3
 8000eb8:	2300      	movs	r3, #0
 8000eba:	9300      	str	r3, [sp, #0]
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	220a      	movs	r2, #10
 8000ec0:	2000      	movs	r0, #0
 8000ec2:	f7ff fdf7 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(1, 1+shiftChar, 0, 0, 0);
 8000ec6:	4b4f      	ldr	r3, [pc, #316]	; (8001004 <Chara_2+0x19c>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	b2d9      	uxtb	r1, r3
 8000ece:	2300      	movs	r3, #0
 8000ed0:	9300      	str	r3, [sp, #0]
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	f7ff fdec 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(2, 1+shiftChar, 10, 0, 0);
 8000edc:	4b49      	ldr	r3, [pc, #292]	; (8001004 <Chara_2+0x19c>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	b2d9      	uxtb	r1, r3
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	9300      	str	r3, [sp, #0]
 8000ee8:	2300      	movs	r3, #0
 8000eea:	220a      	movs	r2, #10
 8000eec:	2002      	movs	r0, #2
 8000eee:	f7ff fde1 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(3, 1+shiftChar, 10, 0, 0);
 8000ef2:	4b44      	ldr	r3, [pc, #272]	; (8001004 <Chara_2+0x19c>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	b2d9      	uxtb	r1, r3
 8000efa:	2300      	movs	r3, #0
 8000efc:	9300      	str	r3, [sp, #0]
 8000efe:	2300      	movs	r3, #0
 8000f00:	220a      	movs	r2, #10
 8000f02:	2003      	movs	r0, #3
 8000f04:	f7ff fdd6 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(4, 1+shiftChar, 10, 0, 0);
 8000f08:	4b3e      	ldr	r3, [pc, #248]	; (8001004 <Chara_2+0x19c>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	b2d9      	uxtb	r1, r3
 8000f10:	2300      	movs	r3, #0
 8000f12:	9300      	str	r3, [sp, #0]
 8000f14:	2300      	movs	r3, #0
 8000f16:	220a      	movs	r2, #10
 8000f18:	2004      	movs	r0, #4
 8000f1a:	f7ff fdcb 	bl	8000ab4 <LEDs_L_C_RGB>

	LEDs_L_C_RGB(0, 2+shiftChar, 10, 0, 0);
 8000f1e:	4b39      	ldr	r3, [pc, #228]	; (8001004 <Chara_2+0x19c>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	3302      	adds	r3, #2
 8000f24:	b2d9      	uxtb	r1, r3
 8000f26:	2300      	movs	r3, #0
 8000f28:	9300      	str	r3, [sp, #0]
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	220a      	movs	r2, #10
 8000f2e:	2000      	movs	r0, #0
 8000f30:	f7ff fdc0 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(1, 2+shiftChar, 0, 0, 0);
 8000f34:	4b33      	ldr	r3, [pc, #204]	; (8001004 <Chara_2+0x19c>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	3302      	adds	r3, #2
 8000f3a:	b2d9      	uxtb	r1, r3
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	9300      	str	r3, [sp, #0]
 8000f40:	2300      	movs	r3, #0
 8000f42:	2200      	movs	r2, #0
 8000f44:	2001      	movs	r0, #1
 8000f46:	f7ff fdb5 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(2, 2+shiftChar, 10, 0, 0);
 8000f4a:	4b2e      	ldr	r3, [pc, #184]	; (8001004 <Chara_2+0x19c>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	3302      	adds	r3, #2
 8000f50:	b2d9      	uxtb	r1, r3
 8000f52:	2300      	movs	r3, #0
 8000f54:	9300      	str	r3, [sp, #0]
 8000f56:	2300      	movs	r3, #0
 8000f58:	220a      	movs	r2, #10
 8000f5a:	2002      	movs	r0, #2
 8000f5c:	f7ff fdaa 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(3, 2+shiftChar, 0, 0, 0);
 8000f60:	4b28      	ldr	r3, [pc, #160]	; (8001004 <Chara_2+0x19c>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	3302      	adds	r3, #2
 8000f66:	b2d9      	uxtb	r1, r3
 8000f68:	2300      	movs	r3, #0
 8000f6a:	9300      	str	r3, [sp, #0]
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2003      	movs	r0, #3
 8000f72:	f7ff fd9f 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(4, 2+shiftChar, 10, 0, 0);
 8000f76:	4b23      	ldr	r3, [pc, #140]	; (8001004 <Chara_2+0x19c>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	3302      	adds	r3, #2
 8000f7c:	b2d9      	uxtb	r1, r3
 8000f7e:	2300      	movs	r3, #0
 8000f80:	9300      	str	r3, [sp, #0]
 8000f82:	2300      	movs	r3, #0
 8000f84:	220a      	movs	r2, #10
 8000f86:	2004      	movs	r0, #4
 8000f88:	f7ff fd94 	bl	8000ab4 <LEDs_L_C_RGB>

	LEDs_L_C_RGB(0, 3+shiftChar, 10, 0, 0);
 8000f8c:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <Chara_2+0x19c>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	3303      	adds	r3, #3
 8000f92:	b2d9      	uxtb	r1, r3
 8000f94:	2300      	movs	r3, #0
 8000f96:	9300      	str	r3, [sp, #0]
 8000f98:	2300      	movs	r3, #0
 8000f9a:	220a      	movs	r2, #10
 8000f9c:	2000      	movs	r0, #0
 8000f9e:	f7ff fd89 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(1, 3+shiftChar, 10, 0, 0);
 8000fa2:	4b18      	ldr	r3, [pc, #96]	; (8001004 <Chara_2+0x19c>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	3303      	adds	r3, #3
 8000fa8:	b2d9      	uxtb	r1, r3
 8000faa:	2300      	movs	r3, #0
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	2300      	movs	r3, #0
 8000fb0:	220a      	movs	r2, #10
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	f7ff fd7e 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(2, 3+shiftChar, 10, 0, 0);
 8000fb8:	4b12      	ldr	r3, [pc, #72]	; (8001004 <Chara_2+0x19c>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	3303      	adds	r3, #3
 8000fbe:	b2d9      	uxtb	r1, r3
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	9300      	str	r3, [sp, #0]
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	220a      	movs	r2, #10
 8000fc8:	2002      	movs	r0, #2
 8000fca:	f7ff fd73 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(3, 3+shiftChar, 0, 0, 0);
 8000fce:	4b0d      	ldr	r3, [pc, #52]	; (8001004 <Chara_2+0x19c>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	3303      	adds	r3, #3
 8000fd4:	b2d9      	uxtb	r1, r3
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	9300      	str	r3, [sp, #0]
 8000fda:	2300      	movs	r3, #0
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2003      	movs	r0, #3
 8000fe0:	f7ff fd68 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(4, 3+shiftChar, 10, 0, 0);
 8000fe4:	4b07      	ldr	r3, [pc, #28]	; (8001004 <Chara_2+0x19c>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	3303      	adds	r3, #3
 8000fea:	b2d9      	uxtb	r1, r3
 8000fec:	2300      	movs	r3, #0
 8000fee:	9300      	str	r3, [sp, #0]
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	220a      	movs	r2, #10
 8000ff4:	2004      	movs	r0, #4
 8000ff6:	f7ff fd5d 	bl	8000ab4 <LEDs_L_C_RGB>
}
 8000ffa:	46c0      	nop			; (mov r8, r8)
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	b002      	add	sp, #8
 8001000:	bd80      	pop	{r7, pc}
 8001002:	46c0      	nop			; (mov r8, r8)
 8001004:	20000c85 	.word	0x20000c85

08001008 <Chara_3>:
* Dessine la caractère "3" sur la matrice et la positionne aux emplacements	  *
* prédéfini des Heures(unité ou dizaine) et des Minutes(unité ou dizaine)	  *
******************************************************************************/

void Chara_3 (CharShiftTypeDef Shift)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af02      	add	r7, sp, #8
 800100e:	0002      	movs	r2, r0
 8001010:	1dfb      	adds	r3, r7, #7
 8001012:	701a      	strb	r2, [r3, #0]
	static uint8_t shiftChar;

	switch (Shift)
 8001014:	1dfb      	adds	r3, r7, #7
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b03      	cmp	r3, #3
 800101a:	d014      	beq.n	8001046 <Chara_3+0x3e>
 800101c:	dc17      	bgt.n	800104e <Chara_3+0x46>
 800101e:	2b02      	cmp	r3, #2
 8001020:	d00d      	beq.n	800103e <Chara_3+0x36>
 8001022:	dc14      	bgt.n	800104e <Chara_3+0x46>
 8001024:	2b00      	cmp	r3, #0
 8001026:	d002      	beq.n	800102e <Chara_3+0x26>
 8001028:	2b01      	cmp	r3, #1
 800102a:	d004      	beq.n	8001036 <Chara_3+0x2e>
	case HeureDizaine:
		shiftChar = 0;
		break;

	default:
		break;
 800102c:	e00f      	b.n	800104e <Chara_3+0x46>
		shiftChar = 14;
 800102e:	4b5d      	ldr	r3, [pc, #372]	; (80011a4 <Chara_3+0x19c>)
 8001030:	220e      	movs	r2, #14
 8001032:	701a      	strb	r2, [r3, #0]
		break;
 8001034:	e00c      	b.n	8001050 <Chara_3+0x48>
		shiftChar = 10;
 8001036:	4b5b      	ldr	r3, [pc, #364]	; (80011a4 <Chara_3+0x19c>)
 8001038:	220a      	movs	r2, #10
 800103a:	701a      	strb	r2, [r3, #0]
		break;
 800103c:	e008      	b.n	8001050 <Chara_3+0x48>
		shiftChar = 4;
 800103e:	4b59      	ldr	r3, [pc, #356]	; (80011a4 <Chara_3+0x19c>)
 8001040:	2204      	movs	r2, #4
 8001042:	701a      	strb	r2, [r3, #0]
		break;
 8001044:	e004      	b.n	8001050 <Chara_3+0x48>
		shiftChar = 0;
 8001046:	4b57      	ldr	r3, [pc, #348]	; (80011a4 <Chara_3+0x19c>)
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]
		break;
 800104c:	e000      	b.n	8001050 <Chara_3+0x48>
		break;
 800104e:	46c0      	nop			; (mov r8, r8)
	}

	LEDs_L_C_RGB(0, 1+shiftChar, 10, 0, 0);
 8001050:	4b54      	ldr	r3, [pc, #336]	; (80011a4 <Chara_3+0x19c>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	3301      	adds	r3, #1
 8001056:	b2d9      	uxtb	r1, r3
 8001058:	2300      	movs	r3, #0
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	2300      	movs	r3, #0
 800105e:	220a      	movs	r2, #10
 8001060:	2000      	movs	r0, #0
 8001062:	f7ff fd27 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(1, 1+shiftChar, 0, 0, 0);
 8001066:	4b4f      	ldr	r3, [pc, #316]	; (80011a4 <Chara_3+0x19c>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	3301      	adds	r3, #1
 800106c:	b2d9      	uxtb	r1, r3
 800106e:	2300      	movs	r3, #0
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	2300      	movs	r3, #0
 8001074:	2200      	movs	r2, #0
 8001076:	2001      	movs	r0, #1
 8001078:	f7ff fd1c 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(2, 1+shiftChar, 10, 0, 0);
 800107c:	4b49      	ldr	r3, [pc, #292]	; (80011a4 <Chara_3+0x19c>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	3301      	adds	r3, #1
 8001082:	b2d9      	uxtb	r1, r3
 8001084:	2300      	movs	r3, #0
 8001086:	9300      	str	r3, [sp, #0]
 8001088:	2300      	movs	r3, #0
 800108a:	220a      	movs	r2, #10
 800108c:	2002      	movs	r0, #2
 800108e:	f7ff fd11 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(3, 1+shiftChar, 0, 0, 0);
 8001092:	4b44      	ldr	r3, [pc, #272]	; (80011a4 <Chara_3+0x19c>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	3301      	adds	r3, #1
 8001098:	b2d9      	uxtb	r1, r3
 800109a:	2300      	movs	r3, #0
 800109c:	9300      	str	r3, [sp, #0]
 800109e:	2300      	movs	r3, #0
 80010a0:	2200      	movs	r2, #0
 80010a2:	2003      	movs	r0, #3
 80010a4:	f7ff fd06 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(4, 1+shiftChar, 10, 0, 0);
 80010a8:	4b3e      	ldr	r3, [pc, #248]	; (80011a4 <Chara_3+0x19c>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	3301      	adds	r3, #1
 80010ae:	b2d9      	uxtb	r1, r3
 80010b0:	2300      	movs	r3, #0
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	2300      	movs	r3, #0
 80010b6:	220a      	movs	r2, #10
 80010b8:	2004      	movs	r0, #4
 80010ba:	f7ff fcfb 	bl	8000ab4 <LEDs_L_C_RGB>

	LEDs_L_C_RGB(0, 2+shiftChar, 10, 0, 0);
 80010be:	4b39      	ldr	r3, [pc, #228]	; (80011a4 <Chara_3+0x19c>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	3302      	adds	r3, #2
 80010c4:	b2d9      	uxtb	r1, r3
 80010c6:	2300      	movs	r3, #0
 80010c8:	9300      	str	r3, [sp, #0]
 80010ca:	2300      	movs	r3, #0
 80010cc:	220a      	movs	r2, #10
 80010ce:	2000      	movs	r0, #0
 80010d0:	f7ff fcf0 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(1, 2+shiftChar, 0, 0, 0);
 80010d4:	4b33      	ldr	r3, [pc, #204]	; (80011a4 <Chara_3+0x19c>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	3302      	adds	r3, #2
 80010da:	b2d9      	uxtb	r1, r3
 80010dc:	2300      	movs	r3, #0
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	2300      	movs	r3, #0
 80010e2:	2200      	movs	r2, #0
 80010e4:	2001      	movs	r0, #1
 80010e6:	f7ff fce5 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(2, 2+shiftChar, 10, 0, 0);
 80010ea:	4b2e      	ldr	r3, [pc, #184]	; (80011a4 <Chara_3+0x19c>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	3302      	adds	r3, #2
 80010f0:	b2d9      	uxtb	r1, r3
 80010f2:	2300      	movs	r3, #0
 80010f4:	9300      	str	r3, [sp, #0]
 80010f6:	2300      	movs	r3, #0
 80010f8:	220a      	movs	r2, #10
 80010fa:	2002      	movs	r0, #2
 80010fc:	f7ff fcda 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(3, 2+shiftChar, 0, 0, 0);
 8001100:	4b28      	ldr	r3, [pc, #160]	; (80011a4 <Chara_3+0x19c>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	3302      	adds	r3, #2
 8001106:	b2d9      	uxtb	r1, r3
 8001108:	2300      	movs	r3, #0
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	2300      	movs	r3, #0
 800110e:	2200      	movs	r2, #0
 8001110:	2003      	movs	r0, #3
 8001112:	f7ff fccf 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(4, 2+shiftChar, 10, 0, 0);
 8001116:	4b23      	ldr	r3, [pc, #140]	; (80011a4 <Chara_3+0x19c>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	3302      	adds	r3, #2
 800111c:	b2d9      	uxtb	r1, r3
 800111e:	2300      	movs	r3, #0
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	2300      	movs	r3, #0
 8001124:	220a      	movs	r2, #10
 8001126:	2004      	movs	r0, #4
 8001128:	f7ff fcc4 	bl	8000ab4 <LEDs_L_C_RGB>

	LEDs_L_C_RGB(0, 3+shiftChar, 10, 0, 0);
 800112c:	4b1d      	ldr	r3, [pc, #116]	; (80011a4 <Chara_3+0x19c>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	3303      	adds	r3, #3
 8001132:	b2d9      	uxtb	r1, r3
 8001134:	2300      	movs	r3, #0
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	2300      	movs	r3, #0
 800113a:	220a      	movs	r2, #10
 800113c:	2000      	movs	r0, #0
 800113e:	f7ff fcb9 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(1, 3+shiftChar, 10, 0, 0);
 8001142:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <Chara_3+0x19c>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	3303      	adds	r3, #3
 8001148:	b2d9      	uxtb	r1, r3
 800114a:	2300      	movs	r3, #0
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	2300      	movs	r3, #0
 8001150:	220a      	movs	r2, #10
 8001152:	2001      	movs	r0, #1
 8001154:	f7ff fcae 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(2, 3+shiftChar, 10, 0, 0);
 8001158:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <Chara_3+0x19c>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	3303      	adds	r3, #3
 800115e:	b2d9      	uxtb	r1, r3
 8001160:	2300      	movs	r3, #0
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	2300      	movs	r3, #0
 8001166:	220a      	movs	r2, #10
 8001168:	2002      	movs	r0, #2
 800116a:	f7ff fca3 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(3, 3+shiftChar, 10, 0, 0);
 800116e:	4b0d      	ldr	r3, [pc, #52]	; (80011a4 <Chara_3+0x19c>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	3303      	adds	r3, #3
 8001174:	b2d9      	uxtb	r1, r3
 8001176:	2300      	movs	r3, #0
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	2300      	movs	r3, #0
 800117c:	220a      	movs	r2, #10
 800117e:	2003      	movs	r0, #3
 8001180:	f7ff fc98 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(4, 3+shiftChar, 10, 0, 0);
 8001184:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <Chara_3+0x19c>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	3303      	adds	r3, #3
 800118a:	b2d9      	uxtb	r1, r3
 800118c:	2300      	movs	r3, #0
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	2300      	movs	r3, #0
 8001192:	220a      	movs	r2, #10
 8001194:	2004      	movs	r0, #4
 8001196:	f7ff fc8d 	bl	8000ab4 <LEDs_L_C_RGB>
}
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	46bd      	mov	sp, r7
 800119e:	b002      	add	sp, #8
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	46c0      	nop			; (mov r8, r8)
 80011a4:	20000c86 	.word	0x20000c86

080011a8 <Chara_4>:
* Dessine la caractère "4" sur la matrice et la positionne aux emplacements	  *
* prédéfini des Heures(unité ou dizaine) et des Minutes(unité ou dizaine)	  *
******************************************************************************/

void Chara_4 (CharShiftTypeDef Shift)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af02      	add	r7, sp, #8
 80011ae:	0002      	movs	r2, r0
 80011b0:	1dfb      	adds	r3, r7, #7
 80011b2:	701a      	strb	r2, [r3, #0]
	static uint8_t shiftChar;

	switch (Shift)
 80011b4:	1dfb      	adds	r3, r7, #7
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b03      	cmp	r3, #3
 80011ba:	d014      	beq.n	80011e6 <Chara_4+0x3e>
 80011bc:	dc17      	bgt.n	80011ee <Chara_4+0x46>
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d00d      	beq.n	80011de <Chara_4+0x36>
 80011c2:	dc14      	bgt.n	80011ee <Chara_4+0x46>
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d002      	beq.n	80011ce <Chara_4+0x26>
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d004      	beq.n	80011d6 <Chara_4+0x2e>
	case HeureDizaine:
		shiftChar = 0;
		break;

	default:
		break;
 80011cc:	e00f      	b.n	80011ee <Chara_4+0x46>
		shiftChar = 14;
 80011ce:	4b5d      	ldr	r3, [pc, #372]	; (8001344 <Chara_4+0x19c>)
 80011d0:	220e      	movs	r2, #14
 80011d2:	701a      	strb	r2, [r3, #0]
		break;
 80011d4:	e00c      	b.n	80011f0 <Chara_4+0x48>
		shiftChar = 10;
 80011d6:	4b5b      	ldr	r3, [pc, #364]	; (8001344 <Chara_4+0x19c>)
 80011d8:	220a      	movs	r2, #10
 80011da:	701a      	strb	r2, [r3, #0]
		break;
 80011dc:	e008      	b.n	80011f0 <Chara_4+0x48>
		shiftChar = 4;
 80011de:	4b59      	ldr	r3, [pc, #356]	; (8001344 <Chara_4+0x19c>)
 80011e0:	2204      	movs	r2, #4
 80011e2:	701a      	strb	r2, [r3, #0]
		break;
 80011e4:	e004      	b.n	80011f0 <Chara_4+0x48>
		shiftChar = 0;
 80011e6:	4b57      	ldr	r3, [pc, #348]	; (8001344 <Chara_4+0x19c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	701a      	strb	r2, [r3, #0]
		break;
 80011ec:	e000      	b.n	80011f0 <Chara_4+0x48>
		break;
 80011ee:	46c0      	nop			; (mov r8, r8)
	}

	LEDs_L_C_RGB(0, 1+shiftChar, 10, 0, 0);
 80011f0:	4b54      	ldr	r3, [pc, #336]	; (8001344 <Chara_4+0x19c>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	3301      	adds	r3, #1
 80011f6:	b2d9      	uxtb	r1, r3
 80011f8:	2300      	movs	r3, #0
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	2300      	movs	r3, #0
 80011fe:	220a      	movs	r2, #10
 8001200:	2000      	movs	r0, #0
 8001202:	f7ff fc57 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(1, 1+shiftChar, 10, 0, 0);
 8001206:	4b4f      	ldr	r3, [pc, #316]	; (8001344 <Chara_4+0x19c>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	3301      	adds	r3, #1
 800120c:	b2d9      	uxtb	r1, r3
 800120e:	2300      	movs	r3, #0
 8001210:	9300      	str	r3, [sp, #0]
 8001212:	2300      	movs	r3, #0
 8001214:	220a      	movs	r2, #10
 8001216:	2001      	movs	r0, #1
 8001218:	f7ff fc4c 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(2, 1+shiftChar, 10, 0, 0);
 800121c:	4b49      	ldr	r3, [pc, #292]	; (8001344 <Chara_4+0x19c>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	3301      	adds	r3, #1
 8001222:	b2d9      	uxtb	r1, r3
 8001224:	2300      	movs	r3, #0
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	2300      	movs	r3, #0
 800122a:	220a      	movs	r2, #10
 800122c:	2002      	movs	r0, #2
 800122e:	f7ff fc41 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(3, 1+shiftChar, 0, 0, 0);
 8001232:	4b44      	ldr	r3, [pc, #272]	; (8001344 <Chara_4+0x19c>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	3301      	adds	r3, #1
 8001238:	b2d9      	uxtb	r1, r3
 800123a:	2300      	movs	r3, #0
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	2300      	movs	r3, #0
 8001240:	2200      	movs	r2, #0
 8001242:	2003      	movs	r0, #3
 8001244:	f7ff fc36 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(4, 1+shiftChar, 0, 0, 0);
 8001248:	4b3e      	ldr	r3, [pc, #248]	; (8001344 <Chara_4+0x19c>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	3301      	adds	r3, #1
 800124e:	b2d9      	uxtb	r1, r3
 8001250:	2300      	movs	r3, #0
 8001252:	9300      	str	r3, [sp, #0]
 8001254:	2300      	movs	r3, #0
 8001256:	2200      	movs	r2, #0
 8001258:	2004      	movs	r0, #4
 800125a:	f7ff fc2b 	bl	8000ab4 <LEDs_L_C_RGB>

	LEDs_L_C_RGB(0, 2+shiftChar, 0, 0, 0);
 800125e:	4b39      	ldr	r3, [pc, #228]	; (8001344 <Chara_4+0x19c>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	3302      	adds	r3, #2
 8001264:	b2d9      	uxtb	r1, r3
 8001266:	2300      	movs	r3, #0
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	2300      	movs	r3, #0
 800126c:	2200      	movs	r2, #0
 800126e:	2000      	movs	r0, #0
 8001270:	f7ff fc20 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(1, 2+shiftChar, 0, 0, 0);
 8001274:	4b33      	ldr	r3, [pc, #204]	; (8001344 <Chara_4+0x19c>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	3302      	adds	r3, #2
 800127a:	b2d9      	uxtb	r1, r3
 800127c:	2300      	movs	r3, #0
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	2300      	movs	r3, #0
 8001282:	2200      	movs	r2, #0
 8001284:	2001      	movs	r0, #1
 8001286:	f7ff fc15 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(2, 2+shiftChar, 10, 0, 0);
 800128a:	4b2e      	ldr	r3, [pc, #184]	; (8001344 <Chara_4+0x19c>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	3302      	adds	r3, #2
 8001290:	b2d9      	uxtb	r1, r3
 8001292:	2300      	movs	r3, #0
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	2300      	movs	r3, #0
 8001298:	220a      	movs	r2, #10
 800129a:	2002      	movs	r0, #2
 800129c:	f7ff fc0a 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(3, 2+shiftChar, 0, 0, 0);
 80012a0:	4b28      	ldr	r3, [pc, #160]	; (8001344 <Chara_4+0x19c>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	3302      	adds	r3, #2
 80012a6:	b2d9      	uxtb	r1, r3
 80012a8:	2300      	movs	r3, #0
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	2300      	movs	r3, #0
 80012ae:	2200      	movs	r2, #0
 80012b0:	2003      	movs	r0, #3
 80012b2:	f7ff fbff 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(4, 2+shiftChar, 0, 0, 0);
 80012b6:	4b23      	ldr	r3, [pc, #140]	; (8001344 <Chara_4+0x19c>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	3302      	adds	r3, #2
 80012bc:	b2d9      	uxtb	r1, r3
 80012be:	2300      	movs	r3, #0
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	2300      	movs	r3, #0
 80012c4:	2200      	movs	r2, #0
 80012c6:	2004      	movs	r0, #4
 80012c8:	f7ff fbf4 	bl	8000ab4 <LEDs_L_C_RGB>

	LEDs_L_C_RGB(0, 3+shiftChar, 10, 0, 0);
 80012cc:	4b1d      	ldr	r3, [pc, #116]	; (8001344 <Chara_4+0x19c>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	3303      	adds	r3, #3
 80012d2:	b2d9      	uxtb	r1, r3
 80012d4:	2300      	movs	r3, #0
 80012d6:	9300      	str	r3, [sp, #0]
 80012d8:	2300      	movs	r3, #0
 80012da:	220a      	movs	r2, #10
 80012dc:	2000      	movs	r0, #0
 80012de:	f7ff fbe9 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(1, 3+shiftChar, 10, 0, 0);
 80012e2:	4b18      	ldr	r3, [pc, #96]	; (8001344 <Chara_4+0x19c>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	3303      	adds	r3, #3
 80012e8:	b2d9      	uxtb	r1, r3
 80012ea:	2300      	movs	r3, #0
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	2300      	movs	r3, #0
 80012f0:	220a      	movs	r2, #10
 80012f2:	2001      	movs	r0, #1
 80012f4:	f7ff fbde 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(2, 3+shiftChar, 10, 0, 0);
 80012f8:	4b12      	ldr	r3, [pc, #72]	; (8001344 <Chara_4+0x19c>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	3303      	adds	r3, #3
 80012fe:	b2d9      	uxtb	r1, r3
 8001300:	2300      	movs	r3, #0
 8001302:	9300      	str	r3, [sp, #0]
 8001304:	2300      	movs	r3, #0
 8001306:	220a      	movs	r2, #10
 8001308:	2002      	movs	r0, #2
 800130a:	f7ff fbd3 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(3, 3+shiftChar, 10, 0, 0);
 800130e:	4b0d      	ldr	r3, [pc, #52]	; (8001344 <Chara_4+0x19c>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	3303      	adds	r3, #3
 8001314:	b2d9      	uxtb	r1, r3
 8001316:	2300      	movs	r3, #0
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	2300      	movs	r3, #0
 800131c:	220a      	movs	r2, #10
 800131e:	2003      	movs	r0, #3
 8001320:	f7ff fbc8 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(4, 3+shiftChar, 10, 0, 0);
 8001324:	4b07      	ldr	r3, [pc, #28]	; (8001344 <Chara_4+0x19c>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	3303      	adds	r3, #3
 800132a:	b2d9      	uxtb	r1, r3
 800132c:	2300      	movs	r3, #0
 800132e:	9300      	str	r3, [sp, #0]
 8001330:	2300      	movs	r3, #0
 8001332:	220a      	movs	r2, #10
 8001334:	2004      	movs	r0, #4
 8001336:	f7ff fbbd 	bl	8000ab4 <LEDs_L_C_RGB>
}
 800133a:	46c0      	nop			; (mov r8, r8)
 800133c:	46bd      	mov	sp, r7
 800133e:	b002      	add	sp, #8
 8001340:	bd80      	pop	{r7, pc}
 8001342:	46c0      	nop			; (mov r8, r8)
 8001344:	20000c87 	.word	0x20000c87

08001348 <Chara_5>:
* Dessine la caractère "5" sur la matrice et la positionne aux emplacements	  *
* prédéfini des Heures(unité ou dizaine) et des Minutes(unité ou dizaine)	  *
******************************************************************************/

void Chara_5 (CharShiftTypeDef Shift)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af02      	add	r7, sp, #8
 800134e:	0002      	movs	r2, r0
 8001350:	1dfb      	adds	r3, r7, #7
 8001352:	701a      	strb	r2, [r3, #0]
	static uint8_t shiftChar;

	switch (Shift)
 8001354:	1dfb      	adds	r3, r7, #7
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b03      	cmp	r3, #3
 800135a:	d014      	beq.n	8001386 <Chara_5+0x3e>
 800135c:	dc17      	bgt.n	800138e <Chara_5+0x46>
 800135e:	2b02      	cmp	r3, #2
 8001360:	d00d      	beq.n	800137e <Chara_5+0x36>
 8001362:	dc14      	bgt.n	800138e <Chara_5+0x46>
 8001364:	2b00      	cmp	r3, #0
 8001366:	d002      	beq.n	800136e <Chara_5+0x26>
 8001368:	2b01      	cmp	r3, #1
 800136a:	d004      	beq.n	8001376 <Chara_5+0x2e>
	case HeureDizaine:
		shiftChar = 0;
		break;

	default:
		break;
 800136c:	e00f      	b.n	800138e <Chara_5+0x46>
		shiftChar = 14;
 800136e:	4b5d      	ldr	r3, [pc, #372]	; (80014e4 <Chara_5+0x19c>)
 8001370:	220e      	movs	r2, #14
 8001372:	701a      	strb	r2, [r3, #0]
		break;
 8001374:	e00c      	b.n	8001390 <Chara_5+0x48>
		shiftChar = 10;
 8001376:	4b5b      	ldr	r3, [pc, #364]	; (80014e4 <Chara_5+0x19c>)
 8001378:	220a      	movs	r2, #10
 800137a:	701a      	strb	r2, [r3, #0]
		break;
 800137c:	e008      	b.n	8001390 <Chara_5+0x48>
		shiftChar = 4;
 800137e:	4b59      	ldr	r3, [pc, #356]	; (80014e4 <Chara_5+0x19c>)
 8001380:	2204      	movs	r2, #4
 8001382:	701a      	strb	r2, [r3, #0]
		break;
 8001384:	e004      	b.n	8001390 <Chara_5+0x48>
		shiftChar = 0;
 8001386:	4b57      	ldr	r3, [pc, #348]	; (80014e4 <Chara_5+0x19c>)
 8001388:	2200      	movs	r2, #0
 800138a:	701a      	strb	r2, [r3, #0]
		break;
 800138c:	e000      	b.n	8001390 <Chara_5+0x48>
		break;
 800138e:	46c0      	nop			; (mov r8, r8)
	}

	LEDs_L_C_RGB(0, 1+shiftChar, 10, 0, 0);
 8001390:	4b54      	ldr	r3, [pc, #336]	; (80014e4 <Chara_5+0x19c>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	3301      	adds	r3, #1
 8001396:	b2d9      	uxtb	r1, r3
 8001398:	2300      	movs	r3, #0
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	2300      	movs	r3, #0
 800139e:	220a      	movs	r2, #10
 80013a0:	2000      	movs	r0, #0
 80013a2:	f7ff fb87 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(1, 1+shiftChar, 10, 0, 0);
 80013a6:	4b4f      	ldr	r3, [pc, #316]	; (80014e4 <Chara_5+0x19c>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	3301      	adds	r3, #1
 80013ac:	b2d9      	uxtb	r1, r3
 80013ae:	2300      	movs	r3, #0
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	2300      	movs	r3, #0
 80013b4:	220a      	movs	r2, #10
 80013b6:	2001      	movs	r0, #1
 80013b8:	f7ff fb7c 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(2, 1+shiftChar, 10, 0, 0);
 80013bc:	4b49      	ldr	r3, [pc, #292]	; (80014e4 <Chara_5+0x19c>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	3301      	adds	r3, #1
 80013c2:	b2d9      	uxtb	r1, r3
 80013c4:	2300      	movs	r3, #0
 80013c6:	9300      	str	r3, [sp, #0]
 80013c8:	2300      	movs	r3, #0
 80013ca:	220a      	movs	r2, #10
 80013cc:	2002      	movs	r0, #2
 80013ce:	f7ff fb71 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(3, 1+shiftChar, 0, 0, 0);
 80013d2:	4b44      	ldr	r3, [pc, #272]	; (80014e4 <Chara_5+0x19c>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	3301      	adds	r3, #1
 80013d8:	b2d9      	uxtb	r1, r3
 80013da:	2300      	movs	r3, #0
 80013dc:	9300      	str	r3, [sp, #0]
 80013de:	2300      	movs	r3, #0
 80013e0:	2200      	movs	r2, #0
 80013e2:	2003      	movs	r0, #3
 80013e4:	f7ff fb66 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(4, 1+shiftChar, 10, 0, 0);
 80013e8:	4b3e      	ldr	r3, [pc, #248]	; (80014e4 <Chara_5+0x19c>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	3301      	adds	r3, #1
 80013ee:	b2d9      	uxtb	r1, r3
 80013f0:	2300      	movs	r3, #0
 80013f2:	9300      	str	r3, [sp, #0]
 80013f4:	2300      	movs	r3, #0
 80013f6:	220a      	movs	r2, #10
 80013f8:	2004      	movs	r0, #4
 80013fa:	f7ff fb5b 	bl	8000ab4 <LEDs_L_C_RGB>

	LEDs_L_C_RGB(0, 2+shiftChar, 10, 0, 0);
 80013fe:	4b39      	ldr	r3, [pc, #228]	; (80014e4 <Chara_5+0x19c>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	3302      	adds	r3, #2
 8001404:	b2d9      	uxtb	r1, r3
 8001406:	2300      	movs	r3, #0
 8001408:	9300      	str	r3, [sp, #0]
 800140a:	2300      	movs	r3, #0
 800140c:	220a      	movs	r2, #10
 800140e:	2000      	movs	r0, #0
 8001410:	f7ff fb50 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(1, 2+shiftChar, 0, 0, 0);
 8001414:	4b33      	ldr	r3, [pc, #204]	; (80014e4 <Chara_5+0x19c>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	3302      	adds	r3, #2
 800141a:	b2d9      	uxtb	r1, r3
 800141c:	2300      	movs	r3, #0
 800141e:	9300      	str	r3, [sp, #0]
 8001420:	2300      	movs	r3, #0
 8001422:	2200      	movs	r2, #0
 8001424:	2001      	movs	r0, #1
 8001426:	f7ff fb45 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(2, 2+shiftChar, 10, 0, 0);
 800142a:	4b2e      	ldr	r3, [pc, #184]	; (80014e4 <Chara_5+0x19c>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	3302      	adds	r3, #2
 8001430:	b2d9      	uxtb	r1, r3
 8001432:	2300      	movs	r3, #0
 8001434:	9300      	str	r3, [sp, #0]
 8001436:	2300      	movs	r3, #0
 8001438:	220a      	movs	r2, #10
 800143a:	2002      	movs	r0, #2
 800143c:	f7ff fb3a 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(3, 2+shiftChar, 0, 0, 0);
 8001440:	4b28      	ldr	r3, [pc, #160]	; (80014e4 <Chara_5+0x19c>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	3302      	adds	r3, #2
 8001446:	b2d9      	uxtb	r1, r3
 8001448:	2300      	movs	r3, #0
 800144a:	9300      	str	r3, [sp, #0]
 800144c:	2300      	movs	r3, #0
 800144e:	2200      	movs	r2, #0
 8001450:	2003      	movs	r0, #3
 8001452:	f7ff fb2f 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(4, 2+shiftChar, 10, 0, 0);
 8001456:	4b23      	ldr	r3, [pc, #140]	; (80014e4 <Chara_5+0x19c>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	3302      	adds	r3, #2
 800145c:	b2d9      	uxtb	r1, r3
 800145e:	2300      	movs	r3, #0
 8001460:	9300      	str	r3, [sp, #0]
 8001462:	2300      	movs	r3, #0
 8001464:	220a      	movs	r2, #10
 8001466:	2004      	movs	r0, #4
 8001468:	f7ff fb24 	bl	8000ab4 <LEDs_L_C_RGB>

	LEDs_L_C_RGB(0, 3+shiftChar, 10, 0, 0);
 800146c:	4b1d      	ldr	r3, [pc, #116]	; (80014e4 <Chara_5+0x19c>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	3303      	adds	r3, #3
 8001472:	b2d9      	uxtb	r1, r3
 8001474:	2300      	movs	r3, #0
 8001476:	9300      	str	r3, [sp, #0]
 8001478:	2300      	movs	r3, #0
 800147a:	220a      	movs	r2, #10
 800147c:	2000      	movs	r0, #0
 800147e:	f7ff fb19 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(1, 3+shiftChar, 0, 0, 0);
 8001482:	4b18      	ldr	r3, [pc, #96]	; (80014e4 <Chara_5+0x19c>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	3303      	adds	r3, #3
 8001488:	b2d9      	uxtb	r1, r3
 800148a:	2300      	movs	r3, #0
 800148c:	9300      	str	r3, [sp, #0]
 800148e:	2300      	movs	r3, #0
 8001490:	2200      	movs	r2, #0
 8001492:	2001      	movs	r0, #1
 8001494:	f7ff fb0e 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(2, 3+shiftChar, 10, 0, 0);
 8001498:	4b12      	ldr	r3, [pc, #72]	; (80014e4 <Chara_5+0x19c>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	3303      	adds	r3, #3
 800149e:	b2d9      	uxtb	r1, r3
 80014a0:	2300      	movs	r3, #0
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	2300      	movs	r3, #0
 80014a6:	220a      	movs	r2, #10
 80014a8:	2002      	movs	r0, #2
 80014aa:	f7ff fb03 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(3, 3+shiftChar, 10, 0, 0);
 80014ae:	4b0d      	ldr	r3, [pc, #52]	; (80014e4 <Chara_5+0x19c>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	3303      	adds	r3, #3
 80014b4:	b2d9      	uxtb	r1, r3
 80014b6:	2300      	movs	r3, #0
 80014b8:	9300      	str	r3, [sp, #0]
 80014ba:	2300      	movs	r3, #0
 80014bc:	220a      	movs	r2, #10
 80014be:	2003      	movs	r0, #3
 80014c0:	f7ff faf8 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(4, 3+shiftChar, 10, 0, 0);
 80014c4:	4b07      	ldr	r3, [pc, #28]	; (80014e4 <Chara_5+0x19c>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	3303      	adds	r3, #3
 80014ca:	b2d9      	uxtb	r1, r3
 80014cc:	2300      	movs	r3, #0
 80014ce:	9300      	str	r3, [sp, #0]
 80014d0:	2300      	movs	r3, #0
 80014d2:	220a      	movs	r2, #10
 80014d4:	2004      	movs	r0, #4
 80014d6:	f7ff faed 	bl	8000ab4 <LEDs_L_C_RGB>
}
 80014da:	46c0      	nop			; (mov r8, r8)
 80014dc:	46bd      	mov	sp, r7
 80014de:	b002      	add	sp, #8
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	46c0      	nop			; (mov r8, r8)
 80014e4:	20000c88 	.word	0x20000c88

080014e8 <Chara_6>:
* Dessine la caractère "6" sur la matrice et la positionne aux emplacements	  *
* prédéfini des Heures(unité ou dizaine) et des Minutes(unité ou dizaine)	  *
******************************************************************************/

void Chara_6 (CharShiftTypeDef Shift)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af02      	add	r7, sp, #8
 80014ee:	0002      	movs	r2, r0
 80014f0:	1dfb      	adds	r3, r7, #7
 80014f2:	701a      	strb	r2, [r3, #0]
	static uint8_t shiftChar;

	switch (Shift)
 80014f4:	1dfb      	adds	r3, r7, #7
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b03      	cmp	r3, #3
 80014fa:	d014      	beq.n	8001526 <Chara_6+0x3e>
 80014fc:	dc17      	bgt.n	800152e <Chara_6+0x46>
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d00d      	beq.n	800151e <Chara_6+0x36>
 8001502:	dc14      	bgt.n	800152e <Chara_6+0x46>
 8001504:	2b00      	cmp	r3, #0
 8001506:	d002      	beq.n	800150e <Chara_6+0x26>
 8001508:	2b01      	cmp	r3, #1
 800150a:	d004      	beq.n	8001516 <Chara_6+0x2e>
	case HeureDizaine:
		shiftChar = 0;
		break;

	default:
		break;
 800150c:	e00f      	b.n	800152e <Chara_6+0x46>
		shiftChar = 14;
 800150e:	4b5d      	ldr	r3, [pc, #372]	; (8001684 <Chara_6+0x19c>)
 8001510:	220e      	movs	r2, #14
 8001512:	701a      	strb	r2, [r3, #0]
		break;
 8001514:	e00c      	b.n	8001530 <Chara_6+0x48>
		shiftChar = 10;
 8001516:	4b5b      	ldr	r3, [pc, #364]	; (8001684 <Chara_6+0x19c>)
 8001518:	220a      	movs	r2, #10
 800151a:	701a      	strb	r2, [r3, #0]
		break;
 800151c:	e008      	b.n	8001530 <Chara_6+0x48>
		shiftChar = 4;
 800151e:	4b59      	ldr	r3, [pc, #356]	; (8001684 <Chara_6+0x19c>)
 8001520:	2204      	movs	r2, #4
 8001522:	701a      	strb	r2, [r3, #0]
		break;
 8001524:	e004      	b.n	8001530 <Chara_6+0x48>
		shiftChar = 0;
 8001526:	4b57      	ldr	r3, [pc, #348]	; (8001684 <Chara_6+0x19c>)
 8001528:	2200      	movs	r2, #0
 800152a:	701a      	strb	r2, [r3, #0]
		break;
 800152c:	e000      	b.n	8001530 <Chara_6+0x48>
		break;
 800152e:	46c0      	nop			; (mov r8, r8)
	}

	LEDs_L_C_RGB(0, 1+shiftChar, 10, 0, 0);
 8001530:	4b54      	ldr	r3, [pc, #336]	; (8001684 <Chara_6+0x19c>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	3301      	adds	r3, #1
 8001536:	b2d9      	uxtb	r1, r3
 8001538:	2300      	movs	r3, #0
 800153a:	9300      	str	r3, [sp, #0]
 800153c:	2300      	movs	r3, #0
 800153e:	220a      	movs	r2, #10
 8001540:	2000      	movs	r0, #0
 8001542:	f7ff fab7 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(1, 1+shiftChar, 10, 0, 0);
 8001546:	4b4f      	ldr	r3, [pc, #316]	; (8001684 <Chara_6+0x19c>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	3301      	adds	r3, #1
 800154c:	b2d9      	uxtb	r1, r3
 800154e:	2300      	movs	r3, #0
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	2300      	movs	r3, #0
 8001554:	220a      	movs	r2, #10
 8001556:	2001      	movs	r0, #1
 8001558:	f7ff faac 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(2, 1+shiftChar, 10, 0, 0);
 800155c:	4b49      	ldr	r3, [pc, #292]	; (8001684 <Chara_6+0x19c>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	3301      	adds	r3, #1
 8001562:	b2d9      	uxtb	r1, r3
 8001564:	2300      	movs	r3, #0
 8001566:	9300      	str	r3, [sp, #0]
 8001568:	2300      	movs	r3, #0
 800156a:	220a      	movs	r2, #10
 800156c:	2002      	movs	r0, #2
 800156e:	f7ff faa1 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(3, 1+shiftChar, 10, 0, 0);
 8001572:	4b44      	ldr	r3, [pc, #272]	; (8001684 <Chara_6+0x19c>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	3301      	adds	r3, #1
 8001578:	b2d9      	uxtb	r1, r3
 800157a:	2300      	movs	r3, #0
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	2300      	movs	r3, #0
 8001580:	220a      	movs	r2, #10
 8001582:	2003      	movs	r0, #3
 8001584:	f7ff fa96 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(4, 1+shiftChar, 10, 0, 0);
 8001588:	4b3e      	ldr	r3, [pc, #248]	; (8001684 <Chara_6+0x19c>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	3301      	adds	r3, #1
 800158e:	b2d9      	uxtb	r1, r3
 8001590:	2300      	movs	r3, #0
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	2300      	movs	r3, #0
 8001596:	220a      	movs	r2, #10
 8001598:	2004      	movs	r0, #4
 800159a:	f7ff fa8b 	bl	8000ab4 <LEDs_L_C_RGB>

	LEDs_L_C_RGB(0, 2+shiftChar, 10, 0, 0);
 800159e:	4b39      	ldr	r3, [pc, #228]	; (8001684 <Chara_6+0x19c>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	3302      	adds	r3, #2
 80015a4:	b2d9      	uxtb	r1, r3
 80015a6:	2300      	movs	r3, #0
 80015a8:	9300      	str	r3, [sp, #0]
 80015aa:	2300      	movs	r3, #0
 80015ac:	220a      	movs	r2, #10
 80015ae:	2000      	movs	r0, #0
 80015b0:	f7ff fa80 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(1, 2+shiftChar, 0, 0, 0);
 80015b4:	4b33      	ldr	r3, [pc, #204]	; (8001684 <Chara_6+0x19c>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	3302      	adds	r3, #2
 80015ba:	b2d9      	uxtb	r1, r3
 80015bc:	2300      	movs	r3, #0
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	2300      	movs	r3, #0
 80015c2:	2200      	movs	r2, #0
 80015c4:	2001      	movs	r0, #1
 80015c6:	f7ff fa75 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(2, 2+shiftChar, 10, 0, 0);
 80015ca:	4b2e      	ldr	r3, [pc, #184]	; (8001684 <Chara_6+0x19c>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	3302      	adds	r3, #2
 80015d0:	b2d9      	uxtb	r1, r3
 80015d2:	2300      	movs	r3, #0
 80015d4:	9300      	str	r3, [sp, #0]
 80015d6:	2300      	movs	r3, #0
 80015d8:	220a      	movs	r2, #10
 80015da:	2002      	movs	r0, #2
 80015dc:	f7ff fa6a 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(3, 2+shiftChar, 0, 0, 0);
 80015e0:	4b28      	ldr	r3, [pc, #160]	; (8001684 <Chara_6+0x19c>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	3302      	adds	r3, #2
 80015e6:	b2d9      	uxtb	r1, r3
 80015e8:	2300      	movs	r3, #0
 80015ea:	9300      	str	r3, [sp, #0]
 80015ec:	2300      	movs	r3, #0
 80015ee:	2200      	movs	r2, #0
 80015f0:	2003      	movs	r0, #3
 80015f2:	f7ff fa5f 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(4, 2+shiftChar, 10, 0, 0);
 80015f6:	4b23      	ldr	r3, [pc, #140]	; (8001684 <Chara_6+0x19c>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	3302      	adds	r3, #2
 80015fc:	b2d9      	uxtb	r1, r3
 80015fe:	2300      	movs	r3, #0
 8001600:	9300      	str	r3, [sp, #0]
 8001602:	2300      	movs	r3, #0
 8001604:	220a      	movs	r2, #10
 8001606:	2004      	movs	r0, #4
 8001608:	f7ff fa54 	bl	8000ab4 <LEDs_L_C_RGB>

	LEDs_L_C_RGB(0, 3+shiftChar, 10, 0, 0);
 800160c:	4b1d      	ldr	r3, [pc, #116]	; (8001684 <Chara_6+0x19c>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	3303      	adds	r3, #3
 8001612:	b2d9      	uxtb	r1, r3
 8001614:	2300      	movs	r3, #0
 8001616:	9300      	str	r3, [sp, #0]
 8001618:	2300      	movs	r3, #0
 800161a:	220a      	movs	r2, #10
 800161c:	2000      	movs	r0, #0
 800161e:	f7ff fa49 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(1, 3+shiftChar, 0, 0, 0);
 8001622:	4b18      	ldr	r3, [pc, #96]	; (8001684 <Chara_6+0x19c>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	3303      	adds	r3, #3
 8001628:	b2d9      	uxtb	r1, r3
 800162a:	2300      	movs	r3, #0
 800162c:	9300      	str	r3, [sp, #0]
 800162e:	2300      	movs	r3, #0
 8001630:	2200      	movs	r2, #0
 8001632:	2001      	movs	r0, #1
 8001634:	f7ff fa3e 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(2, 3+shiftChar, 10, 0, 0);
 8001638:	4b12      	ldr	r3, [pc, #72]	; (8001684 <Chara_6+0x19c>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	3303      	adds	r3, #3
 800163e:	b2d9      	uxtb	r1, r3
 8001640:	2300      	movs	r3, #0
 8001642:	9300      	str	r3, [sp, #0]
 8001644:	2300      	movs	r3, #0
 8001646:	220a      	movs	r2, #10
 8001648:	2002      	movs	r0, #2
 800164a:	f7ff fa33 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(3, 3+shiftChar, 10, 0, 0);
 800164e:	4b0d      	ldr	r3, [pc, #52]	; (8001684 <Chara_6+0x19c>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	3303      	adds	r3, #3
 8001654:	b2d9      	uxtb	r1, r3
 8001656:	2300      	movs	r3, #0
 8001658:	9300      	str	r3, [sp, #0]
 800165a:	2300      	movs	r3, #0
 800165c:	220a      	movs	r2, #10
 800165e:	2003      	movs	r0, #3
 8001660:	f7ff fa28 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(4, 3+shiftChar, 10, 0, 0);
 8001664:	4b07      	ldr	r3, [pc, #28]	; (8001684 <Chara_6+0x19c>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	3303      	adds	r3, #3
 800166a:	b2d9      	uxtb	r1, r3
 800166c:	2300      	movs	r3, #0
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	2300      	movs	r3, #0
 8001672:	220a      	movs	r2, #10
 8001674:	2004      	movs	r0, #4
 8001676:	f7ff fa1d 	bl	8000ab4 <LEDs_L_C_RGB>
}
 800167a:	46c0      	nop			; (mov r8, r8)
 800167c:	46bd      	mov	sp, r7
 800167e:	b002      	add	sp, #8
 8001680:	bd80      	pop	{r7, pc}
 8001682:	46c0      	nop			; (mov r8, r8)
 8001684:	20000c89 	.word	0x20000c89

08001688 <Chara_7>:
* Dessine la caractère "7" sur la matrice et la positionne aux emplacements	  *
* prédéfini des Heures(unité ou dizaine) et des Minutes(unité ou dizaine)	  *
******************************************************************************/

void Chara_7 (CharShiftTypeDef Shift)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af02      	add	r7, sp, #8
 800168e:	0002      	movs	r2, r0
 8001690:	1dfb      	adds	r3, r7, #7
 8001692:	701a      	strb	r2, [r3, #0]
	static uint8_t shiftChar;

	switch (Shift)
 8001694:	1dfb      	adds	r3, r7, #7
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b03      	cmp	r3, #3
 800169a:	d014      	beq.n	80016c6 <Chara_7+0x3e>
 800169c:	dc17      	bgt.n	80016ce <Chara_7+0x46>
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d00d      	beq.n	80016be <Chara_7+0x36>
 80016a2:	dc14      	bgt.n	80016ce <Chara_7+0x46>
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d002      	beq.n	80016ae <Chara_7+0x26>
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d004      	beq.n	80016b6 <Chara_7+0x2e>
	case HeureDizaine:
		shiftChar = 0;
		break;

	default:
		break;
 80016ac:	e00f      	b.n	80016ce <Chara_7+0x46>
		shiftChar = 14;
 80016ae:	4b5d      	ldr	r3, [pc, #372]	; (8001824 <Chara_7+0x19c>)
 80016b0:	220e      	movs	r2, #14
 80016b2:	701a      	strb	r2, [r3, #0]
		break;
 80016b4:	e00c      	b.n	80016d0 <Chara_7+0x48>
		shiftChar = 10;
 80016b6:	4b5b      	ldr	r3, [pc, #364]	; (8001824 <Chara_7+0x19c>)
 80016b8:	220a      	movs	r2, #10
 80016ba:	701a      	strb	r2, [r3, #0]
		break;
 80016bc:	e008      	b.n	80016d0 <Chara_7+0x48>
		shiftChar = 4;
 80016be:	4b59      	ldr	r3, [pc, #356]	; (8001824 <Chara_7+0x19c>)
 80016c0:	2204      	movs	r2, #4
 80016c2:	701a      	strb	r2, [r3, #0]
		break;
 80016c4:	e004      	b.n	80016d0 <Chara_7+0x48>
		shiftChar = 0;
 80016c6:	4b57      	ldr	r3, [pc, #348]	; (8001824 <Chara_7+0x19c>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	701a      	strb	r2, [r3, #0]
		break;
 80016cc:	e000      	b.n	80016d0 <Chara_7+0x48>
		break;
 80016ce:	46c0      	nop			; (mov r8, r8)
	}

	LEDs_L_C_RGB(0, 1+shiftChar, 10, 0, 0);
 80016d0:	4b54      	ldr	r3, [pc, #336]	; (8001824 <Chara_7+0x19c>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	3301      	adds	r3, #1
 80016d6:	b2d9      	uxtb	r1, r3
 80016d8:	2300      	movs	r3, #0
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	2300      	movs	r3, #0
 80016de:	220a      	movs	r2, #10
 80016e0:	2000      	movs	r0, #0
 80016e2:	f7ff f9e7 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(1, 1+shiftChar, 0, 0, 0);
 80016e6:	4b4f      	ldr	r3, [pc, #316]	; (8001824 <Chara_7+0x19c>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	3301      	adds	r3, #1
 80016ec:	b2d9      	uxtb	r1, r3
 80016ee:	2300      	movs	r3, #0
 80016f0:	9300      	str	r3, [sp, #0]
 80016f2:	2300      	movs	r3, #0
 80016f4:	2200      	movs	r2, #0
 80016f6:	2001      	movs	r0, #1
 80016f8:	f7ff f9dc 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(2, 1+shiftChar, 0, 0, 0);
 80016fc:	4b49      	ldr	r3, [pc, #292]	; (8001824 <Chara_7+0x19c>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	3301      	adds	r3, #1
 8001702:	b2d9      	uxtb	r1, r3
 8001704:	2300      	movs	r3, #0
 8001706:	9300      	str	r3, [sp, #0]
 8001708:	2300      	movs	r3, #0
 800170a:	2200      	movs	r2, #0
 800170c:	2002      	movs	r0, #2
 800170e:	f7ff f9d1 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(3, 1+shiftChar, 0, 0, 0);
 8001712:	4b44      	ldr	r3, [pc, #272]	; (8001824 <Chara_7+0x19c>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	3301      	adds	r3, #1
 8001718:	b2d9      	uxtb	r1, r3
 800171a:	2300      	movs	r3, #0
 800171c:	9300      	str	r3, [sp, #0]
 800171e:	2300      	movs	r3, #0
 8001720:	2200      	movs	r2, #0
 8001722:	2003      	movs	r0, #3
 8001724:	f7ff f9c6 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(4, 1+shiftChar, 0, 0, 0);
 8001728:	4b3e      	ldr	r3, [pc, #248]	; (8001824 <Chara_7+0x19c>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	3301      	adds	r3, #1
 800172e:	b2d9      	uxtb	r1, r3
 8001730:	2300      	movs	r3, #0
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	2300      	movs	r3, #0
 8001736:	2200      	movs	r2, #0
 8001738:	2004      	movs	r0, #4
 800173a:	f7ff f9bb 	bl	8000ab4 <LEDs_L_C_RGB>

	LEDs_L_C_RGB(0, 2+shiftChar, 10, 0, 0);
 800173e:	4b39      	ldr	r3, [pc, #228]	; (8001824 <Chara_7+0x19c>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	3302      	adds	r3, #2
 8001744:	b2d9      	uxtb	r1, r3
 8001746:	2300      	movs	r3, #0
 8001748:	9300      	str	r3, [sp, #0]
 800174a:	2300      	movs	r3, #0
 800174c:	220a      	movs	r2, #10
 800174e:	2000      	movs	r0, #0
 8001750:	f7ff f9b0 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(1, 2+shiftChar, 0, 0, 0);
 8001754:	4b33      	ldr	r3, [pc, #204]	; (8001824 <Chara_7+0x19c>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	3302      	adds	r3, #2
 800175a:	b2d9      	uxtb	r1, r3
 800175c:	2300      	movs	r3, #0
 800175e:	9300      	str	r3, [sp, #0]
 8001760:	2300      	movs	r3, #0
 8001762:	2200      	movs	r2, #0
 8001764:	2001      	movs	r0, #1
 8001766:	f7ff f9a5 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(2, 2+shiftChar, 0, 0, 0);
 800176a:	4b2e      	ldr	r3, [pc, #184]	; (8001824 <Chara_7+0x19c>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	3302      	adds	r3, #2
 8001770:	b2d9      	uxtb	r1, r3
 8001772:	2300      	movs	r3, #0
 8001774:	9300      	str	r3, [sp, #0]
 8001776:	2300      	movs	r3, #0
 8001778:	2200      	movs	r2, #0
 800177a:	2002      	movs	r0, #2
 800177c:	f7ff f99a 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(3, 2+shiftChar, 0, 0, 0);
 8001780:	4b28      	ldr	r3, [pc, #160]	; (8001824 <Chara_7+0x19c>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	3302      	adds	r3, #2
 8001786:	b2d9      	uxtb	r1, r3
 8001788:	2300      	movs	r3, #0
 800178a:	9300      	str	r3, [sp, #0]
 800178c:	2300      	movs	r3, #0
 800178e:	2200      	movs	r2, #0
 8001790:	2003      	movs	r0, #3
 8001792:	f7ff f98f 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(4, 2+shiftChar, 0, 0, 0);
 8001796:	4b23      	ldr	r3, [pc, #140]	; (8001824 <Chara_7+0x19c>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	3302      	adds	r3, #2
 800179c:	b2d9      	uxtb	r1, r3
 800179e:	2300      	movs	r3, #0
 80017a0:	9300      	str	r3, [sp, #0]
 80017a2:	2300      	movs	r3, #0
 80017a4:	2200      	movs	r2, #0
 80017a6:	2004      	movs	r0, #4
 80017a8:	f7ff f984 	bl	8000ab4 <LEDs_L_C_RGB>

	LEDs_L_C_RGB(0, 3+shiftChar, 10, 0, 0);
 80017ac:	4b1d      	ldr	r3, [pc, #116]	; (8001824 <Chara_7+0x19c>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	3303      	adds	r3, #3
 80017b2:	b2d9      	uxtb	r1, r3
 80017b4:	2300      	movs	r3, #0
 80017b6:	9300      	str	r3, [sp, #0]
 80017b8:	2300      	movs	r3, #0
 80017ba:	220a      	movs	r2, #10
 80017bc:	2000      	movs	r0, #0
 80017be:	f7ff f979 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(1, 3+shiftChar, 10, 0, 0);
 80017c2:	4b18      	ldr	r3, [pc, #96]	; (8001824 <Chara_7+0x19c>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	3303      	adds	r3, #3
 80017c8:	b2d9      	uxtb	r1, r3
 80017ca:	2300      	movs	r3, #0
 80017cc:	9300      	str	r3, [sp, #0]
 80017ce:	2300      	movs	r3, #0
 80017d0:	220a      	movs	r2, #10
 80017d2:	2001      	movs	r0, #1
 80017d4:	f7ff f96e 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(2, 3+shiftChar, 10, 0, 0);
 80017d8:	4b12      	ldr	r3, [pc, #72]	; (8001824 <Chara_7+0x19c>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	3303      	adds	r3, #3
 80017de:	b2d9      	uxtb	r1, r3
 80017e0:	2300      	movs	r3, #0
 80017e2:	9300      	str	r3, [sp, #0]
 80017e4:	2300      	movs	r3, #0
 80017e6:	220a      	movs	r2, #10
 80017e8:	2002      	movs	r0, #2
 80017ea:	f7ff f963 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(3, 3+shiftChar, 10, 0, 0);
 80017ee:	4b0d      	ldr	r3, [pc, #52]	; (8001824 <Chara_7+0x19c>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	3303      	adds	r3, #3
 80017f4:	b2d9      	uxtb	r1, r3
 80017f6:	2300      	movs	r3, #0
 80017f8:	9300      	str	r3, [sp, #0]
 80017fa:	2300      	movs	r3, #0
 80017fc:	220a      	movs	r2, #10
 80017fe:	2003      	movs	r0, #3
 8001800:	f7ff f958 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(4, 3+shiftChar, 10, 0, 0);
 8001804:	4b07      	ldr	r3, [pc, #28]	; (8001824 <Chara_7+0x19c>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	3303      	adds	r3, #3
 800180a:	b2d9      	uxtb	r1, r3
 800180c:	2300      	movs	r3, #0
 800180e:	9300      	str	r3, [sp, #0]
 8001810:	2300      	movs	r3, #0
 8001812:	220a      	movs	r2, #10
 8001814:	2004      	movs	r0, #4
 8001816:	f7ff f94d 	bl	8000ab4 <LEDs_L_C_RGB>
}
 800181a:	46c0      	nop			; (mov r8, r8)
 800181c:	46bd      	mov	sp, r7
 800181e:	b002      	add	sp, #8
 8001820:	bd80      	pop	{r7, pc}
 8001822:	46c0      	nop			; (mov r8, r8)
 8001824:	20000c8a 	.word	0x20000c8a

08001828 <Chara_8>:
* Dessine la caractère "8" sur la matrice et la positionne aux emplacements	  *
* prédéfini des Heures(unité ou dizaine) et des Minutes(unité ou dizaine)	  *
******************************************************************************/

void Chara_8 (CharShiftTypeDef Shift)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af02      	add	r7, sp, #8
 800182e:	0002      	movs	r2, r0
 8001830:	1dfb      	adds	r3, r7, #7
 8001832:	701a      	strb	r2, [r3, #0]
	static uint8_t shiftChar;

	switch (Shift)
 8001834:	1dfb      	adds	r3, r7, #7
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b03      	cmp	r3, #3
 800183a:	d014      	beq.n	8001866 <Chara_8+0x3e>
 800183c:	dc17      	bgt.n	800186e <Chara_8+0x46>
 800183e:	2b02      	cmp	r3, #2
 8001840:	d00d      	beq.n	800185e <Chara_8+0x36>
 8001842:	dc14      	bgt.n	800186e <Chara_8+0x46>
 8001844:	2b00      	cmp	r3, #0
 8001846:	d002      	beq.n	800184e <Chara_8+0x26>
 8001848:	2b01      	cmp	r3, #1
 800184a:	d004      	beq.n	8001856 <Chara_8+0x2e>
	case HeureDizaine:
		shiftChar = 0;
		break;

	default:
		break;
 800184c:	e00f      	b.n	800186e <Chara_8+0x46>
		shiftChar = 14;
 800184e:	4b5d      	ldr	r3, [pc, #372]	; (80019c4 <Chara_8+0x19c>)
 8001850:	220e      	movs	r2, #14
 8001852:	701a      	strb	r2, [r3, #0]
		break;
 8001854:	e00c      	b.n	8001870 <Chara_8+0x48>
		shiftChar = 10;
 8001856:	4b5b      	ldr	r3, [pc, #364]	; (80019c4 <Chara_8+0x19c>)
 8001858:	220a      	movs	r2, #10
 800185a:	701a      	strb	r2, [r3, #0]
		break;
 800185c:	e008      	b.n	8001870 <Chara_8+0x48>
		shiftChar = 4;
 800185e:	4b59      	ldr	r3, [pc, #356]	; (80019c4 <Chara_8+0x19c>)
 8001860:	2204      	movs	r2, #4
 8001862:	701a      	strb	r2, [r3, #0]
		break;
 8001864:	e004      	b.n	8001870 <Chara_8+0x48>
		shiftChar = 0;
 8001866:	4b57      	ldr	r3, [pc, #348]	; (80019c4 <Chara_8+0x19c>)
 8001868:	2200      	movs	r2, #0
 800186a:	701a      	strb	r2, [r3, #0]
		break;
 800186c:	e000      	b.n	8001870 <Chara_8+0x48>
		break;
 800186e:	46c0      	nop			; (mov r8, r8)
	}

	LEDs_L_C_RGB(0, 1+shiftChar, 10, 0, 0);
 8001870:	4b54      	ldr	r3, [pc, #336]	; (80019c4 <Chara_8+0x19c>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	3301      	adds	r3, #1
 8001876:	b2d9      	uxtb	r1, r3
 8001878:	2300      	movs	r3, #0
 800187a:	9300      	str	r3, [sp, #0]
 800187c:	2300      	movs	r3, #0
 800187e:	220a      	movs	r2, #10
 8001880:	2000      	movs	r0, #0
 8001882:	f7ff f917 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(1, 1+shiftChar, 10, 0, 0);
 8001886:	4b4f      	ldr	r3, [pc, #316]	; (80019c4 <Chara_8+0x19c>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	3301      	adds	r3, #1
 800188c:	b2d9      	uxtb	r1, r3
 800188e:	2300      	movs	r3, #0
 8001890:	9300      	str	r3, [sp, #0]
 8001892:	2300      	movs	r3, #0
 8001894:	220a      	movs	r2, #10
 8001896:	2001      	movs	r0, #1
 8001898:	f7ff f90c 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(2, 1+shiftChar, 10, 0, 0);
 800189c:	4b49      	ldr	r3, [pc, #292]	; (80019c4 <Chara_8+0x19c>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	3301      	adds	r3, #1
 80018a2:	b2d9      	uxtb	r1, r3
 80018a4:	2300      	movs	r3, #0
 80018a6:	9300      	str	r3, [sp, #0]
 80018a8:	2300      	movs	r3, #0
 80018aa:	220a      	movs	r2, #10
 80018ac:	2002      	movs	r0, #2
 80018ae:	f7ff f901 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(3, 1+shiftChar, 10, 0, 0);
 80018b2:	4b44      	ldr	r3, [pc, #272]	; (80019c4 <Chara_8+0x19c>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	3301      	adds	r3, #1
 80018b8:	b2d9      	uxtb	r1, r3
 80018ba:	2300      	movs	r3, #0
 80018bc:	9300      	str	r3, [sp, #0]
 80018be:	2300      	movs	r3, #0
 80018c0:	220a      	movs	r2, #10
 80018c2:	2003      	movs	r0, #3
 80018c4:	f7ff f8f6 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(4, 1+shiftChar, 10, 0, 0);
 80018c8:	4b3e      	ldr	r3, [pc, #248]	; (80019c4 <Chara_8+0x19c>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	3301      	adds	r3, #1
 80018ce:	b2d9      	uxtb	r1, r3
 80018d0:	2300      	movs	r3, #0
 80018d2:	9300      	str	r3, [sp, #0]
 80018d4:	2300      	movs	r3, #0
 80018d6:	220a      	movs	r2, #10
 80018d8:	2004      	movs	r0, #4
 80018da:	f7ff f8eb 	bl	8000ab4 <LEDs_L_C_RGB>

	LEDs_L_C_RGB(0, 2+shiftChar, 10, 0, 0);
 80018de:	4b39      	ldr	r3, [pc, #228]	; (80019c4 <Chara_8+0x19c>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	3302      	adds	r3, #2
 80018e4:	b2d9      	uxtb	r1, r3
 80018e6:	2300      	movs	r3, #0
 80018e8:	9300      	str	r3, [sp, #0]
 80018ea:	2300      	movs	r3, #0
 80018ec:	220a      	movs	r2, #10
 80018ee:	2000      	movs	r0, #0
 80018f0:	f7ff f8e0 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(1, 2+shiftChar, 0, 0, 0);
 80018f4:	4b33      	ldr	r3, [pc, #204]	; (80019c4 <Chara_8+0x19c>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	3302      	adds	r3, #2
 80018fa:	b2d9      	uxtb	r1, r3
 80018fc:	2300      	movs	r3, #0
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	2300      	movs	r3, #0
 8001902:	2200      	movs	r2, #0
 8001904:	2001      	movs	r0, #1
 8001906:	f7ff f8d5 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(2, 2+shiftChar, 10, 0, 0);
 800190a:	4b2e      	ldr	r3, [pc, #184]	; (80019c4 <Chara_8+0x19c>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	3302      	adds	r3, #2
 8001910:	b2d9      	uxtb	r1, r3
 8001912:	2300      	movs	r3, #0
 8001914:	9300      	str	r3, [sp, #0]
 8001916:	2300      	movs	r3, #0
 8001918:	220a      	movs	r2, #10
 800191a:	2002      	movs	r0, #2
 800191c:	f7ff f8ca 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(3, 2+shiftChar, 0, 0, 0);
 8001920:	4b28      	ldr	r3, [pc, #160]	; (80019c4 <Chara_8+0x19c>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	3302      	adds	r3, #2
 8001926:	b2d9      	uxtb	r1, r3
 8001928:	2300      	movs	r3, #0
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	2300      	movs	r3, #0
 800192e:	2200      	movs	r2, #0
 8001930:	2003      	movs	r0, #3
 8001932:	f7ff f8bf 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(4, 2+shiftChar, 10, 0, 0);
 8001936:	4b23      	ldr	r3, [pc, #140]	; (80019c4 <Chara_8+0x19c>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	3302      	adds	r3, #2
 800193c:	b2d9      	uxtb	r1, r3
 800193e:	2300      	movs	r3, #0
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	2300      	movs	r3, #0
 8001944:	220a      	movs	r2, #10
 8001946:	2004      	movs	r0, #4
 8001948:	f7ff f8b4 	bl	8000ab4 <LEDs_L_C_RGB>

	LEDs_L_C_RGB(0, 3+shiftChar, 10, 0, 0);
 800194c:	4b1d      	ldr	r3, [pc, #116]	; (80019c4 <Chara_8+0x19c>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	3303      	adds	r3, #3
 8001952:	b2d9      	uxtb	r1, r3
 8001954:	2300      	movs	r3, #0
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	2300      	movs	r3, #0
 800195a:	220a      	movs	r2, #10
 800195c:	2000      	movs	r0, #0
 800195e:	f7ff f8a9 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(1, 3+shiftChar, 10, 0, 0);
 8001962:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <Chara_8+0x19c>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	3303      	adds	r3, #3
 8001968:	b2d9      	uxtb	r1, r3
 800196a:	2300      	movs	r3, #0
 800196c:	9300      	str	r3, [sp, #0]
 800196e:	2300      	movs	r3, #0
 8001970:	220a      	movs	r2, #10
 8001972:	2001      	movs	r0, #1
 8001974:	f7ff f89e 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(2, 3+shiftChar, 10, 0, 0);
 8001978:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <Chara_8+0x19c>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	3303      	adds	r3, #3
 800197e:	b2d9      	uxtb	r1, r3
 8001980:	2300      	movs	r3, #0
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	2300      	movs	r3, #0
 8001986:	220a      	movs	r2, #10
 8001988:	2002      	movs	r0, #2
 800198a:	f7ff f893 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(3, 3+shiftChar, 10, 0, 0);
 800198e:	4b0d      	ldr	r3, [pc, #52]	; (80019c4 <Chara_8+0x19c>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	3303      	adds	r3, #3
 8001994:	b2d9      	uxtb	r1, r3
 8001996:	2300      	movs	r3, #0
 8001998:	9300      	str	r3, [sp, #0]
 800199a:	2300      	movs	r3, #0
 800199c:	220a      	movs	r2, #10
 800199e:	2003      	movs	r0, #3
 80019a0:	f7ff f888 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(4, 3+shiftChar, 10, 0, 0);
 80019a4:	4b07      	ldr	r3, [pc, #28]	; (80019c4 <Chara_8+0x19c>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	3303      	adds	r3, #3
 80019aa:	b2d9      	uxtb	r1, r3
 80019ac:	2300      	movs	r3, #0
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	2300      	movs	r3, #0
 80019b2:	220a      	movs	r2, #10
 80019b4:	2004      	movs	r0, #4
 80019b6:	f7ff f87d 	bl	8000ab4 <LEDs_L_C_RGB>
}
 80019ba:	46c0      	nop			; (mov r8, r8)
 80019bc:	46bd      	mov	sp, r7
 80019be:	b002      	add	sp, #8
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	46c0      	nop			; (mov r8, r8)
 80019c4:	20000c8b 	.word	0x20000c8b

080019c8 <Chara_9>:
* Dessine la caractère "9" sur la matrice et la positionne aux emplacements	  *
* prédéfini des Heures(unité ou dizaine) et des Minutes(unité ou dizaine)	  *
******************************************************************************/

void Chara_9 (CharShiftTypeDef Shift)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af02      	add	r7, sp, #8
 80019ce:	0002      	movs	r2, r0
 80019d0:	1dfb      	adds	r3, r7, #7
 80019d2:	701a      	strb	r2, [r3, #0]
	static uint8_t shiftChar;

	switch (Shift)
 80019d4:	1dfb      	adds	r3, r7, #7
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b03      	cmp	r3, #3
 80019da:	d014      	beq.n	8001a06 <Chara_9+0x3e>
 80019dc:	dc17      	bgt.n	8001a0e <Chara_9+0x46>
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d00d      	beq.n	80019fe <Chara_9+0x36>
 80019e2:	dc14      	bgt.n	8001a0e <Chara_9+0x46>
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d002      	beq.n	80019ee <Chara_9+0x26>
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d004      	beq.n	80019f6 <Chara_9+0x2e>
	case HeureDizaine:
		shiftChar = 0;
		break;

	default:
		break;
 80019ec:	e00f      	b.n	8001a0e <Chara_9+0x46>
		shiftChar = 14;
 80019ee:	4b5d      	ldr	r3, [pc, #372]	; (8001b64 <Chara_9+0x19c>)
 80019f0:	220e      	movs	r2, #14
 80019f2:	701a      	strb	r2, [r3, #0]
		break;
 80019f4:	e00c      	b.n	8001a10 <Chara_9+0x48>
		shiftChar = 10;
 80019f6:	4b5b      	ldr	r3, [pc, #364]	; (8001b64 <Chara_9+0x19c>)
 80019f8:	220a      	movs	r2, #10
 80019fa:	701a      	strb	r2, [r3, #0]
		break;
 80019fc:	e008      	b.n	8001a10 <Chara_9+0x48>
		shiftChar = 4;
 80019fe:	4b59      	ldr	r3, [pc, #356]	; (8001b64 <Chara_9+0x19c>)
 8001a00:	2204      	movs	r2, #4
 8001a02:	701a      	strb	r2, [r3, #0]
		break;
 8001a04:	e004      	b.n	8001a10 <Chara_9+0x48>
		shiftChar = 0;
 8001a06:	4b57      	ldr	r3, [pc, #348]	; (8001b64 <Chara_9+0x19c>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	701a      	strb	r2, [r3, #0]
		break;
 8001a0c:	e000      	b.n	8001a10 <Chara_9+0x48>
		break;
 8001a0e:	46c0      	nop			; (mov r8, r8)
	}

	LEDs_L_C_RGB(0, 1+shiftChar, 10, 0, 0);
 8001a10:	4b54      	ldr	r3, [pc, #336]	; (8001b64 <Chara_9+0x19c>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	3301      	adds	r3, #1
 8001a16:	b2d9      	uxtb	r1, r3
 8001a18:	2300      	movs	r3, #0
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	220a      	movs	r2, #10
 8001a20:	2000      	movs	r0, #0
 8001a22:	f7ff f847 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(1, 1+shiftChar, 10, 0, 0);
 8001a26:	4b4f      	ldr	r3, [pc, #316]	; (8001b64 <Chara_9+0x19c>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	b2d9      	uxtb	r1, r3
 8001a2e:	2300      	movs	r3, #0
 8001a30:	9300      	str	r3, [sp, #0]
 8001a32:	2300      	movs	r3, #0
 8001a34:	220a      	movs	r2, #10
 8001a36:	2001      	movs	r0, #1
 8001a38:	f7ff f83c 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(2, 1+shiftChar, 10, 0, 0);
 8001a3c:	4b49      	ldr	r3, [pc, #292]	; (8001b64 <Chara_9+0x19c>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	3301      	adds	r3, #1
 8001a42:	b2d9      	uxtb	r1, r3
 8001a44:	2300      	movs	r3, #0
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	2300      	movs	r3, #0
 8001a4a:	220a      	movs	r2, #10
 8001a4c:	2002      	movs	r0, #2
 8001a4e:	f7ff f831 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(3, 1+shiftChar, 0, 0, 0);
 8001a52:	4b44      	ldr	r3, [pc, #272]	; (8001b64 <Chara_9+0x19c>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	3301      	adds	r3, #1
 8001a58:	b2d9      	uxtb	r1, r3
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	2300      	movs	r3, #0
 8001a60:	2200      	movs	r2, #0
 8001a62:	2003      	movs	r0, #3
 8001a64:	f7ff f826 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(4, 1+shiftChar, 10, 0, 0);
 8001a68:	4b3e      	ldr	r3, [pc, #248]	; (8001b64 <Chara_9+0x19c>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	b2d9      	uxtb	r1, r3
 8001a70:	2300      	movs	r3, #0
 8001a72:	9300      	str	r3, [sp, #0]
 8001a74:	2300      	movs	r3, #0
 8001a76:	220a      	movs	r2, #10
 8001a78:	2004      	movs	r0, #4
 8001a7a:	f7ff f81b 	bl	8000ab4 <LEDs_L_C_RGB>

	LEDs_L_C_RGB(0, 2+shiftChar, 10, 0, 0);
 8001a7e:	4b39      	ldr	r3, [pc, #228]	; (8001b64 <Chara_9+0x19c>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	3302      	adds	r3, #2
 8001a84:	b2d9      	uxtb	r1, r3
 8001a86:	2300      	movs	r3, #0
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	220a      	movs	r2, #10
 8001a8e:	2000      	movs	r0, #0
 8001a90:	f7ff f810 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(1, 2+shiftChar, 0, 0, 0);
 8001a94:	4b33      	ldr	r3, [pc, #204]	; (8001b64 <Chara_9+0x19c>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	3302      	adds	r3, #2
 8001a9a:	b2d9      	uxtb	r1, r3
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	9300      	str	r3, [sp, #0]
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	2001      	movs	r0, #1
 8001aa6:	f7ff f805 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(2, 2+shiftChar, 10, 0, 0);
 8001aaa:	4b2e      	ldr	r3, [pc, #184]	; (8001b64 <Chara_9+0x19c>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	3302      	adds	r3, #2
 8001ab0:	b2d9      	uxtb	r1, r3
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	9300      	str	r3, [sp, #0]
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	220a      	movs	r2, #10
 8001aba:	2002      	movs	r0, #2
 8001abc:	f7fe fffa 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(3, 2+shiftChar, 0, 0, 0);
 8001ac0:	4b28      	ldr	r3, [pc, #160]	; (8001b64 <Chara_9+0x19c>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	3302      	adds	r3, #2
 8001ac6:	b2d9      	uxtb	r1, r3
 8001ac8:	2300      	movs	r3, #0
 8001aca:	9300      	str	r3, [sp, #0]
 8001acc:	2300      	movs	r3, #0
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2003      	movs	r0, #3
 8001ad2:	f7fe ffef 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(4, 2+shiftChar, 10, 0, 0);
 8001ad6:	4b23      	ldr	r3, [pc, #140]	; (8001b64 <Chara_9+0x19c>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	3302      	adds	r3, #2
 8001adc:	b2d9      	uxtb	r1, r3
 8001ade:	2300      	movs	r3, #0
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	220a      	movs	r2, #10
 8001ae6:	2004      	movs	r0, #4
 8001ae8:	f7fe ffe4 	bl	8000ab4 <LEDs_L_C_RGB>

	LEDs_L_C_RGB(0, 3+shiftChar, 10, 0, 0);
 8001aec:	4b1d      	ldr	r3, [pc, #116]	; (8001b64 <Chara_9+0x19c>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	3303      	adds	r3, #3
 8001af2:	b2d9      	uxtb	r1, r3
 8001af4:	2300      	movs	r3, #0
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	2300      	movs	r3, #0
 8001afa:	220a      	movs	r2, #10
 8001afc:	2000      	movs	r0, #0
 8001afe:	f7fe ffd9 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(1, 3+shiftChar, 10, 0, 0);
 8001b02:	4b18      	ldr	r3, [pc, #96]	; (8001b64 <Chara_9+0x19c>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	3303      	adds	r3, #3
 8001b08:	b2d9      	uxtb	r1, r3
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	9300      	str	r3, [sp, #0]
 8001b0e:	2300      	movs	r3, #0
 8001b10:	220a      	movs	r2, #10
 8001b12:	2001      	movs	r0, #1
 8001b14:	f7fe ffce 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(2, 3+shiftChar, 10, 0, 0);
 8001b18:	4b12      	ldr	r3, [pc, #72]	; (8001b64 <Chara_9+0x19c>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	3303      	adds	r3, #3
 8001b1e:	b2d9      	uxtb	r1, r3
 8001b20:	2300      	movs	r3, #0
 8001b22:	9300      	str	r3, [sp, #0]
 8001b24:	2300      	movs	r3, #0
 8001b26:	220a      	movs	r2, #10
 8001b28:	2002      	movs	r0, #2
 8001b2a:	f7fe ffc3 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(3, 3+shiftChar, 10, 0, 0);
 8001b2e:	4b0d      	ldr	r3, [pc, #52]	; (8001b64 <Chara_9+0x19c>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	3303      	adds	r3, #3
 8001b34:	b2d9      	uxtb	r1, r3
 8001b36:	2300      	movs	r3, #0
 8001b38:	9300      	str	r3, [sp, #0]
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	220a      	movs	r2, #10
 8001b3e:	2003      	movs	r0, #3
 8001b40:	f7fe ffb8 	bl	8000ab4 <LEDs_L_C_RGB>
	LEDs_L_C_RGB(4, 3+shiftChar, 10, 0, 0);
 8001b44:	4b07      	ldr	r3, [pc, #28]	; (8001b64 <Chara_9+0x19c>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	3303      	adds	r3, #3
 8001b4a:	b2d9      	uxtb	r1, r3
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	2300      	movs	r3, #0
 8001b52:	220a      	movs	r2, #10
 8001b54:	2004      	movs	r0, #4
 8001b56:	f7fe ffad 	bl	8000ab4 <LEDs_L_C_RGB>
}
 8001b5a:	46c0      	nop			; (mov r8, r8)
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	b002      	add	sp, #8
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	46c0      	nop			; (mov r8, r8)
 8001b64:	20000c8c 	.word	0x20000c8c

08001b68 <Clignotement1S>:
* Fait clignoter les deux LEDs qui sépare les heures des minutes chaque		  *
* seconde																	  *
******************************************************************************/

void Clignotement1S (void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af02      	add	r7, sp, #8
	static uint16_t ComptX1000 = 0;

	/*Compte une seconde éteint et allumé*/

	if (ComptX1000 <= 42)
 8001b6e:	4b1a      	ldr	r3, [pc, #104]	; (8001bd8 <Clignotement1S+0x70>)
 8001b70:	881b      	ldrh	r3, [r3, #0]
 8001b72:	2b2a      	cmp	r3, #42	; 0x2a
 8001b74:	d810      	bhi.n	8001b98 <Clignotement1S+0x30>
	{
		LEDs_L_C_RGB(1, 9, 10, 0, 0);
 8001b76:	2300      	movs	r3, #0
 8001b78:	9300      	str	r3, [sp, #0]
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	220a      	movs	r2, #10
 8001b7e:	2109      	movs	r1, #9
 8001b80:	2001      	movs	r0, #1
 8001b82:	f7fe ff97 	bl	8000ab4 <LEDs_L_C_RGB>
		LEDs_L_C_RGB(3, 9, 10, 0, 0);
 8001b86:	2300      	movs	r3, #0
 8001b88:	9300      	str	r3, [sp, #0]
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	220a      	movs	r2, #10
 8001b8e:	2109      	movs	r1, #9
 8001b90:	2003      	movs	r0, #3
 8001b92:	f7fe ff8f 	bl	8000ab4 <LEDs_L_C_RGB>
 8001b96:	e00f      	b.n	8001bb8 <Clignotement1S+0x50>
	}
	else
	{
		LEDs_L_C_RGB(1, 9, 0, 0, 0);
 8001b98:	2300      	movs	r3, #0
 8001b9a:	9300      	str	r3, [sp, #0]
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	2109      	movs	r1, #9
 8001ba2:	2001      	movs	r0, #1
 8001ba4:	f7fe ff86 	bl	8000ab4 <LEDs_L_C_RGB>
		LEDs_L_C_RGB(3, 9, 0, 0, 0);
 8001ba8:	2300      	movs	r3, #0
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	2300      	movs	r3, #0
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2109      	movs	r1, #9
 8001bb2:	2003      	movs	r0, #3
 8001bb4:	f7fe ff7e 	bl	8000ab4 <LEDs_L_C_RGB>
	}

	ComptX1000++;
 8001bb8:	4b07      	ldr	r3, [pc, #28]	; (8001bd8 <Clignotement1S+0x70>)
 8001bba:	881b      	ldrh	r3, [r3, #0]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <Clignotement1S+0x70>)
 8001bc2:	801a      	strh	r2, [r3, #0]

	if(ComptX1000 >= 84) //Remise à zéro du compteur
 8001bc4:	4b04      	ldr	r3, [pc, #16]	; (8001bd8 <Clignotement1S+0x70>)
 8001bc6:	881b      	ldrh	r3, [r3, #0]
 8001bc8:	2b53      	cmp	r3, #83	; 0x53
 8001bca:	d902      	bls.n	8001bd2 <Clignotement1S+0x6a>
	{
		ComptX1000 = 0;
 8001bcc:	4b02      	ldr	r3, [pc, #8]	; (8001bd8 <Clignotement1S+0x70>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	801a      	strh	r2, [r3, #0]
	}
}
 8001bd2:	46c0      	nop			; (mov r8, r8)
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20000c8e 	.word	0x20000c8e

08001bdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001be0:	b672      	cpsid	i
}
 8001be2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001be4:	e7fe      	b.n	8001be4 <Error_Handler+0x8>
	...

08001be8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bee:	4b0f      	ldr	r3, [pc, #60]	; (8001c2c <HAL_MspInit+0x44>)
 8001bf0:	699a      	ldr	r2, [r3, #24]
 8001bf2:	4b0e      	ldr	r3, [pc, #56]	; (8001c2c <HAL_MspInit+0x44>)
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	619a      	str	r2, [r3, #24]
 8001bfa:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <HAL_MspInit+0x44>)
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	4013      	ands	r3, r2
 8001c02:	607b      	str	r3, [r7, #4]
 8001c04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c06:	4b09      	ldr	r3, [pc, #36]	; (8001c2c <HAL_MspInit+0x44>)
 8001c08:	69da      	ldr	r2, [r3, #28]
 8001c0a:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <HAL_MspInit+0x44>)
 8001c0c:	2180      	movs	r1, #128	; 0x80
 8001c0e:	0549      	lsls	r1, r1, #21
 8001c10:	430a      	orrs	r2, r1
 8001c12:	61da      	str	r2, [r3, #28]
 8001c14:	4b05      	ldr	r3, [pc, #20]	; (8001c2c <HAL_MspInit+0x44>)
 8001c16:	69da      	ldr	r2, [r3, #28]
 8001c18:	2380      	movs	r3, #128	; 0x80
 8001c1a:	055b      	lsls	r3, r3, #21
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	603b      	str	r3, [r7, #0]
 8001c20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c22:	46c0      	nop			; (mov r8, r8)
 8001c24:	46bd      	mov	sp, r7
 8001c26:	b002      	add	sp, #8
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	46c0      	nop			; (mov r8, r8)
 8001c2c:	40021000 	.word	0x40021000

08001c30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c30:	b590      	push	{r4, r7, lr}
 8001c32:	b08b      	sub	sp, #44	; 0x2c
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c38:	2414      	movs	r4, #20
 8001c3a:	193b      	adds	r3, r7, r4
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	2314      	movs	r3, #20
 8001c40:	001a      	movs	r2, r3
 8001c42:	2100      	movs	r1, #0
 8001c44:	f004 fad9 	bl	80061fa <memset>
  if(hadc->Instance==ADC1)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a31      	ldr	r2, [pc, #196]	; (8001d14 <HAL_ADC_MspInit+0xe4>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d15b      	bne.n	8001d0a <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c52:	4b31      	ldr	r3, [pc, #196]	; (8001d18 <HAL_ADC_MspInit+0xe8>)
 8001c54:	699a      	ldr	r2, [r3, #24]
 8001c56:	4b30      	ldr	r3, [pc, #192]	; (8001d18 <HAL_ADC_MspInit+0xe8>)
 8001c58:	2180      	movs	r1, #128	; 0x80
 8001c5a:	0089      	lsls	r1, r1, #2
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	619a      	str	r2, [r3, #24]
 8001c60:	4b2d      	ldr	r3, [pc, #180]	; (8001d18 <HAL_ADC_MspInit+0xe8>)
 8001c62:	699a      	ldr	r2, [r3, #24]
 8001c64:	2380      	movs	r3, #128	; 0x80
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	4013      	ands	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
 8001c6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6e:	4b2a      	ldr	r3, [pc, #168]	; (8001d18 <HAL_ADC_MspInit+0xe8>)
 8001c70:	695a      	ldr	r2, [r3, #20]
 8001c72:	4b29      	ldr	r3, [pc, #164]	; (8001d18 <HAL_ADC_MspInit+0xe8>)
 8001c74:	2180      	movs	r1, #128	; 0x80
 8001c76:	0289      	lsls	r1, r1, #10
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	615a      	str	r2, [r3, #20]
 8001c7c:	4b26      	ldr	r3, [pc, #152]	; (8001d18 <HAL_ADC_MspInit+0xe8>)
 8001c7e:	695a      	ldr	r2, [r3, #20]
 8001c80:	2380      	movs	r3, #128	; 0x80
 8001c82:	029b      	lsls	r3, r3, #10
 8001c84:	4013      	ands	r3, r2
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA7     ------> ADC_IN7
    */
    GPIO_InitStruct.Pin = ADC_BRIGHTNESS_Pin;
 8001c8a:	193b      	adds	r3, r7, r4
 8001c8c:	2280      	movs	r2, #128	; 0x80
 8001c8e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c90:	193b      	adds	r3, r7, r4
 8001c92:	2203      	movs	r2, #3
 8001c94:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c96:	193b      	adds	r3, r7, r4
 8001c98:	2200      	movs	r2, #0
 8001c9a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(ADC_BRIGHTNESS_GPIO_Port, &GPIO_InitStruct);
 8001c9c:	193a      	adds	r2, r7, r4
 8001c9e:	2390      	movs	r3, #144	; 0x90
 8001ca0:	05db      	lsls	r3, r3, #23
 8001ca2:	0011      	movs	r1, r2
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	f001 f919 	bl	8002edc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8001caa:	4b1c      	ldr	r3, [pc, #112]	; (8001d1c <HAL_ADC_MspInit+0xec>)
 8001cac:	4a1c      	ldr	r2, [pc, #112]	; (8001d20 <HAL_ADC_MspInit+0xf0>)
 8001cae:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cb0:	4b1a      	ldr	r3, [pc, #104]	; (8001d1c <HAL_ADC_MspInit+0xec>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cb6:	4b19      	ldr	r3, [pc, #100]	; (8001d1c <HAL_ADC_MspInit+0xec>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001cbc:	4b17      	ldr	r3, [pc, #92]	; (8001d1c <HAL_ADC_MspInit+0xec>)
 8001cbe:	2280      	movs	r2, #128	; 0x80
 8001cc0:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001cc2:	4b16      	ldr	r3, [pc, #88]	; (8001d1c <HAL_ADC_MspInit+0xec>)
 8001cc4:	2280      	movs	r2, #128	; 0x80
 8001cc6:	0052      	lsls	r2, r2, #1
 8001cc8:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001cca:	4b14      	ldr	r3, [pc, #80]	; (8001d1c <HAL_ADC_MspInit+0xec>)
 8001ccc:	2280      	movs	r2, #128	; 0x80
 8001cce:	00d2      	lsls	r2, r2, #3
 8001cd0:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8001cd2:	4b12      	ldr	r3, [pc, #72]	; (8001d1c <HAL_ADC_MspInit+0xec>)
 8001cd4:	2220      	movs	r2, #32
 8001cd6:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8001cd8:	4b10      	ldr	r3, [pc, #64]	; (8001d1c <HAL_ADC_MspInit+0xec>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001cde:	4b0f      	ldr	r3, [pc, #60]	; (8001d1c <HAL_ADC_MspInit+0xec>)
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	f000 fee5 	bl	8002ab0 <HAL_DMA_Init>
 8001ce6:	1e03      	subs	r3, r0, #0
 8001ce8:	d001      	beq.n	8001cee <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8001cea:	f7ff ff77 	bl	8001bdc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a0a      	ldr	r2, [pc, #40]	; (8001d1c <HAL_ADC_MspInit+0xec>)
 8001cf2:	631a      	str	r2, [r3, #48]	; 0x30
 8001cf4:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <HAL_ADC_MspInit+0xec>)
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	625a      	str	r2, [r3, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	200c      	movs	r0, #12
 8001d00:	f000 fea4 	bl	8002a4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001d04:	200c      	movs	r0, #12
 8001d06:	f000 feb6 	bl	8002a76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d0a:	46c0      	nop			; (mov r8, r8)
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	b00b      	add	sp, #44	; 0x2c
 8001d10:	bd90      	pop	{r4, r7, pc}
 8001d12:	46c0      	nop			; (mov r8, r8)
 8001d14:	40012400 	.word	0x40012400
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	20000acc 	.word	0x20000acc
 8001d20:	40020008 	.word	0x40020008

08001d24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	2380      	movs	r3, #128	; 0x80
 8001d32:	05db      	lsls	r3, r3, #23
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d133      	bne.n	8001da0 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d38:	4b1b      	ldr	r3, [pc, #108]	; (8001da8 <HAL_TIM_Base_MspInit+0x84>)
 8001d3a:	69da      	ldr	r2, [r3, #28]
 8001d3c:	4b1a      	ldr	r3, [pc, #104]	; (8001da8 <HAL_TIM_Base_MspInit+0x84>)
 8001d3e:	2101      	movs	r1, #1
 8001d40:	430a      	orrs	r2, r1
 8001d42:	61da      	str	r2, [r3, #28]
 8001d44:	4b18      	ldr	r3, [pc, #96]	; (8001da8 <HAL_TIM_Base_MspInit+0x84>)
 8001d46:	69db      	ldr	r3, [r3, #28]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	60fb      	str	r3, [r7, #12]
 8001d4e:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8001d50:	4b16      	ldr	r3, [pc, #88]	; (8001dac <HAL_TIM_Base_MspInit+0x88>)
 8001d52:	4a17      	ldr	r2, [pc, #92]	; (8001db0 <HAL_TIM_Base_MspInit+0x8c>)
 8001d54:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d56:	4b15      	ldr	r3, [pc, #84]	; (8001dac <HAL_TIM_Base_MspInit+0x88>)
 8001d58:	2210      	movs	r2, #16
 8001d5a:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d5c:	4b13      	ldr	r3, [pc, #76]	; (8001dac <HAL_TIM_Base_MspInit+0x88>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001d62:	4b12      	ldr	r3, [pc, #72]	; (8001dac <HAL_TIM_Base_MspInit+0x88>)
 8001d64:	2280      	movs	r2, #128	; 0x80
 8001d66:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001d68:	4b10      	ldr	r3, [pc, #64]	; (8001dac <HAL_TIM_Base_MspInit+0x88>)
 8001d6a:	2280      	movs	r2, #128	; 0x80
 8001d6c:	0092      	lsls	r2, r2, #2
 8001d6e:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d70:	4b0e      	ldr	r3, [pc, #56]	; (8001dac <HAL_TIM_Base_MspInit+0x88>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8001d76:	4b0d      	ldr	r3, [pc, #52]	; (8001dac <HAL_TIM_Base_MspInit+0x88>)
 8001d78:	2220      	movs	r2, #32
 8001d7a:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001d7c:	4b0b      	ldr	r3, [pc, #44]	; (8001dac <HAL_TIM_Base_MspInit+0x88>)
 8001d7e:	2280      	movs	r2, #128	; 0x80
 8001d80:	0192      	lsls	r2, r2, #6
 8001d82:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001d84:	4b09      	ldr	r3, [pc, #36]	; (8001dac <HAL_TIM_Base_MspInit+0x88>)
 8001d86:	0018      	movs	r0, r3
 8001d88:	f000 fe92 	bl	8002ab0 <HAL_DMA_Init>
 8001d8c:	1e03      	subs	r3, r0, #0
 8001d8e:	d001      	beq.n	8001d94 <HAL_TIM_Base_MspInit+0x70>
    {
      Error_Handler();
 8001d90:	f7ff ff24 	bl	8001bdc <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a05      	ldr	r2, [pc, #20]	; (8001dac <HAL_TIM_Base_MspInit+0x88>)
 8001d98:	625a      	str	r2, [r3, #36]	; 0x24
 8001d9a:	4b04      	ldr	r3, [pc, #16]	; (8001dac <HAL_TIM_Base_MspInit+0x88>)
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001da0:	46c0      	nop			; (mov r8, r8)
 8001da2:	46bd      	mov	sp, r7
 8001da4:	b004      	add	sp, #16
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40021000 	.word	0x40021000
 8001dac:	20000b58 	.word	0x20000b58
 8001db0:	40020058 	.word	0x40020058

08001db4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001db4:	b590      	push	{r4, r7, lr}
 8001db6:	b089      	sub	sp, #36	; 0x24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dbc:	240c      	movs	r4, #12
 8001dbe:	193b      	adds	r3, r7, r4
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	2314      	movs	r3, #20
 8001dc4:	001a      	movs	r2, r3
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	f004 fa17 	bl	80061fa <memset>
  if(htim->Instance==TIM2)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	2380      	movs	r3, #128	; 0x80
 8001dd2:	05db      	lsls	r3, r3, #23
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d124      	bne.n	8001e22 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd8:	4b14      	ldr	r3, [pc, #80]	; (8001e2c <HAL_TIM_MspPostInit+0x78>)
 8001dda:	695a      	ldr	r2, [r3, #20]
 8001ddc:	4b13      	ldr	r3, [pc, #76]	; (8001e2c <HAL_TIM_MspPostInit+0x78>)
 8001dde:	2180      	movs	r1, #128	; 0x80
 8001de0:	0289      	lsls	r1, r1, #10
 8001de2:	430a      	orrs	r2, r1
 8001de4:	615a      	str	r2, [r3, #20]
 8001de6:	4b11      	ldr	r3, [pc, #68]	; (8001e2c <HAL_TIM_MspPostInit+0x78>)
 8001de8:	695a      	ldr	r2, [r3, #20]
 8001dea:	2380      	movs	r3, #128	; 0x80
 8001dec:	029b      	lsls	r3, r3, #10
 8001dee:	4013      	ands	r3, r2
 8001df0:	60bb      	str	r3, [r7, #8]
 8001df2:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001df4:	0021      	movs	r1, r4
 8001df6:	187b      	adds	r3, r7, r1
 8001df8:	2201      	movs	r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfc:	187b      	adds	r3, r7, r1
 8001dfe:	2202      	movs	r2, #2
 8001e00:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	187b      	adds	r3, r7, r1
 8001e04:	2200      	movs	r2, #0
 8001e06:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e08:	187b      	adds	r3, r7, r1
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001e0e:	187b      	adds	r3, r7, r1
 8001e10:	2202      	movs	r2, #2
 8001e12:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e14:	187a      	adds	r2, r7, r1
 8001e16:	2390      	movs	r3, #144	; 0x90
 8001e18:	05db      	lsls	r3, r3, #23
 8001e1a:	0011      	movs	r1, r2
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	f001 f85d 	bl	8002edc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001e22:	46c0      	nop			; (mov r8, r8)
 8001e24:	46bd      	mov	sp, r7
 8001e26:	b009      	add	sp, #36	; 0x24
 8001e28:	bd90      	pop	{r4, r7, pc}
 8001e2a:	46c0      	nop			; (mov r8, r8)
 8001e2c:	40021000 	.word	0x40021000

08001e30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e30:	b590      	push	{r4, r7, lr}
 8001e32:	b08b      	sub	sp, #44	; 0x2c
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e38:	2414      	movs	r4, #20
 8001e3a:	193b      	adds	r3, r7, r4
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	2314      	movs	r3, #20
 8001e40:	001a      	movs	r2, r3
 8001e42:	2100      	movs	r1, #0
 8001e44:	f004 f9d9 	bl	80061fa <memset>
  if(huart->Instance==USART1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a34      	ldr	r2, [pc, #208]	; (8001f20 <HAL_UART_MspInit+0xf0>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d162      	bne.n	8001f18 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e52:	4b34      	ldr	r3, [pc, #208]	; (8001f24 <HAL_UART_MspInit+0xf4>)
 8001e54:	699a      	ldr	r2, [r3, #24]
 8001e56:	4b33      	ldr	r3, [pc, #204]	; (8001f24 <HAL_UART_MspInit+0xf4>)
 8001e58:	2180      	movs	r1, #128	; 0x80
 8001e5a:	01c9      	lsls	r1, r1, #7
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	619a      	str	r2, [r3, #24]
 8001e60:	4b30      	ldr	r3, [pc, #192]	; (8001f24 <HAL_UART_MspInit+0xf4>)
 8001e62:	699a      	ldr	r2, [r3, #24]
 8001e64:	2380      	movs	r3, #128	; 0x80
 8001e66:	01db      	lsls	r3, r3, #7
 8001e68:	4013      	ands	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]
 8001e6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6e:	4b2d      	ldr	r3, [pc, #180]	; (8001f24 <HAL_UART_MspInit+0xf4>)
 8001e70:	695a      	ldr	r2, [r3, #20]
 8001e72:	4b2c      	ldr	r3, [pc, #176]	; (8001f24 <HAL_UART_MspInit+0xf4>)
 8001e74:	2180      	movs	r1, #128	; 0x80
 8001e76:	0289      	lsls	r1, r1, #10
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	615a      	str	r2, [r3, #20]
 8001e7c:	4b29      	ldr	r3, [pc, #164]	; (8001f24 <HAL_UART_MspInit+0xf4>)
 8001e7e:	695a      	ldr	r2, [r3, #20]
 8001e80:	2380      	movs	r3, #128	; 0x80
 8001e82:	029b      	lsls	r3, r3, #10
 8001e84:	4013      	ands	r3, r2
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001e8a:	193b      	adds	r3, r7, r4
 8001e8c:	22c0      	movs	r2, #192	; 0xc0
 8001e8e:	00d2      	lsls	r2, r2, #3
 8001e90:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e92:	0021      	movs	r1, r4
 8001e94:	187b      	adds	r3, r7, r1
 8001e96:	2202      	movs	r2, #2
 8001e98:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9a:	187b      	adds	r3, r7, r1
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ea0:	187b      	adds	r3, r7, r1
 8001ea2:	2203      	movs	r2, #3
 8001ea4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001ea6:	187b      	adds	r3, r7, r1
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eac:	187a      	adds	r2, r7, r1
 8001eae:	2390      	movs	r3, #144	; 0x90
 8001eb0:	05db      	lsls	r3, r3, #23
 8001eb2:	0011      	movs	r1, r2
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	f001 f811 	bl	8002edc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8001eba:	4b1b      	ldr	r3, [pc, #108]	; (8001f28 <HAL_UART_MspInit+0xf8>)
 8001ebc:	4a1b      	ldr	r2, [pc, #108]	; (8001f2c <HAL_UART_MspInit+0xfc>)
 8001ebe:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ec0:	4b19      	ldr	r3, [pc, #100]	; (8001f28 <HAL_UART_MspInit+0xf8>)
 8001ec2:	2210      	movs	r2, #16
 8001ec4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ec6:	4b18      	ldr	r3, [pc, #96]	; (8001f28 <HAL_UART_MspInit+0xf8>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ecc:	4b16      	ldr	r3, [pc, #88]	; (8001f28 <HAL_UART_MspInit+0xf8>)
 8001ece:	2280      	movs	r2, #128	; 0x80
 8001ed0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ed2:	4b15      	ldr	r3, [pc, #84]	; (8001f28 <HAL_UART_MspInit+0xf8>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ed8:	4b13      	ldr	r3, [pc, #76]	; (8001f28 <HAL_UART_MspInit+0xf8>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001ede:	4b12      	ldr	r3, [pc, #72]	; (8001f28 <HAL_UART_MspInit+0xf8>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001ee4:	4b10      	ldr	r3, [pc, #64]	; (8001f28 <HAL_UART_MspInit+0xf8>)
 8001ee6:	22c0      	movs	r2, #192	; 0xc0
 8001ee8:	0192      	lsls	r2, r2, #6
 8001eea:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001eec:	4b0e      	ldr	r3, [pc, #56]	; (8001f28 <HAL_UART_MspInit+0xf8>)
 8001eee:	0018      	movs	r0, r3
 8001ef0:	f000 fdde 	bl	8002ab0 <HAL_DMA_Init>
 8001ef4:	1e03      	subs	r3, r0, #0
 8001ef6:	d001      	beq.n	8001efc <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001ef8:	f7ff fe70 	bl	8001bdc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a0a      	ldr	r2, [pc, #40]	; (8001f28 <HAL_UART_MspInit+0xf8>)
 8001f00:	671a      	str	r2, [r3, #112]	; 0x70
 8001f02:	4b09      	ldr	r3, [pc, #36]	; (8001f28 <HAL_UART_MspInit+0xf8>)
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001f08:	2200      	movs	r2, #0
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	201b      	movs	r0, #27
 8001f0e:	f000 fd9d 	bl	8002a4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f12:	201b      	movs	r0, #27
 8001f14:	f000 fdaf 	bl	8002a76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001f18:	46c0      	nop			; (mov r8, r8)
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	b00b      	add	sp, #44	; 0x2c
 8001f1e:	bd90      	pop	{r4, r7, pc}
 8001f20:	40013800 	.word	0x40013800
 8001f24:	40021000 	.word	0x40021000
 8001f28:	20000c24 	.word	0x20000c24
 8001f2c:	4002001c 	.word	0x4002001c

08001f30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f34:	e7fe      	b.n	8001f34 <NMI_Handler+0x4>

08001f36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f3a:	e7fe      	b.n	8001f3a <HardFault_Handler+0x4>

08001f3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001f40:	46c0      	nop			; (mov r8, r8)
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f4a:	46c0      	nop			; (mov r8, r8)
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f54:	f000 f8d0 	bl	80020f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f58:	46c0      	nop			; (mov r8, r8)
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
	...

08001f60 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001f64:	4b03      	ldr	r3, [pc, #12]	; (8001f74 <DMA1_Channel1_IRQHandler+0x14>)
 8001f66:	0018      	movs	r0, r3
 8001f68:	f000 fecd 	bl	8002d06 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001f6c:	46c0      	nop			; (mov r8, r8)
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	46c0      	nop			; (mov r8, r8)
 8001f74:	20000acc 	.word	0x20000acc

08001f78 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001f7c:	4b03      	ldr	r3, [pc, #12]	; (8001f8c <DMA1_Channel2_3_IRQHandler+0x14>)
 8001f7e:	0018      	movs	r0, r3
 8001f80:	f000 fec1 	bl	8002d06 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001f84:	46c0      	nop			; (mov r8, r8)
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	46c0      	nop			; (mov r8, r8)
 8001f8c:	20000c24 	.word	0x20000c24

08001f90 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001f94:	4b03      	ldr	r3, [pc, #12]	; (8001fa4 <DMA1_Channel4_5_IRQHandler+0x14>)
 8001f96:	0018      	movs	r0, r3
 8001f98:	f000 feb5 	bl	8002d06 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8001f9c:	46c0      	nop			; (mov r8, r8)
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	46c0      	nop			; (mov r8, r8)
 8001fa4:	20000b58 	.word	0x20000b58

08001fa8 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8001fac:	4b03      	ldr	r3, [pc, #12]	; (8001fbc <ADC1_IRQHandler+0x14>)
 8001fae:	0018      	movs	r0, r3
 8001fb0:	f000 fa52 	bl	8002458 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001fb4:	46c0      	nop			; (mov r8, r8)
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	46c0      	nop			; (mov r8, r8)
 8001fbc:	20000a8c 	.word	0x20000a8c

08001fc0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001fc4:	4b03      	ldr	r3, [pc, #12]	; (8001fd4 <USART1_IRQHandler+0x14>)
 8001fc6:	0018      	movs	r0, r3
 8001fc8:	f002 ffc0 	bl	8004f4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001fcc:	46c0      	nop			; (mov r8, r8)
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	46c0      	nop			; (mov r8, r8)
 8001fd4:	20000b9c 	.word	0x20000b9c

08001fd8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001fdc:	46c0      	nop			; (mov r8, r8)
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <Reset_Handler>:
 8001fe4:	4813      	ldr	r0, [pc, #76]	; (8002034 <LoopForever+0x2>)
 8001fe6:	4685      	mov	sp, r0
 8001fe8:	f7ff fff6 	bl	8001fd8 <SystemInit>
 8001fec:	4812      	ldr	r0, [pc, #72]	; (8002038 <LoopForever+0x6>)
 8001fee:	6801      	ldr	r1, [r0, #0]
 8001ff0:	0e09      	lsrs	r1, r1, #24
 8001ff2:	4a12      	ldr	r2, [pc, #72]	; (800203c <LoopForever+0xa>)
 8001ff4:	4291      	cmp	r1, r2
 8001ff6:	d105      	bne.n	8002004 <ApplicationStart>
 8001ff8:	4811      	ldr	r0, [pc, #68]	; (8002040 <LoopForever+0xe>)
 8001ffa:	4912      	ldr	r1, [pc, #72]	; (8002044 <LoopForever+0x12>)
 8001ffc:	6001      	str	r1, [r0, #0]
 8001ffe:	4812      	ldr	r0, [pc, #72]	; (8002048 <LoopForever+0x16>)
 8002000:	4912      	ldr	r1, [pc, #72]	; (800204c <LoopForever+0x1a>)
 8002002:	6001      	str	r1, [r0, #0]

08002004 <ApplicationStart>:
 8002004:	4812      	ldr	r0, [pc, #72]	; (8002050 <LoopForever+0x1e>)
 8002006:	4913      	ldr	r1, [pc, #76]	; (8002054 <LoopForever+0x22>)
 8002008:	4a13      	ldr	r2, [pc, #76]	; (8002058 <LoopForever+0x26>)
 800200a:	2300      	movs	r3, #0
 800200c:	e002      	b.n	8002014 <LoopCopyDataInit>

0800200e <CopyDataInit>:
 800200e:	58d4      	ldr	r4, [r2, r3]
 8002010:	50c4      	str	r4, [r0, r3]
 8002012:	3304      	adds	r3, #4

08002014 <LoopCopyDataInit>:
 8002014:	18c4      	adds	r4, r0, r3
 8002016:	428c      	cmp	r4, r1
 8002018:	d3f9      	bcc.n	800200e <CopyDataInit>
 800201a:	4a10      	ldr	r2, [pc, #64]	; (800205c <LoopForever+0x2a>)
 800201c:	4c10      	ldr	r4, [pc, #64]	; (8002060 <LoopForever+0x2e>)
 800201e:	2300      	movs	r3, #0
 8002020:	e001      	b.n	8002026 <LoopFillZerobss>

08002022 <FillZerobss>:
 8002022:	6013      	str	r3, [r2, #0]
 8002024:	3204      	adds	r2, #4

08002026 <LoopFillZerobss>:
 8002026:	42a2      	cmp	r2, r4
 8002028:	d3fb      	bcc.n	8002022 <FillZerobss>
 800202a:	f004 f8b9 	bl	80061a0 <__libc_init_array>
 800202e:	f7fe f9df 	bl	80003f0 <main>

08002032 <LoopForever>:
 8002032:	e7fe      	b.n	8002032 <LoopForever>
 8002034:	20001800 	.word	0x20001800
 8002038:	00000004 	.word	0x00000004
 800203c:	0000001f 	.word	0x0000001f
 8002040:	40021018 	.word	0x40021018
 8002044:	00000001 	.word	0x00000001
 8002048:	40010000 	.word	0x40010000
 800204c:	00000000 	.word	0x00000000
 8002050:	20000000 	.word	0x20000000
 8002054:	2000000c 	.word	0x2000000c
 8002058:	08006364 	.word	0x08006364
 800205c:	2000000c 	.word	0x2000000c
 8002060:	20000c94 	.word	0x20000c94

08002064 <CEC_CAN_IRQHandler>:
 8002064:	e7fe      	b.n	8002064 <CEC_CAN_IRQHandler>
	...

08002068 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800206c:	4b07      	ldr	r3, [pc, #28]	; (800208c <HAL_Init+0x24>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	4b06      	ldr	r3, [pc, #24]	; (800208c <HAL_Init+0x24>)
 8002072:	2110      	movs	r1, #16
 8002074:	430a      	orrs	r2, r1
 8002076:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002078:	2000      	movs	r0, #0
 800207a:	f000 f809 	bl	8002090 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800207e:	f7ff fdb3 	bl	8001be8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	0018      	movs	r0, r3
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	46c0      	nop			; (mov r8, r8)
 800208c:	40022000 	.word	0x40022000

08002090 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002090:	b590      	push	{r4, r7, lr}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002098:	4b14      	ldr	r3, [pc, #80]	; (80020ec <HAL_InitTick+0x5c>)
 800209a:	681c      	ldr	r4, [r3, #0]
 800209c:	4b14      	ldr	r3, [pc, #80]	; (80020f0 <HAL_InitTick+0x60>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	0019      	movs	r1, r3
 80020a2:	23fa      	movs	r3, #250	; 0xfa
 80020a4:	0098      	lsls	r0, r3, #2
 80020a6:	f7fe f82f 	bl	8000108 <__udivsi3>
 80020aa:	0003      	movs	r3, r0
 80020ac:	0019      	movs	r1, r3
 80020ae:	0020      	movs	r0, r4
 80020b0:	f7fe f82a 	bl	8000108 <__udivsi3>
 80020b4:	0003      	movs	r3, r0
 80020b6:	0018      	movs	r0, r3
 80020b8:	f000 fced 	bl	8002a96 <HAL_SYSTICK_Config>
 80020bc:	1e03      	subs	r3, r0, #0
 80020be:	d001      	beq.n	80020c4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e00f      	b.n	80020e4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b03      	cmp	r3, #3
 80020c8:	d80b      	bhi.n	80020e2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020ca:	6879      	ldr	r1, [r7, #4]
 80020cc:	2301      	movs	r3, #1
 80020ce:	425b      	negs	r3, r3
 80020d0:	2200      	movs	r2, #0
 80020d2:	0018      	movs	r0, r3
 80020d4:	f000 fcba 	bl	8002a4c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020d8:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <HAL_InitTick+0x64>)
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80020de:	2300      	movs	r3, #0
 80020e0:	e000      	b.n	80020e4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
}
 80020e4:	0018      	movs	r0, r3
 80020e6:	46bd      	mov	sp, r7
 80020e8:	b003      	add	sp, #12
 80020ea:	bd90      	pop	{r4, r7, pc}
 80020ec:	20000000 	.word	0x20000000
 80020f0:	20000008 	.word	0x20000008
 80020f4:	20000004 	.word	0x20000004

080020f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020fc:	4b05      	ldr	r3, [pc, #20]	; (8002114 <HAL_IncTick+0x1c>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	001a      	movs	r2, r3
 8002102:	4b05      	ldr	r3, [pc, #20]	; (8002118 <HAL_IncTick+0x20>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	18d2      	adds	r2, r2, r3
 8002108:	4b03      	ldr	r3, [pc, #12]	; (8002118 <HAL_IncTick+0x20>)
 800210a:	601a      	str	r2, [r3, #0]
}
 800210c:	46c0      	nop			; (mov r8, r8)
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	46c0      	nop			; (mov r8, r8)
 8002114:	20000008 	.word	0x20000008
 8002118:	20000c90 	.word	0x20000c90

0800211c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  return uwTick;
 8002120:	4b02      	ldr	r3, [pc, #8]	; (800212c <HAL_GetTick+0x10>)
 8002122:	681b      	ldr	r3, [r3, #0]
}
 8002124:	0018      	movs	r0, r3
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	46c0      	nop			; (mov r8, r8)
 800212c:	20000c90 	.word	0x20000c90

08002130 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002138:	230f      	movs	r3, #15
 800213a:	18fb      	adds	r3, r7, r3
 800213c:	2200      	movs	r2, #0
 800213e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002140:	2300      	movs	r3, #0
 8002142:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e125      	b.n	800239a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002152:	2b00      	cmp	r3, #0
 8002154:	d10a      	bne.n	800216c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2234      	movs	r2, #52	; 0x34
 8002160:	2100      	movs	r1, #0
 8002162:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	0018      	movs	r0, r3
 8002168:	f7ff fd62 	bl	8001c30 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002170:	2210      	movs	r2, #16
 8002172:	4013      	ands	r3, r2
 8002174:	d000      	beq.n	8002178 <HAL_ADC_Init+0x48>
 8002176:	e103      	b.n	8002380 <HAL_ADC_Init+0x250>
 8002178:	230f      	movs	r3, #15
 800217a:	18fb      	adds	r3, r7, r3
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d000      	beq.n	8002184 <HAL_ADC_Init+0x54>
 8002182:	e0fd      	b.n	8002380 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	2204      	movs	r2, #4
 800218c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800218e:	d000      	beq.n	8002192 <HAL_ADC_Init+0x62>
 8002190:	e0f6      	b.n	8002380 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002196:	4a83      	ldr	r2, [pc, #524]	; (80023a4 <HAL_ADC_Init+0x274>)
 8002198:	4013      	ands	r3, r2
 800219a:	2202      	movs	r2, #2
 800219c:	431a      	orrs	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	2203      	movs	r2, #3
 80021aa:	4013      	ands	r3, r2
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d112      	bne.n	80021d6 <HAL_ADC_Init+0xa6>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2201      	movs	r2, #1
 80021b8:	4013      	ands	r3, r2
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d009      	beq.n	80021d2 <HAL_ADC_Init+0xa2>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68da      	ldr	r2, [r3, #12]
 80021c4:	2380      	movs	r3, #128	; 0x80
 80021c6:	021b      	lsls	r3, r3, #8
 80021c8:	401a      	ands	r2, r3
 80021ca:	2380      	movs	r3, #128	; 0x80
 80021cc:	021b      	lsls	r3, r3, #8
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d101      	bne.n	80021d6 <HAL_ADC_Init+0xa6>
 80021d2:	2301      	movs	r3, #1
 80021d4:	e000      	b.n	80021d8 <HAL_ADC_Init+0xa8>
 80021d6:	2300      	movs	r3, #0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d116      	bne.n	800220a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	2218      	movs	r2, #24
 80021e4:	4393      	bics	r3, r2
 80021e6:	0019      	movs	r1, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	430a      	orrs	r2, r1
 80021f2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	0899      	lsrs	r1, r3, #2
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685a      	ldr	r2, [r3, #4]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	430a      	orrs	r2, r1
 8002208:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68da      	ldr	r2, [r3, #12]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4964      	ldr	r1, [pc, #400]	; (80023a8 <HAL_ADC_Init+0x278>)
 8002216:	400a      	ands	r2, r1
 8002218:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	7e1b      	ldrb	r3, [r3, #24]
 800221e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	7e5b      	ldrb	r3, [r3, #25]
 8002224:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002226:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	7e9b      	ldrb	r3, [r3, #26]
 800222c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800222e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002234:	2b01      	cmp	r3, #1
 8002236:	d002      	beq.n	800223e <HAL_ADC_Init+0x10e>
 8002238:	2380      	movs	r3, #128	; 0x80
 800223a:	015b      	lsls	r3, r3, #5
 800223c:	e000      	b.n	8002240 <HAL_ADC_Init+0x110>
 800223e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002240:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002246:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	2b02      	cmp	r3, #2
 800224e:	d101      	bne.n	8002254 <HAL_ADC_Init+0x124>
 8002250:	2304      	movs	r3, #4
 8002252:	e000      	b.n	8002256 <HAL_ADC_Init+0x126>
 8002254:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002256:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2124      	movs	r1, #36	; 0x24
 800225c:	5c5b      	ldrb	r3, [r3, r1]
 800225e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002260:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002262:	68ba      	ldr	r2, [r7, #8]
 8002264:	4313      	orrs	r3, r2
 8002266:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	7edb      	ldrb	r3, [r3, #27]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d115      	bne.n	800229c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	7e9b      	ldrb	r3, [r3, #26]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d105      	bne.n	8002284 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	2280      	movs	r2, #128	; 0x80
 800227c:	0252      	lsls	r2, r2, #9
 800227e:	4313      	orrs	r3, r2
 8002280:	60bb      	str	r3, [r7, #8]
 8002282:	e00b      	b.n	800229c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002288:	2220      	movs	r2, #32
 800228a:	431a      	orrs	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002294:	2201      	movs	r2, #1
 8002296:	431a      	orrs	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	69da      	ldr	r2, [r3, #28]
 80022a0:	23c2      	movs	r3, #194	; 0xc2
 80022a2:	33ff      	adds	r3, #255	; 0xff
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d007      	beq.n	80022b8 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80022b0:	4313      	orrs	r3, r2
 80022b2:	68ba      	ldr	r2, [r7, #8]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68d9      	ldr	r1, [r3, #12]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	430a      	orrs	r2, r1
 80022c6:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022cc:	2380      	movs	r3, #128	; 0x80
 80022ce:	055b      	lsls	r3, r3, #21
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d01b      	beq.n	800230c <HAL_ADC_Init+0x1dc>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d017      	beq.n	800230c <HAL_ADC_Init+0x1dc>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d013      	beq.n	800230c <HAL_ADC_Init+0x1dc>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e8:	2b03      	cmp	r3, #3
 80022ea:	d00f      	beq.n	800230c <HAL_ADC_Init+0x1dc>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f0:	2b04      	cmp	r3, #4
 80022f2:	d00b      	beq.n	800230c <HAL_ADC_Init+0x1dc>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f8:	2b05      	cmp	r3, #5
 80022fa:	d007      	beq.n	800230c <HAL_ADC_Init+0x1dc>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002300:	2b06      	cmp	r3, #6
 8002302:	d003      	beq.n	800230c <HAL_ADC_Init+0x1dc>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002308:	2b07      	cmp	r3, #7
 800230a:	d112      	bne.n	8002332 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	695a      	ldr	r2, [r3, #20]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2107      	movs	r1, #7
 8002318:	438a      	bics	r2, r1
 800231a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6959      	ldr	r1, [r3, #20]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002326:	2207      	movs	r2, #7
 8002328:	401a      	ands	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	430a      	orrs	r2, r1
 8002330:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	4a1c      	ldr	r2, [pc, #112]	; (80023ac <HAL_ADC_Init+0x27c>)
 800233a:	4013      	ands	r3, r2
 800233c:	68ba      	ldr	r2, [r7, #8]
 800233e:	429a      	cmp	r2, r3
 8002340:	d10b      	bne.n	800235a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800234c:	2203      	movs	r2, #3
 800234e:	4393      	bics	r3, r2
 8002350:	2201      	movs	r2, #1
 8002352:	431a      	orrs	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002358:	e01c      	b.n	8002394 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800235e:	2212      	movs	r2, #18
 8002360:	4393      	bics	r3, r2
 8002362:	2210      	movs	r2, #16
 8002364:	431a      	orrs	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800236e:	2201      	movs	r2, #1
 8002370:	431a      	orrs	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002376:	230f      	movs	r3, #15
 8002378:	18fb      	adds	r3, r7, r3
 800237a:	2201      	movs	r2, #1
 800237c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800237e:	e009      	b.n	8002394 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002384:	2210      	movs	r2, #16
 8002386:	431a      	orrs	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 800238c:	230f      	movs	r3, #15
 800238e:	18fb      	adds	r3, r7, r3
 8002390:	2201      	movs	r2, #1
 8002392:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002394:	230f      	movs	r3, #15
 8002396:	18fb      	adds	r3, r7, r3
 8002398:	781b      	ldrb	r3, [r3, #0]
}
 800239a:	0018      	movs	r0, r3
 800239c:	46bd      	mov	sp, r7
 800239e:	b004      	add	sp, #16
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	46c0      	nop			; (mov r8, r8)
 80023a4:	fffffefd 	.word	0xfffffefd
 80023a8:	fffe0219 	.word	0xfffe0219
 80023ac:	833fffe7 	.word	0x833fffe7

080023b0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80023b0:	b590      	push	{r4, r7, lr}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023b8:	230f      	movs	r3, #15
 80023ba:	18fb      	adds	r3, r7, r3
 80023bc:	2200      	movs	r2, #0
 80023be:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	2204      	movs	r2, #4
 80023c8:	4013      	ands	r3, r2
 80023ca:	d138      	bne.n	800243e <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2234      	movs	r2, #52	; 0x34
 80023d0:	5c9b      	ldrb	r3, [r3, r2]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d101      	bne.n	80023da <HAL_ADC_Start+0x2a>
 80023d6:	2302      	movs	r3, #2
 80023d8:	e038      	b.n	800244c <HAL_ADC_Start+0x9c>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2234      	movs	r2, #52	; 0x34
 80023de:	2101      	movs	r1, #1
 80023e0:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	7e5b      	ldrb	r3, [r3, #25]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d007      	beq.n	80023fa <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80023ea:	230f      	movs	r3, #15
 80023ec:	18fc      	adds	r4, r7, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	0018      	movs	r0, r3
 80023f2:	f000 f9fb 	bl	80027ec <ADC_Enable>
 80023f6:	0003      	movs	r3, r0
 80023f8:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80023fa:	230f      	movs	r3, #15
 80023fc:	18fb      	adds	r3, r7, r3
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d120      	bne.n	8002446 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002408:	4a12      	ldr	r2, [pc, #72]	; (8002454 <HAL_ADC_Start+0xa4>)
 800240a:	4013      	ands	r3, r2
 800240c:	2280      	movs	r2, #128	; 0x80
 800240e:	0052      	lsls	r2, r2, #1
 8002410:	431a      	orrs	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2234      	movs	r2, #52	; 0x34
 8002420:	2100      	movs	r1, #0
 8002422:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	221c      	movs	r2, #28
 800242a:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	689a      	ldr	r2, [r3, #8]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2104      	movs	r1, #4
 8002438:	430a      	orrs	r2, r1
 800243a:	609a      	str	r2, [r3, #8]
 800243c:	e003      	b.n	8002446 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800243e:	230f      	movs	r3, #15
 8002440:	18fb      	adds	r3, r7, r3
 8002442:	2202      	movs	r2, #2
 8002444:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002446:	230f      	movs	r3, #15
 8002448:	18fb      	adds	r3, r7, r3
 800244a:	781b      	ldrb	r3, [r3, #0]
}
 800244c:	0018      	movs	r0, r3
 800244e:	46bd      	mov	sp, r7
 8002450:	b005      	add	sp, #20
 8002452:	bd90      	pop	{r4, r7, pc}
 8002454:	fffff0fe 	.word	0xfffff0fe

08002458 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2204      	movs	r2, #4
 8002474:	4013      	ands	r3, r2
 8002476:	d003      	beq.n	8002480 <HAL_ADC_IRQHandler+0x28>
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	2204      	movs	r2, #4
 800247c:	4013      	ands	r3, r2
 800247e:	d107      	bne.n	8002490 <HAL_ADC_IRQHandler+0x38>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2208      	movs	r2, #8
 8002484:	4013      	ands	r3, r2
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002486:	d049      	beq.n	800251c <HAL_ADC_IRQHandler+0xc4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	2208      	movs	r2, #8
 800248c:	4013      	ands	r3, r2
 800248e:	d045      	beq.n	800251c <HAL_ADC_IRQHandler+0xc4>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002494:	2210      	movs	r2, #16
 8002496:	4013      	ands	r3, r2
 8002498:	d106      	bne.n	80024a8 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800249e:	2280      	movs	r2, #128	; 0x80
 80024a0:	0092      	lsls	r2, r2, #2
 80024a2:	431a      	orrs	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68da      	ldr	r2, [r3, #12]
 80024ae:	23c0      	movs	r3, #192	; 0xc0
 80024b0:	011b      	lsls	r3, r3, #4
 80024b2:	4013      	ands	r3, r2
 80024b4:	d12a      	bne.n	800250c <HAL_ADC_IRQHandler+0xb4>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d126      	bne.n	800250c <HAL_ADC_IRQHandler+0xb4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2208      	movs	r2, #8
 80024c2:	4013      	ands	r3, r2
 80024c4:	d022      	beq.n	800250c <HAL_ADC_IRQHandler+0xb4>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	2204      	movs	r2, #4
 80024ce:	4013      	ands	r3, r2
 80024d0:	d110      	bne.n	80024f4 <HAL_ADC_IRQHandler+0x9c>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	685a      	ldr	r2, [r3, #4]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	210c      	movs	r1, #12
 80024de:	438a      	bics	r2, r1
 80024e0:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e6:	4a2d      	ldr	r2, [pc, #180]	; (800259c <HAL_ADC_IRQHandler+0x144>)
 80024e8:	4013      	ands	r3, r2
 80024ea:	2201      	movs	r2, #1
 80024ec:	431a      	orrs	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	639a      	str	r2, [r3, #56]	; 0x38
 80024f2:	e00b      	b.n	800250c <HAL_ADC_IRQHandler+0xb4>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f8:	2220      	movs	r2, #32
 80024fa:	431a      	orrs	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002504:	2201      	movs	r2, #1
 8002506:	431a      	orrs	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	0018      	movs	r0, r3
 8002510:	f000 f846 	bl	80025a0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	220c      	movs	r2, #12
 800251a:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(((tmp_isr & ADC_FLAG_AWD) == ADC_FLAG_AWD) && ((tmp_ier & ADC_IT_AWD) == ADC_IT_AWD))
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2280      	movs	r2, #128	; 0x80
 8002520:	4013      	ands	r3, r2
 8002522:	d012      	beq.n	800254a <HAL_ADC_IRQHandler+0xf2>
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	2280      	movs	r2, #128	; 0x80
 8002528:	4013      	ands	r3, r2
 800252a:	d00e      	beq.n	800254a <HAL_ADC_IRQHandler+0xf2>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002530:	2280      	movs	r2, #128	; 0x80
 8002532:	0252      	lsls	r2, r2, #9
 8002534:	431a      	orrs	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	0018      	movs	r0, r3
 800253e:	f000 f837 	bl	80025b0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2280      	movs	r2, #128	; 0x80
 8002548:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2210      	movs	r2, #16
 800254e:	4013      	ands	r3, r2
 8002550:	d020      	beq.n	8002594 <HAL_ADC_IRQHandler+0x13c>
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	2210      	movs	r2, #16
 8002556:	4013      	ands	r3, r2
 8002558:	d01c      	beq.n	8002594 <HAL_ADC_IRQHandler+0x13c>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255e:	2b01      	cmp	r3, #1
 8002560:	d006      	beq.n	8002570 <HAL_ADC_IRQHandler+0x118>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	2201      	movs	r2, #1
 800256a:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 800256c:	2b01      	cmp	r3, #1
 800256e:	d10d      	bne.n	800258c <HAL_ADC_IRQHandler+0x134>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002574:	2202      	movs	r2, #2
 8002576:	431a      	orrs	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2210      	movs	r2, #16
 8002582:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	0018      	movs	r0, r3
 8002588:	f000 f81a 	bl	80025c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2210      	movs	r2, #16
 8002592:	601a      	str	r2, [r3, #0]
  }

}
 8002594:	46c0      	nop			; (mov r8, r8)
 8002596:	46bd      	mov	sp, r7
 8002598:	b004      	add	sp, #16
 800259a:	bd80      	pop	{r7, pc}
 800259c:	fffffefe 	.word	0xfffffefe

080025a0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80025a8:	46c0      	nop			; (mov r8, r8)
 80025aa:	46bd      	mov	sp, r7
 80025ac:	b002      	add	sp, #8
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 80025b8:	46c0      	nop			; (mov r8, r8)
 80025ba:	46bd      	mov	sp, r7
 80025bc:	b002      	add	sp, #8
 80025be:	bd80      	pop	{r7, pc}

080025c0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80025c8:	46c0      	nop			; (mov r8, r8)
 80025ca:	46bd      	mov	sp, r7
 80025cc:	b002      	add	sp, #8
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025da:	230f      	movs	r3, #15
 80025dc:	18fb      	adds	r3, r7, r3
 80025de:	2200      	movs	r2, #0
 80025e0:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80025e2:	2300      	movs	r3, #0
 80025e4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025ea:	2380      	movs	r3, #128	; 0x80
 80025ec:	055b      	lsls	r3, r3, #21
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d011      	beq.n	8002616 <HAL_ADC_ConfigChannel+0x46>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d00d      	beq.n	8002616 <HAL_ADC_ConfigChannel+0x46>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d009      	beq.n	8002616 <HAL_ADC_ConfigChannel+0x46>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002606:	2b03      	cmp	r3, #3
 8002608:	d005      	beq.n	8002616 <HAL_ADC_ConfigChannel+0x46>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260e:	2b04      	cmp	r3, #4
 8002610:	d001      	beq.n	8002616 <HAL_ADC_ConfigChannel+0x46>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2234      	movs	r2, #52	; 0x34
 800261a:	5c9b      	ldrb	r3, [r3, r2]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d101      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x54>
 8002620:	2302      	movs	r3, #2
 8002622:	e0d0      	b.n	80027c6 <HAL_ADC_ConfigChannel+0x1f6>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2234      	movs	r2, #52	; 0x34
 8002628:	2101      	movs	r1, #1
 800262a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	2204      	movs	r2, #4
 8002634:	4013      	ands	r3, r2
 8002636:	d000      	beq.n	800263a <HAL_ADC_ConfigChannel+0x6a>
 8002638:	e0b4      	b.n	80027a4 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	4a64      	ldr	r2, [pc, #400]	; (80027d0 <HAL_ADC_ConfigChannel+0x200>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d100      	bne.n	8002646 <HAL_ADC_ConfigChannel+0x76>
 8002644:	e082      	b.n	800274c <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2201      	movs	r2, #1
 8002652:	409a      	lsls	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	430a      	orrs	r2, r1
 800265a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002660:	2380      	movs	r3, #128	; 0x80
 8002662:	055b      	lsls	r3, r3, #21
 8002664:	429a      	cmp	r2, r3
 8002666:	d037      	beq.n	80026d8 <HAL_ADC_ConfigChannel+0x108>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266c:	2b01      	cmp	r3, #1
 800266e:	d033      	beq.n	80026d8 <HAL_ADC_ConfigChannel+0x108>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002674:	2b02      	cmp	r3, #2
 8002676:	d02f      	beq.n	80026d8 <HAL_ADC_ConfigChannel+0x108>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267c:	2b03      	cmp	r3, #3
 800267e:	d02b      	beq.n	80026d8 <HAL_ADC_ConfigChannel+0x108>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002684:	2b04      	cmp	r3, #4
 8002686:	d027      	beq.n	80026d8 <HAL_ADC_ConfigChannel+0x108>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268c:	2b05      	cmp	r3, #5
 800268e:	d023      	beq.n	80026d8 <HAL_ADC_ConfigChannel+0x108>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002694:	2b06      	cmp	r3, #6
 8002696:	d01f      	beq.n	80026d8 <HAL_ADC_ConfigChannel+0x108>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800269c:	2b07      	cmp	r3, #7
 800269e:	d01b      	beq.n	80026d8 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	689a      	ldr	r2, [r3, #8]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	2107      	movs	r1, #7
 80026ac:	400b      	ands	r3, r1
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d012      	beq.n	80026d8 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	695a      	ldr	r2, [r3, #20]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2107      	movs	r1, #7
 80026be:	438a      	bics	r2, r1
 80026c0:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6959      	ldr	r1, [r3, #20]
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	2207      	movs	r2, #7
 80026ce:	401a      	ands	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	430a      	orrs	r2, r1
 80026d6:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2b10      	cmp	r3, #16
 80026de:	d007      	beq.n	80026f0 <HAL_ADC_ConfigChannel+0x120>
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2b11      	cmp	r3, #17
 80026e6:	d003      	beq.n	80026f0 <HAL_ADC_ConfigChannel+0x120>
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2b12      	cmp	r3, #18
 80026ee:	d163      	bne.n	80027b8 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80026f0:	4b38      	ldr	r3, [pc, #224]	; (80027d4 <HAL_ADC_ConfigChannel+0x204>)
 80026f2:	6819      	ldr	r1, [r3, #0]
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2b10      	cmp	r3, #16
 80026fa:	d009      	beq.n	8002710 <HAL_ADC_ConfigChannel+0x140>
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2b11      	cmp	r3, #17
 8002702:	d102      	bne.n	800270a <HAL_ADC_ConfigChannel+0x13a>
 8002704:	2380      	movs	r3, #128	; 0x80
 8002706:	03db      	lsls	r3, r3, #15
 8002708:	e004      	b.n	8002714 <HAL_ADC_ConfigChannel+0x144>
 800270a:	2380      	movs	r3, #128	; 0x80
 800270c:	045b      	lsls	r3, r3, #17
 800270e:	e001      	b.n	8002714 <HAL_ADC_ConfigChannel+0x144>
 8002710:	2380      	movs	r3, #128	; 0x80
 8002712:	041b      	lsls	r3, r3, #16
 8002714:	4a2f      	ldr	r2, [pc, #188]	; (80027d4 <HAL_ADC_ConfigChannel+0x204>)
 8002716:	430b      	orrs	r3, r1
 8002718:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2b10      	cmp	r3, #16
 8002720:	d14a      	bne.n	80027b8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002722:	4b2d      	ldr	r3, [pc, #180]	; (80027d8 <HAL_ADC_ConfigChannel+0x208>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	492d      	ldr	r1, [pc, #180]	; (80027dc <HAL_ADC_ConfigChannel+0x20c>)
 8002728:	0018      	movs	r0, r3
 800272a:	f7fd fced 	bl	8000108 <__udivsi3>
 800272e:	0003      	movs	r3, r0
 8002730:	001a      	movs	r2, r3
 8002732:	0013      	movs	r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	189b      	adds	r3, r3, r2
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800273c:	e002      	b.n	8002744 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	3b01      	subs	r3, #1
 8002742:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1f9      	bne.n	800273e <HAL_ADC_ConfigChannel+0x16e>
 800274a:	e035      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2101      	movs	r1, #1
 8002758:	4099      	lsls	r1, r3
 800275a:	000b      	movs	r3, r1
 800275c:	43d9      	mvns	r1, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	400a      	ands	r2, r1
 8002764:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2b10      	cmp	r3, #16
 800276c:	d007      	beq.n	800277e <HAL_ADC_ConfigChannel+0x1ae>
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2b11      	cmp	r3, #17
 8002774:	d003      	beq.n	800277e <HAL_ADC_ConfigChannel+0x1ae>
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2b12      	cmp	r3, #18
 800277c:	d11c      	bne.n	80027b8 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800277e:	4b15      	ldr	r3, [pc, #84]	; (80027d4 <HAL_ADC_ConfigChannel+0x204>)
 8002780:	6819      	ldr	r1, [r3, #0]
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2b10      	cmp	r3, #16
 8002788:	d007      	beq.n	800279a <HAL_ADC_ConfigChannel+0x1ca>
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2b11      	cmp	r3, #17
 8002790:	d101      	bne.n	8002796 <HAL_ADC_ConfigChannel+0x1c6>
 8002792:	4b13      	ldr	r3, [pc, #76]	; (80027e0 <HAL_ADC_ConfigChannel+0x210>)
 8002794:	e002      	b.n	800279c <HAL_ADC_ConfigChannel+0x1cc>
 8002796:	4b13      	ldr	r3, [pc, #76]	; (80027e4 <HAL_ADC_ConfigChannel+0x214>)
 8002798:	e000      	b.n	800279c <HAL_ADC_ConfigChannel+0x1cc>
 800279a:	4b13      	ldr	r3, [pc, #76]	; (80027e8 <HAL_ADC_ConfigChannel+0x218>)
 800279c:	4a0d      	ldr	r2, [pc, #52]	; (80027d4 <HAL_ADC_ConfigChannel+0x204>)
 800279e:	400b      	ands	r3, r1
 80027a0:	6013      	str	r3, [r2, #0]
 80027a2:	e009      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a8:	2220      	movs	r2, #32
 80027aa:	431a      	orrs	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80027b0:	230f      	movs	r3, #15
 80027b2:	18fb      	adds	r3, r7, r3
 80027b4:	2201      	movs	r2, #1
 80027b6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2234      	movs	r2, #52	; 0x34
 80027bc:	2100      	movs	r1, #0
 80027be:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80027c0:	230f      	movs	r3, #15
 80027c2:	18fb      	adds	r3, r7, r3
 80027c4:	781b      	ldrb	r3, [r3, #0]
}
 80027c6:	0018      	movs	r0, r3
 80027c8:	46bd      	mov	sp, r7
 80027ca:	b004      	add	sp, #16
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	46c0      	nop			; (mov r8, r8)
 80027d0:	00001001 	.word	0x00001001
 80027d4:	40012708 	.word	0x40012708
 80027d8:	20000000 	.word	0x20000000
 80027dc:	000f4240 	.word	0x000f4240
 80027e0:	ffbfffff 	.word	0xffbfffff
 80027e4:	feffffff 	.word	0xfeffffff
 80027e8:	ff7fffff 	.word	0xff7fffff

080027ec <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027f4:	2300      	movs	r3, #0
 80027f6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80027f8:	2300      	movs	r3, #0
 80027fa:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	2203      	movs	r2, #3
 8002804:	4013      	ands	r3, r2
 8002806:	2b01      	cmp	r3, #1
 8002808:	d112      	bne.n	8002830 <ADC_Enable+0x44>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2201      	movs	r2, #1
 8002812:	4013      	ands	r3, r2
 8002814:	2b01      	cmp	r3, #1
 8002816:	d009      	beq.n	800282c <ADC_Enable+0x40>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68da      	ldr	r2, [r3, #12]
 800281e:	2380      	movs	r3, #128	; 0x80
 8002820:	021b      	lsls	r3, r3, #8
 8002822:	401a      	ands	r2, r3
 8002824:	2380      	movs	r3, #128	; 0x80
 8002826:	021b      	lsls	r3, r3, #8
 8002828:	429a      	cmp	r2, r3
 800282a:	d101      	bne.n	8002830 <ADC_Enable+0x44>
 800282c:	2301      	movs	r3, #1
 800282e:	e000      	b.n	8002832 <ADC_Enable+0x46>
 8002830:	2300      	movs	r3, #0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d152      	bne.n	80028dc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	4a2a      	ldr	r2, [pc, #168]	; (80028e8 <ADC_Enable+0xfc>)
 800283e:	4013      	ands	r3, r2
 8002840:	d00d      	beq.n	800285e <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002846:	2210      	movs	r2, #16
 8002848:	431a      	orrs	r2, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002852:	2201      	movs	r2, #1
 8002854:	431a      	orrs	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e03f      	b.n	80028de <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	689a      	ldr	r2, [r3, #8]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2101      	movs	r1, #1
 800286a:	430a      	orrs	r2, r1
 800286c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800286e:	4b1f      	ldr	r3, [pc, #124]	; (80028ec <ADC_Enable+0x100>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	491f      	ldr	r1, [pc, #124]	; (80028f0 <ADC_Enable+0x104>)
 8002874:	0018      	movs	r0, r3
 8002876:	f7fd fc47 	bl	8000108 <__udivsi3>
 800287a:	0003      	movs	r3, r0
 800287c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800287e:	e002      	b.n	8002886 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	3b01      	subs	r3, #1
 8002884:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1f9      	bne.n	8002880 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 800288c:	f7ff fc46 	bl	800211c <HAL_GetTick>
 8002890:	0003      	movs	r3, r0
 8002892:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002894:	e01b      	b.n	80028ce <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002896:	f7ff fc41 	bl	800211c <HAL_GetTick>
 800289a:	0002      	movs	r2, r0
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d914      	bls.n	80028ce <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2201      	movs	r2, #1
 80028ac:	4013      	ands	r3, r2
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d00d      	beq.n	80028ce <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b6:	2210      	movs	r2, #16
 80028b8:	431a      	orrs	r2, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c2:	2201      	movs	r2, #1
 80028c4:	431a      	orrs	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e007      	b.n	80028de <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2201      	movs	r2, #1
 80028d6:	4013      	ands	r3, r2
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d1dc      	bne.n	8002896 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	0018      	movs	r0, r3
 80028e0:	46bd      	mov	sp, r7
 80028e2:	b004      	add	sp, #16
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	46c0      	nop			; (mov r8, r8)
 80028e8:	80000017 	.word	0x80000017
 80028ec:	20000000 	.word	0x20000000
 80028f0:	000f4240 	.word	0x000f4240

080028f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	0002      	movs	r2, r0
 80028fc:	1dfb      	adds	r3, r7, #7
 80028fe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002900:	1dfb      	adds	r3, r7, #7
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b7f      	cmp	r3, #127	; 0x7f
 8002906:	d809      	bhi.n	800291c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002908:	1dfb      	adds	r3, r7, #7
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	001a      	movs	r2, r3
 800290e:	231f      	movs	r3, #31
 8002910:	401a      	ands	r2, r3
 8002912:	4b04      	ldr	r3, [pc, #16]	; (8002924 <__NVIC_EnableIRQ+0x30>)
 8002914:	2101      	movs	r1, #1
 8002916:	4091      	lsls	r1, r2
 8002918:	000a      	movs	r2, r1
 800291a:	601a      	str	r2, [r3, #0]
  }
}
 800291c:	46c0      	nop			; (mov r8, r8)
 800291e:	46bd      	mov	sp, r7
 8002920:	b002      	add	sp, #8
 8002922:	bd80      	pop	{r7, pc}
 8002924:	e000e100 	.word	0xe000e100

08002928 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002928:	b590      	push	{r4, r7, lr}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	0002      	movs	r2, r0
 8002930:	6039      	str	r1, [r7, #0]
 8002932:	1dfb      	adds	r3, r7, #7
 8002934:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002936:	1dfb      	adds	r3, r7, #7
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	2b7f      	cmp	r3, #127	; 0x7f
 800293c:	d828      	bhi.n	8002990 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800293e:	4a2f      	ldr	r2, [pc, #188]	; (80029fc <__NVIC_SetPriority+0xd4>)
 8002940:	1dfb      	adds	r3, r7, #7
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	b25b      	sxtb	r3, r3
 8002946:	089b      	lsrs	r3, r3, #2
 8002948:	33c0      	adds	r3, #192	; 0xc0
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	589b      	ldr	r3, [r3, r2]
 800294e:	1dfa      	adds	r2, r7, #7
 8002950:	7812      	ldrb	r2, [r2, #0]
 8002952:	0011      	movs	r1, r2
 8002954:	2203      	movs	r2, #3
 8002956:	400a      	ands	r2, r1
 8002958:	00d2      	lsls	r2, r2, #3
 800295a:	21ff      	movs	r1, #255	; 0xff
 800295c:	4091      	lsls	r1, r2
 800295e:	000a      	movs	r2, r1
 8002960:	43d2      	mvns	r2, r2
 8002962:	401a      	ands	r2, r3
 8002964:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	019b      	lsls	r3, r3, #6
 800296a:	22ff      	movs	r2, #255	; 0xff
 800296c:	401a      	ands	r2, r3
 800296e:	1dfb      	adds	r3, r7, #7
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	0018      	movs	r0, r3
 8002974:	2303      	movs	r3, #3
 8002976:	4003      	ands	r3, r0
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800297c:	481f      	ldr	r0, [pc, #124]	; (80029fc <__NVIC_SetPriority+0xd4>)
 800297e:	1dfb      	adds	r3, r7, #7
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	b25b      	sxtb	r3, r3
 8002984:	089b      	lsrs	r3, r3, #2
 8002986:	430a      	orrs	r2, r1
 8002988:	33c0      	adds	r3, #192	; 0xc0
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800298e:	e031      	b.n	80029f4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002990:	4a1b      	ldr	r2, [pc, #108]	; (8002a00 <__NVIC_SetPriority+0xd8>)
 8002992:	1dfb      	adds	r3, r7, #7
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	0019      	movs	r1, r3
 8002998:	230f      	movs	r3, #15
 800299a:	400b      	ands	r3, r1
 800299c:	3b08      	subs	r3, #8
 800299e:	089b      	lsrs	r3, r3, #2
 80029a0:	3306      	adds	r3, #6
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	18d3      	adds	r3, r2, r3
 80029a6:	3304      	adds	r3, #4
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	1dfa      	adds	r2, r7, #7
 80029ac:	7812      	ldrb	r2, [r2, #0]
 80029ae:	0011      	movs	r1, r2
 80029b0:	2203      	movs	r2, #3
 80029b2:	400a      	ands	r2, r1
 80029b4:	00d2      	lsls	r2, r2, #3
 80029b6:	21ff      	movs	r1, #255	; 0xff
 80029b8:	4091      	lsls	r1, r2
 80029ba:	000a      	movs	r2, r1
 80029bc:	43d2      	mvns	r2, r2
 80029be:	401a      	ands	r2, r3
 80029c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	019b      	lsls	r3, r3, #6
 80029c6:	22ff      	movs	r2, #255	; 0xff
 80029c8:	401a      	ands	r2, r3
 80029ca:	1dfb      	adds	r3, r7, #7
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	0018      	movs	r0, r3
 80029d0:	2303      	movs	r3, #3
 80029d2:	4003      	ands	r3, r0
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029d8:	4809      	ldr	r0, [pc, #36]	; (8002a00 <__NVIC_SetPriority+0xd8>)
 80029da:	1dfb      	adds	r3, r7, #7
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	001c      	movs	r4, r3
 80029e0:	230f      	movs	r3, #15
 80029e2:	4023      	ands	r3, r4
 80029e4:	3b08      	subs	r3, #8
 80029e6:	089b      	lsrs	r3, r3, #2
 80029e8:	430a      	orrs	r2, r1
 80029ea:	3306      	adds	r3, #6
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	18c3      	adds	r3, r0, r3
 80029f0:	3304      	adds	r3, #4
 80029f2:	601a      	str	r2, [r3, #0]
}
 80029f4:	46c0      	nop			; (mov r8, r8)
 80029f6:	46bd      	mov	sp, r7
 80029f8:	b003      	add	sp, #12
 80029fa:	bd90      	pop	{r4, r7, pc}
 80029fc:	e000e100 	.word	0xe000e100
 8002a00:	e000ed00 	.word	0xe000ed00

08002a04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	1e5a      	subs	r2, r3, #1
 8002a10:	2380      	movs	r3, #128	; 0x80
 8002a12:	045b      	lsls	r3, r3, #17
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d301      	bcc.n	8002a1c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e010      	b.n	8002a3e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a1c:	4b0a      	ldr	r3, [pc, #40]	; (8002a48 <SysTick_Config+0x44>)
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	3a01      	subs	r2, #1
 8002a22:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a24:	2301      	movs	r3, #1
 8002a26:	425b      	negs	r3, r3
 8002a28:	2103      	movs	r1, #3
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	f7ff ff7c 	bl	8002928 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a30:	4b05      	ldr	r3, [pc, #20]	; (8002a48 <SysTick_Config+0x44>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a36:	4b04      	ldr	r3, [pc, #16]	; (8002a48 <SysTick_Config+0x44>)
 8002a38:	2207      	movs	r2, #7
 8002a3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	0018      	movs	r0, r3
 8002a40:	46bd      	mov	sp, r7
 8002a42:	b002      	add	sp, #8
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	46c0      	nop			; (mov r8, r8)
 8002a48:	e000e010 	.word	0xe000e010

08002a4c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60b9      	str	r1, [r7, #8]
 8002a54:	607a      	str	r2, [r7, #4]
 8002a56:	210f      	movs	r1, #15
 8002a58:	187b      	adds	r3, r7, r1
 8002a5a:	1c02      	adds	r2, r0, #0
 8002a5c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002a5e:	68ba      	ldr	r2, [r7, #8]
 8002a60:	187b      	adds	r3, r7, r1
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	b25b      	sxtb	r3, r3
 8002a66:	0011      	movs	r1, r2
 8002a68:	0018      	movs	r0, r3
 8002a6a:	f7ff ff5d 	bl	8002928 <__NVIC_SetPriority>
}
 8002a6e:	46c0      	nop			; (mov r8, r8)
 8002a70:	46bd      	mov	sp, r7
 8002a72:	b004      	add	sp, #16
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b082      	sub	sp, #8
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	0002      	movs	r2, r0
 8002a7e:	1dfb      	adds	r3, r7, #7
 8002a80:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a82:	1dfb      	adds	r3, r7, #7
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	b25b      	sxtb	r3, r3
 8002a88:	0018      	movs	r0, r3
 8002a8a:	f7ff ff33 	bl	80028f4 <__NVIC_EnableIRQ>
}
 8002a8e:	46c0      	nop			; (mov r8, r8)
 8002a90:	46bd      	mov	sp, r7
 8002a92:	b002      	add	sp, #8
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b082      	sub	sp, #8
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	f7ff ffaf 	bl	8002a04 <SysTick_Config>
 8002aa6:	0003      	movs	r3, r0
}
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	b002      	add	sp, #8
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e036      	b.n	8002b34 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2221      	movs	r2, #33	; 0x21
 8002aca:	2102      	movs	r1, #2
 8002acc:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	4a18      	ldr	r2, [pc, #96]	; (8002b3c <HAL_DMA_Init+0x8c>)
 8002ada:	4013      	ands	r3, r2
 8002adc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002ae6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002af2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	695b      	ldr	r3, [r3, #20]
 8002af8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002afe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	69db      	ldr	r3, [r3, #28]
 8002b04:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	0018      	movs	r0, r3
 8002b18:	f000 f9c4 	bl	8002ea4 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2221      	movs	r2, #33	; 0x21
 8002b26:	2101      	movs	r1, #1
 8002b28:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2220      	movs	r2, #32
 8002b2e:	2100      	movs	r1, #0
 8002b30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	0018      	movs	r0, r3
 8002b36:	46bd      	mov	sp, r7
 8002b38:	b004      	add	sp, #16
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	ffffc00f 	.word	0xffffc00f

08002b40 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
 8002b4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b4e:	2317      	movs	r3, #23
 8002b50:	18fb      	adds	r3, r7, r3
 8002b52:	2200      	movs	r2, #0
 8002b54:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2220      	movs	r2, #32
 8002b5a:	5c9b      	ldrb	r3, [r3, r2]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d101      	bne.n	8002b64 <HAL_DMA_Start_IT+0x24>
 8002b60:	2302      	movs	r3, #2
 8002b62:	e04f      	b.n	8002c04 <HAL_DMA_Start_IT+0xc4>
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2220      	movs	r2, #32
 8002b68:	2101      	movs	r1, #1
 8002b6a:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2221      	movs	r2, #33	; 0x21
 8002b70:	5c9b      	ldrb	r3, [r3, r2]
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d13a      	bne.n	8002bee <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2221      	movs	r2, #33	; 0x21
 8002b7c:	2102      	movs	r1, #2
 8002b7e:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2101      	movs	r1, #1
 8002b92:	438a      	bics	r2, r1
 8002b94:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	68b9      	ldr	r1, [r7, #8]
 8002b9c:	68f8      	ldr	r0, [r7, #12]
 8002b9e:	f000 f954 	bl	8002e4a <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d008      	beq.n	8002bbc <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	210e      	movs	r1, #14
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	601a      	str	r2, [r3, #0]
 8002bba:	e00f      	b.n	8002bdc <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	210a      	movs	r1, #10
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2104      	movs	r1, #4
 8002bd8:	438a      	bics	r2, r1
 8002bda:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2101      	movs	r1, #1
 8002be8:	430a      	orrs	r2, r1
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	e007      	b.n	8002bfe <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2220      	movs	r2, #32
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002bf6:	2317      	movs	r3, #23
 8002bf8:	18fb      	adds	r3, r7, r3
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8002bfe:	2317      	movs	r3, #23
 8002c00:	18fb      	adds	r3, r7, r3
 8002c02:	781b      	ldrb	r3, [r3, #0]
}
 8002c04:	0018      	movs	r0, r3
 8002c06:	46bd      	mov	sp, r7
 8002c08:	b006      	add	sp, #24
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2221      	movs	r2, #33	; 0x21
 8002c18:	5c9b      	ldrb	r3, [r3, r2]
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d008      	beq.n	8002c32 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2204      	movs	r2, #4
 8002c24:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2220      	movs	r2, #32
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e020      	b.n	8002c74 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	210e      	movs	r1, #14
 8002c3e:	438a      	bics	r2, r1
 8002c40:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2101      	movs	r1, #1
 8002c4e:	438a      	bics	r2, r1
 8002c50:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	4091      	lsls	r1, r2
 8002c5e:	000a      	movs	r2, r1
 8002c60:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2221      	movs	r2, #33	; 0x21
 8002c66:	2101      	movs	r1, #1
 8002c68:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2220      	movs	r2, #32
 8002c6e:	2100      	movs	r1, #0
 8002c70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	0018      	movs	r0, r3
 8002c76:	46bd      	mov	sp, r7
 8002c78:	b002      	add	sp, #8
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c84:	210f      	movs	r1, #15
 8002c86:	187b      	adds	r3, r7, r1
 8002c88:	2200      	movs	r2, #0
 8002c8a:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2221      	movs	r2, #33	; 0x21
 8002c90:	5c9b      	ldrb	r3, [r3, r2]
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d006      	beq.n	8002ca6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2204      	movs	r2, #4
 8002c9c:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8002c9e:	187b      	adds	r3, r7, r1
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	701a      	strb	r2, [r3, #0]
 8002ca4:	e028      	b.n	8002cf8 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	210e      	movs	r1, #14
 8002cb2:	438a      	bics	r2, r1
 8002cb4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	438a      	bics	r2, r1
 8002cc4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cce:	2101      	movs	r1, #1
 8002cd0:	4091      	lsls	r1, r2
 8002cd2:	000a      	movs	r2, r1
 8002cd4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2221      	movs	r2, #33	; 0x21
 8002cda:	2101      	movs	r1, #1
 8002cdc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d004      	beq.n	8002cf8 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	0010      	movs	r0, r2
 8002cf6:	4798      	blx	r3
    }
  }
  return status;
 8002cf8:	230f      	movs	r3, #15
 8002cfa:	18fb      	adds	r3, r7, r3
 8002cfc:	781b      	ldrb	r3, [r3, #0]
}
 8002cfe:	0018      	movs	r0, r3
 8002d00:	46bd      	mov	sp, r7
 8002d02:	b004      	add	sp, #16
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b084      	sub	sp, #16
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	2204      	movs	r2, #4
 8002d24:	409a      	lsls	r2, r3
 8002d26:	0013      	movs	r3, r2
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	d024      	beq.n	8002d78 <HAL_DMA_IRQHandler+0x72>
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	2204      	movs	r2, #4
 8002d32:	4013      	ands	r3, r2
 8002d34:	d020      	beq.n	8002d78 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2220      	movs	r2, #32
 8002d3e:	4013      	ands	r3, r2
 8002d40:	d107      	bne.n	8002d52 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2104      	movs	r1, #4
 8002d4e:	438a      	bics	r2, r1
 8002d50:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d5a:	2104      	movs	r1, #4
 8002d5c:	4091      	lsls	r1, r2
 8002d5e:	000a      	movs	r2, r1
 8002d60:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d100      	bne.n	8002d6c <HAL_DMA_IRQHandler+0x66>
 8002d6a:	e06a      	b.n	8002e42 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	0010      	movs	r0, r2
 8002d74:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002d76:	e064      	b.n	8002e42 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7c:	2202      	movs	r2, #2
 8002d7e:	409a      	lsls	r2, r3
 8002d80:	0013      	movs	r3, r2
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	4013      	ands	r3, r2
 8002d86:	d02b      	beq.n	8002de0 <HAL_DMA_IRQHandler+0xda>
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	d027      	beq.n	8002de0 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2220      	movs	r2, #32
 8002d98:	4013      	ands	r3, r2
 8002d9a:	d10b      	bne.n	8002db4 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	210a      	movs	r1, #10
 8002da8:	438a      	bics	r2, r1
 8002daa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2221      	movs	r2, #33	; 0x21
 8002db0:	2101      	movs	r1, #1
 8002db2:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dbc:	2102      	movs	r1, #2
 8002dbe:	4091      	lsls	r1, r2
 8002dc0:	000a      	movs	r2, r1
 8002dc2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	2100      	movs	r1, #0
 8002dca:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d036      	beq.n	8002e42 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	0010      	movs	r0, r2
 8002ddc:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002dde:	e030      	b.n	8002e42 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de4:	2208      	movs	r2, #8
 8002de6:	409a      	lsls	r2, r3
 8002de8:	0013      	movs	r3, r2
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	4013      	ands	r3, r2
 8002dee:	d028      	beq.n	8002e42 <HAL_DMA_IRQHandler+0x13c>
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	2208      	movs	r2, #8
 8002df4:	4013      	ands	r3, r2
 8002df6:	d024      	beq.n	8002e42 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	210e      	movs	r1, #14
 8002e04:	438a      	bics	r2, r1
 8002e06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e10:	2101      	movs	r1, #1
 8002e12:	4091      	lsls	r1, r2
 8002e14:	000a      	movs	r2, r1
 8002e16:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2221      	movs	r2, #33	; 0x21
 8002e22:	2101      	movs	r1, #1
 8002e24:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2220      	movs	r2, #32
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d005      	beq.n	8002e42 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	0010      	movs	r0, r2
 8002e3e:	4798      	blx	r3
    }
  }
}
 8002e40:	e7ff      	b.n	8002e42 <HAL_DMA_IRQHandler+0x13c>
 8002e42:	46c0      	nop			; (mov r8, r8)
 8002e44:	46bd      	mov	sp, r7
 8002e46:	b004      	add	sp, #16
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b084      	sub	sp, #16
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	60f8      	str	r0, [r7, #12]
 8002e52:	60b9      	str	r1, [r7, #8]
 8002e54:	607a      	str	r2, [r7, #4]
 8002e56:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e60:	2101      	movs	r1, #1
 8002e62:	4091      	lsls	r1, r2
 8002e64:	000a      	movs	r2, r1
 8002e66:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	2b10      	cmp	r3, #16
 8002e76:	d108      	bne.n	8002e8a <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68ba      	ldr	r2, [r7, #8]
 8002e86:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002e88:	e007      	b.n	8002e9a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	60da      	str	r2, [r3, #12]
}
 8002e9a:	46c0      	nop			; (mov r8, r8)
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	b004      	add	sp, #16
 8002ea0:	bd80      	pop	{r7, pc}
	...

08002ea4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a08      	ldr	r2, [pc, #32]	; (8002ed4 <DMA_CalcBaseAndBitshift+0x30>)
 8002eb2:	4694      	mov	ip, r2
 8002eb4:	4463      	add	r3, ip
 8002eb6:	2114      	movs	r1, #20
 8002eb8:	0018      	movs	r0, r3
 8002eba:	f7fd f925 	bl	8000108 <__udivsi3>
 8002ebe:	0003      	movs	r3, r0
 8002ec0:	009a      	lsls	r2, r3, #2
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a03      	ldr	r2, [pc, #12]	; (8002ed8 <DMA_CalcBaseAndBitshift+0x34>)
 8002eca:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002ecc:	46c0      	nop			; (mov r8, r8)
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	b002      	add	sp, #8
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	bffdfff8 	.word	0xbffdfff8
 8002ed8:	40020000 	.word	0x40020000

08002edc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002eea:	e149      	b.n	8003180 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2101      	movs	r1, #1
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	4091      	lsls	r1, r2
 8002ef6:	000a      	movs	r2, r1
 8002ef8:	4013      	ands	r3, r2
 8002efa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d100      	bne.n	8002f04 <HAL_GPIO_Init+0x28>
 8002f02:	e13a      	b.n	800317a <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	2203      	movs	r2, #3
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d005      	beq.n	8002f1c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	2203      	movs	r2, #3
 8002f16:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d130      	bne.n	8002f7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	2203      	movs	r2, #3
 8002f28:	409a      	lsls	r2, r3
 8002f2a:	0013      	movs	r3, r2
 8002f2c:	43da      	mvns	r2, r3
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	4013      	ands	r3, r2
 8002f32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	68da      	ldr	r2, [r3, #12]
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	409a      	lsls	r2, r3
 8002f3e:	0013      	movs	r3, r2
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f52:	2201      	movs	r2, #1
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	409a      	lsls	r2, r3
 8002f58:	0013      	movs	r3, r2
 8002f5a:	43da      	mvns	r2, r3
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	091b      	lsrs	r3, r3, #4
 8002f68:	2201      	movs	r2, #1
 8002f6a:	401a      	ands	r2, r3
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	409a      	lsls	r2, r3
 8002f70:	0013      	movs	r3, r2
 8002f72:	693a      	ldr	r2, [r7, #16]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	2203      	movs	r2, #3
 8002f84:	4013      	ands	r3, r2
 8002f86:	2b03      	cmp	r3, #3
 8002f88:	d017      	beq.n	8002fba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	2203      	movs	r2, #3
 8002f96:	409a      	lsls	r2, r3
 8002f98:	0013      	movs	r3, r2
 8002f9a:	43da      	mvns	r2, r3
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	689a      	ldr	r2, [r3, #8]
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	409a      	lsls	r2, r3
 8002fac:	0013      	movs	r3, r2
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	693a      	ldr	r2, [r7, #16]
 8002fb8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	2203      	movs	r2, #3
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d123      	bne.n	800300e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	08da      	lsrs	r2, r3, #3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	3208      	adds	r2, #8
 8002fce:	0092      	lsls	r2, r2, #2
 8002fd0:	58d3      	ldr	r3, [r2, r3]
 8002fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	2207      	movs	r2, #7
 8002fd8:	4013      	ands	r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	220f      	movs	r2, #15
 8002fde:	409a      	lsls	r2, r3
 8002fe0:	0013      	movs	r3, r2
 8002fe2:	43da      	mvns	r2, r3
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	691a      	ldr	r2, [r3, #16]
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	2107      	movs	r1, #7
 8002ff2:	400b      	ands	r3, r1
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	409a      	lsls	r2, r3
 8002ff8:	0013      	movs	r3, r2
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	08da      	lsrs	r2, r3, #3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	3208      	adds	r2, #8
 8003008:	0092      	lsls	r2, r2, #2
 800300a:	6939      	ldr	r1, [r7, #16]
 800300c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	2203      	movs	r2, #3
 800301a:	409a      	lsls	r2, r3
 800301c:	0013      	movs	r3, r2
 800301e:	43da      	mvns	r2, r3
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	4013      	ands	r3, r2
 8003024:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	2203      	movs	r2, #3
 800302c:	401a      	ands	r2, r3
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	409a      	lsls	r2, r3
 8003034:	0013      	movs	r3, r2
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	4313      	orrs	r3, r2
 800303a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	23c0      	movs	r3, #192	; 0xc0
 8003048:	029b      	lsls	r3, r3, #10
 800304a:	4013      	ands	r3, r2
 800304c:	d100      	bne.n	8003050 <HAL_GPIO_Init+0x174>
 800304e:	e094      	b.n	800317a <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003050:	4b51      	ldr	r3, [pc, #324]	; (8003198 <HAL_GPIO_Init+0x2bc>)
 8003052:	699a      	ldr	r2, [r3, #24]
 8003054:	4b50      	ldr	r3, [pc, #320]	; (8003198 <HAL_GPIO_Init+0x2bc>)
 8003056:	2101      	movs	r1, #1
 8003058:	430a      	orrs	r2, r1
 800305a:	619a      	str	r2, [r3, #24]
 800305c:	4b4e      	ldr	r3, [pc, #312]	; (8003198 <HAL_GPIO_Init+0x2bc>)
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	2201      	movs	r2, #1
 8003062:	4013      	ands	r3, r2
 8003064:	60bb      	str	r3, [r7, #8]
 8003066:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003068:	4a4c      	ldr	r2, [pc, #304]	; (800319c <HAL_GPIO_Init+0x2c0>)
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	089b      	lsrs	r3, r3, #2
 800306e:	3302      	adds	r3, #2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	589b      	ldr	r3, [r3, r2]
 8003074:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	2203      	movs	r2, #3
 800307a:	4013      	ands	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	220f      	movs	r2, #15
 8003080:	409a      	lsls	r2, r3
 8003082:	0013      	movs	r3, r2
 8003084:	43da      	mvns	r2, r3
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	4013      	ands	r3, r2
 800308a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	2390      	movs	r3, #144	; 0x90
 8003090:	05db      	lsls	r3, r3, #23
 8003092:	429a      	cmp	r2, r3
 8003094:	d00d      	beq.n	80030b2 <HAL_GPIO_Init+0x1d6>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a41      	ldr	r2, [pc, #260]	; (80031a0 <HAL_GPIO_Init+0x2c4>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d007      	beq.n	80030ae <HAL_GPIO_Init+0x1d2>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a40      	ldr	r2, [pc, #256]	; (80031a4 <HAL_GPIO_Init+0x2c8>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d101      	bne.n	80030aa <HAL_GPIO_Init+0x1ce>
 80030a6:	2302      	movs	r3, #2
 80030a8:	e004      	b.n	80030b4 <HAL_GPIO_Init+0x1d8>
 80030aa:	2305      	movs	r3, #5
 80030ac:	e002      	b.n	80030b4 <HAL_GPIO_Init+0x1d8>
 80030ae:	2301      	movs	r3, #1
 80030b0:	e000      	b.n	80030b4 <HAL_GPIO_Init+0x1d8>
 80030b2:	2300      	movs	r3, #0
 80030b4:	697a      	ldr	r2, [r7, #20]
 80030b6:	2103      	movs	r1, #3
 80030b8:	400a      	ands	r2, r1
 80030ba:	0092      	lsls	r2, r2, #2
 80030bc:	4093      	lsls	r3, r2
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80030c4:	4935      	ldr	r1, [pc, #212]	; (800319c <HAL_GPIO_Init+0x2c0>)
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	089b      	lsrs	r3, r3, #2
 80030ca:	3302      	adds	r3, #2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030d2:	4b35      	ldr	r3, [pc, #212]	; (80031a8 <HAL_GPIO_Init+0x2cc>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	43da      	mvns	r2, r3
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	4013      	ands	r3, r2
 80030e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	2380      	movs	r3, #128	; 0x80
 80030e8:	035b      	lsls	r3, r3, #13
 80030ea:	4013      	ands	r3, r2
 80030ec:	d003      	beq.n	80030f6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80030f6:	4b2c      	ldr	r3, [pc, #176]	; (80031a8 <HAL_GPIO_Init+0x2cc>)
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80030fc:	4b2a      	ldr	r3, [pc, #168]	; (80031a8 <HAL_GPIO_Init+0x2cc>)
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	43da      	mvns	r2, r3
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	4013      	ands	r3, r2
 800310a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	2380      	movs	r3, #128	; 0x80
 8003112:	039b      	lsls	r3, r3, #14
 8003114:	4013      	ands	r3, r2
 8003116:	d003      	beq.n	8003120 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	4313      	orrs	r3, r2
 800311e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003120:	4b21      	ldr	r3, [pc, #132]	; (80031a8 <HAL_GPIO_Init+0x2cc>)
 8003122:	693a      	ldr	r2, [r7, #16]
 8003124:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8003126:	4b20      	ldr	r3, [pc, #128]	; (80031a8 <HAL_GPIO_Init+0x2cc>)
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	43da      	mvns	r2, r3
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	4013      	ands	r3, r2
 8003134:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	685a      	ldr	r2, [r3, #4]
 800313a:	2380      	movs	r3, #128	; 0x80
 800313c:	029b      	lsls	r3, r3, #10
 800313e:	4013      	ands	r3, r2
 8003140:	d003      	beq.n	800314a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	4313      	orrs	r3, r2
 8003148:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800314a:	4b17      	ldr	r3, [pc, #92]	; (80031a8 <HAL_GPIO_Init+0x2cc>)
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8003150:	4b15      	ldr	r3, [pc, #84]	; (80031a8 <HAL_GPIO_Init+0x2cc>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	43da      	mvns	r2, r3
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	4013      	ands	r3, r2
 800315e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	2380      	movs	r3, #128	; 0x80
 8003166:	025b      	lsls	r3, r3, #9
 8003168:	4013      	ands	r3, r2
 800316a:	d003      	beq.n	8003174 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	4313      	orrs	r3, r2
 8003172:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003174:	4b0c      	ldr	r3, [pc, #48]	; (80031a8 <HAL_GPIO_Init+0x2cc>)
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	3301      	adds	r3, #1
 800317e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	40da      	lsrs	r2, r3
 8003188:	1e13      	subs	r3, r2, #0
 800318a:	d000      	beq.n	800318e <HAL_GPIO_Init+0x2b2>
 800318c:	e6ae      	b.n	8002eec <HAL_GPIO_Init+0x10>
  } 
}
 800318e:	46c0      	nop			; (mov r8, r8)
 8003190:	46c0      	nop			; (mov r8, r8)
 8003192:	46bd      	mov	sp, r7
 8003194:	b006      	add	sp, #24
 8003196:	bd80      	pop	{r7, pc}
 8003198:	40021000 	.word	0x40021000
 800319c:	40010000 	.word	0x40010000
 80031a0:	48000400 	.word	0x48000400
 80031a4:	48000800 	.word	0x48000800
 80031a8:	40010400 	.word	0x40010400

080031ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b088      	sub	sp, #32
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d102      	bne.n	80031c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	f000 fb76 	bl	80038ac <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2201      	movs	r2, #1
 80031c6:	4013      	ands	r3, r2
 80031c8:	d100      	bne.n	80031cc <HAL_RCC_OscConfig+0x20>
 80031ca:	e08e      	b.n	80032ea <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80031cc:	4bc5      	ldr	r3, [pc, #788]	; (80034e4 <HAL_RCC_OscConfig+0x338>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	220c      	movs	r2, #12
 80031d2:	4013      	ands	r3, r2
 80031d4:	2b04      	cmp	r3, #4
 80031d6:	d00e      	beq.n	80031f6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031d8:	4bc2      	ldr	r3, [pc, #776]	; (80034e4 <HAL_RCC_OscConfig+0x338>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	220c      	movs	r2, #12
 80031de:	4013      	ands	r3, r2
 80031e0:	2b08      	cmp	r3, #8
 80031e2:	d117      	bne.n	8003214 <HAL_RCC_OscConfig+0x68>
 80031e4:	4bbf      	ldr	r3, [pc, #764]	; (80034e4 <HAL_RCC_OscConfig+0x338>)
 80031e6:	685a      	ldr	r2, [r3, #4]
 80031e8:	23c0      	movs	r3, #192	; 0xc0
 80031ea:	025b      	lsls	r3, r3, #9
 80031ec:	401a      	ands	r2, r3
 80031ee:	2380      	movs	r3, #128	; 0x80
 80031f0:	025b      	lsls	r3, r3, #9
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d10e      	bne.n	8003214 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031f6:	4bbb      	ldr	r3, [pc, #748]	; (80034e4 <HAL_RCC_OscConfig+0x338>)
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	2380      	movs	r3, #128	; 0x80
 80031fc:	029b      	lsls	r3, r3, #10
 80031fe:	4013      	ands	r3, r2
 8003200:	d100      	bne.n	8003204 <HAL_RCC_OscConfig+0x58>
 8003202:	e071      	b.n	80032e8 <HAL_RCC_OscConfig+0x13c>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d000      	beq.n	800320e <HAL_RCC_OscConfig+0x62>
 800320c:	e06c      	b.n	80032e8 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	f000 fb4c 	bl	80038ac <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d107      	bne.n	800322c <HAL_RCC_OscConfig+0x80>
 800321c:	4bb1      	ldr	r3, [pc, #708]	; (80034e4 <HAL_RCC_OscConfig+0x338>)
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	4bb0      	ldr	r3, [pc, #704]	; (80034e4 <HAL_RCC_OscConfig+0x338>)
 8003222:	2180      	movs	r1, #128	; 0x80
 8003224:	0249      	lsls	r1, r1, #9
 8003226:	430a      	orrs	r2, r1
 8003228:	601a      	str	r2, [r3, #0]
 800322a:	e02f      	b.n	800328c <HAL_RCC_OscConfig+0xe0>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d10c      	bne.n	800324e <HAL_RCC_OscConfig+0xa2>
 8003234:	4bab      	ldr	r3, [pc, #684]	; (80034e4 <HAL_RCC_OscConfig+0x338>)
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	4baa      	ldr	r3, [pc, #680]	; (80034e4 <HAL_RCC_OscConfig+0x338>)
 800323a:	49ab      	ldr	r1, [pc, #684]	; (80034e8 <HAL_RCC_OscConfig+0x33c>)
 800323c:	400a      	ands	r2, r1
 800323e:	601a      	str	r2, [r3, #0]
 8003240:	4ba8      	ldr	r3, [pc, #672]	; (80034e4 <HAL_RCC_OscConfig+0x338>)
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	4ba7      	ldr	r3, [pc, #668]	; (80034e4 <HAL_RCC_OscConfig+0x338>)
 8003246:	49a9      	ldr	r1, [pc, #676]	; (80034ec <HAL_RCC_OscConfig+0x340>)
 8003248:	400a      	ands	r2, r1
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	e01e      	b.n	800328c <HAL_RCC_OscConfig+0xe0>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	2b05      	cmp	r3, #5
 8003254:	d10e      	bne.n	8003274 <HAL_RCC_OscConfig+0xc8>
 8003256:	4ba3      	ldr	r3, [pc, #652]	; (80034e4 <HAL_RCC_OscConfig+0x338>)
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	4ba2      	ldr	r3, [pc, #648]	; (80034e4 <HAL_RCC_OscConfig+0x338>)
 800325c:	2180      	movs	r1, #128	; 0x80
 800325e:	02c9      	lsls	r1, r1, #11
 8003260:	430a      	orrs	r2, r1
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	4b9f      	ldr	r3, [pc, #636]	; (80034e4 <HAL_RCC_OscConfig+0x338>)
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	4b9e      	ldr	r3, [pc, #632]	; (80034e4 <HAL_RCC_OscConfig+0x338>)
 800326a:	2180      	movs	r1, #128	; 0x80
 800326c:	0249      	lsls	r1, r1, #9
 800326e:	430a      	orrs	r2, r1
 8003270:	601a      	str	r2, [r3, #0]
 8003272:	e00b      	b.n	800328c <HAL_RCC_OscConfig+0xe0>
 8003274:	4b9b      	ldr	r3, [pc, #620]	; (80034e4 <HAL_RCC_OscConfig+0x338>)
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	4b9a      	ldr	r3, [pc, #616]	; (80034e4 <HAL_RCC_OscConfig+0x338>)
 800327a:	499b      	ldr	r1, [pc, #620]	; (80034e8 <HAL_RCC_OscConfig+0x33c>)
 800327c:	400a      	ands	r2, r1
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	4b98      	ldr	r3, [pc, #608]	; (80034e4 <HAL_RCC_OscConfig+0x338>)
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	4b97      	ldr	r3, [pc, #604]	; (80034e4 <HAL_RCC_OscConfig+0x338>)
 8003286:	4999      	ldr	r1, [pc, #612]	; (80034ec <HAL_RCC_OscConfig+0x340>)
 8003288:	400a      	ands	r2, r1
 800328a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d014      	beq.n	80032be <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003294:	f7fe ff42 	bl	800211c <HAL_GetTick>
 8003298:	0003      	movs	r3, r0
 800329a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800329c:	e008      	b.n	80032b0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800329e:	f7fe ff3d 	bl	800211c <HAL_GetTick>
 80032a2:	0002      	movs	r2, r0
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	2b64      	cmp	r3, #100	; 0x64
 80032aa:	d901      	bls.n	80032b0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e2fd      	b.n	80038ac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032b0:	4b8c      	ldr	r3, [pc, #560]	; (80034e4 <HAL_RCC_OscConfig+0x338>)
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	2380      	movs	r3, #128	; 0x80
 80032b6:	029b      	lsls	r3, r3, #10
 80032b8:	4013      	ands	r3, r2
 80032ba:	d0f0      	beq.n	800329e <HAL_RCC_OscConfig+0xf2>
 80032bc:	e015      	b.n	80032ea <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032be:	f7fe ff2d 	bl	800211c <HAL_GetTick>
 80032c2:	0003      	movs	r3, r0
 80032c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032c8:	f7fe ff28 	bl	800211c <HAL_GetTick>
 80032cc:	0002      	movs	r2, r0
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b64      	cmp	r3, #100	; 0x64
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e2e8      	b.n	80038ac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032da:	4b82      	ldr	r3, [pc, #520]	; (80034e4 <HAL_RCC_OscConfig+0x338>)
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	2380      	movs	r3, #128	; 0x80
 80032e0:	029b      	lsls	r3, r3, #10
 80032e2:	4013      	ands	r3, r2
 80032e4:	d1f0      	bne.n	80032c8 <HAL_RCC_OscConfig+0x11c>
 80032e6:	e000      	b.n	80032ea <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2202      	movs	r2, #2
 80032f0:	4013      	ands	r3, r2
 80032f2:	d100      	bne.n	80032f6 <HAL_RCC_OscConfig+0x14a>
 80032f4:	e06c      	b.n	80033d0 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80032f6:	4b7b      	ldr	r3, [pc, #492]	; (80034e4 <HAL_RCC_OscConfig+0x338>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	220c      	movs	r2, #12
 80032fc:	4013      	ands	r3, r2
 80032fe:	d00e      	beq.n	800331e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003300:	4b78      	ldr	r3, [pc, #480]	; (80034e4 <HAL_RCC_OscConfig+0x338>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	220c      	movs	r2, #12
 8003306:	4013      	ands	r3, r2
 8003308:	2b08      	cmp	r3, #8
 800330a:	d11f      	bne.n	800334c <HAL_RCC_OscConfig+0x1a0>
 800330c:	4b75      	ldr	r3, [pc, #468]	; (80034e4 <HAL_RCC_OscConfig+0x338>)
 800330e:	685a      	ldr	r2, [r3, #4]
 8003310:	23c0      	movs	r3, #192	; 0xc0
 8003312:	025b      	lsls	r3, r3, #9
 8003314:	401a      	ands	r2, r3
 8003316:	2380      	movs	r3, #128	; 0x80
 8003318:	021b      	lsls	r3, r3, #8
 800331a:	429a      	cmp	r2, r3
 800331c:	d116      	bne.n	800334c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800331e:	4b71      	ldr	r3, [pc, #452]	; (80034e4 <HAL_RCC_OscConfig+0x338>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2202      	movs	r2, #2
 8003324:	4013      	ands	r3, r2
 8003326:	d005      	beq.n	8003334 <HAL_RCC_OscConfig+0x188>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d001      	beq.n	8003334 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e2bb      	b.n	80038ac <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003334:	4b6b      	ldr	r3, [pc, #428]	; (80034e4 <HAL_RCC_OscConfig+0x338>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	22f8      	movs	r2, #248	; 0xf8
 800333a:	4393      	bics	r3, r2
 800333c:	0019      	movs	r1, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	00da      	lsls	r2, r3, #3
 8003344:	4b67      	ldr	r3, [pc, #412]	; (80034e4 <HAL_RCC_OscConfig+0x338>)
 8003346:	430a      	orrs	r2, r1
 8003348:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800334a:	e041      	b.n	80033d0 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d024      	beq.n	800339e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003354:	4b63      	ldr	r3, [pc, #396]	; (80034e4 <HAL_RCC_OscConfig+0x338>)
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	4b62      	ldr	r3, [pc, #392]	; (80034e4 <HAL_RCC_OscConfig+0x338>)
 800335a:	2101      	movs	r1, #1
 800335c:	430a      	orrs	r2, r1
 800335e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003360:	f7fe fedc 	bl	800211c <HAL_GetTick>
 8003364:	0003      	movs	r3, r0
 8003366:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003368:	e008      	b.n	800337c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800336a:	f7fe fed7 	bl	800211c <HAL_GetTick>
 800336e:	0002      	movs	r2, r0
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d901      	bls.n	800337c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e297      	b.n	80038ac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800337c:	4b59      	ldr	r3, [pc, #356]	; (80034e4 <HAL_RCC_OscConfig+0x338>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2202      	movs	r2, #2
 8003382:	4013      	ands	r3, r2
 8003384:	d0f1      	beq.n	800336a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003386:	4b57      	ldr	r3, [pc, #348]	; (80034e4 <HAL_RCC_OscConfig+0x338>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	22f8      	movs	r2, #248	; 0xf8
 800338c:	4393      	bics	r3, r2
 800338e:	0019      	movs	r1, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	00da      	lsls	r2, r3, #3
 8003396:	4b53      	ldr	r3, [pc, #332]	; (80034e4 <HAL_RCC_OscConfig+0x338>)
 8003398:	430a      	orrs	r2, r1
 800339a:	601a      	str	r2, [r3, #0]
 800339c:	e018      	b.n	80033d0 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800339e:	4b51      	ldr	r3, [pc, #324]	; (80034e4 <HAL_RCC_OscConfig+0x338>)
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	4b50      	ldr	r3, [pc, #320]	; (80034e4 <HAL_RCC_OscConfig+0x338>)
 80033a4:	2101      	movs	r1, #1
 80033a6:	438a      	bics	r2, r1
 80033a8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033aa:	f7fe feb7 	bl	800211c <HAL_GetTick>
 80033ae:	0003      	movs	r3, r0
 80033b0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033b4:	f7fe feb2 	bl	800211c <HAL_GetTick>
 80033b8:	0002      	movs	r2, r0
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e272      	b.n	80038ac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033c6:	4b47      	ldr	r3, [pc, #284]	; (80034e4 <HAL_RCC_OscConfig+0x338>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2202      	movs	r2, #2
 80033cc:	4013      	ands	r3, r2
 80033ce:	d1f1      	bne.n	80033b4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2208      	movs	r2, #8
 80033d6:	4013      	ands	r3, r2
 80033d8:	d036      	beq.n	8003448 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	69db      	ldr	r3, [r3, #28]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d019      	beq.n	8003416 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033e2:	4b40      	ldr	r3, [pc, #256]	; (80034e4 <HAL_RCC_OscConfig+0x338>)
 80033e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033e6:	4b3f      	ldr	r3, [pc, #252]	; (80034e4 <HAL_RCC_OscConfig+0x338>)
 80033e8:	2101      	movs	r1, #1
 80033ea:	430a      	orrs	r2, r1
 80033ec:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ee:	f7fe fe95 	bl	800211c <HAL_GetTick>
 80033f2:	0003      	movs	r3, r0
 80033f4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033f6:	e008      	b.n	800340a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033f8:	f7fe fe90 	bl	800211c <HAL_GetTick>
 80033fc:	0002      	movs	r2, r0
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e250      	b.n	80038ac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800340a:	4b36      	ldr	r3, [pc, #216]	; (80034e4 <HAL_RCC_OscConfig+0x338>)
 800340c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340e:	2202      	movs	r2, #2
 8003410:	4013      	ands	r3, r2
 8003412:	d0f1      	beq.n	80033f8 <HAL_RCC_OscConfig+0x24c>
 8003414:	e018      	b.n	8003448 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003416:	4b33      	ldr	r3, [pc, #204]	; (80034e4 <HAL_RCC_OscConfig+0x338>)
 8003418:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800341a:	4b32      	ldr	r3, [pc, #200]	; (80034e4 <HAL_RCC_OscConfig+0x338>)
 800341c:	2101      	movs	r1, #1
 800341e:	438a      	bics	r2, r1
 8003420:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003422:	f7fe fe7b 	bl	800211c <HAL_GetTick>
 8003426:	0003      	movs	r3, r0
 8003428:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800342a:	e008      	b.n	800343e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800342c:	f7fe fe76 	bl	800211c <HAL_GetTick>
 8003430:	0002      	movs	r2, r0
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b02      	cmp	r3, #2
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e236      	b.n	80038ac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800343e:	4b29      	ldr	r3, [pc, #164]	; (80034e4 <HAL_RCC_OscConfig+0x338>)
 8003440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003442:	2202      	movs	r2, #2
 8003444:	4013      	ands	r3, r2
 8003446:	d1f1      	bne.n	800342c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2204      	movs	r2, #4
 800344e:	4013      	ands	r3, r2
 8003450:	d100      	bne.n	8003454 <HAL_RCC_OscConfig+0x2a8>
 8003452:	e0b5      	b.n	80035c0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003454:	201f      	movs	r0, #31
 8003456:	183b      	adds	r3, r7, r0
 8003458:	2200      	movs	r2, #0
 800345a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800345c:	4b21      	ldr	r3, [pc, #132]	; (80034e4 <HAL_RCC_OscConfig+0x338>)
 800345e:	69da      	ldr	r2, [r3, #28]
 8003460:	2380      	movs	r3, #128	; 0x80
 8003462:	055b      	lsls	r3, r3, #21
 8003464:	4013      	ands	r3, r2
 8003466:	d110      	bne.n	800348a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003468:	4b1e      	ldr	r3, [pc, #120]	; (80034e4 <HAL_RCC_OscConfig+0x338>)
 800346a:	69da      	ldr	r2, [r3, #28]
 800346c:	4b1d      	ldr	r3, [pc, #116]	; (80034e4 <HAL_RCC_OscConfig+0x338>)
 800346e:	2180      	movs	r1, #128	; 0x80
 8003470:	0549      	lsls	r1, r1, #21
 8003472:	430a      	orrs	r2, r1
 8003474:	61da      	str	r2, [r3, #28]
 8003476:	4b1b      	ldr	r3, [pc, #108]	; (80034e4 <HAL_RCC_OscConfig+0x338>)
 8003478:	69da      	ldr	r2, [r3, #28]
 800347a:	2380      	movs	r3, #128	; 0x80
 800347c:	055b      	lsls	r3, r3, #21
 800347e:	4013      	ands	r3, r2
 8003480:	60fb      	str	r3, [r7, #12]
 8003482:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003484:	183b      	adds	r3, r7, r0
 8003486:	2201      	movs	r2, #1
 8003488:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800348a:	4b19      	ldr	r3, [pc, #100]	; (80034f0 <HAL_RCC_OscConfig+0x344>)
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	2380      	movs	r3, #128	; 0x80
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	4013      	ands	r3, r2
 8003494:	d11a      	bne.n	80034cc <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003496:	4b16      	ldr	r3, [pc, #88]	; (80034f0 <HAL_RCC_OscConfig+0x344>)
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	4b15      	ldr	r3, [pc, #84]	; (80034f0 <HAL_RCC_OscConfig+0x344>)
 800349c:	2180      	movs	r1, #128	; 0x80
 800349e:	0049      	lsls	r1, r1, #1
 80034a0:	430a      	orrs	r2, r1
 80034a2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034a4:	f7fe fe3a 	bl	800211c <HAL_GetTick>
 80034a8:	0003      	movs	r3, r0
 80034aa:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ac:	e008      	b.n	80034c0 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ae:	f7fe fe35 	bl	800211c <HAL_GetTick>
 80034b2:	0002      	movs	r2, r0
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	2b64      	cmp	r3, #100	; 0x64
 80034ba:	d901      	bls.n	80034c0 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e1f5      	b.n	80038ac <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c0:	4b0b      	ldr	r3, [pc, #44]	; (80034f0 <HAL_RCC_OscConfig+0x344>)
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	2380      	movs	r3, #128	; 0x80
 80034c6:	005b      	lsls	r3, r3, #1
 80034c8:	4013      	ands	r3, r2
 80034ca:	d0f0      	beq.n	80034ae <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d10f      	bne.n	80034f4 <HAL_RCC_OscConfig+0x348>
 80034d4:	4b03      	ldr	r3, [pc, #12]	; (80034e4 <HAL_RCC_OscConfig+0x338>)
 80034d6:	6a1a      	ldr	r2, [r3, #32]
 80034d8:	4b02      	ldr	r3, [pc, #8]	; (80034e4 <HAL_RCC_OscConfig+0x338>)
 80034da:	2101      	movs	r1, #1
 80034dc:	430a      	orrs	r2, r1
 80034de:	621a      	str	r2, [r3, #32]
 80034e0:	e036      	b.n	8003550 <HAL_RCC_OscConfig+0x3a4>
 80034e2:	46c0      	nop			; (mov r8, r8)
 80034e4:	40021000 	.word	0x40021000
 80034e8:	fffeffff 	.word	0xfffeffff
 80034ec:	fffbffff 	.word	0xfffbffff
 80034f0:	40007000 	.word	0x40007000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d10c      	bne.n	8003516 <HAL_RCC_OscConfig+0x36a>
 80034fc:	4bca      	ldr	r3, [pc, #808]	; (8003828 <HAL_RCC_OscConfig+0x67c>)
 80034fe:	6a1a      	ldr	r2, [r3, #32]
 8003500:	4bc9      	ldr	r3, [pc, #804]	; (8003828 <HAL_RCC_OscConfig+0x67c>)
 8003502:	2101      	movs	r1, #1
 8003504:	438a      	bics	r2, r1
 8003506:	621a      	str	r2, [r3, #32]
 8003508:	4bc7      	ldr	r3, [pc, #796]	; (8003828 <HAL_RCC_OscConfig+0x67c>)
 800350a:	6a1a      	ldr	r2, [r3, #32]
 800350c:	4bc6      	ldr	r3, [pc, #792]	; (8003828 <HAL_RCC_OscConfig+0x67c>)
 800350e:	2104      	movs	r1, #4
 8003510:	438a      	bics	r2, r1
 8003512:	621a      	str	r2, [r3, #32]
 8003514:	e01c      	b.n	8003550 <HAL_RCC_OscConfig+0x3a4>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	2b05      	cmp	r3, #5
 800351c:	d10c      	bne.n	8003538 <HAL_RCC_OscConfig+0x38c>
 800351e:	4bc2      	ldr	r3, [pc, #776]	; (8003828 <HAL_RCC_OscConfig+0x67c>)
 8003520:	6a1a      	ldr	r2, [r3, #32]
 8003522:	4bc1      	ldr	r3, [pc, #772]	; (8003828 <HAL_RCC_OscConfig+0x67c>)
 8003524:	2104      	movs	r1, #4
 8003526:	430a      	orrs	r2, r1
 8003528:	621a      	str	r2, [r3, #32]
 800352a:	4bbf      	ldr	r3, [pc, #764]	; (8003828 <HAL_RCC_OscConfig+0x67c>)
 800352c:	6a1a      	ldr	r2, [r3, #32]
 800352e:	4bbe      	ldr	r3, [pc, #760]	; (8003828 <HAL_RCC_OscConfig+0x67c>)
 8003530:	2101      	movs	r1, #1
 8003532:	430a      	orrs	r2, r1
 8003534:	621a      	str	r2, [r3, #32]
 8003536:	e00b      	b.n	8003550 <HAL_RCC_OscConfig+0x3a4>
 8003538:	4bbb      	ldr	r3, [pc, #748]	; (8003828 <HAL_RCC_OscConfig+0x67c>)
 800353a:	6a1a      	ldr	r2, [r3, #32]
 800353c:	4bba      	ldr	r3, [pc, #744]	; (8003828 <HAL_RCC_OscConfig+0x67c>)
 800353e:	2101      	movs	r1, #1
 8003540:	438a      	bics	r2, r1
 8003542:	621a      	str	r2, [r3, #32]
 8003544:	4bb8      	ldr	r3, [pc, #736]	; (8003828 <HAL_RCC_OscConfig+0x67c>)
 8003546:	6a1a      	ldr	r2, [r3, #32]
 8003548:	4bb7      	ldr	r3, [pc, #732]	; (8003828 <HAL_RCC_OscConfig+0x67c>)
 800354a:	2104      	movs	r1, #4
 800354c:	438a      	bics	r2, r1
 800354e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d014      	beq.n	8003582 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003558:	f7fe fde0 	bl	800211c <HAL_GetTick>
 800355c:	0003      	movs	r3, r0
 800355e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003560:	e009      	b.n	8003576 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003562:	f7fe fddb 	bl	800211c <HAL_GetTick>
 8003566:	0002      	movs	r2, r0
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	4aaf      	ldr	r2, [pc, #700]	; (800382c <HAL_RCC_OscConfig+0x680>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e19a      	b.n	80038ac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003576:	4bac      	ldr	r3, [pc, #688]	; (8003828 <HAL_RCC_OscConfig+0x67c>)
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	2202      	movs	r2, #2
 800357c:	4013      	ands	r3, r2
 800357e:	d0f0      	beq.n	8003562 <HAL_RCC_OscConfig+0x3b6>
 8003580:	e013      	b.n	80035aa <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003582:	f7fe fdcb 	bl	800211c <HAL_GetTick>
 8003586:	0003      	movs	r3, r0
 8003588:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800358a:	e009      	b.n	80035a0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800358c:	f7fe fdc6 	bl	800211c <HAL_GetTick>
 8003590:	0002      	movs	r2, r0
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	4aa5      	ldr	r2, [pc, #660]	; (800382c <HAL_RCC_OscConfig+0x680>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d901      	bls.n	80035a0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e185      	b.n	80038ac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035a0:	4ba1      	ldr	r3, [pc, #644]	; (8003828 <HAL_RCC_OscConfig+0x67c>)
 80035a2:	6a1b      	ldr	r3, [r3, #32]
 80035a4:	2202      	movs	r2, #2
 80035a6:	4013      	ands	r3, r2
 80035a8:	d1f0      	bne.n	800358c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80035aa:	231f      	movs	r3, #31
 80035ac:	18fb      	adds	r3, r7, r3
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d105      	bne.n	80035c0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035b4:	4b9c      	ldr	r3, [pc, #624]	; (8003828 <HAL_RCC_OscConfig+0x67c>)
 80035b6:	69da      	ldr	r2, [r3, #28]
 80035b8:	4b9b      	ldr	r3, [pc, #620]	; (8003828 <HAL_RCC_OscConfig+0x67c>)
 80035ba:	499d      	ldr	r1, [pc, #628]	; (8003830 <HAL_RCC_OscConfig+0x684>)
 80035bc:	400a      	ands	r2, r1
 80035be:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2210      	movs	r2, #16
 80035c6:	4013      	ands	r3, r2
 80035c8:	d063      	beq.n	8003692 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d12a      	bne.n	8003628 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80035d2:	4b95      	ldr	r3, [pc, #596]	; (8003828 <HAL_RCC_OscConfig+0x67c>)
 80035d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035d6:	4b94      	ldr	r3, [pc, #592]	; (8003828 <HAL_RCC_OscConfig+0x67c>)
 80035d8:	2104      	movs	r1, #4
 80035da:	430a      	orrs	r2, r1
 80035dc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80035de:	4b92      	ldr	r3, [pc, #584]	; (8003828 <HAL_RCC_OscConfig+0x67c>)
 80035e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035e2:	4b91      	ldr	r3, [pc, #580]	; (8003828 <HAL_RCC_OscConfig+0x67c>)
 80035e4:	2101      	movs	r1, #1
 80035e6:	430a      	orrs	r2, r1
 80035e8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ea:	f7fe fd97 	bl	800211c <HAL_GetTick>
 80035ee:	0003      	movs	r3, r0
 80035f0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80035f2:	e008      	b.n	8003606 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80035f4:	f7fe fd92 	bl	800211c <HAL_GetTick>
 80035f8:	0002      	movs	r2, r0
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e152      	b.n	80038ac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003606:	4b88      	ldr	r3, [pc, #544]	; (8003828 <HAL_RCC_OscConfig+0x67c>)
 8003608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800360a:	2202      	movs	r2, #2
 800360c:	4013      	ands	r3, r2
 800360e:	d0f1      	beq.n	80035f4 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003610:	4b85      	ldr	r3, [pc, #532]	; (8003828 <HAL_RCC_OscConfig+0x67c>)
 8003612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003614:	22f8      	movs	r2, #248	; 0xf8
 8003616:	4393      	bics	r3, r2
 8003618:	0019      	movs	r1, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	00da      	lsls	r2, r3, #3
 8003620:	4b81      	ldr	r3, [pc, #516]	; (8003828 <HAL_RCC_OscConfig+0x67c>)
 8003622:	430a      	orrs	r2, r1
 8003624:	635a      	str	r2, [r3, #52]	; 0x34
 8003626:	e034      	b.n	8003692 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	695b      	ldr	r3, [r3, #20]
 800362c:	3305      	adds	r3, #5
 800362e:	d111      	bne.n	8003654 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003630:	4b7d      	ldr	r3, [pc, #500]	; (8003828 <HAL_RCC_OscConfig+0x67c>)
 8003632:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003634:	4b7c      	ldr	r3, [pc, #496]	; (8003828 <HAL_RCC_OscConfig+0x67c>)
 8003636:	2104      	movs	r1, #4
 8003638:	438a      	bics	r2, r1
 800363a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800363c:	4b7a      	ldr	r3, [pc, #488]	; (8003828 <HAL_RCC_OscConfig+0x67c>)
 800363e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003640:	22f8      	movs	r2, #248	; 0xf8
 8003642:	4393      	bics	r3, r2
 8003644:	0019      	movs	r1, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	00da      	lsls	r2, r3, #3
 800364c:	4b76      	ldr	r3, [pc, #472]	; (8003828 <HAL_RCC_OscConfig+0x67c>)
 800364e:	430a      	orrs	r2, r1
 8003650:	635a      	str	r2, [r3, #52]	; 0x34
 8003652:	e01e      	b.n	8003692 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003654:	4b74      	ldr	r3, [pc, #464]	; (8003828 <HAL_RCC_OscConfig+0x67c>)
 8003656:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003658:	4b73      	ldr	r3, [pc, #460]	; (8003828 <HAL_RCC_OscConfig+0x67c>)
 800365a:	2104      	movs	r1, #4
 800365c:	430a      	orrs	r2, r1
 800365e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003660:	4b71      	ldr	r3, [pc, #452]	; (8003828 <HAL_RCC_OscConfig+0x67c>)
 8003662:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003664:	4b70      	ldr	r3, [pc, #448]	; (8003828 <HAL_RCC_OscConfig+0x67c>)
 8003666:	2101      	movs	r1, #1
 8003668:	438a      	bics	r2, r1
 800366a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800366c:	f7fe fd56 	bl	800211c <HAL_GetTick>
 8003670:	0003      	movs	r3, r0
 8003672:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003674:	e008      	b.n	8003688 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003676:	f7fe fd51 	bl	800211c <HAL_GetTick>
 800367a:	0002      	movs	r2, r0
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	2b02      	cmp	r3, #2
 8003682:	d901      	bls.n	8003688 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e111      	b.n	80038ac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003688:	4b67      	ldr	r3, [pc, #412]	; (8003828 <HAL_RCC_OscConfig+0x67c>)
 800368a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800368c:	2202      	movs	r2, #2
 800368e:	4013      	ands	r3, r2
 8003690:	d1f1      	bne.n	8003676 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2220      	movs	r2, #32
 8003698:	4013      	ands	r3, r2
 800369a:	d05c      	beq.n	8003756 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800369c:	4b62      	ldr	r3, [pc, #392]	; (8003828 <HAL_RCC_OscConfig+0x67c>)
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	220c      	movs	r2, #12
 80036a2:	4013      	ands	r3, r2
 80036a4:	2b0c      	cmp	r3, #12
 80036a6:	d00e      	beq.n	80036c6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80036a8:	4b5f      	ldr	r3, [pc, #380]	; (8003828 <HAL_RCC_OscConfig+0x67c>)
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	220c      	movs	r2, #12
 80036ae:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80036b0:	2b08      	cmp	r3, #8
 80036b2:	d114      	bne.n	80036de <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80036b4:	4b5c      	ldr	r3, [pc, #368]	; (8003828 <HAL_RCC_OscConfig+0x67c>)
 80036b6:	685a      	ldr	r2, [r3, #4]
 80036b8:	23c0      	movs	r3, #192	; 0xc0
 80036ba:	025b      	lsls	r3, r3, #9
 80036bc:	401a      	ands	r2, r3
 80036be:	23c0      	movs	r3, #192	; 0xc0
 80036c0:	025b      	lsls	r3, r3, #9
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d10b      	bne.n	80036de <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80036c6:	4b58      	ldr	r3, [pc, #352]	; (8003828 <HAL_RCC_OscConfig+0x67c>)
 80036c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036ca:	2380      	movs	r3, #128	; 0x80
 80036cc:	029b      	lsls	r3, r3, #10
 80036ce:	4013      	ands	r3, r2
 80036d0:	d040      	beq.n	8003754 <HAL_RCC_OscConfig+0x5a8>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d03c      	beq.n	8003754 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e0e6      	b.n	80038ac <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d01b      	beq.n	800371e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80036e6:	4b50      	ldr	r3, [pc, #320]	; (8003828 <HAL_RCC_OscConfig+0x67c>)
 80036e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036ea:	4b4f      	ldr	r3, [pc, #316]	; (8003828 <HAL_RCC_OscConfig+0x67c>)
 80036ec:	2180      	movs	r1, #128	; 0x80
 80036ee:	0249      	lsls	r1, r1, #9
 80036f0:	430a      	orrs	r2, r1
 80036f2:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f4:	f7fe fd12 	bl	800211c <HAL_GetTick>
 80036f8:	0003      	movs	r3, r0
 80036fa:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80036fc:	e008      	b.n	8003710 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036fe:	f7fe fd0d 	bl	800211c <HAL_GetTick>
 8003702:	0002      	movs	r2, r0
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b02      	cmp	r3, #2
 800370a:	d901      	bls.n	8003710 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e0cd      	b.n	80038ac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003710:	4b45      	ldr	r3, [pc, #276]	; (8003828 <HAL_RCC_OscConfig+0x67c>)
 8003712:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003714:	2380      	movs	r3, #128	; 0x80
 8003716:	029b      	lsls	r3, r3, #10
 8003718:	4013      	ands	r3, r2
 800371a:	d0f0      	beq.n	80036fe <HAL_RCC_OscConfig+0x552>
 800371c:	e01b      	b.n	8003756 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800371e:	4b42      	ldr	r3, [pc, #264]	; (8003828 <HAL_RCC_OscConfig+0x67c>)
 8003720:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003722:	4b41      	ldr	r3, [pc, #260]	; (8003828 <HAL_RCC_OscConfig+0x67c>)
 8003724:	4943      	ldr	r1, [pc, #268]	; (8003834 <HAL_RCC_OscConfig+0x688>)
 8003726:	400a      	ands	r2, r1
 8003728:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800372a:	f7fe fcf7 	bl	800211c <HAL_GetTick>
 800372e:	0003      	movs	r3, r0
 8003730:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003732:	e008      	b.n	8003746 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003734:	f7fe fcf2 	bl	800211c <HAL_GetTick>
 8003738:	0002      	movs	r2, r0
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e0b2      	b.n	80038ac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003746:	4b38      	ldr	r3, [pc, #224]	; (8003828 <HAL_RCC_OscConfig+0x67c>)
 8003748:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800374a:	2380      	movs	r3, #128	; 0x80
 800374c:	029b      	lsls	r3, r3, #10
 800374e:	4013      	ands	r3, r2
 8003750:	d1f0      	bne.n	8003734 <HAL_RCC_OscConfig+0x588>
 8003752:	e000      	b.n	8003756 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003754:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375a:	2b00      	cmp	r3, #0
 800375c:	d100      	bne.n	8003760 <HAL_RCC_OscConfig+0x5b4>
 800375e:	e0a4      	b.n	80038aa <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003760:	4b31      	ldr	r3, [pc, #196]	; (8003828 <HAL_RCC_OscConfig+0x67c>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	220c      	movs	r2, #12
 8003766:	4013      	ands	r3, r2
 8003768:	2b08      	cmp	r3, #8
 800376a:	d100      	bne.n	800376e <HAL_RCC_OscConfig+0x5c2>
 800376c:	e078      	b.n	8003860 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003772:	2b02      	cmp	r3, #2
 8003774:	d14c      	bne.n	8003810 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003776:	4b2c      	ldr	r3, [pc, #176]	; (8003828 <HAL_RCC_OscConfig+0x67c>)
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	4b2b      	ldr	r3, [pc, #172]	; (8003828 <HAL_RCC_OscConfig+0x67c>)
 800377c:	492e      	ldr	r1, [pc, #184]	; (8003838 <HAL_RCC_OscConfig+0x68c>)
 800377e:	400a      	ands	r2, r1
 8003780:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003782:	f7fe fccb 	bl	800211c <HAL_GetTick>
 8003786:	0003      	movs	r3, r0
 8003788:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800378c:	f7fe fcc6 	bl	800211c <HAL_GetTick>
 8003790:	0002      	movs	r2, r0
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e086      	b.n	80038ac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800379e:	4b22      	ldr	r3, [pc, #136]	; (8003828 <HAL_RCC_OscConfig+0x67c>)
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	2380      	movs	r3, #128	; 0x80
 80037a4:	049b      	lsls	r3, r3, #18
 80037a6:	4013      	ands	r3, r2
 80037a8:	d1f0      	bne.n	800378c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037aa:	4b1f      	ldr	r3, [pc, #124]	; (8003828 <HAL_RCC_OscConfig+0x67c>)
 80037ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ae:	220f      	movs	r2, #15
 80037b0:	4393      	bics	r3, r2
 80037b2:	0019      	movs	r1, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037b8:	4b1b      	ldr	r3, [pc, #108]	; (8003828 <HAL_RCC_OscConfig+0x67c>)
 80037ba:	430a      	orrs	r2, r1
 80037bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80037be:	4b1a      	ldr	r3, [pc, #104]	; (8003828 <HAL_RCC_OscConfig+0x67c>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	4a1e      	ldr	r2, [pc, #120]	; (800383c <HAL_RCC_OscConfig+0x690>)
 80037c4:	4013      	ands	r3, r2
 80037c6:	0019      	movs	r1, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d0:	431a      	orrs	r2, r3
 80037d2:	4b15      	ldr	r3, [pc, #84]	; (8003828 <HAL_RCC_OscConfig+0x67c>)
 80037d4:	430a      	orrs	r2, r1
 80037d6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037d8:	4b13      	ldr	r3, [pc, #76]	; (8003828 <HAL_RCC_OscConfig+0x67c>)
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	4b12      	ldr	r3, [pc, #72]	; (8003828 <HAL_RCC_OscConfig+0x67c>)
 80037de:	2180      	movs	r1, #128	; 0x80
 80037e0:	0449      	lsls	r1, r1, #17
 80037e2:	430a      	orrs	r2, r1
 80037e4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e6:	f7fe fc99 	bl	800211c <HAL_GetTick>
 80037ea:	0003      	movs	r3, r0
 80037ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037ee:	e008      	b.n	8003802 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037f0:	f7fe fc94 	bl	800211c <HAL_GetTick>
 80037f4:	0002      	movs	r2, r0
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e054      	b.n	80038ac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003802:	4b09      	ldr	r3, [pc, #36]	; (8003828 <HAL_RCC_OscConfig+0x67c>)
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	2380      	movs	r3, #128	; 0x80
 8003808:	049b      	lsls	r3, r3, #18
 800380a:	4013      	ands	r3, r2
 800380c:	d0f0      	beq.n	80037f0 <HAL_RCC_OscConfig+0x644>
 800380e:	e04c      	b.n	80038aa <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003810:	4b05      	ldr	r3, [pc, #20]	; (8003828 <HAL_RCC_OscConfig+0x67c>)
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	4b04      	ldr	r3, [pc, #16]	; (8003828 <HAL_RCC_OscConfig+0x67c>)
 8003816:	4908      	ldr	r1, [pc, #32]	; (8003838 <HAL_RCC_OscConfig+0x68c>)
 8003818:	400a      	ands	r2, r1
 800381a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800381c:	f7fe fc7e 	bl	800211c <HAL_GetTick>
 8003820:	0003      	movs	r3, r0
 8003822:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003824:	e015      	b.n	8003852 <HAL_RCC_OscConfig+0x6a6>
 8003826:	46c0      	nop			; (mov r8, r8)
 8003828:	40021000 	.word	0x40021000
 800382c:	00001388 	.word	0x00001388
 8003830:	efffffff 	.word	0xefffffff
 8003834:	fffeffff 	.word	0xfffeffff
 8003838:	feffffff 	.word	0xfeffffff
 800383c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003840:	f7fe fc6c 	bl	800211c <HAL_GetTick>
 8003844:	0002      	movs	r2, r0
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e02c      	b.n	80038ac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003852:	4b18      	ldr	r3, [pc, #96]	; (80038b4 <HAL_RCC_OscConfig+0x708>)
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	2380      	movs	r3, #128	; 0x80
 8003858:	049b      	lsls	r3, r3, #18
 800385a:	4013      	ands	r3, r2
 800385c:	d1f0      	bne.n	8003840 <HAL_RCC_OscConfig+0x694>
 800385e:	e024      	b.n	80038aa <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003864:	2b01      	cmp	r3, #1
 8003866:	d101      	bne.n	800386c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e01f      	b.n	80038ac <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800386c:	4b11      	ldr	r3, [pc, #68]	; (80038b4 <HAL_RCC_OscConfig+0x708>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003872:	4b10      	ldr	r3, [pc, #64]	; (80038b4 <HAL_RCC_OscConfig+0x708>)
 8003874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003876:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	23c0      	movs	r3, #192	; 0xc0
 800387c:	025b      	lsls	r3, r3, #9
 800387e:	401a      	ands	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003884:	429a      	cmp	r2, r3
 8003886:	d10e      	bne.n	80038a6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	220f      	movs	r2, #15
 800388c:	401a      	ands	r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003892:	429a      	cmp	r2, r3
 8003894:	d107      	bne.n	80038a6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	23f0      	movs	r3, #240	; 0xf0
 800389a:	039b      	lsls	r3, r3, #14
 800389c:	401a      	ands	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d001      	beq.n	80038aa <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e000      	b.n	80038ac <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	0018      	movs	r0, r3
 80038ae:	46bd      	mov	sp, r7
 80038b0:	b008      	add	sp, #32
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	40021000 	.word	0x40021000

080038b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d101      	bne.n	80038cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e0bf      	b.n	8003a4c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038cc:	4b61      	ldr	r3, [pc, #388]	; (8003a54 <HAL_RCC_ClockConfig+0x19c>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2201      	movs	r2, #1
 80038d2:	4013      	ands	r3, r2
 80038d4:	683a      	ldr	r2, [r7, #0]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d911      	bls.n	80038fe <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038da:	4b5e      	ldr	r3, [pc, #376]	; (8003a54 <HAL_RCC_ClockConfig+0x19c>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2201      	movs	r2, #1
 80038e0:	4393      	bics	r3, r2
 80038e2:	0019      	movs	r1, r3
 80038e4:	4b5b      	ldr	r3, [pc, #364]	; (8003a54 <HAL_RCC_ClockConfig+0x19c>)
 80038e6:	683a      	ldr	r2, [r7, #0]
 80038e8:	430a      	orrs	r2, r1
 80038ea:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ec:	4b59      	ldr	r3, [pc, #356]	; (8003a54 <HAL_RCC_ClockConfig+0x19c>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2201      	movs	r2, #1
 80038f2:	4013      	ands	r3, r2
 80038f4:	683a      	ldr	r2, [r7, #0]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d001      	beq.n	80038fe <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e0a6      	b.n	8003a4c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2202      	movs	r2, #2
 8003904:	4013      	ands	r3, r2
 8003906:	d015      	beq.n	8003934 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2204      	movs	r2, #4
 800390e:	4013      	ands	r3, r2
 8003910:	d006      	beq.n	8003920 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003912:	4b51      	ldr	r3, [pc, #324]	; (8003a58 <HAL_RCC_ClockConfig+0x1a0>)
 8003914:	685a      	ldr	r2, [r3, #4]
 8003916:	4b50      	ldr	r3, [pc, #320]	; (8003a58 <HAL_RCC_ClockConfig+0x1a0>)
 8003918:	21e0      	movs	r1, #224	; 0xe0
 800391a:	00c9      	lsls	r1, r1, #3
 800391c:	430a      	orrs	r2, r1
 800391e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003920:	4b4d      	ldr	r3, [pc, #308]	; (8003a58 <HAL_RCC_ClockConfig+0x1a0>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	22f0      	movs	r2, #240	; 0xf0
 8003926:	4393      	bics	r3, r2
 8003928:	0019      	movs	r1, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	689a      	ldr	r2, [r3, #8]
 800392e:	4b4a      	ldr	r3, [pc, #296]	; (8003a58 <HAL_RCC_ClockConfig+0x1a0>)
 8003930:	430a      	orrs	r2, r1
 8003932:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2201      	movs	r2, #1
 800393a:	4013      	ands	r3, r2
 800393c:	d04c      	beq.n	80039d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	2b01      	cmp	r3, #1
 8003944:	d107      	bne.n	8003956 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003946:	4b44      	ldr	r3, [pc, #272]	; (8003a58 <HAL_RCC_ClockConfig+0x1a0>)
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	2380      	movs	r3, #128	; 0x80
 800394c:	029b      	lsls	r3, r3, #10
 800394e:	4013      	ands	r3, r2
 8003950:	d120      	bne.n	8003994 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e07a      	b.n	8003a4c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	2b02      	cmp	r3, #2
 800395c:	d107      	bne.n	800396e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800395e:	4b3e      	ldr	r3, [pc, #248]	; (8003a58 <HAL_RCC_ClockConfig+0x1a0>)
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	2380      	movs	r3, #128	; 0x80
 8003964:	049b      	lsls	r3, r3, #18
 8003966:	4013      	ands	r3, r2
 8003968:	d114      	bne.n	8003994 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e06e      	b.n	8003a4c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	2b03      	cmp	r3, #3
 8003974:	d107      	bne.n	8003986 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003976:	4b38      	ldr	r3, [pc, #224]	; (8003a58 <HAL_RCC_ClockConfig+0x1a0>)
 8003978:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800397a:	2380      	movs	r3, #128	; 0x80
 800397c:	029b      	lsls	r3, r3, #10
 800397e:	4013      	ands	r3, r2
 8003980:	d108      	bne.n	8003994 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e062      	b.n	8003a4c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003986:	4b34      	ldr	r3, [pc, #208]	; (8003a58 <HAL_RCC_ClockConfig+0x1a0>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2202      	movs	r2, #2
 800398c:	4013      	ands	r3, r2
 800398e:	d101      	bne.n	8003994 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e05b      	b.n	8003a4c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003994:	4b30      	ldr	r3, [pc, #192]	; (8003a58 <HAL_RCC_ClockConfig+0x1a0>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	2203      	movs	r2, #3
 800399a:	4393      	bics	r3, r2
 800399c:	0019      	movs	r1, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685a      	ldr	r2, [r3, #4]
 80039a2:	4b2d      	ldr	r3, [pc, #180]	; (8003a58 <HAL_RCC_ClockConfig+0x1a0>)
 80039a4:	430a      	orrs	r2, r1
 80039a6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039a8:	f7fe fbb8 	bl	800211c <HAL_GetTick>
 80039ac:	0003      	movs	r3, r0
 80039ae:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039b0:	e009      	b.n	80039c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039b2:	f7fe fbb3 	bl	800211c <HAL_GetTick>
 80039b6:	0002      	movs	r2, r0
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	4a27      	ldr	r2, [pc, #156]	; (8003a5c <HAL_RCC_ClockConfig+0x1a4>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e042      	b.n	8003a4c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039c6:	4b24      	ldr	r3, [pc, #144]	; (8003a58 <HAL_RCC_ClockConfig+0x1a0>)
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	220c      	movs	r2, #12
 80039cc:	401a      	ands	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d1ec      	bne.n	80039b2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039d8:	4b1e      	ldr	r3, [pc, #120]	; (8003a54 <HAL_RCC_ClockConfig+0x19c>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2201      	movs	r2, #1
 80039de:	4013      	ands	r3, r2
 80039e0:	683a      	ldr	r2, [r7, #0]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d211      	bcs.n	8003a0a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039e6:	4b1b      	ldr	r3, [pc, #108]	; (8003a54 <HAL_RCC_ClockConfig+0x19c>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2201      	movs	r2, #1
 80039ec:	4393      	bics	r3, r2
 80039ee:	0019      	movs	r1, r3
 80039f0:	4b18      	ldr	r3, [pc, #96]	; (8003a54 <HAL_RCC_ClockConfig+0x19c>)
 80039f2:	683a      	ldr	r2, [r7, #0]
 80039f4:	430a      	orrs	r2, r1
 80039f6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039f8:	4b16      	ldr	r3, [pc, #88]	; (8003a54 <HAL_RCC_ClockConfig+0x19c>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2201      	movs	r2, #1
 80039fe:	4013      	ands	r3, r2
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d001      	beq.n	8003a0a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e020      	b.n	8003a4c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2204      	movs	r2, #4
 8003a10:	4013      	ands	r3, r2
 8003a12:	d009      	beq.n	8003a28 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003a14:	4b10      	ldr	r3, [pc, #64]	; (8003a58 <HAL_RCC_ClockConfig+0x1a0>)
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	4a11      	ldr	r2, [pc, #68]	; (8003a60 <HAL_RCC_ClockConfig+0x1a8>)
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	0019      	movs	r1, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	68da      	ldr	r2, [r3, #12]
 8003a22:	4b0d      	ldr	r3, [pc, #52]	; (8003a58 <HAL_RCC_ClockConfig+0x1a0>)
 8003a24:	430a      	orrs	r2, r1
 8003a26:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003a28:	f000 f820 	bl	8003a6c <HAL_RCC_GetSysClockFreq>
 8003a2c:	0001      	movs	r1, r0
 8003a2e:	4b0a      	ldr	r3, [pc, #40]	; (8003a58 <HAL_RCC_ClockConfig+0x1a0>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	091b      	lsrs	r3, r3, #4
 8003a34:	220f      	movs	r2, #15
 8003a36:	4013      	ands	r3, r2
 8003a38:	4a0a      	ldr	r2, [pc, #40]	; (8003a64 <HAL_RCC_ClockConfig+0x1ac>)
 8003a3a:	5cd3      	ldrb	r3, [r2, r3]
 8003a3c:	000a      	movs	r2, r1
 8003a3e:	40da      	lsrs	r2, r3
 8003a40:	4b09      	ldr	r3, [pc, #36]	; (8003a68 <HAL_RCC_ClockConfig+0x1b0>)
 8003a42:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003a44:	2000      	movs	r0, #0
 8003a46:	f7fe fb23 	bl	8002090 <HAL_InitTick>
  
  return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	0018      	movs	r0, r3
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	b004      	add	sp, #16
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	40022000 	.word	0x40022000
 8003a58:	40021000 	.word	0x40021000
 8003a5c:	00001388 	.word	0x00001388
 8003a60:	fffff8ff 	.word	0xfffff8ff
 8003a64:	08006324 	.word	0x08006324
 8003a68:	20000000 	.word	0x20000000

08003a6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b086      	sub	sp, #24
 8003a70:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a72:	2300      	movs	r3, #0
 8003a74:	60fb      	str	r3, [r7, #12]
 8003a76:	2300      	movs	r3, #0
 8003a78:	60bb      	str	r3, [r7, #8]
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	617b      	str	r3, [r7, #20]
 8003a7e:	2300      	movs	r3, #0
 8003a80:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003a82:	2300      	movs	r3, #0
 8003a84:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003a86:	4b2d      	ldr	r3, [pc, #180]	; (8003b3c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	220c      	movs	r2, #12
 8003a90:	4013      	ands	r3, r2
 8003a92:	2b0c      	cmp	r3, #12
 8003a94:	d046      	beq.n	8003b24 <HAL_RCC_GetSysClockFreq+0xb8>
 8003a96:	d848      	bhi.n	8003b2a <HAL_RCC_GetSysClockFreq+0xbe>
 8003a98:	2b04      	cmp	r3, #4
 8003a9a:	d002      	beq.n	8003aa2 <HAL_RCC_GetSysClockFreq+0x36>
 8003a9c:	2b08      	cmp	r3, #8
 8003a9e:	d003      	beq.n	8003aa8 <HAL_RCC_GetSysClockFreq+0x3c>
 8003aa0:	e043      	b.n	8003b2a <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003aa2:	4b27      	ldr	r3, [pc, #156]	; (8003b40 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003aa4:	613b      	str	r3, [r7, #16]
      break;
 8003aa6:	e043      	b.n	8003b30 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	0c9b      	lsrs	r3, r3, #18
 8003aac:	220f      	movs	r2, #15
 8003aae:	4013      	ands	r3, r2
 8003ab0:	4a24      	ldr	r2, [pc, #144]	; (8003b44 <HAL_RCC_GetSysClockFreq+0xd8>)
 8003ab2:	5cd3      	ldrb	r3, [r2, r3]
 8003ab4:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003ab6:	4b21      	ldr	r3, [pc, #132]	; (8003b3c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aba:	220f      	movs	r2, #15
 8003abc:	4013      	ands	r3, r2
 8003abe:	4a22      	ldr	r2, [pc, #136]	; (8003b48 <HAL_RCC_GetSysClockFreq+0xdc>)
 8003ac0:	5cd3      	ldrb	r3, [r2, r3]
 8003ac2:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	23c0      	movs	r3, #192	; 0xc0
 8003ac8:	025b      	lsls	r3, r3, #9
 8003aca:	401a      	ands	r2, r3
 8003acc:	2380      	movs	r3, #128	; 0x80
 8003ace:	025b      	lsls	r3, r3, #9
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d109      	bne.n	8003ae8 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003ad4:	68b9      	ldr	r1, [r7, #8]
 8003ad6:	481a      	ldr	r0, [pc, #104]	; (8003b40 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003ad8:	f7fc fb16 	bl	8000108 <__udivsi3>
 8003adc:	0003      	movs	r3, r0
 8003ade:	001a      	movs	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4353      	muls	r3, r2
 8003ae4:	617b      	str	r3, [r7, #20]
 8003ae6:	e01a      	b.n	8003b1e <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003ae8:	68fa      	ldr	r2, [r7, #12]
 8003aea:	23c0      	movs	r3, #192	; 0xc0
 8003aec:	025b      	lsls	r3, r3, #9
 8003aee:	401a      	ands	r2, r3
 8003af0:	23c0      	movs	r3, #192	; 0xc0
 8003af2:	025b      	lsls	r3, r3, #9
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d109      	bne.n	8003b0c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003af8:	68b9      	ldr	r1, [r7, #8]
 8003afa:	4814      	ldr	r0, [pc, #80]	; (8003b4c <HAL_RCC_GetSysClockFreq+0xe0>)
 8003afc:	f7fc fb04 	bl	8000108 <__udivsi3>
 8003b00:	0003      	movs	r3, r0
 8003b02:	001a      	movs	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4353      	muls	r3, r2
 8003b08:	617b      	str	r3, [r7, #20]
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003b0c:	68b9      	ldr	r1, [r7, #8]
 8003b0e:	480c      	ldr	r0, [pc, #48]	; (8003b40 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003b10:	f7fc fafa 	bl	8000108 <__udivsi3>
 8003b14:	0003      	movs	r3, r0
 8003b16:	001a      	movs	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4353      	muls	r3, r2
 8003b1c:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	613b      	str	r3, [r7, #16]
      break;
 8003b22:	e005      	b.n	8003b30 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003b24:	4b09      	ldr	r3, [pc, #36]	; (8003b4c <HAL_RCC_GetSysClockFreq+0xe0>)
 8003b26:	613b      	str	r3, [r7, #16]
      break;
 8003b28:	e002      	b.n	8003b30 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b2a:	4b05      	ldr	r3, [pc, #20]	; (8003b40 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003b2c:	613b      	str	r3, [r7, #16]
      break;
 8003b2e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003b30:	693b      	ldr	r3, [r7, #16]
}
 8003b32:	0018      	movs	r0, r3
 8003b34:	46bd      	mov	sp, r7
 8003b36:	b006      	add	sp, #24
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	46c0      	nop			; (mov r8, r8)
 8003b3c:	40021000 	.word	0x40021000
 8003b40:	007a1200 	.word	0x007a1200
 8003b44:	0800633c 	.word	0x0800633c
 8003b48:	0800634c 	.word	0x0800634c
 8003b4c:	02dc6c00 	.word	0x02dc6c00

08003b50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b54:	4b02      	ldr	r3, [pc, #8]	; (8003b60 <HAL_RCC_GetHCLKFreq+0x10>)
 8003b56:	681b      	ldr	r3, [r3, #0]
}
 8003b58:	0018      	movs	r0, r3
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	46c0      	nop			; (mov r8, r8)
 8003b60:	20000000 	.word	0x20000000

08003b64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003b68:	f7ff fff2 	bl	8003b50 <HAL_RCC_GetHCLKFreq>
 8003b6c:	0001      	movs	r1, r0
 8003b6e:	4b06      	ldr	r3, [pc, #24]	; (8003b88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	0a1b      	lsrs	r3, r3, #8
 8003b74:	2207      	movs	r2, #7
 8003b76:	4013      	ands	r3, r2
 8003b78:	4a04      	ldr	r2, [pc, #16]	; (8003b8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b7a:	5cd3      	ldrb	r3, [r2, r3]
 8003b7c:	40d9      	lsrs	r1, r3
 8003b7e:	000b      	movs	r3, r1
}    
 8003b80:	0018      	movs	r0, r3
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	46c0      	nop			; (mov r8, r8)
 8003b88:	40021000 	.word	0x40021000
 8003b8c:	08006334 	.word	0x08006334

08003b90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	2380      	movs	r3, #128	; 0x80
 8003ba6:	025b      	lsls	r3, r3, #9
 8003ba8:	4013      	ands	r3, r2
 8003baa:	d100      	bne.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003bac:	e08e      	b.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003bae:	2017      	movs	r0, #23
 8003bb0:	183b      	adds	r3, r7, r0
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bb6:	4b67      	ldr	r3, [pc, #412]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003bb8:	69da      	ldr	r2, [r3, #28]
 8003bba:	2380      	movs	r3, #128	; 0x80
 8003bbc:	055b      	lsls	r3, r3, #21
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	d110      	bne.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bc2:	4b64      	ldr	r3, [pc, #400]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003bc4:	69da      	ldr	r2, [r3, #28]
 8003bc6:	4b63      	ldr	r3, [pc, #396]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003bc8:	2180      	movs	r1, #128	; 0x80
 8003bca:	0549      	lsls	r1, r1, #21
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	61da      	str	r2, [r3, #28]
 8003bd0:	4b60      	ldr	r3, [pc, #384]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003bd2:	69da      	ldr	r2, [r3, #28]
 8003bd4:	2380      	movs	r3, #128	; 0x80
 8003bd6:	055b      	lsls	r3, r3, #21
 8003bd8:	4013      	ands	r3, r2
 8003bda:	60bb      	str	r3, [r7, #8]
 8003bdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bde:	183b      	adds	r3, r7, r0
 8003be0:	2201      	movs	r2, #1
 8003be2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be4:	4b5c      	ldr	r3, [pc, #368]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	2380      	movs	r3, #128	; 0x80
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	4013      	ands	r3, r2
 8003bee:	d11a      	bne.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bf0:	4b59      	ldr	r3, [pc, #356]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	4b58      	ldr	r3, [pc, #352]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003bf6:	2180      	movs	r1, #128	; 0x80
 8003bf8:	0049      	lsls	r1, r1, #1
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bfe:	f7fe fa8d 	bl	800211c <HAL_GetTick>
 8003c02:	0003      	movs	r3, r0
 8003c04:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c06:	e008      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c08:	f7fe fa88 	bl	800211c <HAL_GetTick>
 8003c0c:	0002      	movs	r2, r0
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b64      	cmp	r3, #100	; 0x64
 8003c14:	d901      	bls.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e097      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c1a:	4b4f      	ldr	r3, [pc, #316]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	2380      	movs	r3, #128	; 0x80
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	4013      	ands	r3, r2
 8003c24:	d0f0      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c26:	4b4b      	ldr	r3, [pc, #300]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003c28:	6a1a      	ldr	r2, [r3, #32]
 8003c2a:	23c0      	movs	r3, #192	; 0xc0
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	4013      	ands	r3, r2
 8003c30:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d034      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685a      	ldr	r2, [r3, #4]
 8003c3c:	23c0      	movs	r3, #192	; 0xc0
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	4013      	ands	r3, r2
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d02c      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c48:	4b42      	ldr	r3, [pc, #264]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003c4a:	6a1b      	ldr	r3, [r3, #32]
 8003c4c:	4a43      	ldr	r2, [pc, #268]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003c4e:	4013      	ands	r3, r2
 8003c50:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c52:	4b40      	ldr	r3, [pc, #256]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003c54:	6a1a      	ldr	r2, [r3, #32]
 8003c56:	4b3f      	ldr	r3, [pc, #252]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003c58:	2180      	movs	r1, #128	; 0x80
 8003c5a:	0249      	lsls	r1, r1, #9
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c60:	4b3c      	ldr	r3, [pc, #240]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003c62:	6a1a      	ldr	r2, [r3, #32]
 8003c64:	4b3b      	ldr	r3, [pc, #236]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003c66:	493e      	ldr	r1, [pc, #248]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c68:	400a      	ands	r2, r1
 8003c6a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c6c:	4b39      	ldr	r3, [pc, #228]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2201      	movs	r2, #1
 8003c76:	4013      	ands	r3, r2
 8003c78:	d013      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c7a:	f7fe fa4f 	bl	800211c <HAL_GetTick>
 8003c7e:	0003      	movs	r3, r0
 8003c80:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c82:	e009      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c84:	f7fe fa4a 	bl	800211c <HAL_GetTick>
 8003c88:	0002      	movs	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	4a35      	ldr	r2, [pc, #212]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d901      	bls.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e058      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c98:	4b2e      	ldr	r3, [pc, #184]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003c9a:	6a1b      	ldr	r3, [r3, #32]
 8003c9c:	2202      	movs	r2, #2
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	d0f0      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ca2:	4b2c      	ldr	r3, [pc, #176]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	4a2d      	ldr	r2, [pc, #180]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003ca8:	4013      	ands	r3, r2
 8003caa:	0019      	movs	r1, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685a      	ldr	r2, [r3, #4]
 8003cb0:	4b28      	ldr	r3, [pc, #160]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003cb6:	2317      	movs	r3, #23
 8003cb8:	18fb      	adds	r3, r7, r3
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d105      	bne.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cc0:	4b24      	ldr	r3, [pc, #144]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003cc2:	69da      	ldr	r2, [r3, #28]
 8003cc4:	4b23      	ldr	r3, [pc, #140]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003cc6:	4928      	ldr	r1, [pc, #160]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003cc8:	400a      	ands	r2, r1
 8003cca:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	d009      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cd6:	4b1f      	ldr	r3, [pc, #124]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cda:	2203      	movs	r2, #3
 8003cdc:	4393      	bics	r3, r2
 8003cde:	0019      	movs	r1, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689a      	ldr	r2, [r3, #8]
 8003ce4:	4b1b      	ldr	r3, [pc, #108]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	d009      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cf4:	4b17      	ldr	r3, [pc, #92]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf8:	2210      	movs	r2, #16
 8003cfa:	4393      	bics	r3, r2
 8003cfc:	0019      	movs	r1, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	68da      	ldr	r2, [r3, #12]
 8003d02:	4b14      	ldr	r3, [pc, #80]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003d04:	430a      	orrs	r2, r1
 8003d06:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	2380      	movs	r3, #128	; 0x80
 8003d0e:	029b      	lsls	r3, r3, #10
 8003d10:	4013      	ands	r3, r2
 8003d12:	d009      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d14:	4b0f      	ldr	r3, [pc, #60]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d18:	2280      	movs	r2, #128	; 0x80
 8003d1a:	4393      	bics	r3, r2
 8003d1c:	0019      	movs	r1, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	695a      	ldr	r2, [r3, #20]
 8003d22:	4b0c      	ldr	r3, [pc, #48]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003d24:	430a      	orrs	r2, r1
 8003d26:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	2380      	movs	r3, #128	; 0x80
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	4013      	ands	r3, r2
 8003d32:	d009      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003d34:	4b07      	ldr	r3, [pc, #28]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d38:	2240      	movs	r2, #64	; 0x40
 8003d3a:	4393      	bics	r3, r2
 8003d3c:	0019      	movs	r1, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	691a      	ldr	r2, [r3, #16]
 8003d42:	4b04      	ldr	r3, [pc, #16]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003d44:	430a      	orrs	r2, r1
 8003d46:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	0018      	movs	r0, r3
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	b006      	add	sp, #24
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	46c0      	nop			; (mov r8, r8)
 8003d54:	40021000 	.word	0x40021000
 8003d58:	40007000 	.word	0x40007000
 8003d5c:	fffffcff 	.word	0xfffffcff
 8003d60:	fffeffff 	.word	0xfffeffff
 8003d64:	00001388 	.word	0x00001388
 8003d68:	efffffff 	.word	0xefffffff

08003d6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d101      	bne.n	8003d7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e042      	b.n	8003e04 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	223d      	movs	r2, #61	; 0x3d
 8003d82:	5c9b      	ldrb	r3, [r3, r2]
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d107      	bne.n	8003d9a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	223c      	movs	r2, #60	; 0x3c
 8003d8e:	2100      	movs	r1, #0
 8003d90:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	0018      	movs	r0, r3
 8003d96:	f7fd ffc5 	bl	8001d24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	223d      	movs	r2, #61	; 0x3d
 8003d9e:	2102      	movs	r1, #2
 8003da0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	3304      	adds	r3, #4
 8003daa:	0019      	movs	r1, r3
 8003dac:	0010      	movs	r0, r2
 8003dae:	f000 fcb5 	bl	800471c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2246      	movs	r2, #70	; 0x46
 8003db6:	2101      	movs	r1, #1
 8003db8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	223e      	movs	r2, #62	; 0x3e
 8003dbe:	2101      	movs	r1, #1
 8003dc0:	5499      	strb	r1, [r3, r2]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	223f      	movs	r2, #63	; 0x3f
 8003dc6:	2101      	movs	r1, #1
 8003dc8:	5499      	strb	r1, [r3, r2]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2240      	movs	r2, #64	; 0x40
 8003dce:	2101      	movs	r1, #1
 8003dd0:	5499      	strb	r1, [r3, r2]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2241      	movs	r2, #65	; 0x41
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2242      	movs	r2, #66	; 0x42
 8003dde:	2101      	movs	r1, #1
 8003de0:	5499      	strb	r1, [r3, r2]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2243      	movs	r2, #67	; 0x43
 8003de6:	2101      	movs	r1, #1
 8003de8:	5499      	strb	r1, [r3, r2]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2244      	movs	r2, #68	; 0x44
 8003dee:	2101      	movs	r1, #1
 8003df0:	5499      	strb	r1, [r3, r2]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2245      	movs	r2, #69	; 0x45
 8003df6:	2101      	movs	r1, #1
 8003df8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	223d      	movs	r2, #61	; 0x3d
 8003dfe:	2101      	movs	r1, #1
 8003e00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	0018      	movs	r0, r3
 8003e06:	46bd      	mov	sp, r7
 8003e08:	b002      	add	sp, #8
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e042      	b.n	8003ea4 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	223d      	movs	r2, #61	; 0x3d
 8003e22:	5c9b      	ldrb	r3, [r3, r2]
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d107      	bne.n	8003e3a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	223c      	movs	r2, #60	; 0x3c
 8003e2e:	2100      	movs	r1, #0
 8003e30:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	0018      	movs	r0, r3
 8003e36:	f000 f839 	bl	8003eac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	223d      	movs	r2, #61	; 0x3d
 8003e3e:	2102      	movs	r1, #2
 8003e40:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	3304      	adds	r3, #4
 8003e4a:	0019      	movs	r1, r3
 8003e4c:	0010      	movs	r0, r2
 8003e4e:	f000 fc65 	bl	800471c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2246      	movs	r2, #70	; 0x46
 8003e56:	2101      	movs	r1, #1
 8003e58:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	223e      	movs	r2, #62	; 0x3e
 8003e5e:	2101      	movs	r1, #1
 8003e60:	5499      	strb	r1, [r3, r2]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	223f      	movs	r2, #63	; 0x3f
 8003e66:	2101      	movs	r1, #1
 8003e68:	5499      	strb	r1, [r3, r2]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2240      	movs	r2, #64	; 0x40
 8003e6e:	2101      	movs	r1, #1
 8003e70:	5499      	strb	r1, [r3, r2]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2241      	movs	r2, #65	; 0x41
 8003e76:	2101      	movs	r1, #1
 8003e78:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2242      	movs	r2, #66	; 0x42
 8003e7e:	2101      	movs	r1, #1
 8003e80:	5499      	strb	r1, [r3, r2]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2243      	movs	r2, #67	; 0x43
 8003e86:	2101      	movs	r1, #1
 8003e88:	5499      	strb	r1, [r3, r2]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2244      	movs	r2, #68	; 0x44
 8003e8e:	2101      	movs	r1, #1
 8003e90:	5499      	strb	r1, [r3, r2]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2245      	movs	r2, #69	; 0x45
 8003e96:	2101      	movs	r1, #1
 8003e98:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	223d      	movs	r2, #61	; 0x3d
 8003e9e:	2101      	movs	r1, #1
 8003ea0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	0018      	movs	r0, r3
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	b002      	add	sp, #8
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003eb4:	46c0      	nop			; (mov r8, r8)
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	b002      	add	sp, #8
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b086      	sub	sp, #24
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
 8003ec8:	001a      	movs	r2, r3
 8003eca:	1cbb      	adds	r3, r7, #2
 8003ecc:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ece:	2317      	movs	r3, #23
 8003ed0:	18fb      	adds	r3, r7, r3
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d108      	bne.n	8003eee <HAL_TIM_PWM_Start_DMA+0x32>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	223e      	movs	r2, #62	; 0x3e
 8003ee0:	5c9b      	ldrb	r3, [r3, r2]
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	3b02      	subs	r3, #2
 8003ee6:	425a      	negs	r2, r3
 8003ee8:	4153      	adcs	r3, r2
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	e01f      	b.n	8003f2e <HAL_TIM_PWM_Start_DMA+0x72>
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	2b04      	cmp	r3, #4
 8003ef2:	d108      	bne.n	8003f06 <HAL_TIM_PWM_Start_DMA+0x4a>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	223f      	movs	r2, #63	; 0x3f
 8003ef8:	5c9b      	ldrb	r3, [r3, r2]
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	3b02      	subs	r3, #2
 8003efe:	425a      	negs	r2, r3
 8003f00:	4153      	adcs	r3, r2
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	e013      	b.n	8003f2e <HAL_TIM_PWM_Start_DMA+0x72>
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	2b08      	cmp	r3, #8
 8003f0a:	d108      	bne.n	8003f1e <HAL_TIM_PWM_Start_DMA+0x62>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2240      	movs	r2, #64	; 0x40
 8003f10:	5c9b      	ldrb	r3, [r3, r2]
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	3b02      	subs	r3, #2
 8003f16:	425a      	negs	r2, r3
 8003f18:	4153      	adcs	r3, r2
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	e007      	b.n	8003f2e <HAL_TIM_PWM_Start_DMA+0x72>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2241      	movs	r2, #65	; 0x41
 8003f22:	5c9b      	ldrb	r3, [r3, r2]
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	3b02      	subs	r3, #2
 8003f28:	425a      	negs	r2, r3
 8003f2a:	4153      	adcs	r3, r2
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d001      	beq.n	8003f36 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8003f32:	2302      	movs	r3, #2
 8003f34:	e15a      	b.n	80041ec <HAL_TIM_PWM_Start_DMA+0x330>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d108      	bne.n	8003f4e <HAL_TIM_PWM_Start_DMA+0x92>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	223e      	movs	r2, #62	; 0x3e
 8003f40:	5c9b      	ldrb	r3, [r3, r2]
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	3b01      	subs	r3, #1
 8003f46:	425a      	negs	r2, r3
 8003f48:	4153      	adcs	r3, r2
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	e01f      	b.n	8003f8e <HAL_TIM_PWM_Start_DMA+0xd2>
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	2b04      	cmp	r3, #4
 8003f52:	d108      	bne.n	8003f66 <HAL_TIM_PWM_Start_DMA+0xaa>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	223f      	movs	r2, #63	; 0x3f
 8003f58:	5c9b      	ldrb	r3, [r3, r2]
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	425a      	negs	r2, r3
 8003f60:	4153      	adcs	r3, r2
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	e013      	b.n	8003f8e <HAL_TIM_PWM_Start_DMA+0xd2>
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	2b08      	cmp	r3, #8
 8003f6a:	d108      	bne.n	8003f7e <HAL_TIM_PWM_Start_DMA+0xc2>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2240      	movs	r2, #64	; 0x40
 8003f70:	5c9b      	ldrb	r3, [r3, r2]
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	3b01      	subs	r3, #1
 8003f76:	425a      	negs	r2, r3
 8003f78:	4153      	adcs	r3, r2
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	e007      	b.n	8003f8e <HAL_TIM_PWM_Start_DMA+0xd2>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2241      	movs	r2, #65	; 0x41
 8003f82:	5c9b      	ldrb	r3, [r3, r2]
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	3b01      	subs	r3, #1
 8003f88:	425a      	negs	r2, r3
 8003f8a:	4153      	adcs	r3, r2
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d025      	beq.n	8003fde <HAL_TIM_PWM_Start_DMA+0x122>
  {
    if ((pData == NULL) || (Length == 0U))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d003      	beq.n	8003fa0 <HAL_TIM_PWM_Start_DMA+0xe4>
 8003f98:	1cbb      	adds	r3, r7, #2
 8003f9a:	881b      	ldrh	r3, [r3, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <HAL_TIM_PWM_Start_DMA+0xe8>
    {
      return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e123      	b.n	80041ec <HAL_TIM_PWM_Start_DMA+0x330>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d104      	bne.n	8003fb4 <HAL_TIM_PWM_Start_DMA+0xf8>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	223e      	movs	r2, #62	; 0x3e
 8003fae:	2102      	movs	r1, #2
 8003fb0:	5499      	strb	r1, [r3, r2]
 8003fb2:	e016      	b.n	8003fe2 <HAL_TIM_PWM_Start_DMA+0x126>
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	2b04      	cmp	r3, #4
 8003fb8:	d104      	bne.n	8003fc4 <HAL_TIM_PWM_Start_DMA+0x108>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	223f      	movs	r2, #63	; 0x3f
 8003fbe:	2102      	movs	r1, #2
 8003fc0:	5499      	strb	r1, [r3, r2]
 8003fc2:	e00e      	b.n	8003fe2 <HAL_TIM_PWM_Start_DMA+0x126>
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	2b08      	cmp	r3, #8
 8003fc8:	d104      	bne.n	8003fd4 <HAL_TIM_PWM_Start_DMA+0x118>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2240      	movs	r2, #64	; 0x40
 8003fce:	2102      	movs	r1, #2
 8003fd0:	5499      	strb	r1, [r3, r2]
 8003fd2:	e006      	b.n	8003fe2 <HAL_TIM_PWM_Start_DMA+0x126>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2241      	movs	r2, #65	; 0x41
 8003fd8:	2102      	movs	r1, #2
 8003fda:	5499      	strb	r1, [r3, r2]
 8003fdc:	e001      	b.n	8003fe2 <HAL_TIM_PWM_Start_DMA+0x126>
    }
  }
  else
  {
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e104      	b.n	80041ec <HAL_TIM_PWM_Start_DMA+0x330>
  }

  switch (Channel)
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	2b0c      	cmp	r3, #12
 8003fe6:	d100      	bne.n	8003fea <HAL_TIM_PWM_Start_DMA+0x12e>
 8003fe8:	e080      	b.n	80040ec <HAL_TIM_PWM_Start_DMA+0x230>
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	2b0c      	cmp	r3, #12
 8003fee:	d900      	bls.n	8003ff2 <HAL_TIM_PWM_Start_DMA+0x136>
 8003ff0:	e0a1      	b.n	8004136 <HAL_TIM_PWM_Start_DMA+0x27a>
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	2b08      	cmp	r3, #8
 8003ff6:	d054      	beq.n	80040a2 <HAL_TIM_PWM_Start_DMA+0x1e6>
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	2b08      	cmp	r3, #8
 8003ffc:	d900      	bls.n	8004000 <HAL_TIM_PWM_Start_DMA+0x144>
 8003ffe:	e09a      	b.n	8004136 <HAL_TIM_PWM_Start_DMA+0x27a>
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d003      	beq.n	800400e <HAL_TIM_PWM_Start_DMA+0x152>
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	2b04      	cmp	r3, #4
 800400a:	d025      	beq.n	8004058 <HAL_TIM_PWM_Start_DMA+0x19c>
 800400c:	e093      	b.n	8004136 <HAL_TIM_PWM_Start_DMA+0x27a>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004012:	4a78      	ldr	r2, [pc, #480]	; (80041f4 <HAL_TIM_PWM_Start_DMA+0x338>)
 8004014:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401a:	4a77      	ldr	r2, [pc, #476]	; (80041f8 <HAL_TIM_PWM_Start_DMA+0x33c>)
 800401c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004022:	4a76      	ldr	r2, [pc, #472]	; (80041fc <HAL_TIM_PWM_Start_DMA+0x340>)
 8004024:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800402a:	6879      	ldr	r1, [r7, #4]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	3334      	adds	r3, #52	; 0x34
 8004032:	001a      	movs	r2, r3
 8004034:	1cbb      	adds	r3, r7, #2
 8004036:	881b      	ldrh	r3, [r3, #0]
 8004038:	f7fe fd82 	bl	8002b40 <HAL_DMA_Start_IT>
 800403c:	1e03      	subs	r3, r0, #0
 800403e:	d001      	beq.n	8004044 <HAL_TIM_PWM_Start_DMA+0x188>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e0d3      	b.n	80041ec <HAL_TIM_PWM_Start_DMA+0x330>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68da      	ldr	r2, [r3, #12]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2180      	movs	r1, #128	; 0x80
 8004050:	0089      	lsls	r1, r1, #2
 8004052:	430a      	orrs	r2, r1
 8004054:	60da      	str	r2, [r3, #12]
      break;
 8004056:	e073      	b.n	8004140 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800405c:	4a65      	ldr	r2, [pc, #404]	; (80041f4 <HAL_TIM_PWM_Start_DMA+0x338>)
 800405e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004064:	4a64      	ldr	r2, [pc, #400]	; (80041f8 <HAL_TIM_PWM_Start_DMA+0x33c>)
 8004066:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406c:	4a63      	ldr	r2, [pc, #396]	; (80041fc <HAL_TIM_PWM_Start_DMA+0x340>)
 800406e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004074:	6879      	ldr	r1, [r7, #4]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	3338      	adds	r3, #56	; 0x38
 800407c:	001a      	movs	r2, r3
 800407e:	1cbb      	adds	r3, r7, #2
 8004080:	881b      	ldrh	r3, [r3, #0]
 8004082:	f7fe fd5d 	bl	8002b40 <HAL_DMA_Start_IT>
 8004086:	1e03      	subs	r3, r0, #0
 8004088:	d001      	beq.n	800408e <HAL_TIM_PWM_Start_DMA+0x1d2>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e0ae      	b.n	80041ec <HAL_TIM_PWM_Start_DMA+0x330>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68da      	ldr	r2, [r3, #12]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2180      	movs	r1, #128	; 0x80
 800409a:	00c9      	lsls	r1, r1, #3
 800409c:	430a      	orrs	r2, r1
 800409e:	60da      	str	r2, [r3, #12]
      break;
 80040a0:	e04e      	b.n	8004140 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a6:	4a53      	ldr	r2, [pc, #332]	; (80041f4 <HAL_TIM_PWM_Start_DMA+0x338>)
 80040a8:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ae:	4a52      	ldr	r2, [pc, #328]	; (80041f8 <HAL_TIM_PWM_Start_DMA+0x33c>)
 80040b0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b6:	4a51      	ldr	r2, [pc, #324]	; (80041fc <HAL_TIM_PWM_Start_DMA+0x340>)
 80040b8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80040be:	6879      	ldr	r1, [r7, #4]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	333c      	adds	r3, #60	; 0x3c
 80040c6:	001a      	movs	r2, r3
 80040c8:	1cbb      	adds	r3, r7, #2
 80040ca:	881b      	ldrh	r3, [r3, #0]
 80040cc:	f7fe fd38 	bl	8002b40 <HAL_DMA_Start_IT>
 80040d0:	1e03      	subs	r3, r0, #0
 80040d2:	d001      	beq.n	80040d8 <HAL_TIM_PWM_Start_DMA+0x21c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e089      	b.n	80041ec <HAL_TIM_PWM_Start_DMA+0x330>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68da      	ldr	r2, [r3, #12]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2180      	movs	r1, #128	; 0x80
 80040e4:	0109      	lsls	r1, r1, #4
 80040e6:	430a      	orrs	r2, r1
 80040e8:	60da      	str	r2, [r3, #12]
      break;
 80040ea:	e029      	b.n	8004140 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f0:	4a40      	ldr	r2, [pc, #256]	; (80041f4 <HAL_TIM_PWM_Start_DMA+0x338>)
 80040f2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f8:	4a3f      	ldr	r2, [pc, #252]	; (80041f8 <HAL_TIM_PWM_Start_DMA+0x33c>)
 80040fa:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004100:	4a3e      	ldr	r2, [pc, #248]	; (80041fc <HAL_TIM_PWM_Start_DMA+0x340>)
 8004102:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004108:	6879      	ldr	r1, [r7, #4]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	3340      	adds	r3, #64	; 0x40
 8004110:	001a      	movs	r2, r3
 8004112:	1cbb      	adds	r3, r7, #2
 8004114:	881b      	ldrh	r3, [r3, #0]
 8004116:	f7fe fd13 	bl	8002b40 <HAL_DMA_Start_IT>
 800411a:	1e03      	subs	r3, r0, #0
 800411c:	d001      	beq.n	8004122 <HAL_TIM_PWM_Start_DMA+0x266>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e064      	b.n	80041ec <HAL_TIM_PWM_Start_DMA+0x330>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68da      	ldr	r2, [r3, #12]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2180      	movs	r1, #128	; 0x80
 800412e:	0149      	lsls	r1, r1, #5
 8004130:	430a      	orrs	r2, r1
 8004132:	60da      	str	r2, [r3, #12]
      break;
 8004134:	e004      	b.n	8004140 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    default:
      status = HAL_ERROR;
 8004136:	2317      	movs	r3, #23
 8004138:	18fb      	adds	r3, r7, r3
 800413a:	2201      	movs	r2, #1
 800413c:	701a      	strb	r2, [r3, #0]
      break;
 800413e:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8004140:	2317      	movs	r3, #23
 8004142:	18fb      	adds	r3, r7, r3
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d14d      	bne.n	80041e6 <HAL_TIM_PWM_Start_DMA+0x32a>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68b9      	ldr	r1, [r7, #8]
 8004150:	2201      	movs	r2, #1
 8004152:	0018      	movs	r0, r3
 8004154:	f000 fdd2 	bl	8004cfc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a28      	ldr	r2, [pc, #160]	; (8004200 <HAL_TIM_PWM_Start_DMA+0x344>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d009      	beq.n	8004176 <HAL_TIM_PWM_Start_DMA+0x2ba>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a27      	ldr	r2, [pc, #156]	; (8004204 <HAL_TIM_PWM_Start_DMA+0x348>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d004      	beq.n	8004176 <HAL_TIM_PWM_Start_DMA+0x2ba>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a25      	ldr	r2, [pc, #148]	; (8004208 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d101      	bne.n	800417a <HAL_TIM_PWM_Start_DMA+0x2be>
 8004176:	2301      	movs	r3, #1
 8004178:	e000      	b.n	800417c <HAL_TIM_PWM_Start_DMA+0x2c0>
 800417a:	2300      	movs	r3, #0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d008      	beq.n	8004192 <HAL_TIM_PWM_Start_DMA+0x2d6>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2180      	movs	r1, #128	; 0x80
 800418c:	0209      	lsls	r1, r1, #8
 800418e:	430a      	orrs	r2, r1
 8004190:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a1a      	ldr	r2, [pc, #104]	; (8004200 <HAL_TIM_PWM_Start_DMA+0x344>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d00a      	beq.n	80041b2 <HAL_TIM_PWM_Start_DMA+0x2f6>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	2380      	movs	r3, #128	; 0x80
 80041a2:	05db      	lsls	r3, r3, #23
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d004      	beq.n	80041b2 <HAL_TIM_PWM_Start_DMA+0x2f6>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a17      	ldr	r2, [pc, #92]	; (800420c <HAL_TIM_PWM_Start_DMA+0x350>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d111      	bne.n	80041d6 <HAL_TIM_PWM_Start_DMA+0x31a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	2207      	movs	r2, #7
 80041ba:	4013      	ands	r3, r2
 80041bc:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	2b06      	cmp	r3, #6
 80041c2:	d010      	beq.n	80041e6 <HAL_TIM_PWM_Start_DMA+0x32a>
      {
        __HAL_TIM_ENABLE(htim);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2101      	movs	r1, #1
 80041d0:	430a      	orrs	r2, r1
 80041d2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041d4:	e007      	b.n	80041e6 <HAL_TIM_PWM_Start_DMA+0x32a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2101      	movs	r1, #1
 80041e2:	430a      	orrs	r2, r1
 80041e4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80041e6:	2317      	movs	r3, #23
 80041e8:	18fb      	adds	r3, r7, r3
 80041ea:	781b      	ldrb	r3, [r3, #0]
}
 80041ec:	0018      	movs	r0, r3
 80041ee:	46bd      	mov	sp, r7
 80041f0:	b006      	add	sp, #24
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	08004609 	.word	0x08004609
 80041f8:	080046b3 	.word	0x080046b3
 80041fc:	08004575 	.word	0x08004575
 8004200:	40012c00 	.word	0x40012c00
 8004204:	40014400 	.word	0x40014400
 8004208:	40014800 	.word	0x40014800
 800420c:	40000400 	.word	0x40000400

08004210 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b086      	sub	sp, #24
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800421c:	2317      	movs	r3, #23
 800421e:	18fb      	adds	r3, r7, r3
 8004220:	2200      	movs	r2, #0
 8004222:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	223c      	movs	r2, #60	; 0x3c
 8004228:	5c9b      	ldrb	r3, [r3, r2]
 800422a:	2b01      	cmp	r3, #1
 800422c:	d101      	bne.n	8004232 <HAL_TIM_PWM_ConfigChannel+0x22>
 800422e:	2302      	movs	r3, #2
 8004230:	e0ad      	b.n	800438e <HAL_TIM_PWM_ConfigChannel+0x17e>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	223c      	movs	r2, #60	; 0x3c
 8004236:	2101      	movs	r1, #1
 8004238:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2b0c      	cmp	r3, #12
 800423e:	d100      	bne.n	8004242 <HAL_TIM_PWM_ConfigChannel+0x32>
 8004240:	e076      	b.n	8004330 <HAL_TIM_PWM_ConfigChannel+0x120>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2b0c      	cmp	r3, #12
 8004246:	d900      	bls.n	800424a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8004248:	e095      	b.n	8004376 <HAL_TIM_PWM_ConfigChannel+0x166>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2b08      	cmp	r3, #8
 800424e:	d04e      	beq.n	80042ee <HAL_TIM_PWM_ConfigChannel+0xde>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2b08      	cmp	r3, #8
 8004254:	d900      	bls.n	8004258 <HAL_TIM_PWM_ConfigChannel+0x48>
 8004256:	e08e      	b.n	8004376 <HAL_TIM_PWM_ConfigChannel+0x166>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d003      	beq.n	8004266 <HAL_TIM_PWM_ConfigChannel+0x56>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2b04      	cmp	r3, #4
 8004262:	d021      	beq.n	80042a8 <HAL_TIM_PWM_ConfigChannel+0x98>
 8004264:	e087      	b.n	8004376 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68ba      	ldr	r2, [r7, #8]
 800426c:	0011      	movs	r1, r2
 800426e:	0018      	movs	r0, r3
 8004270:	f000 faca 	bl	8004808 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	699a      	ldr	r2, [r3, #24]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2108      	movs	r1, #8
 8004280:	430a      	orrs	r2, r1
 8004282:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	699a      	ldr	r2, [r3, #24]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2104      	movs	r1, #4
 8004290:	438a      	bics	r2, r1
 8004292:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	6999      	ldr	r1, [r3, #24]
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	691a      	ldr	r2, [r3, #16]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	430a      	orrs	r2, r1
 80042a4:	619a      	str	r2, [r3, #24]
      break;
 80042a6:	e06b      	b.n	8004380 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68ba      	ldr	r2, [r7, #8]
 80042ae:	0011      	movs	r1, r2
 80042b0:	0018      	movs	r0, r3
 80042b2:	f000 fb27 	bl	8004904 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	699a      	ldr	r2, [r3, #24]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2180      	movs	r1, #128	; 0x80
 80042c2:	0109      	lsls	r1, r1, #4
 80042c4:	430a      	orrs	r2, r1
 80042c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	699a      	ldr	r2, [r3, #24]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4931      	ldr	r1, [pc, #196]	; (8004398 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80042d4:	400a      	ands	r2, r1
 80042d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	6999      	ldr	r1, [r3, #24]
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	021a      	lsls	r2, r3, #8
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	430a      	orrs	r2, r1
 80042ea:	619a      	str	r2, [r3, #24]
      break;
 80042ec:	e048      	b.n	8004380 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68ba      	ldr	r2, [r7, #8]
 80042f4:	0011      	movs	r1, r2
 80042f6:	0018      	movs	r0, r3
 80042f8:	f000 fb82 	bl	8004a00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	69da      	ldr	r2, [r3, #28]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2108      	movs	r1, #8
 8004308:	430a      	orrs	r2, r1
 800430a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	69da      	ldr	r2, [r3, #28]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2104      	movs	r1, #4
 8004318:	438a      	bics	r2, r1
 800431a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	69d9      	ldr	r1, [r3, #28]
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	691a      	ldr	r2, [r3, #16]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	430a      	orrs	r2, r1
 800432c:	61da      	str	r2, [r3, #28]
      break;
 800432e:	e027      	b.n	8004380 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68ba      	ldr	r2, [r7, #8]
 8004336:	0011      	movs	r1, r2
 8004338:	0018      	movs	r0, r3
 800433a:	f000 fbe1 	bl	8004b00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	69da      	ldr	r2, [r3, #28]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2180      	movs	r1, #128	; 0x80
 800434a:	0109      	lsls	r1, r1, #4
 800434c:	430a      	orrs	r2, r1
 800434e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	69da      	ldr	r2, [r3, #28]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	490f      	ldr	r1, [pc, #60]	; (8004398 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800435c:	400a      	ands	r2, r1
 800435e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	69d9      	ldr	r1, [r3, #28]
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	021a      	lsls	r2, r3, #8
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	430a      	orrs	r2, r1
 8004372:	61da      	str	r2, [r3, #28]
      break;
 8004374:	e004      	b.n	8004380 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8004376:	2317      	movs	r3, #23
 8004378:	18fb      	adds	r3, r7, r3
 800437a:	2201      	movs	r2, #1
 800437c:	701a      	strb	r2, [r3, #0]
      break;
 800437e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	223c      	movs	r2, #60	; 0x3c
 8004384:	2100      	movs	r1, #0
 8004386:	5499      	strb	r1, [r3, r2]

  return status;
 8004388:	2317      	movs	r3, #23
 800438a:	18fb      	adds	r3, r7, r3
 800438c:	781b      	ldrb	r3, [r3, #0]
}
 800438e:	0018      	movs	r0, r3
 8004390:	46bd      	mov	sp, r7
 8004392:	b006      	add	sp, #24
 8004394:	bd80      	pop	{r7, pc}
 8004396:	46c0      	nop			; (mov r8, r8)
 8004398:	fffffbff 	.word	0xfffffbff

0800439c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043a6:	230f      	movs	r3, #15
 80043a8:	18fb      	adds	r3, r7, r3
 80043aa:	2200      	movs	r2, #0
 80043ac:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	223c      	movs	r2, #60	; 0x3c
 80043b2:	5c9b      	ldrb	r3, [r3, r2]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d101      	bne.n	80043bc <HAL_TIM_ConfigClockSource+0x20>
 80043b8:	2302      	movs	r3, #2
 80043ba:	e0bc      	b.n	8004536 <HAL_TIM_ConfigClockSource+0x19a>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	223c      	movs	r2, #60	; 0x3c
 80043c0:	2101      	movs	r1, #1
 80043c2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	223d      	movs	r2, #61	; 0x3d
 80043c8:	2102      	movs	r1, #2
 80043ca:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	2277      	movs	r2, #119	; 0x77
 80043d8:	4393      	bics	r3, r2
 80043da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	4a58      	ldr	r2, [pc, #352]	; (8004540 <HAL_TIM_ConfigClockSource+0x1a4>)
 80043e0:	4013      	ands	r3, r2
 80043e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68ba      	ldr	r2, [r7, #8]
 80043ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2280      	movs	r2, #128	; 0x80
 80043f2:	0192      	lsls	r2, r2, #6
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d040      	beq.n	800447a <HAL_TIM_ConfigClockSource+0xde>
 80043f8:	2280      	movs	r2, #128	; 0x80
 80043fa:	0192      	lsls	r2, r2, #6
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d900      	bls.n	8004402 <HAL_TIM_ConfigClockSource+0x66>
 8004400:	e088      	b.n	8004514 <HAL_TIM_ConfigClockSource+0x178>
 8004402:	2280      	movs	r2, #128	; 0x80
 8004404:	0152      	lsls	r2, r2, #5
 8004406:	4293      	cmp	r3, r2
 8004408:	d100      	bne.n	800440c <HAL_TIM_ConfigClockSource+0x70>
 800440a:	e088      	b.n	800451e <HAL_TIM_ConfigClockSource+0x182>
 800440c:	2280      	movs	r2, #128	; 0x80
 800440e:	0152      	lsls	r2, r2, #5
 8004410:	4293      	cmp	r3, r2
 8004412:	d900      	bls.n	8004416 <HAL_TIM_ConfigClockSource+0x7a>
 8004414:	e07e      	b.n	8004514 <HAL_TIM_ConfigClockSource+0x178>
 8004416:	2b70      	cmp	r3, #112	; 0x70
 8004418:	d018      	beq.n	800444c <HAL_TIM_ConfigClockSource+0xb0>
 800441a:	d900      	bls.n	800441e <HAL_TIM_ConfigClockSource+0x82>
 800441c:	e07a      	b.n	8004514 <HAL_TIM_ConfigClockSource+0x178>
 800441e:	2b60      	cmp	r3, #96	; 0x60
 8004420:	d04f      	beq.n	80044c2 <HAL_TIM_ConfigClockSource+0x126>
 8004422:	d900      	bls.n	8004426 <HAL_TIM_ConfigClockSource+0x8a>
 8004424:	e076      	b.n	8004514 <HAL_TIM_ConfigClockSource+0x178>
 8004426:	2b50      	cmp	r3, #80	; 0x50
 8004428:	d03b      	beq.n	80044a2 <HAL_TIM_ConfigClockSource+0x106>
 800442a:	d900      	bls.n	800442e <HAL_TIM_ConfigClockSource+0x92>
 800442c:	e072      	b.n	8004514 <HAL_TIM_ConfigClockSource+0x178>
 800442e:	2b40      	cmp	r3, #64	; 0x40
 8004430:	d057      	beq.n	80044e2 <HAL_TIM_ConfigClockSource+0x146>
 8004432:	d900      	bls.n	8004436 <HAL_TIM_ConfigClockSource+0x9a>
 8004434:	e06e      	b.n	8004514 <HAL_TIM_ConfigClockSource+0x178>
 8004436:	2b30      	cmp	r3, #48	; 0x30
 8004438:	d063      	beq.n	8004502 <HAL_TIM_ConfigClockSource+0x166>
 800443a:	d86b      	bhi.n	8004514 <HAL_TIM_ConfigClockSource+0x178>
 800443c:	2b20      	cmp	r3, #32
 800443e:	d060      	beq.n	8004502 <HAL_TIM_ConfigClockSource+0x166>
 8004440:	d868      	bhi.n	8004514 <HAL_TIM_ConfigClockSource+0x178>
 8004442:	2b00      	cmp	r3, #0
 8004444:	d05d      	beq.n	8004502 <HAL_TIM_ConfigClockSource+0x166>
 8004446:	2b10      	cmp	r3, #16
 8004448:	d05b      	beq.n	8004502 <HAL_TIM_ConfigClockSource+0x166>
 800444a:	e063      	b.n	8004514 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6818      	ldr	r0, [r3, #0]
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	6899      	ldr	r1, [r3, #8]
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	685a      	ldr	r2, [r3, #4]
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	f000 fc2e 	bl	8004cbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	2277      	movs	r2, #119	; 0x77
 800446c:	4313      	orrs	r3, r2
 800446e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68ba      	ldr	r2, [r7, #8]
 8004476:	609a      	str	r2, [r3, #8]
      break;
 8004478:	e052      	b.n	8004520 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6818      	ldr	r0, [r3, #0]
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	6899      	ldr	r1, [r3, #8]
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	685a      	ldr	r2, [r3, #4]
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	f000 fc17 	bl	8004cbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	689a      	ldr	r2, [r3, #8]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2180      	movs	r1, #128	; 0x80
 800449a:	01c9      	lsls	r1, r1, #7
 800449c:	430a      	orrs	r2, r1
 800449e:	609a      	str	r2, [r3, #8]
      break;
 80044a0:	e03e      	b.n	8004520 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6818      	ldr	r0, [r3, #0]
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	6859      	ldr	r1, [r3, #4]
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	001a      	movs	r2, r3
 80044b0:	f000 fb8a 	bl	8004bc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2150      	movs	r1, #80	; 0x50
 80044ba:	0018      	movs	r0, r3
 80044bc:	f000 fbe4 	bl	8004c88 <TIM_ITRx_SetConfig>
      break;
 80044c0:	e02e      	b.n	8004520 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6818      	ldr	r0, [r3, #0]
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	6859      	ldr	r1, [r3, #4]
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	001a      	movs	r2, r3
 80044d0:	f000 fba8 	bl	8004c24 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2160      	movs	r1, #96	; 0x60
 80044da:	0018      	movs	r0, r3
 80044dc:	f000 fbd4 	bl	8004c88 <TIM_ITRx_SetConfig>
      break;
 80044e0:	e01e      	b.n	8004520 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6818      	ldr	r0, [r3, #0]
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	6859      	ldr	r1, [r3, #4]
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	001a      	movs	r2, r3
 80044f0:	f000 fb6a 	bl	8004bc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2140      	movs	r1, #64	; 0x40
 80044fa:	0018      	movs	r0, r3
 80044fc:	f000 fbc4 	bl	8004c88 <TIM_ITRx_SetConfig>
      break;
 8004500:	e00e      	b.n	8004520 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	0019      	movs	r1, r3
 800450c:	0010      	movs	r0, r2
 800450e:	f000 fbbb 	bl	8004c88 <TIM_ITRx_SetConfig>
      break;
 8004512:	e005      	b.n	8004520 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004514:	230f      	movs	r3, #15
 8004516:	18fb      	adds	r3, r7, r3
 8004518:	2201      	movs	r2, #1
 800451a:	701a      	strb	r2, [r3, #0]
      break;
 800451c:	e000      	b.n	8004520 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800451e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	223d      	movs	r2, #61	; 0x3d
 8004524:	2101      	movs	r1, #1
 8004526:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	223c      	movs	r2, #60	; 0x3c
 800452c:	2100      	movs	r1, #0
 800452e:	5499      	strb	r1, [r3, r2]

  return status;
 8004530:	230f      	movs	r3, #15
 8004532:	18fb      	adds	r3, r7, r3
 8004534:	781b      	ldrb	r3, [r3, #0]
}
 8004536:	0018      	movs	r0, r3
 8004538:	46bd      	mov	sp, r7
 800453a:	b004      	add	sp, #16
 800453c:	bd80      	pop	{r7, pc}
 800453e:	46c0      	nop			; (mov r8, r8)
 8004540:	ffff00ff 	.word	0xffff00ff

08004544 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800454c:	46c0      	nop			; (mov r8, r8)
 800454e:	46bd      	mov	sp, r7
 8004550:	b002      	add	sp, #8
 8004552:	bd80      	pop	{r7, pc}

08004554 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800455c:	46c0      	nop			; (mov r8, r8)
 800455e:	46bd      	mov	sp, r7
 8004560:	b002      	add	sp, #8
 8004562:	bd80      	pop	{r7, pc}

08004564 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800456c:	46c0      	nop			; (mov r8, r8)
 800456e:	46bd      	mov	sp, r7
 8004570:	b002      	add	sp, #8
 8004572:	bd80      	pop	{r7, pc}

08004574 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004580:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	429a      	cmp	r2, r3
 800458a:	d107      	bne.n	800459c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2201      	movs	r2, #1
 8004590:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	223e      	movs	r2, #62	; 0x3e
 8004596:	2101      	movs	r1, #1
 8004598:	5499      	strb	r1, [r3, r2]
 800459a:	e02a      	b.n	80045f2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d107      	bne.n	80045b6 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2202      	movs	r2, #2
 80045aa:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	223f      	movs	r2, #63	; 0x3f
 80045b0:	2101      	movs	r1, #1
 80045b2:	5499      	strb	r1, [r3, r2]
 80045b4:	e01d      	b.n	80045f2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d107      	bne.n	80045d0 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2204      	movs	r2, #4
 80045c4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2240      	movs	r2, #64	; 0x40
 80045ca:	2101      	movs	r1, #1
 80045cc:	5499      	strb	r1, [r3, r2]
 80045ce:	e010      	b.n	80045f2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d107      	bne.n	80045ea <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2208      	movs	r2, #8
 80045de:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2241      	movs	r2, #65	; 0x41
 80045e4:	2101      	movs	r1, #1
 80045e6:	5499      	strb	r1, [r3, r2]
 80045e8:	e003      	b.n	80045f2 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	223d      	movs	r2, #61	; 0x3d
 80045ee:	2101      	movs	r1, #1
 80045f0:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	0018      	movs	r0, r3
 80045f6:	f7ff ffb5 	bl	8004564 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2200      	movs	r2, #0
 80045fe:	771a      	strb	r2, [r3, #28]
}
 8004600:	46c0      	nop			; (mov r8, r8)
 8004602:	46bd      	mov	sp, r7
 8004604:	b004      	add	sp, #16
 8004606:	bd80      	pop	{r7, pc}

08004608 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004614:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	429a      	cmp	r2, r3
 800461e:	d10b      	bne.n	8004638 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2201      	movs	r2, #1
 8004624:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d136      	bne.n	800469c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	223e      	movs	r2, #62	; 0x3e
 8004632:	2101      	movs	r1, #1
 8004634:	5499      	strb	r1, [r3, r2]
 8004636:	e031      	b.n	800469c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	429a      	cmp	r2, r3
 8004640:	d10b      	bne.n	800465a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2202      	movs	r2, #2
 8004646:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d125      	bne.n	800469c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	223f      	movs	r2, #63	; 0x3f
 8004654:	2101      	movs	r1, #1
 8004656:	5499      	strb	r1, [r3, r2]
 8004658:	e020      	b.n	800469c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	429a      	cmp	r2, r3
 8004662:	d10b      	bne.n	800467c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2204      	movs	r2, #4
 8004668:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d114      	bne.n	800469c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2240      	movs	r2, #64	; 0x40
 8004676:	2101      	movs	r1, #1
 8004678:	5499      	strb	r1, [r3, r2]
 800467a:	e00f      	b.n	800469c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	429a      	cmp	r2, r3
 8004684:	d10a      	bne.n	800469c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2208      	movs	r2, #8
 800468a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	699b      	ldr	r3, [r3, #24]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d103      	bne.n	800469c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2241      	movs	r2, #65	; 0x41
 8004698:	2101      	movs	r1, #1
 800469a:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	0018      	movs	r0, r3
 80046a0:	f7ff ff50 	bl	8004544 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	771a      	strb	r2, [r3, #28]
}
 80046aa:	46c0      	nop			; (mov r8, r8)
 80046ac:	46bd      	mov	sp, r7
 80046ae:	b004      	add	sp, #16
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b084      	sub	sp, #16
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046be:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d103      	bne.n	80046d2 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2201      	movs	r2, #1
 80046ce:	771a      	strb	r2, [r3, #28]
 80046d0:	e019      	b.n	8004706 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d103      	bne.n	80046e4 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2202      	movs	r2, #2
 80046e0:	771a      	strb	r2, [r3, #28]
 80046e2:	e010      	b.n	8004706 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d103      	bne.n	80046f6 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2204      	movs	r2, #4
 80046f2:	771a      	strb	r2, [r3, #28]
 80046f4:	e007      	b.n	8004706 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d102      	bne.n	8004706 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2208      	movs	r2, #8
 8004704:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	0018      	movs	r0, r3
 800470a:	f7ff ff23 	bl	8004554 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	771a      	strb	r2, [r3, #28]
}
 8004714:	46c0      	nop			; (mov r8, r8)
 8004716:	46bd      	mov	sp, r7
 8004718:	b004      	add	sp, #16
 800471a:	bd80      	pop	{r7, pc}

0800471c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a30      	ldr	r2, [pc, #192]	; (80047f0 <TIM_Base_SetConfig+0xd4>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d008      	beq.n	8004746 <TIM_Base_SetConfig+0x2a>
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	2380      	movs	r3, #128	; 0x80
 8004738:	05db      	lsls	r3, r3, #23
 800473a:	429a      	cmp	r2, r3
 800473c:	d003      	beq.n	8004746 <TIM_Base_SetConfig+0x2a>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a2c      	ldr	r2, [pc, #176]	; (80047f4 <TIM_Base_SetConfig+0xd8>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d108      	bne.n	8004758 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2270      	movs	r2, #112	; 0x70
 800474a:	4393      	bics	r3, r2
 800474c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	4313      	orrs	r3, r2
 8004756:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a25      	ldr	r2, [pc, #148]	; (80047f0 <TIM_Base_SetConfig+0xd4>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d014      	beq.n	800478a <TIM_Base_SetConfig+0x6e>
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	2380      	movs	r3, #128	; 0x80
 8004764:	05db      	lsls	r3, r3, #23
 8004766:	429a      	cmp	r2, r3
 8004768:	d00f      	beq.n	800478a <TIM_Base_SetConfig+0x6e>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a21      	ldr	r2, [pc, #132]	; (80047f4 <TIM_Base_SetConfig+0xd8>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d00b      	beq.n	800478a <TIM_Base_SetConfig+0x6e>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a20      	ldr	r2, [pc, #128]	; (80047f8 <TIM_Base_SetConfig+0xdc>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d007      	beq.n	800478a <TIM_Base_SetConfig+0x6e>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a1f      	ldr	r2, [pc, #124]	; (80047fc <TIM_Base_SetConfig+0xe0>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d003      	beq.n	800478a <TIM_Base_SetConfig+0x6e>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a1e      	ldr	r2, [pc, #120]	; (8004800 <TIM_Base_SetConfig+0xe4>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d108      	bne.n	800479c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	4a1d      	ldr	r2, [pc, #116]	; (8004804 <TIM_Base_SetConfig+0xe8>)
 800478e:	4013      	ands	r3, r2
 8004790:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	4313      	orrs	r3, r2
 800479a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2280      	movs	r2, #128	; 0x80
 80047a0:	4393      	bics	r3, r2
 80047a2:	001a      	movs	r2, r3
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	695b      	ldr	r3, [r3, #20]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	689a      	ldr	r2, [r3, #8]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a0a      	ldr	r2, [pc, #40]	; (80047f0 <TIM_Base_SetConfig+0xd4>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d007      	beq.n	80047da <TIM_Base_SetConfig+0xbe>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a0b      	ldr	r2, [pc, #44]	; (80047fc <TIM_Base_SetConfig+0xe0>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d003      	beq.n	80047da <TIM_Base_SetConfig+0xbe>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a0a      	ldr	r2, [pc, #40]	; (8004800 <TIM_Base_SetConfig+0xe4>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d103      	bne.n	80047e2 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	691a      	ldr	r2, [r3, #16]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2201      	movs	r2, #1
 80047e6:	615a      	str	r2, [r3, #20]
}
 80047e8:	46c0      	nop			; (mov r8, r8)
 80047ea:	46bd      	mov	sp, r7
 80047ec:	b004      	add	sp, #16
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	40012c00 	.word	0x40012c00
 80047f4:	40000400 	.word	0x40000400
 80047f8:	40002000 	.word	0x40002000
 80047fc:	40014400 	.word	0x40014400
 8004800:	40014800 	.word	0x40014800
 8004804:	fffffcff 	.word	0xfffffcff

08004808 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b086      	sub	sp, #24
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	2201      	movs	r2, #1
 8004818:	4393      	bics	r3, r2
 800481a:	001a      	movs	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a1b      	ldr	r3, [r3, #32]
 8004824:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2270      	movs	r2, #112	; 0x70
 8004836:	4393      	bics	r3, r2
 8004838:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2203      	movs	r2, #3
 800483e:	4393      	bics	r3, r2
 8004840:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	4313      	orrs	r3, r2
 800484a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	2202      	movs	r2, #2
 8004850:	4393      	bics	r3, r2
 8004852:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	697a      	ldr	r2, [r7, #20]
 800485a:	4313      	orrs	r3, r2
 800485c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a23      	ldr	r2, [pc, #140]	; (80048f0 <TIM_OC1_SetConfig+0xe8>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d007      	beq.n	8004876 <TIM_OC1_SetConfig+0x6e>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a22      	ldr	r2, [pc, #136]	; (80048f4 <TIM_OC1_SetConfig+0xec>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d003      	beq.n	8004876 <TIM_OC1_SetConfig+0x6e>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a21      	ldr	r2, [pc, #132]	; (80048f8 <TIM_OC1_SetConfig+0xf0>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d10c      	bne.n	8004890 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	2208      	movs	r2, #8
 800487a:	4393      	bics	r3, r2
 800487c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	697a      	ldr	r2, [r7, #20]
 8004884:	4313      	orrs	r3, r2
 8004886:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	2204      	movs	r2, #4
 800488c:	4393      	bics	r3, r2
 800488e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a17      	ldr	r2, [pc, #92]	; (80048f0 <TIM_OC1_SetConfig+0xe8>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d007      	beq.n	80048a8 <TIM_OC1_SetConfig+0xa0>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a16      	ldr	r2, [pc, #88]	; (80048f4 <TIM_OC1_SetConfig+0xec>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d003      	beq.n	80048a8 <TIM_OC1_SetConfig+0xa0>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a15      	ldr	r2, [pc, #84]	; (80048f8 <TIM_OC1_SetConfig+0xf0>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d111      	bne.n	80048cc <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	4a14      	ldr	r2, [pc, #80]	; (80048fc <TIM_OC1_SetConfig+0xf4>)
 80048ac:	4013      	ands	r3, r2
 80048ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	4a13      	ldr	r2, [pc, #76]	; (8004900 <TIM_OC1_SetConfig+0xf8>)
 80048b4:	4013      	ands	r3, r2
 80048b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	695b      	ldr	r3, [r3, #20]
 80048bc:	693a      	ldr	r2, [r7, #16]
 80048be:	4313      	orrs	r3, r2
 80048c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	693a      	ldr	r2, [r7, #16]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	685a      	ldr	r2, [r3, #4]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	621a      	str	r2, [r3, #32]
}
 80048e6:	46c0      	nop			; (mov r8, r8)
 80048e8:	46bd      	mov	sp, r7
 80048ea:	b006      	add	sp, #24
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	46c0      	nop			; (mov r8, r8)
 80048f0:	40012c00 	.word	0x40012c00
 80048f4:	40014400 	.word	0x40014400
 80048f8:	40014800 	.word	0x40014800
 80048fc:	fffffeff 	.word	0xfffffeff
 8004900:	fffffdff 	.word	0xfffffdff

08004904 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b086      	sub	sp, #24
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	2210      	movs	r2, #16
 8004914:	4393      	bics	r3, r2
 8004916:	001a      	movs	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a1b      	ldr	r3, [r3, #32]
 8004920:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	4a2c      	ldr	r2, [pc, #176]	; (80049e4 <TIM_OC2_SetConfig+0xe0>)
 8004932:	4013      	ands	r3, r2
 8004934:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	4a2b      	ldr	r2, [pc, #172]	; (80049e8 <TIM_OC2_SetConfig+0xe4>)
 800493a:	4013      	ands	r3, r2
 800493c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	021b      	lsls	r3, r3, #8
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	4313      	orrs	r3, r2
 8004948:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	2220      	movs	r2, #32
 800494e:	4393      	bics	r3, r2
 8004950:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	011b      	lsls	r3, r3, #4
 8004958:	697a      	ldr	r2, [r7, #20]
 800495a:	4313      	orrs	r3, r2
 800495c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a22      	ldr	r2, [pc, #136]	; (80049ec <TIM_OC2_SetConfig+0xe8>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d10d      	bne.n	8004982 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	2280      	movs	r2, #128	; 0x80
 800496a:	4393      	bics	r3, r2
 800496c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	011b      	lsls	r3, r3, #4
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	4313      	orrs	r3, r2
 8004978:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	2240      	movs	r2, #64	; 0x40
 800497e:	4393      	bics	r3, r2
 8004980:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a19      	ldr	r2, [pc, #100]	; (80049ec <TIM_OC2_SetConfig+0xe8>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d007      	beq.n	800499a <TIM_OC2_SetConfig+0x96>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a18      	ldr	r2, [pc, #96]	; (80049f0 <TIM_OC2_SetConfig+0xec>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d003      	beq.n	800499a <TIM_OC2_SetConfig+0x96>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a17      	ldr	r2, [pc, #92]	; (80049f4 <TIM_OC2_SetConfig+0xf0>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d113      	bne.n	80049c2 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	4a16      	ldr	r2, [pc, #88]	; (80049f8 <TIM_OC2_SetConfig+0xf4>)
 800499e:	4013      	ands	r3, r2
 80049a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	4a15      	ldr	r2, [pc, #84]	; (80049fc <TIM_OC2_SetConfig+0xf8>)
 80049a6:	4013      	ands	r3, r2
 80049a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	693a      	ldr	r2, [r7, #16]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	693a      	ldr	r2, [r7, #16]
 80049be:	4313      	orrs	r3, r2
 80049c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	693a      	ldr	r2, [r7, #16]
 80049c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	685a      	ldr	r2, [r3, #4]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	697a      	ldr	r2, [r7, #20]
 80049da:	621a      	str	r2, [r3, #32]
}
 80049dc:	46c0      	nop			; (mov r8, r8)
 80049de:	46bd      	mov	sp, r7
 80049e0:	b006      	add	sp, #24
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	ffff8fff 	.word	0xffff8fff
 80049e8:	fffffcff 	.word	0xfffffcff
 80049ec:	40012c00 	.word	0x40012c00
 80049f0:	40014400 	.word	0x40014400
 80049f4:	40014800 	.word	0x40014800
 80049f8:	fffffbff 	.word	0xfffffbff
 80049fc:	fffff7ff 	.word	0xfffff7ff

08004a00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b086      	sub	sp, #24
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a1b      	ldr	r3, [r3, #32]
 8004a0e:	4a33      	ldr	r2, [pc, #204]	; (8004adc <TIM_OC3_SetConfig+0xdc>)
 8004a10:	401a      	ands	r2, r3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	69db      	ldr	r3, [r3, #28]
 8004a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2270      	movs	r2, #112	; 0x70
 8004a2c:	4393      	bics	r3, r2
 8004a2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2203      	movs	r2, #3
 8004a34:	4393      	bics	r3, r2
 8004a36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	4a26      	ldr	r2, [pc, #152]	; (8004ae0 <TIM_OC3_SetConfig+0xe0>)
 8004a46:	4013      	ands	r3, r2
 8004a48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	021b      	lsls	r3, r3, #8
 8004a50:	697a      	ldr	r2, [r7, #20]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a22      	ldr	r2, [pc, #136]	; (8004ae4 <TIM_OC3_SetConfig+0xe4>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d10d      	bne.n	8004a7a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	4a21      	ldr	r2, [pc, #132]	; (8004ae8 <TIM_OC3_SetConfig+0xe8>)
 8004a62:	4013      	ands	r3, r2
 8004a64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	021b      	lsls	r3, r3, #8
 8004a6c:	697a      	ldr	r2, [r7, #20]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	4a1d      	ldr	r2, [pc, #116]	; (8004aec <TIM_OC3_SetConfig+0xec>)
 8004a76:	4013      	ands	r3, r2
 8004a78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a19      	ldr	r2, [pc, #100]	; (8004ae4 <TIM_OC3_SetConfig+0xe4>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d007      	beq.n	8004a92 <TIM_OC3_SetConfig+0x92>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a1a      	ldr	r2, [pc, #104]	; (8004af0 <TIM_OC3_SetConfig+0xf0>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d003      	beq.n	8004a92 <TIM_OC3_SetConfig+0x92>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a19      	ldr	r2, [pc, #100]	; (8004af4 <TIM_OC3_SetConfig+0xf4>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d113      	bne.n	8004aba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	4a18      	ldr	r2, [pc, #96]	; (8004af8 <TIM_OC3_SetConfig+0xf8>)
 8004a96:	4013      	ands	r3, r2
 8004a98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	4a17      	ldr	r2, [pc, #92]	; (8004afc <TIM_OC3_SetConfig+0xfc>)
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	011b      	lsls	r3, r3, #4
 8004aa8:	693a      	ldr	r2, [r7, #16]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	011b      	lsls	r3, r3, #4
 8004ab4:	693a      	ldr	r2, [r7, #16]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	693a      	ldr	r2, [r7, #16]
 8004abe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	685a      	ldr	r2, [r3, #4]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	697a      	ldr	r2, [r7, #20]
 8004ad2:	621a      	str	r2, [r3, #32]
}
 8004ad4:	46c0      	nop			; (mov r8, r8)
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	b006      	add	sp, #24
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	fffffeff 	.word	0xfffffeff
 8004ae0:	fffffdff 	.word	0xfffffdff
 8004ae4:	40012c00 	.word	0x40012c00
 8004ae8:	fffff7ff 	.word	0xfffff7ff
 8004aec:	fffffbff 	.word	0xfffffbff
 8004af0:	40014400 	.word	0x40014400
 8004af4:	40014800 	.word	0x40014800
 8004af8:	ffffefff 	.word	0xffffefff
 8004afc:	ffffdfff 	.word	0xffffdfff

08004b00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	4a26      	ldr	r2, [pc, #152]	; (8004ba8 <TIM_OC4_SetConfig+0xa8>)
 8004b10:	401a      	ands	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a1b      	ldr	r3, [r3, #32]
 8004b1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	69db      	ldr	r3, [r3, #28]
 8004b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	4a20      	ldr	r2, [pc, #128]	; (8004bac <TIM_OC4_SetConfig+0xac>)
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	4a1f      	ldr	r2, [pc, #124]	; (8004bb0 <TIM_OC4_SetConfig+0xb0>)
 8004b34:	4013      	ands	r3, r2
 8004b36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	021b      	lsls	r3, r3, #8
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	4a1b      	ldr	r2, [pc, #108]	; (8004bb4 <TIM_OC4_SetConfig+0xb4>)
 8004b48:	4013      	ands	r3, r2
 8004b4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	031b      	lsls	r3, r3, #12
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a17      	ldr	r2, [pc, #92]	; (8004bb8 <TIM_OC4_SetConfig+0xb8>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d007      	beq.n	8004b70 <TIM_OC4_SetConfig+0x70>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a16      	ldr	r2, [pc, #88]	; (8004bbc <TIM_OC4_SetConfig+0xbc>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d003      	beq.n	8004b70 <TIM_OC4_SetConfig+0x70>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a15      	ldr	r2, [pc, #84]	; (8004bc0 <TIM_OC4_SetConfig+0xc0>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d109      	bne.n	8004b84 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	4a14      	ldr	r2, [pc, #80]	; (8004bc4 <TIM_OC4_SetConfig+0xc4>)
 8004b74:	4013      	ands	r3, r2
 8004b76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	695b      	ldr	r3, [r3, #20]
 8004b7c:	019b      	lsls	r3, r3, #6
 8004b7e:	697a      	ldr	r2, [r7, #20]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	685a      	ldr	r2, [r3, #4]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	693a      	ldr	r2, [r7, #16]
 8004b9c:	621a      	str	r2, [r3, #32]
}
 8004b9e:	46c0      	nop			; (mov r8, r8)
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	b006      	add	sp, #24
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	46c0      	nop			; (mov r8, r8)
 8004ba8:	ffffefff 	.word	0xffffefff
 8004bac:	ffff8fff 	.word	0xffff8fff
 8004bb0:	fffffcff 	.word	0xfffffcff
 8004bb4:	ffffdfff 	.word	0xffffdfff
 8004bb8:	40012c00 	.word	0x40012c00
 8004bbc:	40014400 	.word	0x40014400
 8004bc0:	40014800 	.word	0x40014800
 8004bc4:	ffffbfff 	.word	0xffffbfff

08004bc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b086      	sub	sp, #24
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6a1b      	ldr	r3, [r3, #32]
 8004bd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
 8004bde:	2201      	movs	r2, #1
 8004be0:	4393      	bics	r3, r2
 8004be2:	001a      	movs	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	22f0      	movs	r2, #240	; 0xf0
 8004bf2:	4393      	bics	r3, r2
 8004bf4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	011b      	lsls	r3, r3, #4
 8004bfa:	693a      	ldr	r2, [r7, #16]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	220a      	movs	r2, #10
 8004c04:	4393      	bics	r3, r2
 8004c06:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c08:	697a      	ldr	r2, [r7, #20]
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	697a      	ldr	r2, [r7, #20]
 8004c1a:	621a      	str	r2, [r3, #32]
}
 8004c1c:	46c0      	nop			; (mov r8, r8)
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	b006      	add	sp, #24
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b086      	sub	sp, #24
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6a1b      	ldr	r3, [r3, #32]
 8004c34:	2210      	movs	r2, #16
 8004c36:	4393      	bics	r3, r2
 8004c38:	001a      	movs	r2, r3
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6a1b      	ldr	r3, [r3, #32]
 8004c48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	4a0d      	ldr	r2, [pc, #52]	; (8004c84 <TIM_TI2_ConfigInputStage+0x60>)
 8004c4e:	4013      	ands	r3, r2
 8004c50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	031b      	lsls	r3, r3, #12
 8004c56:	697a      	ldr	r2, [r7, #20]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	22a0      	movs	r2, #160	; 0xa0
 8004c60:	4393      	bics	r3, r2
 8004c62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	011b      	lsls	r3, r3, #4
 8004c68:	693a      	ldr	r2, [r7, #16]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	697a      	ldr	r2, [r7, #20]
 8004c72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	621a      	str	r2, [r3, #32]
}
 8004c7a:	46c0      	nop			; (mov r8, r8)
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	b006      	add	sp, #24
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	46c0      	nop			; (mov r8, r8)
 8004c84:	ffff0fff 	.word	0xffff0fff

08004c88 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2270      	movs	r2, #112	; 0x70
 8004c9c:	4393      	bics	r3, r2
 8004c9e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	2207      	movs	r2, #7
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	609a      	str	r2, [r3, #8]
}
 8004cb2:	46c0      	nop			; (mov r8, r8)
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	b004      	add	sp, #16
 8004cb8:	bd80      	pop	{r7, pc}
	...

08004cbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b086      	sub	sp, #24
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
 8004cc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	4a09      	ldr	r2, [pc, #36]	; (8004cf8 <TIM_ETR_SetConfig+0x3c>)
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	021a      	lsls	r2, r3, #8
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	431a      	orrs	r2, r3
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	697a      	ldr	r2, [r7, #20]
 8004cee:	609a      	str	r2, [r3, #8]
}
 8004cf0:	46c0      	nop			; (mov r8, r8)
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	b006      	add	sp, #24
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	ffff00ff 	.word	0xffff00ff

08004cfc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b086      	sub	sp, #24
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	221f      	movs	r2, #31
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	2201      	movs	r2, #1
 8004d10:	409a      	lsls	r2, r3
 8004d12:	0013      	movs	r3, r2
 8004d14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	697a      	ldr	r2, [r7, #20]
 8004d1c:	43d2      	mvns	r2, r2
 8004d1e:	401a      	ands	r2, r3
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6a1a      	ldr	r2, [r3, #32]
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	211f      	movs	r1, #31
 8004d2c:	400b      	ands	r3, r1
 8004d2e:	6879      	ldr	r1, [r7, #4]
 8004d30:	4099      	lsls	r1, r3
 8004d32:	000b      	movs	r3, r1
 8004d34:	431a      	orrs	r2, r3
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	621a      	str	r2, [r3, #32]
}
 8004d3a:	46c0      	nop			; (mov r8, r8)
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	b006      	add	sp, #24
 8004d40:	bd80      	pop	{r7, pc}
	...

08004d44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	223c      	movs	r2, #60	; 0x3c
 8004d52:	5c9b      	ldrb	r3, [r3, r2]
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d101      	bne.n	8004d5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d58:	2302      	movs	r3, #2
 8004d5a:	e042      	b.n	8004de2 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	223c      	movs	r2, #60	; 0x3c
 8004d60:	2101      	movs	r1, #1
 8004d62:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	223d      	movs	r2, #61	; 0x3d
 8004d68:	2102      	movs	r1, #2
 8004d6a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2270      	movs	r2, #112	; 0x70
 8004d80:	4393      	bics	r3, r2
 8004d82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a14      	ldr	r2, [pc, #80]	; (8004dec <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d00a      	beq.n	8004db6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	2380      	movs	r3, #128	; 0x80
 8004da6:	05db      	lsls	r3, r3, #23
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d004      	beq.n	8004db6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a0f      	ldr	r2, [pc, #60]	; (8004df0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d10c      	bne.n	8004dd0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	2280      	movs	r2, #128	; 0x80
 8004dba:	4393      	bics	r3, r2
 8004dbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	68ba      	ldr	r2, [r7, #8]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68ba      	ldr	r2, [r7, #8]
 8004dce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	223d      	movs	r2, #61	; 0x3d
 8004dd4:	2101      	movs	r1, #1
 8004dd6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	223c      	movs	r2, #60	; 0x3c
 8004ddc:	2100      	movs	r1, #0
 8004dde:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	0018      	movs	r0, r3
 8004de4:	46bd      	mov	sp, r7
 8004de6:	b004      	add	sp, #16
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	46c0      	nop			; (mov r8, r8)
 8004dec:	40012c00 	.word	0x40012c00
 8004df0:	40000400 	.word	0x40000400

08004df4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d101      	bne.n	8004e06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e044      	b.n	8004e90 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d107      	bne.n	8004e1e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2278      	movs	r2, #120	; 0x78
 8004e12:	2100      	movs	r1, #0
 8004e14:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	0018      	movs	r0, r3
 8004e1a:	f7fd f809 	bl	8001e30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2224      	movs	r2, #36	; 0x24
 8004e22:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2101      	movs	r1, #1
 8004e30:	438a      	bics	r2, r1
 8004e32:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	0018      	movs	r0, r3
 8004e38:	f000 fb7c 	bl	8005534 <UART_SetConfig>
 8004e3c:	0003      	movs	r3, r0
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d101      	bne.n	8004e46 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e024      	b.n	8004e90 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d003      	beq.n	8004e56 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	0018      	movs	r0, r3
 8004e52:	f000 fcaf 	bl	80057b4 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	685a      	ldr	r2, [r3, #4]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	490d      	ldr	r1, [pc, #52]	; (8004e98 <HAL_UART_Init+0xa4>)
 8004e62:	400a      	ands	r2, r1
 8004e64:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	689a      	ldr	r2, [r3, #8]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	212a      	movs	r1, #42	; 0x2a
 8004e72:	438a      	bics	r2, r1
 8004e74:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2101      	movs	r1, #1
 8004e82:	430a      	orrs	r2, r1
 8004e84:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	0018      	movs	r0, r3
 8004e8a:	f000 fd47 	bl	800591c <UART_CheckIdleState>
 8004e8e:	0003      	movs	r3, r0
}
 8004e90:	0018      	movs	r0, r3
 8004e92:	46bd      	mov	sp, r7
 8004e94:	b002      	add	sp, #8
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	ffffb7ff 	.word	0xffffb7ff

08004e9c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b088      	sub	sp, #32
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	1dbb      	adds	r3, r7, #6
 8004ea8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2280      	movs	r2, #128	; 0x80
 8004eae:	589b      	ldr	r3, [r3, r2]
 8004eb0:	2b20      	cmp	r3, #32
 8004eb2:	d145      	bne.n	8004f40 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d003      	beq.n	8004ec2 <HAL_UART_Receive_IT+0x26>
 8004eba:	1dbb      	adds	r3, r7, #6
 8004ebc:	881b      	ldrh	r3, [r3, #0]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d101      	bne.n	8004ec6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e03d      	b.n	8004f42 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	689a      	ldr	r2, [r3, #8]
 8004eca:	2380      	movs	r3, #128	; 0x80
 8004ecc:	015b      	lsls	r3, r3, #5
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d109      	bne.n	8004ee6 <HAL_UART_Receive_IT+0x4a>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d105      	bne.n	8004ee6 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	2201      	movs	r2, #1
 8004ede:	4013      	ands	r3, r2
 8004ee0:	d001      	beq.n	8004ee6 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e02d      	b.n	8004f42 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	685a      	ldr	r2, [r3, #4]
 8004ef2:	2380      	movs	r3, #128	; 0x80
 8004ef4:	041b      	lsls	r3, r3, #16
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	d019      	beq.n	8004f2e <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004efa:	f3ef 8310 	mrs	r3, PRIMASK
 8004efe:	613b      	str	r3, [r7, #16]
  return(result);
 8004f00:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f02:	61fb      	str	r3, [r7, #28]
 8004f04:	2301      	movs	r3, #1
 8004f06:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	f383 8810 	msr	PRIMASK, r3
}
 8004f0e:	46c0      	nop			; (mov r8, r8)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2180      	movs	r1, #128	; 0x80
 8004f1c:	04c9      	lsls	r1, r1, #19
 8004f1e:	430a      	orrs	r2, r1
 8004f20:	601a      	str	r2, [r3, #0]
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	f383 8810 	msr	PRIMASK, r3
}
 8004f2c:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004f2e:	1dbb      	adds	r3, r7, #6
 8004f30:	881a      	ldrh	r2, [r3, #0]
 8004f32:	68b9      	ldr	r1, [r7, #8]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	0018      	movs	r0, r3
 8004f38:	f000 fe02 	bl	8005b40 <UART_Start_Receive_IT>
 8004f3c:	0003      	movs	r3, r0
 8004f3e:	e000      	b.n	8004f42 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8004f40:	2302      	movs	r3, #2
  }
}
 8004f42:	0018      	movs	r0, r3
 8004f44:	46bd      	mov	sp, r7
 8004f46:	b008      	add	sp, #32
 8004f48:	bd80      	pop	{r7, pc}
	...

08004f4c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f4c:	b590      	push	{r4, r7, lr}
 8004f4e:	b0ab      	sub	sp, #172	; 0xac
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	69db      	ldr	r3, [r3, #28]
 8004f5a:	22a4      	movs	r2, #164	; 0xa4
 8004f5c:	18b9      	adds	r1, r7, r2
 8004f5e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	20a0      	movs	r0, #160	; 0xa0
 8004f68:	1839      	adds	r1, r7, r0
 8004f6a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	219c      	movs	r1, #156	; 0x9c
 8004f74:	1879      	adds	r1, r7, r1
 8004f76:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004f78:	0011      	movs	r1, r2
 8004f7a:	18bb      	adds	r3, r7, r2
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a99      	ldr	r2, [pc, #612]	; (80051e4 <HAL_UART_IRQHandler+0x298>)
 8004f80:	4013      	ands	r3, r2
 8004f82:	2298      	movs	r2, #152	; 0x98
 8004f84:	18bc      	adds	r4, r7, r2
 8004f86:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8004f88:	18bb      	adds	r3, r7, r2
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d114      	bne.n	8004fba <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004f90:	187b      	adds	r3, r7, r1
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2220      	movs	r2, #32
 8004f96:	4013      	ands	r3, r2
 8004f98:	d00f      	beq.n	8004fba <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f9a:	183b      	adds	r3, r7, r0
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	d00a      	beq.n	8004fba <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d100      	bne.n	8004fae <HAL_UART_IRQHandler+0x62>
 8004fac:	e29e      	b.n	80054ec <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	0010      	movs	r0, r2
 8004fb6:	4798      	blx	r3
      }
      return;
 8004fb8:	e298      	b.n	80054ec <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004fba:	2398      	movs	r3, #152	; 0x98
 8004fbc:	18fb      	adds	r3, r7, r3
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d100      	bne.n	8004fc6 <HAL_UART_IRQHandler+0x7a>
 8004fc4:	e114      	b.n	80051f0 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004fc6:	239c      	movs	r3, #156	; 0x9c
 8004fc8:	18fb      	adds	r3, r7, r3
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	4013      	ands	r3, r2
 8004fd0:	d106      	bne.n	8004fe0 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004fd2:	23a0      	movs	r3, #160	; 0xa0
 8004fd4:	18fb      	adds	r3, r7, r3
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a83      	ldr	r2, [pc, #524]	; (80051e8 <HAL_UART_IRQHandler+0x29c>)
 8004fda:	4013      	ands	r3, r2
 8004fdc:	d100      	bne.n	8004fe0 <HAL_UART_IRQHandler+0x94>
 8004fde:	e107      	b.n	80051f0 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004fe0:	23a4      	movs	r3, #164	; 0xa4
 8004fe2:	18fb      	adds	r3, r7, r3
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	4013      	ands	r3, r2
 8004fea:	d012      	beq.n	8005012 <HAL_UART_IRQHandler+0xc6>
 8004fec:	23a0      	movs	r3, #160	; 0xa0
 8004fee:	18fb      	adds	r3, r7, r3
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	2380      	movs	r3, #128	; 0x80
 8004ff4:	005b      	lsls	r3, r3, #1
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	d00b      	beq.n	8005012 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2201      	movs	r2, #1
 8005000:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2284      	movs	r2, #132	; 0x84
 8005006:	589b      	ldr	r3, [r3, r2]
 8005008:	2201      	movs	r2, #1
 800500a:	431a      	orrs	r2, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2184      	movs	r1, #132	; 0x84
 8005010:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005012:	23a4      	movs	r3, #164	; 0xa4
 8005014:	18fb      	adds	r3, r7, r3
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2202      	movs	r2, #2
 800501a:	4013      	ands	r3, r2
 800501c:	d011      	beq.n	8005042 <HAL_UART_IRQHandler+0xf6>
 800501e:	239c      	movs	r3, #156	; 0x9c
 8005020:	18fb      	adds	r3, r7, r3
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2201      	movs	r2, #1
 8005026:	4013      	ands	r3, r2
 8005028:	d00b      	beq.n	8005042 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	2202      	movs	r2, #2
 8005030:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2284      	movs	r2, #132	; 0x84
 8005036:	589b      	ldr	r3, [r3, r2]
 8005038:	2204      	movs	r2, #4
 800503a:	431a      	orrs	r2, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2184      	movs	r1, #132	; 0x84
 8005040:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005042:	23a4      	movs	r3, #164	; 0xa4
 8005044:	18fb      	adds	r3, r7, r3
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2204      	movs	r2, #4
 800504a:	4013      	ands	r3, r2
 800504c:	d011      	beq.n	8005072 <HAL_UART_IRQHandler+0x126>
 800504e:	239c      	movs	r3, #156	; 0x9c
 8005050:	18fb      	adds	r3, r7, r3
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2201      	movs	r2, #1
 8005056:	4013      	ands	r3, r2
 8005058:	d00b      	beq.n	8005072 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2204      	movs	r2, #4
 8005060:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2284      	movs	r2, #132	; 0x84
 8005066:	589b      	ldr	r3, [r3, r2]
 8005068:	2202      	movs	r2, #2
 800506a:	431a      	orrs	r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2184      	movs	r1, #132	; 0x84
 8005070:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005072:	23a4      	movs	r3, #164	; 0xa4
 8005074:	18fb      	adds	r3, r7, r3
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2208      	movs	r2, #8
 800507a:	4013      	ands	r3, r2
 800507c:	d017      	beq.n	80050ae <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800507e:	23a0      	movs	r3, #160	; 0xa0
 8005080:	18fb      	adds	r3, r7, r3
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2220      	movs	r2, #32
 8005086:	4013      	ands	r3, r2
 8005088:	d105      	bne.n	8005096 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800508a:	239c      	movs	r3, #156	; 0x9c
 800508c:	18fb      	adds	r3, r7, r3
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2201      	movs	r2, #1
 8005092:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005094:	d00b      	beq.n	80050ae <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2208      	movs	r2, #8
 800509c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2284      	movs	r2, #132	; 0x84
 80050a2:	589b      	ldr	r3, [r3, r2]
 80050a4:	2208      	movs	r2, #8
 80050a6:	431a      	orrs	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2184      	movs	r1, #132	; 0x84
 80050ac:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80050ae:	23a4      	movs	r3, #164	; 0xa4
 80050b0:	18fb      	adds	r3, r7, r3
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	2380      	movs	r3, #128	; 0x80
 80050b6:	011b      	lsls	r3, r3, #4
 80050b8:	4013      	ands	r3, r2
 80050ba:	d013      	beq.n	80050e4 <HAL_UART_IRQHandler+0x198>
 80050bc:	23a0      	movs	r3, #160	; 0xa0
 80050be:	18fb      	adds	r3, r7, r3
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	2380      	movs	r3, #128	; 0x80
 80050c4:	04db      	lsls	r3, r3, #19
 80050c6:	4013      	ands	r3, r2
 80050c8:	d00c      	beq.n	80050e4 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2280      	movs	r2, #128	; 0x80
 80050d0:	0112      	lsls	r2, r2, #4
 80050d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2284      	movs	r2, #132	; 0x84
 80050d8:	589b      	ldr	r3, [r3, r2]
 80050da:	2220      	movs	r2, #32
 80050dc:	431a      	orrs	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2184      	movs	r1, #132	; 0x84
 80050e2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2284      	movs	r2, #132	; 0x84
 80050e8:	589b      	ldr	r3, [r3, r2]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d100      	bne.n	80050f0 <HAL_UART_IRQHandler+0x1a4>
 80050ee:	e1ff      	b.n	80054f0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80050f0:	23a4      	movs	r3, #164	; 0xa4
 80050f2:	18fb      	adds	r3, r7, r3
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2220      	movs	r2, #32
 80050f8:	4013      	ands	r3, r2
 80050fa:	d00e      	beq.n	800511a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80050fc:	23a0      	movs	r3, #160	; 0xa0
 80050fe:	18fb      	adds	r3, r7, r3
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2220      	movs	r2, #32
 8005104:	4013      	ands	r3, r2
 8005106:	d008      	beq.n	800511a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800510c:	2b00      	cmp	r3, #0
 800510e:	d004      	beq.n	800511a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	0010      	movs	r0, r2
 8005118:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2284      	movs	r2, #132	; 0x84
 800511e:	589b      	ldr	r3, [r3, r2]
 8005120:	2194      	movs	r1, #148	; 0x94
 8005122:	187a      	adds	r2, r7, r1
 8005124:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	2240      	movs	r2, #64	; 0x40
 800512e:	4013      	ands	r3, r2
 8005130:	2b40      	cmp	r3, #64	; 0x40
 8005132:	d004      	beq.n	800513e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005134:	187b      	adds	r3, r7, r1
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2228      	movs	r2, #40	; 0x28
 800513a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800513c:	d047      	beq.n	80051ce <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	0018      	movs	r0, r3
 8005142:	f000 fdc7 	bl	8005cd4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	2240      	movs	r2, #64	; 0x40
 800514e:	4013      	ands	r3, r2
 8005150:	2b40      	cmp	r3, #64	; 0x40
 8005152:	d137      	bne.n	80051c4 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005154:	f3ef 8310 	mrs	r3, PRIMASK
 8005158:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800515a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800515c:	2090      	movs	r0, #144	; 0x90
 800515e:	183a      	adds	r2, r7, r0
 8005160:	6013      	str	r3, [r2, #0]
 8005162:	2301      	movs	r3, #1
 8005164:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005166:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005168:	f383 8810 	msr	PRIMASK, r3
}
 800516c:	46c0      	nop			; (mov r8, r8)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	689a      	ldr	r2, [r3, #8]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2140      	movs	r1, #64	; 0x40
 800517a:	438a      	bics	r2, r1
 800517c:	609a      	str	r2, [r3, #8]
 800517e:	183b      	adds	r3, r7, r0
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005184:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005186:	f383 8810 	msr	PRIMASK, r3
}
 800518a:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005190:	2b00      	cmp	r3, #0
 8005192:	d012      	beq.n	80051ba <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005198:	4a14      	ldr	r2, [pc, #80]	; (80051ec <HAL_UART_IRQHandler+0x2a0>)
 800519a:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051a0:	0018      	movs	r0, r3
 80051a2:	f7fd fd6b 	bl	8002c7c <HAL_DMA_Abort_IT>
 80051a6:	1e03      	subs	r3, r0, #0
 80051a8:	d01a      	beq.n	80051e0 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051b4:	0018      	movs	r0, r3
 80051b6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051b8:	e012      	b.n	80051e0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	0018      	movs	r0, r3
 80051be:	f7fb fc63 	bl	8000a88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051c2:	e00d      	b.n	80051e0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	0018      	movs	r0, r3
 80051c8:	f7fb fc5e 	bl	8000a88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051cc:	e008      	b.n	80051e0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	0018      	movs	r0, r3
 80051d2:	f7fb fc59 	bl	8000a88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2284      	movs	r2, #132	; 0x84
 80051da:	2100      	movs	r1, #0
 80051dc:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80051de:	e187      	b.n	80054f0 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051e0:	46c0      	nop			; (mov r8, r8)
    return;
 80051e2:	e185      	b.n	80054f0 <HAL_UART_IRQHandler+0x5a4>
 80051e4:	0000080f 	.word	0x0000080f
 80051e8:	04000120 	.word	0x04000120
 80051ec:	08005d9d 	.word	0x08005d9d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d000      	beq.n	80051fa <HAL_UART_IRQHandler+0x2ae>
 80051f8:	e139      	b.n	800546e <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80051fa:	23a4      	movs	r3, #164	; 0xa4
 80051fc:	18fb      	adds	r3, r7, r3
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2210      	movs	r2, #16
 8005202:	4013      	ands	r3, r2
 8005204:	d100      	bne.n	8005208 <HAL_UART_IRQHandler+0x2bc>
 8005206:	e132      	b.n	800546e <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005208:	23a0      	movs	r3, #160	; 0xa0
 800520a:	18fb      	adds	r3, r7, r3
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2210      	movs	r2, #16
 8005210:	4013      	ands	r3, r2
 8005212:	d100      	bne.n	8005216 <HAL_UART_IRQHandler+0x2ca>
 8005214:	e12b      	b.n	800546e <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2210      	movs	r2, #16
 800521c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	2240      	movs	r2, #64	; 0x40
 8005226:	4013      	ands	r3, r2
 8005228:	2b40      	cmp	r3, #64	; 0x40
 800522a:	d000      	beq.n	800522e <HAL_UART_IRQHandler+0x2e2>
 800522c:	e09f      	b.n	800536e <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	685a      	ldr	r2, [r3, #4]
 8005236:	217e      	movs	r1, #126	; 0x7e
 8005238:	187b      	adds	r3, r7, r1
 800523a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800523c:	187b      	adds	r3, r7, r1
 800523e:	881b      	ldrh	r3, [r3, #0]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d100      	bne.n	8005246 <HAL_UART_IRQHandler+0x2fa>
 8005244:	e156      	b.n	80054f4 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2258      	movs	r2, #88	; 0x58
 800524a:	5a9b      	ldrh	r3, [r3, r2]
 800524c:	187a      	adds	r2, r7, r1
 800524e:	8812      	ldrh	r2, [r2, #0]
 8005250:	429a      	cmp	r2, r3
 8005252:	d300      	bcc.n	8005256 <HAL_UART_IRQHandler+0x30a>
 8005254:	e14e      	b.n	80054f4 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	187a      	adds	r2, r7, r1
 800525a:	215a      	movs	r1, #90	; 0x5a
 800525c:	8812      	ldrh	r2, [r2, #0]
 800525e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	2b20      	cmp	r3, #32
 8005268:	d06f      	beq.n	800534a <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800526a:	f3ef 8310 	mrs	r3, PRIMASK
 800526e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005272:	67bb      	str	r3, [r7, #120]	; 0x78
 8005274:	2301      	movs	r3, #1
 8005276:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800527a:	f383 8810 	msr	PRIMASK, r3
}
 800527e:	46c0      	nop			; (mov r8, r8)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	499e      	ldr	r1, [pc, #632]	; (8005504 <HAL_UART_IRQHandler+0x5b8>)
 800528c:	400a      	ands	r2, r1
 800528e:	601a      	str	r2, [r3, #0]
 8005290:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005292:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005296:	f383 8810 	msr	PRIMASK, r3
}
 800529a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800529c:	f3ef 8310 	mrs	r3, PRIMASK
 80052a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80052a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052a4:	677b      	str	r3, [r7, #116]	; 0x74
 80052a6:	2301      	movs	r3, #1
 80052a8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052ac:	f383 8810 	msr	PRIMASK, r3
}
 80052b0:	46c0      	nop			; (mov r8, r8)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	689a      	ldr	r2, [r3, #8]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2101      	movs	r1, #1
 80052be:	438a      	bics	r2, r1
 80052c0:	609a      	str	r2, [r3, #8]
 80052c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052c4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052c8:	f383 8810 	msr	PRIMASK, r3
}
 80052cc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052ce:	f3ef 8310 	mrs	r3, PRIMASK
 80052d2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80052d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052d6:	673b      	str	r3, [r7, #112]	; 0x70
 80052d8:	2301      	movs	r3, #1
 80052da:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052de:	f383 8810 	msr	PRIMASK, r3
}
 80052e2:	46c0      	nop			; (mov r8, r8)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	689a      	ldr	r2, [r3, #8]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2140      	movs	r1, #64	; 0x40
 80052f0:	438a      	bics	r2, r1
 80052f2:	609a      	str	r2, [r3, #8]
 80052f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052f6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052fa:	f383 8810 	msr	PRIMASK, r3
}
 80052fe:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2280      	movs	r2, #128	; 0x80
 8005304:	2120      	movs	r1, #32
 8005306:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800530e:	f3ef 8310 	mrs	r3, PRIMASK
 8005312:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8005314:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005316:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005318:	2301      	movs	r3, #1
 800531a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800531c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800531e:	f383 8810 	msr	PRIMASK, r3
}
 8005322:	46c0      	nop			; (mov r8, r8)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2110      	movs	r1, #16
 8005330:	438a      	bics	r2, r1
 8005332:	601a      	str	r2, [r3, #0]
 8005334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005336:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005338:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800533a:	f383 8810 	msr	PRIMASK, r3
}
 800533e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005344:	0018      	movs	r0, r3
 8005346:	f7fd fc61 	bl	8002c0c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2202      	movs	r2, #2
 800534e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2258      	movs	r2, #88	; 0x58
 8005354:	5a9a      	ldrh	r2, [r3, r2]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	215a      	movs	r1, #90	; 0x5a
 800535a:	5a5b      	ldrh	r3, [r3, r1]
 800535c:	b29b      	uxth	r3, r3
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	b29a      	uxth	r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	0011      	movs	r1, r2
 8005366:	0018      	movs	r0, r3
 8005368:	f000 f8d8 	bl	800551c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800536c:	e0c2      	b.n	80054f4 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2258      	movs	r2, #88	; 0x58
 8005372:	5a99      	ldrh	r1, [r3, r2]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	225a      	movs	r2, #90	; 0x5a
 8005378:	5a9b      	ldrh	r3, [r3, r2]
 800537a:	b29a      	uxth	r2, r3
 800537c:	208e      	movs	r0, #142	; 0x8e
 800537e:	183b      	adds	r3, r7, r0
 8005380:	1a8a      	subs	r2, r1, r2
 8005382:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	225a      	movs	r2, #90	; 0x5a
 8005388:	5a9b      	ldrh	r3, [r3, r2]
 800538a:	b29b      	uxth	r3, r3
 800538c:	2b00      	cmp	r3, #0
 800538e:	d100      	bne.n	8005392 <HAL_UART_IRQHandler+0x446>
 8005390:	e0b2      	b.n	80054f8 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8005392:	183b      	adds	r3, r7, r0
 8005394:	881b      	ldrh	r3, [r3, #0]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d100      	bne.n	800539c <HAL_UART_IRQHandler+0x450>
 800539a:	e0ad      	b.n	80054f8 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800539c:	f3ef 8310 	mrs	r3, PRIMASK
 80053a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80053a2:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053a4:	2488      	movs	r4, #136	; 0x88
 80053a6:	193a      	adds	r2, r7, r4
 80053a8:	6013      	str	r3, [r2, #0]
 80053aa:	2301      	movs	r3, #1
 80053ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	f383 8810 	msr	PRIMASK, r3
}
 80053b4:	46c0      	nop			; (mov r8, r8)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4951      	ldr	r1, [pc, #324]	; (8005508 <HAL_UART_IRQHandler+0x5bc>)
 80053c2:	400a      	ands	r2, r1
 80053c4:	601a      	str	r2, [r3, #0]
 80053c6:	193b      	adds	r3, r7, r4
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	f383 8810 	msr	PRIMASK, r3
}
 80053d2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053d4:	f3ef 8310 	mrs	r3, PRIMASK
 80053d8:	61bb      	str	r3, [r7, #24]
  return(result);
 80053da:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053dc:	2484      	movs	r4, #132	; 0x84
 80053de:	193a      	adds	r2, r7, r4
 80053e0:	6013      	str	r3, [r2, #0]
 80053e2:	2301      	movs	r3, #1
 80053e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	f383 8810 	msr	PRIMASK, r3
}
 80053ec:	46c0      	nop			; (mov r8, r8)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	689a      	ldr	r2, [r3, #8]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2101      	movs	r1, #1
 80053fa:	438a      	bics	r2, r1
 80053fc:	609a      	str	r2, [r3, #8]
 80053fe:	193b      	adds	r3, r7, r4
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005404:	6a3b      	ldr	r3, [r7, #32]
 8005406:	f383 8810 	msr	PRIMASK, r3
}
 800540a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2280      	movs	r2, #128	; 0x80
 8005410:	2120      	movs	r1, #32
 8005412:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005420:	f3ef 8310 	mrs	r3, PRIMASK
 8005424:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005426:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005428:	2480      	movs	r4, #128	; 0x80
 800542a:	193a      	adds	r2, r7, r4
 800542c:	6013      	str	r3, [r2, #0]
 800542e:	2301      	movs	r3, #1
 8005430:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005434:	f383 8810 	msr	PRIMASK, r3
}
 8005438:	46c0      	nop			; (mov r8, r8)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2110      	movs	r1, #16
 8005446:	438a      	bics	r2, r1
 8005448:	601a      	str	r2, [r3, #0]
 800544a:	193b      	adds	r3, r7, r4
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005452:	f383 8810 	msr	PRIMASK, r3
}
 8005456:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2202      	movs	r2, #2
 800545c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800545e:	183b      	adds	r3, r7, r0
 8005460:	881a      	ldrh	r2, [r3, #0]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	0011      	movs	r1, r2
 8005466:	0018      	movs	r0, r3
 8005468:	f000 f858 	bl	800551c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800546c:	e044      	b.n	80054f8 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800546e:	23a4      	movs	r3, #164	; 0xa4
 8005470:	18fb      	adds	r3, r7, r3
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	2380      	movs	r3, #128	; 0x80
 8005476:	035b      	lsls	r3, r3, #13
 8005478:	4013      	ands	r3, r2
 800547a:	d010      	beq.n	800549e <HAL_UART_IRQHandler+0x552>
 800547c:	239c      	movs	r3, #156	; 0x9c
 800547e:	18fb      	adds	r3, r7, r3
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	2380      	movs	r3, #128	; 0x80
 8005484:	03db      	lsls	r3, r3, #15
 8005486:	4013      	ands	r3, r2
 8005488:	d009      	beq.n	800549e <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2280      	movs	r2, #128	; 0x80
 8005490:	0352      	lsls	r2, r2, #13
 8005492:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	0018      	movs	r0, r3
 8005498:	f000 fe7a 	bl	8006190 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800549c:	e02f      	b.n	80054fe <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800549e:	23a4      	movs	r3, #164	; 0xa4
 80054a0:	18fb      	adds	r3, r7, r3
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2280      	movs	r2, #128	; 0x80
 80054a6:	4013      	ands	r3, r2
 80054a8:	d00f      	beq.n	80054ca <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80054aa:	23a0      	movs	r3, #160	; 0xa0
 80054ac:	18fb      	adds	r3, r7, r3
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2280      	movs	r2, #128	; 0x80
 80054b2:	4013      	ands	r3, r2
 80054b4:	d009      	beq.n	80054ca <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d01e      	beq.n	80054fc <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	0010      	movs	r0, r2
 80054c6:	4798      	blx	r3
    }
    return;
 80054c8:	e018      	b.n	80054fc <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80054ca:	23a4      	movs	r3, #164	; 0xa4
 80054cc:	18fb      	adds	r3, r7, r3
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2240      	movs	r2, #64	; 0x40
 80054d2:	4013      	ands	r3, r2
 80054d4:	d013      	beq.n	80054fe <HAL_UART_IRQHandler+0x5b2>
 80054d6:	23a0      	movs	r3, #160	; 0xa0
 80054d8:	18fb      	adds	r3, r7, r3
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2240      	movs	r2, #64	; 0x40
 80054de:	4013      	ands	r3, r2
 80054e0:	d00d      	beq.n	80054fe <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	0018      	movs	r0, r3
 80054e6:	f000 fc70 	bl	8005dca <UART_EndTransmit_IT>
    return;
 80054ea:	e008      	b.n	80054fe <HAL_UART_IRQHandler+0x5b2>
      return;
 80054ec:	46c0      	nop			; (mov r8, r8)
 80054ee:	e006      	b.n	80054fe <HAL_UART_IRQHandler+0x5b2>
    return;
 80054f0:	46c0      	nop			; (mov r8, r8)
 80054f2:	e004      	b.n	80054fe <HAL_UART_IRQHandler+0x5b2>
      return;
 80054f4:	46c0      	nop			; (mov r8, r8)
 80054f6:	e002      	b.n	80054fe <HAL_UART_IRQHandler+0x5b2>
      return;
 80054f8:	46c0      	nop			; (mov r8, r8)
 80054fa:	e000      	b.n	80054fe <HAL_UART_IRQHandler+0x5b2>
    return;
 80054fc:	46c0      	nop			; (mov r8, r8)
  }

}
 80054fe:	46bd      	mov	sp, r7
 8005500:	b02b      	add	sp, #172	; 0xac
 8005502:	bd90      	pop	{r4, r7, pc}
 8005504:	fffffeff 	.word	0xfffffeff
 8005508:	fffffedf 	.word	0xfffffedf

0800550c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005514:	46c0      	nop			; (mov r8, r8)
 8005516:	46bd      	mov	sp, r7
 8005518:	b002      	add	sp, #8
 800551a:	bd80      	pop	{r7, pc}

0800551c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	000a      	movs	r2, r1
 8005526:	1cbb      	adds	r3, r7, #2
 8005528:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800552a:	46c0      	nop			; (mov r8, r8)
 800552c:	46bd      	mov	sp, r7
 800552e:	b002      	add	sp, #8
 8005530:	bd80      	pop	{r7, pc}
	...

08005534 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b088      	sub	sp, #32
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800553c:	231e      	movs	r3, #30
 800553e:	18fb      	adds	r3, r7, r3
 8005540:	2200      	movs	r2, #0
 8005542:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	689a      	ldr	r2, [r3, #8]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	431a      	orrs	r2, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	431a      	orrs	r2, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	69db      	ldr	r3, [r3, #28]
 8005558:	4313      	orrs	r3, r2
 800555a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a8d      	ldr	r2, [pc, #564]	; (8005798 <UART_SetConfig+0x264>)
 8005564:	4013      	ands	r3, r2
 8005566:	0019      	movs	r1, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	430a      	orrs	r2, r1
 8005570:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	4a88      	ldr	r2, [pc, #544]	; (800579c <UART_SetConfig+0x268>)
 800557a:	4013      	ands	r3, r2
 800557c:	0019      	movs	r1, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	68da      	ldr	r2, [r3, #12]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	430a      	orrs	r2, r1
 8005588:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a1b      	ldr	r3, [r3, #32]
 8005594:	697a      	ldr	r2, [r7, #20]
 8005596:	4313      	orrs	r3, r2
 8005598:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	4a7f      	ldr	r2, [pc, #508]	; (80057a0 <UART_SetConfig+0x26c>)
 80055a2:	4013      	ands	r3, r2
 80055a4:	0019      	movs	r1, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	430a      	orrs	r2, r1
 80055ae:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a7b      	ldr	r2, [pc, #492]	; (80057a4 <UART_SetConfig+0x270>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d127      	bne.n	800560a <UART_SetConfig+0xd6>
 80055ba:	4b7b      	ldr	r3, [pc, #492]	; (80057a8 <UART_SetConfig+0x274>)
 80055bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055be:	2203      	movs	r2, #3
 80055c0:	4013      	ands	r3, r2
 80055c2:	2b03      	cmp	r3, #3
 80055c4:	d00d      	beq.n	80055e2 <UART_SetConfig+0xae>
 80055c6:	d81b      	bhi.n	8005600 <UART_SetConfig+0xcc>
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d014      	beq.n	80055f6 <UART_SetConfig+0xc2>
 80055cc:	d818      	bhi.n	8005600 <UART_SetConfig+0xcc>
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d002      	beq.n	80055d8 <UART_SetConfig+0xa4>
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d00a      	beq.n	80055ec <UART_SetConfig+0xb8>
 80055d6:	e013      	b.n	8005600 <UART_SetConfig+0xcc>
 80055d8:	231f      	movs	r3, #31
 80055da:	18fb      	adds	r3, r7, r3
 80055dc:	2200      	movs	r2, #0
 80055de:	701a      	strb	r2, [r3, #0]
 80055e0:	e021      	b.n	8005626 <UART_SetConfig+0xf2>
 80055e2:	231f      	movs	r3, #31
 80055e4:	18fb      	adds	r3, r7, r3
 80055e6:	2202      	movs	r2, #2
 80055e8:	701a      	strb	r2, [r3, #0]
 80055ea:	e01c      	b.n	8005626 <UART_SetConfig+0xf2>
 80055ec:	231f      	movs	r3, #31
 80055ee:	18fb      	adds	r3, r7, r3
 80055f0:	2204      	movs	r2, #4
 80055f2:	701a      	strb	r2, [r3, #0]
 80055f4:	e017      	b.n	8005626 <UART_SetConfig+0xf2>
 80055f6:	231f      	movs	r3, #31
 80055f8:	18fb      	adds	r3, r7, r3
 80055fa:	2208      	movs	r2, #8
 80055fc:	701a      	strb	r2, [r3, #0]
 80055fe:	e012      	b.n	8005626 <UART_SetConfig+0xf2>
 8005600:	231f      	movs	r3, #31
 8005602:	18fb      	adds	r3, r7, r3
 8005604:	2210      	movs	r2, #16
 8005606:	701a      	strb	r2, [r3, #0]
 8005608:	e00d      	b.n	8005626 <UART_SetConfig+0xf2>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a67      	ldr	r2, [pc, #412]	; (80057ac <UART_SetConfig+0x278>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d104      	bne.n	800561e <UART_SetConfig+0xea>
 8005614:	231f      	movs	r3, #31
 8005616:	18fb      	adds	r3, r7, r3
 8005618:	2200      	movs	r2, #0
 800561a:	701a      	strb	r2, [r3, #0]
 800561c:	e003      	b.n	8005626 <UART_SetConfig+0xf2>
 800561e:	231f      	movs	r3, #31
 8005620:	18fb      	adds	r3, r7, r3
 8005622:	2210      	movs	r2, #16
 8005624:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	69da      	ldr	r2, [r3, #28]
 800562a:	2380      	movs	r3, #128	; 0x80
 800562c:	021b      	lsls	r3, r3, #8
 800562e:	429a      	cmp	r2, r3
 8005630:	d15c      	bne.n	80056ec <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8005632:	231f      	movs	r3, #31
 8005634:	18fb      	adds	r3, r7, r3
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	2b08      	cmp	r3, #8
 800563a:	d015      	beq.n	8005668 <UART_SetConfig+0x134>
 800563c:	dc18      	bgt.n	8005670 <UART_SetConfig+0x13c>
 800563e:	2b04      	cmp	r3, #4
 8005640:	d00d      	beq.n	800565e <UART_SetConfig+0x12a>
 8005642:	dc15      	bgt.n	8005670 <UART_SetConfig+0x13c>
 8005644:	2b00      	cmp	r3, #0
 8005646:	d002      	beq.n	800564e <UART_SetConfig+0x11a>
 8005648:	2b02      	cmp	r3, #2
 800564a:	d005      	beq.n	8005658 <UART_SetConfig+0x124>
 800564c:	e010      	b.n	8005670 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800564e:	f7fe fa89 	bl	8003b64 <HAL_RCC_GetPCLK1Freq>
 8005652:	0003      	movs	r3, r0
 8005654:	61bb      	str	r3, [r7, #24]
        break;
 8005656:	e012      	b.n	800567e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005658:	4b55      	ldr	r3, [pc, #340]	; (80057b0 <UART_SetConfig+0x27c>)
 800565a:	61bb      	str	r3, [r7, #24]
        break;
 800565c:	e00f      	b.n	800567e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800565e:	f7fe fa05 	bl	8003a6c <HAL_RCC_GetSysClockFreq>
 8005662:	0003      	movs	r3, r0
 8005664:	61bb      	str	r3, [r7, #24]
        break;
 8005666:	e00a      	b.n	800567e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005668:	2380      	movs	r3, #128	; 0x80
 800566a:	021b      	lsls	r3, r3, #8
 800566c:	61bb      	str	r3, [r7, #24]
        break;
 800566e:	e006      	b.n	800567e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8005670:	2300      	movs	r3, #0
 8005672:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005674:	231e      	movs	r3, #30
 8005676:	18fb      	adds	r3, r7, r3
 8005678:	2201      	movs	r2, #1
 800567a:	701a      	strb	r2, [r3, #0]
        break;
 800567c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d100      	bne.n	8005686 <UART_SetConfig+0x152>
 8005684:	e07a      	b.n	800577c <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	005a      	lsls	r2, r3, #1
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	085b      	lsrs	r3, r3, #1
 8005690:	18d2      	adds	r2, r2, r3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	0019      	movs	r1, r3
 8005698:	0010      	movs	r0, r2
 800569a:	f7fa fd35 	bl	8000108 <__udivsi3>
 800569e:	0003      	movs	r3, r0
 80056a0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	2b0f      	cmp	r3, #15
 80056a6:	d91c      	bls.n	80056e2 <UART_SetConfig+0x1ae>
 80056a8:	693a      	ldr	r2, [r7, #16]
 80056aa:	2380      	movs	r3, #128	; 0x80
 80056ac:	025b      	lsls	r3, r3, #9
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d217      	bcs.n	80056e2 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	b29a      	uxth	r2, r3
 80056b6:	200e      	movs	r0, #14
 80056b8:	183b      	adds	r3, r7, r0
 80056ba:	210f      	movs	r1, #15
 80056bc:	438a      	bics	r2, r1
 80056be:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	085b      	lsrs	r3, r3, #1
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	2207      	movs	r2, #7
 80056c8:	4013      	ands	r3, r2
 80056ca:	b299      	uxth	r1, r3
 80056cc:	183b      	adds	r3, r7, r0
 80056ce:	183a      	adds	r2, r7, r0
 80056d0:	8812      	ldrh	r2, [r2, #0]
 80056d2:	430a      	orrs	r2, r1
 80056d4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	183a      	adds	r2, r7, r0
 80056dc:	8812      	ldrh	r2, [r2, #0]
 80056de:	60da      	str	r2, [r3, #12]
 80056e0:	e04c      	b.n	800577c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80056e2:	231e      	movs	r3, #30
 80056e4:	18fb      	adds	r3, r7, r3
 80056e6:	2201      	movs	r2, #1
 80056e8:	701a      	strb	r2, [r3, #0]
 80056ea:	e047      	b.n	800577c <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056ec:	231f      	movs	r3, #31
 80056ee:	18fb      	adds	r3, r7, r3
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	2b08      	cmp	r3, #8
 80056f4:	d015      	beq.n	8005722 <UART_SetConfig+0x1ee>
 80056f6:	dc18      	bgt.n	800572a <UART_SetConfig+0x1f6>
 80056f8:	2b04      	cmp	r3, #4
 80056fa:	d00d      	beq.n	8005718 <UART_SetConfig+0x1e4>
 80056fc:	dc15      	bgt.n	800572a <UART_SetConfig+0x1f6>
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d002      	beq.n	8005708 <UART_SetConfig+0x1d4>
 8005702:	2b02      	cmp	r3, #2
 8005704:	d005      	beq.n	8005712 <UART_SetConfig+0x1de>
 8005706:	e010      	b.n	800572a <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005708:	f7fe fa2c 	bl	8003b64 <HAL_RCC_GetPCLK1Freq>
 800570c:	0003      	movs	r3, r0
 800570e:	61bb      	str	r3, [r7, #24]
        break;
 8005710:	e012      	b.n	8005738 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005712:	4b27      	ldr	r3, [pc, #156]	; (80057b0 <UART_SetConfig+0x27c>)
 8005714:	61bb      	str	r3, [r7, #24]
        break;
 8005716:	e00f      	b.n	8005738 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005718:	f7fe f9a8 	bl	8003a6c <HAL_RCC_GetSysClockFreq>
 800571c:	0003      	movs	r3, r0
 800571e:	61bb      	str	r3, [r7, #24]
        break;
 8005720:	e00a      	b.n	8005738 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005722:	2380      	movs	r3, #128	; 0x80
 8005724:	021b      	lsls	r3, r3, #8
 8005726:	61bb      	str	r3, [r7, #24]
        break;
 8005728:	e006      	b.n	8005738 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800572a:	2300      	movs	r3, #0
 800572c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800572e:	231e      	movs	r3, #30
 8005730:	18fb      	adds	r3, r7, r3
 8005732:	2201      	movs	r2, #1
 8005734:	701a      	strb	r2, [r3, #0]
        break;
 8005736:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d01e      	beq.n	800577c <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	085a      	lsrs	r2, r3, #1
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	18d2      	adds	r2, r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	0019      	movs	r1, r3
 800574e:	0010      	movs	r0, r2
 8005750:	f7fa fcda 	bl	8000108 <__udivsi3>
 8005754:	0003      	movs	r3, r0
 8005756:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	2b0f      	cmp	r3, #15
 800575c:	d90a      	bls.n	8005774 <UART_SetConfig+0x240>
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	2380      	movs	r3, #128	; 0x80
 8005762:	025b      	lsls	r3, r3, #9
 8005764:	429a      	cmp	r2, r3
 8005766:	d205      	bcs.n	8005774 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	b29a      	uxth	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	60da      	str	r2, [r3, #12]
 8005772:	e003      	b.n	800577c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8005774:	231e      	movs	r3, #30
 8005776:	18fb      	adds	r3, r7, r3
 8005778:	2201      	movs	r2, #1
 800577a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005788:	231e      	movs	r3, #30
 800578a:	18fb      	adds	r3, r7, r3
 800578c:	781b      	ldrb	r3, [r3, #0]
}
 800578e:	0018      	movs	r0, r3
 8005790:	46bd      	mov	sp, r7
 8005792:	b008      	add	sp, #32
 8005794:	bd80      	pop	{r7, pc}
 8005796:	46c0      	nop			; (mov r8, r8)
 8005798:	efff69f3 	.word	0xefff69f3
 800579c:	ffffcfff 	.word	0xffffcfff
 80057a0:	fffff4ff 	.word	0xfffff4ff
 80057a4:	40013800 	.word	0x40013800
 80057a8:	40021000 	.word	0x40021000
 80057ac:	40004400 	.word	0x40004400
 80057b0:	007a1200 	.word	0x007a1200

080057b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c0:	2201      	movs	r2, #1
 80057c2:	4013      	ands	r3, r2
 80057c4:	d00b      	beq.n	80057de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	4a4a      	ldr	r2, [pc, #296]	; (80058f8 <UART_AdvFeatureConfig+0x144>)
 80057ce:	4013      	ands	r3, r2
 80057d0:	0019      	movs	r1, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	430a      	orrs	r2, r1
 80057dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e2:	2202      	movs	r2, #2
 80057e4:	4013      	ands	r3, r2
 80057e6:	d00b      	beq.n	8005800 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	4a43      	ldr	r2, [pc, #268]	; (80058fc <UART_AdvFeatureConfig+0x148>)
 80057f0:	4013      	ands	r3, r2
 80057f2:	0019      	movs	r1, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	430a      	orrs	r2, r1
 80057fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005804:	2204      	movs	r2, #4
 8005806:	4013      	ands	r3, r2
 8005808:	d00b      	beq.n	8005822 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	4a3b      	ldr	r2, [pc, #236]	; (8005900 <UART_AdvFeatureConfig+0x14c>)
 8005812:	4013      	ands	r3, r2
 8005814:	0019      	movs	r1, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	430a      	orrs	r2, r1
 8005820:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005826:	2208      	movs	r2, #8
 8005828:	4013      	ands	r3, r2
 800582a:	d00b      	beq.n	8005844 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	4a34      	ldr	r2, [pc, #208]	; (8005904 <UART_AdvFeatureConfig+0x150>)
 8005834:	4013      	ands	r3, r2
 8005836:	0019      	movs	r1, r3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	430a      	orrs	r2, r1
 8005842:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005848:	2210      	movs	r2, #16
 800584a:	4013      	ands	r3, r2
 800584c:	d00b      	beq.n	8005866 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	4a2c      	ldr	r2, [pc, #176]	; (8005908 <UART_AdvFeatureConfig+0x154>)
 8005856:	4013      	ands	r3, r2
 8005858:	0019      	movs	r1, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	430a      	orrs	r2, r1
 8005864:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586a:	2220      	movs	r2, #32
 800586c:	4013      	ands	r3, r2
 800586e:	d00b      	beq.n	8005888 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	4a25      	ldr	r2, [pc, #148]	; (800590c <UART_AdvFeatureConfig+0x158>)
 8005878:	4013      	ands	r3, r2
 800587a:	0019      	movs	r1, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	430a      	orrs	r2, r1
 8005886:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588c:	2240      	movs	r2, #64	; 0x40
 800588e:	4013      	ands	r3, r2
 8005890:	d01d      	beq.n	80058ce <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	4a1d      	ldr	r2, [pc, #116]	; (8005910 <UART_AdvFeatureConfig+0x15c>)
 800589a:	4013      	ands	r3, r2
 800589c:	0019      	movs	r1, r3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	430a      	orrs	r2, r1
 80058a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058ae:	2380      	movs	r3, #128	; 0x80
 80058b0:	035b      	lsls	r3, r3, #13
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d10b      	bne.n	80058ce <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	4a15      	ldr	r2, [pc, #84]	; (8005914 <UART_AdvFeatureConfig+0x160>)
 80058be:	4013      	ands	r3, r2
 80058c0:	0019      	movs	r1, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	430a      	orrs	r2, r1
 80058cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d2:	2280      	movs	r2, #128	; 0x80
 80058d4:	4013      	ands	r3, r2
 80058d6:	d00b      	beq.n	80058f0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	4a0e      	ldr	r2, [pc, #56]	; (8005918 <UART_AdvFeatureConfig+0x164>)
 80058e0:	4013      	ands	r3, r2
 80058e2:	0019      	movs	r1, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	430a      	orrs	r2, r1
 80058ee:	605a      	str	r2, [r3, #4]
  }
}
 80058f0:	46c0      	nop			; (mov r8, r8)
 80058f2:	46bd      	mov	sp, r7
 80058f4:	b002      	add	sp, #8
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	fffdffff 	.word	0xfffdffff
 80058fc:	fffeffff 	.word	0xfffeffff
 8005900:	fffbffff 	.word	0xfffbffff
 8005904:	ffff7fff 	.word	0xffff7fff
 8005908:	ffffefff 	.word	0xffffefff
 800590c:	ffffdfff 	.word	0xffffdfff
 8005910:	ffefffff 	.word	0xffefffff
 8005914:	ff9fffff 	.word	0xff9fffff
 8005918:	fff7ffff 	.word	0xfff7ffff

0800591c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b092      	sub	sp, #72	; 0x48
 8005920:	af02      	add	r7, sp, #8
 8005922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2284      	movs	r2, #132	; 0x84
 8005928:	2100      	movs	r1, #0
 800592a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800592c:	f7fc fbf6 	bl	800211c <HAL_GetTick>
 8005930:	0003      	movs	r3, r0
 8005932:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2208      	movs	r2, #8
 800593c:	4013      	ands	r3, r2
 800593e:	2b08      	cmp	r3, #8
 8005940:	d12c      	bne.n	800599c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005944:	2280      	movs	r2, #128	; 0x80
 8005946:	0391      	lsls	r1, r2, #14
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	4a46      	ldr	r2, [pc, #280]	; (8005a64 <UART_CheckIdleState+0x148>)
 800594c:	9200      	str	r2, [sp, #0]
 800594e:	2200      	movs	r2, #0
 8005950:	f000 f88c 	bl	8005a6c <UART_WaitOnFlagUntilTimeout>
 8005954:	1e03      	subs	r3, r0, #0
 8005956:	d021      	beq.n	800599c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005958:	f3ef 8310 	mrs	r3, PRIMASK
 800595c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800595e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005960:	63bb      	str	r3, [r7, #56]	; 0x38
 8005962:	2301      	movs	r3, #1
 8005964:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005968:	f383 8810 	msr	PRIMASK, r3
}
 800596c:	46c0      	nop			; (mov r8, r8)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2180      	movs	r1, #128	; 0x80
 800597a:	438a      	bics	r2, r1
 800597c:	601a      	str	r2, [r3, #0]
 800597e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005980:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005984:	f383 8810 	msr	PRIMASK, r3
}
 8005988:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2220      	movs	r2, #32
 800598e:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2278      	movs	r2, #120	; 0x78
 8005994:	2100      	movs	r1, #0
 8005996:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005998:	2303      	movs	r3, #3
 800599a:	e05f      	b.n	8005a5c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	2204      	movs	r2, #4
 80059a4:	4013      	ands	r3, r2
 80059a6:	2b04      	cmp	r3, #4
 80059a8:	d146      	bne.n	8005a38 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059ac:	2280      	movs	r2, #128	; 0x80
 80059ae:	03d1      	lsls	r1, r2, #15
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	4a2c      	ldr	r2, [pc, #176]	; (8005a64 <UART_CheckIdleState+0x148>)
 80059b4:	9200      	str	r2, [sp, #0]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f000 f858 	bl	8005a6c <UART_WaitOnFlagUntilTimeout>
 80059bc:	1e03      	subs	r3, r0, #0
 80059be:	d03b      	beq.n	8005a38 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059c0:	f3ef 8310 	mrs	r3, PRIMASK
 80059c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80059c6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059c8:	637b      	str	r3, [r7, #52]	; 0x34
 80059ca:	2301      	movs	r3, #1
 80059cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	f383 8810 	msr	PRIMASK, r3
}
 80059d4:	46c0      	nop			; (mov r8, r8)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4921      	ldr	r1, [pc, #132]	; (8005a68 <UART_CheckIdleState+0x14c>)
 80059e2:	400a      	ands	r2, r1
 80059e4:	601a      	str	r2, [r3, #0]
 80059e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	f383 8810 	msr	PRIMASK, r3
}
 80059f0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059f2:	f3ef 8310 	mrs	r3, PRIMASK
 80059f6:	61bb      	str	r3, [r7, #24]
  return(result);
 80059f8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059fa:	633b      	str	r3, [r7, #48]	; 0x30
 80059fc:	2301      	movs	r3, #1
 80059fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	f383 8810 	msr	PRIMASK, r3
}
 8005a06:	46c0      	nop			; (mov r8, r8)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	689a      	ldr	r2, [r3, #8]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2101      	movs	r1, #1
 8005a14:	438a      	bics	r2, r1
 8005a16:	609a      	str	r2, [r3, #8]
 8005a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a1c:	6a3b      	ldr	r3, [r7, #32]
 8005a1e:	f383 8810 	msr	PRIMASK, r3
}
 8005a22:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2280      	movs	r2, #128	; 0x80
 8005a28:	2120      	movs	r1, #32
 8005a2a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2278      	movs	r2, #120	; 0x78
 8005a30:	2100      	movs	r1, #0
 8005a32:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	e011      	b.n	8005a5c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2220      	movs	r2, #32
 8005a3c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2280      	movs	r2, #128	; 0x80
 8005a42:	2120      	movs	r1, #32
 8005a44:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2278      	movs	r2, #120	; 0x78
 8005a56:	2100      	movs	r1, #0
 8005a58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a5a:	2300      	movs	r3, #0
}
 8005a5c:	0018      	movs	r0, r3
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	b010      	add	sp, #64	; 0x40
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	01ffffff 	.word	0x01ffffff
 8005a68:	fffffedf 	.word	0xfffffedf

08005a6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b084      	sub	sp, #16
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	603b      	str	r3, [r7, #0]
 8005a78:	1dfb      	adds	r3, r7, #7
 8005a7a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a7c:	e04b      	b.n	8005b16 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	3301      	adds	r3, #1
 8005a82:	d048      	beq.n	8005b16 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a84:	f7fc fb4a 	bl	800211c <HAL_GetTick>
 8005a88:	0002      	movs	r2, r0
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	69ba      	ldr	r2, [r7, #24]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d302      	bcc.n	8005a9a <UART_WaitOnFlagUntilTimeout+0x2e>
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d101      	bne.n	8005a9e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e04b      	b.n	8005b36 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2204      	movs	r2, #4
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	d035      	beq.n	8005b16 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	69db      	ldr	r3, [r3, #28]
 8005ab0:	2208      	movs	r2, #8
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	2b08      	cmp	r3, #8
 8005ab6:	d111      	bne.n	8005adc <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2208      	movs	r2, #8
 8005abe:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	0018      	movs	r0, r3
 8005ac4:	f000 f906 	bl	8005cd4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2284      	movs	r2, #132	; 0x84
 8005acc:	2108      	movs	r1, #8
 8005ace:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2278      	movs	r2, #120	; 0x78
 8005ad4:	2100      	movs	r1, #0
 8005ad6:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e02c      	b.n	8005b36 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	69da      	ldr	r2, [r3, #28]
 8005ae2:	2380      	movs	r3, #128	; 0x80
 8005ae4:	011b      	lsls	r3, r3, #4
 8005ae6:	401a      	ands	r2, r3
 8005ae8:	2380      	movs	r3, #128	; 0x80
 8005aea:	011b      	lsls	r3, r3, #4
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d112      	bne.n	8005b16 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2280      	movs	r2, #128	; 0x80
 8005af6:	0112      	lsls	r2, r2, #4
 8005af8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	0018      	movs	r0, r3
 8005afe:	f000 f8e9 	bl	8005cd4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2284      	movs	r2, #132	; 0x84
 8005b06:	2120      	movs	r1, #32
 8005b08:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2278      	movs	r2, #120	; 0x78
 8005b0e:	2100      	movs	r1, #0
 8005b10:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e00f      	b.n	8005b36 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	69db      	ldr	r3, [r3, #28]
 8005b1c:	68ba      	ldr	r2, [r7, #8]
 8005b1e:	4013      	ands	r3, r2
 8005b20:	68ba      	ldr	r2, [r7, #8]
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	425a      	negs	r2, r3
 8005b26:	4153      	adcs	r3, r2
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	001a      	movs	r2, r3
 8005b2c:	1dfb      	adds	r3, r7, #7
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d0a4      	beq.n	8005a7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	0018      	movs	r0, r3
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	b004      	add	sp, #16
 8005b3c:	bd80      	pop	{r7, pc}
	...

08005b40 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b090      	sub	sp, #64	; 0x40
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	1dbb      	adds	r3, r7, #6
 8005b4c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	68ba      	ldr	r2, [r7, #8]
 8005b52:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	1dba      	adds	r2, r7, #6
 8005b58:	2158      	movs	r1, #88	; 0x58
 8005b5a:	8812      	ldrh	r2, [r2, #0]
 8005b5c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	1dba      	adds	r2, r7, #6
 8005b62:	215a      	movs	r1, #90	; 0x5a
 8005b64:	8812      	ldrh	r2, [r2, #0]
 8005b66:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	689a      	ldr	r2, [r3, #8]
 8005b72:	2380      	movs	r3, #128	; 0x80
 8005b74:	015b      	lsls	r3, r3, #5
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d10d      	bne.n	8005b96 <UART_Start_Receive_IT+0x56>
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d104      	bne.n	8005b8c <UART_Start_Receive_IT+0x4c>
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	225c      	movs	r2, #92	; 0x5c
 8005b86:	4950      	ldr	r1, [pc, #320]	; (8005cc8 <UART_Start_Receive_IT+0x188>)
 8005b88:	5299      	strh	r1, [r3, r2]
 8005b8a:	e02e      	b.n	8005bea <UART_Start_Receive_IT+0xaa>
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	225c      	movs	r2, #92	; 0x5c
 8005b90:	21ff      	movs	r1, #255	; 0xff
 8005b92:	5299      	strh	r1, [r3, r2]
 8005b94:	e029      	b.n	8005bea <UART_Start_Receive_IT+0xaa>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d10d      	bne.n	8005bba <UART_Start_Receive_IT+0x7a>
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d104      	bne.n	8005bb0 <UART_Start_Receive_IT+0x70>
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	225c      	movs	r2, #92	; 0x5c
 8005baa:	21ff      	movs	r1, #255	; 0xff
 8005bac:	5299      	strh	r1, [r3, r2]
 8005bae:	e01c      	b.n	8005bea <UART_Start_Receive_IT+0xaa>
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	225c      	movs	r2, #92	; 0x5c
 8005bb4:	217f      	movs	r1, #127	; 0x7f
 8005bb6:	5299      	strh	r1, [r3, r2]
 8005bb8:	e017      	b.n	8005bea <UART_Start_Receive_IT+0xaa>
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	689a      	ldr	r2, [r3, #8]
 8005bbe:	2380      	movs	r3, #128	; 0x80
 8005bc0:	055b      	lsls	r3, r3, #21
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d10d      	bne.n	8005be2 <UART_Start_Receive_IT+0xa2>
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d104      	bne.n	8005bd8 <UART_Start_Receive_IT+0x98>
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	225c      	movs	r2, #92	; 0x5c
 8005bd2:	217f      	movs	r1, #127	; 0x7f
 8005bd4:	5299      	strh	r1, [r3, r2]
 8005bd6:	e008      	b.n	8005bea <UART_Start_Receive_IT+0xaa>
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	225c      	movs	r2, #92	; 0x5c
 8005bdc:	213f      	movs	r1, #63	; 0x3f
 8005bde:	5299      	strh	r1, [r3, r2]
 8005be0:	e003      	b.n	8005bea <UART_Start_Receive_IT+0xaa>
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	225c      	movs	r2, #92	; 0x5c
 8005be6:	2100      	movs	r1, #0
 8005be8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2284      	movs	r2, #132	; 0x84
 8005bee:	2100      	movs	r1, #0
 8005bf0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2280      	movs	r2, #128	; 0x80
 8005bf6:	2122      	movs	r1, #34	; 0x22
 8005bf8:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bfa:	f3ef 8310 	mrs	r3, PRIMASK
 8005bfe:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005c00:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c04:	2301      	movs	r3, #1
 8005c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c0a:	f383 8810 	msr	PRIMASK, r3
}
 8005c0e:	46c0      	nop			; (mov r8, r8)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	689a      	ldr	r2, [r3, #8]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2101      	movs	r1, #1
 8005c1c:	430a      	orrs	r2, r1
 8005c1e:	609a      	str	r2, [r3, #8]
 8005c20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c22:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c26:	f383 8810 	msr	PRIMASK, r3
}
 8005c2a:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	689a      	ldr	r2, [r3, #8]
 8005c30:	2380      	movs	r3, #128	; 0x80
 8005c32:	015b      	lsls	r3, r3, #5
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d107      	bne.n	8005c48 <UART_Start_Receive_IT+0x108>
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d103      	bne.n	8005c48 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	4a22      	ldr	r2, [pc, #136]	; (8005ccc <UART_Start_Receive_IT+0x18c>)
 8005c44:	669a      	str	r2, [r3, #104]	; 0x68
 8005c46:	e002      	b.n	8005c4e <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	4a21      	ldr	r2, [pc, #132]	; (8005cd0 <UART_Start_Receive_IT+0x190>)
 8005c4c:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d019      	beq.n	8005c8a <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c56:	f3ef 8310 	mrs	r3, PRIMASK
 8005c5a:	61fb      	str	r3, [r7, #28]
  return(result);
 8005c5c:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005c5e:	637b      	str	r3, [r7, #52]	; 0x34
 8005c60:	2301      	movs	r3, #1
 8005c62:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c64:	6a3b      	ldr	r3, [r7, #32]
 8005c66:	f383 8810 	msr	PRIMASK, r3
}
 8005c6a:	46c0      	nop			; (mov r8, r8)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	2190      	movs	r1, #144	; 0x90
 8005c78:	0049      	lsls	r1, r1, #1
 8005c7a:	430a      	orrs	r2, r1
 8005c7c:	601a      	str	r2, [r3, #0]
 8005c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c80:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c84:	f383 8810 	msr	PRIMASK, r3
}
 8005c88:	e018      	b.n	8005cbc <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c8a:	f3ef 8310 	mrs	r3, PRIMASK
 8005c8e:	613b      	str	r3, [r7, #16]
  return(result);
 8005c90:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005c92:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c94:	2301      	movs	r3, #1
 8005c96:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	f383 8810 	msr	PRIMASK, r3
}
 8005c9e:	46c0      	nop			; (mov r8, r8)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2120      	movs	r1, #32
 8005cac:	430a      	orrs	r2, r1
 8005cae:	601a      	str	r2, [r3, #0]
 8005cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	f383 8810 	msr	PRIMASK, r3
}
 8005cba:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	0018      	movs	r0, r3
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	b010      	add	sp, #64	; 0x40
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	46c0      	nop			; (mov r8, r8)
 8005cc8:	000001ff 	.word	0x000001ff
 8005ccc:	08005fd9 	.word	0x08005fd9
 8005cd0:	08005e21 	.word	0x08005e21

08005cd4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b08e      	sub	sp, #56	; 0x38
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cdc:	f3ef 8310 	mrs	r3, PRIMASK
 8005ce0:	617b      	str	r3, [r7, #20]
  return(result);
 8005ce2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ce4:	637b      	str	r3, [r7, #52]	; 0x34
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	f383 8810 	msr	PRIMASK, r3
}
 8005cf0:	46c0      	nop			; (mov r8, r8)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4926      	ldr	r1, [pc, #152]	; (8005d98 <UART_EndRxTransfer+0xc4>)
 8005cfe:	400a      	ands	r2, r1
 8005d00:	601a      	str	r2, [r3, #0]
 8005d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d04:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	f383 8810 	msr	PRIMASK, r3
}
 8005d0c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d0e:	f3ef 8310 	mrs	r3, PRIMASK
 8005d12:	623b      	str	r3, [r7, #32]
  return(result);
 8005d14:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d16:	633b      	str	r3, [r7, #48]	; 0x30
 8005d18:	2301      	movs	r3, #1
 8005d1a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1e:	f383 8810 	msr	PRIMASK, r3
}
 8005d22:	46c0      	nop			; (mov r8, r8)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	689a      	ldr	r2, [r3, #8]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2101      	movs	r1, #1
 8005d30:	438a      	bics	r2, r1
 8005d32:	609a      	str	r2, [r3, #8]
 8005d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d36:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d3a:	f383 8810 	msr	PRIMASK, r3
}
 8005d3e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d118      	bne.n	8005d7a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d48:	f3ef 8310 	mrs	r3, PRIMASK
 8005d4c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d4e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d52:	2301      	movs	r3, #1
 8005d54:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f383 8810 	msr	PRIMASK, r3
}
 8005d5c:	46c0      	nop			; (mov r8, r8)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2110      	movs	r1, #16
 8005d6a:	438a      	bics	r2, r1
 8005d6c:	601a      	str	r2, [r3, #0]
 8005d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	f383 8810 	msr	PRIMASK, r3
}
 8005d78:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2280      	movs	r2, #128	; 0x80
 8005d7e:	2120      	movs	r1, #32
 8005d80:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005d8e:	46c0      	nop			; (mov r8, r8)
 8005d90:	46bd      	mov	sp, r7
 8005d92:	b00e      	add	sp, #56	; 0x38
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	46c0      	nop			; (mov r8, r8)
 8005d98:	fffffedf 	.word	0xfffffedf

08005d9c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	225a      	movs	r2, #90	; 0x5a
 8005dae:	2100      	movs	r1, #0
 8005db0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2252      	movs	r2, #82	; 0x52
 8005db6:	2100      	movs	r1, #0
 8005db8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	0018      	movs	r0, r3
 8005dbe:	f7fa fe63 	bl	8000a88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005dc2:	46c0      	nop			; (mov r8, r8)
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	b004      	add	sp, #16
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b086      	sub	sp, #24
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dd2:	f3ef 8310 	mrs	r3, PRIMASK
 8005dd6:	60bb      	str	r3, [r7, #8]
  return(result);
 8005dd8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005dda:	617b      	str	r3, [r7, #20]
 8005ddc:	2301      	movs	r3, #1
 8005dde:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f383 8810 	msr	PRIMASK, r3
}
 8005de6:	46c0      	nop			; (mov r8, r8)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2140      	movs	r1, #64	; 0x40
 8005df4:	438a      	bics	r2, r1
 8005df6:	601a      	str	r2, [r3, #0]
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	f383 8810 	msr	PRIMASK, r3
}
 8005e02:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2220      	movs	r2, #32
 8005e08:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	0018      	movs	r0, r3
 8005e14:	f7ff fb7a 	bl	800550c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e18:	46c0      	nop			; (mov r8, r8)
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	b006      	add	sp, #24
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b094      	sub	sp, #80	; 0x50
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005e28:	204e      	movs	r0, #78	; 0x4e
 8005e2a:	183b      	adds	r3, r7, r0
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	215c      	movs	r1, #92	; 0x5c
 8005e30:	5a52      	ldrh	r2, [r2, r1]
 8005e32:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2280      	movs	r2, #128	; 0x80
 8005e38:	589b      	ldr	r3, [r3, r2]
 8005e3a:	2b22      	cmp	r3, #34	; 0x22
 8005e3c:	d000      	beq.n	8005e40 <UART_RxISR_8BIT+0x20>
 8005e3e:	e0ba      	b.n	8005fb6 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	214c      	movs	r1, #76	; 0x4c
 8005e46:	187b      	adds	r3, r7, r1
 8005e48:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8005e4a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005e4c:	187b      	adds	r3, r7, r1
 8005e4e:	881b      	ldrh	r3, [r3, #0]
 8005e50:	b2da      	uxtb	r2, r3
 8005e52:	183b      	adds	r3, r7, r0
 8005e54:	881b      	ldrh	r3, [r3, #0]
 8005e56:	b2d9      	uxtb	r1, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e5c:	400a      	ands	r2, r1
 8005e5e:	b2d2      	uxtb	r2, r2
 8005e60:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e66:	1c5a      	adds	r2, r3, #1
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	225a      	movs	r2, #90	; 0x5a
 8005e70:	5a9b      	ldrh	r3, [r3, r2]
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	3b01      	subs	r3, #1
 8005e76:	b299      	uxth	r1, r3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	225a      	movs	r2, #90	; 0x5a
 8005e7c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	225a      	movs	r2, #90	; 0x5a
 8005e82:	5a9b      	ldrh	r3, [r3, r2]
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d000      	beq.n	8005e8c <UART_RxISR_8BIT+0x6c>
 8005e8a:	e09c      	b.n	8005fc6 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e8c:	f3ef 8310 	mrs	r3, PRIMASK
 8005e90:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e94:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e96:	2301      	movs	r3, #1
 8005e98:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e9c:	f383 8810 	msr	PRIMASK, r3
}
 8005ea0:	46c0      	nop			; (mov r8, r8)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4948      	ldr	r1, [pc, #288]	; (8005fd0 <UART_RxISR_8BIT+0x1b0>)
 8005eae:	400a      	ands	r2, r1
 8005eb0:	601a      	str	r2, [r3, #0]
 8005eb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb8:	f383 8810 	msr	PRIMASK, r3
}
 8005ebc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ebe:	f3ef 8310 	mrs	r3, PRIMASK
 8005ec2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ec6:	647b      	str	r3, [r7, #68]	; 0x44
 8005ec8:	2301      	movs	r3, #1
 8005eca:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ece:	f383 8810 	msr	PRIMASK, r3
}
 8005ed2:	46c0      	nop			; (mov r8, r8)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	689a      	ldr	r2, [r3, #8]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	2101      	movs	r1, #1
 8005ee0:	438a      	bics	r2, r1
 8005ee2:	609a      	str	r2, [r3, #8]
 8005ee4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ee6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eea:	f383 8810 	msr	PRIMASK, r3
}
 8005eee:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2280      	movs	r2, #128	; 0x80
 8005ef4:	2120      	movs	r1, #32
 8005ef6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	685a      	ldr	r2, [r3, #4]
 8005f0a:	2380      	movs	r3, #128	; 0x80
 8005f0c:	041b      	lsls	r3, r3, #16
 8005f0e:	4013      	ands	r3, r2
 8005f10:	d018      	beq.n	8005f44 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f12:	f3ef 8310 	mrs	r3, PRIMASK
 8005f16:	61bb      	str	r3, [r7, #24]
  return(result);
 8005f18:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005f1a:	643b      	str	r3, [r7, #64]	; 0x40
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	f383 8810 	msr	PRIMASK, r3
}
 8005f26:	46c0      	nop			; (mov r8, r8)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4928      	ldr	r1, [pc, #160]	; (8005fd4 <UART_RxISR_8BIT+0x1b4>)
 8005f34:	400a      	ands	r2, r1
 8005f36:	601a      	str	r2, [r3, #0]
 8005f38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f3a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f3c:	6a3b      	ldr	r3, [r7, #32]
 8005f3e:	f383 8810 	msr	PRIMASK, r3
}
 8005f42:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d12f      	bne.n	8005fac <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f52:	f3ef 8310 	mrs	r3, PRIMASK
 8005f56:	60fb      	str	r3, [r7, #12]
  return(result);
 8005f58:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	f383 8810 	msr	PRIMASK, r3
}
 8005f66:	46c0      	nop			; (mov r8, r8)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2110      	movs	r1, #16
 8005f74:	438a      	bics	r2, r1
 8005f76:	601a      	str	r2, [r3, #0]
 8005f78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f7a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	f383 8810 	msr	PRIMASK, r3
}
 8005f82:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	69db      	ldr	r3, [r3, #28]
 8005f8a:	2210      	movs	r2, #16
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	2b10      	cmp	r3, #16
 8005f90:	d103      	bne.n	8005f9a <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	2210      	movs	r2, #16
 8005f98:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2258      	movs	r2, #88	; 0x58
 8005f9e:	5a9a      	ldrh	r2, [r3, r2]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	0011      	movs	r1, r2
 8005fa4:	0018      	movs	r0, r3
 8005fa6:	f7ff fab9 	bl	800551c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005faa:	e00c      	b.n	8005fc6 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	0018      	movs	r0, r3
 8005fb0:	f7fa fd1c 	bl	80009ec <HAL_UART_RxCpltCallback>
}
 8005fb4:	e007      	b.n	8005fc6 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	699a      	ldr	r2, [r3, #24]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	2108      	movs	r1, #8
 8005fc2:	430a      	orrs	r2, r1
 8005fc4:	619a      	str	r2, [r3, #24]
}
 8005fc6:	46c0      	nop			; (mov r8, r8)
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	b014      	add	sp, #80	; 0x50
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	46c0      	nop			; (mov r8, r8)
 8005fd0:	fffffedf 	.word	0xfffffedf
 8005fd4:	fbffffff 	.word	0xfbffffff

08005fd8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b094      	sub	sp, #80	; 0x50
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005fe0:	204e      	movs	r0, #78	; 0x4e
 8005fe2:	183b      	adds	r3, r7, r0
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	215c      	movs	r1, #92	; 0x5c
 8005fe8:	5a52      	ldrh	r2, [r2, r1]
 8005fea:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2280      	movs	r2, #128	; 0x80
 8005ff0:	589b      	ldr	r3, [r3, r2]
 8005ff2:	2b22      	cmp	r3, #34	; 0x22
 8005ff4:	d000      	beq.n	8005ff8 <UART_RxISR_16BIT+0x20>
 8005ff6:	e0ba      	b.n	800616e <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	214c      	movs	r1, #76	; 0x4c
 8005ffe:	187b      	adds	r3, r7, r1
 8006000:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8006002:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006008:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800600a:	187b      	adds	r3, r7, r1
 800600c:	183a      	adds	r2, r7, r0
 800600e:	881b      	ldrh	r3, [r3, #0]
 8006010:	8812      	ldrh	r2, [r2, #0]
 8006012:	4013      	ands	r3, r2
 8006014:	b29a      	uxth	r2, r3
 8006016:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006018:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800601e:	1c9a      	adds	r2, r3, #2
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	225a      	movs	r2, #90	; 0x5a
 8006028:	5a9b      	ldrh	r3, [r3, r2]
 800602a:	b29b      	uxth	r3, r3
 800602c:	3b01      	subs	r3, #1
 800602e:	b299      	uxth	r1, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	225a      	movs	r2, #90	; 0x5a
 8006034:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	225a      	movs	r2, #90	; 0x5a
 800603a:	5a9b      	ldrh	r3, [r3, r2]
 800603c:	b29b      	uxth	r3, r3
 800603e:	2b00      	cmp	r3, #0
 8006040:	d000      	beq.n	8006044 <UART_RxISR_16BIT+0x6c>
 8006042:	e09c      	b.n	800617e <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006044:	f3ef 8310 	mrs	r3, PRIMASK
 8006048:	623b      	str	r3, [r7, #32]
  return(result);
 800604a:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800604c:	647b      	str	r3, [r7, #68]	; 0x44
 800604e:	2301      	movs	r3, #1
 8006050:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006054:	f383 8810 	msr	PRIMASK, r3
}
 8006058:	46c0      	nop			; (mov r8, r8)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4948      	ldr	r1, [pc, #288]	; (8006188 <UART_RxISR_16BIT+0x1b0>)
 8006066:	400a      	ands	r2, r1
 8006068:	601a      	str	r2, [r3, #0]
 800606a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800606c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800606e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006070:	f383 8810 	msr	PRIMASK, r3
}
 8006074:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006076:	f3ef 8310 	mrs	r3, PRIMASK
 800607a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800607c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800607e:	643b      	str	r3, [r7, #64]	; 0x40
 8006080:	2301      	movs	r3, #1
 8006082:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006086:	f383 8810 	msr	PRIMASK, r3
}
 800608a:	46c0      	nop			; (mov r8, r8)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	689a      	ldr	r2, [r3, #8]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2101      	movs	r1, #1
 8006098:	438a      	bics	r2, r1
 800609a:	609a      	str	r2, [r3, #8]
 800609c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800609e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060a2:	f383 8810 	msr	PRIMASK, r3
}
 80060a6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2280      	movs	r2, #128	; 0x80
 80060ac:	2120      	movs	r1, #32
 80060ae:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	685a      	ldr	r2, [r3, #4]
 80060c2:	2380      	movs	r3, #128	; 0x80
 80060c4:	041b      	lsls	r3, r3, #16
 80060c6:	4013      	ands	r3, r2
 80060c8:	d018      	beq.n	80060fc <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060ca:	f3ef 8310 	mrs	r3, PRIMASK
 80060ce:	617b      	str	r3, [r7, #20]
  return(result);
 80060d0:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80060d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060d4:	2301      	movs	r3, #1
 80060d6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	f383 8810 	msr	PRIMASK, r3
}
 80060de:	46c0      	nop			; (mov r8, r8)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4928      	ldr	r1, [pc, #160]	; (800618c <UART_RxISR_16BIT+0x1b4>)
 80060ec:	400a      	ands	r2, r1
 80060ee:	601a      	str	r2, [r3, #0]
 80060f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	f383 8810 	msr	PRIMASK, r3
}
 80060fa:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006100:	2b01      	cmp	r3, #1
 8006102:	d12f      	bne.n	8006164 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800610a:	f3ef 8310 	mrs	r3, PRIMASK
 800610e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006110:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006112:	63bb      	str	r3, [r7, #56]	; 0x38
 8006114:	2301      	movs	r3, #1
 8006116:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f383 8810 	msr	PRIMASK, r3
}
 800611e:	46c0      	nop			; (mov r8, r8)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2110      	movs	r1, #16
 800612c:	438a      	bics	r2, r1
 800612e:	601a      	str	r2, [r3, #0]
 8006130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006132:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	f383 8810 	msr	PRIMASK, r3
}
 800613a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	69db      	ldr	r3, [r3, #28]
 8006142:	2210      	movs	r2, #16
 8006144:	4013      	ands	r3, r2
 8006146:	2b10      	cmp	r3, #16
 8006148:	d103      	bne.n	8006152 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2210      	movs	r2, #16
 8006150:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2258      	movs	r2, #88	; 0x58
 8006156:	5a9a      	ldrh	r2, [r3, r2]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	0011      	movs	r1, r2
 800615c:	0018      	movs	r0, r3
 800615e:	f7ff f9dd 	bl	800551c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006162:	e00c      	b.n	800617e <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	0018      	movs	r0, r3
 8006168:	f7fa fc40 	bl	80009ec <HAL_UART_RxCpltCallback>
}
 800616c:	e007      	b.n	800617e <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	699a      	ldr	r2, [r3, #24]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2108      	movs	r1, #8
 800617a:	430a      	orrs	r2, r1
 800617c:	619a      	str	r2, [r3, #24]
}
 800617e:	46c0      	nop			; (mov r8, r8)
 8006180:	46bd      	mov	sp, r7
 8006182:	b014      	add	sp, #80	; 0x50
 8006184:	bd80      	pop	{r7, pc}
 8006186:	46c0      	nop			; (mov r8, r8)
 8006188:	fffffedf 	.word	0xfffffedf
 800618c:	fbffffff 	.word	0xfbffffff

08006190 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006198:	46c0      	nop			; (mov r8, r8)
 800619a:	46bd      	mov	sp, r7
 800619c:	b002      	add	sp, #8
 800619e:	bd80      	pop	{r7, pc}

080061a0 <__libc_init_array>:
 80061a0:	b570      	push	{r4, r5, r6, lr}
 80061a2:	2600      	movs	r6, #0
 80061a4:	4d0c      	ldr	r5, [pc, #48]	; (80061d8 <__libc_init_array+0x38>)
 80061a6:	4c0d      	ldr	r4, [pc, #52]	; (80061dc <__libc_init_array+0x3c>)
 80061a8:	1b64      	subs	r4, r4, r5
 80061aa:	10a4      	asrs	r4, r4, #2
 80061ac:	42a6      	cmp	r6, r4
 80061ae:	d109      	bne.n	80061c4 <__libc_init_array+0x24>
 80061b0:	2600      	movs	r6, #0
 80061b2:	f000 f82b 	bl	800620c <_init>
 80061b6:	4d0a      	ldr	r5, [pc, #40]	; (80061e0 <__libc_init_array+0x40>)
 80061b8:	4c0a      	ldr	r4, [pc, #40]	; (80061e4 <__libc_init_array+0x44>)
 80061ba:	1b64      	subs	r4, r4, r5
 80061bc:	10a4      	asrs	r4, r4, #2
 80061be:	42a6      	cmp	r6, r4
 80061c0:	d105      	bne.n	80061ce <__libc_init_array+0x2e>
 80061c2:	bd70      	pop	{r4, r5, r6, pc}
 80061c4:	00b3      	lsls	r3, r6, #2
 80061c6:	58eb      	ldr	r3, [r5, r3]
 80061c8:	4798      	blx	r3
 80061ca:	3601      	adds	r6, #1
 80061cc:	e7ee      	b.n	80061ac <__libc_init_array+0xc>
 80061ce:	00b3      	lsls	r3, r6, #2
 80061d0:	58eb      	ldr	r3, [r5, r3]
 80061d2:	4798      	blx	r3
 80061d4:	3601      	adds	r6, #1
 80061d6:	e7f2      	b.n	80061be <__libc_init_array+0x1e>
 80061d8:	0800635c 	.word	0x0800635c
 80061dc:	0800635c 	.word	0x0800635c
 80061e0:	0800635c 	.word	0x0800635c
 80061e4:	08006360 	.word	0x08006360

080061e8 <memcpy>:
 80061e8:	2300      	movs	r3, #0
 80061ea:	b510      	push	{r4, lr}
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d100      	bne.n	80061f2 <memcpy+0xa>
 80061f0:	bd10      	pop	{r4, pc}
 80061f2:	5ccc      	ldrb	r4, [r1, r3]
 80061f4:	54c4      	strb	r4, [r0, r3]
 80061f6:	3301      	adds	r3, #1
 80061f8:	e7f8      	b.n	80061ec <memcpy+0x4>

080061fa <memset>:
 80061fa:	0003      	movs	r3, r0
 80061fc:	1882      	adds	r2, r0, r2
 80061fe:	4293      	cmp	r3, r2
 8006200:	d100      	bne.n	8006204 <memset+0xa>
 8006202:	4770      	bx	lr
 8006204:	7019      	strb	r1, [r3, #0]
 8006206:	3301      	adds	r3, #1
 8006208:	e7f9      	b.n	80061fe <memset+0x4>
	...

0800620c <_init>:
 800620c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800620e:	46c0      	nop			; (mov r8, r8)
 8006210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006212:	bc08      	pop	{r3}
 8006214:	469e      	mov	lr, r3
 8006216:	4770      	bx	lr

08006218 <_fini>:
 8006218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800621a:	46c0      	nop			; (mov r8, r8)
 800621c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800621e:	bc08      	pop	{r3}
 8006220:	469e      	mov	lr, r3
 8006222:	4770      	bx	lr
