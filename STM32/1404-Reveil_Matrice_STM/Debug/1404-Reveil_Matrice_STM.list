
1404-Reveil_Matrice_STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000590c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080059cc  080059cc  000159cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a18  08005a18  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005a18  08005a18  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005a18  08005a18  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a18  08005a18  00015a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a1c  08005a1c  00015a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005a20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c4c  20000070  08005a90  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000cbc  08005a90  00020cbc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011229  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002780  00000000  00000000  000312c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef8  00000000  00000000  00033a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000de0  00000000  00000000  00034940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a682  00000000  00000000  00035720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016a73  00000000  00000000  0004fda2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009467e  00000000  00000000  00066815  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fae93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003758  00000000  00000000  000faee4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080059b4 	.word	0x080059b4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080059b4 	.word	0x080059b4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <readADC>:

#include "includes.h"

extern ADC_HandleTypeDef hadc;

uint8_t readADC(){
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0

	 HAL_ADC_Start(&hadc);
 80003f8:	4b08      	ldr	r3, [pc, #32]	; (800041c <readADC+0x28>)
 80003fa:	0018      	movs	r0, r3
 80003fc:	f001 faf8 	bl	80019f0 <HAL_ADC_Start>
	 HAL_ADC_PollForConversion(&hadc, 1);
 8000400:	4b06      	ldr	r3, [pc, #24]	; (800041c <readADC+0x28>)
 8000402:	2101      	movs	r1, #1
 8000404:	0018      	movs	r0, r3
 8000406:	f001 fb47 	bl	8001a98 <HAL_ADC_PollForConversion>
	 return HAL_ADC_GetValue(&hadc);
 800040a:	4b04      	ldr	r3, [pc, #16]	; (800041c <readADC+0x28>)
 800040c:	0018      	movs	r0, r3
 800040e:	f001 fbdb 	bl	8001bc8 <HAL_ADC_GetValue>
 8000412:	0003      	movs	r3, r0
 8000414:	b2db      	uxtb	r3, r3

}
 8000416:	0018      	movs	r0, r3
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	20000af0 	.word	0x20000af0

08000420 <flashReadADC>:

uint8_t flashReadADC(Canvas* canvas){
 8000420:	b5b0      	push	{r4, r5, r7, lr}
 8000422:	b084      	sub	sp, #16
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
	setWHOLEcolor( 0, 0, 0);
 8000428:	2200      	movs	r2, #0
 800042a:	2100      	movs	r1, #0
 800042c:	2000      	movs	r0, #0
 800042e:	f000 faf7 	bl	8000a20 <setWHOLEcolor>
	HAL_Delay(200);
 8000432:	20c8      	movs	r0, #200	; 0xc8
 8000434:	f001 f978 	bl	8001728 <HAL_Delay>
	uint8_t mesure = readADC();
 8000438:	250f      	movs	r5, #15
 800043a:	197c      	adds	r4, r7, r5
 800043c:	f7ff ffda 	bl	80003f4 <readADC>
 8000440:	0003      	movs	r3, r0
 8000442:	7023      	strb	r3, [r4, #0]
	sendCanvas(canvas);
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	0018      	movs	r0, r3
 8000448:	f000 f835 	bl	80004b6 <sendCanvas>
	return mesure;
 800044c:	197b      	adds	r3, r7, r5
 800044e:	781b      	ldrb	r3, [r3, #0]
}
 8000450:	0018      	movs	r0, r3
 8000452:	46bd      	mov	sp, r7
 8000454:	b004      	add	sp, #16
 8000456:	bdb0      	pop	{r4, r5, r7, pc}

08000458 <setCanvasColor>:
 */
#include "includes.h"

extern int facteurLuminosite;

void setCanvasColor(Canvas* canvas, Pixel encre) {
 8000458:	b590      	push	{r4, r7, lr}
 800045a:	b085      	sub	sp, #20
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
 8000460:	003b      	movs	r3, r7
 8000462:	6019      	str	r1, [r3, #0]
for (uint16_t i = 0; i < canvas->numCols * canvas->numRows; i++) {
 8000464:	230e      	movs	r3, #14
 8000466:	18fb      	adds	r3, r7, r3
 8000468:	2200      	movs	r2, #0
 800046a:	801a      	strh	r2, [r3, #0]
 800046c:	e014      	b.n	8000498 <setCanvasColor+0x40>
		canvas->pixels[i]=encre;
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	6899      	ldr	r1, [r3, #8]
 8000472:	240e      	movs	r4, #14
 8000474:	193b      	adds	r3, r7, r4
 8000476:	881a      	ldrh	r2, [r3, #0]
 8000478:	0013      	movs	r3, r2
 800047a:	005b      	lsls	r3, r3, #1
 800047c:	189b      	adds	r3, r3, r2
 800047e:	18ca      	adds	r2, r1, r3
 8000480:	003b      	movs	r3, r7
 8000482:	0010      	movs	r0, r2
 8000484:	0019      	movs	r1, r3
 8000486:	2303      	movs	r3, #3
 8000488:	001a      	movs	r2, r3
 800048a:	f005 f9c5 	bl	8005818 <memcpy>
for (uint16_t i = 0; i < canvas->numCols * canvas->numRows; i++) {
 800048e:	193b      	adds	r3, r7, r4
 8000490:	881a      	ldrh	r2, [r3, #0]
 8000492:	193b      	adds	r3, r7, r4
 8000494:	3201      	adds	r2, #1
 8000496:	801a      	strh	r2, [r3, #0]
 8000498:	230e      	movs	r3, #14
 800049a:	18fb      	adds	r3, r7, r3
 800049c:	881a      	ldrh	r2, [r3, #0]
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	6819      	ldr	r1, [r3, #0]
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	685b      	ldr	r3, [r3, #4]
 80004a6:	434b      	muls	r3, r1
 80004a8:	429a      	cmp	r2, r3
 80004aa:	dbe0      	blt.n	800046e <setCanvasColor+0x16>
    }
}
 80004ac:	46c0      	nop			; (mov r8, r8)
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	46bd      	mov	sp, r7
 80004b2:	b005      	add	sp, #20
 80004b4:	bd90      	pop	{r4, r7, pc}

080004b6 <sendCanvas>:



// Fonction pour mettre à jour l'affichage LED
void sendCanvas(Canvas* canvas) {
 80004b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004b8:	b085      	sub	sp, #20
 80004ba:	af00      	add	r7, sp, #0
 80004bc:	6078      	str	r0, [r7, #4]
    // Copiez les pixels du canevas vers l'écran LED
    for (uint16_t i = 0; i < canvas->numCols * canvas->numRows -1; i++) {  // -1 car résolution bug affichage photodiode inexistante
 80004be:	230e      	movs	r3, #14
 80004c0:	18fb      	adds	r3, r7, r3
 80004c2:	2200      	movs	r2, #0
 80004c4:	801a      	strh	r2, [r3, #0]
 80004c6:	e026      	b.n	8000516 <sendCanvas+0x60>
        setLEDcolor(i, canvas -> pixels[i].R, canvas -> pixels[i].G, canvas -> pixels[i].B);
 80004c8:	260e      	movs	r6, #14
 80004ca:	19bb      	adds	r3, r7, r6
 80004cc:	8818      	ldrh	r0, [r3, #0]
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	6899      	ldr	r1, [r3, #8]
 80004d2:	19bb      	adds	r3, r7, r6
 80004d4:	881a      	ldrh	r2, [r3, #0]
 80004d6:	0013      	movs	r3, r2
 80004d8:	005b      	lsls	r3, r3, #1
 80004da:	189b      	adds	r3, r3, r2
 80004dc:	18cb      	adds	r3, r1, r3
 80004de:	781c      	ldrb	r4, [r3, #0]
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	6899      	ldr	r1, [r3, #8]
 80004e4:	19bb      	adds	r3, r7, r6
 80004e6:	881a      	ldrh	r2, [r3, #0]
 80004e8:	0013      	movs	r3, r2
 80004ea:	005b      	lsls	r3, r3, #1
 80004ec:	189b      	adds	r3, r3, r2
 80004ee:	18cb      	adds	r3, r1, r3
 80004f0:	785d      	ldrb	r5, [r3, #1]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	6899      	ldr	r1, [r3, #8]
 80004f6:	19bb      	adds	r3, r7, r6
 80004f8:	881a      	ldrh	r2, [r3, #0]
 80004fa:	0013      	movs	r3, r2
 80004fc:	005b      	lsls	r3, r3, #1
 80004fe:	189b      	adds	r3, r3, r2
 8000500:	18cb      	adds	r3, r1, r3
 8000502:	789b      	ldrb	r3, [r3, #2]
 8000504:	002a      	movs	r2, r5
 8000506:	0021      	movs	r1, r4
 8000508:	f000 fa06 	bl	8000918 <setLEDcolor>
    for (uint16_t i = 0; i < canvas->numCols * canvas->numRows -1; i++) {  // -1 car résolution bug affichage photodiode inexistante
 800050c:	19bb      	adds	r3, r7, r6
 800050e:	881a      	ldrh	r2, [r3, #0]
 8000510:	19bb      	adds	r3, r7, r6
 8000512:	3201      	adds	r2, #1
 8000514:	801a      	strh	r2, [r3, #0]
 8000516:	230e      	movs	r3, #14
 8000518:	18fb      	adds	r3, r7, r3
 800051a:	881a      	ldrh	r2, [r3, #0]
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	6819      	ldr	r1, [r3, #0]
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	685b      	ldr	r3, [r3, #4]
 8000524:	434b      	muls	r3, r1
 8000526:	3b01      	subs	r3, #1
 8000528:	429a      	cmp	r2, r3
 800052a:	dbcd      	blt.n	80004c8 <sendCanvas+0x12>
    }
}
 800052c:	46c0      	nop			; (mov r8, r8)
 800052e:	46c0      	nop			; (mov r8, r8)
 8000530:	46bd      	mov	sp, r7
 8000532:	b005      	add	sp, #20
 8000534:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000536 <getPixel>:

Pixel* getPixel(Canvas* canvas, int x, int y) {
 8000536:	b580      	push	{r7, lr}
 8000538:	b084      	sub	sp, #16
 800053a:	af00      	add	r7, sp, #0
 800053c:	60f8      	str	r0, [r7, #12]
 800053e:	60b9      	str	r1, [r7, #8]
 8000540:	607a      	str	r2, [r7, #4]
    if (x > 0 && x <= canvas->numCols && y > 0 && y <= canvas->numRows) {
 8000542:	68bb      	ldr	r3, [r7, #8]
 8000544:	2b00      	cmp	r3, #0
 8000546:	dd1c      	ble.n	8000582 <getPixel+0x4c>
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	68ba      	ldr	r2, [r7, #8]
 800054e:	429a      	cmp	r2, r3
 8000550:	dc17      	bgt.n	8000582 <getPixel+0x4c>
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	2b00      	cmp	r3, #0
 8000556:	dd14      	ble.n	8000582 <getPixel+0x4c>
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	685b      	ldr	r3, [r3, #4]
 800055c:	687a      	ldr	r2, [r7, #4]
 800055e:	429a      	cmp	r2, r3
 8000560:	dc0f      	bgt.n	8000582 <getPixel+0x4c>
        return &canvas->pixels[(x-1)*canvas->numRows+(y-1)];
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	689a      	ldr	r2, [r3, #8]
 8000566:	68bb      	ldr	r3, [r7, #8]
 8000568:	1e59      	subs	r1, r3, #1
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	685b      	ldr	r3, [r3, #4]
 800056e:	4359      	muls	r1, r3
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	3b01      	subs	r3, #1
 8000574:	18cb      	adds	r3, r1, r3
 8000576:	0019      	movs	r1, r3
 8000578:	000b      	movs	r3, r1
 800057a:	005b      	lsls	r3, r3, #1
 800057c:	185b      	adds	r3, r3, r1
 800057e:	18d3      	adds	r3, r2, r3
 8000580:	e000      	b.n	8000584 <getPixel+0x4e>
    } else {
        return NULL; // Coordonnées hors limites
 8000582:	2300      	movs	r3, #0
    }
}
 8000584:	0018      	movs	r0, r3
 8000586:	46bd      	mov	sp, r7
 8000588:	b004      	add	sp, #16
 800058a:	bd80      	pop	{r7, pc}

0800058c <colorDiagonal>:


void colorDiagonal(Canvas* canvas, Pixel encre, uint8_t diagSum) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b088      	sub	sp, #32
 8000590:	af00      	add	r7, sp, #0
 8000592:	60f8      	str	r0, [r7, #12]
 8000594:	2308      	movs	r3, #8
 8000596:	18fb      	adds	r3, r7, r3
 8000598:	6019      	str	r1, [r3, #0]
 800059a:	1dfb      	adds	r3, r7, #7
 800059c:	701a      	strb	r2, [r3, #0]


    // Parcourir la diagonale où x + y == diagSum
    for (int x = 0; x <= canvas->numCols; x++) {
 800059e:	2300      	movs	r3, #0
 80005a0:	61fb      	str	r3, [r7, #28]
 80005a2:	e023      	b.n	80005ec <colorDiagonal+0x60>
        int y = diagSum - x; // Calcul de la coordonnée y correspondante
 80005a4:	1dfb      	adds	r3, r7, #7
 80005a6:	781a      	ldrb	r2, [r3, #0]
 80005a8:	69fb      	ldr	r3, [r7, #28]
 80005aa:	1ad3      	subs	r3, r2, r3
 80005ac:	61bb      	str	r3, [r7, #24]
        if (y >= 0 && y <= canvas->numRows) {
 80005ae:	69bb      	ldr	r3, [r7, #24]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	db18      	blt.n	80005e6 <colorDiagonal+0x5a>
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	685b      	ldr	r3, [r3, #4]
 80005b8:	69ba      	ldr	r2, [r7, #24]
 80005ba:	429a      	cmp	r2, r3
 80005bc:	dc13      	bgt.n	80005e6 <colorDiagonal+0x5a>
            Pixel* pixel = getPixel(canvas, x, y);
 80005be:	69ba      	ldr	r2, [r7, #24]
 80005c0:	69f9      	ldr	r1, [r7, #28]
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	0018      	movs	r0, r3
 80005c6:	f7ff ffb6 	bl	8000536 <getPixel>
 80005ca:	0003      	movs	r3, r0
 80005cc:	617b      	str	r3, [r7, #20]
            if (pixel) {
 80005ce:	697b      	ldr	r3, [r7, #20]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d008      	beq.n	80005e6 <colorDiagonal+0x5a>
                // Mettre à jour la couleur
                *pixel=encre;
 80005d4:	697a      	ldr	r2, [r7, #20]
 80005d6:	2308      	movs	r3, #8
 80005d8:	18fb      	adds	r3, r7, r3
 80005da:	0010      	movs	r0, r2
 80005dc:	0019      	movs	r1, r3
 80005de:	2303      	movs	r3, #3
 80005e0:	001a      	movs	r2, r3
 80005e2:	f005 f919 	bl	8005818 <memcpy>
    for (int x = 0; x <= canvas->numCols; x++) {
 80005e6:	69fb      	ldr	r3, [r7, #28]
 80005e8:	3301      	adds	r3, #1
 80005ea:	61fb      	str	r3, [r7, #28]
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	69fa      	ldr	r2, [r7, #28]
 80005f2:	429a      	cmp	r2, r3
 80005f4:	ddd6      	ble.n	80005a4 <colorDiagonal+0x18>
            }
        }
    }
}
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	46c0      	nop			; (mov r8, r8)
 80005fa:	46bd      	mov	sp, r7
 80005fc:	b008      	add	sp, #32
 80005fe:	bd80      	pop	{r7, pc}

08000600 <displayBCD>:
        }
    }
}

// Fonction pour afficher un chiffre en BCD
void displayBCD(Canvas* canvas, int X, int Y, int BCD, int NbDeBitAffiches, int facteurLuminosite) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b088      	sub	sp, #32
 8000604:	af00      	add	r7, sp, #0
 8000606:	60f8      	str	r0, [r7, #12]
 8000608:	60b9      	str	r1, [r7, #8]
 800060a:	607a      	str	r2, [r7, #4]
 800060c:	603b      	str	r3, [r7, #0]
    if (canvas == NULL || X < 0 || Y < 0 || BCD < 0 || NbDeBitAffiches <= 0) {
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d100      	bne.n	8000616 <displayBCD+0x16>
 8000614:	e06c      	b.n	80006f0 <displayBCD+0xf0>
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	2b00      	cmp	r3, #0
 800061a:	db69      	blt.n	80006f0 <displayBCD+0xf0>
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	2b00      	cmp	r3, #0
 8000620:	db66      	blt.n	80006f0 <displayBCD+0xf0>
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	db63      	blt.n	80006f0 <displayBCD+0xf0>
 8000628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800062a:	2b00      	cmp	r3, #0
 800062c:	dd60      	ble.n	80006f0 <displayBCD+0xf0>
        // Vérifiez les paramètres d'entrée valides
        return;
    }

    int j;
    int mask = 1 << (NbDeBitAffiches - 1);  // Masque pour extraire chaque bit
 800062e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000630:	3b01      	subs	r3, #1
 8000632:	2201      	movs	r2, #1
 8000634:	409a      	lsls	r2, r3
 8000636:	0013      	movs	r3, r2
 8000638:	61bb      	str	r3, [r7, #24]

        for (j = X; j < X + NbDeBitAffiches; j++) {
 800063a:	68bb      	ldr	r3, [r7, #8]
 800063c:	61fb      	str	r3, [r7, #28]
 800063e:	e050      	b.n	80006e2 <displayBCD+0xe2>
            if (BCD & mask) {
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	69ba      	ldr	r2, [r7, #24]
 8000644:	4013      	ands	r3, r2
 8000646:	d032      	beq.n	80006ae <displayBCD+0xae>
                // Afficher un 1 (blanc)
                Pixel* pixel = getPixel(canvas, j, Y);
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	69f9      	ldr	r1, [r7, #28]
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	0018      	movs	r0, r3
 8000650:	f7ff ff71 	bl	8000536 <getPixel>
 8000654:	0003      	movs	r3, r0
 8000656:	613b      	str	r3, [r7, #16]
                if (pixel != NULL) {
 8000658:	693b      	ldr	r3, [r7, #16]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d03b      	beq.n	80006d6 <displayBCD+0xd6>
                    pixel->R = (facteurLuminosite*D_MAX_LUX)/255;
 800065e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000660:	0013      	movs	r3, r2
 8000662:	01db      	lsls	r3, r3, #7
 8000664:	1a9b      	subs	r3, r3, r2
 8000666:	005b      	lsls	r3, r3, #1
 8000668:	21ff      	movs	r1, #255	; 0xff
 800066a:	0018      	movs	r0, r3
 800066c:	f7ff fdd6 	bl	800021c <__divsi3>
 8000670:	0003      	movs	r3, r0
 8000672:	b2da      	uxtb	r2, r3
 8000674:	693b      	ldr	r3, [r7, #16]
 8000676:	701a      	strb	r2, [r3, #0]
                    pixel->G = (facteurLuminosite*D_MAX_LUX)/255;
 8000678:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800067a:	0013      	movs	r3, r2
 800067c:	01db      	lsls	r3, r3, #7
 800067e:	1a9b      	subs	r3, r3, r2
 8000680:	005b      	lsls	r3, r3, #1
 8000682:	21ff      	movs	r1, #255	; 0xff
 8000684:	0018      	movs	r0, r3
 8000686:	f7ff fdc9 	bl	800021c <__divsi3>
 800068a:	0003      	movs	r3, r0
 800068c:	b2da      	uxtb	r2, r3
 800068e:	693b      	ldr	r3, [r7, #16]
 8000690:	705a      	strb	r2, [r3, #1]
                    pixel->B = (facteurLuminosite*D_MAX_LUX)/255;
 8000692:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000694:	0013      	movs	r3, r2
 8000696:	01db      	lsls	r3, r3, #7
 8000698:	1a9b      	subs	r3, r3, r2
 800069a:	005b      	lsls	r3, r3, #1
 800069c:	21ff      	movs	r1, #255	; 0xff
 800069e:	0018      	movs	r0, r3
 80006a0:	f7ff fdbc 	bl	800021c <__divsi3>
 80006a4:	0003      	movs	r3, r0
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	693b      	ldr	r3, [r7, #16]
 80006aa:	709a      	strb	r2, [r3, #2]
 80006ac:	e013      	b.n	80006d6 <displayBCD+0xd6>
                }
            }
            else{
            	//afficher un 0 (noir)
            	Pixel* pixel = getPixel(canvas, j, Y);
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	69f9      	ldr	r1, [r7, #28]
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	0018      	movs	r0, r3
 80006b6:	f7ff ff3e 	bl	8000536 <getPixel>
 80006ba:	0003      	movs	r3, r0
 80006bc:	617b      	str	r3, [r7, #20]
            	if (pixel != NULL) {
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d008      	beq.n	80006d6 <displayBCD+0xd6>
            		pixel->R = 0;
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	2200      	movs	r2, #0
 80006c8:	701a      	strb	r2, [r3, #0]
                    pixel->G = 0;
 80006ca:	697b      	ldr	r3, [r7, #20]
 80006cc:	2200      	movs	r2, #0
 80006ce:	705a      	strb	r2, [r3, #1]
                    pixel->B = 0;
 80006d0:	697b      	ldr	r3, [r7, #20]
 80006d2:	2200      	movs	r2, #0
 80006d4:	709a      	strb	r2, [r3, #2]
            	}
            }
            mask >>= 1;
 80006d6:	69bb      	ldr	r3, [r7, #24]
 80006d8:	105b      	asrs	r3, r3, #1
 80006da:	61bb      	str	r3, [r7, #24]
        for (j = X; j < X + NbDeBitAffiches; j++) {
 80006dc:	69fb      	ldr	r3, [r7, #28]
 80006de:	3301      	adds	r3, #1
 80006e0:	61fb      	str	r3, [r7, #28]
 80006e2:	68ba      	ldr	r2, [r7, #8]
 80006e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006e6:	18d3      	adds	r3, r2, r3
 80006e8:	69fa      	ldr	r2, [r7, #28]
 80006ea:	429a      	cmp	r2, r3
 80006ec:	dba8      	blt.n	8000640 <displayBCD+0x40>
 80006ee:	e000      	b.n	80006f2 <displayBCD+0xf2>
        return;
 80006f0:	46c0      	nop			; (mov r8, r8)
        }
}
 80006f2:	46bd      	mov	sp, r7
 80006f4:	b008      	add	sp, #32
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <HSVtoPixel>:
 *  Created on: Oct 11, 2023
 *      Author: alyvasseur
 */
#include "includes.h"

Pixel HSVtoPixel(uint8_t h, uint8_t v) {
 80006f8:	b5b0      	push	{r4, r5, r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	0002      	movs	r2, r0
 8000700:	1dfb      	adds	r3, r7, #7
 8000702:	701a      	strb	r2, [r3, #0]
 8000704:	1dbb      	adds	r3, r7, #6
 8000706:	1c0a      	adds	r2, r1, #0
 8000708:	701a      	strb	r2, [r3, #0]
    Pixel pixel;
    unsigned char region, remainder, p, q, t;

    region = h / 43;
 800070a:	2517      	movs	r5, #23
 800070c:	197c      	adds	r4, r7, r5
 800070e:	1dfb      	adds	r3, r7, #7
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	212b      	movs	r1, #43	; 0x2b
 8000714:	0018      	movs	r0, r3
 8000716:	f7ff fcf7 	bl	8000108 <__udivsi3>
 800071a:	0003      	movs	r3, r0
 800071c:	7023      	strb	r3, [r4, #0]
    remainder = (h - (region * 43)) * 6;
 800071e:	1dfb      	adds	r3, r7, #7
 8000720:	7819      	ldrb	r1, [r3, #0]
 8000722:	0028      	movs	r0, r5
 8000724:	183b      	adds	r3, r7, r0
 8000726:	781a      	ldrb	r2, [r3, #0]
 8000728:	0013      	movs	r3, r2
 800072a:	069b      	lsls	r3, r3, #26
 800072c:	1a9b      	subs	r3, r3, r2
 800072e:	009b      	lsls	r3, r3, #2
 8000730:	189b      	adds	r3, r3, r2
 8000732:	009b      	lsls	r3, r3, #2
 8000734:	189b      	adds	r3, r3, r2
 8000736:	009b      	lsls	r3, r3, #2
 8000738:	189b      	adds	r3, r3, r2
 800073a:	18cb      	adds	r3, r1, r3
 800073c:	b2db      	uxtb	r3, r3
 800073e:	2416      	movs	r4, #22
 8000740:	193a      	adds	r2, r7, r4
 8000742:	1c19      	adds	r1, r3, #0
 8000744:	1c0b      	adds	r3, r1, #0
 8000746:	18db      	adds	r3, r3, r3
 8000748:	185b      	adds	r3, r3, r1
 800074a:	18db      	adds	r3, r3, r3
 800074c:	7013      	strb	r3, [r2, #0]

    p = (v * (255 - 255)) >> 8;
 800074e:	2315      	movs	r3, #21
 8000750:	18fb      	adds	r3, r7, r3
 8000752:	2200      	movs	r2, #0
 8000754:	701a      	strb	r2, [r3, #0]
    q = (v * (255 - ((255 * remainder) >> 8)) >> 8);
 8000756:	1dbb      	adds	r3, r7, #6
 8000758:	7819      	ldrb	r1, [r3, #0]
 800075a:	193b      	adds	r3, r7, r4
 800075c:	781a      	ldrb	r2, [r3, #0]
 800075e:	0013      	movs	r3, r2
 8000760:	021b      	lsls	r3, r3, #8
 8000762:	1a9b      	subs	r3, r3, r2
 8000764:	121b      	asrs	r3, r3, #8
 8000766:	22ff      	movs	r2, #255	; 0xff
 8000768:	1ad3      	subs	r3, r2, r3
 800076a:	434b      	muls	r3, r1
 800076c:	121a      	asrs	r2, r3, #8
 800076e:	2314      	movs	r3, #20
 8000770:	18fb      	adds	r3, r7, r3
 8000772:	701a      	strb	r2, [r3, #0]
    t = (v * (255 - ((255 * (255 - remainder)) >> 8)) >> 8);
 8000774:	1dbb      	adds	r3, r7, #6
 8000776:	7819      	ldrb	r1, [r3, #0]
 8000778:	193b      	adds	r3, r7, r4
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	22ff      	movs	r2, #255	; 0xff
 800077e:	1ad2      	subs	r2, r2, r3
 8000780:	0013      	movs	r3, r2
 8000782:	021b      	lsls	r3, r3, #8
 8000784:	1a9b      	subs	r3, r3, r2
 8000786:	121b      	asrs	r3, r3, #8
 8000788:	22ff      	movs	r2, #255	; 0xff
 800078a:	1ad3      	subs	r3, r2, r3
 800078c:	434b      	muls	r3, r1
 800078e:	121a      	asrs	r2, r3, #8
 8000790:	2313      	movs	r3, #19
 8000792:	18fb      	adds	r3, r7, r3
 8000794:	701a      	strb	r2, [r3, #0]

    switch (region) {
 8000796:	183b      	adds	r3, r7, r0
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	2b04      	cmp	r3, #4
 800079c:	d854      	bhi.n	8000848 <HSVtoPixel+0x150>
 800079e:	009a      	lsls	r2, r3, #2
 80007a0:	4b4d      	ldr	r3, [pc, #308]	; (80008d8 <HSVtoPixel+0x1e0>)
 80007a2:	18d3      	adds	r3, r2, r3
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	469f      	mov	pc, r3
        case 0:
            pixel.R = v;
 80007a8:	210c      	movs	r1, #12
 80007aa:	187b      	adds	r3, r7, r1
 80007ac:	1dba      	adds	r2, r7, #6
 80007ae:	7812      	ldrb	r2, [r2, #0]
 80007b0:	701a      	strb	r2, [r3, #0]
            pixel.G = t;
 80007b2:	187b      	adds	r3, r7, r1
 80007b4:	2213      	movs	r2, #19
 80007b6:	18ba      	adds	r2, r7, r2
 80007b8:	7812      	ldrb	r2, [r2, #0]
 80007ba:	705a      	strb	r2, [r3, #1]
            pixel.B = p;
 80007bc:	187b      	adds	r3, r7, r1
 80007be:	2215      	movs	r2, #21
 80007c0:	18ba      	adds	r2, r7, r2
 80007c2:	7812      	ldrb	r2, [r2, #0]
 80007c4:	709a      	strb	r2, [r3, #2]
            break;
 80007c6:	e04f      	b.n	8000868 <HSVtoPixel+0x170>
        case 1:
            pixel.R = q;
 80007c8:	210c      	movs	r1, #12
 80007ca:	187b      	adds	r3, r7, r1
 80007cc:	2214      	movs	r2, #20
 80007ce:	18ba      	adds	r2, r7, r2
 80007d0:	7812      	ldrb	r2, [r2, #0]
 80007d2:	701a      	strb	r2, [r3, #0]
            pixel.G = v;
 80007d4:	187b      	adds	r3, r7, r1
 80007d6:	1dba      	adds	r2, r7, #6
 80007d8:	7812      	ldrb	r2, [r2, #0]
 80007da:	705a      	strb	r2, [r3, #1]
            pixel.B = p;
 80007dc:	187b      	adds	r3, r7, r1
 80007de:	2215      	movs	r2, #21
 80007e0:	18ba      	adds	r2, r7, r2
 80007e2:	7812      	ldrb	r2, [r2, #0]
 80007e4:	709a      	strb	r2, [r3, #2]
            break;
 80007e6:	e03f      	b.n	8000868 <HSVtoPixel+0x170>
        case 2:
            pixel.R = p;
 80007e8:	210c      	movs	r1, #12
 80007ea:	187b      	adds	r3, r7, r1
 80007ec:	2215      	movs	r2, #21
 80007ee:	18ba      	adds	r2, r7, r2
 80007f0:	7812      	ldrb	r2, [r2, #0]
 80007f2:	701a      	strb	r2, [r3, #0]
            pixel.G = v;
 80007f4:	187b      	adds	r3, r7, r1
 80007f6:	1dba      	adds	r2, r7, #6
 80007f8:	7812      	ldrb	r2, [r2, #0]
 80007fa:	705a      	strb	r2, [r3, #1]
            pixel.B = t;
 80007fc:	187b      	adds	r3, r7, r1
 80007fe:	2213      	movs	r2, #19
 8000800:	18ba      	adds	r2, r7, r2
 8000802:	7812      	ldrb	r2, [r2, #0]
 8000804:	709a      	strb	r2, [r3, #2]
            break;
 8000806:	e02f      	b.n	8000868 <HSVtoPixel+0x170>
        case 3:
            pixel.R = p;
 8000808:	210c      	movs	r1, #12
 800080a:	187b      	adds	r3, r7, r1
 800080c:	2215      	movs	r2, #21
 800080e:	18ba      	adds	r2, r7, r2
 8000810:	7812      	ldrb	r2, [r2, #0]
 8000812:	701a      	strb	r2, [r3, #0]
            pixel.G = q;
 8000814:	187b      	adds	r3, r7, r1
 8000816:	2214      	movs	r2, #20
 8000818:	18ba      	adds	r2, r7, r2
 800081a:	7812      	ldrb	r2, [r2, #0]
 800081c:	705a      	strb	r2, [r3, #1]
            pixel.B = v;
 800081e:	187b      	adds	r3, r7, r1
 8000820:	1dba      	adds	r2, r7, #6
 8000822:	7812      	ldrb	r2, [r2, #0]
 8000824:	709a      	strb	r2, [r3, #2]
            break;
 8000826:	e01f      	b.n	8000868 <HSVtoPixel+0x170>
        case 4:
            pixel.R = t;
 8000828:	210c      	movs	r1, #12
 800082a:	187b      	adds	r3, r7, r1
 800082c:	2213      	movs	r2, #19
 800082e:	18ba      	adds	r2, r7, r2
 8000830:	7812      	ldrb	r2, [r2, #0]
 8000832:	701a      	strb	r2, [r3, #0]
            pixel.G = p;
 8000834:	187b      	adds	r3, r7, r1
 8000836:	2215      	movs	r2, #21
 8000838:	18ba      	adds	r2, r7, r2
 800083a:	7812      	ldrb	r2, [r2, #0]
 800083c:	705a      	strb	r2, [r3, #1]
            pixel.B = v;
 800083e:	187b      	adds	r3, r7, r1
 8000840:	1dba      	adds	r2, r7, #6
 8000842:	7812      	ldrb	r2, [r2, #0]
 8000844:	709a      	strb	r2, [r3, #2]
            break;
 8000846:	e00f      	b.n	8000868 <HSVtoPixel+0x170>
        default:
            pixel.R = v;
 8000848:	210c      	movs	r1, #12
 800084a:	187b      	adds	r3, r7, r1
 800084c:	1dba      	adds	r2, r7, #6
 800084e:	7812      	ldrb	r2, [r2, #0]
 8000850:	701a      	strb	r2, [r3, #0]
            pixel.G = p;
 8000852:	187b      	adds	r3, r7, r1
 8000854:	2215      	movs	r2, #21
 8000856:	18ba      	adds	r2, r7, r2
 8000858:	7812      	ldrb	r2, [r2, #0]
 800085a:	705a      	strb	r2, [r3, #1]
            pixel.B = q;
 800085c:	187b      	adds	r3, r7, r1
 800085e:	2214      	movs	r2, #20
 8000860:	18ba      	adds	r2, r7, r2
 8000862:	7812      	ldrb	r2, [r2, #0]
 8000864:	709a      	strb	r2, [r3, #2]
            break;
 8000866:	46c0      	nop			; (mov r8, r8)
    }

    // Appliquer le masque pour forcer les valeurs à être paires
    pixel.R &= 0xFE; // Le masque 0xFE force le dernier bit à 0.
 8000868:	210c      	movs	r1, #12
 800086a:	187b      	adds	r3, r7, r1
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	2201      	movs	r2, #1
 8000870:	4393      	bics	r3, r2
 8000872:	b2da      	uxtb	r2, r3
 8000874:	187b      	adds	r3, r7, r1
 8000876:	701a      	strb	r2, [r3, #0]
    pixel.G &= 0xFE;
 8000878:	187b      	adds	r3, r7, r1
 800087a:	785b      	ldrb	r3, [r3, #1]
 800087c:	2201      	movs	r2, #1
 800087e:	4393      	bics	r3, r2
 8000880:	b2da      	uxtb	r2, r3
 8000882:	187b      	adds	r3, r7, r1
 8000884:	705a      	strb	r2, [r3, #1]
    pixel.B &= 0xFE;
 8000886:	187b      	adds	r3, r7, r1
 8000888:	789b      	ldrb	r3, [r3, #2]
 800088a:	2201      	movs	r2, #1
 800088c:	4393      	bics	r3, r2
 800088e:	b2da      	uxtb	r2, r3
 8000890:	187b      	adds	r3, r7, r1
 8000892:	709a      	strb	r2, [r3, #2]

    return pixel;
 8000894:	2010      	movs	r0, #16
 8000896:	183b      	adds	r3, r7, r0
 8000898:	187a      	adds	r2, r7, r1
 800089a:	8811      	ldrh	r1, [r2, #0]
 800089c:	8019      	strh	r1, [r3, #0]
 800089e:	7892      	ldrb	r2, [r2, #2]
 80008a0:	709a      	strb	r2, [r3, #2]
 80008a2:	183a      	adds	r2, r7, r0
 80008a4:	2300      	movs	r3, #0
 80008a6:	7811      	ldrb	r1, [r2, #0]
 80008a8:	20ff      	movs	r0, #255	; 0xff
 80008aa:	4001      	ands	r1, r0
 80008ac:	20ff      	movs	r0, #255	; 0xff
 80008ae:	4383      	bics	r3, r0
 80008b0:	430b      	orrs	r3, r1
 80008b2:	7851      	ldrb	r1, [r2, #1]
 80008b4:	20ff      	movs	r0, #255	; 0xff
 80008b6:	4001      	ands	r1, r0
 80008b8:	0209      	lsls	r1, r1, #8
 80008ba:	4808      	ldr	r0, [pc, #32]	; (80008dc <HSVtoPixel+0x1e4>)
 80008bc:	4003      	ands	r3, r0
 80008be:	430b      	orrs	r3, r1
 80008c0:	7892      	ldrb	r2, [r2, #2]
 80008c2:	21ff      	movs	r1, #255	; 0xff
 80008c4:	400a      	ands	r2, r1
 80008c6:	0412      	lsls	r2, r2, #16
 80008c8:	4905      	ldr	r1, [pc, #20]	; (80008e0 <HSVtoPixel+0x1e8>)
 80008ca:	400b      	ands	r3, r1
 80008cc:	4313      	orrs	r3, r2
}
 80008ce:	0018      	movs	r0, r3
 80008d0:	46bd      	mov	sp, r7
 80008d2:	b006      	add	sp, #24
 80008d4:	bdb0      	pop	{r4, r5, r7, pc}
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	080059cc 	.word	0x080059cc
 80008dc:	ffff00ff 	.word	0xffff00ff
 80008e0:	ff00ffff 	.word	0xff00ffff

080008e4 <ws2812_start>:
/* Variables -----------------------------------------------*/
static uint8_t LEDbuffer[LED_BUFFER_SIZE];
extern TIM_HandleTypeDef htim2;

/* Functions -----------------------------------------------*/
void ws2812_start(void) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
	fillBufferBlack();
 80008e8:	f000 f8c2 	bl	8000a70 <fillBufferBlack>
	htim2.Init.Period = TIMER_PERIOD - 1;
 80008ec:	4b07      	ldr	r3, [pc, #28]	; (800090c <ws2812_start+0x28>)
 80008ee:	2209      	movs	r2, #9
 80008f0:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Init(&htim2);
 80008f2:	4b06      	ldr	r3, [pc, #24]	; (800090c <ws2812_start+0x28>)
 80008f4:	0018      	movs	r0, r3
 80008f6:	f002 fd41 	bl	800337c <HAL_TIM_Base_Init>
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *) LEDbuffer,
 80008fa:	4b05      	ldr	r3, [pc, #20]	; (8000910 <ws2812_start+0x2c>)
 80008fc:	4a05      	ldr	r2, [pc, #20]	; (8000914 <ws2812_start+0x30>)
 80008fe:	4803      	ldr	r0, [pc, #12]	; (800090c <ws2812_start+0x28>)
 8000900:	2100      	movs	r1, #0
 8000902:	f002 fde3 	bl	80034cc <HAL_TIM_PWM_Start_DMA>
				LED_BUFFER_SIZE);
	//HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
}
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20000b30 	.word	0x20000b30
 8000910:	00000a61 	.word	0x00000a61
 8000914:	2000008c 	.word	0x2000008c

08000918 <setLEDcolor>:
void ws2812_update(void) {
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *) LEDbuffer,
			LED_BUFFER_SIZE);
}

void setLEDcolor(uint32_t LEDnumber, uint8_t RED, uint8_t GREEN, uint8_t BLUE) {
 8000918:	b590      	push	{r4, r7, lr}
 800091a:	b08b      	sub	sp, #44	; 0x2c
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	000c      	movs	r4, r1
 8000922:	0010      	movs	r0, r2
 8000924:	0019      	movs	r1, r3
 8000926:	1cfb      	adds	r3, r7, #3
 8000928:	1c22      	adds	r2, r4, #0
 800092a:	701a      	strb	r2, [r3, #0]
 800092c:	1cbb      	adds	r3, r7, #2
 800092e:	1c02      	adds	r2, r0, #0
 8000930:	701a      	strb	r2, [r3, #0]
 8000932:	1c7b      	adds	r3, r7, #1
 8000934:	1c0a      	adds	r2, r1, #0
 8000936:	701a      	strb	r2, [r3, #0]
	uint8_t tempBuffer[24];
	uint32_t i;
	uint32_t LEDindex;
	LEDindex = LEDnumber % LED_NUMBER;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	215e      	movs	r1, #94	; 0x5e
 800093c:	0018      	movs	r0, r3
 800093e:	f7ff fc69 	bl	8000214 <__aeabi_uidivmod>
 8000942:	000b      	movs	r3, r1
 8000944:	623b      	str	r3, [r7, #32]

	for (i = 0; i < 8; i++) // GREEN data
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
 800094a:	e013      	b.n	8000974 <setLEDcolor+0x5c>
		tempBuffer[i] = ((GREEN << i) & 0x80) ? WS2812_1 : WS2812_0;
 800094c:	1cbb      	adds	r3, r7, #2
 800094e:	781a      	ldrb	r2, [r3, #0]
 8000950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000952:	409a      	lsls	r2, r3
 8000954:	0013      	movs	r3, r2
 8000956:	2280      	movs	r2, #128	; 0x80
 8000958:	4013      	ands	r3, r2
 800095a:	d001      	beq.n	8000960 <setLEDcolor+0x48>
 800095c:	2106      	movs	r1, #6
 800095e:	e000      	b.n	8000962 <setLEDcolor+0x4a>
 8000960:	2103      	movs	r1, #3
 8000962:	2308      	movs	r3, #8
 8000964:	18fa      	adds	r2, r7, r3
 8000966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000968:	18d3      	adds	r3, r2, r3
 800096a:	1c0a      	adds	r2, r1, #0
 800096c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) // GREEN data
 800096e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000970:	3301      	adds	r3, #1
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
 8000974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000976:	2b07      	cmp	r3, #7
 8000978:	d9e8      	bls.n	800094c <setLEDcolor+0x34>
	for (i = 0; i < 8; i++) // RED
 800097a:	2300      	movs	r3, #0
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
 800097e:	e012      	b.n	80009a6 <setLEDcolor+0x8e>
		tempBuffer[8 + i] = ((RED << i) & 0x80) ? WS2812_1 : WS2812_0;
 8000980:	1cfb      	adds	r3, r7, #3
 8000982:	781a      	ldrb	r2, [r3, #0]
 8000984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000986:	409a      	lsls	r2, r3
 8000988:	0013      	movs	r3, r2
 800098a:	2280      	movs	r2, #128	; 0x80
 800098c:	4013      	ands	r3, r2
 800098e:	d001      	beq.n	8000994 <setLEDcolor+0x7c>
 8000990:	2106      	movs	r1, #6
 8000992:	e000      	b.n	8000996 <setLEDcolor+0x7e>
 8000994:	2103      	movs	r1, #3
 8000996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000998:	3308      	adds	r3, #8
 800099a:	2208      	movs	r2, #8
 800099c:	18ba      	adds	r2, r7, r2
 800099e:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < 8; i++) // RED
 80009a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a2:	3301      	adds	r3, #1
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
 80009a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a8:	2b07      	cmp	r3, #7
 80009aa:	d9e9      	bls.n	8000980 <setLEDcolor+0x68>
	for (i = 0; i < 8; i++) // BLUE
 80009ac:	2300      	movs	r3, #0
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
 80009b0:	e012      	b.n	80009d8 <setLEDcolor+0xc0>
		tempBuffer[16 + i] = ((BLUE << i) & 0x80) ? WS2812_1 : WS2812_0;
 80009b2:	1c7b      	adds	r3, r7, #1
 80009b4:	781a      	ldrb	r2, [r3, #0]
 80009b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b8:	409a      	lsls	r2, r3
 80009ba:	0013      	movs	r3, r2
 80009bc:	2280      	movs	r2, #128	; 0x80
 80009be:	4013      	ands	r3, r2
 80009c0:	d001      	beq.n	80009c6 <setLEDcolor+0xae>
 80009c2:	2106      	movs	r1, #6
 80009c4:	e000      	b.n	80009c8 <setLEDcolor+0xb0>
 80009c6:	2103      	movs	r1, #3
 80009c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ca:	3310      	adds	r3, #16
 80009cc:	2208      	movs	r2, #8
 80009ce:	18ba      	adds	r2, r7, r2
 80009d0:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < 8; i++) // BLUE
 80009d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d4:	3301      	adds	r3, #1
 80009d6:	627b      	str	r3, [r7, #36]	; 0x24
 80009d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009da:	2b07      	cmp	r3, #7
 80009dc:	d9e9      	bls.n	80009b2 <setLEDcolor+0x9a>

	for (i = 0; i < 24; i++)
 80009de:	2300      	movs	r3, #0
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
 80009e2:	e012      	b.n	8000a0a <setLEDcolor+0xf2>
		LEDbuffer[RESET_SLOTS_BEGIN + LEDindex * 24 + i] = tempBuffer[i];
 80009e4:	6a3a      	ldr	r2, [r7, #32]
 80009e6:	0013      	movs	r3, r2
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	189b      	adds	r3, r3, r2
 80009ec:	00db      	lsls	r3, r3, #3
 80009ee:	001a      	movs	r2, r3
 80009f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f2:	18d3      	adds	r3, r2, r3
 80009f4:	33c8      	adds	r3, #200	; 0xc8
 80009f6:	2208      	movs	r2, #8
 80009f8:	18b9      	adds	r1, r7, r2
 80009fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009fc:	188a      	adds	r2, r1, r2
 80009fe:	7811      	ldrb	r1, [r2, #0]
 8000a00:	4a06      	ldr	r2, [pc, #24]	; (8000a1c <setLEDcolor+0x104>)
 8000a02:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < 24; i++)
 8000a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a06:	3301      	adds	r3, #1
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
 8000a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a0c:	2b17      	cmp	r3, #23
 8000a0e:	d9e9      	bls.n	80009e4 <setLEDcolor+0xcc>
}
 8000a10:	46c0      	nop			; (mov r8, r8)
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	46bd      	mov	sp, r7
 8000a16:	b00b      	add	sp, #44	; 0x2c
 8000a18:	bd90      	pop	{r4, r7, pc}
 8000a1a:	46c0      	nop			; (mov r8, r8)
 8000a1c:	2000008c 	.word	0x2000008c

08000a20 <setWHOLEcolor>:

void setWHOLEcolor(uint8_t RED, uint8_t GREEN, uint8_t BLUE) {
 8000a20:	b590      	push	{r4, r7, lr}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	0004      	movs	r4, r0
 8000a28:	0008      	movs	r0, r1
 8000a2a:	0011      	movs	r1, r2
 8000a2c:	1dfb      	adds	r3, r7, #7
 8000a2e:	1c22      	adds	r2, r4, #0
 8000a30:	701a      	strb	r2, [r3, #0]
 8000a32:	1dbb      	adds	r3, r7, #6
 8000a34:	1c02      	adds	r2, r0, #0
 8000a36:	701a      	strb	r2, [r3, #0]
 8000a38:	1d7b      	adds	r3, r7, #5
 8000a3a:	1c0a      	adds	r2, r1, #0
 8000a3c:	701a      	strb	r2, [r3, #0]
	uint32_t index;

	for (index = 0; index < LED_NUMBER; index++)
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	e00c      	b.n	8000a5e <setWHOLEcolor+0x3e>
		setLEDcolor(index, RED, GREEN, BLUE);
 8000a44:	1d7b      	adds	r3, r7, #5
 8000a46:	781c      	ldrb	r4, [r3, #0]
 8000a48:	1dbb      	adds	r3, r7, #6
 8000a4a:	781a      	ldrb	r2, [r3, #0]
 8000a4c:	1dfb      	adds	r3, r7, #7
 8000a4e:	7819      	ldrb	r1, [r3, #0]
 8000a50:	68f8      	ldr	r0, [r7, #12]
 8000a52:	0023      	movs	r3, r4
 8000a54:	f7ff ff60 	bl	8000918 <setLEDcolor>
	for (index = 0; index < LED_NUMBER; index++)
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	2b5d      	cmp	r3, #93	; 0x5d
 8000a62:	d9ef      	bls.n	8000a44 <setWHOLEcolor+0x24>
}
 8000a64:	46c0      	nop			; (mov r8, r8)
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	b005      	add	sp, #20
 8000a6c:	bd90      	pop	{r4, r7, pc}
	...

08000a70 <fillBufferBlack>:

void fillBufferBlack(void) {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
	/*Fill LED buffer - ALL OFF*/
	uint32_t index, buffIndex;
	buffIndex = 0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	603b      	str	r3, [r7, #0]

	for (index = 0; index < RESET_SLOTS_BEGIN; index++) {
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	607b      	str	r3, [r7, #4]
 8000a7e:	e00a      	b.n	8000a96 <fillBufferBlack+0x26>
		LEDbuffer[buffIndex] = WS2812_RESET;
 8000a80:	4a1f      	ldr	r2, [pc, #124]	; (8000b00 <fillBufferBlack+0x90>)
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	18d3      	adds	r3, r2, r3
 8000a86:	2200      	movs	r2, #0
 8000a88:	701a      	strb	r2, [r3, #0]
		buffIndex++;
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	603b      	str	r3, [r7, #0]
	for (index = 0; index < RESET_SLOTS_BEGIN; index++) {
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	3301      	adds	r3, #1
 8000a94:	607b      	str	r3, [r7, #4]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2bc7      	cmp	r3, #199	; 0xc7
 8000a9a:	d9f1      	bls.n	8000a80 <fillBufferBlack+0x10>
	}
	for (index = 0; index < LED_DATA_SIZE; index++) {
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	e00a      	b.n	8000ab8 <fillBufferBlack+0x48>
		LEDbuffer[buffIndex] = WS2812_0;
 8000aa2:	4a17      	ldr	r2, [pc, #92]	; (8000b00 <fillBufferBlack+0x90>)
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	18d3      	adds	r3, r2, r3
 8000aa8:	2203      	movs	r2, #3
 8000aaa:	701a      	strb	r2, [r3, #0]
		buffIndex++;
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	603b      	str	r3, [r7, #0]
	for (index = 0; index < LED_DATA_SIZE; index++) {
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687a      	ldr	r2, [r7, #4]
 8000aba:	238d      	movs	r3, #141	; 0x8d
 8000abc:	011b      	lsls	r3, r3, #4
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	d3ef      	bcc.n	8000aa2 <fillBufferBlack+0x32>
	}
	LEDbuffer[buffIndex] = WS2812_0;
 8000ac2:	4a0f      	ldr	r2, [pc, #60]	; (8000b00 <fillBufferBlack+0x90>)
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	18d3      	adds	r3, r2, r3
 8000ac8:	2203      	movs	r2, #3
 8000aca:	701a      	strb	r2, [r3, #0]
	buffIndex++;
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	603b      	str	r3, [r7, #0]
	for (index = 0; index < RESET_SLOTS_END; index++) {
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	e00a      	b.n	8000aee <fillBufferBlack+0x7e>
		LEDbuffer[buffIndex] = 0;
 8000ad8:	4a09      	ldr	r2, [pc, #36]	; (8000b00 <fillBufferBlack+0x90>)
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	18d3      	adds	r3, r2, r3
 8000ade:	2200      	movs	r2, #0
 8000ae0:	701a      	strb	r2, [r3, #0]
		buffIndex++;
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	603b      	str	r3, [r7, #0]
	for (index = 0; index < RESET_SLOTS_END; index++) {
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	3301      	adds	r3, #1
 8000aec:	607b      	str	r3, [r7, #4]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2bc7      	cmp	r3, #199	; 0xc7
 8000af2:	d9f1      	bls.n	8000ad8 <fillBufferBlack+0x68>
	}
}
 8000af4:	46c0      	nop			; (mov r8, r8)
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	46bd      	mov	sp, r7
 8000afa:	b002      	add	sp, #8
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	2000008c 	.word	0x2000008c

08000b04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b04:	b5b0      	push	{r4, r5, r7, lr}
 8000b06:	b08c      	sub	sp, #48	; 0x30
 8000b08:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b0a:	f000 fda9 	bl	8001660 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b0e:	f000 f921 	bl	8000d54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b12:	f000 faaf 	bl	8001074 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b16:	f000 fa87 	bl	8001028 <MX_DMA_Init>
  MX_TIM2_Init();
 8000b1a:	f000 f9d5 	bl	8000ec8 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000b1e:	f000 fa51 	bl	8000fc4 <MX_USART1_UART_Init>
  MX_ADC_Init();
 8000b22:	f000 f975 	bl	8000e10 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  ws2812_start();
 8000b26:	f7ff fedd 	bl	80008e4 <ws2812_start>
  HAL_UART_Receive_IT(&huart1, Rx_data, 19);
 8000b2a:	4983      	ldr	r1, [pc, #524]	; (8000d38 <main+0x234>)
 8000b2c:	4b83      	ldr	r3, [pc, #524]	; (8000d3c <main+0x238>)
 8000b2e:	2213      	movs	r2, #19
 8000b30:	0018      	movs	r0, r3
 8000b32:	f003 fcbb 	bl	80044ac <HAL_UART_Receive_IT>
  //HAL_ADC_Calibration_Start(&hadc);



  uint8_t H =0;
 8000b36:	2327      	movs	r3, #39	; 0x27
 8000b38:	18fb      	adds	r3, r7, r3
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	701a      	strb	r2, [r3, #0]
  uint8_t facteurLuminosite=255;
 8000b3e:	2326      	movs	r3, #38	; 0x26
 8000b40:	18fb      	adds	r3, r7, r3
 8000b42:	22ff      	movs	r2, #255	; 0xff
 8000b44:	701a      	strb	r2, [r3, #0]

  // Déclarez une instance de Canvas
  Canvas myCanvas;
  Canvas blackCanvas;
  // Initialisez la structure Canvas
  myCanvas.numCols = NUM_COLS;
 8000b46:	2414      	movs	r4, #20
 8000b48:	193b      	adds	r3, r7, r4
 8000b4a:	2213      	movs	r2, #19
 8000b4c:	601a      	str	r2, [r3, #0]
  myCanvas.numRows = NUM_ROWS;
 8000b4e:	193b      	adds	r3, r7, r4
 8000b50:	2205      	movs	r2, #5
 8000b52:	605a      	str	r2, [r3, #4]
  // Allouez de la mémoire pour les pixels
  myCanvas.pixels = malloc(sizeof(Pixel) * NUM_COLS * NUM_ROWS);
 8000b54:	231e      	movs	r3, #30
 8000b56:	33ff      	adds	r3, #255	; 0xff
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f004 fe53 	bl	8005804 <malloc>
 8000b5e:	0003      	movs	r3, r0
 8000b60:	001a      	movs	r2, r3
 8000b62:	193b      	adds	r3, r7, r4
 8000b64:	609a      	str	r2, [r3, #8]
  // Utilisez memset pour initialiser le tableau à zéro
  memset(myCanvas.pixels, 0, sizeof(Pixel) * NUM_COLS * NUM_ROWS);
 8000b66:	193b      	adds	r3, r7, r4
 8000b68:	689b      	ldr	r3, [r3, #8]
 8000b6a:	221e      	movs	r2, #30
 8000b6c:	32ff      	adds	r2, #255	; 0xff
 8000b6e:	2100      	movs	r1, #0
 8000b70:	0018      	movs	r0, r3
 8000b72:	f004 fe5a 	bl	800582a <memset>


  blackCanvas.numCols = NUM_COLS;
 8000b76:	2408      	movs	r4, #8
 8000b78:	193b      	adds	r3, r7, r4
 8000b7a:	2213      	movs	r2, #19
 8000b7c:	601a      	str	r2, [r3, #0]
    blackCanvas.numRows = NUM_ROWS;
 8000b7e:	193b      	adds	r3, r7, r4
 8000b80:	2205      	movs	r2, #5
 8000b82:	605a      	str	r2, [r3, #4]
    // Allouez de la mémoire pour les pixels
    blackCanvas.pixels = malloc(sizeof(Pixel) * NUM_COLS * NUM_ROWS);
 8000b84:	231e      	movs	r3, #30
 8000b86:	33ff      	adds	r3, #255	; 0xff
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f004 fe3b 	bl	8005804 <malloc>
 8000b8e:	0003      	movs	r3, r0
 8000b90:	001a      	movs	r2, r3
 8000b92:	193b      	adds	r3, r7, r4
 8000b94:	609a      	str	r2, [r3, #8]
    // Utilisez memset pour initialiser le tableau à zéro
    memset(blackCanvas.pixels, 0, sizeof(Pixel) * NUM_COLS * NUM_ROWS);
 8000b96:	193b      	adds	r3, r7, r4
 8000b98:	689b      	ldr	r3, [r3, #8]
 8000b9a:	221e      	movs	r2, #30
 8000b9c:	32ff      	adds	r2, #255	; 0xff
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	f004 fe42 	bl	800582a <memset>
  // Vous pouvez maintenant utiliser myCanvas et les pixels initialisé
  setCanvasColor(&blackCanvas, (Pixel){0,0,0});
 8000ba6:	1d3b      	adds	r3, r7, #4
 8000ba8:	2200      	movs	r2, #0
 8000baa:	701a      	strb	r2, [r3, #0]
 8000bac:	1d3b      	adds	r3, r7, #4
 8000bae:	2200      	movs	r2, #0
 8000bb0:	705a      	strb	r2, [r3, #1]
 8000bb2:	1d3b      	adds	r3, r7, #4
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	709a      	strb	r2, [r3, #2]
 8000bb8:	1d3b      	adds	r3, r7, #4
 8000bba:	193a      	adds	r2, r7, r4
 8000bbc:	6819      	ldr	r1, [r3, #0]
 8000bbe:	0010      	movs	r0, r2
 8000bc0:	f7ff fc4a 	bl	8000458 <setCanvasColor>
//
//	  ReadADC = HAL_ADC_GetValue(&hadc);



	  if(HAL_UART_Receive_IT(&huart1, Rx_data, 19) != HAL_BUSY)
 8000bc4:	495c      	ldr	r1, [pc, #368]	; (8000d38 <main+0x234>)
 8000bc6:	4b5d      	ldr	r3, [pc, #372]	; (8000d3c <main+0x238>)
 8000bc8:	2213      	movs	r2, #19
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f003 fc6e 	bl	80044ac <HAL_UART_Receive_IT>
 8000bd0:	0003      	movs	r3, r0
 8000bd2:	2b02      	cmp	r3, #2
 8000bd4:	d005      	beq.n	8000be2 <main+0xde>
	  {
		  HAL_UART_Receive_IT(&huart1, Rx_data, 19);
 8000bd6:	4958      	ldr	r1, [pc, #352]	; (8000d38 <main+0x234>)
 8000bd8:	4b58      	ldr	r3, [pc, #352]	; (8000d3c <main+0x238>)
 8000bda:	2213      	movs	r2, #19
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f003 fc65 	bl	80044ac <HAL_UART_Receive_IT>
	  }

	  /**********Measure***************/
	  if(needMeasure){
 8000be2:	4b57      	ldr	r3, [pc, #348]	; (8000d40 <main+0x23c>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d00d      	beq.n	8000c06 <main+0x102>
		  facteurLuminosite = flashReadADC(&myCanvas) + LUM_CAL_OFFSET;
 8000bea:	2314      	movs	r3, #20
 8000bec:	18fb      	adds	r3, r7, r3
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f7ff fc16 	bl	8000420 <flashReadADC>
 8000bf4:	0003      	movs	r3, r0
 8000bf6:	001a      	movs	r2, r3
 8000bf8:	2326      	movs	r3, #38	; 0x26
 8000bfa:	18fb      	adds	r3, r7, r3
 8000bfc:	3a05      	subs	r2, #5
 8000bfe:	701a      	strb	r2, [r3, #0]
		  needMeasure = false;
 8000c00:	4b4f      	ldr	r3, [pc, #316]	; (8000d40 <main+0x23c>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]
	  }

	  /**********Background***************/

	  for(uint8_t diag=1; diag<=23; diag++){
 8000c06:	2325      	movs	r3, #37	; 0x25
 8000c08:	18fb      	adds	r3, r7, r3
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	701a      	strb	r2, [r3, #0]
 8000c0e:	e03c      	b.n	8000c8a <main+0x186>
		  colorDiagonal(&myCanvas, HSVtoPixel((RB_SPEED*H + (diag* 255 / 23))%255 , (facteurLuminosite*RB_MAX_LUX)/255), diag);
 8000c10:	2327      	movs	r3, #39	; 0x27
 8000c12:	18fb      	adds	r3, r7, r3
 8000c14:	781c      	ldrb	r4, [r3, #0]
 8000c16:	2525      	movs	r5, #37	; 0x25
 8000c18:	197b      	adds	r3, r7, r5
 8000c1a:	781a      	ldrb	r2, [r3, #0]
 8000c1c:	0013      	movs	r3, r2
 8000c1e:	021b      	lsls	r3, r3, #8
 8000c20:	1a9b      	subs	r3, r3, r2
 8000c22:	2117      	movs	r1, #23
 8000c24:	0018      	movs	r0, r3
 8000c26:	f7ff faf9 	bl	800021c <__divsi3>
 8000c2a:	0003      	movs	r3, r0
 8000c2c:	18e3      	adds	r3, r4, r3
 8000c2e:	21ff      	movs	r1, #255	; 0xff
 8000c30:	0018      	movs	r0, r3
 8000c32:	f7ff fbd9 	bl	80003e8 <__aeabi_idivmod>
 8000c36:	000b      	movs	r3, r1
 8000c38:	b2dc      	uxtb	r4, r3
 8000c3a:	2326      	movs	r3, #38	; 0x26
 8000c3c:	18fb      	adds	r3, r7, r3
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2264      	movs	r2, #100	; 0x64
 8000c42:	4353      	muls	r3, r2
 8000c44:	21ff      	movs	r1, #255	; 0xff
 8000c46:	0018      	movs	r0, r3
 8000c48:	f7ff fae8 	bl	800021c <__divsi3>
 8000c4c:	0003      	movs	r3, r0
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	0019      	movs	r1, r3
 8000c52:	0020      	movs	r0, r4
 8000c54:	f7ff fd50 	bl	80006f8 <HSVtoPixel>
 8000c58:	0003      	movs	r3, r0
 8000c5a:	001a      	movs	r2, r3
 8000c5c:	2020      	movs	r0, #32
 8000c5e:	183b      	adds	r3, r7, r0
 8000c60:	1c11      	adds	r1, r2, #0
 8000c62:	7019      	strb	r1, [r3, #0]
 8000c64:	0411      	lsls	r1, r2, #16
 8000c66:	0e09      	lsrs	r1, r1, #24
 8000c68:	7059      	strb	r1, [r3, #1]
 8000c6a:	0212      	lsls	r2, r2, #8
 8000c6c:	0e12      	lsrs	r2, r2, #24
 8000c6e:	709a      	strb	r2, [r3, #2]
 8000c70:	197b      	adds	r3, r7, r5
 8000c72:	781a      	ldrb	r2, [r3, #0]
 8000c74:	183b      	adds	r3, r7, r0
 8000c76:	2114      	movs	r1, #20
 8000c78:	1878      	adds	r0, r7, r1
 8000c7a:	6819      	ldr	r1, [r3, #0]
 8000c7c:	f7ff fc86 	bl	800058c <colorDiagonal>
	  for(uint8_t diag=1; diag<=23; diag++){
 8000c80:	197b      	adds	r3, r7, r5
 8000c82:	781a      	ldrb	r2, [r3, #0]
 8000c84:	197b      	adds	r3, r7, r5
 8000c86:	3201      	adds	r2, #1
 8000c88:	701a      	strb	r2, [r3, #0]
 8000c8a:	2325      	movs	r3, #37	; 0x25
 8000c8c:	18fb      	adds	r3, r7, r3
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b17      	cmp	r3, #23
 8000c92:	d9bd      	bls.n	8000c10 <main+0x10c>
	  }

	  displayBCD(&myCanvas, 2, 3, Heures_D, 2, facteurLuminosite);
 8000c94:	4b2b      	ldr	r3, [pc, #172]	; (8000d44 <main+0x240>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	001a      	movs	r2, r3
 8000c9a:	2526      	movs	r5, #38	; 0x26
 8000c9c:	197b      	adds	r3, r7, r5
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	2414      	movs	r4, #20
 8000ca2:	1938      	adds	r0, r7, r4
 8000ca4:	9301      	str	r3, [sp, #4]
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	9300      	str	r3, [sp, #0]
 8000caa:	0013      	movs	r3, r2
 8000cac:	2203      	movs	r2, #3
 8000cae:	2102      	movs	r1, #2
 8000cb0:	f7ff fca6 	bl	8000600 <displayBCD>
	  displayBCD(&myCanvas, 5, 3, Heures_U, 4, facteurLuminosite);
 8000cb4:	4b24      	ldr	r3, [pc, #144]	; (8000d48 <main+0x244>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	001a      	movs	r2, r3
 8000cba:	197b      	adds	r3, r7, r5
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	1938      	adds	r0, r7, r4
 8000cc0:	9301      	str	r3, [sp, #4]
 8000cc2:	2304      	movs	r3, #4
 8000cc4:	9300      	str	r3, [sp, #0]
 8000cc6:	0013      	movs	r3, r2
 8000cc8:	2203      	movs	r2, #3
 8000cca:	2105      	movs	r1, #5
 8000ccc:	f7ff fc98 	bl	8000600 <displayBCD>
	  displayBCD(&myCanvas, 10, 3, Minutes_D, 4, facteurLuminosite);
 8000cd0:	4b1e      	ldr	r3, [pc, #120]	; (8000d4c <main+0x248>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	001a      	movs	r2, r3
 8000cd6:	197b      	adds	r3, r7, r5
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	1938      	adds	r0, r7, r4
 8000cdc:	9301      	str	r3, [sp, #4]
 8000cde:	2304      	movs	r3, #4
 8000ce0:	9300      	str	r3, [sp, #0]
 8000ce2:	0013      	movs	r3, r2
 8000ce4:	2203      	movs	r2, #3
 8000ce6:	210a      	movs	r1, #10
 8000ce8:	f7ff fc8a 	bl	8000600 <displayBCD>
	  displayBCD(&myCanvas, 15, 3, Minutes_U, 4, facteurLuminosite);
 8000cec:	4b18      	ldr	r3, [pc, #96]	; (8000d50 <main+0x24c>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	001a      	movs	r2, r3
 8000cf2:	197b      	adds	r3, r7, r5
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	1938      	adds	r0, r7, r4
 8000cf8:	9301      	str	r3, [sp, #4]
 8000cfa:	2304      	movs	r3, #4
 8000cfc:	9300      	str	r3, [sp, #0]
 8000cfe:	0013      	movs	r3, r2
 8000d00:	2203      	movs	r2, #3
 8000d02:	210f      	movs	r1, #15
 8000d04:	f7ff fc7c 	bl	8000600 <displayBCD>

	  sendCanvas(&myCanvas);
 8000d08:	193b      	adds	r3, r7, r4
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	f7ff fbd3 	bl	80004b6 <sendCanvas>

	  H++;
 8000d10:	2427      	movs	r4, #39	; 0x27
 8000d12:	193b      	adds	r3, r7, r4
 8000d14:	781a      	ldrb	r2, [r3, #0]
 8000d16:	193b      	adds	r3, r7, r4
 8000d18:	3201      	adds	r2, #1
 8000d1a:	701a      	strb	r2, [r3, #0]
	  if(!((RB_SPEED*H)%255)){
 8000d1c:	193b      	adds	r3, r7, r4
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	21ff      	movs	r1, #255	; 0xff
 8000d22:	0018      	movs	r0, r3
 8000d24:	f7ff fb60 	bl	80003e8 <__aeabi_idivmod>
 8000d28:	1e0b      	subs	r3, r1, #0
 8000d2a:	d000      	beq.n	8000d2e <main+0x22a>
 8000d2c:	e74a      	b.n	8000bc4 <main+0xc0>
		  H=0;
 8000d2e:	193b      	adds	r3, r7, r4
 8000d30:	2200      	movs	r2, #0
 8000d32:	701a      	strb	r2, [r3, #0]
	  if(HAL_UART_Receive_IT(&huart1, Rx_data, 19) != HAL_BUSY)
 8000d34:	e746      	b.n	8000bc4 <main+0xc0>
 8000d36:	46c0      	nop			; (mov r8, r8)
 8000d38:	20000c90 	.word	0x20000c90
 8000d3c:	20000bbc 	.word	0x20000bbc
 8000d40:	20000ca3 	.word	0x20000ca3
 8000d44:	20000c8a 	.word	0x20000c8a
 8000d48:	20000c89 	.word	0x20000c89
 8000d4c:	20000c8d 	.word	0x20000c8d
 8000d50:	20000c8c 	.word	0x20000c8c

08000d54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d54:	b590      	push	{r4, r7, lr}
 8000d56:	b099      	sub	sp, #100	; 0x64
 8000d58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d5a:	242c      	movs	r4, #44	; 0x2c
 8000d5c:	193b      	adds	r3, r7, r4
 8000d5e:	0018      	movs	r0, r3
 8000d60:	2334      	movs	r3, #52	; 0x34
 8000d62:	001a      	movs	r2, r3
 8000d64:	2100      	movs	r1, #0
 8000d66:	f004 fd60 	bl	800582a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d6a:	231c      	movs	r3, #28
 8000d6c:	18fb      	adds	r3, r7, r3
 8000d6e:	0018      	movs	r0, r3
 8000d70:	2310      	movs	r3, #16
 8000d72:	001a      	movs	r2, r3
 8000d74:	2100      	movs	r1, #0
 8000d76:	f004 fd58 	bl	800582a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d7a:	1d3b      	adds	r3, r7, #4
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	2318      	movs	r3, #24
 8000d80:	001a      	movs	r2, r3
 8000d82:	2100      	movs	r1, #0
 8000d84:	f004 fd51 	bl	800582a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000d88:	0021      	movs	r1, r4
 8000d8a:	187b      	adds	r3, r7, r1
 8000d8c:	2212      	movs	r2, #18
 8000d8e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d90:	187b      	adds	r3, r7, r1
 8000d92:	2201      	movs	r2, #1
 8000d94:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000d96:	187b      	adds	r3, r7, r1
 8000d98:	2201      	movs	r2, #1
 8000d9a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d9c:	187b      	adds	r3, r7, r1
 8000d9e:	2210      	movs	r2, #16
 8000da0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000da2:	187b      	adds	r3, r7, r1
 8000da4:	2210      	movs	r2, #16
 8000da6:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000da8:	187b      	adds	r3, r7, r1
 8000daa:	2200      	movs	r2, #0
 8000dac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dae:	187b      	adds	r3, r7, r1
 8000db0:	0018      	movs	r0, r3
 8000db2:	f001 fd03 	bl	80027bc <HAL_RCC_OscConfig>
 8000db6:	1e03      	subs	r3, r0, #0
 8000db8:	d001      	beq.n	8000dbe <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000dba:	f000 fa21 	bl	8001200 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dbe:	211c      	movs	r1, #28
 8000dc0:	187b      	adds	r3, r7, r1
 8000dc2:	2207      	movs	r2, #7
 8000dc4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000dc6:	187b      	adds	r3, r7, r1
 8000dc8:	2200      	movs	r2, #0
 8000dca:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dcc:	187b      	adds	r3, r7, r1
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dd2:	187b      	adds	r3, r7, r1
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dd8:	187b      	adds	r3, r7, r1
 8000dda:	2100      	movs	r1, #0
 8000ddc:	0018      	movs	r0, r3
 8000dde:	f002 f873 	bl	8002ec8 <HAL_RCC_ClockConfig>
 8000de2:	1e03      	subs	r3, r0, #0
 8000de4:	d001      	beq.n	8000dea <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000de6:	f000 fa0b 	bl	8001200 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000dea:	1d3b      	adds	r3, r7, #4
 8000dec:	2201      	movs	r2, #1
 8000dee:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000df0:	1d3b      	adds	r3, r7, #4
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	0018      	movs	r0, r3
 8000dfa:	f002 f9d1 	bl	80031a0 <HAL_RCCEx_PeriphCLKConfig>
 8000dfe:	1e03      	subs	r3, r0, #0
 8000e00:	d001      	beq.n	8000e06 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000e02:	f000 f9fd 	bl	8001200 <Error_Handler>
  }
}
 8000e06:	46c0      	nop			; (mov r8, r8)
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	b019      	add	sp, #100	; 0x64
 8000e0c:	bd90      	pop	{r4, r7, pc}
	...

08000e10 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e16:	1d3b      	adds	r3, r7, #4
 8000e18:	0018      	movs	r0, r3
 8000e1a:	230c      	movs	r3, #12
 8000e1c:	001a      	movs	r2, r3
 8000e1e:	2100      	movs	r1, #0
 8000e20:	f004 fd03 	bl	800582a <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000e24:	4b26      	ldr	r3, [pc, #152]	; (8000ec0 <MX_ADC_Init+0xb0>)
 8000e26:	4a27      	ldr	r2, [pc, #156]	; (8000ec4 <MX_ADC_Init+0xb4>)
 8000e28:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e2a:	4b25      	ldr	r3, [pc, #148]	; (8000ec0 <MX_ADC_Init+0xb0>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_8B;
 8000e30:	4b23      	ldr	r3, [pc, #140]	; (8000ec0 <MX_ADC_Init+0xb0>)
 8000e32:	2210      	movs	r2, #16
 8000e34:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e36:	4b22      	ldr	r3, [pc, #136]	; (8000ec0 <MX_ADC_Init+0xb0>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000e3c:	4b20      	ldr	r3, [pc, #128]	; (8000ec0 <MX_ADC_Init+0xb0>)
 8000e3e:	2201      	movs	r2, #1
 8000e40:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e42:	4b1f      	ldr	r3, [pc, #124]	; (8000ec0 <MX_ADC_Init+0xb0>)
 8000e44:	2204      	movs	r2, #4
 8000e46:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000e48:	4b1d      	ldr	r3, [pc, #116]	; (8000ec0 <MX_ADC_Init+0xb0>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000e4e:	4b1c      	ldr	r3, [pc, #112]	; (8000ec0 <MX_ADC_Init+0xb0>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000e54:	4b1a      	ldr	r3, [pc, #104]	; (8000ec0 <MX_ADC_Init+0xb0>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000e5a:	4b19      	ldr	r3, [pc, #100]	; (8000ec0 <MX_ADC_Init+0xb0>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e60:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <MX_ADC_Init+0xb0>)
 8000e62:	22c2      	movs	r2, #194	; 0xc2
 8000e64:	32ff      	adds	r2, #255	; 0xff
 8000e66:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e68:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <MX_ADC_Init+0xb0>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000e6e:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <MX_ADC_Init+0xb0>)
 8000e70:	2224      	movs	r2, #36	; 0x24
 8000e72:	2100      	movs	r1, #0
 8000e74:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e76:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <MX_ADC_Init+0xb0>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000e7c:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <MX_ADC_Init+0xb0>)
 8000e7e:	0018      	movs	r0, r3
 8000e80:	f000 fc76 	bl	8001770 <HAL_ADC_Init>
 8000e84:	1e03      	subs	r3, r0, #0
 8000e86:	d001      	beq.n	8000e8c <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000e88:	f000 f9ba 	bl	8001200 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000e8c:	1d3b      	adds	r3, r7, #4
 8000e8e:	2207      	movs	r2, #7
 8000e90:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000e92:	1d3b      	adds	r3, r7, #4
 8000e94:	2280      	movs	r2, #128	; 0x80
 8000e96:	0152      	lsls	r2, r2, #5
 8000e98:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e9a:	1d3b      	adds	r3, r7, #4
 8000e9c:	2280      	movs	r2, #128	; 0x80
 8000e9e:	0552      	lsls	r2, r2, #21
 8000ea0:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ea2:	1d3a      	adds	r2, r7, #4
 8000ea4:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <MX_ADC_Init+0xb0>)
 8000ea6:	0011      	movs	r1, r2
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	f000 fe99 	bl	8001be0 <HAL_ADC_ConfigChannel>
 8000eae:	1e03      	subs	r3, r0, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000eb2:	f000 f9a5 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000eb6:	46c0      	nop			; (mov r8, r8)
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	b004      	add	sp, #16
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	46c0      	nop			; (mov r8, r8)
 8000ec0:	20000af0 	.word	0x20000af0
 8000ec4:	40012400 	.word	0x40012400

08000ec8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08e      	sub	sp, #56	; 0x38
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ece:	2328      	movs	r3, #40	; 0x28
 8000ed0:	18fb      	adds	r3, r7, r3
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	2310      	movs	r3, #16
 8000ed6:	001a      	movs	r2, r3
 8000ed8:	2100      	movs	r1, #0
 8000eda:	f004 fca6 	bl	800582a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ede:	2320      	movs	r3, #32
 8000ee0:	18fb      	adds	r3, r7, r3
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	2308      	movs	r3, #8
 8000ee6:	001a      	movs	r2, r3
 8000ee8:	2100      	movs	r1, #0
 8000eea:	f004 fc9e 	bl	800582a <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eee:	1d3b      	adds	r3, r7, #4
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	231c      	movs	r3, #28
 8000ef4:	001a      	movs	r2, r3
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	f004 fc97 	bl	800582a <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000efc:	4b30      	ldr	r3, [pc, #192]	; (8000fc0 <MX_TIM2_Init+0xf8>)
 8000efe:	2280      	movs	r2, #128	; 0x80
 8000f00:	05d2      	lsls	r2, r2, #23
 8000f02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f04:	4b2e      	ldr	r3, [pc, #184]	; (8000fc0 <MX_TIM2_Init+0xf8>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f0a:	4b2d      	ldr	r3, [pc, #180]	; (8000fc0 <MX_TIM2_Init+0xf8>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 8000f10:	4b2b      	ldr	r3, [pc, #172]	; (8000fc0 <MX_TIM2_Init+0xf8>)
 8000f12:	2209      	movs	r2, #9
 8000f14:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f16:	4b2a      	ldr	r3, [pc, #168]	; (8000fc0 <MX_TIM2_Init+0xf8>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f1c:	4b28      	ldr	r3, [pc, #160]	; (8000fc0 <MX_TIM2_Init+0xf8>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f22:	4b27      	ldr	r3, [pc, #156]	; (8000fc0 <MX_TIM2_Init+0xf8>)
 8000f24:	0018      	movs	r0, r3
 8000f26:	f002 fa29 	bl	800337c <HAL_TIM_Base_Init>
 8000f2a:	1e03      	subs	r3, r0, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000f2e:	f000 f967 	bl	8001200 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f32:	2128      	movs	r1, #40	; 0x28
 8000f34:	187b      	adds	r3, r7, r1
 8000f36:	2280      	movs	r2, #128	; 0x80
 8000f38:	0152      	lsls	r2, r2, #5
 8000f3a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f3c:	187a      	adds	r2, r7, r1
 8000f3e:	4b20      	ldr	r3, [pc, #128]	; (8000fc0 <MX_TIM2_Init+0xf8>)
 8000f40:	0011      	movs	r1, r2
 8000f42:	0018      	movs	r0, r3
 8000f44:	f002 fd32 	bl	80039ac <HAL_TIM_ConfigClockSource>
 8000f48:	1e03      	subs	r3, r0, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000f4c:	f000 f958 	bl	8001200 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f50:	4b1b      	ldr	r3, [pc, #108]	; (8000fc0 <MX_TIM2_Init+0xf8>)
 8000f52:	0018      	movs	r0, r3
 8000f54:	f002 fa62 	bl	800341c <HAL_TIM_PWM_Init>
 8000f58:	1e03      	subs	r3, r0, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000f5c:	f000 f950 	bl	8001200 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f60:	2120      	movs	r1, #32
 8000f62:	187b      	adds	r3, r7, r1
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f68:	187b      	adds	r3, r7, r1
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f6e:	187a      	adds	r2, r7, r1
 8000f70:	4b13      	ldr	r3, [pc, #76]	; (8000fc0 <MX_TIM2_Init+0xf8>)
 8000f72:	0011      	movs	r1, r2
 8000f74:	0018      	movs	r0, r3
 8000f76:	f003 f9ed 	bl	8004354 <HAL_TIMEx_MasterConfigSynchronization>
 8000f7a:	1e03      	subs	r3, r0, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000f7e:	f000 f93f 	bl	8001200 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f82:	1d3b      	adds	r3, r7, #4
 8000f84:	2260      	movs	r2, #96	; 0x60
 8000f86:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000f88:	1d3b      	adds	r3, r7, #4
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	2200      	movs	r2, #0
 8000f92:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f94:	1d3b      	adds	r3, r7, #4
 8000f96:	2200      	movs	r2, #0
 8000f98:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f9a:	1d39      	adds	r1, r7, #4
 8000f9c:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <MX_TIM2_Init+0xf8>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	f002 fc3d 	bl	8003820 <HAL_TIM_PWM_ConfigChannel>
 8000fa6:	1e03      	subs	r3, r0, #0
 8000fa8:	d001      	beq.n	8000fae <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8000faa:	f000 f929 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000fae:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <MX_TIM2_Init+0xf8>)
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	f000 f9dd 	bl	8001370 <HAL_TIM_MspPostInit>

}
 8000fb6:	46c0      	nop			; (mov r8, r8)
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	b00e      	add	sp, #56	; 0x38
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	46c0      	nop			; (mov r8, r8)
 8000fc0:	20000b30 	.word	0x20000b30

08000fc4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fc8:	4b14      	ldr	r3, [pc, #80]	; (800101c <MX_USART1_UART_Init+0x58>)
 8000fca:	4a15      	ldr	r2, [pc, #84]	; (8001020 <MX_USART1_UART_Init+0x5c>)
 8000fcc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 250000;
 8000fce:	4b13      	ldr	r3, [pc, #76]	; (800101c <MX_USART1_UART_Init+0x58>)
 8000fd0:	4a14      	ldr	r2, [pc, #80]	; (8001024 <MX_USART1_UART_Init+0x60>)
 8000fd2:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fd4:	4b11      	ldr	r3, [pc, #68]	; (800101c <MX_USART1_UART_Init+0x58>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fda:	4b10      	ldr	r3, [pc, #64]	; (800101c <MX_USART1_UART_Init+0x58>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fe0:	4b0e      	ldr	r3, [pc, #56]	; (800101c <MX_USART1_UART_Init+0x58>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fe6:	4b0d      	ldr	r3, [pc, #52]	; (800101c <MX_USART1_UART_Init+0x58>)
 8000fe8:	220c      	movs	r2, #12
 8000fea:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fec:	4b0b      	ldr	r3, [pc, #44]	; (800101c <MX_USART1_UART_Init+0x58>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ff2:	4b0a      	ldr	r3, [pc, #40]	; (800101c <MX_USART1_UART_Init+0x58>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ff8:	4b08      	ldr	r3, [pc, #32]	; (800101c <MX_USART1_UART_Init+0x58>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ffe:	4b07      	ldr	r3, [pc, #28]	; (800101c <MX_USART1_UART_Init+0x58>)
 8001000:	2200      	movs	r2, #0
 8001002:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001004:	4b05      	ldr	r3, [pc, #20]	; (800101c <MX_USART1_UART_Init+0x58>)
 8001006:	0018      	movs	r0, r3
 8001008:	f003 f9fc 	bl	8004404 <HAL_UART_Init>
 800100c:	1e03      	subs	r3, r0, #0
 800100e:	d001      	beq.n	8001014 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 8001010:	f000 f8f6 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001014:	46c0      	nop			; (mov r8, r8)
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	46c0      	nop			; (mov r8, r8)
 800101c:	20000bbc 	.word	0x20000bbc
 8001020:	40013800 	.word	0x40013800
 8001024:	0003d090 	.word	0x0003d090

08001028 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800102e:	4b10      	ldr	r3, [pc, #64]	; (8001070 <MX_DMA_Init+0x48>)
 8001030:	695a      	ldr	r2, [r3, #20]
 8001032:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <MX_DMA_Init+0x48>)
 8001034:	2101      	movs	r1, #1
 8001036:	430a      	orrs	r2, r1
 8001038:	615a      	str	r2, [r3, #20]
 800103a:	4b0d      	ldr	r3, [pc, #52]	; (8001070 <MX_DMA_Init+0x48>)
 800103c:	695b      	ldr	r3, [r3, #20]
 800103e:	2201      	movs	r2, #1
 8001040:	4013      	ands	r3, r2
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001046:	2200      	movs	r2, #0
 8001048:	2100      	movs	r1, #0
 800104a:	200a      	movs	r0, #10
 800104c:	f001 f806 	bl	800205c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001050:	200a      	movs	r0, #10
 8001052:	f001 f818 	bl	8002086 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8001056:	2200      	movs	r2, #0
 8001058:	2100      	movs	r1, #0
 800105a:	200b      	movs	r0, #11
 800105c:	f000 fffe 	bl	800205c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8001060:	200b      	movs	r0, #11
 8001062:	f001 f810 	bl	8002086 <HAL_NVIC_EnableIRQ>

}
 8001066:	46c0      	nop			; (mov r8, r8)
 8001068:	46bd      	mov	sp, r7
 800106a:	b002      	add	sp, #8
 800106c:	bd80      	pop	{r7, pc}
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	40021000 	.word	0x40021000

08001074 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001074:	b590      	push	{r4, r7, lr}
 8001076:	b089      	sub	sp, #36	; 0x24
 8001078:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107a:	240c      	movs	r4, #12
 800107c:	193b      	adds	r3, r7, r4
 800107e:	0018      	movs	r0, r3
 8001080:	2314      	movs	r3, #20
 8001082:	001a      	movs	r2, r3
 8001084:	2100      	movs	r1, #0
 8001086:	f004 fbd0 	bl	800582a <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800108a:	4b27      	ldr	r3, [pc, #156]	; (8001128 <MX_GPIO_Init+0xb4>)
 800108c:	695a      	ldr	r2, [r3, #20]
 800108e:	4b26      	ldr	r3, [pc, #152]	; (8001128 <MX_GPIO_Init+0xb4>)
 8001090:	2180      	movs	r1, #128	; 0x80
 8001092:	03c9      	lsls	r1, r1, #15
 8001094:	430a      	orrs	r2, r1
 8001096:	615a      	str	r2, [r3, #20]
 8001098:	4b23      	ldr	r3, [pc, #140]	; (8001128 <MX_GPIO_Init+0xb4>)
 800109a:	695a      	ldr	r2, [r3, #20]
 800109c:	2380      	movs	r3, #128	; 0x80
 800109e:	03db      	lsls	r3, r3, #15
 80010a0:	4013      	ands	r3, r2
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a6:	4b20      	ldr	r3, [pc, #128]	; (8001128 <MX_GPIO_Init+0xb4>)
 80010a8:	695a      	ldr	r2, [r3, #20]
 80010aa:	4b1f      	ldr	r3, [pc, #124]	; (8001128 <MX_GPIO_Init+0xb4>)
 80010ac:	2180      	movs	r1, #128	; 0x80
 80010ae:	0289      	lsls	r1, r1, #10
 80010b0:	430a      	orrs	r2, r1
 80010b2:	615a      	str	r2, [r3, #20]
 80010b4:	4b1c      	ldr	r3, [pc, #112]	; (8001128 <MX_GPIO_Init+0xb4>)
 80010b6:	695a      	ldr	r2, [r3, #20]
 80010b8:	2380      	movs	r3, #128	; 0x80
 80010ba:	029b      	lsls	r3, r3, #10
 80010bc:	4013      	ands	r3, r2
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c2:	4b19      	ldr	r3, [pc, #100]	; (8001128 <MX_GPIO_Init+0xb4>)
 80010c4:	695a      	ldr	r2, [r3, #20]
 80010c6:	4b18      	ldr	r3, [pc, #96]	; (8001128 <MX_GPIO_Init+0xb4>)
 80010c8:	2180      	movs	r1, #128	; 0x80
 80010ca:	02c9      	lsls	r1, r1, #11
 80010cc:	430a      	orrs	r2, r1
 80010ce:	615a      	str	r2, [r3, #20]
 80010d0:	4b15      	ldr	r3, [pc, #84]	; (8001128 <MX_GPIO_Init+0xb4>)
 80010d2:	695a      	ldr	r2, [r3, #20]
 80010d4:	2380      	movs	r3, #128	; 0x80
 80010d6:	02db      	lsls	r3, r3, #11
 80010d8:	4013      	ands	r3, r2
 80010da:	603b      	str	r3, [r7, #0]
 80010dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : SW4_Pin SW3_Pin */
  GPIO_InitStruct.Pin = SW4_Pin|SW3_Pin;
 80010de:	193b      	adds	r3, r7, r4
 80010e0:	2290      	movs	r2, #144	; 0x90
 80010e2:	0112      	lsls	r2, r2, #4
 80010e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e6:	193b      	adds	r3, r7, r4
 80010e8:	2200      	movs	r2, #0
 80010ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	193b      	adds	r3, r7, r4
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f2:	193a      	adds	r2, r7, r4
 80010f4:	2390      	movs	r3, #144	; 0x90
 80010f6:	05db      	lsls	r3, r3, #23
 80010f8:	0011      	movs	r1, r2
 80010fa:	0018      	movs	r0, r3
 80010fc:	f001 f9f6 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 8001100:	193b      	adds	r3, r7, r4
 8001102:	2230      	movs	r2, #48	; 0x30
 8001104:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001106:	193b      	adds	r3, r7, r4
 8001108:	2200      	movs	r2, #0
 800110a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	193b      	adds	r3, r7, r4
 800110e:	2200      	movs	r2, #0
 8001110:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001112:	193b      	adds	r3, r7, r4
 8001114:	4a05      	ldr	r2, [pc, #20]	; (800112c <MX_GPIO_Init+0xb8>)
 8001116:	0019      	movs	r1, r3
 8001118:	0010      	movs	r0, r2
 800111a:	f001 f9e7 	bl	80024ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800111e:	46c0      	nop			; (mov r8, r8)
 8001120:	46bd      	mov	sp, r7
 8001122:	b009      	add	sp, #36	; 0x24
 8001124:	bd90      	pop	{r4, r7, pc}
 8001126:	46c0      	nop			; (mov r8, r8)
 8001128:	40021000 	.word	0x40021000
 800112c:	48000400 	.word	0x48000400

08001130 <HAL_UART_RxCpltCallback>:
* Interruption qui va mettre dans des variables la réception UART comme le	  *
* temps										 								  *
******************************************************************************/

void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]

	if(&huart1 == huart)
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	4b1d      	ldr	r3, [pc, #116]	; (80011b0 <HAL_UART_RxCpltCallback+0x80>)
 800113c:	429a      	cmp	r2, r3
 800113e:	d133      	bne.n	80011a8 <HAL_UART_RxCpltCallback+0x78>
	{
		Heures_brt = Rx_data[4];	//Stock le data des heures, "brt" = brute
 8001140:	4b1c      	ldr	r3, [pc, #112]	; (80011b4 <HAL_UART_RxCpltCallback+0x84>)
 8001142:	791a      	ldrb	r2, [r3, #4]
 8001144:	4b1c      	ldr	r3, [pc, #112]	; (80011b8 <HAL_UART_RxCpltCallback+0x88>)
 8001146:	701a      	strb	r2, [r3, #0]
		Minutes_brt = Rx_data[5];	//Stock le data des minutes
 8001148:	4b1a      	ldr	r3, [pc, #104]	; (80011b4 <HAL_UART_RxCpltCallback+0x84>)
 800114a:	795a      	ldrb	r2, [r3, #5]
 800114c:	4b1b      	ldr	r3, [pc, #108]	; (80011bc <HAL_UART_RxCpltCallback+0x8c>)
 800114e:	701a      	strb	r2, [r3, #0]

		Heures_U = Heures_brt & 0x0F;	//Traite le data pour avoir l'Unité des Heures
 8001150:	4b19      	ldr	r3, [pc, #100]	; (80011b8 <HAL_UART_RxCpltCallback+0x88>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	220f      	movs	r2, #15
 8001156:	4013      	ands	r3, r2
 8001158:	b2da      	uxtb	r2, r3
 800115a:	4b19      	ldr	r3, [pc, #100]	; (80011c0 <HAL_UART_RxCpltCallback+0x90>)
 800115c:	701a      	strb	r2, [r3, #0]

		Heures_D = (Heures_brt & 0xF0) >> 4;	//Traite le data pour avoir la Dizaine des Heures
 800115e:	4b16      	ldr	r3, [pc, #88]	; (80011b8 <HAL_UART_RxCpltCallback+0x88>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	091b      	lsrs	r3, r3, #4
 8001164:	b2da      	uxtb	r2, r3
 8001166:	4b17      	ldr	r3, [pc, #92]	; (80011c4 <HAL_UART_RxCpltCallback+0x94>)
 8001168:	701a      	strb	r2, [r3, #0]

		Minutes_U = Minutes_brt & 0x0F;	//Traite le data pour avoir l'Unité des Minutes
 800116a:	4b14      	ldr	r3, [pc, #80]	; (80011bc <HAL_UART_RxCpltCallback+0x8c>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	220f      	movs	r2, #15
 8001170:	4013      	ands	r3, r2
 8001172:	b2da      	uxtb	r2, r3
 8001174:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <HAL_UART_RxCpltCallback+0x98>)
 8001176:	701a      	strb	r2, [r3, #0]

		Minutes_D = (Minutes_brt & 0xF0) >> 4;	//Traite le data pour avoir la Dizaine des Minutes
 8001178:	4b10      	ldr	r3, [pc, #64]	; (80011bc <HAL_UART_RxCpltCallback+0x8c>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	091b      	lsrs	r3, r3, #4
 800117e:	b2da      	uxtb	r2, r3
 8001180:	4b12      	ldr	r3, [pc, #72]	; (80011cc <HAL_UART_RxCpltCallback+0x9c>)
 8001182:	701a      	strb	r2, [r3, #0]

		needMeasure = true;
 8001184:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <HAL_UART_RxCpltCallback+0xa0>)
 8001186:	2201      	movs	r2, #1
 8001188:	701a      	strb	r2, [r3, #0]

		if(HAL_UART_Receive_IT(&huart1, Rx_data, 19) == HAL_ERROR)	//Réception d'UART lors d'une erreur
 800118a:	490a      	ldr	r1, [pc, #40]	; (80011b4 <HAL_UART_RxCpltCallback+0x84>)
 800118c:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <HAL_UART_RxCpltCallback+0x80>)
 800118e:	2213      	movs	r2, #19
 8001190:	0018      	movs	r0, r3
 8001192:	f003 f98b 	bl	80044ac <HAL_UART_Receive_IT>
 8001196:	0003      	movs	r3, r0
 8001198:	2b01      	cmp	r3, #1
 800119a:	d105      	bne.n	80011a8 <HAL_UART_RxCpltCallback+0x78>
		{
			HAL_UART_Receive_IT(&huart1, Rx_data, 19);
 800119c:	4905      	ldr	r1, [pc, #20]	; (80011b4 <HAL_UART_RxCpltCallback+0x84>)
 800119e:	4b04      	ldr	r3, [pc, #16]	; (80011b0 <HAL_UART_RxCpltCallback+0x80>)
 80011a0:	2213      	movs	r2, #19
 80011a2:	0018      	movs	r0, r3
 80011a4:	f003 f982 	bl	80044ac <HAL_UART_Receive_IT>
		}
	}
}
 80011a8:	46c0      	nop			; (mov r8, r8)
 80011aa:	46bd      	mov	sp, r7
 80011ac:	b002      	add	sp, #8
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000bbc 	.word	0x20000bbc
 80011b4:	20000c90 	.word	0x20000c90
 80011b8:	20000c88 	.word	0x20000c88
 80011bc:	20000c8b 	.word	0x20000c8b
 80011c0:	20000c89 	.word	0x20000c89
 80011c4:	20000c8a 	.word	0x20000c8a
 80011c8:	20000c8c 	.word	0x20000c8c
 80011cc:	20000c8d 	.word	0x20000c8d
 80011d0:	20000ca3 	.word	0x20000ca3

080011d4 <HAL_UART_ErrorCallback>:
* Interruption lorsqu'il y a un problème dans la transmission UART qui permet *
* de refaire une réception									 				  *
******************************************************************************/

void HAL_UART_ErrorCallback (UART_HandleTypeDef * huart)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
	if(&huart1 == huart)
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <HAL_UART_ErrorCallback+0x24>)
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d105      	bne.n	80011f0 <HAL_UART_ErrorCallback+0x1c>
	{
		HAL_UART_Receive_IT(&huart1, Rx_data, 19);
 80011e4:	4905      	ldr	r1, [pc, #20]	; (80011fc <HAL_UART_ErrorCallback+0x28>)
 80011e6:	4b04      	ldr	r3, [pc, #16]	; (80011f8 <HAL_UART_ErrorCallback+0x24>)
 80011e8:	2213      	movs	r2, #19
 80011ea:	0018      	movs	r0, r3
 80011ec:	f003 f95e 	bl	80044ac <HAL_UART_Receive_IT>
	}
}
 80011f0:	46c0      	nop			; (mov r8, r8)
 80011f2:	46bd      	mov	sp, r7
 80011f4:	b002      	add	sp, #8
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000bbc 	.word	0x20000bbc
 80011fc:	20000c90 	.word	0x20000c90

08001200 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001204:	b672      	cpsid	i
}
 8001206:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001208:	e7fe      	b.n	8001208 <Error_Handler+0x8>
	...

0800120c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001212:	4b0f      	ldr	r3, [pc, #60]	; (8001250 <HAL_MspInit+0x44>)
 8001214:	699a      	ldr	r2, [r3, #24]
 8001216:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <HAL_MspInit+0x44>)
 8001218:	2101      	movs	r1, #1
 800121a:	430a      	orrs	r2, r1
 800121c:	619a      	str	r2, [r3, #24]
 800121e:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <HAL_MspInit+0x44>)
 8001220:	699b      	ldr	r3, [r3, #24]
 8001222:	2201      	movs	r2, #1
 8001224:	4013      	ands	r3, r2
 8001226:	607b      	str	r3, [r7, #4]
 8001228:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800122a:	4b09      	ldr	r3, [pc, #36]	; (8001250 <HAL_MspInit+0x44>)
 800122c:	69da      	ldr	r2, [r3, #28]
 800122e:	4b08      	ldr	r3, [pc, #32]	; (8001250 <HAL_MspInit+0x44>)
 8001230:	2180      	movs	r1, #128	; 0x80
 8001232:	0549      	lsls	r1, r1, #21
 8001234:	430a      	orrs	r2, r1
 8001236:	61da      	str	r2, [r3, #28]
 8001238:	4b05      	ldr	r3, [pc, #20]	; (8001250 <HAL_MspInit+0x44>)
 800123a:	69da      	ldr	r2, [r3, #28]
 800123c:	2380      	movs	r3, #128	; 0x80
 800123e:	055b      	lsls	r3, r3, #21
 8001240:	4013      	ands	r3, r2
 8001242:	603b      	str	r3, [r7, #0]
 8001244:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001246:	46c0      	nop			; (mov r8, r8)
 8001248:	46bd      	mov	sp, r7
 800124a:	b002      	add	sp, #8
 800124c:	bd80      	pop	{r7, pc}
 800124e:	46c0      	nop			; (mov r8, r8)
 8001250:	40021000 	.word	0x40021000

08001254 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001254:	b590      	push	{r4, r7, lr}
 8001256:	b08b      	sub	sp, #44	; 0x2c
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125c:	2414      	movs	r4, #20
 800125e:	193b      	adds	r3, r7, r4
 8001260:	0018      	movs	r0, r3
 8001262:	2314      	movs	r3, #20
 8001264:	001a      	movs	r2, r3
 8001266:	2100      	movs	r1, #0
 8001268:	f004 fadf 	bl	800582a <memset>
  if(hadc->Instance==ADC1)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a19      	ldr	r2, [pc, #100]	; (80012d8 <HAL_ADC_MspInit+0x84>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d12b      	bne.n	80012ce <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001276:	4b19      	ldr	r3, [pc, #100]	; (80012dc <HAL_ADC_MspInit+0x88>)
 8001278:	699a      	ldr	r2, [r3, #24]
 800127a:	4b18      	ldr	r3, [pc, #96]	; (80012dc <HAL_ADC_MspInit+0x88>)
 800127c:	2180      	movs	r1, #128	; 0x80
 800127e:	0089      	lsls	r1, r1, #2
 8001280:	430a      	orrs	r2, r1
 8001282:	619a      	str	r2, [r3, #24]
 8001284:	4b15      	ldr	r3, [pc, #84]	; (80012dc <HAL_ADC_MspInit+0x88>)
 8001286:	699a      	ldr	r2, [r3, #24]
 8001288:	2380      	movs	r3, #128	; 0x80
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	4013      	ands	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
 8001290:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001292:	4b12      	ldr	r3, [pc, #72]	; (80012dc <HAL_ADC_MspInit+0x88>)
 8001294:	695a      	ldr	r2, [r3, #20]
 8001296:	4b11      	ldr	r3, [pc, #68]	; (80012dc <HAL_ADC_MspInit+0x88>)
 8001298:	2180      	movs	r1, #128	; 0x80
 800129a:	0289      	lsls	r1, r1, #10
 800129c:	430a      	orrs	r2, r1
 800129e:	615a      	str	r2, [r3, #20]
 80012a0:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <HAL_ADC_MspInit+0x88>)
 80012a2:	695a      	ldr	r2, [r3, #20]
 80012a4:	2380      	movs	r3, #128	; 0x80
 80012a6:	029b      	lsls	r3, r3, #10
 80012a8:	4013      	ands	r3, r2
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA7     ------> ADC_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80012ae:	193b      	adds	r3, r7, r4
 80012b0:	2280      	movs	r2, #128	; 0x80
 80012b2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012b4:	193b      	adds	r3, r7, r4
 80012b6:	2203      	movs	r2, #3
 80012b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	193b      	adds	r3, r7, r4
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c0:	193a      	adds	r2, r7, r4
 80012c2:	2390      	movs	r3, #144	; 0x90
 80012c4:	05db      	lsls	r3, r3, #23
 80012c6:	0011      	movs	r1, r2
 80012c8:	0018      	movs	r0, r3
 80012ca:	f001 f90f 	bl	80024ec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012ce:	46c0      	nop			; (mov r8, r8)
 80012d0:	46bd      	mov	sp, r7
 80012d2:	b00b      	add	sp, #44	; 0x2c
 80012d4:	bd90      	pop	{r4, r7, pc}
 80012d6:	46c0      	nop			; (mov r8, r8)
 80012d8:	40012400 	.word	0x40012400
 80012dc:	40021000 	.word	0x40021000

080012e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	2380      	movs	r3, #128	; 0x80
 80012ee:	05db      	lsls	r3, r3, #23
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d133      	bne.n	800135c <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012f4:	4b1b      	ldr	r3, [pc, #108]	; (8001364 <HAL_TIM_Base_MspInit+0x84>)
 80012f6:	69da      	ldr	r2, [r3, #28]
 80012f8:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <HAL_TIM_Base_MspInit+0x84>)
 80012fa:	2101      	movs	r1, #1
 80012fc:	430a      	orrs	r2, r1
 80012fe:	61da      	str	r2, [r3, #28]
 8001300:	4b18      	ldr	r3, [pc, #96]	; (8001364 <HAL_TIM_Base_MspInit+0x84>)
 8001302:	69db      	ldr	r3, [r3, #28]
 8001304:	2201      	movs	r2, #1
 8001306:	4013      	ands	r3, r2
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 800130c:	4b16      	ldr	r3, [pc, #88]	; (8001368 <HAL_TIM_Base_MspInit+0x88>)
 800130e:	4a17      	ldr	r2, [pc, #92]	; (800136c <HAL_TIM_Base_MspInit+0x8c>)
 8001310:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001312:	4b15      	ldr	r3, [pc, #84]	; (8001368 <HAL_TIM_Base_MspInit+0x88>)
 8001314:	2210      	movs	r2, #16
 8001316:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001318:	4b13      	ldr	r3, [pc, #76]	; (8001368 <HAL_TIM_Base_MspInit+0x88>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800131e:	4b12      	ldr	r3, [pc, #72]	; (8001368 <HAL_TIM_Base_MspInit+0x88>)
 8001320:	2280      	movs	r2, #128	; 0x80
 8001322:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001324:	4b10      	ldr	r3, [pc, #64]	; (8001368 <HAL_TIM_Base_MspInit+0x88>)
 8001326:	2280      	movs	r2, #128	; 0x80
 8001328:	0092      	lsls	r2, r2, #2
 800132a:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800132c:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <HAL_TIM_Base_MspInit+0x88>)
 800132e:	2200      	movs	r2, #0
 8001330:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8001332:	4b0d      	ldr	r3, [pc, #52]	; (8001368 <HAL_TIM_Base_MspInit+0x88>)
 8001334:	2220      	movs	r2, #32
 8001336:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001338:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <HAL_TIM_Base_MspInit+0x88>)
 800133a:	2280      	movs	r2, #128	; 0x80
 800133c:	0192      	lsls	r2, r2, #6
 800133e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001340:	4b09      	ldr	r3, [pc, #36]	; (8001368 <HAL_TIM_Base_MspInit+0x88>)
 8001342:	0018      	movs	r0, r3
 8001344:	f000 febc 	bl	80020c0 <HAL_DMA_Init>
 8001348:	1e03      	subs	r3, r0, #0
 800134a:	d001      	beq.n	8001350 <HAL_TIM_Base_MspInit+0x70>
    {
      Error_Handler();
 800134c:	f7ff ff58 	bl	8001200 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a05      	ldr	r2, [pc, #20]	; (8001368 <HAL_TIM_Base_MspInit+0x88>)
 8001354:	625a      	str	r2, [r3, #36]	; 0x24
 8001356:	4b04      	ldr	r3, [pc, #16]	; (8001368 <HAL_TIM_Base_MspInit+0x88>)
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800135c:	46c0      	nop			; (mov r8, r8)
 800135e:	46bd      	mov	sp, r7
 8001360:	b004      	add	sp, #16
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40021000 	.word	0x40021000
 8001368:	20000b78 	.word	0x20000b78
 800136c:	40020058 	.word	0x40020058

08001370 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001370:	b590      	push	{r4, r7, lr}
 8001372:	b089      	sub	sp, #36	; 0x24
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001378:	240c      	movs	r4, #12
 800137a:	193b      	adds	r3, r7, r4
 800137c:	0018      	movs	r0, r3
 800137e:	2314      	movs	r3, #20
 8001380:	001a      	movs	r2, r3
 8001382:	2100      	movs	r1, #0
 8001384:	f004 fa51 	bl	800582a <memset>
  if(htim->Instance==TIM2)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	2380      	movs	r3, #128	; 0x80
 800138e:	05db      	lsls	r3, r3, #23
 8001390:	429a      	cmp	r2, r3
 8001392:	d124      	bne.n	80013de <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001394:	4b14      	ldr	r3, [pc, #80]	; (80013e8 <HAL_TIM_MspPostInit+0x78>)
 8001396:	695a      	ldr	r2, [r3, #20]
 8001398:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <HAL_TIM_MspPostInit+0x78>)
 800139a:	2180      	movs	r1, #128	; 0x80
 800139c:	0289      	lsls	r1, r1, #10
 800139e:	430a      	orrs	r2, r1
 80013a0:	615a      	str	r2, [r3, #20]
 80013a2:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <HAL_TIM_MspPostInit+0x78>)
 80013a4:	695a      	ldr	r2, [r3, #20]
 80013a6:	2380      	movs	r3, #128	; 0x80
 80013a8:	029b      	lsls	r3, r3, #10
 80013aa:	4013      	ands	r3, r2
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013b0:	0021      	movs	r1, r4
 80013b2:	187b      	adds	r3, r7, r1
 80013b4:	2201      	movs	r2, #1
 80013b6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b8:	187b      	adds	r3, r7, r1
 80013ba:	2202      	movs	r2, #2
 80013bc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	187b      	adds	r3, r7, r1
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c4:	187b      	adds	r3, r7, r1
 80013c6:	2200      	movs	r2, #0
 80013c8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80013ca:	187b      	adds	r3, r7, r1
 80013cc:	2202      	movs	r2, #2
 80013ce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d0:	187a      	adds	r2, r7, r1
 80013d2:	2390      	movs	r3, #144	; 0x90
 80013d4:	05db      	lsls	r3, r3, #23
 80013d6:	0011      	movs	r1, r2
 80013d8:	0018      	movs	r0, r3
 80013da:	f001 f887 	bl	80024ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80013de:	46c0      	nop			; (mov r8, r8)
 80013e0:	46bd      	mov	sp, r7
 80013e2:	b009      	add	sp, #36	; 0x24
 80013e4:	bd90      	pop	{r4, r7, pc}
 80013e6:	46c0      	nop			; (mov r8, r8)
 80013e8:	40021000 	.word	0x40021000

080013ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013ec:	b590      	push	{r4, r7, lr}
 80013ee:	b08b      	sub	sp, #44	; 0x2c
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	2414      	movs	r4, #20
 80013f6:	193b      	adds	r3, r7, r4
 80013f8:	0018      	movs	r0, r3
 80013fa:	2314      	movs	r3, #20
 80013fc:	001a      	movs	r2, r3
 80013fe:	2100      	movs	r1, #0
 8001400:	f004 fa13 	bl	800582a <memset>
  if(huart->Instance==USART1)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a34      	ldr	r2, [pc, #208]	; (80014dc <HAL_UART_MspInit+0xf0>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d162      	bne.n	80014d4 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800140e:	4b34      	ldr	r3, [pc, #208]	; (80014e0 <HAL_UART_MspInit+0xf4>)
 8001410:	699a      	ldr	r2, [r3, #24]
 8001412:	4b33      	ldr	r3, [pc, #204]	; (80014e0 <HAL_UART_MspInit+0xf4>)
 8001414:	2180      	movs	r1, #128	; 0x80
 8001416:	01c9      	lsls	r1, r1, #7
 8001418:	430a      	orrs	r2, r1
 800141a:	619a      	str	r2, [r3, #24]
 800141c:	4b30      	ldr	r3, [pc, #192]	; (80014e0 <HAL_UART_MspInit+0xf4>)
 800141e:	699a      	ldr	r2, [r3, #24]
 8001420:	2380      	movs	r3, #128	; 0x80
 8001422:	01db      	lsls	r3, r3, #7
 8001424:	4013      	ands	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
 8001428:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142a:	4b2d      	ldr	r3, [pc, #180]	; (80014e0 <HAL_UART_MspInit+0xf4>)
 800142c:	695a      	ldr	r2, [r3, #20]
 800142e:	4b2c      	ldr	r3, [pc, #176]	; (80014e0 <HAL_UART_MspInit+0xf4>)
 8001430:	2180      	movs	r1, #128	; 0x80
 8001432:	0289      	lsls	r1, r1, #10
 8001434:	430a      	orrs	r2, r1
 8001436:	615a      	str	r2, [r3, #20]
 8001438:	4b29      	ldr	r3, [pc, #164]	; (80014e0 <HAL_UART_MspInit+0xf4>)
 800143a:	695a      	ldr	r2, [r3, #20]
 800143c:	2380      	movs	r3, #128	; 0x80
 800143e:	029b      	lsls	r3, r3, #10
 8001440:	4013      	ands	r3, r2
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001446:	193b      	adds	r3, r7, r4
 8001448:	22c0      	movs	r2, #192	; 0xc0
 800144a:	00d2      	lsls	r2, r2, #3
 800144c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144e:	0021      	movs	r1, r4
 8001450:	187b      	adds	r3, r7, r1
 8001452:	2202      	movs	r2, #2
 8001454:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	187b      	adds	r3, r7, r1
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800145c:	187b      	adds	r3, r7, r1
 800145e:	2203      	movs	r2, #3
 8001460:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001462:	187b      	adds	r3, r7, r1
 8001464:	2201      	movs	r2, #1
 8001466:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001468:	187a      	adds	r2, r7, r1
 800146a:	2390      	movs	r3, #144	; 0x90
 800146c:	05db      	lsls	r3, r3, #23
 800146e:	0011      	movs	r1, r2
 8001470:	0018      	movs	r0, r3
 8001472:	f001 f83b 	bl	80024ec <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8001476:	4b1b      	ldr	r3, [pc, #108]	; (80014e4 <HAL_UART_MspInit+0xf8>)
 8001478:	4a1b      	ldr	r2, [pc, #108]	; (80014e8 <HAL_UART_MspInit+0xfc>)
 800147a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800147c:	4b19      	ldr	r3, [pc, #100]	; (80014e4 <HAL_UART_MspInit+0xf8>)
 800147e:	2210      	movs	r2, #16
 8001480:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001482:	4b18      	ldr	r3, [pc, #96]	; (80014e4 <HAL_UART_MspInit+0xf8>)
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001488:	4b16      	ldr	r3, [pc, #88]	; (80014e4 <HAL_UART_MspInit+0xf8>)
 800148a:	2280      	movs	r2, #128	; 0x80
 800148c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800148e:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <HAL_UART_MspInit+0xf8>)
 8001490:	2200      	movs	r2, #0
 8001492:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001494:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <HAL_UART_MspInit+0xf8>)
 8001496:	2200      	movs	r2, #0
 8001498:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800149a:	4b12      	ldr	r3, [pc, #72]	; (80014e4 <HAL_UART_MspInit+0xf8>)
 800149c:	2200      	movs	r2, #0
 800149e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80014a0:	4b10      	ldr	r3, [pc, #64]	; (80014e4 <HAL_UART_MspInit+0xf8>)
 80014a2:	22c0      	movs	r2, #192	; 0xc0
 80014a4:	0192      	lsls	r2, r2, #6
 80014a6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80014a8:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <HAL_UART_MspInit+0xf8>)
 80014aa:	0018      	movs	r0, r3
 80014ac:	f000 fe08 	bl	80020c0 <HAL_DMA_Init>
 80014b0:	1e03      	subs	r3, r0, #0
 80014b2:	d001      	beq.n	80014b8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80014b4:	f7ff fea4 	bl	8001200 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4a0a      	ldr	r2, [pc, #40]	; (80014e4 <HAL_UART_MspInit+0xf8>)
 80014bc:	671a      	str	r2, [r3, #112]	; 0x70
 80014be:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <HAL_UART_MspInit+0xf8>)
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80014c4:	2200      	movs	r2, #0
 80014c6:	2100      	movs	r1, #0
 80014c8:	201b      	movs	r0, #27
 80014ca:	f000 fdc7 	bl	800205c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80014ce:	201b      	movs	r0, #27
 80014d0:	f000 fdd9 	bl	8002086 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80014d4:	46c0      	nop			; (mov r8, r8)
 80014d6:	46bd      	mov	sp, r7
 80014d8:	b00b      	add	sp, #44	; 0x2c
 80014da:	bd90      	pop	{r4, r7, pc}
 80014dc:	40013800 	.word	0x40013800
 80014e0:	40021000 	.word	0x40021000
 80014e4:	20000c44 	.word	0x20000c44
 80014e8:	4002001c 	.word	0x4002001c

080014ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014f0:	e7fe      	b.n	80014f0 <NMI_Handler+0x4>

080014f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014f6:	e7fe      	b.n	80014f6 <HardFault_Handler+0x4>

080014f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80014fc:	46c0      	nop			; (mov r8, r8)
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001506:	46c0      	nop			; (mov r8, r8)
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001510:	f000 f8ee 	bl	80016f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001514:	46c0      	nop			; (mov r8, r8)
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
	...

0800151c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001520:	4b03      	ldr	r3, [pc, #12]	; (8001530 <DMA1_Channel2_3_IRQHandler+0x14>)
 8001522:	0018      	movs	r0, r3
 8001524:	f000 fef7 	bl	8002316 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001528:	46c0      	nop			; (mov r8, r8)
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	46c0      	nop			; (mov r8, r8)
 8001530:	20000c44 	.word	0x20000c44

08001534 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001538:	4b03      	ldr	r3, [pc, #12]	; (8001548 <DMA1_Channel4_5_IRQHandler+0x14>)
 800153a:	0018      	movs	r0, r3
 800153c:	f000 feeb 	bl	8002316 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8001540:	46c0      	nop			; (mov r8, r8)
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	46c0      	nop			; (mov r8, r8)
 8001548:	20000b78 	.word	0x20000b78

0800154c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001550:	4b03      	ldr	r3, [pc, #12]	; (8001560 <USART1_IRQHandler+0x14>)
 8001552:	0018      	movs	r0, r3
 8001554:	f003 f802 	bl	800455c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001558:	46c0      	nop			; (mov r8, r8)
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	46c0      	nop			; (mov r8, r8)
 8001560:	20000bbc 	.word	0x20000bbc

08001564 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800156c:	4a14      	ldr	r2, [pc, #80]	; (80015c0 <_sbrk+0x5c>)
 800156e:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <_sbrk+0x60>)
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001578:	4b13      	ldr	r3, [pc, #76]	; (80015c8 <_sbrk+0x64>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d102      	bne.n	8001586 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001580:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <_sbrk+0x64>)
 8001582:	4a12      	ldr	r2, [pc, #72]	; (80015cc <_sbrk+0x68>)
 8001584:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001586:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <_sbrk+0x64>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	18d3      	adds	r3, r2, r3
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	429a      	cmp	r2, r3
 8001592:	d207      	bcs.n	80015a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001594:	f004 f90c 	bl	80057b0 <__errno>
 8001598:	0003      	movs	r3, r0
 800159a:	220c      	movs	r2, #12
 800159c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800159e:	2301      	movs	r3, #1
 80015a0:	425b      	negs	r3, r3
 80015a2:	e009      	b.n	80015b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015a4:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <_sbrk+0x64>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015aa:	4b07      	ldr	r3, [pc, #28]	; (80015c8 <_sbrk+0x64>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	18d2      	adds	r2, r2, r3
 80015b2:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <_sbrk+0x64>)
 80015b4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80015b6:	68fb      	ldr	r3, [r7, #12]
}
 80015b8:	0018      	movs	r0, r3
 80015ba:	46bd      	mov	sp, r7
 80015bc:	b006      	add	sp, #24
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20001800 	.word	0x20001800
 80015c4:	00000400 	.word	0x00000400
 80015c8:	20000ca4 	.word	0x20000ca4
 80015cc:	20000cc0 	.word	0x20000cc0

080015d0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80015d4:	46c0      	nop			; (mov r8, r8)
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
	...

080015dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015dc:	4813      	ldr	r0, [pc, #76]	; (800162c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015de:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80015e0:	f7ff fff6 	bl	80015d0 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80015e4:	4812      	ldr	r0, [pc, #72]	; (8001630 <LoopForever+0x6>)
    LDR R1, [R0]
 80015e6:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80015e8:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80015ea:	4a12      	ldr	r2, [pc, #72]	; (8001634 <LoopForever+0xa>)
    CMP R1, R2
 80015ec:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80015ee:	d105      	bne.n	80015fc <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80015f0:	4811      	ldr	r0, [pc, #68]	; (8001638 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80015f2:	4912      	ldr	r1, [pc, #72]	; (800163c <LoopForever+0x12>)
    STR R1, [R0]
 80015f4:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80015f6:	4812      	ldr	r0, [pc, #72]	; (8001640 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80015f8:	4912      	ldr	r1, [pc, #72]	; (8001644 <LoopForever+0x1a>)
    STR R1, [R0]
 80015fa:	6001      	str	r1, [r0, #0]

080015fc <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015fc:	4812      	ldr	r0, [pc, #72]	; (8001648 <LoopForever+0x1e>)
  ldr r1, =_edata
 80015fe:	4913      	ldr	r1, [pc, #76]	; (800164c <LoopForever+0x22>)
  ldr r2, =_sidata
 8001600:	4a13      	ldr	r2, [pc, #76]	; (8001650 <LoopForever+0x26>)
  movs r3, #0
 8001602:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001604:	e002      	b.n	800160c <LoopCopyDataInit>

08001606 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001606:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001608:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800160a:	3304      	adds	r3, #4

0800160c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800160c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800160e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001610:	d3f9      	bcc.n	8001606 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001612:	4a10      	ldr	r2, [pc, #64]	; (8001654 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001614:	4c10      	ldr	r4, [pc, #64]	; (8001658 <LoopForever+0x2e>)
  movs r3, #0
 8001616:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001618:	e001      	b.n	800161e <LoopFillZerobss>

0800161a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800161a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800161c:	3204      	adds	r2, #4

0800161e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800161e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001620:	d3fb      	bcc.n	800161a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001622:	f004 f8cb 	bl	80057bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001626:	f7ff fa6d 	bl	8000b04 <main>

0800162a <LoopForever>:

LoopForever:
    b LoopForever
 800162a:	e7fe      	b.n	800162a <LoopForever>
  ldr   r0, =_estack
 800162c:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8001630:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001634:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8001638:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 800163c:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001640:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001644:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001648:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800164c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001650:	08005a20 	.word	0x08005a20
  ldr r2, =_sbss
 8001654:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001658:	20000cbc 	.word	0x20000cbc

0800165c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800165c:	e7fe      	b.n	800165c <ADC1_IRQHandler>
	...

08001660 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001664:	4b07      	ldr	r3, [pc, #28]	; (8001684 <HAL_Init+0x24>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4b06      	ldr	r3, [pc, #24]	; (8001684 <HAL_Init+0x24>)
 800166a:	2110      	movs	r1, #16
 800166c:	430a      	orrs	r2, r1
 800166e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001670:	2000      	movs	r0, #0
 8001672:	f000 f809 	bl	8001688 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001676:	f7ff fdc9 	bl	800120c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800167a:	2300      	movs	r3, #0
}
 800167c:	0018      	movs	r0, r3
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	46c0      	nop			; (mov r8, r8)
 8001684:	40022000 	.word	0x40022000

08001688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001688:	b590      	push	{r4, r7, lr}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001690:	4b14      	ldr	r3, [pc, #80]	; (80016e4 <HAL_InitTick+0x5c>)
 8001692:	681c      	ldr	r4, [r3, #0]
 8001694:	4b14      	ldr	r3, [pc, #80]	; (80016e8 <HAL_InitTick+0x60>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	0019      	movs	r1, r3
 800169a:	23fa      	movs	r3, #250	; 0xfa
 800169c:	0098      	lsls	r0, r3, #2
 800169e:	f7fe fd33 	bl	8000108 <__udivsi3>
 80016a2:	0003      	movs	r3, r0
 80016a4:	0019      	movs	r1, r3
 80016a6:	0020      	movs	r0, r4
 80016a8:	f7fe fd2e 	bl	8000108 <__udivsi3>
 80016ac:	0003      	movs	r3, r0
 80016ae:	0018      	movs	r0, r3
 80016b0:	f000 fcf9 	bl	80020a6 <HAL_SYSTICK_Config>
 80016b4:	1e03      	subs	r3, r0, #0
 80016b6:	d001      	beq.n	80016bc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e00f      	b.n	80016dc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2b03      	cmp	r3, #3
 80016c0:	d80b      	bhi.n	80016da <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016c2:	6879      	ldr	r1, [r7, #4]
 80016c4:	2301      	movs	r3, #1
 80016c6:	425b      	negs	r3, r3
 80016c8:	2200      	movs	r2, #0
 80016ca:	0018      	movs	r0, r3
 80016cc:	f000 fcc6 	bl	800205c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016d0:	4b06      	ldr	r3, [pc, #24]	; (80016ec <HAL_InitTick+0x64>)
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80016d6:	2300      	movs	r3, #0
 80016d8:	e000      	b.n	80016dc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
}
 80016dc:	0018      	movs	r0, r3
 80016de:	46bd      	mov	sp, r7
 80016e0:	b003      	add	sp, #12
 80016e2:	bd90      	pop	{r4, r7, pc}
 80016e4:	20000000 	.word	0x20000000
 80016e8:	20000008 	.word	0x20000008
 80016ec:	20000004 	.word	0x20000004

080016f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016f4:	4b05      	ldr	r3, [pc, #20]	; (800170c <HAL_IncTick+0x1c>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	001a      	movs	r2, r3
 80016fa:	4b05      	ldr	r3, [pc, #20]	; (8001710 <HAL_IncTick+0x20>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	18d2      	adds	r2, r2, r3
 8001700:	4b03      	ldr	r3, [pc, #12]	; (8001710 <HAL_IncTick+0x20>)
 8001702:	601a      	str	r2, [r3, #0]
}
 8001704:	46c0      	nop			; (mov r8, r8)
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	46c0      	nop			; (mov r8, r8)
 800170c:	20000008 	.word	0x20000008
 8001710:	20000ca8 	.word	0x20000ca8

08001714 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  return uwTick;
 8001718:	4b02      	ldr	r3, [pc, #8]	; (8001724 <HAL_GetTick+0x10>)
 800171a:	681b      	ldr	r3, [r3, #0]
}
 800171c:	0018      	movs	r0, r3
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	46c0      	nop			; (mov r8, r8)
 8001724:	20000ca8 	.word	0x20000ca8

08001728 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001730:	f7ff fff0 	bl	8001714 <HAL_GetTick>
 8001734:	0003      	movs	r3, r0
 8001736:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	3301      	adds	r3, #1
 8001740:	d005      	beq.n	800174e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001742:	4b0a      	ldr	r3, [pc, #40]	; (800176c <HAL_Delay+0x44>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	001a      	movs	r2, r3
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	189b      	adds	r3, r3, r2
 800174c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800174e:	46c0      	nop			; (mov r8, r8)
 8001750:	f7ff ffe0 	bl	8001714 <HAL_GetTick>
 8001754:	0002      	movs	r2, r0
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	68fa      	ldr	r2, [r7, #12]
 800175c:	429a      	cmp	r2, r3
 800175e:	d8f7      	bhi.n	8001750 <HAL_Delay+0x28>
  {
  }
}
 8001760:	46c0      	nop			; (mov r8, r8)
 8001762:	46c0      	nop			; (mov r8, r8)
 8001764:	46bd      	mov	sp, r7
 8001766:	b004      	add	sp, #16
 8001768:	bd80      	pop	{r7, pc}
 800176a:	46c0      	nop			; (mov r8, r8)
 800176c:	20000008 	.word	0x20000008

08001770 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001778:	230f      	movs	r3, #15
 800177a:	18fb      	adds	r3, r7, r3
 800177c:	2200      	movs	r2, #0
 800177e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001780:	2300      	movs	r3, #0
 8001782:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d101      	bne.n	800178e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e125      	b.n	80019da <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001792:	2b00      	cmp	r3, #0
 8001794:	d10a      	bne.n	80017ac <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2200      	movs	r2, #0
 800179a:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2234      	movs	r2, #52	; 0x34
 80017a0:	2100      	movs	r1, #0
 80017a2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	0018      	movs	r0, r3
 80017a8:	f7ff fd54 	bl	8001254 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017b0:	2210      	movs	r2, #16
 80017b2:	4013      	ands	r3, r2
 80017b4:	d000      	beq.n	80017b8 <HAL_ADC_Init+0x48>
 80017b6:	e103      	b.n	80019c0 <HAL_ADC_Init+0x250>
 80017b8:	230f      	movs	r3, #15
 80017ba:	18fb      	adds	r3, r7, r3
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d000      	beq.n	80017c4 <HAL_ADC_Init+0x54>
 80017c2:	e0fd      	b.n	80019c0 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	2204      	movs	r2, #4
 80017cc:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80017ce:	d000      	beq.n	80017d2 <HAL_ADC_Init+0x62>
 80017d0:	e0f6      	b.n	80019c0 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017d6:	4a83      	ldr	r2, [pc, #524]	; (80019e4 <HAL_ADC_Init+0x274>)
 80017d8:	4013      	ands	r3, r2
 80017da:	2202      	movs	r2, #2
 80017dc:	431a      	orrs	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	2203      	movs	r2, #3
 80017ea:	4013      	ands	r3, r2
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d112      	bne.n	8001816 <HAL_ADC_Init+0xa6>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2201      	movs	r2, #1
 80017f8:	4013      	ands	r3, r2
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d009      	beq.n	8001812 <HAL_ADC_Init+0xa2>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	68da      	ldr	r2, [r3, #12]
 8001804:	2380      	movs	r3, #128	; 0x80
 8001806:	021b      	lsls	r3, r3, #8
 8001808:	401a      	ands	r2, r3
 800180a:	2380      	movs	r3, #128	; 0x80
 800180c:	021b      	lsls	r3, r3, #8
 800180e:	429a      	cmp	r2, r3
 8001810:	d101      	bne.n	8001816 <HAL_ADC_Init+0xa6>
 8001812:	2301      	movs	r3, #1
 8001814:	e000      	b.n	8001818 <HAL_ADC_Init+0xa8>
 8001816:	2300      	movs	r3, #0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d116      	bne.n	800184a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	2218      	movs	r2, #24
 8001824:	4393      	bics	r3, r2
 8001826:	0019      	movs	r1, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	430a      	orrs	r2, r1
 8001832:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	0899      	lsrs	r1, r3, #2
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685a      	ldr	r2, [r3, #4]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	430a      	orrs	r2, r1
 8001848:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	68da      	ldr	r2, [r3, #12]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4964      	ldr	r1, [pc, #400]	; (80019e8 <HAL_ADC_Init+0x278>)
 8001856:	400a      	ands	r2, r1
 8001858:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	7e1b      	ldrb	r3, [r3, #24]
 800185e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	7e5b      	ldrb	r3, [r3, #25]
 8001864:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001866:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	7e9b      	ldrb	r3, [r3, #26]
 800186c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800186e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001874:	2b01      	cmp	r3, #1
 8001876:	d002      	beq.n	800187e <HAL_ADC_Init+0x10e>
 8001878:	2380      	movs	r3, #128	; 0x80
 800187a:	015b      	lsls	r3, r3, #5
 800187c:	e000      	b.n	8001880 <HAL_ADC_Init+0x110>
 800187e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001880:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001886:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	691b      	ldr	r3, [r3, #16]
 800188c:	2b02      	cmp	r3, #2
 800188e:	d101      	bne.n	8001894 <HAL_ADC_Init+0x124>
 8001890:	2304      	movs	r3, #4
 8001892:	e000      	b.n	8001896 <HAL_ADC_Init+0x126>
 8001894:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001896:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2124      	movs	r1, #36	; 0x24
 800189c:	5c5b      	ldrb	r3, [r3, r1]
 800189e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80018a0:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80018a2:	68ba      	ldr	r2, [r7, #8]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	7edb      	ldrb	r3, [r3, #27]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d115      	bne.n	80018dc <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	7e9b      	ldrb	r3, [r3, #26]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d105      	bne.n	80018c4 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	2280      	movs	r2, #128	; 0x80
 80018bc:	0252      	lsls	r2, r2, #9
 80018be:	4313      	orrs	r3, r2
 80018c0:	60bb      	str	r3, [r7, #8]
 80018c2:	e00b      	b.n	80018dc <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018c8:	2220      	movs	r2, #32
 80018ca:	431a      	orrs	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018d4:	2201      	movs	r2, #1
 80018d6:	431a      	orrs	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	69da      	ldr	r2, [r3, #28]
 80018e0:	23c2      	movs	r3, #194	; 0xc2
 80018e2:	33ff      	adds	r3, #255	; 0xff
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d007      	beq.n	80018f8 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80018f0:	4313      	orrs	r3, r2
 80018f2:	68ba      	ldr	r2, [r7, #8]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	68d9      	ldr	r1, [r3, #12]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	68ba      	ldr	r2, [r7, #8]
 8001904:	430a      	orrs	r2, r1
 8001906:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800190c:	2380      	movs	r3, #128	; 0x80
 800190e:	055b      	lsls	r3, r3, #21
 8001910:	429a      	cmp	r2, r3
 8001912:	d01b      	beq.n	800194c <HAL_ADC_Init+0x1dc>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001918:	2b01      	cmp	r3, #1
 800191a:	d017      	beq.n	800194c <HAL_ADC_Init+0x1dc>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001920:	2b02      	cmp	r3, #2
 8001922:	d013      	beq.n	800194c <HAL_ADC_Init+0x1dc>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001928:	2b03      	cmp	r3, #3
 800192a:	d00f      	beq.n	800194c <HAL_ADC_Init+0x1dc>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001930:	2b04      	cmp	r3, #4
 8001932:	d00b      	beq.n	800194c <HAL_ADC_Init+0x1dc>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001938:	2b05      	cmp	r3, #5
 800193a:	d007      	beq.n	800194c <HAL_ADC_Init+0x1dc>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001940:	2b06      	cmp	r3, #6
 8001942:	d003      	beq.n	800194c <HAL_ADC_Init+0x1dc>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001948:	2b07      	cmp	r3, #7
 800194a:	d112      	bne.n	8001972 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	695a      	ldr	r2, [r3, #20]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2107      	movs	r1, #7
 8001958:	438a      	bics	r2, r1
 800195a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6959      	ldr	r1, [r3, #20]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001966:	2207      	movs	r2, #7
 8001968:	401a      	ands	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	430a      	orrs	r2, r1
 8001970:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	4a1c      	ldr	r2, [pc, #112]	; (80019ec <HAL_ADC_Init+0x27c>)
 800197a:	4013      	ands	r3, r2
 800197c:	68ba      	ldr	r2, [r7, #8]
 800197e:	429a      	cmp	r2, r3
 8001980:	d10b      	bne.n	800199a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800198c:	2203      	movs	r2, #3
 800198e:	4393      	bics	r3, r2
 8001990:	2201      	movs	r2, #1
 8001992:	431a      	orrs	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001998:	e01c      	b.n	80019d4 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800199e:	2212      	movs	r2, #18
 80019a0:	4393      	bics	r3, r2
 80019a2:	2210      	movs	r2, #16
 80019a4:	431a      	orrs	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ae:	2201      	movs	r2, #1
 80019b0:	431a      	orrs	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80019b6:	230f      	movs	r3, #15
 80019b8:	18fb      	adds	r3, r7, r3
 80019ba:	2201      	movs	r2, #1
 80019bc:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80019be:	e009      	b.n	80019d4 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019c4:	2210      	movs	r2, #16
 80019c6:	431a      	orrs	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80019cc:	230f      	movs	r3, #15
 80019ce:	18fb      	adds	r3, r7, r3
 80019d0:	2201      	movs	r2, #1
 80019d2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80019d4:	230f      	movs	r3, #15
 80019d6:	18fb      	adds	r3, r7, r3
 80019d8:	781b      	ldrb	r3, [r3, #0]
}
 80019da:	0018      	movs	r0, r3
 80019dc:	46bd      	mov	sp, r7
 80019de:	b004      	add	sp, #16
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	46c0      	nop			; (mov r8, r8)
 80019e4:	fffffefd 	.word	0xfffffefd
 80019e8:	fffe0219 	.word	0xfffe0219
 80019ec:	833fffe7 	.word	0x833fffe7

080019f0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80019f0:	b590      	push	{r4, r7, lr}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019f8:	230f      	movs	r3, #15
 80019fa:	18fb      	adds	r3, r7, r3
 80019fc:	2200      	movs	r2, #0
 80019fe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	2204      	movs	r2, #4
 8001a08:	4013      	ands	r3, r2
 8001a0a:	d138      	bne.n	8001a7e <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2234      	movs	r2, #52	; 0x34
 8001a10:	5c9b      	ldrb	r3, [r3, r2]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d101      	bne.n	8001a1a <HAL_ADC_Start+0x2a>
 8001a16:	2302      	movs	r3, #2
 8001a18:	e038      	b.n	8001a8c <HAL_ADC_Start+0x9c>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2234      	movs	r2, #52	; 0x34
 8001a1e:	2101      	movs	r1, #1
 8001a20:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	7e5b      	ldrb	r3, [r3, #25]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d007      	beq.n	8001a3a <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001a2a:	230f      	movs	r3, #15
 8001a2c:	18fc      	adds	r4, r7, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	0018      	movs	r0, r3
 8001a32:	f000 f9e3 	bl	8001dfc <ADC_Enable>
 8001a36:	0003      	movs	r3, r0
 8001a38:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001a3a:	230f      	movs	r3, #15
 8001a3c:	18fb      	adds	r3, r7, r3
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d120      	bne.n	8001a86 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a48:	4a12      	ldr	r2, [pc, #72]	; (8001a94 <HAL_ADC_Start+0xa4>)
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	2280      	movs	r2, #128	; 0x80
 8001a4e:	0052      	lsls	r2, r2, #1
 8001a50:	431a      	orrs	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2234      	movs	r2, #52	; 0x34
 8001a60:	2100      	movs	r1, #0
 8001a62:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	221c      	movs	r2, #28
 8001a6a:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	689a      	ldr	r2, [r3, #8]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2104      	movs	r1, #4
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	e003      	b.n	8001a86 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001a7e:	230f      	movs	r3, #15
 8001a80:	18fb      	adds	r3, r7, r3
 8001a82:	2202      	movs	r2, #2
 8001a84:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a86:	230f      	movs	r3, #15
 8001a88:	18fb      	adds	r3, r7, r3
 8001a8a:	781b      	ldrb	r3, [r3, #0]
}
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	b005      	add	sp, #20
 8001a92:	bd90      	pop	{r4, r7, pc}
 8001a94:	fffff0fe 	.word	0xfffff0fe

08001a98 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	2b08      	cmp	r3, #8
 8001aa8:	d102      	bne.n	8001ab0 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001aaa:	2308      	movs	r3, #8
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	e014      	b.n	8001ada <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	4013      	ands	r3, r2
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d10b      	bne.n	8001ad6 <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ac2:	2220      	movs	r2, #32
 8001ac4:	431a      	orrs	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2234      	movs	r2, #52	; 0x34
 8001ace:	2100      	movs	r1, #0
 8001ad0:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e071      	b.n	8001bba <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001ad6:	230c      	movs	r3, #12
 8001ad8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001ada:	f7ff fe1b 	bl	8001714 <HAL_GetTick>
 8001ade:	0003      	movs	r3, r0
 8001ae0:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001ae2:	e01f      	b.n	8001b24 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	d01c      	beq.n	8001b24 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d007      	beq.n	8001b00 <HAL_ADC_PollForConversion+0x68>
 8001af0:	f7ff fe10 	bl	8001714 <HAL_GetTick>
 8001af4:	0002      	movs	r2, r0
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d211      	bcs.n	8001b24 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	d10b      	bne.n	8001b24 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b10:	2204      	movs	r2, #4
 8001b12:	431a      	orrs	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2234      	movs	r2, #52	; 0x34
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e04a      	b.n	8001bba <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	d0d9      	beq.n	8001ae4 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b34:	2280      	movs	r2, #128	; 0x80
 8001b36:	0092      	lsls	r2, r2, #2
 8001b38:	431a      	orrs	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	68da      	ldr	r2, [r3, #12]
 8001b44:	23c0      	movs	r3, #192	; 0xc0
 8001b46:	011b      	lsls	r3, r3, #4
 8001b48:	4013      	ands	r3, r2
 8001b4a:	d12d      	bne.n	8001ba8 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d129      	bne.n	8001ba8 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2208      	movs	r2, #8
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	2b08      	cmp	r3, #8
 8001b60:	d122      	bne.n	8001ba8 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	2204      	movs	r2, #4
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	d110      	bne.n	8001b90 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	685a      	ldr	r2, [r3, #4]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	210c      	movs	r1, #12
 8001b7a:	438a      	bics	r2, r1
 8001b7c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b82:	4a10      	ldr	r2, [pc, #64]	; (8001bc4 <HAL_ADC_PollForConversion+0x12c>)
 8001b84:	4013      	ands	r3, r2
 8001b86:	2201      	movs	r2, #1
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	639a      	str	r2, [r3, #56]	; 0x38
 8001b8e:	e00b      	b.n	8001ba8 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b94:	2220      	movs	r2, #32
 8001b96:	431a      	orrs	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	7e1b      	ldrb	r3, [r3, #24]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d103      	bne.n	8001bb8 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	220c      	movs	r2, #12
 8001bb6:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	0018      	movs	r0, r3
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	b004      	add	sp, #16
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	46c0      	nop			; (mov r8, r8)
 8001bc4:	fffffefe 	.word	0xfffffefe

08001bc8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	b002      	add	sp, #8
 8001bdc:	bd80      	pop	{r7, pc}
	...

08001be0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bea:	230f      	movs	r3, #15
 8001bec:	18fb      	adds	r3, r7, r3
 8001bee:	2200      	movs	r2, #0
 8001bf0:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bfa:	2380      	movs	r3, #128	; 0x80
 8001bfc:	055b      	lsls	r3, r3, #21
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d011      	beq.n	8001c26 <HAL_ADC_ConfigChannel+0x46>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d00d      	beq.n	8001c26 <HAL_ADC_ConfigChannel+0x46>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d009      	beq.n	8001c26 <HAL_ADC_ConfigChannel+0x46>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c16:	2b03      	cmp	r3, #3
 8001c18:	d005      	beq.n	8001c26 <HAL_ADC_ConfigChannel+0x46>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1e:	2b04      	cmp	r3, #4
 8001c20:	d001      	beq.n	8001c26 <HAL_ADC_ConfigChannel+0x46>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2234      	movs	r2, #52	; 0x34
 8001c2a:	5c9b      	ldrb	r3, [r3, r2]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d101      	bne.n	8001c34 <HAL_ADC_ConfigChannel+0x54>
 8001c30:	2302      	movs	r3, #2
 8001c32:	e0d0      	b.n	8001dd6 <HAL_ADC_ConfigChannel+0x1f6>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2234      	movs	r2, #52	; 0x34
 8001c38:	2101      	movs	r1, #1
 8001c3a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	2204      	movs	r2, #4
 8001c44:	4013      	ands	r3, r2
 8001c46:	d000      	beq.n	8001c4a <HAL_ADC_ConfigChannel+0x6a>
 8001c48:	e0b4      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	4a64      	ldr	r2, [pc, #400]	; (8001de0 <HAL_ADC_ConfigChannel+0x200>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d100      	bne.n	8001c56 <HAL_ADC_ConfigChannel+0x76>
 8001c54:	e082      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2201      	movs	r2, #1
 8001c62:	409a      	lsls	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c70:	2380      	movs	r3, #128	; 0x80
 8001c72:	055b      	lsls	r3, r3, #21
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d037      	beq.n	8001ce8 <HAL_ADC_ConfigChannel+0x108>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d033      	beq.n	8001ce8 <HAL_ADC_ConfigChannel+0x108>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d02f      	beq.n	8001ce8 <HAL_ADC_ConfigChannel+0x108>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8c:	2b03      	cmp	r3, #3
 8001c8e:	d02b      	beq.n	8001ce8 <HAL_ADC_ConfigChannel+0x108>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c94:	2b04      	cmp	r3, #4
 8001c96:	d027      	beq.n	8001ce8 <HAL_ADC_ConfigChannel+0x108>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c9c:	2b05      	cmp	r3, #5
 8001c9e:	d023      	beq.n	8001ce8 <HAL_ADC_ConfigChannel+0x108>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca4:	2b06      	cmp	r3, #6
 8001ca6:	d01f      	beq.n	8001ce8 <HAL_ADC_ConfigChannel+0x108>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cac:	2b07      	cmp	r3, #7
 8001cae:	d01b      	beq.n	8001ce8 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	689a      	ldr	r2, [r3, #8]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	695b      	ldr	r3, [r3, #20]
 8001cba:	2107      	movs	r1, #7
 8001cbc:	400b      	ands	r3, r1
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d012      	beq.n	8001ce8 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	695a      	ldr	r2, [r3, #20]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2107      	movs	r1, #7
 8001cce:	438a      	bics	r2, r1
 8001cd0:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	6959      	ldr	r1, [r3, #20]
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	2207      	movs	r2, #7
 8001cde:	401a      	ands	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2b10      	cmp	r3, #16
 8001cee:	d007      	beq.n	8001d00 <HAL_ADC_ConfigChannel+0x120>
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2b11      	cmp	r3, #17
 8001cf6:	d003      	beq.n	8001d00 <HAL_ADC_ConfigChannel+0x120>
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2b12      	cmp	r3, #18
 8001cfe:	d163      	bne.n	8001dc8 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001d00:	4b38      	ldr	r3, [pc, #224]	; (8001de4 <HAL_ADC_ConfigChannel+0x204>)
 8001d02:	6819      	ldr	r1, [r3, #0]
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2b10      	cmp	r3, #16
 8001d0a:	d009      	beq.n	8001d20 <HAL_ADC_ConfigChannel+0x140>
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2b11      	cmp	r3, #17
 8001d12:	d102      	bne.n	8001d1a <HAL_ADC_ConfigChannel+0x13a>
 8001d14:	2380      	movs	r3, #128	; 0x80
 8001d16:	03db      	lsls	r3, r3, #15
 8001d18:	e004      	b.n	8001d24 <HAL_ADC_ConfigChannel+0x144>
 8001d1a:	2380      	movs	r3, #128	; 0x80
 8001d1c:	045b      	lsls	r3, r3, #17
 8001d1e:	e001      	b.n	8001d24 <HAL_ADC_ConfigChannel+0x144>
 8001d20:	2380      	movs	r3, #128	; 0x80
 8001d22:	041b      	lsls	r3, r3, #16
 8001d24:	4a2f      	ldr	r2, [pc, #188]	; (8001de4 <HAL_ADC_ConfigChannel+0x204>)
 8001d26:	430b      	orrs	r3, r1
 8001d28:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2b10      	cmp	r3, #16
 8001d30:	d14a      	bne.n	8001dc8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d32:	4b2d      	ldr	r3, [pc, #180]	; (8001de8 <HAL_ADC_ConfigChannel+0x208>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	492d      	ldr	r1, [pc, #180]	; (8001dec <HAL_ADC_ConfigChannel+0x20c>)
 8001d38:	0018      	movs	r0, r3
 8001d3a:	f7fe f9e5 	bl	8000108 <__udivsi3>
 8001d3e:	0003      	movs	r3, r0
 8001d40:	001a      	movs	r2, r3
 8001d42:	0013      	movs	r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	189b      	adds	r3, r3, r2
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d4c:	e002      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	3b01      	subs	r3, #1
 8001d52:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1f9      	bne.n	8001d4e <HAL_ADC_ConfigChannel+0x16e>
 8001d5a:	e035      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2101      	movs	r1, #1
 8001d68:	4099      	lsls	r1, r3
 8001d6a:	000b      	movs	r3, r1
 8001d6c:	43d9      	mvns	r1, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	400a      	ands	r2, r1
 8001d74:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2b10      	cmp	r3, #16
 8001d7c:	d007      	beq.n	8001d8e <HAL_ADC_ConfigChannel+0x1ae>
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2b11      	cmp	r3, #17
 8001d84:	d003      	beq.n	8001d8e <HAL_ADC_ConfigChannel+0x1ae>
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2b12      	cmp	r3, #18
 8001d8c:	d11c      	bne.n	8001dc8 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001d8e:	4b15      	ldr	r3, [pc, #84]	; (8001de4 <HAL_ADC_ConfigChannel+0x204>)
 8001d90:	6819      	ldr	r1, [r3, #0]
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2b10      	cmp	r3, #16
 8001d98:	d007      	beq.n	8001daa <HAL_ADC_ConfigChannel+0x1ca>
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2b11      	cmp	r3, #17
 8001da0:	d101      	bne.n	8001da6 <HAL_ADC_ConfigChannel+0x1c6>
 8001da2:	4b13      	ldr	r3, [pc, #76]	; (8001df0 <HAL_ADC_ConfigChannel+0x210>)
 8001da4:	e002      	b.n	8001dac <HAL_ADC_ConfigChannel+0x1cc>
 8001da6:	4b13      	ldr	r3, [pc, #76]	; (8001df4 <HAL_ADC_ConfigChannel+0x214>)
 8001da8:	e000      	b.n	8001dac <HAL_ADC_ConfigChannel+0x1cc>
 8001daa:	4b13      	ldr	r3, [pc, #76]	; (8001df8 <HAL_ADC_ConfigChannel+0x218>)
 8001dac:	4a0d      	ldr	r2, [pc, #52]	; (8001de4 <HAL_ADC_ConfigChannel+0x204>)
 8001dae:	400b      	ands	r3, r1
 8001db0:	6013      	str	r3, [r2, #0]
 8001db2:	e009      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001db8:	2220      	movs	r2, #32
 8001dba:	431a      	orrs	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001dc0:	230f      	movs	r3, #15
 8001dc2:	18fb      	adds	r3, r7, r3
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2234      	movs	r2, #52	; 0x34
 8001dcc:	2100      	movs	r1, #0
 8001dce:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001dd0:	230f      	movs	r3, #15
 8001dd2:	18fb      	adds	r3, r7, r3
 8001dd4:	781b      	ldrb	r3, [r3, #0]
}
 8001dd6:	0018      	movs	r0, r3
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	b004      	add	sp, #16
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	46c0      	nop			; (mov r8, r8)
 8001de0:	00001001 	.word	0x00001001
 8001de4:	40012708 	.word	0x40012708
 8001de8:	20000000 	.word	0x20000000
 8001dec:	000f4240 	.word	0x000f4240
 8001df0:	ffbfffff 	.word	0xffbfffff
 8001df4:	feffffff 	.word	0xfeffffff
 8001df8:	ff7fffff 	.word	0xff7fffff

08001dfc <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e04:	2300      	movs	r3, #0
 8001e06:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	2203      	movs	r2, #3
 8001e14:	4013      	ands	r3, r2
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d112      	bne.n	8001e40 <ADC_Enable+0x44>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2201      	movs	r2, #1
 8001e22:	4013      	ands	r3, r2
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d009      	beq.n	8001e3c <ADC_Enable+0x40>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	68da      	ldr	r2, [r3, #12]
 8001e2e:	2380      	movs	r3, #128	; 0x80
 8001e30:	021b      	lsls	r3, r3, #8
 8001e32:	401a      	ands	r2, r3
 8001e34:	2380      	movs	r3, #128	; 0x80
 8001e36:	021b      	lsls	r3, r3, #8
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d101      	bne.n	8001e40 <ADC_Enable+0x44>
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e000      	b.n	8001e42 <ADC_Enable+0x46>
 8001e40:	2300      	movs	r3, #0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d152      	bne.n	8001eec <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	4a2a      	ldr	r2, [pc, #168]	; (8001ef8 <ADC_Enable+0xfc>)
 8001e4e:	4013      	ands	r3, r2
 8001e50:	d00d      	beq.n	8001e6e <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e56:	2210      	movs	r2, #16
 8001e58:	431a      	orrs	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e62:	2201      	movs	r2, #1
 8001e64:	431a      	orrs	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e03f      	b.n	8001eee <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	689a      	ldr	r2, [r3, #8]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2101      	movs	r1, #1
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e7e:	4b1f      	ldr	r3, [pc, #124]	; (8001efc <ADC_Enable+0x100>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	491f      	ldr	r1, [pc, #124]	; (8001f00 <ADC_Enable+0x104>)
 8001e84:	0018      	movs	r0, r3
 8001e86:	f7fe f93f 	bl	8000108 <__udivsi3>
 8001e8a:	0003      	movs	r3, r0
 8001e8c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e8e:	e002      	b.n	8001e96 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	3b01      	subs	r3, #1
 8001e94:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d1f9      	bne.n	8001e90 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e9c:	f7ff fc3a 	bl	8001714 <HAL_GetTick>
 8001ea0:	0003      	movs	r3, r0
 8001ea2:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001ea4:	e01b      	b.n	8001ede <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ea6:	f7ff fc35 	bl	8001714 <HAL_GetTick>
 8001eaa:	0002      	movs	r2, r0
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d914      	bls.n	8001ede <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d00d      	beq.n	8001ede <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec6:	2210      	movs	r2, #16
 8001ec8:	431a      	orrs	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	431a      	orrs	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e007      	b.n	8001eee <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d1dc      	bne.n	8001ea6 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	0018      	movs	r0, r3
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	b004      	add	sp, #16
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	46c0      	nop			; (mov r8, r8)
 8001ef8:	80000017 	.word	0x80000017
 8001efc:	20000000 	.word	0x20000000
 8001f00:	000f4240 	.word	0x000f4240

08001f04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	0002      	movs	r2, r0
 8001f0c:	1dfb      	adds	r3, r7, #7
 8001f0e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f10:	1dfb      	adds	r3, r7, #7
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	2b7f      	cmp	r3, #127	; 0x7f
 8001f16:	d809      	bhi.n	8001f2c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f18:	1dfb      	adds	r3, r7, #7
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	001a      	movs	r2, r3
 8001f1e:	231f      	movs	r3, #31
 8001f20:	401a      	ands	r2, r3
 8001f22:	4b04      	ldr	r3, [pc, #16]	; (8001f34 <__NVIC_EnableIRQ+0x30>)
 8001f24:	2101      	movs	r1, #1
 8001f26:	4091      	lsls	r1, r2
 8001f28:	000a      	movs	r2, r1
 8001f2a:	601a      	str	r2, [r3, #0]
  }
}
 8001f2c:	46c0      	nop			; (mov r8, r8)
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	b002      	add	sp, #8
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	e000e100 	.word	0xe000e100

08001f38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f38:	b590      	push	{r4, r7, lr}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	0002      	movs	r2, r0
 8001f40:	6039      	str	r1, [r7, #0]
 8001f42:	1dfb      	adds	r3, r7, #7
 8001f44:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f46:	1dfb      	adds	r3, r7, #7
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	2b7f      	cmp	r3, #127	; 0x7f
 8001f4c:	d828      	bhi.n	8001fa0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f4e:	4a2f      	ldr	r2, [pc, #188]	; (800200c <__NVIC_SetPriority+0xd4>)
 8001f50:	1dfb      	adds	r3, r7, #7
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	b25b      	sxtb	r3, r3
 8001f56:	089b      	lsrs	r3, r3, #2
 8001f58:	33c0      	adds	r3, #192	; 0xc0
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	589b      	ldr	r3, [r3, r2]
 8001f5e:	1dfa      	adds	r2, r7, #7
 8001f60:	7812      	ldrb	r2, [r2, #0]
 8001f62:	0011      	movs	r1, r2
 8001f64:	2203      	movs	r2, #3
 8001f66:	400a      	ands	r2, r1
 8001f68:	00d2      	lsls	r2, r2, #3
 8001f6a:	21ff      	movs	r1, #255	; 0xff
 8001f6c:	4091      	lsls	r1, r2
 8001f6e:	000a      	movs	r2, r1
 8001f70:	43d2      	mvns	r2, r2
 8001f72:	401a      	ands	r2, r3
 8001f74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	019b      	lsls	r3, r3, #6
 8001f7a:	22ff      	movs	r2, #255	; 0xff
 8001f7c:	401a      	ands	r2, r3
 8001f7e:	1dfb      	adds	r3, r7, #7
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	0018      	movs	r0, r3
 8001f84:	2303      	movs	r3, #3
 8001f86:	4003      	ands	r3, r0
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f8c:	481f      	ldr	r0, [pc, #124]	; (800200c <__NVIC_SetPriority+0xd4>)
 8001f8e:	1dfb      	adds	r3, r7, #7
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	b25b      	sxtb	r3, r3
 8001f94:	089b      	lsrs	r3, r3, #2
 8001f96:	430a      	orrs	r2, r1
 8001f98:	33c0      	adds	r3, #192	; 0xc0
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001f9e:	e031      	b.n	8002004 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fa0:	4a1b      	ldr	r2, [pc, #108]	; (8002010 <__NVIC_SetPriority+0xd8>)
 8001fa2:	1dfb      	adds	r3, r7, #7
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	0019      	movs	r1, r3
 8001fa8:	230f      	movs	r3, #15
 8001faa:	400b      	ands	r3, r1
 8001fac:	3b08      	subs	r3, #8
 8001fae:	089b      	lsrs	r3, r3, #2
 8001fb0:	3306      	adds	r3, #6
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	18d3      	adds	r3, r2, r3
 8001fb6:	3304      	adds	r3, #4
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	1dfa      	adds	r2, r7, #7
 8001fbc:	7812      	ldrb	r2, [r2, #0]
 8001fbe:	0011      	movs	r1, r2
 8001fc0:	2203      	movs	r2, #3
 8001fc2:	400a      	ands	r2, r1
 8001fc4:	00d2      	lsls	r2, r2, #3
 8001fc6:	21ff      	movs	r1, #255	; 0xff
 8001fc8:	4091      	lsls	r1, r2
 8001fca:	000a      	movs	r2, r1
 8001fcc:	43d2      	mvns	r2, r2
 8001fce:	401a      	ands	r2, r3
 8001fd0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	019b      	lsls	r3, r3, #6
 8001fd6:	22ff      	movs	r2, #255	; 0xff
 8001fd8:	401a      	ands	r2, r3
 8001fda:	1dfb      	adds	r3, r7, #7
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	0018      	movs	r0, r3
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	4003      	ands	r3, r0
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fe8:	4809      	ldr	r0, [pc, #36]	; (8002010 <__NVIC_SetPriority+0xd8>)
 8001fea:	1dfb      	adds	r3, r7, #7
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	001c      	movs	r4, r3
 8001ff0:	230f      	movs	r3, #15
 8001ff2:	4023      	ands	r3, r4
 8001ff4:	3b08      	subs	r3, #8
 8001ff6:	089b      	lsrs	r3, r3, #2
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	3306      	adds	r3, #6
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	18c3      	adds	r3, r0, r3
 8002000:	3304      	adds	r3, #4
 8002002:	601a      	str	r2, [r3, #0]
}
 8002004:	46c0      	nop			; (mov r8, r8)
 8002006:	46bd      	mov	sp, r7
 8002008:	b003      	add	sp, #12
 800200a:	bd90      	pop	{r4, r7, pc}
 800200c:	e000e100 	.word	0xe000e100
 8002010:	e000ed00 	.word	0xe000ed00

08002014 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	1e5a      	subs	r2, r3, #1
 8002020:	2380      	movs	r3, #128	; 0x80
 8002022:	045b      	lsls	r3, r3, #17
 8002024:	429a      	cmp	r2, r3
 8002026:	d301      	bcc.n	800202c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002028:	2301      	movs	r3, #1
 800202a:	e010      	b.n	800204e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800202c:	4b0a      	ldr	r3, [pc, #40]	; (8002058 <SysTick_Config+0x44>)
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	3a01      	subs	r2, #1
 8002032:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002034:	2301      	movs	r3, #1
 8002036:	425b      	negs	r3, r3
 8002038:	2103      	movs	r1, #3
 800203a:	0018      	movs	r0, r3
 800203c:	f7ff ff7c 	bl	8001f38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002040:	4b05      	ldr	r3, [pc, #20]	; (8002058 <SysTick_Config+0x44>)
 8002042:	2200      	movs	r2, #0
 8002044:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002046:	4b04      	ldr	r3, [pc, #16]	; (8002058 <SysTick_Config+0x44>)
 8002048:	2207      	movs	r2, #7
 800204a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800204c:	2300      	movs	r3, #0
}
 800204e:	0018      	movs	r0, r3
 8002050:	46bd      	mov	sp, r7
 8002052:	b002      	add	sp, #8
 8002054:	bd80      	pop	{r7, pc}
 8002056:	46c0      	nop			; (mov r8, r8)
 8002058:	e000e010 	.word	0xe000e010

0800205c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	60b9      	str	r1, [r7, #8]
 8002064:	607a      	str	r2, [r7, #4]
 8002066:	210f      	movs	r1, #15
 8002068:	187b      	adds	r3, r7, r1
 800206a:	1c02      	adds	r2, r0, #0
 800206c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800206e:	68ba      	ldr	r2, [r7, #8]
 8002070:	187b      	adds	r3, r7, r1
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	b25b      	sxtb	r3, r3
 8002076:	0011      	movs	r1, r2
 8002078:	0018      	movs	r0, r3
 800207a:	f7ff ff5d 	bl	8001f38 <__NVIC_SetPriority>
}
 800207e:	46c0      	nop			; (mov r8, r8)
 8002080:	46bd      	mov	sp, r7
 8002082:	b004      	add	sp, #16
 8002084:	bd80      	pop	{r7, pc}

08002086 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b082      	sub	sp, #8
 800208a:	af00      	add	r7, sp, #0
 800208c:	0002      	movs	r2, r0
 800208e:	1dfb      	adds	r3, r7, #7
 8002090:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002092:	1dfb      	adds	r3, r7, #7
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	b25b      	sxtb	r3, r3
 8002098:	0018      	movs	r0, r3
 800209a:	f7ff ff33 	bl	8001f04 <__NVIC_EnableIRQ>
}
 800209e:	46c0      	nop			; (mov r8, r8)
 80020a0:	46bd      	mov	sp, r7
 80020a2:	b002      	add	sp, #8
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b082      	sub	sp, #8
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	0018      	movs	r0, r3
 80020b2:	f7ff ffaf 	bl	8002014 <SysTick_Config>
 80020b6:	0003      	movs	r3, r0
}
 80020b8:	0018      	movs	r0, r3
 80020ba:	46bd      	mov	sp, r7
 80020bc:	b002      	add	sp, #8
 80020be:	bd80      	pop	{r7, pc}

080020c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80020c8:	2300      	movs	r3, #0
 80020ca:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e036      	b.n	8002144 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2221      	movs	r2, #33	; 0x21
 80020da:	2102      	movs	r1, #2
 80020dc:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	4a18      	ldr	r2, [pc, #96]	; (800214c <HAL_DMA_Init+0x8c>)
 80020ea:	4013      	ands	r3, r2
 80020ec:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80020f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002102:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	695b      	ldr	r3, [r3, #20]
 8002108:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800210e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	69db      	ldr	r3, [r3, #28]
 8002114:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	4313      	orrs	r3, r2
 800211a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	0018      	movs	r0, r3
 8002128:	f000 f9c4 	bl	80024b4 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2221      	movs	r2, #33	; 0x21
 8002136:	2101      	movs	r1, #1
 8002138:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2220      	movs	r2, #32
 800213e:	2100      	movs	r1, #0
 8002140:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	0018      	movs	r0, r3
 8002146:	46bd      	mov	sp, r7
 8002148:	b004      	add	sp, #16
 800214a:	bd80      	pop	{r7, pc}
 800214c:	ffffc00f 	.word	0xffffc00f

08002150 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
 800215c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800215e:	2317      	movs	r3, #23
 8002160:	18fb      	adds	r3, r7, r3
 8002162:	2200      	movs	r2, #0
 8002164:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2220      	movs	r2, #32
 800216a:	5c9b      	ldrb	r3, [r3, r2]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d101      	bne.n	8002174 <HAL_DMA_Start_IT+0x24>
 8002170:	2302      	movs	r3, #2
 8002172:	e04f      	b.n	8002214 <HAL_DMA_Start_IT+0xc4>
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2220      	movs	r2, #32
 8002178:	2101      	movs	r1, #1
 800217a:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2221      	movs	r2, #33	; 0x21
 8002180:	5c9b      	ldrb	r3, [r3, r2]
 8002182:	b2db      	uxtb	r3, r3
 8002184:	2b01      	cmp	r3, #1
 8002186:	d13a      	bne.n	80021fe <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2221      	movs	r2, #33	; 0x21
 800218c:	2102      	movs	r1, #2
 800218e:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2101      	movs	r1, #1
 80021a2:	438a      	bics	r2, r1
 80021a4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	68b9      	ldr	r1, [r7, #8]
 80021ac:	68f8      	ldr	r0, [r7, #12]
 80021ae:	f000 f954 	bl	800245a <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d008      	beq.n	80021cc <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	210e      	movs	r1, #14
 80021c6:	430a      	orrs	r2, r1
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	e00f      	b.n	80021ec <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	210a      	movs	r1, #10
 80021d8:	430a      	orrs	r2, r1
 80021da:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2104      	movs	r1, #4
 80021e8:	438a      	bics	r2, r1
 80021ea:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2101      	movs	r1, #1
 80021f8:	430a      	orrs	r2, r1
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	e007      	b.n	800220e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2220      	movs	r2, #32
 8002202:	2100      	movs	r1, #0
 8002204:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002206:	2317      	movs	r3, #23
 8002208:	18fb      	adds	r3, r7, r3
 800220a:	2202      	movs	r2, #2
 800220c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800220e:	2317      	movs	r3, #23
 8002210:	18fb      	adds	r3, r7, r3
 8002212:	781b      	ldrb	r3, [r3, #0]
}
 8002214:	0018      	movs	r0, r3
 8002216:	46bd      	mov	sp, r7
 8002218:	b006      	add	sp, #24
 800221a:	bd80      	pop	{r7, pc}

0800221c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2221      	movs	r2, #33	; 0x21
 8002228:	5c9b      	ldrb	r3, [r3, r2]
 800222a:	b2db      	uxtb	r3, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d008      	beq.n	8002242 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2204      	movs	r2, #4
 8002234:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2220      	movs	r2, #32
 800223a:	2100      	movs	r1, #0
 800223c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e020      	b.n	8002284 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	210e      	movs	r1, #14
 800224e:	438a      	bics	r2, r1
 8002250:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2101      	movs	r1, #1
 800225e:	438a      	bics	r2, r1
 8002260:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800226a:	2101      	movs	r1, #1
 800226c:	4091      	lsls	r1, r2
 800226e:	000a      	movs	r2, r1
 8002270:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2221      	movs	r2, #33	; 0x21
 8002276:	2101      	movs	r1, #1
 8002278:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2220      	movs	r2, #32
 800227e:	2100      	movs	r1, #0
 8002280:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	0018      	movs	r0, r3
 8002286:	46bd      	mov	sp, r7
 8002288:	b002      	add	sp, #8
 800228a:	bd80      	pop	{r7, pc}

0800228c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002294:	210f      	movs	r1, #15
 8002296:	187b      	adds	r3, r7, r1
 8002298:	2200      	movs	r2, #0
 800229a:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2221      	movs	r2, #33	; 0x21
 80022a0:	5c9b      	ldrb	r3, [r3, r2]
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d006      	beq.n	80022b6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2204      	movs	r2, #4
 80022ac:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80022ae:	187b      	adds	r3, r7, r1
 80022b0:	2201      	movs	r2, #1
 80022b2:	701a      	strb	r2, [r3, #0]
 80022b4:	e028      	b.n	8002308 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	210e      	movs	r1, #14
 80022c2:	438a      	bics	r2, r1
 80022c4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2101      	movs	r1, #1
 80022d2:	438a      	bics	r2, r1
 80022d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022de:	2101      	movs	r1, #1
 80022e0:	4091      	lsls	r1, r2
 80022e2:	000a      	movs	r2, r1
 80022e4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2221      	movs	r2, #33	; 0x21
 80022ea:	2101      	movs	r1, #1
 80022ec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2220      	movs	r2, #32
 80022f2:	2100      	movs	r1, #0
 80022f4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d004      	beq.n	8002308 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	0010      	movs	r0, r2
 8002306:	4798      	blx	r3
    }
  }
  return status;
 8002308:	230f      	movs	r3, #15
 800230a:	18fb      	adds	r3, r7, r3
 800230c:	781b      	ldrb	r3, [r3, #0]
}
 800230e:	0018      	movs	r0, r3
 8002310:	46bd      	mov	sp, r7
 8002312:	b004      	add	sp, #16
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b084      	sub	sp, #16
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	2204      	movs	r2, #4
 8002334:	409a      	lsls	r2, r3
 8002336:	0013      	movs	r3, r2
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	4013      	ands	r3, r2
 800233c:	d024      	beq.n	8002388 <HAL_DMA_IRQHandler+0x72>
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	2204      	movs	r2, #4
 8002342:	4013      	ands	r3, r2
 8002344:	d020      	beq.n	8002388 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2220      	movs	r2, #32
 800234e:	4013      	ands	r3, r2
 8002350:	d107      	bne.n	8002362 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2104      	movs	r1, #4
 800235e:	438a      	bics	r2, r1
 8002360:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800236a:	2104      	movs	r1, #4
 800236c:	4091      	lsls	r1, r2
 800236e:	000a      	movs	r2, r1
 8002370:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002376:	2b00      	cmp	r3, #0
 8002378:	d100      	bne.n	800237c <HAL_DMA_IRQHandler+0x66>
 800237a:	e06a      	b.n	8002452 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	0010      	movs	r0, r2
 8002384:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002386:	e064      	b.n	8002452 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238c:	2202      	movs	r2, #2
 800238e:	409a      	lsls	r2, r3
 8002390:	0013      	movs	r3, r2
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	4013      	ands	r3, r2
 8002396:	d02b      	beq.n	80023f0 <HAL_DMA_IRQHandler+0xda>
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	2202      	movs	r2, #2
 800239c:	4013      	ands	r3, r2
 800239e:	d027      	beq.n	80023f0 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2220      	movs	r2, #32
 80023a8:	4013      	ands	r3, r2
 80023aa:	d10b      	bne.n	80023c4 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	210a      	movs	r1, #10
 80023b8:	438a      	bics	r2, r1
 80023ba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2221      	movs	r2, #33	; 0x21
 80023c0:	2101      	movs	r1, #1
 80023c2:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023cc:	2102      	movs	r1, #2
 80023ce:	4091      	lsls	r1, r2
 80023d0:	000a      	movs	r2, r1
 80023d2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2220      	movs	r2, #32
 80023d8:	2100      	movs	r1, #0
 80023da:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d036      	beq.n	8002452 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	0010      	movs	r0, r2
 80023ec:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80023ee:	e030      	b.n	8002452 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f4:	2208      	movs	r2, #8
 80023f6:	409a      	lsls	r2, r3
 80023f8:	0013      	movs	r3, r2
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	4013      	ands	r3, r2
 80023fe:	d028      	beq.n	8002452 <HAL_DMA_IRQHandler+0x13c>
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	2208      	movs	r2, #8
 8002404:	4013      	ands	r3, r2
 8002406:	d024      	beq.n	8002452 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	210e      	movs	r1, #14
 8002414:	438a      	bics	r2, r1
 8002416:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002420:	2101      	movs	r1, #1
 8002422:	4091      	lsls	r1, r2
 8002424:	000a      	movs	r2, r1
 8002426:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2221      	movs	r2, #33	; 0x21
 8002432:	2101      	movs	r1, #1
 8002434:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2220      	movs	r2, #32
 800243a:	2100      	movs	r1, #0
 800243c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	2b00      	cmp	r3, #0
 8002444:	d005      	beq.n	8002452 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	0010      	movs	r0, r2
 800244e:	4798      	blx	r3
    }
  }
}
 8002450:	e7ff      	b.n	8002452 <HAL_DMA_IRQHandler+0x13c>
 8002452:	46c0      	nop			; (mov r8, r8)
 8002454:	46bd      	mov	sp, r7
 8002456:	b004      	add	sp, #16
 8002458:	bd80      	pop	{r7, pc}

0800245a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b084      	sub	sp, #16
 800245e:	af00      	add	r7, sp, #0
 8002460:	60f8      	str	r0, [r7, #12]
 8002462:	60b9      	str	r1, [r7, #8]
 8002464:	607a      	str	r2, [r7, #4]
 8002466:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002470:	2101      	movs	r1, #1
 8002472:	4091      	lsls	r1, r2
 8002474:	000a      	movs	r2, r1
 8002476:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	2b10      	cmp	r3, #16
 8002486:	d108      	bne.n	800249a <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68ba      	ldr	r2, [r7, #8]
 8002496:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002498:	e007      	b.n	80024aa <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	68ba      	ldr	r2, [r7, #8]
 80024a0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	60da      	str	r2, [r3, #12]
}
 80024aa:	46c0      	nop			; (mov r8, r8)
 80024ac:	46bd      	mov	sp, r7
 80024ae:	b004      	add	sp, #16
 80024b0:	bd80      	pop	{r7, pc}
	...

080024b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a08      	ldr	r2, [pc, #32]	; (80024e4 <DMA_CalcBaseAndBitshift+0x30>)
 80024c2:	4694      	mov	ip, r2
 80024c4:	4463      	add	r3, ip
 80024c6:	2114      	movs	r1, #20
 80024c8:	0018      	movs	r0, r3
 80024ca:	f7fd fe1d 	bl	8000108 <__udivsi3>
 80024ce:	0003      	movs	r3, r0
 80024d0:	009a      	lsls	r2, r3, #2
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a03      	ldr	r2, [pc, #12]	; (80024e8 <DMA_CalcBaseAndBitshift+0x34>)
 80024da:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80024dc:	46c0      	nop			; (mov r8, r8)
 80024de:	46bd      	mov	sp, r7
 80024e0:	b002      	add	sp, #8
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	bffdfff8 	.word	0xbffdfff8
 80024e8:	40020000 	.word	0x40020000

080024ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024f6:	2300      	movs	r3, #0
 80024f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024fa:	e149      	b.n	8002790 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2101      	movs	r1, #1
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	4091      	lsls	r1, r2
 8002506:	000a      	movs	r2, r1
 8002508:	4013      	ands	r3, r2
 800250a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d100      	bne.n	8002514 <HAL_GPIO_Init+0x28>
 8002512:	e13a      	b.n	800278a <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	2203      	movs	r2, #3
 800251a:	4013      	ands	r3, r2
 800251c:	2b01      	cmp	r3, #1
 800251e:	d005      	beq.n	800252c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	2203      	movs	r2, #3
 8002526:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002528:	2b02      	cmp	r3, #2
 800252a:	d130      	bne.n	800258e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	2203      	movs	r2, #3
 8002538:	409a      	lsls	r2, r3
 800253a:	0013      	movs	r3, r2
 800253c:	43da      	mvns	r2, r3
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	4013      	ands	r3, r2
 8002542:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	68da      	ldr	r2, [r3, #12]
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	409a      	lsls	r2, r3
 800254e:	0013      	movs	r3, r2
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	4313      	orrs	r3, r2
 8002554:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002562:	2201      	movs	r2, #1
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	409a      	lsls	r2, r3
 8002568:	0013      	movs	r3, r2
 800256a:	43da      	mvns	r2, r3
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	4013      	ands	r3, r2
 8002570:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	091b      	lsrs	r3, r3, #4
 8002578:	2201      	movs	r2, #1
 800257a:	401a      	ands	r2, r3
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	409a      	lsls	r2, r3
 8002580:	0013      	movs	r3, r2
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	4313      	orrs	r3, r2
 8002586:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	2203      	movs	r2, #3
 8002594:	4013      	ands	r3, r2
 8002596:	2b03      	cmp	r3, #3
 8002598:	d017      	beq.n	80025ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	2203      	movs	r2, #3
 80025a6:	409a      	lsls	r2, r3
 80025a8:	0013      	movs	r3, r2
 80025aa:	43da      	mvns	r2, r3
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	4013      	ands	r3, r2
 80025b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	689a      	ldr	r2, [r3, #8]
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	409a      	lsls	r2, r3
 80025bc:	0013      	movs	r3, r2
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	2203      	movs	r2, #3
 80025d0:	4013      	ands	r3, r2
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d123      	bne.n	800261e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	08da      	lsrs	r2, r3, #3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	3208      	adds	r2, #8
 80025de:	0092      	lsls	r2, r2, #2
 80025e0:	58d3      	ldr	r3, [r2, r3]
 80025e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	2207      	movs	r2, #7
 80025e8:	4013      	ands	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	220f      	movs	r2, #15
 80025ee:	409a      	lsls	r2, r3
 80025f0:	0013      	movs	r3, r2
 80025f2:	43da      	mvns	r2, r3
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	4013      	ands	r3, r2
 80025f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	691a      	ldr	r2, [r3, #16]
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	2107      	movs	r1, #7
 8002602:	400b      	ands	r3, r1
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	409a      	lsls	r2, r3
 8002608:	0013      	movs	r3, r2
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	4313      	orrs	r3, r2
 800260e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	08da      	lsrs	r2, r3, #3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3208      	adds	r2, #8
 8002618:	0092      	lsls	r2, r2, #2
 800261a:	6939      	ldr	r1, [r7, #16]
 800261c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	2203      	movs	r2, #3
 800262a:	409a      	lsls	r2, r3
 800262c:	0013      	movs	r3, r2
 800262e:	43da      	mvns	r2, r3
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	4013      	ands	r3, r2
 8002634:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	2203      	movs	r2, #3
 800263c:	401a      	ands	r2, r3
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	409a      	lsls	r2, r3
 8002644:	0013      	movs	r3, r2
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	4313      	orrs	r3, r2
 800264a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685a      	ldr	r2, [r3, #4]
 8002656:	23c0      	movs	r3, #192	; 0xc0
 8002658:	029b      	lsls	r3, r3, #10
 800265a:	4013      	ands	r3, r2
 800265c:	d100      	bne.n	8002660 <HAL_GPIO_Init+0x174>
 800265e:	e094      	b.n	800278a <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002660:	4b51      	ldr	r3, [pc, #324]	; (80027a8 <HAL_GPIO_Init+0x2bc>)
 8002662:	699a      	ldr	r2, [r3, #24]
 8002664:	4b50      	ldr	r3, [pc, #320]	; (80027a8 <HAL_GPIO_Init+0x2bc>)
 8002666:	2101      	movs	r1, #1
 8002668:	430a      	orrs	r2, r1
 800266a:	619a      	str	r2, [r3, #24]
 800266c:	4b4e      	ldr	r3, [pc, #312]	; (80027a8 <HAL_GPIO_Init+0x2bc>)
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	2201      	movs	r2, #1
 8002672:	4013      	ands	r3, r2
 8002674:	60bb      	str	r3, [r7, #8]
 8002676:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002678:	4a4c      	ldr	r2, [pc, #304]	; (80027ac <HAL_GPIO_Init+0x2c0>)
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	089b      	lsrs	r3, r3, #2
 800267e:	3302      	adds	r3, #2
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	589b      	ldr	r3, [r3, r2]
 8002684:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	2203      	movs	r2, #3
 800268a:	4013      	ands	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	220f      	movs	r2, #15
 8002690:	409a      	lsls	r2, r3
 8002692:	0013      	movs	r3, r2
 8002694:	43da      	mvns	r2, r3
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	4013      	ands	r3, r2
 800269a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	2390      	movs	r3, #144	; 0x90
 80026a0:	05db      	lsls	r3, r3, #23
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d00d      	beq.n	80026c2 <HAL_GPIO_Init+0x1d6>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a41      	ldr	r2, [pc, #260]	; (80027b0 <HAL_GPIO_Init+0x2c4>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d007      	beq.n	80026be <HAL_GPIO_Init+0x1d2>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a40      	ldr	r2, [pc, #256]	; (80027b4 <HAL_GPIO_Init+0x2c8>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d101      	bne.n	80026ba <HAL_GPIO_Init+0x1ce>
 80026b6:	2302      	movs	r3, #2
 80026b8:	e004      	b.n	80026c4 <HAL_GPIO_Init+0x1d8>
 80026ba:	2305      	movs	r3, #5
 80026bc:	e002      	b.n	80026c4 <HAL_GPIO_Init+0x1d8>
 80026be:	2301      	movs	r3, #1
 80026c0:	e000      	b.n	80026c4 <HAL_GPIO_Init+0x1d8>
 80026c2:	2300      	movs	r3, #0
 80026c4:	697a      	ldr	r2, [r7, #20]
 80026c6:	2103      	movs	r1, #3
 80026c8:	400a      	ands	r2, r1
 80026ca:	0092      	lsls	r2, r2, #2
 80026cc:	4093      	lsls	r3, r2
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026d4:	4935      	ldr	r1, [pc, #212]	; (80027ac <HAL_GPIO_Init+0x2c0>)
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	089b      	lsrs	r3, r3, #2
 80026da:	3302      	adds	r3, #2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026e2:	4b35      	ldr	r3, [pc, #212]	; (80027b8 <HAL_GPIO_Init+0x2cc>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	43da      	mvns	r2, r3
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	4013      	ands	r3, r2
 80026f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685a      	ldr	r2, [r3, #4]
 80026f6:	2380      	movs	r3, #128	; 0x80
 80026f8:	035b      	lsls	r3, r3, #13
 80026fa:	4013      	ands	r3, r2
 80026fc:	d003      	beq.n	8002706 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4313      	orrs	r3, r2
 8002704:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002706:	4b2c      	ldr	r3, [pc, #176]	; (80027b8 <HAL_GPIO_Init+0x2cc>)
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800270c:	4b2a      	ldr	r3, [pc, #168]	; (80027b8 <HAL_GPIO_Init+0x2cc>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	43da      	mvns	r2, r3
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	4013      	ands	r3, r2
 800271a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	2380      	movs	r3, #128	; 0x80
 8002722:	039b      	lsls	r3, r3, #14
 8002724:	4013      	ands	r3, r2
 8002726:	d003      	beq.n	8002730 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	4313      	orrs	r3, r2
 800272e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002730:	4b21      	ldr	r3, [pc, #132]	; (80027b8 <HAL_GPIO_Init+0x2cc>)
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8002736:	4b20      	ldr	r3, [pc, #128]	; (80027b8 <HAL_GPIO_Init+0x2cc>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	43da      	mvns	r2, r3
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	4013      	ands	r3, r2
 8002744:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685a      	ldr	r2, [r3, #4]
 800274a:	2380      	movs	r3, #128	; 0x80
 800274c:	029b      	lsls	r3, r3, #10
 800274e:	4013      	ands	r3, r2
 8002750:	d003      	beq.n	800275a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	4313      	orrs	r3, r2
 8002758:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800275a:	4b17      	ldr	r3, [pc, #92]	; (80027b8 <HAL_GPIO_Init+0x2cc>)
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002760:	4b15      	ldr	r3, [pc, #84]	; (80027b8 <HAL_GPIO_Init+0x2cc>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	43da      	mvns	r2, r3
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	4013      	ands	r3, r2
 800276e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685a      	ldr	r2, [r3, #4]
 8002774:	2380      	movs	r3, #128	; 0x80
 8002776:	025b      	lsls	r3, r3, #9
 8002778:	4013      	ands	r3, r2
 800277a:	d003      	beq.n	8002784 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	4313      	orrs	r3, r2
 8002782:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002784:	4b0c      	ldr	r3, [pc, #48]	; (80027b8 <HAL_GPIO_Init+0x2cc>)
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	3301      	adds	r3, #1
 800278e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	40da      	lsrs	r2, r3
 8002798:	1e13      	subs	r3, r2, #0
 800279a:	d000      	beq.n	800279e <HAL_GPIO_Init+0x2b2>
 800279c:	e6ae      	b.n	80024fc <HAL_GPIO_Init+0x10>
  } 
}
 800279e:	46c0      	nop			; (mov r8, r8)
 80027a0:	46c0      	nop			; (mov r8, r8)
 80027a2:	46bd      	mov	sp, r7
 80027a4:	b006      	add	sp, #24
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40021000 	.word	0x40021000
 80027ac:	40010000 	.word	0x40010000
 80027b0:	48000400 	.word	0x48000400
 80027b4:	48000800 	.word	0x48000800
 80027b8:	40010400 	.word	0x40010400

080027bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b088      	sub	sp, #32
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d102      	bne.n	80027d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	f000 fb76 	bl	8002ebc <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2201      	movs	r2, #1
 80027d6:	4013      	ands	r3, r2
 80027d8:	d100      	bne.n	80027dc <HAL_RCC_OscConfig+0x20>
 80027da:	e08e      	b.n	80028fa <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80027dc:	4bc5      	ldr	r3, [pc, #788]	; (8002af4 <HAL_RCC_OscConfig+0x338>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	220c      	movs	r2, #12
 80027e2:	4013      	ands	r3, r2
 80027e4:	2b04      	cmp	r3, #4
 80027e6:	d00e      	beq.n	8002806 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027e8:	4bc2      	ldr	r3, [pc, #776]	; (8002af4 <HAL_RCC_OscConfig+0x338>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	220c      	movs	r2, #12
 80027ee:	4013      	ands	r3, r2
 80027f0:	2b08      	cmp	r3, #8
 80027f2:	d117      	bne.n	8002824 <HAL_RCC_OscConfig+0x68>
 80027f4:	4bbf      	ldr	r3, [pc, #764]	; (8002af4 <HAL_RCC_OscConfig+0x338>)
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	23c0      	movs	r3, #192	; 0xc0
 80027fa:	025b      	lsls	r3, r3, #9
 80027fc:	401a      	ands	r2, r3
 80027fe:	2380      	movs	r3, #128	; 0x80
 8002800:	025b      	lsls	r3, r3, #9
 8002802:	429a      	cmp	r2, r3
 8002804:	d10e      	bne.n	8002824 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002806:	4bbb      	ldr	r3, [pc, #748]	; (8002af4 <HAL_RCC_OscConfig+0x338>)
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	2380      	movs	r3, #128	; 0x80
 800280c:	029b      	lsls	r3, r3, #10
 800280e:	4013      	ands	r3, r2
 8002810:	d100      	bne.n	8002814 <HAL_RCC_OscConfig+0x58>
 8002812:	e071      	b.n	80028f8 <HAL_RCC_OscConfig+0x13c>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d000      	beq.n	800281e <HAL_RCC_OscConfig+0x62>
 800281c:	e06c      	b.n	80028f8 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	f000 fb4c 	bl	8002ebc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d107      	bne.n	800283c <HAL_RCC_OscConfig+0x80>
 800282c:	4bb1      	ldr	r3, [pc, #708]	; (8002af4 <HAL_RCC_OscConfig+0x338>)
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	4bb0      	ldr	r3, [pc, #704]	; (8002af4 <HAL_RCC_OscConfig+0x338>)
 8002832:	2180      	movs	r1, #128	; 0x80
 8002834:	0249      	lsls	r1, r1, #9
 8002836:	430a      	orrs	r2, r1
 8002838:	601a      	str	r2, [r3, #0]
 800283a:	e02f      	b.n	800289c <HAL_RCC_OscConfig+0xe0>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d10c      	bne.n	800285e <HAL_RCC_OscConfig+0xa2>
 8002844:	4bab      	ldr	r3, [pc, #684]	; (8002af4 <HAL_RCC_OscConfig+0x338>)
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	4baa      	ldr	r3, [pc, #680]	; (8002af4 <HAL_RCC_OscConfig+0x338>)
 800284a:	49ab      	ldr	r1, [pc, #684]	; (8002af8 <HAL_RCC_OscConfig+0x33c>)
 800284c:	400a      	ands	r2, r1
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	4ba8      	ldr	r3, [pc, #672]	; (8002af4 <HAL_RCC_OscConfig+0x338>)
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	4ba7      	ldr	r3, [pc, #668]	; (8002af4 <HAL_RCC_OscConfig+0x338>)
 8002856:	49a9      	ldr	r1, [pc, #676]	; (8002afc <HAL_RCC_OscConfig+0x340>)
 8002858:	400a      	ands	r2, r1
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	e01e      	b.n	800289c <HAL_RCC_OscConfig+0xe0>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2b05      	cmp	r3, #5
 8002864:	d10e      	bne.n	8002884 <HAL_RCC_OscConfig+0xc8>
 8002866:	4ba3      	ldr	r3, [pc, #652]	; (8002af4 <HAL_RCC_OscConfig+0x338>)
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	4ba2      	ldr	r3, [pc, #648]	; (8002af4 <HAL_RCC_OscConfig+0x338>)
 800286c:	2180      	movs	r1, #128	; 0x80
 800286e:	02c9      	lsls	r1, r1, #11
 8002870:	430a      	orrs	r2, r1
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	4b9f      	ldr	r3, [pc, #636]	; (8002af4 <HAL_RCC_OscConfig+0x338>)
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	4b9e      	ldr	r3, [pc, #632]	; (8002af4 <HAL_RCC_OscConfig+0x338>)
 800287a:	2180      	movs	r1, #128	; 0x80
 800287c:	0249      	lsls	r1, r1, #9
 800287e:	430a      	orrs	r2, r1
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	e00b      	b.n	800289c <HAL_RCC_OscConfig+0xe0>
 8002884:	4b9b      	ldr	r3, [pc, #620]	; (8002af4 <HAL_RCC_OscConfig+0x338>)
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	4b9a      	ldr	r3, [pc, #616]	; (8002af4 <HAL_RCC_OscConfig+0x338>)
 800288a:	499b      	ldr	r1, [pc, #620]	; (8002af8 <HAL_RCC_OscConfig+0x33c>)
 800288c:	400a      	ands	r2, r1
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	4b98      	ldr	r3, [pc, #608]	; (8002af4 <HAL_RCC_OscConfig+0x338>)
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	4b97      	ldr	r3, [pc, #604]	; (8002af4 <HAL_RCC_OscConfig+0x338>)
 8002896:	4999      	ldr	r1, [pc, #612]	; (8002afc <HAL_RCC_OscConfig+0x340>)
 8002898:	400a      	ands	r2, r1
 800289a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d014      	beq.n	80028ce <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a4:	f7fe ff36 	bl	8001714 <HAL_GetTick>
 80028a8:	0003      	movs	r3, r0
 80028aa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ac:	e008      	b.n	80028c0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028ae:	f7fe ff31 	bl	8001714 <HAL_GetTick>
 80028b2:	0002      	movs	r2, r0
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b64      	cmp	r3, #100	; 0x64
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e2fd      	b.n	8002ebc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c0:	4b8c      	ldr	r3, [pc, #560]	; (8002af4 <HAL_RCC_OscConfig+0x338>)
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	2380      	movs	r3, #128	; 0x80
 80028c6:	029b      	lsls	r3, r3, #10
 80028c8:	4013      	ands	r3, r2
 80028ca:	d0f0      	beq.n	80028ae <HAL_RCC_OscConfig+0xf2>
 80028cc:	e015      	b.n	80028fa <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ce:	f7fe ff21 	bl	8001714 <HAL_GetTick>
 80028d2:	0003      	movs	r3, r0
 80028d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028d6:	e008      	b.n	80028ea <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028d8:	f7fe ff1c 	bl	8001714 <HAL_GetTick>
 80028dc:	0002      	movs	r2, r0
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b64      	cmp	r3, #100	; 0x64
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e2e8      	b.n	8002ebc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ea:	4b82      	ldr	r3, [pc, #520]	; (8002af4 <HAL_RCC_OscConfig+0x338>)
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	2380      	movs	r3, #128	; 0x80
 80028f0:	029b      	lsls	r3, r3, #10
 80028f2:	4013      	ands	r3, r2
 80028f4:	d1f0      	bne.n	80028d8 <HAL_RCC_OscConfig+0x11c>
 80028f6:	e000      	b.n	80028fa <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028f8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2202      	movs	r2, #2
 8002900:	4013      	ands	r3, r2
 8002902:	d100      	bne.n	8002906 <HAL_RCC_OscConfig+0x14a>
 8002904:	e06c      	b.n	80029e0 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002906:	4b7b      	ldr	r3, [pc, #492]	; (8002af4 <HAL_RCC_OscConfig+0x338>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	220c      	movs	r2, #12
 800290c:	4013      	ands	r3, r2
 800290e:	d00e      	beq.n	800292e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002910:	4b78      	ldr	r3, [pc, #480]	; (8002af4 <HAL_RCC_OscConfig+0x338>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	220c      	movs	r2, #12
 8002916:	4013      	ands	r3, r2
 8002918:	2b08      	cmp	r3, #8
 800291a:	d11f      	bne.n	800295c <HAL_RCC_OscConfig+0x1a0>
 800291c:	4b75      	ldr	r3, [pc, #468]	; (8002af4 <HAL_RCC_OscConfig+0x338>)
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	23c0      	movs	r3, #192	; 0xc0
 8002922:	025b      	lsls	r3, r3, #9
 8002924:	401a      	ands	r2, r3
 8002926:	2380      	movs	r3, #128	; 0x80
 8002928:	021b      	lsls	r3, r3, #8
 800292a:	429a      	cmp	r2, r3
 800292c:	d116      	bne.n	800295c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800292e:	4b71      	ldr	r3, [pc, #452]	; (8002af4 <HAL_RCC_OscConfig+0x338>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2202      	movs	r2, #2
 8002934:	4013      	ands	r3, r2
 8002936:	d005      	beq.n	8002944 <HAL_RCC_OscConfig+0x188>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d001      	beq.n	8002944 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e2bb      	b.n	8002ebc <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002944:	4b6b      	ldr	r3, [pc, #428]	; (8002af4 <HAL_RCC_OscConfig+0x338>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	22f8      	movs	r2, #248	; 0xf8
 800294a:	4393      	bics	r3, r2
 800294c:	0019      	movs	r1, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	00da      	lsls	r2, r3, #3
 8002954:	4b67      	ldr	r3, [pc, #412]	; (8002af4 <HAL_RCC_OscConfig+0x338>)
 8002956:	430a      	orrs	r2, r1
 8002958:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800295a:	e041      	b.n	80029e0 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d024      	beq.n	80029ae <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002964:	4b63      	ldr	r3, [pc, #396]	; (8002af4 <HAL_RCC_OscConfig+0x338>)
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	4b62      	ldr	r3, [pc, #392]	; (8002af4 <HAL_RCC_OscConfig+0x338>)
 800296a:	2101      	movs	r1, #1
 800296c:	430a      	orrs	r2, r1
 800296e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002970:	f7fe fed0 	bl	8001714 <HAL_GetTick>
 8002974:	0003      	movs	r3, r0
 8002976:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002978:	e008      	b.n	800298c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800297a:	f7fe fecb 	bl	8001714 <HAL_GetTick>
 800297e:	0002      	movs	r2, r0
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d901      	bls.n	800298c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e297      	b.n	8002ebc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800298c:	4b59      	ldr	r3, [pc, #356]	; (8002af4 <HAL_RCC_OscConfig+0x338>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2202      	movs	r2, #2
 8002992:	4013      	ands	r3, r2
 8002994:	d0f1      	beq.n	800297a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002996:	4b57      	ldr	r3, [pc, #348]	; (8002af4 <HAL_RCC_OscConfig+0x338>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	22f8      	movs	r2, #248	; 0xf8
 800299c:	4393      	bics	r3, r2
 800299e:	0019      	movs	r1, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	00da      	lsls	r2, r3, #3
 80029a6:	4b53      	ldr	r3, [pc, #332]	; (8002af4 <HAL_RCC_OscConfig+0x338>)
 80029a8:	430a      	orrs	r2, r1
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	e018      	b.n	80029e0 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ae:	4b51      	ldr	r3, [pc, #324]	; (8002af4 <HAL_RCC_OscConfig+0x338>)
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	4b50      	ldr	r3, [pc, #320]	; (8002af4 <HAL_RCC_OscConfig+0x338>)
 80029b4:	2101      	movs	r1, #1
 80029b6:	438a      	bics	r2, r1
 80029b8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ba:	f7fe feab 	bl	8001714 <HAL_GetTick>
 80029be:	0003      	movs	r3, r0
 80029c0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029c4:	f7fe fea6 	bl	8001714 <HAL_GetTick>
 80029c8:	0002      	movs	r2, r0
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e272      	b.n	8002ebc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029d6:	4b47      	ldr	r3, [pc, #284]	; (8002af4 <HAL_RCC_OscConfig+0x338>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2202      	movs	r2, #2
 80029dc:	4013      	ands	r3, r2
 80029de:	d1f1      	bne.n	80029c4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2208      	movs	r2, #8
 80029e6:	4013      	ands	r3, r2
 80029e8:	d036      	beq.n	8002a58 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	69db      	ldr	r3, [r3, #28]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d019      	beq.n	8002a26 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029f2:	4b40      	ldr	r3, [pc, #256]	; (8002af4 <HAL_RCC_OscConfig+0x338>)
 80029f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029f6:	4b3f      	ldr	r3, [pc, #252]	; (8002af4 <HAL_RCC_OscConfig+0x338>)
 80029f8:	2101      	movs	r1, #1
 80029fa:	430a      	orrs	r2, r1
 80029fc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029fe:	f7fe fe89 	bl	8001714 <HAL_GetTick>
 8002a02:	0003      	movs	r3, r0
 8002a04:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a08:	f7fe fe84 	bl	8001714 <HAL_GetTick>
 8002a0c:	0002      	movs	r2, r0
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e250      	b.n	8002ebc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a1a:	4b36      	ldr	r3, [pc, #216]	; (8002af4 <HAL_RCC_OscConfig+0x338>)
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1e:	2202      	movs	r2, #2
 8002a20:	4013      	ands	r3, r2
 8002a22:	d0f1      	beq.n	8002a08 <HAL_RCC_OscConfig+0x24c>
 8002a24:	e018      	b.n	8002a58 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a26:	4b33      	ldr	r3, [pc, #204]	; (8002af4 <HAL_RCC_OscConfig+0x338>)
 8002a28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a2a:	4b32      	ldr	r3, [pc, #200]	; (8002af4 <HAL_RCC_OscConfig+0x338>)
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	438a      	bics	r2, r1
 8002a30:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a32:	f7fe fe6f 	bl	8001714 <HAL_GetTick>
 8002a36:	0003      	movs	r3, r0
 8002a38:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a3c:	f7fe fe6a 	bl	8001714 <HAL_GetTick>
 8002a40:	0002      	movs	r2, r0
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e236      	b.n	8002ebc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a4e:	4b29      	ldr	r3, [pc, #164]	; (8002af4 <HAL_RCC_OscConfig+0x338>)
 8002a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a52:	2202      	movs	r2, #2
 8002a54:	4013      	ands	r3, r2
 8002a56:	d1f1      	bne.n	8002a3c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2204      	movs	r2, #4
 8002a5e:	4013      	ands	r3, r2
 8002a60:	d100      	bne.n	8002a64 <HAL_RCC_OscConfig+0x2a8>
 8002a62:	e0b5      	b.n	8002bd0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a64:	201f      	movs	r0, #31
 8002a66:	183b      	adds	r3, r7, r0
 8002a68:	2200      	movs	r2, #0
 8002a6a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a6c:	4b21      	ldr	r3, [pc, #132]	; (8002af4 <HAL_RCC_OscConfig+0x338>)
 8002a6e:	69da      	ldr	r2, [r3, #28]
 8002a70:	2380      	movs	r3, #128	; 0x80
 8002a72:	055b      	lsls	r3, r3, #21
 8002a74:	4013      	ands	r3, r2
 8002a76:	d110      	bne.n	8002a9a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a78:	4b1e      	ldr	r3, [pc, #120]	; (8002af4 <HAL_RCC_OscConfig+0x338>)
 8002a7a:	69da      	ldr	r2, [r3, #28]
 8002a7c:	4b1d      	ldr	r3, [pc, #116]	; (8002af4 <HAL_RCC_OscConfig+0x338>)
 8002a7e:	2180      	movs	r1, #128	; 0x80
 8002a80:	0549      	lsls	r1, r1, #21
 8002a82:	430a      	orrs	r2, r1
 8002a84:	61da      	str	r2, [r3, #28]
 8002a86:	4b1b      	ldr	r3, [pc, #108]	; (8002af4 <HAL_RCC_OscConfig+0x338>)
 8002a88:	69da      	ldr	r2, [r3, #28]
 8002a8a:	2380      	movs	r3, #128	; 0x80
 8002a8c:	055b      	lsls	r3, r3, #21
 8002a8e:	4013      	ands	r3, r2
 8002a90:	60fb      	str	r3, [r7, #12]
 8002a92:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002a94:	183b      	adds	r3, r7, r0
 8002a96:	2201      	movs	r2, #1
 8002a98:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a9a:	4b19      	ldr	r3, [pc, #100]	; (8002b00 <HAL_RCC_OscConfig+0x344>)
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	2380      	movs	r3, #128	; 0x80
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	d11a      	bne.n	8002adc <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aa6:	4b16      	ldr	r3, [pc, #88]	; (8002b00 <HAL_RCC_OscConfig+0x344>)
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	4b15      	ldr	r3, [pc, #84]	; (8002b00 <HAL_RCC_OscConfig+0x344>)
 8002aac:	2180      	movs	r1, #128	; 0x80
 8002aae:	0049      	lsls	r1, r1, #1
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ab4:	f7fe fe2e 	bl	8001714 <HAL_GetTick>
 8002ab8:	0003      	movs	r3, r0
 8002aba:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002abc:	e008      	b.n	8002ad0 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002abe:	f7fe fe29 	bl	8001714 <HAL_GetTick>
 8002ac2:	0002      	movs	r2, r0
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b64      	cmp	r3, #100	; 0x64
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e1f5      	b.n	8002ebc <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad0:	4b0b      	ldr	r3, [pc, #44]	; (8002b00 <HAL_RCC_OscConfig+0x344>)
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	2380      	movs	r3, #128	; 0x80
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	4013      	ands	r3, r2
 8002ada:	d0f0      	beq.n	8002abe <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d10f      	bne.n	8002b04 <HAL_RCC_OscConfig+0x348>
 8002ae4:	4b03      	ldr	r3, [pc, #12]	; (8002af4 <HAL_RCC_OscConfig+0x338>)
 8002ae6:	6a1a      	ldr	r2, [r3, #32]
 8002ae8:	4b02      	ldr	r3, [pc, #8]	; (8002af4 <HAL_RCC_OscConfig+0x338>)
 8002aea:	2101      	movs	r1, #1
 8002aec:	430a      	orrs	r2, r1
 8002aee:	621a      	str	r2, [r3, #32]
 8002af0:	e036      	b.n	8002b60 <HAL_RCC_OscConfig+0x3a4>
 8002af2:	46c0      	nop			; (mov r8, r8)
 8002af4:	40021000 	.word	0x40021000
 8002af8:	fffeffff 	.word	0xfffeffff
 8002afc:	fffbffff 	.word	0xfffbffff
 8002b00:	40007000 	.word	0x40007000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d10c      	bne.n	8002b26 <HAL_RCC_OscConfig+0x36a>
 8002b0c:	4bca      	ldr	r3, [pc, #808]	; (8002e38 <HAL_RCC_OscConfig+0x67c>)
 8002b0e:	6a1a      	ldr	r2, [r3, #32]
 8002b10:	4bc9      	ldr	r3, [pc, #804]	; (8002e38 <HAL_RCC_OscConfig+0x67c>)
 8002b12:	2101      	movs	r1, #1
 8002b14:	438a      	bics	r2, r1
 8002b16:	621a      	str	r2, [r3, #32]
 8002b18:	4bc7      	ldr	r3, [pc, #796]	; (8002e38 <HAL_RCC_OscConfig+0x67c>)
 8002b1a:	6a1a      	ldr	r2, [r3, #32]
 8002b1c:	4bc6      	ldr	r3, [pc, #792]	; (8002e38 <HAL_RCC_OscConfig+0x67c>)
 8002b1e:	2104      	movs	r1, #4
 8002b20:	438a      	bics	r2, r1
 8002b22:	621a      	str	r2, [r3, #32]
 8002b24:	e01c      	b.n	8002b60 <HAL_RCC_OscConfig+0x3a4>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	2b05      	cmp	r3, #5
 8002b2c:	d10c      	bne.n	8002b48 <HAL_RCC_OscConfig+0x38c>
 8002b2e:	4bc2      	ldr	r3, [pc, #776]	; (8002e38 <HAL_RCC_OscConfig+0x67c>)
 8002b30:	6a1a      	ldr	r2, [r3, #32]
 8002b32:	4bc1      	ldr	r3, [pc, #772]	; (8002e38 <HAL_RCC_OscConfig+0x67c>)
 8002b34:	2104      	movs	r1, #4
 8002b36:	430a      	orrs	r2, r1
 8002b38:	621a      	str	r2, [r3, #32]
 8002b3a:	4bbf      	ldr	r3, [pc, #764]	; (8002e38 <HAL_RCC_OscConfig+0x67c>)
 8002b3c:	6a1a      	ldr	r2, [r3, #32]
 8002b3e:	4bbe      	ldr	r3, [pc, #760]	; (8002e38 <HAL_RCC_OscConfig+0x67c>)
 8002b40:	2101      	movs	r1, #1
 8002b42:	430a      	orrs	r2, r1
 8002b44:	621a      	str	r2, [r3, #32]
 8002b46:	e00b      	b.n	8002b60 <HAL_RCC_OscConfig+0x3a4>
 8002b48:	4bbb      	ldr	r3, [pc, #748]	; (8002e38 <HAL_RCC_OscConfig+0x67c>)
 8002b4a:	6a1a      	ldr	r2, [r3, #32]
 8002b4c:	4bba      	ldr	r3, [pc, #744]	; (8002e38 <HAL_RCC_OscConfig+0x67c>)
 8002b4e:	2101      	movs	r1, #1
 8002b50:	438a      	bics	r2, r1
 8002b52:	621a      	str	r2, [r3, #32]
 8002b54:	4bb8      	ldr	r3, [pc, #736]	; (8002e38 <HAL_RCC_OscConfig+0x67c>)
 8002b56:	6a1a      	ldr	r2, [r3, #32]
 8002b58:	4bb7      	ldr	r3, [pc, #732]	; (8002e38 <HAL_RCC_OscConfig+0x67c>)
 8002b5a:	2104      	movs	r1, #4
 8002b5c:	438a      	bics	r2, r1
 8002b5e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d014      	beq.n	8002b92 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b68:	f7fe fdd4 	bl	8001714 <HAL_GetTick>
 8002b6c:	0003      	movs	r3, r0
 8002b6e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b70:	e009      	b.n	8002b86 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b72:	f7fe fdcf 	bl	8001714 <HAL_GetTick>
 8002b76:	0002      	movs	r2, r0
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	4aaf      	ldr	r2, [pc, #700]	; (8002e3c <HAL_RCC_OscConfig+0x680>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e19a      	b.n	8002ebc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b86:	4bac      	ldr	r3, [pc, #688]	; (8002e38 <HAL_RCC_OscConfig+0x67c>)
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	2202      	movs	r2, #2
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	d0f0      	beq.n	8002b72 <HAL_RCC_OscConfig+0x3b6>
 8002b90:	e013      	b.n	8002bba <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b92:	f7fe fdbf 	bl	8001714 <HAL_GetTick>
 8002b96:	0003      	movs	r3, r0
 8002b98:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b9a:	e009      	b.n	8002bb0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b9c:	f7fe fdba 	bl	8001714 <HAL_GetTick>
 8002ba0:	0002      	movs	r2, r0
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	4aa5      	ldr	r2, [pc, #660]	; (8002e3c <HAL_RCC_OscConfig+0x680>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e185      	b.n	8002ebc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bb0:	4ba1      	ldr	r3, [pc, #644]	; (8002e38 <HAL_RCC_OscConfig+0x67c>)
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
 8002bb4:	2202      	movs	r2, #2
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	d1f0      	bne.n	8002b9c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002bba:	231f      	movs	r3, #31
 8002bbc:	18fb      	adds	r3, r7, r3
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d105      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bc4:	4b9c      	ldr	r3, [pc, #624]	; (8002e38 <HAL_RCC_OscConfig+0x67c>)
 8002bc6:	69da      	ldr	r2, [r3, #28]
 8002bc8:	4b9b      	ldr	r3, [pc, #620]	; (8002e38 <HAL_RCC_OscConfig+0x67c>)
 8002bca:	499d      	ldr	r1, [pc, #628]	; (8002e40 <HAL_RCC_OscConfig+0x684>)
 8002bcc:	400a      	ands	r2, r1
 8002bce:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2210      	movs	r2, #16
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	d063      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d12a      	bne.n	8002c38 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002be2:	4b95      	ldr	r3, [pc, #596]	; (8002e38 <HAL_RCC_OscConfig+0x67c>)
 8002be4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002be6:	4b94      	ldr	r3, [pc, #592]	; (8002e38 <HAL_RCC_OscConfig+0x67c>)
 8002be8:	2104      	movs	r1, #4
 8002bea:	430a      	orrs	r2, r1
 8002bec:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002bee:	4b92      	ldr	r3, [pc, #584]	; (8002e38 <HAL_RCC_OscConfig+0x67c>)
 8002bf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bf2:	4b91      	ldr	r3, [pc, #580]	; (8002e38 <HAL_RCC_OscConfig+0x67c>)
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bfa:	f7fe fd8b 	bl	8001714 <HAL_GetTick>
 8002bfe:	0003      	movs	r3, r0
 8002c00:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002c02:	e008      	b.n	8002c16 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002c04:	f7fe fd86 	bl	8001714 <HAL_GetTick>
 8002c08:	0002      	movs	r2, r0
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e152      	b.n	8002ebc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002c16:	4b88      	ldr	r3, [pc, #544]	; (8002e38 <HAL_RCC_OscConfig+0x67c>)
 8002c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	d0f1      	beq.n	8002c04 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002c20:	4b85      	ldr	r3, [pc, #532]	; (8002e38 <HAL_RCC_OscConfig+0x67c>)
 8002c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c24:	22f8      	movs	r2, #248	; 0xf8
 8002c26:	4393      	bics	r3, r2
 8002c28:	0019      	movs	r1, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	00da      	lsls	r2, r3, #3
 8002c30:	4b81      	ldr	r3, [pc, #516]	; (8002e38 <HAL_RCC_OscConfig+0x67c>)
 8002c32:	430a      	orrs	r2, r1
 8002c34:	635a      	str	r2, [r3, #52]	; 0x34
 8002c36:	e034      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	3305      	adds	r3, #5
 8002c3e:	d111      	bne.n	8002c64 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002c40:	4b7d      	ldr	r3, [pc, #500]	; (8002e38 <HAL_RCC_OscConfig+0x67c>)
 8002c42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c44:	4b7c      	ldr	r3, [pc, #496]	; (8002e38 <HAL_RCC_OscConfig+0x67c>)
 8002c46:	2104      	movs	r1, #4
 8002c48:	438a      	bics	r2, r1
 8002c4a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002c4c:	4b7a      	ldr	r3, [pc, #488]	; (8002e38 <HAL_RCC_OscConfig+0x67c>)
 8002c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c50:	22f8      	movs	r2, #248	; 0xf8
 8002c52:	4393      	bics	r3, r2
 8002c54:	0019      	movs	r1, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	00da      	lsls	r2, r3, #3
 8002c5c:	4b76      	ldr	r3, [pc, #472]	; (8002e38 <HAL_RCC_OscConfig+0x67c>)
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	635a      	str	r2, [r3, #52]	; 0x34
 8002c62:	e01e      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002c64:	4b74      	ldr	r3, [pc, #464]	; (8002e38 <HAL_RCC_OscConfig+0x67c>)
 8002c66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c68:	4b73      	ldr	r3, [pc, #460]	; (8002e38 <HAL_RCC_OscConfig+0x67c>)
 8002c6a:	2104      	movs	r1, #4
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002c70:	4b71      	ldr	r3, [pc, #452]	; (8002e38 <HAL_RCC_OscConfig+0x67c>)
 8002c72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c74:	4b70      	ldr	r3, [pc, #448]	; (8002e38 <HAL_RCC_OscConfig+0x67c>)
 8002c76:	2101      	movs	r1, #1
 8002c78:	438a      	bics	r2, r1
 8002c7a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c7c:	f7fe fd4a 	bl	8001714 <HAL_GetTick>
 8002c80:	0003      	movs	r3, r0
 8002c82:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002c84:	e008      	b.n	8002c98 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002c86:	f7fe fd45 	bl	8001714 <HAL_GetTick>
 8002c8a:	0002      	movs	r2, r0
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d901      	bls.n	8002c98 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e111      	b.n	8002ebc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002c98:	4b67      	ldr	r3, [pc, #412]	; (8002e38 <HAL_RCC_OscConfig+0x67c>)
 8002c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c9c:	2202      	movs	r2, #2
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	d1f1      	bne.n	8002c86 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2220      	movs	r2, #32
 8002ca8:	4013      	ands	r3, r2
 8002caa:	d05c      	beq.n	8002d66 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002cac:	4b62      	ldr	r3, [pc, #392]	; (8002e38 <HAL_RCC_OscConfig+0x67c>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	220c      	movs	r2, #12
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	2b0c      	cmp	r3, #12
 8002cb6:	d00e      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002cb8:	4b5f      	ldr	r3, [pc, #380]	; (8002e38 <HAL_RCC_OscConfig+0x67c>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	220c      	movs	r2, #12
 8002cbe:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002cc0:	2b08      	cmp	r3, #8
 8002cc2:	d114      	bne.n	8002cee <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002cc4:	4b5c      	ldr	r3, [pc, #368]	; (8002e38 <HAL_RCC_OscConfig+0x67c>)
 8002cc6:	685a      	ldr	r2, [r3, #4]
 8002cc8:	23c0      	movs	r3, #192	; 0xc0
 8002cca:	025b      	lsls	r3, r3, #9
 8002ccc:	401a      	ands	r2, r3
 8002cce:	23c0      	movs	r3, #192	; 0xc0
 8002cd0:	025b      	lsls	r3, r3, #9
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d10b      	bne.n	8002cee <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002cd6:	4b58      	ldr	r3, [pc, #352]	; (8002e38 <HAL_RCC_OscConfig+0x67c>)
 8002cd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cda:	2380      	movs	r3, #128	; 0x80
 8002cdc:	029b      	lsls	r3, r3, #10
 8002cde:	4013      	ands	r3, r2
 8002ce0:	d040      	beq.n	8002d64 <HAL_RCC_OscConfig+0x5a8>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d03c      	beq.n	8002d64 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e0e6      	b.n	8002ebc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d01b      	beq.n	8002d2e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002cf6:	4b50      	ldr	r3, [pc, #320]	; (8002e38 <HAL_RCC_OscConfig+0x67c>)
 8002cf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cfa:	4b4f      	ldr	r3, [pc, #316]	; (8002e38 <HAL_RCC_OscConfig+0x67c>)
 8002cfc:	2180      	movs	r1, #128	; 0x80
 8002cfe:	0249      	lsls	r1, r1, #9
 8002d00:	430a      	orrs	r2, r1
 8002d02:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d04:	f7fe fd06 	bl	8001714 <HAL_GetTick>
 8002d08:	0003      	movs	r3, r0
 8002d0a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002d0c:	e008      	b.n	8002d20 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d0e:	f7fe fd01 	bl	8001714 <HAL_GetTick>
 8002d12:	0002      	movs	r2, r0
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e0cd      	b.n	8002ebc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002d20:	4b45      	ldr	r3, [pc, #276]	; (8002e38 <HAL_RCC_OscConfig+0x67c>)
 8002d22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d24:	2380      	movs	r3, #128	; 0x80
 8002d26:	029b      	lsls	r3, r3, #10
 8002d28:	4013      	ands	r3, r2
 8002d2a:	d0f0      	beq.n	8002d0e <HAL_RCC_OscConfig+0x552>
 8002d2c:	e01b      	b.n	8002d66 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002d2e:	4b42      	ldr	r3, [pc, #264]	; (8002e38 <HAL_RCC_OscConfig+0x67c>)
 8002d30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d32:	4b41      	ldr	r3, [pc, #260]	; (8002e38 <HAL_RCC_OscConfig+0x67c>)
 8002d34:	4943      	ldr	r1, [pc, #268]	; (8002e44 <HAL_RCC_OscConfig+0x688>)
 8002d36:	400a      	ands	r2, r1
 8002d38:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d3a:	f7fe fceb 	bl	8001714 <HAL_GetTick>
 8002d3e:	0003      	movs	r3, r0
 8002d40:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002d42:	e008      	b.n	8002d56 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d44:	f7fe fce6 	bl	8001714 <HAL_GetTick>
 8002d48:	0002      	movs	r2, r0
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e0b2      	b.n	8002ebc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002d56:	4b38      	ldr	r3, [pc, #224]	; (8002e38 <HAL_RCC_OscConfig+0x67c>)
 8002d58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d5a:	2380      	movs	r3, #128	; 0x80
 8002d5c:	029b      	lsls	r3, r3, #10
 8002d5e:	4013      	ands	r3, r2
 8002d60:	d1f0      	bne.n	8002d44 <HAL_RCC_OscConfig+0x588>
 8002d62:	e000      	b.n	8002d66 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002d64:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d100      	bne.n	8002d70 <HAL_RCC_OscConfig+0x5b4>
 8002d6e:	e0a4      	b.n	8002eba <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d70:	4b31      	ldr	r3, [pc, #196]	; (8002e38 <HAL_RCC_OscConfig+0x67c>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	220c      	movs	r2, #12
 8002d76:	4013      	ands	r3, r2
 8002d78:	2b08      	cmp	r3, #8
 8002d7a:	d100      	bne.n	8002d7e <HAL_RCC_OscConfig+0x5c2>
 8002d7c:	e078      	b.n	8002e70 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d14c      	bne.n	8002e20 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d86:	4b2c      	ldr	r3, [pc, #176]	; (8002e38 <HAL_RCC_OscConfig+0x67c>)
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	4b2b      	ldr	r3, [pc, #172]	; (8002e38 <HAL_RCC_OscConfig+0x67c>)
 8002d8c:	492e      	ldr	r1, [pc, #184]	; (8002e48 <HAL_RCC_OscConfig+0x68c>)
 8002d8e:	400a      	ands	r2, r1
 8002d90:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d92:	f7fe fcbf 	bl	8001714 <HAL_GetTick>
 8002d96:	0003      	movs	r3, r0
 8002d98:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d9c:	f7fe fcba 	bl	8001714 <HAL_GetTick>
 8002da0:	0002      	movs	r2, r0
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e086      	b.n	8002ebc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dae:	4b22      	ldr	r3, [pc, #136]	; (8002e38 <HAL_RCC_OscConfig+0x67c>)
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	2380      	movs	r3, #128	; 0x80
 8002db4:	049b      	lsls	r3, r3, #18
 8002db6:	4013      	ands	r3, r2
 8002db8:	d1f0      	bne.n	8002d9c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dba:	4b1f      	ldr	r3, [pc, #124]	; (8002e38 <HAL_RCC_OscConfig+0x67c>)
 8002dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbe:	220f      	movs	r2, #15
 8002dc0:	4393      	bics	r3, r2
 8002dc2:	0019      	movs	r1, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dc8:	4b1b      	ldr	r3, [pc, #108]	; (8002e38 <HAL_RCC_OscConfig+0x67c>)
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	62da      	str	r2, [r3, #44]	; 0x2c
 8002dce:	4b1a      	ldr	r3, [pc, #104]	; (8002e38 <HAL_RCC_OscConfig+0x67c>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	4a1e      	ldr	r2, [pc, #120]	; (8002e4c <HAL_RCC_OscConfig+0x690>)
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	0019      	movs	r1, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de0:	431a      	orrs	r2, r3
 8002de2:	4b15      	ldr	r3, [pc, #84]	; (8002e38 <HAL_RCC_OscConfig+0x67c>)
 8002de4:	430a      	orrs	r2, r1
 8002de6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002de8:	4b13      	ldr	r3, [pc, #76]	; (8002e38 <HAL_RCC_OscConfig+0x67c>)
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	4b12      	ldr	r3, [pc, #72]	; (8002e38 <HAL_RCC_OscConfig+0x67c>)
 8002dee:	2180      	movs	r1, #128	; 0x80
 8002df0:	0449      	lsls	r1, r1, #17
 8002df2:	430a      	orrs	r2, r1
 8002df4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df6:	f7fe fc8d 	bl	8001714 <HAL_GetTick>
 8002dfa:	0003      	movs	r3, r0
 8002dfc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dfe:	e008      	b.n	8002e12 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e00:	f7fe fc88 	bl	8001714 <HAL_GetTick>
 8002e04:	0002      	movs	r2, r0
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e054      	b.n	8002ebc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e12:	4b09      	ldr	r3, [pc, #36]	; (8002e38 <HAL_RCC_OscConfig+0x67c>)
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	2380      	movs	r3, #128	; 0x80
 8002e18:	049b      	lsls	r3, r3, #18
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	d0f0      	beq.n	8002e00 <HAL_RCC_OscConfig+0x644>
 8002e1e:	e04c      	b.n	8002eba <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e20:	4b05      	ldr	r3, [pc, #20]	; (8002e38 <HAL_RCC_OscConfig+0x67c>)
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	4b04      	ldr	r3, [pc, #16]	; (8002e38 <HAL_RCC_OscConfig+0x67c>)
 8002e26:	4908      	ldr	r1, [pc, #32]	; (8002e48 <HAL_RCC_OscConfig+0x68c>)
 8002e28:	400a      	ands	r2, r1
 8002e2a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2c:	f7fe fc72 	bl	8001714 <HAL_GetTick>
 8002e30:	0003      	movs	r3, r0
 8002e32:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e34:	e015      	b.n	8002e62 <HAL_RCC_OscConfig+0x6a6>
 8002e36:	46c0      	nop			; (mov r8, r8)
 8002e38:	40021000 	.word	0x40021000
 8002e3c:	00001388 	.word	0x00001388
 8002e40:	efffffff 	.word	0xefffffff
 8002e44:	fffeffff 	.word	0xfffeffff
 8002e48:	feffffff 	.word	0xfeffffff
 8002e4c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e50:	f7fe fc60 	bl	8001714 <HAL_GetTick>
 8002e54:	0002      	movs	r2, r0
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e02c      	b.n	8002ebc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e62:	4b18      	ldr	r3, [pc, #96]	; (8002ec4 <HAL_RCC_OscConfig+0x708>)
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	2380      	movs	r3, #128	; 0x80
 8002e68:	049b      	lsls	r3, r3, #18
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	d1f0      	bne.n	8002e50 <HAL_RCC_OscConfig+0x694>
 8002e6e:	e024      	b.n	8002eba <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d101      	bne.n	8002e7c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e01f      	b.n	8002ebc <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002e7c:	4b11      	ldr	r3, [pc, #68]	; (8002ec4 <HAL_RCC_OscConfig+0x708>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002e82:	4b10      	ldr	r3, [pc, #64]	; (8002ec4 <HAL_RCC_OscConfig+0x708>)
 8002e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e86:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	23c0      	movs	r3, #192	; 0xc0
 8002e8c:	025b      	lsls	r3, r3, #9
 8002e8e:	401a      	ands	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d10e      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	220f      	movs	r2, #15
 8002e9c:	401a      	ands	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d107      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	23f0      	movs	r3, #240	; 0xf0
 8002eaa:	039b      	lsls	r3, r3, #14
 8002eac:	401a      	ands	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d001      	beq.n	8002eba <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e000      	b.n	8002ebc <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	0018      	movs	r0, r3
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	b008      	add	sp, #32
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	40021000 	.word	0x40021000

08002ec8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e0bf      	b.n	800305c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002edc:	4b61      	ldr	r3, [pc, #388]	; (8003064 <HAL_RCC_ClockConfig+0x19c>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d911      	bls.n	8002f0e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eea:	4b5e      	ldr	r3, [pc, #376]	; (8003064 <HAL_RCC_ClockConfig+0x19c>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	4393      	bics	r3, r2
 8002ef2:	0019      	movs	r1, r3
 8002ef4:	4b5b      	ldr	r3, [pc, #364]	; (8003064 <HAL_RCC_ClockConfig+0x19c>)
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002efc:	4b59      	ldr	r3, [pc, #356]	; (8003064 <HAL_RCC_ClockConfig+0x19c>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2201      	movs	r2, #1
 8002f02:	4013      	ands	r3, r2
 8002f04:	683a      	ldr	r2, [r7, #0]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d001      	beq.n	8002f0e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e0a6      	b.n	800305c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2202      	movs	r2, #2
 8002f14:	4013      	ands	r3, r2
 8002f16:	d015      	beq.n	8002f44 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2204      	movs	r2, #4
 8002f1e:	4013      	ands	r3, r2
 8002f20:	d006      	beq.n	8002f30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002f22:	4b51      	ldr	r3, [pc, #324]	; (8003068 <HAL_RCC_ClockConfig+0x1a0>)
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	4b50      	ldr	r3, [pc, #320]	; (8003068 <HAL_RCC_ClockConfig+0x1a0>)
 8002f28:	21e0      	movs	r1, #224	; 0xe0
 8002f2a:	00c9      	lsls	r1, r1, #3
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f30:	4b4d      	ldr	r3, [pc, #308]	; (8003068 <HAL_RCC_ClockConfig+0x1a0>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	22f0      	movs	r2, #240	; 0xf0
 8002f36:	4393      	bics	r3, r2
 8002f38:	0019      	movs	r1, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	689a      	ldr	r2, [r3, #8]
 8002f3e:	4b4a      	ldr	r3, [pc, #296]	; (8003068 <HAL_RCC_ClockConfig+0x1a0>)
 8002f40:	430a      	orrs	r2, r1
 8002f42:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	d04c      	beq.n	8002fe8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d107      	bne.n	8002f66 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f56:	4b44      	ldr	r3, [pc, #272]	; (8003068 <HAL_RCC_ClockConfig+0x1a0>)
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	2380      	movs	r3, #128	; 0x80
 8002f5c:	029b      	lsls	r3, r3, #10
 8002f5e:	4013      	ands	r3, r2
 8002f60:	d120      	bne.n	8002fa4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e07a      	b.n	800305c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d107      	bne.n	8002f7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f6e:	4b3e      	ldr	r3, [pc, #248]	; (8003068 <HAL_RCC_ClockConfig+0x1a0>)
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	2380      	movs	r3, #128	; 0x80
 8002f74:	049b      	lsls	r3, r3, #18
 8002f76:	4013      	ands	r3, r2
 8002f78:	d114      	bne.n	8002fa4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e06e      	b.n	800305c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	2b03      	cmp	r3, #3
 8002f84:	d107      	bne.n	8002f96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002f86:	4b38      	ldr	r3, [pc, #224]	; (8003068 <HAL_RCC_ClockConfig+0x1a0>)
 8002f88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f8a:	2380      	movs	r3, #128	; 0x80
 8002f8c:	029b      	lsls	r3, r3, #10
 8002f8e:	4013      	ands	r3, r2
 8002f90:	d108      	bne.n	8002fa4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e062      	b.n	800305c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f96:	4b34      	ldr	r3, [pc, #208]	; (8003068 <HAL_RCC_ClockConfig+0x1a0>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2202      	movs	r2, #2
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	d101      	bne.n	8002fa4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e05b      	b.n	800305c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fa4:	4b30      	ldr	r3, [pc, #192]	; (8003068 <HAL_RCC_ClockConfig+0x1a0>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	2203      	movs	r2, #3
 8002faa:	4393      	bics	r3, r2
 8002fac:	0019      	movs	r1, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685a      	ldr	r2, [r3, #4]
 8002fb2:	4b2d      	ldr	r3, [pc, #180]	; (8003068 <HAL_RCC_ClockConfig+0x1a0>)
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fb8:	f7fe fbac 	bl	8001714 <HAL_GetTick>
 8002fbc:	0003      	movs	r3, r0
 8002fbe:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fc0:	e009      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fc2:	f7fe fba7 	bl	8001714 <HAL_GetTick>
 8002fc6:	0002      	movs	r2, r0
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	4a27      	ldr	r2, [pc, #156]	; (800306c <HAL_RCC_ClockConfig+0x1a4>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e042      	b.n	800305c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fd6:	4b24      	ldr	r3, [pc, #144]	; (8003068 <HAL_RCC_ClockConfig+0x1a0>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	220c      	movs	r2, #12
 8002fdc:	401a      	ands	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d1ec      	bne.n	8002fc2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fe8:	4b1e      	ldr	r3, [pc, #120]	; (8003064 <HAL_RCC_ClockConfig+0x19c>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2201      	movs	r2, #1
 8002fee:	4013      	ands	r3, r2
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d211      	bcs.n	800301a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ff6:	4b1b      	ldr	r3, [pc, #108]	; (8003064 <HAL_RCC_ClockConfig+0x19c>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	4393      	bics	r3, r2
 8002ffe:	0019      	movs	r1, r3
 8003000:	4b18      	ldr	r3, [pc, #96]	; (8003064 <HAL_RCC_ClockConfig+0x19c>)
 8003002:	683a      	ldr	r2, [r7, #0]
 8003004:	430a      	orrs	r2, r1
 8003006:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003008:	4b16      	ldr	r3, [pc, #88]	; (8003064 <HAL_RCC_ClockConfig+0x19c>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2201      	movs	r2, #1
 800300e:	4013      	ands	r3, r2
 8003010:	683a      	ldr	r2, [r7, #0]
 8003012:	429a      	cmp	r2, r3
 8003014:	d001      	beq.n	800301a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e020      	b.n	800305c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2204      	movs	r2, #4
 8003020:	4013      	ands	r3, r2
 8003022:	d009      	beq.n	8003038 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003024:	4b10      	ldr	r3, [pc, #64]	; (8003068 <HAL_RCC_ClockConfig+0x1a0>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	4a11      	ldr	r2, [pc, #68]	; (8003070 <HAL_RCC_ClockConfig+0x1a8>)
 800302a:	4013      	ands	r3, r2
 800302c:	0019      	movs	r1, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68da      	ldr	r2, [r3, #12]
 8003032:	4b0d      	ldr	r3, [pc, #52]	; (8003068 <HAL_RCC_ClockConfig+0x1a0>)
 8003034:	430a      	orrs	r2, r1
 8003036:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003038:	f000 f820 	bl	800307c <HAL_RCC_GetSysClockFreq>
 800303c:	0001      	movs	r1, r0
 800303e:	4b0a      	ldr	r3, [pc, #40]	; (8003068 <HAL_RCC_ClockConfig+0x1a0>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	091b      	lsrs	r3, r3, #4
 8003044:	220f      	movs	r2, #15
 8003046:	4013      	ands	r3, r2
 8003048:	4a0a      	ldr	r2, [pc, #40]	; (8003074 <HAL_RCC_ClockConfig+0x1ac>)
 800304a:	5cd3      	ldrb	r3, [r2, r3]
 800304c:	000a      	movs	r2, r1
 800304e:	40da      	lsrs	r2, r3
 8003050:	4b09      	ldr	r3, [pc, #36]	; (8003078 <HAL_RCC_ClockConfig+0x1b0>)
 8003052:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003054:	2000      	movs	r0, #0
 8003056:	f7fe fb17 	bl	8001688 <HAL_InitTick>
  
  return HAL_OK;
 800305a:	2300      	movs	r3, #0
}
 800305c:	0018      	movs	r0, r3
 800305e:	46bd      	mov	sp, r7
 8003060:	b004      	add	sp, #16
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40022000 	.word	0x40022000
 8003068:	40021000 	.word	0x40021000
 800306c:	00001388 	.word	0x00001388
 8003070:	fffff8ff 	.word	0xfffff8ff
 8003074:	080059e0 	.word	0x080059e0
 8003078:	20000000 	.word	0x20000000

0800307c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003082:	2300      	movs	r3, #0
 8003084:	60fb      	str	r3, [r7, #12]
 8003086:	2300      	movs	r3, #0
 8003088:	60bb      	str	r3, [r7, #8]
 800308a:	2300      	movs	r3, #0
 800308c:	617b      	str	r3, [r7, #20]
 800308e:	2300      	movs	r3, #0
 8003090:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003092:	2300      	movs	r3, #0
 8003094:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003096:	4b2d      	ldr	r3, [pc, #180]	; (800314c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	220c      	movs	r2, #12
 80030a0:	4013      	ands	r3, r2
 80030a2:	2b0c      	cmp	r3, #12
 80030a4:	d046      	beq.n	8003134 <HAL_RCC_GetSysClockFreq+0xb8>
 80030a6:	d848      	bhi.n	800313a <HAL_RCC_GetSysClockFreq+0xbe>
 80030a8:	2b04      	cmp	r3, #4
 80030aa:	d002      	beq.n	80030b2 <HAL_RCC_GetSysClockFreq+0x36>
 80030ac:	2b08      	cmp	r3, #8
 80030ae:	d003      	beq.n	80030b8 <HAL_RCC_GetSysClockFreq+0x3c>
 80030b0:	e043      	b.n	800313a <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030b2:	4b27      	ldr	r3, [pc, #156]	; (8003150 <HAL_RCC_GetSysClockFreq+0xd4>)
 80030b4:	613b      	str	r3, [r7, #16]
      break;
 80030b6:	e043      	b.n	8003140 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	0c9b      	lsrs	r3, r3, #18
 80030bc:	220f      	movs	r2, #15
 80030be:	4013      	ands	r3, r2
 80030c0:	4a24      	ldr	r2, [pc, #144]	; (8003154 <HAL_RCC_GetSysClockFreq+0xd8>)
 80030c2:	5cd3      	ldrb	r3, [r2, r3]
 80030c4:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80030c6:	4b21      	ldr	r3, [pc, #132]	; (800314c <HAL_RCC_GetSysClockFreq+0xd0>)
 80030c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ca:	220f      	movs	r2, #15
 80030cc:	4013      	ands	r3, r2
 80030ce:	4a22      	ldr	r2, [pc, #136]	; (8003158 <HAL_RCC_GetSysClockFreq+0xdc>)
 80030d0:	5cd3      	ldrb	r3, [r2, r3]
 80030d2:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	23c0      	movs	r3, #192	; 0xc0
 80030d8:	025b      	lsls	r3, r3, #9
 80030da:	401a      	ands	r2, r3
 80030dc:	2380      	movs	r3, #128	; 0x80
 80030de:	025b      	lsls	r3, r3, #9
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d109      	bne.n	80030f8 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80030e4:	68b9      	ldr	r1, [r7, #8]
 80030e6:	481a      	ldr	r0, [pc, #104]	; (8003150 <HAL_RCC_GetSysClockFreq+0xd4>)
 80030e8:	f7fd f80e 	bl	8000108 <__udivsi3>
 80030ec:	0003      	movs	r3, r0
 80030ee:	001a      	movs	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4353      	muls	r3, r2
 80030f4:	617b      	str	r3, [r7, #20]
 80030f6:	e01a      	b.n	800312e <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	23c0      	movs	r3, #192	; 0xc0
 80030fc:	025b      	lsls	r3, r3, #9
 80030fe:	401a      	ands	r2, r3
 8003100:	23c0      	movs	r3, #192	; 0xc0
 8003102:	025b      	lsls	r3, r3, #9
 8003104:	429a      	cmp	r2, r3
 8003106:	d109      	bne.n	800311c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003108:	68b9      	ldr	r1, [r7, #8]
 800310a:	4814      	ldr	r0, [pc, #80]	; (800315c <HAL_RCC_GetSysClockFreq+0xe0>)
 800310c:	f7fc fffc 	bl	8000108 <__udivsi3>
 8003110:	0003      	movs	r3, r0
 8003112:	001a      	movs	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4353      	muls	r3, r2
 8003118:	617b      	str	r3, [r7, #20]
 800311a:	e008      	b.n	800312e <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800311c:	68b9      	ldr	r1, [r7, #8]
 800311e:	480c      	ldr	r0, [pc, #48]	; (8003150 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003120:	f7fc fff2 	bl	8000108 <__udivsi3>
 8003124:	0003      	movs	r3, r0
 8003126:	001a      	movs	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4353      	muls	r3, r2
 800312c:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	613b      	str	r3, [r7, #16]
      break;
 8003132:	e005      	b.n	8003140 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003134:	4b09      	ldr	r3, [pc, #36]	; (800315c <HAL_RCC_GetSysClockFreq+0xe0>)
 8003136:	613b      	str	r3, [r7, #16]
      break;
 8003138:	e002      	b.n	8003140 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800313a:	4b05      	ldr	r3, [pc, #20]	; (8003150 <HAL_RCC_GetSysClockFreq+0xd4>)
 800313c:	613b      	str	r3, [r7, #16]
      break;
 800313e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003140:	693b      	ldr	r3, [r7, #16]
}
 8003142:	0018      	movs	r0, r3
 8003144:	46bd      	mov	sp, r7
 8003146:	b006      	add	sp, #24
 8003148:	bd80      	pop	{r7, pc}
 800314a:	46c0      	nop			; (mov r8, r8)
 800314c:	40021000 	.word	0x40021000
 8003150:	007a1200 	.word	0x007a1200
 8003154:	080059f8 	.word	0x080059f8
 8003158:	08005a08 	.word	0x08005a08
 800315c:	02dc6c00 	.word	0x02dc6c00

08003160 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003164:	4b02      	ldr	r3, [pc, #8]	; (8003170 <HAL_RCC_GetHCLKFreq+0x10>)
 8003166:	681b      	ldr	r3, [r3, #0]
}
 8003168:	0018      	movs	r0, r3
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	46c0      	nop			; (mov r8, r8)
 8003170:	20000000 	.word	0x20000000

08003174 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003178:	f7ff fff2 	bl	8003160 <HAL_RCC_GetHCLKFreq>
 800317c:	0001      	movs	r1, r0
 800317e:	4b06      	ldr	r3, [pc, #24]	; (8003198 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	0a1b      	lsrs	r3, r3, #8
 8003184:	2207      	movs	r2, #7
 8003186:	4013      	ands	r3, r2
 8003188:	4a04      	ldr	r2, [pc, #16]	; (800319c <HAL_RCC_GetPCLK1Freq+0x28>)
 800318a:	5cd3      	ldrb	r3, [r2, r3]
 800318c:	40d9      	lsrs	r1, r3
 800318e:	000b      	movs	r3, r1
}    
 8003190:	0018      	movs	r0, r3
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	46c0      	nop			; (mov r8, r8)
 8003198:	40021000 	.word	0x40021000
 800319c:	080059f0 	.word	0x080059f0

080031a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031a8:	2300      	movs	r3, #0
 80031aa:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	2380      	movs	r3, #128	; 0x80
 80031b6:	025b      	lsls	r3, r3, #9
 80031b8:	4013      	ands	r3, r2
 80031ba:	d100      	bne.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80031bc:	e08e      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80031be:	2017      	movs	r0, #23
 80031c0:	183b      	adds	r3, r7, r0
 80031c2:	2200      	movs	r2, #0
 80031c4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031c6:	4b67      	ldr	r3, [pc, #412]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80031c8:	69da      	ldr	r2, [r3, #28]
 80031ca:	2380      	movs	r3, #128	; 0x80
 80031cc:	055b      	lsls	r3, r3, #21
 80031ce:	4013      	ands	r3, r2
 80031d0:	d110      	bne.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80031d2:	4b64      	ldr	r3, [pc, #400]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80031d4:	69da      	ldr	r2, [r3, #28]
 80031d6:	4b63      	ldr	r3, [pc, #396]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80031d8:	2180      	movs	r1, #128	; 0x80
 80031da:	0549      	lsls	r1, r1, #21
 80031dc:	430a      	orrs	r2, r1
 80031de:	61da      	str	r2, [r3, #28]
 80031e0:	4b60      	ldr	r3, [pc, #384]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80031e2:	69da      	ldr	r2, [r3, #28]
 80031e4:	2380      	movs	r3, #128	; 0x80
 80031e6:	055b      	lsls	r3, r3, #21
 80031e8:	4013      	ands	r3, r2
 80031ea:	60bb      	str	r3, [r7, #8]
 80031ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031ee:	183b      	adds	r3, r7, r0
 80031f0:	2201      	movs	r2, #1
 80031f2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f4:	4b5c      	ldr	r3, [pc, #368]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	2380      	movs	r3, #128	; 0x80
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	4013      	ands	r3, r2
 80031fe:	d11a      	bne.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003200:	4b59      	ldr	r3, [pc, #356]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	4b58      	ldr	r3, [pc, #352]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003206:	2180      	movs	r1, #128	; 0x80
 8003208:	0049      	lsls	r1, r1, #1
 800320a:	430a      	orrs	r2, r1
 800320c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800320e:	f7fe fa81 	bl	8001714 <HAL_GetTick>
 8003212:	0003      	movs	r3, r0
 8003214:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003216:	e008      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003218:	f7fe fa7c 	bl	8001714 <HAL_GetTick>
 800321c:	0002      	movs	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b64      	cmp	r3, #100	; 0x64
 8003224:	d901      	bls.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e097      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800322a:	4b4f      	ldr	r3, [pc, #316]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	2380      	movs	r3, #128	; 0x80
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	4013      	ands	r3, r2
 8003234:	d0f0      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003236:	4b4b      	ldr	r3, [pc, #300]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003238:	6a1a      	ldr	r2, [r3, #32]
 800323a:	23c0      	movs	r3, #192	; 0xc0
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	4013      	ands	r3, r2
 8003240:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d034      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	23c0      	movs	r3, #192	; 0xc0
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4013      	ands	r3, r2
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	429a      	cmp	r2, r3
 8003256:	d02c      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003258:	4b42      	ldr	r3, [pc, #264]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	4a43      	ldr	r2, [pc, #268]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800325e:	4013      	ands	r3, r2
 8003260:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003262:	4b40      	ldr	r3, [pc, #256]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003264:	6a1a      	ldr	r2, [r3, #32]
 8003266:	4b3f      	ldr	r3, [pc, #252]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003268:	2180      	movs	r1, #128	; 0x80
 800326a:	0249      	lsls	r1, r1, #9
 800326c:	430a      	orrs	r2, r1
 800326e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003270:	4b3c      	ldr	r3, [pc, #240]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003272:	6a1a      	ldr	r2, [r3, #32]
 8003274:	4b3b      	ldr	r3, [pc, #236]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003276:	493e      	ldr	r1, [pc, #248]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003278:	400a      	ands	r2, r1
 800327a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800327c:	4b39      	ldr	r3, [pc, #228]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2201      	movs	r2, #1
 8003286:	4013      	ands	r3, r2
 8003288:	d013      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800328a:	f7fe fa43 	bl	8001714 <HAL_GetTick>
 800328e:	0003      	movs	r3, r0
 8003290:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003292:	e009      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003294:	f7fe fa3e 	bl	8001714 <HAL_GetTick>
 8003298:	0002      	movs	r2, r0
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	4a35      	ldr	r2, [pc, #212]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d901      	bls.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e058      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032a8:	4b2e      	ldr	r3, [pc, #184]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80032aa:	6a1b      	ldr	r3, [r3, #32]
 80032ac:	2202      	movs	r2, #2
 80032ae:	4013      	ands	r3, r2
 80032b0:	d0f0      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032b2:	4b2c      	ldr	r3, [pc, #176]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	4a2d      	ldr	r2, [pc, #180]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80032b8:	4013      	ands	r3, r2
 80032ba:	0019      	movs	r1, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685a      	ldr	r2, [r3, #4]
 80032c0:	4b28      	ldr	r3, [pc, #160]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80032c2:	430a      	orrs	r2, r1
 80032c4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80032c6:	2317      	movs	r3, #23
 80032c8:	18fb      	adds	r3, r7, r3
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d105      	bne.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032d0:	4b24      	ldr	r3, [pc, #144]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80032d2:	69da      	ldr	r2, [r3, #28]
 80032d4:	4b23      	ldr	r3, [pc, #140]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80032d6:	4928      	ldr	r1, [pc, #160]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80032d8:	400a      	ands	r2, r1
 80032da:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2201      	movs	r2, #1
 80032e2:	4013      	ands	r3, r2
 80032e4:	d009      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032e6:	4b1f      	ldr	r3, [pc, #124]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80032e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ea:	2203      	movs	r2, #3
 80032ec:	4393      	bics	r3, r2
 80032ee:	0019      	movs	r1, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689a      	ldr	r2, [r3, #8]
 80032f4:	4b1b      	ldr	r3, [pc, #108]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80032f6:	430a      	orrs	r2, r1
 80032f8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2220      	movs	r2, #32
 8003300:	4013      	ands	r3, r2
 8003302:	d009      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003304:	4b17      	ldr	r3, [pc, #92]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003308:	2210      	movs	r2, #16
 800330a:	4393      	bics	r3, r2
 800330c:	0019      	movs	r1, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68da      	ldr	r2, [r3, #12]
 8003312:	4b14      	ldr	r3, [pc, #80]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003314:	430a      	orrs	r2, r1
 8003316:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	2380      	movs	r3, #128	; 0x80
 800331e:	029b      	lsls	r3, r3, #10
 8003320:	4013      	ands	r3, r2
 8003322:	d009      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003324:	4b0f      	ldr	r3, [pc, #60]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003328:	2280      	movs	r2, #128	; 0x80
 800332a:	4393      	bics	r3, r2
 800332c:	0019      	movs	r1, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	695a      	ldr	r2, [r3, #20]
 8003332:	4b0c      	ldr	r3, [pc, #48]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003334:	430a      	orrs	r2, r1
 8003336:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	2380      	movs	r3, #128	; 0x80
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	4013      	ands	r3, r2
 8003342:	d009      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003344:	4b07      	ldr	r3, [pc, #28]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003348:	2240      	movs	r2, #64	; 0x40
 800334a:	4393      	bics	r3, r2
 800334c:	0019      	movs	r1, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	691a      	ldr	r2, [r3, #16]
 8003352:	4b04      	ldr	r3, [pc, #16]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003354:	430a      	orrs	r2, r1
 8003356:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	0018      	movs	r0, r3
 800335c:	46bd      	mov	sp, r7
 800335e:	b006      	add	sp, #24
 8003360:	bd80      	pop	{r7, pc}
 8003362:	46c0      	nop			; (mov r8, r8)
 8003364:	40021000 	.word	0x40021000
 8003368:	40007000 	.word	0x40007000
 800336c:	fffffcff 	.word	0xfffffcff
 8003370:	fffeffff 	.word	0xfffeffff
 8003374:	00001388 	.word	0x00001388
 8003378:	efffffff 	.word	0xefffffff

0800337c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e042      	b.n	8003414 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	223d      	movs	r2, #61	; 0x3d
 8003392:	5c9b      	ldrb	r3, [r3, r2]
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b00      	cmp	r3, #0
 8003398:	d107      	bne.n	80033aa <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	223c      	movs	r2, #60	; 0x3c
 800339e:	2100      	movs	r1, #0
 80033a0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	0018      	movs	r0, r3
 80033a6:	f7fd ff9b 	bl	80012e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	223d      	movs	r2, #61	; 0x3d
 80033ae:	2102      	movs	r1, #2
 80033b0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	3304      	adds	r3, #4
 80033ba:	0019      	movs	r1, r3
 80033bc:	0010      	movs	r0, r2
 80033be:	f000 fcb5 	bl	8003d2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2246      	movs	r2, #70	; 0x46
 80033c6:	2101      	movs	r1, #1
 80033c8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	223e      	movs	r2, #62	; 0x3e
 80033ce:	2101      	movs	r1, #1
 80033d0:	5499      	strb	r1, [r3, r2]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	223f      	movs	r2, #63	; 0x3f
 80033d6:	2101      	movs	r1, #1
 80033d8:	5499      	strb	r1, [r3, r2]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2240      	movs	r2, #64	; 0x40
 80033de:	2101      	movs	r1, #1
 80033e0:	5499      	strb	r1, [r3, r2]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2241      	movs	r2, #65	; 0x41
 80033e6:	2101      	movs	r1, #1
 80033e8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2242      	movs	r2, #66	; 0x42
 80033ee:	2101      	movs	r1, #1
 80033f0:	5499      	strb	r1, [r3, r2]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2243      	movs	r2, #67	; 0x43
 80033f6:	2101      	movs	r1, #1
 80033f8:	5499      	strb	r1, [r3, r2]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2244      	movs	r2, #68	; 0x44
 80033fe:	2101      	movs	r1, #1
 8003400:	5499      	strb	r1, [r3, r2]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2245      	movs	r2, #69	; 0x45
 8003406:	2101      	movs	r1, #1
 8003408:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	223d      	movs	r2, #61	; 0x3d
 800340e:	2101      	movs	r1, #1
 8003410:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	0018      	movs	r0, r3
 8003416:	46bd      	mov	sp, r7
 8003418:	b002      	add	sp, #8
 800341a:	bd80      	pop	{r7, pc}

0800341c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d101      	bne.n	800342e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e042      	b.n	80034b4 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	223d      	movs	r2, #61	; 0x3d
 8003432:	5c9b      	ldrb	r3, [r3, r2]
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d107      	bne.n	800344a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	223c      	movs	r2, #60	; 0x3c
 800343e:	2100      	movs	r1, #0
 8003440:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	0018      	movs	r0, r3
 8003446:	f000 f839 	bl	80034bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	223d      	movs	r2, #61	; 0x3d
 800344e:	2102      	movs	r1, #2
 8003450:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	3304      	adds	r3, #4
 800345a:	0019      	movs	r1, r3
 800345c:	0010      	movs	r0, r2
 800345e:	f000 fc65 	bl	8003d2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2246      	movs	r2, #70	; 0x46
 8003466:	2101      	movs	r1, #1
 8003468:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	223e      	movs	r2, #62	; 0x3e
 800346e:	2101      	movs	r1, #1
 8003470:	5499      	strb	r1, [r3, r2]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	223f      	movs	r2, #63	; 0x3f
 8003476:	2101      	movs	r1, #1
 8003478:	5499      	strb	r1, [r3, r2]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2240      	movs	r2, #64	; 0x40
 800347e:	2101      	movs	r1, #1
 8003480:	5499      	strb	r1, [r3, r2]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2241      	movs	r2, #65	; 0x41
 8003486:	2101      	movs	r1, #1
 8003488:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2242      	movs	r2, #66	; 0x42
 800348e:	2101      	movs	r1, #1
 8003490:	5499      	strb	r1, [r3, r2]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2243      	movs	r2, #67	; 0x43
 8003496:	2101      	movs	r1, #1
 8003498:	5499      	strb	r1, [r3, r2]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2244      	movs	r2, #68	; 0x44
 800349e:	2101      	movs	r1, #1
 80034a0:	5499      	strb	r1, [r3, r2]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2245      	movs	r2, #69	; 0x45
 80034a6:	2101      	movs	r1, #1
 80034a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	223d      	movs	r2, #61	; 0x3d
 80034ae:	2101      	movs	r1, #1
 80034b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	0018      	movs	r0, r3
 80034b6:	46bd      	mov	sp, r7
 80034b8:	b002      	add	sp, #8
 80034ba:	bd80      	pop	{r7, pc}

080034bc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80034c4:	46c0      	nop			; (mov r8, r8)
 80034c6:	46bd      	mov	sp, r7
 80034c8:	b002      	add	sp, #8
 80034ca:	bd80      	pop	{r7, pc}

080034cc <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b086      	sub	sp, #24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
 80034d8:	001a      	movs	r2, r3
 80034da:	1cbb      	adds	r3, r7, #2
 80034dc:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034de:	2317      	movs	r3, #23
 80034e0:	18fb      	adds	r3, r7, r3
 80034e2:	2200      	movs	r2, #0
 80034e4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d108      	bne.n	80034fe <HAL_TIM_PWM_Start_DMA+0x32>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	223e      	movs	r2, #62	; 0x3e
 80034f0:	5c9b      	ldrb	r3, [r3, r2]
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	3b02      	subs	r3, #2
 80034f6:	425a      	negs	r2, r3
 80034f8:	4153      	adcs	r3, r2
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	e01f      	b.n	800353e <HAL_TIM_PWM_Start_DMA+0x72>
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	2b04      	cmp	r3, #4
 8003502:	d108      	bne.n	8003516 <HAL_TIM_PWM_Start_DMA+0x4a>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	223f      	movs	r2, #63	; 0x3f
 8003508:	5c9b      	ldrb	r3, [r3, r2]
 800350a:	b2db      	uxtb	r3, r3
 800350c:	3b02      	subs	r3, #2
 800350e:	425a      	negs	r2, r3
 8003510:	4153      	adcs	r3, r2
 8003512:	b2db      	uxtb	r3, r3
 8003514:	e013      	b.n	800353e <HAL_TIM_PWM_Start_DMA+0x72>
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	2b08      	cmp	r3, #8
 800351a:	d108      	bne.n	800352e <HAL_TIM_PWM_Start_DMA+0x62>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2240      	movs	r2, #64	; 0x40
 8003520:	5c9b      	ldrb	r3, [r3, r2]
 8003522:	b2db      	uxtb	r3, r3
 8003524:	3b02      	subs	r3, #2
 8003526:	425a      	negs	r2, r3
 8003528:	4153      	adcs	r3, r2
 800352a:	b2db      	uxtb	r3, r3
 800352c:	e007      	b.n	800353e <HAL_TIM_PWM_Start_DMA+0x72>
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2241      	movs	r2, #65	; 0x41
 8003532:	5c9b      	ldrb	r3, [r3, r2]
 8003534:	b2db      	uxtb	r3, r3
 8003536:	3b02      	subs	r3, #2
 8003538:	425a      	negs	r2, r3
 800353a:	4153      	adcs	r3, r2
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8003542:	2302      	movs	r3, #2
 8003544:	e15a      	b.n	80037fc <HAL_TIM_PWM_Start_DMA+0x330>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d108      	bne.n	800355e <HAL_TIM_PWM_Start_DMA+0x92>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	223e      	movs	r2, #62	; 0x3e
 8003550:	5c9b      	ldrb	r3, [r3, r2]
 8003552:	b2db      	uxtb	r3, r3
 8003554:	3b01      	subs	r3, #1
 8003556:	425a      	negs	r2, r3
 8003558:	4153      	adcs	r3, r2
 800355a:	b2db      	uxtb	r3, r3
 800355c:	e01f      	b.n	800359e <HAL_TIM_PWM_Start_DMA+0xd2>
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	2b04      	cmp	r3, #4
 8003562:	d108      	bne.n	8003576 <HAL_TIM_PWM_Start_DMA+0xaa>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	223f      	movs	r2, #63	; 0x3f
 8003568:	5c9b      	ldrb	r3, [r3, r2]
 800356a:	b2db      	uxtb	r3, r3
 800356c:	3b01      	subs	r3, #1
 800356e:	425a      	negs	r2, r3
 8003570:	4153      	adcs	r3, r2
 8003572:	b2db      	uxtb	r3, r3
 8003574:	e013      	b.n	800359e <HAL_TIM_PWM_Start_DMA+0xd2>
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	2b08      	cmp	r3, #8
 800357a:	d108      	bne.n	800358e <HAL_TIM_PWM_Start_DMA+0xc2>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2240      	movs	r2, #64	; 0x40
 8003580:	5c9b      	ldrb	r3, [r3, r2]
 8003582:	b2db      	uxtb	r3, r3
 8003584:	3b01      	subs	r3, #1
 8003586:	425a      	negs	r2, r3
 8003588:	4153      	adcs	r3, r2
 800358a:	b2db      	uxtb	r3, r3
 800358c:	e007      	b.n	800359e <HAL_TIM_PWM_Start_DMA+0xd2>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2241      	movs	r2, #65	; 0x41
 8003592:	5c9b      	ldrb	r3, [r3, r2]
 8003594:	b2db      	uxtb	r3, r3
 8003596:	3b01      	subs	r3, #1
 8003598:	425a      	negs	r2, r3
 800359a:	4153      	adcs	r3, r2
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d025      	beq.n	80035ee <HAL_TIM_PWM_Start_DMA+0x122>
  {
    if ((pData == NULL) || (Length == 0U))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d003      	beq.n	80035b0 <HAL_TIM_PWM_Start_DMA+0xe4>
 80035a8:	1cbb      	adds	r3, r7, #2
 80035aa:	881b      	ldrh	r3, [r3, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d101      	bne.n	80035b4 <HAL_TIM_PWM_Start_DMA+0xe8>
    {
      return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e123      	b.n	80037fc <HAL_TIM_PWM_Start_DMA+0x330>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d104      	bne.n	80035c4 <HAL_TIM_PWM_Start_DMA+0xf8>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	223e      	movs	r2, #62	; 0x3e
 80035be:	2102      	movs	r1, #2
 80035c0:	5499      	strb	r1, [r3, r2]
 80035c2:	e016      	b.n	80035f2 <HAL_TIM_PWM_Start_DMA+0x126>
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	2b04      	cmp	r3, #4
 80035c8:	d104      	bne.n	80035d4 <HAL_TIM_PWM_Start_DMA+0x108>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	223f      	movs	r2, #63	; 0x3f
 80035ce:	2102      	movs	r1, #2
 80035d0:	5499      	strb	r1, [r3, r2]
 80035d2:	e00e      	b.n	80035f2 <HAL_TIM_PWM_Start_DMA+0x126>
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	2b08      	cmp	r3, #8
 80035d8:	d104      	bne.n	80035e4 <HAL_TIM_PWM_Start_DMA+0x118>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2240      	movs	r2, #64	; 0x40
 80035de:	2102      	movs	r1, #2
 80035e0:	5499      	strb	r1, [r3, r2]
 80035e2:	e006      	b.n	80035f2 <HAL_TIM_PWM_Start_DMA+0x126>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2241      	movs	r2, #65	; 0x41
 80035e8:	2102      	movs	r1, #2
 80035ea:	5499      	strb	r1, [r3, r2]
 80035ec:	e001      	b.n	80035f2 <HAL_TIM_PWM_Start_DMA+0x126>
    }
  }
  else
  {
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e104      	b.n	80037fc <HAL_TIM_PWM_Start_DMA+0x330>
  }

  switch (Channel)
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	2b0c      	cmp	r3, #12
 80035f6:	d100      	bne.n	80035fa <HAL_TIM_PWM_Start_DMA+0x12e>
 80035f8:	e080      	b.n	80036fc <HAL_TIM_PWM_Start_DMA+0x230>
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	2b0c      	cmp	r3, #12
 80035fe:	d900      	bls.n	8003602 <HAL_TIM_PWM_Start_DMA+0x136>
 8003600:	e0a1      	b.n	8003746 <HAL_TIM_PWM_Start_DMA+0x27a>
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	2b08      	cmp	r3, #8
 8003606:	d054      	beq.n	80036b2 <HAL_TIM_PWM_Start_DMA+0x1e6>
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	2b08      	cmp	r3, #8
 800360c:	d900      	bls.n	8003610 <HAL_TIM_PWM_Start_DMA+0x144>
 800360e:	e09a      	b.n	8003746 <HAL_TIM_PWM_Start_DMA+0x27a>
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <HAL_TIM_PWM_Start_DMA+0x152>
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	2b04      	cmp	r3, #4
 800361a:	d025      	beq.n	8003668 <HAL_TIM_PWM_Start_DMA+0x19c>
 800361c:	e093      	b.n	8003746 <HAL_TIM_PWM_Start_DMA+0x27a>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003622:	4a78      	ldr	r2, [pc, #480]	; (8003804 <HAL_TIM_PWM_Start_DMA+0x338>)
 8003624:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362a:	4a77      	ldr	r2, [pc, #476]	; (8003808 <HAL_TIM_PWM_Start_DMA+0x33c>)
 800362c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003632:	4a76      	ldr	r2, [pc, #472]	; (800380c <HAL_TIM_PWM_Start_DMA+0x340>)
 8003634:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800363a:	6879      	ldr	r1, [r7, #4]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	3334      	adds	r3, #52	; 0x34
 8003642:	001a      	movs	r2, r3
 8003644:	1cbb      	adds	r3, r7, #2
 8003646:	881b      	ldrh	r3, [r3, #0]
 8003648:	f7fe fd82 	bl	8002150 <HAL_DMA_Start_IT>
 800364c:	1e03      	subs	r3, r0, #0
 800364e:	d001      	beq.n	8003654 <HAL_TIM_PWM_Start_DMA+0x188>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e0d3      	b.n	80037fc <HAL_TIM_PWM_Start_DMA+0x330>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68da      	ldr	r2, [r3, #12]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2180      	movs	r1, #128	; 0x80
 8003660:	0089      	lsls	r1, r1, #2
 8003662:	430a      	orrs	r2, r1
 8003664:	60da      	str	r2, [r3, #12]
      break;
 8003666:	e073      	b.n	8003750 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366c:	4a65      	ldr	r2, [pc, #404]	; (8003804 <HAL_TIM_PWM_Start_DMA+0x338>)
 800366e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003674:	4a64      	ldr	r2, [pc, #400]	; (8003808 <HAL_TIM_PWM_Start_DMA+0x33c>)
 8003676:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367c:	4a63      	ldr	r2, [pc, #396]	; (800380c <HAL_TIM_PWM_Start_DMA+0x340>)
 800367e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003684:	6879      	ldr	r1, [r7, #4]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	3338      	adds	r3, #56	; 0x38
 800368c:	001a      	movs	r2, r3
 800368e:	1cbb      	adds	r3, r7, #2
 8003690:	881b      	ldrh	r3, [r3, #0]
 8003692:	f7fe fd5d 	bl	8002150 <HAL_DMA_Start_IT>
 8003696:	1e03      	subs	r3, r0, #0
 8003698:	d001      	beq.n	800369e <HAL_TIM_PWM_Start_DMA+0x1d2>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e0ae      	b.n	80037fc <HAL_TIM_PWM_Start_DMA+0x330>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68da      	ldr	r2, [r3, #12]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2180      	movs	r1, #128	; 0x80
 80036aa:	00c9      	lsls	r1, r1, #3
 80036ac:	430a      	orrs	r2, r1
 80036ae:	60da      	str	r2, [r3, #12]
      break;
 80036b0:	e04e      	b.n	8003750 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b6:	4a53      	ldr	r2, [pc, #332]	; (8003804 <HAL_TIM_PWM_Start_DMA+0x338>)
 80036b8:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036be:	4a52      	ldr	r2, [pc, #328]	; (8003808 <HAL_TIM_PWM_Start_DMA+0x33c>)
 80036c0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c6:	4a51      	ldr	r2, [pc, #324]	; (800380c <HAL_TIM_PWM_Start_DMA+0x340>)
 80036c8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80036ce:	6879      	ldr	r1, [r7, #4]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	333c      	adds	r3, #60	; 0x3c
 80036d6:	001a      	movs	r2, r3
 80036d8:	1cbb      	adds	r3, r7, #2
 80036da:	881b      	ldrh	r3, [r3, #0]
 80036dc:	f7fe fd38 	bl	8002150 <HAL_DMA_Start_IT>
 80036e0:	1e03      	subs	r3, r0, #0
 80036e2:	d001      	beq.n	80036e8 <HAL_TIM_PWM_Start_DMA+0x21c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e089      	b.n	80037fc <HAL_TIM_PWM_Start_DMA+0x330>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68da      	ldr	r2, [r3, #12]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2180      	movs	r1, #128	; 0x80
 80036f4:	0109      	lsls	r1, r1, #4
 80036f6:	430a      	orrs	r2, r1
 80036f8:	60da      	str	r2, [r3, #12]
      break;
 80036fa:	e029      	b.n	8003750 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003700:	4a40      	ldr	r2, [pc, #256]	; (8003804 <HAL_TIM_PWM_Start_DMA+0x338>)
 8003702:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003708:	4a3f      	ldr	r2, [pc, #252]	; (8003808 <HAL_TIM_PWM_Start_DMA+0x33c>)
 800370a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003710:	4a3e      	ldr	r2, [pc, #248]	; (800380c <HAL_TIM_PWM_Start_DMA+0x340>)
 8003712:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003718:	6879      	ldr	r1, [r7, #4]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	3340      	adds	r3, #64	; 0x40
 8003720:	001a      	movs	r2, r3
 8003722:	1cbb      	adds	r3, r7, #2
 8003724:	881b      	ldrh	r3, [r3, #0]
 8003726:	f7fe fd13 	bl	8002150 <HAL_DMA_Start_IT>
 800372a:	1e03      	subs	r3, r0, #0
 800372c:	d001      	beq.n	8003732 <HAL_TIM_PWM_Start_DMA+0x266>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e064      	b.n	80037fc <HAL_TIM_PWM_Start_DMA+0x330>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68da      	ldr	r2, [r3, #12]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2180      	movs	r1, #128	; 0x80
 800373e:	0149      	lsls	r1, r1, #5
 8003740:	430a      	orrs	r2, r1
 8003742:	60da      	str	r2, [r3, #12]
      break;
 8003744:	e004      	b.n	8003750 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    default:
      status = HAL_ERROR;
 8003746:	2317      	movs	r3, #23
 8003748:	18fb      	adds	r3, r7, r3
 800374a:	2201      	movs	r2, #1
 800374c:	701a      	strb	r2, [r3, #0]
      break;
 800374e:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8003750:	2317      	movs	r3, #23
 8003752:	18fb      	adds	r3, r7, r3
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d14d      	bne.n	80037f6 <HAL_TIM_PWM_Start_DMA+0x32a>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68b9      	ldr	r1, [r7, #8]
 8003760:	2201      	movs	r2, #1
 8003762:	0018      	movs	r0, r3
 8003764:	f000 fdd2 	bl	800430c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a28      	ldr	r2, [pc, #160]	; (8003810 <HAL_TIM_PWM_Start_DMA+0x344>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d009      	beq.n	8003786 <HAL_TIM_PWM_Start_DMA+0x2ba>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a27      	ldr	r2, [pc, #156]	; (8003814 <HAL_TIM_PWM_Start_DMA+0x348>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d004      	beq.n	8003786 <HAL_TIM_PWM_Start_DMA+0x2ba>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a25      	ldr	r2, [pc, #148]	; (8003818 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d101      	bne.n	800378a <HAL_TIM_PWM_Start_DMA+0x2be>
 8003786:	2301      	movs	r3, #1
 8003788:	e000      	b.n	800378c <HAL_TIM_PWM_Start_DMA+0x2c0>
 800378a:	2300      	movs	r3, #0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d008      	beq.n	80037a2 <HAL_TIM_PWM_Start_DMA+0x2d6>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2180      	movs	r1, #128	; 0x80
 800379c:	0209      	lsls	r1, r1, #8
 800379e:	430a      	orrs	r2, r1
 80037a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a1a      	ldr	r2, [pc, #104]	; (8003810 <HAL_TIM_PWM_Start_DMA+0x344>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d00a      	beq.n	80037c2 <HAL_TIM_PWM_Start_DMA+0x2f6>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	2380      	movs	r3, #128	; 0x80
 80037b2:	05db      	lsls	r3, r3, #23
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d004      	beq.n	80037c2 <HAL_TIM_PWM_Start_DMA+0x2f6>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a17      	ldr	r2, [pc, #92]	; (800381c <HAL_TIM_PWM_Start_DMA+0x350>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d111      	bne.n	80037e6 <HAL_TIM_PWM_Start_DMA+0x31a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	2207      	movs	r2, #7
 80037ca:	4013      	ands	r3, r2
 80037cc:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	2b06      	cmp	r3, #6
 80037d2:	d010      	beq.n	80037f6 <HAL_TIM_PWM_Start_DMA+0x32a>
      {
        __HAL_TIM_ENABLE(htim);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2101      	movs	r1, #1
 80037e0:	430a      	orrs	r2, r1
 80037e2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037e4:	e007      	b.n	80037f6 <HAL_TIM_PWM_Start_DMA+0x32a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2101      	movs	r1, #1
 80037f2:	430a      	orrs	r2, r1
 80037f4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80037f6:	2317      	movs	r3, #23
 80037f8:	18fb      	adds	r3, r7, r3
 80037fa:	781b      	ldrb	r3, [r3, #0]
}
 80037fc:	0018      	movs	r0, r3
 80037fe:	46bd      	mov	sp, r7
 8003800:	b006      	add	sp, #24
 8003802:	bd80      	pop	{r7, pc}
 8003804:	08003c19 	.word	0x08003c19
 8003808:	08003cc3 	.word	0x08003cc3
 800380c:	08003b85 	.word	0x08003b85
 8003810:	40012c00 	.word	0x40012c00
 8003814:	40014400 	.word	0x40014400
 8003818:	40014800 	.word	0x40014800
 800381c:	40000400 	.word	0x40000400

08003820 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800382c:	2317      	movs	r3, #23
 800382e:	18fb      	adds	r3, r7, r3
 8003830:	2200      	movs	r2, #0
 8003832:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	223c      	movs	r2, #60	; 0x3c
 8003838:	5c9b      	ldrb	r3, [r3, r2]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d101      	bne.n	8003842 <HAL_TIM_PWM_ConfigChannel+0x22>
 800383e:	2302      	movs	r3, #2
 8003840:	e0ad      	b.n	800399e <HAL_TIM_PWM_ConfigChannel+0x17e>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	223c      	movs	r2, #60	; 0x3c
 8003846:	2101      	movs	r1, #1
 8003848:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2b0c      	cmp	r3, #12
 800384e:	d100      	bne.n	8003852 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003850:	e076      	b.n	8003940 <HAL_TIM_PWM_ConfigChannel+0x120>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2b0c      	cmp	r3, #12
 8003856:	d900      	bls.n	800385a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8003858:	e095      	b.n	8003986 <HAL_TIM_PWM_ConfigChannel+0x166>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b08      	cmp	r3, #8
 800385e:	d04e      	beq.n	80038fe <HAL_TIM_PWM_ConfigChannel+0xde>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2b08      	cmp	r3, #8
 8003864:	d900      	bls.n	8003868 <HAL_TIM_PWM_ConfigChannel+0x48>
 8003866:	e08e      	b.n	8003986 <HAL_TIM_PWM_ConfigChannel+0x166>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d003      	beq.n	8003876 <HAL_TIM_PWM_ConfigChannel+0x56>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2b04      	cmp	r3, #4
 8003872:	d021      	beq.n	80038b8 <HAL_TIM_PWM_ConfigChannel+0x98>
 8003874:	e087      	b.n	8003986 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68ba      	ldr	r2, [r7, #8]
 800387c:	0011      	movs	r1, r2
 800387e:	0018      	movs	r0, r3
 8003880:	f000 faca 	bl	8003e18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	699a      	ldr	r2, [r3, #24]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2108      	movs	r1, #8
 8003890:	430a      	orrs	r2, r1
 8003892:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	699a      	ldr	r2, [r3, #24]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2104      	movs	r1, #4
 80038a0:	438a      	bics	r2, r1
 80038a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6999      	ldr	r1, [r3, #24]
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	691a      	ldr	r2, [r3, #16]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	619a      	str	r2, [r3, #24]
      break;
 80038b6:	e06b      	b.n	8003990 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68ba      	ldr	r2, [r7, #8]
 80038be:	0011      	movs	r1, r2
 80038c0:	0018      	movs	r0, r3
 80038c2:	f000 fb27 	bl	8003f14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	699a      	ldr	r2, [r3, #24]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2180      	movs	r1, #128	; 0x80
 80038d2:	0109      	lsls	r1, r1, #4
 80038d4:	430a      	orrs	r2, r1
 80038d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	699a      	ldr	r2, [r3, #24]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4931      	ldr	r1, [pc, #196]	; (80039a8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80038e4:	400a      	ands	r2, r1
 80038e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6999      	ldr	r1, [r3, #24]
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	021a      	lsls	r2, r3, #8
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	430a      	orrs	r2, r1
 80038fa:	619a      	str	r2, [r3, #24]
      break;
 80038fc:	e048      	b.n	8003990 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68ba      	ldr	r2, [r7, #8]
 8003904:	0011      	movs	r1, r2
 8003906:	0018      	movs	r0, r3
 8003908:	f000 fb82 	bl	8004010 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	69da      	ldr	r2, [r3, #28]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2108      	movs	r1, #8
 8003918:	430a      	orrs	r2, r1
 800391a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	69da      	ldr	r2, [r3, #28]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2104      	movs	r1, #4
 8003928:	438a      	bics	r2, r1
 800392a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	69d9      	ldr	r1, [r3, #28]
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	691a      	ldr	r2, [r3, #16]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	430a      	orrs	r2, r1
 800393c:	61da      	str	r2, [r3, #28]
      break;
 800393e:	e027      	b.n	8003990 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68ba      	ldr	r2, [r7, #8]
 8003946:	0011      	movs	r1, r2
 8003948:	0018      	movs	r0, r3
 800394a:	f000 fbe1 	bl	8004110 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	69da      	ldr	r2, [r3, #28]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2180      	movs	r1, #128	; 0x80
 800395a:	0109      	lsls	r1, r1, #4
 800395c:	430a      	orrs	r2, r1
 800395e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	69da      	ldr	r2, [r3, #28]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	490f      	ldr	r1, [pc, #60]	; (80039a8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800396c:	400a      	ands	r2, r1
 800396e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	69d9      	ldr	r1, [r3, #28]
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	021a      	lsls	r2, r3, #8
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	430a      	orrs	r2, r1
 8003982:	61da      	str	r2, [r3, #28]
      break;
 8003984:	e004      	b.n	8003990 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8003986:	2317      	movs	r3, #23
 8003988:	18fb      	adds	r3, r7, r3
 800398a:	2201      	movs	r2, #1
 800398c:	701a      	strb	r2, [r3, #0]
      break;
 800398e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	223c      	movs	r2, #60	; 0x3c
 8003994:	2100      	movs	r1, #0
 8003996:	5499      	strb	r1, [r3, r2]

  return status;
 8003998:	2317      	movs	r3, #23
 800399a:	18fb      	adds	r3, r7, r3
 800399c:	781b      	ldrb	r3, [r3, #0]
}
 800399e:	0018      	movs	r0, r3
 80039a0:	46bd      	mov	sp, r7
 80039a2:	b006      	add	sp, #24
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	46c0      	nop			; (mov r8, r8)
 80039a8:	fffffbff 	.word	0xfffffbff

080039ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039b6:	230f      	movs	r3, #15
 80039b8:	18fb      	adds	r3, r7, r3
 80039ba:	2200      	movs	r2, #0
 80039bc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	223c      	movs	r2, #60	; 0x3c
 80039c2:	5c9b      	ldrb	r3, [r3, r2]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d101      	bne.n	80039cc <HAL_TIM_ConfigClockSource+0x20>
 80039c8:	2302      	movs	r3, #2
 80039ca:	e0bc      	b.n	8003b46 <HAL_TIM_ConfigClockSource+0x19a>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	223c      	movs	r2, #60	; 0x3c
 80039d0:	2101      	movs	r1, #1
 80039d2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	223d      	movs	r2, #61	; 0x3d
 80039d8:	2102      	movs	r1, #2
 80039da:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	2277      	movs	r2, #119	; 0x77
 80039e8:	4393      	bics	r3, r2
 80039ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	4a58      	ldr	r2, [pc, #352]	; (8003b50 <HAL_TIM_ConfigClockSource+0x1a4>)
 80039f0:	4013      	ands	r3, r2
 80039f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68ba      	ldr	r2, [r7, #8]
 80039fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2280      	movs	r2, #128	; 0x80
 8003a02:	0192      	lsls	r2, r2, #6
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d040      	beq.n	8003a8a <HAL_TIM_ConfigClockSource+0xde>
 8003a08:	2280      	movs	r2, #128	; 0x80
 8003a0a:	0192      	lsls	r2, r2, #6
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d900      	bls.n	8003a12 <HAL_TIM_ConfigClockSource+0x66>
 8003a10:	e088      	b.n	8003b24 <HAL_TIM_ConfigClockSource+0x178>
 8003a12:	2280      	movs	r2, #128	; 0x80
 8003a14:	0152      	lsls	r2, r2, #5
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d100      	bne.n	8003a1c <HAL_TIM_ConfigClockSource+0x70>
 8003a1a:	e088      	b.n	8003b2e <HAL_TIM_ConfigClockSource+0x182>
 8003a1c:	2280      	movs	r2, #128	; 0x80
 8003a1e:	0152      	lsls	r2, r2, #5
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d900      	bls.n	8003a26 <HAL_TIM_ConfigClockSource+0x7a>
 8003a24:	e07e      	b.n	8003b24 <HAL_TIM_ConfigClockSource+0x178>
 8003a26:	2b70      	cmp	r3, #112	; 0x70
 8003a28:	d018      	beq.n	8003a5c <HAL_TIM_ConfigClockSource+0xb0>
 8003a2a:	d900      	bls.n	8003a2e <HAL_TIM_ConfigClockSource+0x82>
 8003a2c:	e07a      	b.n	8003b24 <HAL_TIM_ConfigClockSource+0x178>
 8003a2e:	2b60      	cmp	r3, #96	; 0x60
 8003a30:	d04f      	beq.n	8003ad2 <HAL_TIM_ConfigClockSource+0x126>
 8003a32:	d900      	bls.n	8003a36 <HAL_TIM_ConfigClockSource+0x8a>
 8003a34:	e076      	b.n	8003b24 <HAL_TIM_ConfigClockSource+0x178>
 8003a36:	2b50      	cmp	r3, #80	; 0x50
 8003a38:	d03b      	beq.n	8003ab2 <HAL_TIM_ConfigClockSource+0x106>
 8003a3a:	d900      	bls.n	8003a3e <HAL_TIM_ConfigClockSource+0x92>
 8003a3c:	e072      	b.n	8003b24 <HAL_TIM_ConfigClockSource+0x178>
 8003a3e:	2b40      	cmp	r3, #64	; 0x40
 8003a40:	d057      	beq.n	8003af2 <HAL_TIM_ConfigClockSource+0x146>
 8003a42:	d900      	bls.n	8003a46 <HAL_TIM_ConfigClockSource+0x9a>
 8003a44:	e06e      	b.n	8003b24 <HAL_TIM_ConfigClockSource+0x178>
 8003a46:	2b30      	cmp	r3, #48	; 0x30
 8003a48:	d063      	beq.n	8003b12 <HAL_TIM_ConfigClockSource+0x166>
 8003a4a:	d86b      	bhi.n	8003b24 <HAL_TIM_ConfigClockSource+0x178>
 8003a4c:	2b20      	cmp	r3, #32
 8003a4e:	d060      	beq.n	8003b12 <HAL_TIM_ConfigClockSource+0x166>
 8003a50:	d868      	bhi.n	8003b24 <HAL_TIM_ConfigClockSource+0x178>
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d05d      	beq.n	8003b12 <HAL_TIM_ConfigClockSource+0x166>
 8003a56:	2b10      	cmp	r3, #16
 8003a58:	d05b      	beq.n	8003b12 <HAL_TIM_ConfigClockSource+0x166>
 8003a5a:	e063      	b.n	8003b24 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6818      	ldr	r0, [r3, #0]
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	6899      	ldr	r1, [r3, #8]
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685a      	ldr	r2, [r3, #4]
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	f000 fc2e 	bl	80042cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	2277      	movs	r2, #119	; 0x77
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	609a      	str	r2, [r3, #8]
      break;
 8003a88:	e052      	b.n	8003b30 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6818      	ldr	r0, [r3, #0]
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	6899      	ldr	r1, [r3, #8]
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	685a      	ldr	r2, [r3, #4]
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	f000 fc17 	bl	80042cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689a      	ldr	r2, [r3, #8]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2180      	movs	r1, #128	; 0x80
 8003aaa:	01c9      	lsls	r1, r1, #7
 8003aac:	430a      	orrs	r2, r1
 8003aae:	609a      	str	r2, [r3, #8]
      break;
 8003ab0:	e03e      	b.n	8003b30 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6818      	ldr	r0, [r3, #0]
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	6859      	ldr	r1, [r3, #4]
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	001a      	movs	r2, r3
 8003ac0:	f000 fb8a 	bl	80041d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2150      	movs	r1, #80	; 0x50
 8003aca:	0018      	movs	r0, r3
 8003acc:	f000 fbe4 	bl	8004298 <TIM_ITRx_SetConfig>
      break;
 8003ad0:	e02e      	b.n	8003b30 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6818      	ldr	r0, [r3, #0]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	6859      	ldr	r1, [r3, #4]
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	001a      	movs	r2, r3
 8003ae0:	f000 fba8 	bl	8004234 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2160      	movs	r1, #96	; 0x60
 8003aea:	0018      	movs	r0, r3
 8003aec:	f000 fbd4 	bl	8004298 <TIM_ITRx_SetConfig>
      break;
 8003af0:	e01e      	b.n	8003b30 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6818      	ldr	r0, [r3, #0]
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	6859      	ldr	r1, [r3, #4]
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	001a      	movs	r2, r3
 8003b00:	f000 fb6a 	bl	80041d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2140      	movs	r1, #64	; 0x40
 8003b0a:	0018      	movs	r0, r3
 8003b0c:	f000 fbc4 	bl	8004298 <TIM_ITRx_SetConfig>
      break;
 8003b10:	e00e      	b.n	8003b30 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	0019      	movs	r1, r3
 8003b1c:	0010      	movs	r0, r2
 8003b1e:	f000 fbbb 	bl	8004298 <TIM_ITRx_SetConfig>
      break;
 8003b22:	e005      	b.n	8003b30 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003b24:	230f      	movs	r3, #15
 8003b26:	18fb      	adds	r3, r7, r3
 8003b28:	2201      	movs	r2, #1
 8003b2a:	701a      	strb	r2, [r3, #0]
      break;
 8003b2c:	e000      	b.n	8003b30 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003b2e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	223d      	movs	r2, #61	; 0x3d
 8003b34:	2101      	movs	r1, #1
 8003b36:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	223c      	movs	r2, #60	; 0x3c
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	5499      	strb	r1, [r3, r2]

  return status;
 8003b40:	230f      	movs	r3, #15
 8003b42:	18fb      	adds	r3, r7, r3
 8003b44:	781b      	ldrb	r3, [r3, #0]
}
 8003b46:	0018      	movs	r0, r3
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	b004      	add	sp, #16
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	46c0      	nop			; (mov r8, r8)
 8003b50:	ffff00ff 	.word	0xffff00ff

08003b54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b5c:	46c0      	nop			; (mov r8, r8)
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	b002      	add	sp, #8
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003b6c:	46c0      	nop			; (mov r8, r8)
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	b002      	add	sp, #8
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003b7c:	46c0      	nop			; (mov r8, r8)
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	b002      	add	sp, #8
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b90:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d107      	bne.n	8003bac <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	223e      	movs	r2, #62	; 0x3e
 8003ba6:	2101      	movs	r1, #1
 8003ba8:	5499      	strb	r1, [r3, r2]
 8003baa:	e02a      	b.n	8003c02 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d107      	bne.n	8003bc6 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2202      	movs	r2, #2
 8003bba:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	223f      	movs	r2, #63	; 0x3f
 8003bc0:	2101      	movs	r1, #1
 8003bc2:	5499      	strb	r1, [r3, r2]
 8003bc4:	e01d      	b.n	8003c02 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d107      	bne.n	8003be0 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2204      	movs	r2, #4
 8003bd4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2240      	movs	r2, #64	; 0x40
 8003bda:	2101      	movs	r1, #1
 8003bdc:	5499      	strb	r1, [r3, r2]
 8003bde:	e010      	b.n	8003c02 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d107      	bne.n	8003bfa <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2208      	movs	r2, #8
 8003bee:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2241      	movs	r2, #65	; 0x41
 8003bf4:	2101      	movs	r1, #1
 8003bf6:	5499      	strb	r1, [r3, r2]
 8003bf8:	e003      	b.n	8003c02 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	223d      	movs	r2, #61	; 0x3d
 8003bfe:	2101      	movs	r1, #1
 8003c00:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	0018      	movs	r0, r3
 8003c06:	f7ff ffb5 	bl	8003b74 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	771a      	strb	r2, [r3, #28]
}
 8003c10:	46c0      	nop			; (mov r8, r8)
 8003c12:	46bd      	mov	sp, r7
 8003c14:	b004      	add	sp, #16
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c24:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d10b      	bne.n	8003c48 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2201      	movs	r2, #1
 8003c34:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d136      	bne.n	8003cac <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	223e      	movs	r2, #62	; 0x3e
 8003c42:	2101      	movs	r1, #1
 8003c44:	5499      	strb	r1, [r3, r2]
 8003c46:	e031      	b.n	8003cac <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d10b      	bne.n	8003c6a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2202      	movs	r2, #2
 8003c56:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d125      	bne.n	8003cac <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	223f      	movs	r2, #63	; 0x3f
 8003c64:	2101      	movs	r1, #1
 8003c66:	5499      	strb	r1, [r3, r2]
 8003c68:	e020      	b.n	8003cac <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d10b      	bne.n	8003c8c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2204      	movs	r2, #4
 8003c78:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d114      	bne.n	8003cac <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2240      	movs	r2, #64	; 0x40
 8003c86:	2101      	movs	r1, #1
 8003c88:	5499      	strb	r1, [r3, r2]
 8003c8a:	e00f      	b.n	8003cac <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d10a      	bne.n	8003cac <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2208      	movs	r2, #8
 8003c9a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d103      	bne.n	8003cac <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2241      	movs	r2, #65	; 0x41
 8003ca8:	2101      	movs	r1, #1
 8003caa:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	0018      	movs	r0, r3
 8003cb0:	f7ff ff50 	bl	8003b54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	771a      	strb	r2, [r3, #28]
}
 8003cba:	46c0      	nop			; (mov r8, r8)
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	b004      	add	sp, #16
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b084      	sub	sp, #16
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cce:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d103      	bne.n	8003ce2 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	771a      	strb	r2, [r3, #28]
 8003ce0:	e019      	b.n	8003d16 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d103      	bne.n	8003cf4 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2202      	movs	r2, #2
 8003cf0:	771a      	strb	r2, [r3, #28]
 8003cf2:	e010      	b.n	8003d16 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d103      	bne.n	8003d06 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2204      	movs	r2, #4
 8003d02:	771a      	strb	r2, [r3, #28]
 8003d04:	e007      	b.n	8003d16 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d102      	bne.n	8003d16 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2208      	movs	r2, #8
 8003d14:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	0018      	movs	r0, r3
 8003d1a:	f7ff ff23 	bl	8003b64 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	771a      	strb	r2, [r3, #28]
}
 8003d24:	46c0      	nop			; (mov r8, r8)
 8003d26:	46bd      	mov	sp, r7
 8003d28:	b004      	add	sp, #16
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a30      	ldr	r2, [pc, #192]	; (8003e00 <TIM_Base_SetConfig+0xd4>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d008      	beq.n	8003d56 <TIM_Base_SetConfig+0x2a>
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	2380      	movs	r3, #128	; 0x80
 8003d48:	05db      	lsls	r3, r3, #23
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d003      	beq.n	8003d56 <TIM_Base_SetConfig+0x2a>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a2c      	ldr	r2, [pc, #176]	; (8003e04 <TIM_Base_SetConfig+0xd8>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d108      	bne.n	8003d68 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2270      	movs	r2, #112	; 0x70
 8003d5a:	4393      	bics	r3, r2
 8003d5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a25      	ldr	r2, [pc, #148]	; (8003e00 <TIM_Base_SetConfig+0xd4>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d014      	beq.n	8003d9a <TIM_Base_SetConfig+0x6e>
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	2380      	movs	r3, #128	; 0x80
 8003d74:	05db      	lsls	r3, r3, #23
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d00f      	beq.n	8003d9a <TIM_Base_SetConfig+0x6e>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a21      	ldr	r2, [pc, #132]	; (8003e04 <TIM_Base_SetConfig+0xd8>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d00b      	beq.n	8003d9a <TIM_Base_SetConfig+0x6e>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a20      	ldr	r2, [pc, #128]	; (8003e08 <TIM_Base_SetConfig+0xdc>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d007      	beq.n	8003d9a <TIM_Base_SetConfig+0x6e>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a1f      	ldr	r2, [pc, #124]	; (8003e0c <TIM_Base_SetConfig+0xe0>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d003      	beq.n	8003d9a <TIM_Base_SetConfig+0x6e>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a1e      	ldr	r2, [pc, #120]	; (8003e10 <TIM_Base_SetConfig+0xe4>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d108      	bne.n	8003dac <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	4a1d      	ldr	r2, [pc, #116]	; (8003e14 <TIM_Base_SetConfig+0xe8>)
 8003d9e:	4013      	ands	r3, r2
 8003da0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2280      	movs	r2, #128	; 0x80
 8003db0:	4393      	bics	r3, r2
 8003db2:	001a      	movs	r2, r3
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	689a      	ldr	r2, [r3, #8]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a0a      	ldr	r2, [pc, #40]	; (8003e00 <TIM_Base_SetConfig+0xd4>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d007      	beq.n	8003dea <TIM_Base_SetConfig+0xbe>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a0b      	ldr	r2, [pc, #44]	; (8003e0c <TIM_Base_SetConfig+0xe0>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d003      	beq.n	8003dea <TIM_Base_SetConfig+0xbe>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a0a      	ldr	r2, [pc, #40]	; (8003e10 <TIM_Base_SetConfig+0xe4>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d103      	bne.n	8003df2 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	691a      	ldr	r2, [r3, #16]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2201      	movs	r2, #1
 8003df6:	615a      	str	r2, [r3, #20]
}
 8003df8:	46c0      	nop			; (mov r8, r8)
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	b004      	add	sp, #16
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	40012c00 	.word	0x40012c00
 8003e04:	40000400 	.word	0x40000400
 8003e08:	40002000 	.word	0x40002000
 8003e0c:	40014400 	.word	0x40014400
 8003e10:	40014800 	.word	0x40014800
 8003e14:	fffffcff 	.word	0xfffffcff

08003e18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b086      	sub	sp, #24
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	2201      	movs	r2, #1
 8003e28:	4393      	bics	r3, r2
 8003e2a:	001a      	movs	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a1b      	ldr	r3, [r3, #32]
 8003e34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2270      	movs	r2, #112	; 0x70
 8003e46:	4393      	bics	r3, r2
 8003e48:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2203      	movs	r2, #3
 8003e4e:	4393      	bics	r3, r2
 8003e50:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	2202      	movs	r2, #2
 8003e60:	4393      	bics	r3, r2
 8003e62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a23      	ldr	r2, [pc, #140]	; (8003f00 <TIM_OC1_SetConfig+0xe8>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d007      	beq.n	8003e86 <TIM_OC1_SetConfig+0x6e>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a22      	ldr	r2, [pc, #136]	; (8003f04 <TIM_OC1_SetConfig+0xec>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d003      	beq.n	8003e86 <TIM_OC1_SetConfig+0x6e>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a21      	ldr	r2, [pc, #132]	; (8003f08 <TIM_OC1_SetConfig+0xf0>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d10c      	bne.n	8003ea0 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	2208      	movs	r2, #8
 8003e8a:	4393      	bics	r3, r2
 8003e8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	2204      	movs	r2, #4
 8003e9c:	4393      	bics	r3, r2
 8003e9e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a17      	ldr	r2, [pc, #92]	; (8003f00 <TIM_OC1_SetConfig+0xe8>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d007      	beq.n	8003eb8 <TIM_OC1_SetConfig+0xa0>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a16      	ldr	r2, [pc, #88]	; (8003f04 <TIM_OC1_SetConfig+0xec>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d003      	beq.n	8003eb8 <TIM_OC1_SetConfig+0xa0>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a15      	ldr	r2, [pc, #84]	; (8003f08 <TIM_OC1_SetConfig+0xf0>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d111      	bne.n	8003edc <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	4a14      	ldr	r2, [pc, #80]	; (8003f0c <TIM_OC1_SetConfig+0xf4>)
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	4a13      	ldr	r2, [pc, #76]	; (8003f10 <TIM_OC1_SetConfig+0xf8>)
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	68fa      	ldr	r2, [r7, #12]
 8003ee6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	685a      	ldr	r2, [r3, #4]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	621a      	str	r2, [r3, #32]
}
 8003ef6:	46c0      	nop			; (mov r8, r8)
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	b006      	add	sp, #24
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	46c0      	nop			; (mov r8, r8)
 8003f00:	40012c00 	.word	0x40012c00
 8003f04:	40014400 	.word	0x40014400
 8003f08:	40014800 	.word	0x40014800
 8003f0c:	fffffeff 	.word	0xfffffeff
 8003f10:	fffffdff 	.word	0xfffffdff

08003f14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	2210      	movs	r2, #16
 8003f24:	4393      	bics	r3, r2
 8003f26:	001a      	movs	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a1b      	ldr	r3, [r3, #32]
 8003f30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	4a2c      	ldr	r2, [pc, #176]	; (8003ff4 <TIM_OC2_SetConfig+0xe0>)
 8003f42:	4013      	ands	r3, r2
 8003f44:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	4a2b      	ldr	r2, [pc, #172]	; (8003ff8 <TIM_OC2_SetConfig+0xe4>)
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	021b      	lsls	r3, r3, #8
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	2220      	movs	r2, #32
 8003f5e:	4393      	bics	r3, r2
 8003f60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	011b      	lsls	r3, r3, #4
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a22      	ldr	r2, [pc, #136]	; (8003ffc <TIM_OC2_SetConfig+0xe8>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d10d      	bne.n	8003f92 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	2280      	movs	r2, #128	; 0x80
 8003f7a:	4393      	bics	r3, r2
 8003f7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	011b      	lsls	r3, r3, #4
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	2240      	movs	r2, #64	; 0x40
 8003f8e:	4393      	bics	r3, r2
 8003f90:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a19      	ldr	r2, [pc, #100]	; (8003ffc <TIM_OC2_SetConfig+0xe8>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d007      	beq.n	8003faa <TIM_OC2_SetConfig+0x96>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a18      	ldr	r2, [pc, #96]	; (8004000 <TIM_OC2_SetConfig+0xec>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d003      	beq.n	8003faa <TIM_OC2_SetConfig+0x96>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a17      	ldr	r2, [pc, #92]	; (8004004 <TIM_OC2_SetConfig+0xf0>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d113      	bne.n	8003fd2 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	4a16      	ldr	r2, [pc, #88]	; (8004008 <TIM_OC2_SetConfig+0xf4>)
 8003fae:	4013      	ands	r3, r2
 8003fb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	4a15      	ldr	r2, [pc, #84]	; (800400c <TIM_OC2_SetConfig+0xf8>)
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	697a      	ldr	r2, [r7, #20]
 8003fea:	621a      	str	r2, [r3, #32]
}
 8003fec:	46c0      	nop			; (mov r8, r8)
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	b006      	add	sp, #24
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	ffff8fff 	.word	0xffff8fff
 8003ff8:	fffffcff 	.word	0xfffffcff
 8003ffc:	40012c00 	.word	0x40012c00
 8004000:	40014400 	.word	0x40014400
 8004004:	40014800 	.word	0x40014800
 8004008:	fffffbff 	.word	0xfffffbff
 800400c:	fffff7ff 	.word	0xfffff7ff

08004010 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b086      	sub	sp, #24
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a1b      	ldr	r3, [r3, #32]
 800401e:	4a33      	ldr	r2, [pc, #204]	; (80040ec <TIM_OC3_SetConfig+0xdc>)
 8004020:	401a      	ands	r2, r3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	69db      	ldr	r3, [r3, #28]
 8004036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2270      	movs	r2, #112	; 0x70
 800403c:	4393      	bics	r3, r2
 800403e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2203      	movs	r2, #3
 8004044:	4393      	bics	r3, r2
 8004046:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	4313      	orrs	r3, r2
 8004050:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	4a26      	ldr	r2, [pc, #152]	; (80040f0 <TIM_OC3_SetConfig+0xe0>)
 8004056:	4013      	ands	r3, r2
 8004058:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	021b      	lsls	r3, r3, #8
 8004060:	697a      	ldr	r2, [r7, #20]
 8004062:	4313      	orrs	r3, r2
 8004064:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a22      	ldr	r2, [pc, #136]	; (80040f4 <TIM_OC3_SetConfig+0xe4>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d10d      	bne.n	800408a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	4a21      	ldr	r2, [pc, #132]	; (80040f8 <TIM_OC3_SetConfig+0xe8>)
 8004072:	4013      	ands	r3, r2
 8004074:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	021b      	lsls	r3, r3, #8
 800407c:	697a      	ldr	r2, [r7, #20]
 800407e:	4313      	orrs	r3, r2
 8004080:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	4a1d      	ldr	r2, [pc, #116]	; (80040fc <TIM_OC3_SetConfig+0xec>)
 8004086:	4013      	ands	r3, r2
 8004088:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a19      	ldr	r2, [pc, #100]	; (80040f4 <TIM_OC3_SetConfig+0xe4>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d007      	beq.n	80040a2 <TIM_OC3_SetConfig+0x92>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a1a      	ldr	r2, [pc, #104]	; (8004100 <TIM_OC3_SetConfig+0xf0>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d003      	beq.n	80040a2 <TIM_OC3_SetConfig+0x92>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a19      	ldr	r2, [pc, #100]	; (8004104 <TIM_OC3_SetConfig+0xf4>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d113      	bne.n	80040ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	4a18      	ldr	r2, [pc, #96]	; (8004108 <TIM_OC3_SetConfig+0xf8>)
 80040a6:	4013      	ands	r3, r2
 80040a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	4a17      	ldr	r2, [pc, #92]	; (800410c <TIM_OC3_SetConfig+0xfc>)
 80040ae:	4013      	ands	r3, r2
 80040b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	011b      	lsls	r3, r3, #4
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	011b      	lsls	r3, r3, #4
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	685a      	ldr	r2, [r3, #4]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	697a      	ldr	r2, [r7, #20]
 80040e2:	621a      	str	r2, [r3, #32]
}
 80040e4:	46c0      	nop			; (mov r8, r8)
 80040e6:	46bd      	mov	sp, r7
 80040e8:	b006      	add	sp, #24
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	fffffeff 	.word	0xfffffeff
 80040f0:	fffffdff 	.word	0xfffffdff
 80040f4:	40012c00 	.word	0x40012c00
 80040f8:	fffff7ff 	.word	0xfffff7ff
 80040fc:	fffffbff 	.word	0xfffffbff
 8004100:	40014400 	.word	0x40014400
 8004104:	40014800 	.word	0x40014800
 8004108:	ffffefff 	.word	0xffffefff
 800410c:	ffffdfff 	.word	0xffffdfff

08004110 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	4a26      	ldr	r2, [pc, #152]	; (80041b8 <TIM_OC4_SetConfig+0xa8>)
 8004120:	401a      	ands	r2, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	69db      	ldr	r3, [r3, #28]
 8004136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	4a20      	ldr	r2, [pc, #128]	; (80041bc <TIM_OC4_SetConfig+0xac>)
 800413c:	4013      	ands	r3, r2
 800413e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	4a1f      	ldr	r2, [pc, #124]	; (80041c0 <TIM_OC4_SetConfig+0xb0>)
 8004144:	4013      	ands	r3, r2
 8004146:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	021b      	lsls	r3, r3, #8
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	4313      	orrs	r3, r2
 8004152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	4a1b      	ldr	r2, [pc, #108]	; (80041c4 <TIM_OC4_SetConfig+0xb4>)
 8004158:	4013      	ands	r3, r2
 800415a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	031b      	lsls	r3, r3, #12
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	4313      	orrs	r3, r2
 8004166:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a17      	ldr	r2, [pc, #92]	; (80041c8 <TIM_OC4_SetConfig+0xb8>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d007      	beq.n	8004180 <TIM_OC4_SetConfig+0x70>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a16      	ldr	r2, [pc, #88]	; (80041cc <TIM_OC4_SetConfig+0xbc>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d003      	beq.n	8004180 <TIM_OC4_SetConfig+0x70>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a15      	ldr	r2, [pc, #84]	; (80041d0 <TIM_OC4_SetConfig+0xc0>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d109      	bne.n	8004194 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	4a14      	ldr	r2, [pc, #80]	; (80041d4 <TIM_OC4_SetConfig+0xc4>)
 8004184:	4013      	ands	r3, r2
 8004186:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	695b      	ldr	r3, [r3, #20]
 800418c:	019b      	lsls	r3, r3, #6
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	4313      	orrs	r3, r2
 8004192:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	685a      	ldr	r2, [r3, #4]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	621a      	str	r2, [r3, #32]
}
 80041ae:	46c0      	nop			; (mov r8, r8)
 80041b0:	46bd      	mov	sp, r7
 80041b2:	b006      	add	sp, #24
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	46c0      	nop			; (mov r8, r8)
 80041b8:	ffffefff 	.word	0xffffefff
 80041bc:	ffff8fff 	.word	0xffff8fff
 80041c0:	fffffcff 	.word	0xfffffcff
 80041c4:	ffffdfff 	.word	0xffffdfff
 80041c8:	40012c00 	.word	0x40012c00
 80041cc:	40014400 	.word	0x40014400
 80041d0:	40014800 	.word	0x40014800
 80041d4:	ffffbfff 	.word	0xffffbfff

080041d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	2201      	movs	r2, #1
 80041f0:	4393      	bics	r3, r2
 80041f2:	001a      	movs	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	22f0      	movs	r2, #240	; 0xf0
 8004202:	4393      	bics	r3, r2
 8004204:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	011b      	lsls	r3, r3, #4
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	4313      	orrs	r3, r2
 800420e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	220a      	movs	r2, #10
 8004214:	4393      	bics	r3, r2
 8004216:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004218:	697a      	ldr	r2, [r7, #20]
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	4313      	orrs	r3, r2
 800421e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	621a      	str	r2, [r3, #32]
}
 800422c:	46c0      	nop			; (mov r8, r8)
 800422e:	46bd      	mov	sp, r7
 8004230:	b006      	add	sp, #24
 8004232:	bd80      	pop	{r7, pc}

08004234 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	2210      	movs	r2, #16
 8004246:	4393      	bics	r3, r2
 8004248:	001a      	movs	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6a1b      	ldr	r3, [r3, #32]
 8004258:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	4a0d      	ldr	r2, [pc, #52]	; (8004294 <TIM_TI2_ConfigInputStage+0x60>)
 800425e:	4013      	ands	r3, r2
 8004260:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	031b      	lsls	r3, r3, #12
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	4313      	orrs	r3, r2
 800426a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	22a0      	movs	r2, #160	; 0xa0
 8004270:	4393      	bics	r3, r2
 8004272:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	011b      	lsls	r3, r3, #4
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	4313      	orrs	r3, r2
 800427c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	693a      	ldr	r2, [r7, #16]
 8004288:	621a      	str	r2, [r3, #32]
}
 800428a:	46c0      	nop			; (mov r8, r8)
 800428c:	46bd      	mov	sp, r7
 800428e:	b006      	add	sp, #24
 8004290:	bd80      	pop	{r7, pc}
 8004292:	46c0      	nop			; (mov r8, r8)
 8004294:	ffff0fff 	.word	0xffff0fff

08004298 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2270      	movs	r2, #112	; 0x70
 80042ac:	4393      	bics	r3, r2
 80042ae:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042b0:	683a      	ldr	r2, [r7, #0]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	2207      	movs	r2, #7
 80042b8:	4313      	orrs	r3, r2
 80042ba:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	609a      	str	r2, [r3, #8]
}
 80042c2:	46c0      	nop			; (mov r8, r8)
 80042c4:	46bd      	mov	sp, r7
 80042c6:	b004      	add	sp, #16
 80042c8:	bd80      	pop	{r7, pc}
	...

080042cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b086      	sub	sp, #24
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
 80042d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	4a09      	ldr	r2, [pc, #36]	; (8004308 <TIM_ETR_SetConfig+0x3c>)
 80042e4:	4013      	ands	r3, r2
 80042e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	021a      	lsls	r2, r3, #8
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	431a      	orrs	r2, r3
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	609a      	str	r2, [r3, #8]
}
 8004300:	46c0      	nop			; (mov r8, r8)
 8004302:	46bd      	mov	sp, r7
 8004304:	b006      	add	sp, #24
 8004306:	bd80      	pop	{r7, pc}
 8004308:	ffff00ff 	.word	0xffff00ff

0800430c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	221f      	movs	r2, #31
 800431c:	4013      	ands	r3, r2
 800431e:	2201      	movs	r2, #1
 8004320:	409a      	lsls	r2, r3
 8004322:	0013      	movs	r3, r2
 8004324:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	43d2      	mvns	r2, r2
 800432e:	401a      	ands	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6a1a      	ldr	r2, [r3, #32]
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	211f      	movs	r1, #31
 800433c:	400b      	ands	r3, r1
 800433e:	6879      	ldr	r1, [r7, #4]
 8004340:	4099      	lsls	r1, r3
 8004342:	000b      	movs	r3, r1
 8004344:	431a      	orrs	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	621a      	str	r2, [r3, #32]
}
 800434a:	46c0      	nop			; (mov r8, r8)
 800434c:	46bd      	mov	sp, r7
 800434e:	b006      	add	sp, #24
 8004350:	bd80      	pop	{r7, pc}
	...

08004354 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	223c      	movs	r2, #60	; 0x3c
 8004362:	5c9b      	ldrb	r3, [r3, r2]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d101      	bne.n	800436c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004368:	2302      	movs	r3, #2
 800436a:	e042      	b.n	80043f2 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	223c      	movs	r2, #60	; 0x3c
 8004370:	2101      	movs	r1, #1
 8004372:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	223d      	movs	r2, #61	; 0x3d
 8004378:	2102      	movs	r1, #2
 800437a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2270      	movs	r2, #112	; 0x70
 8004390:	4393      	bics	r3, r2
 8004392:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	4313      	orrs	r3, r2
 800439c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a14      	ldr	r2, [pc, #80]	; (80043fc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d00a      	beq.n	80043c6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	2380      	movs	r3, #128	; 0x80
 80043b6:	05db      	lsls	r3, r3, #23
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d004      	beq.n	80043c6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a0f      	ldr	r2, [pc, #60]	; (8004400 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d10c      	bne.n	80043e0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	2280      	movs	r2, #128	; 0x80
 80043ca:	4393      	bics	r3, r2
 80043cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68ba      	ldr	r2, [r7, #8]
 80043de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	223d      	movs	r2, #61	; 0x3d
 80043e4:	2101      	movs	r1, #1
 80043e6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	223c      	movs	r2, #60	; 0x3c
 80043ec:	2100      	movs	r1, #0
 80043ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	0018      	movs	r0, r3
 80043f4:	46bd      	mov	sp, r7
 80043f6:	b004      	add	sp, #16
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	46c0      	nop			; (mov r8, r8)
 80043fc:	40012c00 	.word	0x40012c00
 8004400:	40000400 	.word	0x40000400

08004404 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d101      	bne.n	8004416 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e044      	b.n	80044a0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800441a:	2b00      	cmp	r3, #0
 800441c:	d107      	bne.n	800442e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2278      	movs	r2, #120	; 0x78
 8004422:	2100      	movs	r1, #0
 8004424:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	0018      	movs	r0, r3
 800442a:	f7fc ffdf 	bl	80013ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2224      	movs	r2, #36	; 0x24
 8004432:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2101      	movs	r1, #1
 8004440:	438a      	bics	r2, r1
 8004442:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	0018      	movs	r0, r3
 8004448:	f000 fb7c 	bl	8004b44 <UART_SetConfig>
 800444c:	0003      	movs	r3, r0
 800444e:	2b01      	cmp	r3, #1
 8004450:	d101      	bne.n	8004456 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e024      	b.n	80044a0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445a:	2b00      	cmp	r3, #0
 800445c:	d003      	beq.n	8004466 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	0018      	movs	r0, r3
 8004462:	f000 fcaf 	bl	8004dc4 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	685a      	ldr	r2, [r3, #4]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	490d      	ldr	r1, [pc, #52]	; (80044a8 <HAL_UART_Init+0xa4>)
 8004472:	400a      	ands	r2, r1
 8004474:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	689a      	ldr	r2, [r3, #8]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	212a      	movs	r1, #42	; 0x2a
 8004482:	438a      	bics	r2, r1
 8004484:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2101      	movs	r1, #1
 8004492:	430a      	orrs	r2, r1
 8004494:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	0018      	movs	r0, r3
 800449a:	f000 fd47 	bl	8004f2c <UART_CheckIdleState>
 800449e:	0003      	movs	r3, r0
}
 80044a0:	0018      	movs	r0, r3
 80044a2:	46bd      	mov	sp, r7
 80044a4:	b002      	add	sp, #8
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	ffffb7ff 	.word	0xffffb7ff

080044ac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b088      	sub	sp, #32
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	1dbb      	adds	r3, r7, #6
 80044b8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2280      	movs	r2, #128	; 0x80
 80044be:	589b      	ldr	r3, [r3, r2]
 80044c0:	2b20      	cmp	r3, #32
 80044c2:	d145      	bne.n	8004550 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d003      	beq.n	80044d2 <HAL_UART_Receive_IT+0x26>
 80044ca:	1dbb      	adds	r3, r7, #6
 80044cc:	881b      	ldrh	r3, [r3, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e03d      	b.n	8004552 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	689a      	ldr	r2, [r3, #8]
 80044da:	2380      	movs	r3, #128	; 0x80
 80044dc:	015b      	lsls	r3, r3, #5
 80044de:	429a      	cmp	r2, r3
 80044e0:	d109      	bne.n	80044f6 <HAL_UART_Receive_IT+0x4a>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d105      	bne.n	80044f6 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	2201      	movs	r2, #1
 80044ee:	4013      	ands	r3, r2
 80044f0:	d001      	beq.n	80044f6 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e02d      	b.n	8004552 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	2380      	movs	r3, #128	; 0x80
 8004504:	041b      	lsls	r3, r3, #16
 8004506:	4013      	ands	r3, r2
 8004508:	d019      	beq.n	800453e <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800450a:	f3ef 8310 	mrs	r3, PRIMASK
 800450e:	613b      	str	r3, [r7, #16]
  return(result);
 8004510:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004512:	61fb      	str	r3, [r7, #28]
 8004514:	2301      	movs	r3, #1
 8004516:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	f383 8810 	msr	PRIMASK, r3
}
 800451e:	46c0      	nop			; (mov r8, r8)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2180      	movs	r1, #128	; 0x80
 800452c:	04c9      	lsls	r1, r1, #19
 800452e:	430a      	orrs	r2, r1
 8004530:	601a      	str	r2, [r3, #0]
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	f383 8810 	msr	PRIMASK, r3
}
 800453c:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800453e:	1dbb      	adds	r3, r7, #6
 8004540:	881a      	ldrh	r2, [r3, #0]
 8004542:	68b9      	ldr	r1, [r7, #8]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	0018      	movs	r0, r3
 8004548:	f000 fe02 	bl	8005150 <UART_Start_Receive_IT>
 800454c:	0003      	movs	r3, r0
 800454e:	e000      	b.n	8004552 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8004550:	2302      	movs	r3, #2
  }
}
 8004552:	0018      	movs	r0, r3
 8004554:	46bd      	mov	sp, r7
 8004556:	b008      	add	sp, #32
 8004558:	bd80      	pop	{r7, pc}
	...

0800455c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800455c:	b590      	push	{r4, r7, lr}
 800455e:	b0ab      	sub	sp, #172	; 0xac
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	69db      	ldr	r3, [r3, #28]
 800456a:	22a4      	movs	r2, #164	; 0xa4
 800456c:	18b9      	adds	r1, r7, r2
 800456e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	20a0      	movs	r0, #160	; 0xa0
 8004578:	1839      	adds	r1, r7, r0
 800457a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	219c      	movs	r1, #156	; 0x9c
 8004584:	1879      	adds	r1, r7, r1
 8004586:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004588:	0011      	movs	r1, r2
 800458a:	18bb      	adds	r3, r7, r2
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a99      	ldr	r2, [pc, #612]	; (80047f4 <HAL_UART_IRQHandler+0x298>)
 8004590:	4013      	ands	r3, r2
 8004592:	2298      	movs	r2, #152	; 0x98
 8004594:	18bc      	adds	r4, r7, r2
 8004596:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8004598:	18bb      	adds	r3, r7, r2
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d114      	bne.n	80045ca <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80045a0:	187b      	adds	r3, r7, r1
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2220      	movs	r2, #32
 80045a6:	4013      	ands	r3, r2
 80045a8:	d00f      	beq.n	80045ca <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80045aa:	183b      	adds	r3, r7, r0
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2220      	movs	r2, #32
 80045b0:	4013      	ands	r3, r2
 80045b2:	d00a      	beq.n	80045ca <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d100      	bne.n	80045be <HAL_UART_IRQHandler+0x62>
 80045bc:	e29e      	b.n	8004afc <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	0010      	movs	r0, r2
 80045c6:	4798      	blx	r3
      }
      return;
 80045c8:	e298      	b.n	8004afc <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80045ca:	2398      	movs	r3, #152	; 0x98
 80045cc:	18fb      	adds	r3, r7, r3
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d100      	bne.n	80045d6 <HAL_UART_IRQHandler+0x7a>
 80045d4:	e114      	b.n	8004800 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80045d6:	239c      	movs	r3, #156	; 0x9c
 80045d8:	18fb      	adds	r3, r7, r3
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2201      	movs	r2, #1
 80045de:	4013      	ands	r3, r2
 80045e0:	d106      	bne.n	80045f0 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80045e2:	23a0      	movs	r3, #160	; 0xa0
 80045e4:	18fb      	adds	r3, r7, r3
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a83      	ldr	r2, [pc, #524]	; (80047f8 <HAL_UART_IRQHandler+0x29c>)
 80045ea:	4013      	ands	r3, r2
 80045ec:	d100      	bne.n	80045f0 <HAL_UART_IRQHandler+0x94>
 80045ee:	e107      	b.n	8004800 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80045f0:	23a4      	movs	r3, #164	; 0xa4
 80045f2:	18fb      	adds	r3, r7, r3
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2201      	movs	r2, #1
 80045f8:	4013      	ands	r3, r2
 80045fa:	d012      	beq.n	8004622 <HAL_UART_IRQHandler+0xc6>
 80045fc:	23a0      	movs	r3, #160	; 0xa0
 80045fe:	18fb      	adds	r3, r7, r3
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	2380      	movs	r3, #128	; 0x80
 8004604:	005b      	lsls	r3, r3, #1
 8004606:	4013      	ands	r3, r2
 8004608:	d00b      	beq.n	8004622 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2201      	movs	r2, #1
 8004610:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2284      	movs	r2, #132	; 0x84
 8004616:	589b      	ldr	r3, [r3, r2]
 8004618:	2201      	movs	r2, #1
 800461a:	431a      	orrs	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2184      	movs	r1, #132	; 0x84
 8004620:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004622:	23a4      	movs	r3, #164	; 0xa4
 8004624:	18fb      	adds	r3, r7, r3
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2202      	movs	r2, #2
 800462a:	4013      	ands	r3, r2
 800462c:	d011      	beq.n	8004652 <HAL_UART_IRQHandler+0xf6>
 800462e:	239c      	movs	r3, #156	; 0x9c
 8004630:	18fb      	adds	r3, r7, r3
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2201      	movs	r2, #1
 8004636:	4013      	ands	r3, r2
 8004638:	d00b      	beq.n	8004652 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2202      	movs	r2, #2
 8004640:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2284      	movs	r2, #132	; 0x84
 8004646:	589b      	ldr	r3, [r3, r2]
 8004648:	2204      	movs	r2, #4
 800464a:	431a      	orrs	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2184      	movs	r1, #132	; 0x84
 8004650:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004652:	23a4      	movs	r3, #164	; 0xa4
 8004654:	18fb      	adds	r3, r7, r3
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2204      	movs	r2, #4
 800465a:	4013      	ands	r3, r2
 800465c:	d011      	beq.n	8004682 <HAL_UART_IRQHandler+0x126>
 800465e:	239c      	movs	r3, #156	; 0x9c
 8004660:	18fb      	adds	r3, r7, r3
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2201      	movs	r2, #1
 8004666:	4013      	ands	r3, r2
 8004668:	d00b      	beq.n	8004682 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2204      	movs	r2, #4
 8004670:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2284      	movs	r2, #132	; 0x84
 8004676:	589b      	ldr	r3, [r3, r2]
 8004678:	2202      	movs	r2, #2
 800467a:	431a      	orrs	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2184      	movs	r1, #132	; 0x84
 8004680:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004682:	23a4      	movs	r3, #164	; 0xa4
 8004684:	18fb      	adds	r3, r7, r3
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2208      	movs	r2, #8
 800468a:	4013      	ands	r3, r2
 800468c:	d017      	beq.n	80046be <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800468e:	23a0      	movs	r3, #160	; 0xa0
 8004690:	18fb      	adds	r3, r7, r3
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2220      	movs	r2, #32
 8004696:	4013      	ands	r3, r2
 8004698:	d105      	bne.n	80046a6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800469a:	239c      	movs	r3, #156	; 0x9c
 800469c:	18fb      	adds	r3, r7, r3
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2201      	movs	r2, #1
 80046a2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80046a4:	d00b      	beq.n	80046be <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2208      	movs	r2, #8
 80046ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2284      	movs	r2, #132	; 0x84
 80046b2:	589b      	ldr	r3, [r3, r2]
 80046b4:	2208      	movs	r2, #8
 80046b6:	431a      	orrs	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2184      	movs	r1, #132	; 0x84
 80046bc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80046be:	23a4      	movs	r3, #164	; 0xa4
 80046c0:	18fb      	adds	r3, r7, r3
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	2380      	movs	r3, #128	; 0x80
 80046c6:	011b      	lsls	r3, r3, #4
 80046c8:	4013      	ands	r3, r2
 80046ca:	d013      	beq.n	80046f4 <HAL_UART_IRQHandler+0x198>
 80046cc:	23a0      	movs	r3, #160	; 0xa0
 80046ce:	18fb      	adds	r3, r7, r3
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	2380      	movs	r3, #128	; 0x80
 80046d4:	04db      	lsls	r3, r3, #19
 80046d6:	4013      	ands	r3, r2
 80046d8:	d00c      	beq.n	80046f4 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2280      	movs	r2, #128	; 0x80
 80046e0:	0112      	lsls	r2, r2, #4
 80046e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2284      	movs	r2, #132	; 0x84
 80046e8:	589b      	ldr	r3, [r3, r2]
 80046ea:	2220      	movs	r2, #32
 80046ec:	431a      	orrs	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2184      	movs	r1, #132	; 0x84
 80046f2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2284      	movs	r2, #132	; 0x84
 80046f8:	589b      	ldr	r3, [r3, r2]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d100      	bne.n	8004700 <HAL_UART_IRQHandler+0x1a4>
 80046fe:	e1ff      	b.n	8004b00 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004700:	23a4      	movs	r3, #164	; 0xa4
 8004702:	18fb      	adds	r3, r7, r3
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2220      	movs	r2, #32
 8004708:	4013      	ands	r3, r2
 800470a:	d00e      	beq.n	800472a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800470c:	23a0      	movs	r3, #160	; 0xa0
 800470e:	18fb      	adds	r3, r7, r3
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2220      	movs	r2, #32
 8004714:	4013      	ands	r3, r2
 8004716:	d008      	beq.n	800472a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800471c:	2b00      	cmp	r3, #0
 800471e:	d004      	beq.n	800472a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	0010      	movs	r0, r2
 8004728:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2284      	movs	r2, #132	; 0x84
 800472e:	589b      	ldr	r3, [r3, r2]
 8004730:	2194      	movs	r1, #148	; 0x94
 8004732:	187a      	adds	r2, r7, r1
 8004734:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	2240      	movs	r2, #64	; 0x40
 800473e:	4013      	ands	r3, r2
 8004740:	2b40      	cmp	r3, #64	; 0x40
 8004742:	d004      	beq.n	800474e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004744:	187b      	adds	r3, r7, r1
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2228      	movs	r2, #40	; 0x28
 800474a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800474c:	d047      	beq.n	80047de <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	0018      	movs	r0, r3
 8004752:	f000 fdc7 	bl	80052e4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	2240      	movs	r2, #64	; 0x40
 800475e:	4013      	ands	r3, r2
 8004760:	2b40      	cmp	r3, #64	; 0x40
 8004762:	d137      	bne.n	80047d4 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004764:	f3ef 8310 	mrs	r3, PRIMASK
 8004768:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800476a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800476c:	2090      	movs	r0, #144	; 0x90
 800476e:	183a      	adds	r2, r7, r0
 8004770:	6013      	str	r3, [r2, #0]
 8004772:	2301      	movs	r3, #1
 8004774:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004776:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004778:	f383 8810 	msr	PRIMASK, r3
}
 800477c:	46c0      	nop			; (mov r8, r8)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2140      	movs	r1, #64	; 0x40
 800478a:	438a      	bics	r2, r1
 800478c:	609a      	str	r2, [r3, #8]
 800478e:	183b      	adds	r3, r7, r0
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004794:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004796:	f383 8810 	msr	PRIMASK, r3
}
 800479a:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d012      	beq.n	80047ca <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047a8:	4a14      	ldr	r2, [pc, #80]	; (80047fc <HAL_UART_IRQHandler+0x2a0>)
 80047aa:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047b0:	0018      	movs	r0, r3
 80047b2:	f7fd fd6b 	bl	800228c <HAL_DMA_Abort_IT>
 80047b6:	1e03      	subs	r3, r0, #0
 80047b8:	d01a      	beq.n	80047f0 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047c4:	0018      	movs	r0, r3
 80047c6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047c8:	e012      	b.n	80047f0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	0018      	movs	r0, r3
 80047ce:	f7fc fd01 	bl	80011d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047d2:	e00d      	b.n	80047f0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	0018      	movs	r0, r3
 80047d8:	f7fc fcfc 	bl	80011d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047dc:	e008      	b.n	80047f0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	0018      	movs	r0, r3
 80047e2:	f7fc fcf7 	bl	80011d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2284      	movs	r2, #132	; 0x84
 80047ea:	2100      	movs	r1, #0
 80047ec:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80047ee:	e187      	b.n	8004b00 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047f0:	46c0      	nop			; (mov r8, r8)
    return;
 80047f2:	e185      	b.n	8004b00 <HAL_UART_IRQHandler+0x5a4>
 80047f4:	0000080f 	.word	0x0000080f
 80047f8:	04000120 	.word	0x04000120
 80047fc:	080053ad 	.word	0x080053ad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004804:	2b01      	cmp	r3, #1
 8004806:	d000      	beq.n	800480a <HAL_UART_IRQHandler+0x2ae>
 8004808:	e139      	b.n	8004a7e <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800480a:	23a4      	movs	r3, #164	; 0xa4
 800480c:	18fb      	adds	r3, r7, r3
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2210      	movs	r2, #16
 8004812:	4013      	ands	r3, r2
 8004814:	d100      	bne.n	8004818 <HAL_UART_IRQHandler+0x2bc>
 8004816:	e132      	b.n	8004a7e <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004818:	23a0      	movs	r3, #160	; 0xa0
 800481a:	18fb      	adds	r3, r7, r3
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2210      	movs	r2, #16
 8004820:	4013      	ands	r3, r2
 8004822:	d100      	bne.n	8004826 <HAL_UART_IRQHandler+0x2ca>
 8004824:	e12b      	b.n	8004a7e <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2210      	movs	r2, #16
 800482c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	2240      	movs	r2, #64	; 0x40
 8004836:	4013      	ands	r3, r2
 8004838:	2b40      	cmp	r3, #64	; 0x40
 800483a:	d000      	beq.n	800483e <HAL_UART_IRQHandler+0x2e2>
 800483c:	e09f      	b.n	800497e <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	685a      	ldr	r2, [r3, #4]
 8004846:	217e      	movs	r1, #126	; 0x7e
 8004848:	187b      	adds	r3, r7, r1
 800484a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800484c:	187b      	adds	r3, r7, r1
 800484e:	881b      	ldrh	r3, [r3, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d100      	bne.n	8004856 <HAL_UART_IRQHandler+0x2fa>
 8004854:	e156      	b.n	8004b04 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2258      	movs	r2, #88	; 0x58
 800485a:	5a9b      	ldrh	r3, [r3, r2]
 800485c:	187a      	adds	r2, r7, r1
 800485e:	8812      	ldrh	r2, [r2, #0]
 8004860:	429a      	cmp	r2, r3
 8004862:	d300      	bcc.n	8004866 <HAL_UART_IRQHandler+0x30a>
 8004864:	e14e      	b.n	8004b04 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	187a      	adds	r2, r7, r1
 800486a:	215a      	movs	r1, #90	; 0x5a
 800486c:	8812      	ldrh	r2, [r2, #0]
 800486e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	2b20      	cmp	r3, #32
 8004878:	d06f      	beq.n	800495a <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800487a:	f3ef 8310 	mrs	r3, PRIMASK
 800487e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004882:	67bb      	str	r3, [r7, #120]	; 0x78
 8004884:	2301      	movs	r3, #1
 8004886:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800488a:	f383 8810 	msr	PRIMASK, r3
}
 800488e:	46c0      	nop			; (mov r8, r8)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	499e      	ldr	r1, [pc, #632]	; (8004b14 <HAL_UART_IRQHandler+0x5b8>)
 800489c:	400a      	ands	r2, r1
 800489e:	601a      	str	r2, [r3, #0]
 80048a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048a2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048a6:	f383 8810 	msr	PRIMASK, r3
}
 80048aa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048ac:	f3ef 8310 	mrs	r3, PRIMASK
 80048b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80048b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048b4:	677b      	str	r3, [r7, #116]	; 0x74
 80048b6:	2301      	movs	r3, #1
 80048b8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048bc:	f383 8810 	msr	PRIMASK, r3
}
 80048c0:	46c0      	nop			; (mov r8, r8)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	689a      	ldr	r2, [r3, #8]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2101      	movs	r1, #1
 80048ce:	438a      	bics	r2, r1
 80048d0:	609a      	str	r2, [r3, #8]
 80048d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048d4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048d8:	f383 8810 	msr	PRIMASK, r3
}
 80048dc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048de:	f3ef 8310 	mrs	r3, PRIMASK
 80048e2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80048e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048e6:	673b      	str	r3, [r7, #112]	; 0x70
 80048e8:	2301      	movs	r3, #1
 80048ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048ee:	f383 8810 	msr	PRIMASK, r3
}
 80048f2:	46c0      	nop			; (mov r8, r8)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	689a      	ldr	r2, [r3, #8]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2140      	movs	r1, #64	; 0x40
 8004900:	438a      	bics	r2, r1
 8004902:	609a      	str	r2, [r3, #8]
 8004904:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004906:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800490a:	f383 8810 	msr	PRIMASK, r3
}
 800490e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2280      	movs	r2, #128	; 0x80
 8004914:	2120      	movs	r1, #32
 8004916:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800491e:	f3ef 8310 	mrs	r3, PRIMASK
 8004922:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004924:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004926:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004928:	2301      	movs	r3, #1
 800492a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800492c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800492e:	f383 8810 	msr	PRIMASK, r3
}
 8004932:	46c0      	nop			; (mov r8, r8)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2110      	movs	r1, #16
 8004940:	438a      	bics	r2, r1
 8004942:	601a      	str	r2, [r3, #0]
 8004944:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004946:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004948:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800494a:	f383 8810 	msr	PRIMASK, r3
}
 800494e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004954:	0018      	movs	r0, r3
 8004956:	f7fd fc61 	bl	800221c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2202      	movs	r2, #2
 800495e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2258      	movs	r2, #88	; 0x58
 8004964:	5a9a      	ldrh	r2, [r3, r2]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	215a      	movs	r1, #90	; 0x5a
 800496a:	5a5b      	ldrh	r3, [r3, r1]
 800496c:	b29b      	uxth	r3, r3
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	b29a      	uxth	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	0011      	movs	r1, r2
 8004976:	0018      	movs	r0, r3
 8004978:	f000 f8d8 	bl	8004b2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800497c:	e0c2      	b.n	8004b04 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2258      	movs	r2, #88	; 0x58
 8004982:	5a99      	ldrh	r1, [r3, r2]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	225a      	movs	r2, #90	; 0x5a
 8004988:	5a9b      	ldrh	r3, [r3, r2]
 800498a:	b29a      	uxth	r2, r3
 800498c:	208e      	movs	r0, #142	; 0x8e
 800498e:	183b      	adds	r3, r7, r0
 8004990:	1a8a      	subs	r2, r1, r2
 8004992:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	225a      	movs	r2, #90	; 0x5a
 8004998:	5a9b      	ldrh	r3, [r3, r2]
 800499a:	b29b      	uxth	r3, r3
 800499c:	2b00      	cmp	r3, #0
 800499e:	d100      	bne.n	80049a2 <HAL_UART_IRQHandler+0x446>
 80049a0:	e0b2      	b.n	8004b08 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 80049a2:	183b      	adds	r3, r7, r0
 80049a4:	881b      	ldrh	r3, [r3, #0]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d100      	bne.n	80049ac <HAL_UART_IRQHandler+0x450>
 80049aa:	e0ad      	b.n	8004b08 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049ac:	f3ef 8310 	mrs	r3, PRIMASK
 80049b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80049b2:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049b4:	2488      	movs	r4, #136	; 0x88
 80049b6:	193a      	adds	r2, r7, r4
 80049b8:	6013      	str	r3, [r2, #0]
 80049ba:	2301      	movs	r3, #1
 80049bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	f383 8810 	msr	PRIMASK, r3
}
 80049c4:	46c0      	nop			; (mov r8, r8)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4951      	ldr	r1, [pc, #324]	; (8004b18 <HAL_UART_IRQHandler+0x5bc>)
 80049d2:	400a      	ands	r2, r1
 80049d4:	601a      	str	r2, [r3, #0]
 80049d6:	193b      	adds	r3, r7, r4
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	f383 8810 	msr	PRIMASK, r3
}
 80049e2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049e4:	f3ef 8310 	mrs	r3, PRIMASK
 80049e8:	61bb      	str	r3, [r7, #24]
  return(result);
 80049ea:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ec:	2484      	movs	r4, #132	; 0x84
 80049ee:	193a      	adds	r2, r7, r4
 80049f0:	6013      	str	r3, [r2, #0]
 80049f2:	2301      	movs	r3, #1
 80049f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	f383 8810 	msr	PRIMASK, r3
}
 80049fc:	46c0      	nop			; (mov r8, r8)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	689a      	ldr	r2, [r3, #8]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2101      	movs	r1, #1
 8004a0a:	438a      	bics	r2, r1
 8004a0c:	609a      	str	r2, [r3, #8]
 8004a0e:	193b      	adds	r3, r7, r4
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a14:	6a3b      	ldr	r3, [r7, #32]
 8004a16:	f383 8810 	msr	PRIMASK, r3
}
 8004a1a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2280      	movs	r2, #128	; 0x80
 8004a20:	2120      	movs	r1, #32
 8004a22:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a30:	f3ef 8310 	mrs	r3, PRIMASK
 8004a34:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a38:	2480      	movs	r4, #128	; 0x80
 8004a3a:	193a      	adds	r2, r7, r4
 8004a3c:	6013      	str	r3, [r2, #0]
 8004a3e:	2301      	movs	r3, #1
 8004a40:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a44:	f383 8810 	msr	PRIMASK, r3
}
 8004a48:	46c0      	nop			; (mov r8, r8)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2110      	movs	r1, #16
 8004a56:	438a      	bics	r2, r1
 8004a58:	601a      	str	r2, [r3, #0]
 8004a5a:	193b      	adds	r3, r7, r4
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a62:	f383 8810 	msr	PRIMASK, r3
}
 8004a66:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a6e:	183b      	adds	r3, r7, r0
 8004a70:	881a      	ldrh	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	0011      	movs	r1, r2
 8004a76:	0018      	movs	r0, r3
 8004a78:	f000 f858 	bl	8004b2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a7c:	e044      	b.n	8004b08 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004a7e:	23a4      	movs	r3, #164	; 0xa4
 8004a80:	18fb      	adds	r3, r7, r3
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	2380      	movs	r3, #128	; 0x80
 8004a86:	035b      	lsls	r3, r3, #13
 8004a88:	4013      	ands	r3, r2
 8004a8a:	d010      	beq.n	8004aae <HAL_UART_IRQHandler+0x552>
 8004a8c:	239c      	movs	r3, #156	; 0x9c
 8004a8e:	18fb      	adds	r3, r7, r3
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	2380      	movs	r3, #128	; 0x80
 8004a94:	03db      	lsls	r3, r3, #15
 8004a96:	4013      	ands	r3, r2
 8004a98:	d009      	beq.n	8004aae <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2280      	movs	r2, #128	; 0x80
 8004aa0:	0352      	lsls	r2, r2, #13
 8004aa2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	0018      	movs	r0, r3
 8004aa8:	f000 fe7a 	bl	80057a0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004aac:	e02f      	b.n	8004b0e <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004aae:	23a4      	movs	r3, #164	; 0xa4
 8004ab0:	18fb      	adds	r3, r7, r3
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2280      	movs	r2, #128	; 0x80
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	d00f      	beq.n	8004ada <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004aba:	23a0      	movs	r3, #160	; 0xa0
 8004abc:	18fb      	adds	r3, r7, r3
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2280      	movs	r2, #128	; 0x80
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	d009      	beq.n	8004ada <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d01e      	beq.n	8004b0c <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	0010      	movs	r0, r2
 8004ad6:	4798      	blx	r3
    }
    return;
 8004ad8:	e018      	b.n	8004b0c <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004ada:	23a4      	movs	r3, #164	; 0xa4
 8004adc:	18fb      	adds	r3, r7, r3
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2240      	movs	r2, #64	; 0x40
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	d013      	beq.n	8004b0e <HAL_UART_IRQHandler+0x5b2>
 8004ae6:	23a0      	movs	r3, #160	; 0xa0
 8004ae8:	18fb      	adds	r3, r7, r3
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2240      	movs	r2, #64	; 0x40
 8004aee:	4013      	ands	r3, r2
 8004af0:	d00d      	beq.n	8004b0e <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	0018      	movs	r0, r3
 8004af6:	f000 fc70 	bl	80053da <UART_EndTransmit_IT>
    return;
 8004afa:	e008      	b.n	8004b0e <HAL_UART_IRQHandler+0x5b2>
      return;
 8004afc:	46c0      	nop			; (mov r8, r8)
 8004afe:	e006      	b.n	8004b0e <HAL_UART_IRQHandler+0x5b2>
    return;
 8004b00:	46c0      	nop			; (mov r8, r8)
 8004b02:	e004      	b.n	8004b0e <HAL_UART_IRQHandler+0x5b2>
      return;
 8004b04:	46c0      	nop			; (mov r8, r8)
 8004b06:	e002      	b.n	8004b0e <HAL_UART_IRQHandler+0x5b2>
      return;
 8004b08:	46c0      	nop			; (mov r8, r8)
 8004b0a:	e000      	b.n	8004b0e <HAL_UART_IRQHandler+0x5b2>
    return;
 8004b0c:	46c0      	nop			; (mov r8, r8)
  }

}
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	b02b      	add	sp, #172	; 0xac
 8004b12:	bd90      	pop	{r4, r7, pc}
 8004b14:	fffffeff 	.word	0xfffffeff
 8004b18:	fffffedf 	.word	0xfffffedf

08004b1c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004b24:	46c0      	nop			; (mov r8, r8)
 8004b26:	46bd      	mov	sp, r7
 8004b28:	b002      	add	sp, #8
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	000a      	movs	r2, r1
 8004b36:	1cbb      	adds	r3, r7, #2
 8004b38:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b3a:	46c0      	nop			; (mov r8, r8)
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	b002      	add	sp, #8
 8004b40:	bd80      	pop	{r7, pc}
	...

08004b44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b088      	sub	sp, #32
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b4c:	231e      	movs	r3, #30
 8004b4e:	18fb      	adds	r3, r7, r3
 8004b50:	2200      	movs	r2, #0
 8004b52:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	689a      	ldr	r2, [r3, #8]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	431a      	orrs	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	431a      	orrs	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	69db      	ldr	r3, [r3, #28]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a8d      	ldr	r2, [pc, #564]	; (8004da8 <UART_SetConfig+0x264>)
 8004b74:	4013      	ands	r3, r2
 8004b76:	0019      	movs	r1, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	697a      	ldr	r2, [r7, #20]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	4a88      	ldr	r2, [pc, #544]	; (8004dac <UART_SetConfig+0x268>)
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	0019      	movs	r1, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	68da      	ldr	r2, [r3, #12]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	430a      	orrs	r2, r1
 8004b98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a1b      	ldr	r3, [r3, #32]
 8004ba4:	697a      	ldr	r2, [r7, #20]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	4a7f      	ldr	r2, [pc, #508]	; (8004db0 <UART_SetConfig+0x26c>)
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	0019      	movs	r1, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	430a      	orrs	r2, r1
 8004bbe:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a7b      	ldr	r2, [pc, #492]	; (8004db4 <UART_SetConfig+0x270>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d127      	bne.n	8004c1a <UART_SetConfig+0xd6>
 8004bca:	4b7b      	ldr	r3, [pc, #492]	; (8004db8 <UART_SetConfig+0x274>)
 8004bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bce:	2203      	movs	r2, #3
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	2b03      	cmp	r3, #3
 8004bd4:	d00d      	beq.n	8004bf2 <UART_SetConfig+0xae>
 8004bd6:	d81b      	bhi.n	8004c10 <UART_SetConfig+0xcc>
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d014      	beq.n	8004c06 <UART_SetConfig+0xc2>
 8004bdc:	d818      	bhi.n	8004c10 <UART_SetConfig+0xcc>
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d002      	beq.n	8004be8 <UART_SetConfig+0xa4>
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d00a      	beq.n	8004bfc <UART_SetConfig+0xb8>
 8004be6:	e013      	b.n	8004c10 <UART_SetConfig+0xcc>
 8004be8:	231f      	movs	r3, #31
 8004bea:	18fb      	adds	r3, r7, r3
 8004bec:	2200      	movs	r2, #0
 8004bee:	701a      	strb	r2, [r3, #0]
 8004bf0:	e021      	b.n	8004c36 <UART_SetConfig+0xf2>
 8004bf2:	231f      	movs	r3, #31
 8004bf4:	18fb      	adds	r3, r7, r3
 8004bf6:	2202      	movs	r2, #2
 8004bf8:	701a      	strb	r2, [r3, #0]
 8004bfa:	e01c      	b.n	8004c36 <UART_SetConfig+0xf2>
 8004bfc:	231f      	movs	r3, #31
 8004bfe:	18fb      	adds	r3, r7, r3
 8004c00:	2204      	movs	r2, #4
 8004c02:	701a      	strb	r2, [r3, #0]
 8004c04:	e017      	b.n	8004c36 <UART_SetConfig+0xf2>
 8004c06:	231f      	movs	r3, #31
 8004c08:	18fb      	adds	r3, r7, r3
 8004c0a:	2208      	movs	r2, #8
 8004c0c:	701a      	strb	r2, [r3, #0]
 8004c0e:	e012      	b.n	8004c36 <UART_SetConfig+0xf2>
 8004c10:	231f      	movs	r3, #31
 8004c12:	18fb      	adds	r3, r7, r3
 8004c14:	2210      	movs	r2, #16
 8004c16:	701a      	strb	r2, [r3, #0]
 8004c18:	e00d      	b.n	8004c36 <UART_SetConfig+0xf2>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a67      	ldr	r2, [pc, #412]	; (8004dbc <UART_SetConfig+0x278>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d104      	bne.n	8004c2e <UART_SetConfig+0xea>
 8004c24:	231f      	movs	r3, #31
 8004c26:	18fb      	adds	r3, r7, r3
 8004c28:	2200      	movs	r2, #0
 8004c2a:	701a      	strb	r2, [r3, #0]
 8004c2c:	e003      	b.n	8004c36 <UART_SetConfig+0xf2>
 8004c2e:	231f      	movs	r3, #31
 8004c30:	18fb      	adds	r3, r7, r3
 8004c32:	2210      	movs	r2, #16
 8004c34:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	69da      	ldr	r2, [r3, #28]
 8004c3a:	2380      	movs	r3, #128	; 0x80
 8004c3c:	021b      	lsls	r3, r3, #8
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d15c      	bne.n	8004cfc <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8004c42:	231f      	movs	r3, #31
 8004c44:	18fb      	adds	r3, r7, r3
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	2b08      	cmp	r3, #8
 8004c4a:	d015      	beq.n	8004c78 <UART_SetConfig+0x134>
 8004c4c:	dc18      	bgt.n	8004c80 <UART_SetConfig+0x13c>
 8004c4e:	2b04      	cmp	r3, #4
 8004c50:	d00d      	beq.n	8004c6e <UART_SetConfig+0x12a>
 8004c52:	dc15      	bgt.n	8004c80 <UART_SetConfig+0x13c>
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d002      	beq.n	8004c5e <UART_SetConfig+0x11a>
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d005      	beq.n	8004c68 <UART_SetConfig+0x124>
 8004c5c:	e010      	b.n	8004c80 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c5e:	f7fe fa89 	bl	8003174 <HAL_RCC_GetPCLK1Freq>
 8004c62:	0003      	movs	r3, r0
 8004c64:	61bb      	str	r3, [r7, #24]
        break;
 8004c66:	e012      	b.n	8004c8e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c68:	4b55      	ldr	r3, [pc, #340]	; (8004dc0 <UART_SetConfig+0x27c>)
 8004c6a:	61bb      	str	r3, [r7, #24]
        break;
 8004c6c:	e00f      	b.n	8004c8e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c6e:	f7fe fa05 	bl	800307c <HAL_RCC_GetSysClockFreq>
 8004c72:	0003      	movs	r3, r0
 8004c74:	61bb      	str	r3, [r7, #24]
        break;
 8004c76:	e00a      	b.n	8004c8e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c78:	2380      	movs	r3, #128	; 0x80
 8004c7a:	021b      	lsls	r3, r3, #8
 8004c7c:	61bb      	str	r3, [r7, #24]
        break;
 8004c7e:	e006      	b.n	8004c8e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8004c80:	2300      	movs	r3, #0
 8004c82:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c84:	231e      	movs	r3, #30
 8004c86:	18fb      	adds	r3, r7, r3
 8004c88:	2201      	movs	r2, #1
 8004c8a:	701a      	strb	r2, [r3, #0]
        break;
 8004c8c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d100      	bne.n	8004c96 <UART_SetConfig+0x152>
 8004c94:	e07a      	b.n	8004d8c <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	005a      	lsls	r2, r3, #1
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	085b      	lsrs	r3, r3, #1
 8004ca0:	18d2      	adds	r2, r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	0019      	movs	r1, r3
 8004ca8:	0010      	movs	r0, r2
 8004caa:	f7fb fa2d 	bl	8000108 <__udivsi3>
 8004cae:	0003      	movs	r3, r0
 8004cb0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	2b0f      	cmp	r3, #15
 8004cb6:	d91c      	bls.n	8004cf2 <UART_SetConfig+0x1ae>
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	2380      	movs	r3, #128	; 0x80
 8004cbc:	025b      	lsls	r3, r3, #9
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d217      	bcs.n	8004cf2 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	200e      	movs	r0, #14
 8004cc8:	183b      	adds	r3, r7, r0
 8004cca:	210f      	movs	r1, #15
 8004ccc:	438a      	bics	r2, r1
 8004cce:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	085b      	lsrs	r3, r3, #1
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	2207      	movs	r2, #7
 8004cd8:	4013      	ands	r3, r2
 8004cda:	b299      	uxth	r1, r3
 8004cdc:	183b      	adds	r3, r7, r0
 8004cde:	183a      	adds	r2, r7, r0
 8004ce0:	8812      	ldrh	r2, [r2, #0]
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	183a      	adds	r2, r7, r0
 8004cec:	8812      	ldrh	r2, [r2, #0]
 8004cee:	60da      	str	r2, [r3, #12]
 8004cf0:	e04c      	b.n	8004d8c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004cf2:	231e      	movs	r3, #30
 8004cf4:	18fb      	adds	r3, r7, r3
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	701a      	strb	r2, [r3, #0]
 8004cfa:	e047      	b.n	8004d8c <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004cfc:	231f      	movs	r3, #31
 8004cfe:	18fb      	adds	r3, r7, r3
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	2b08      	cmp	r3, #8
 8004d04:	d015      	beq.n	8004d32 <UART_SetConfig+0x1ee>
 8004d06:	dc18      	bgt.n	8004d3a <UART_SetConfig+0x1f6>
 8004d08:	2b04      	cmp	r3, #4
 8004d0a:	d00d      	beq.n	8004d28 <UART_SetConfig+0x1e4>
 8004d0c:	dc15      	bgt.n	8004d3a <UART_SetConfig+0x1f6>
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d002      	beq.n	8004d18 <UART_SetConfig+0x1d4>
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d005      	beq.n	8004d22 <UART_SetConfig+0x1de>
 8004d16:	e010      	b.n	8004d3a <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d18:	f7fe fa2c 	bl	8003174 <HAL_RCC_GetPCLK1Freq>
 8004d1c:	0003      	movs	r3, r0
 8004d1e:	61bb      	str	r3, [r7, #24]
        break;
 8004d20:	e012      	b.n	8004d48 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d22:	4b27      	ldr	r3, [pc, #156]	; (8004dc0 <UART_SetConfig+0x27c>)
 8004d24:	61bb      	str	r3, [r7, #24]
        break;
 8004d26:	e00f      	b.n	8004d48 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d28:	f7fe f9a8 	bl	800307c <HAL_RCC_GetSysClockFreq>
 8004d2c:	0003      	movs	r3, r0
 8004d2e:	61bb      	str	r3, [r7, #24]
        break;
 8004d30:	e00a      	b.n	8004d48 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d32:	2380      	movs	r3, #128	; 0x80
 8004d34:	021b      	lsls	r3, r3, #8
 8004d36:	61bb      	str	r3, [r7, #24]
        break;
 8004d38:	e006      	b.n	8004d48 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d3e:	231e      	movs	r3, #30
 8004d40:	18fb      	adds	r3, r7, r3
 8004d42:	2201      	movs	r2, #1
 8004d44:	701a      	strb	r2, [r3, #0]
        break;
 8004d46:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d01e      	beq.n	8004d8c <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	085a      	lsrs	r2, r3, #1
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	18d2      	adds	r2, r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	0019      	movs	r1, r3
 8004d5e:	0010      	movs	r0, r2
 8004d60:	f7fb f9d2 	bl	8000108 <__udivsi3>
 8004d64:	0003      	movs	r3, r0
 8004d66:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	2b0f      	cmp	r3, #15
 8004d6c:	d90a      	bls.n	8004d84 <UART_SetConfig+0x240>
 8004d6e:	693a      	ldr	r2, [r7, #16]
 8004d70:	2380      	movs	r3, #128	; 0x80
 8004d72:	025b      	lsls	r3, r3, #9
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d205      	bcs.n	8004d84 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	60da      	str	r2, [r3, #12]
 8004d82:	e003      	b.n	8004d8c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004d84:	231e      	movs	r3, #30
 8004d86:	18fb      	adds	r3, r7, r3
 8004d88:	2201      	movs	r2, #1
 8004d8a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004d98:	231e      	movs	r3, #30
 8004d9a:	18fb      	adds	r3, r7, r3
 8004d9c:	781b      	ldrb	r3, [r3, #0]
}
 8004d9e:	0018      	movs	r0, r3
 8004da0:	46bd      	mov	sp, r7
 8004da2:	b008      	add	sp, #32
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	46c0      	nop			; (mov r8, r8)
 8004da8:	efff69f3 	.word	0xefff69f3
 8004dac:	ffffcfff 	.word	0xffffcfff
 8004db0:	fffff4ff 	.word	0xfffff4ff
 8004db4:	40013800 	.word	0x40013800
 8004db8:	40021000 	.word	0x40021000
 8004dbc:	40004400 	.word	0x40004400
 8004dc0:	007a1200 	.word	0x007a1200

08004dc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	d00b      	beq.n	8004dee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	4a4a      	ldr	r2, [pc, #296]	; (8004f08 <UART_AdvFeatureConfig+0x144>)
 8004dde:	4013      	ands	r3, r2
 8004de0:	0019      	movs	r1, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	430a      	orrs	r2, r1
 8004dec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df2:	2202      	movs	r2, #2
 8004df4:	4013      	ands	r3, r2
 8004df6:	d00b      	beq.n	8004e10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	4a43      	ldr	r2, [pc, #268]	; (8004f0c <UART_AdvFeatureConfig+0x148>)
 8004e00:	4013      	ands	r3, r2
 8004e02:	0019      	movs	r1, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e14:	2204      	movs	r2, #4
 8004e16:	4013      	ands	r3, r2
 8004e18:	d00b      	beq.n	8004e32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	4a3b      	ldr	r2, [pc, #236]	; (8004f10 <UART_AdvFeatureConfig+0x14c>)
 8004e22:	4013      	ands	r3, r2
 8004e24:	0019      	movs	r1, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e36:	2208      	movs	r2, #8
 8004e38:	4013      	ands	r3, r2
 8004e3a:	d00b      	beq.n	8004e54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	4a34      	ldr	r2, [pc, #208]	; (8004f14 <UART_AdvFeatureConfig+0x150>)
 8004e44:	4013      	ands	r3, r2
 8004e46:	0019      	movs	r1, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	430a      	orrs	r2, r1
 8004e52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e58:	2210      	movs	r2, #16
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	d00b      	beq.n	8004e76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	4a2c      	ldr	r2, [pc, #176]	; (8004f18 <UART_AdvFeatureConfig+0x154>)
 8004e66:	4013      	ands	r3, r2
 8004e68:	0019      	movs	r1, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	430a      	orrs	r2, r1
 8004e74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7a:	2220      	movs	r2, #32
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	d00b      	beq.n	8004e98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	4a25      	ldr	r2, [pc, #148]	; (8004f1c <UART_AdvFeatureConfig+0x158>)
 8004e88:	4013      	ands	r3, r2
 8004e8a:	0019      	movs	r1, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	430a      	orrs	r2, r1
 8004e96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9c:	2240      	movs	r2, #64	; 0x40
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	d01d      	beq.n	8004ede <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	4a1d      	ldr	r2, [pc, #116]	; (8004f20 <UART_AdvFeatureConfig+0x15c>)
 8004eaa:	4013      	ands	r3, r2
 8004eac:	0019      	movs	r1, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ebe:	2380      	movs	r3, #128	; 0x80
 8004ec0:	035b      	lsls	r3, r3, #13
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d10b      	bne.n	8004ede <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	4a15      	ldr	r2, [pc, #84]	; (8004f24 <UART_AdvFeatureConfig+0x160>)
 8004ece:	4013      	ands	r3, r2
 8004ed0:	0019      	movs	r1, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	430a      	orrs	r2, r1
 8004edc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee2:	2280      	movs	r2, #128	; 0x80
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	d00b      	beq.n	8004f00 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	4a0e      	ldr	r2, [pc, #56]	; (8004f28 <UART_AdvFeatureConfig+0x164>)
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	0019      	movs	r1, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	430a      	orrs	r2, r1
 8004efe:	605a      	str	r2, [r3, #4]
  }
}
 8004f00:	46c0      	nop			; (mov r8, r8)
 8004f02:	46bd      	mov	sp, r7
 8004f04:	b002      	add	sp, #8
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	fffdffff 	.word	0xfffdffff
 8004f0c:	fffeffff 	.word	0xfffeffff
 8004f10:	fffbffff 	.word	0xfffbffff
 8004f14:	ffff7fff 	.word	0xffff7fff
 8004f18:	ffffefff 	.word	0xffffefff
 8004f1c:	ffffdfff 	.word	0xffffdfff
 8004f20:	ffefffff 	.word	0xffefffff
 8004f24:	ff9fffff 	.word	0xff9fffff
 8004f28:	fff7ffff 	.word	0xfff7ffff

08004f2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b092      	sub	sp, #72	; 0x48
 8004f30:	af02      	add	r7, sp, #8
 8004f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2284      	movs	r2, #132	; 0x84
 8004f38:	2100      	movs	r1, #0
 8004f3a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f3c:	f7fc fbea 	bl	8001714 <HAL_GetTick>
 8004f40:	0003      	movs	r3, r0
 8004f42:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2208      	movs	r2, #8
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	2b08      	cmp	r3, #8
 8004f50:	d12c      	bne.n	8004fac <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f54:	2280      	movs	r2, #128	; 0x80
 8004f56:	0391      	lsls	r1, r2, #14
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	4a46      	ldr	r2, [pc, #280]	; (8005074 <UART_CheckIdleState+0x148>)
 8004f5c:	9200      	str	r2, [sp, #0]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f000 f88c 	bl	800507c <UART_WaitOnFlagUntilTimeout>
 8004f64:	1e03      	subs	r3, r0, #0
 8004f66:	d021      	beq.n	8004fac <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f68:	f3ef 8310 	mrs	r3, PRIMASK
 8004f6c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004f70:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f72:	2301      	movs	r3, #1
 8004f74:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f78:	f383 8810 	msr	PRIMASK, r3
}
 8004f7c:	46c0      	nop			; (mov r8, r8)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2180      	movs	r1, #128	; 0x80
 8004f8a:	438a      	bics	r2, r1
 8004f8c:	601a      	str	r2, [r3, #0]
 8004f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f90:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f94:	f383 8810 	msr	PRIMASK, r3
}
 8004f98:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2220      	movs	r2, #32
 8004f9e:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2278      	movs	r2, #120	; 0x78
 8004fa4:	2100      	movs	r1, #0
 8004fa6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e05f      	b.n	800506c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2204      	movs	r2, #4
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	2b04      	cmp	r3, #4
 8004fb8:	d146      	bne.n	8005048 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fbc:	2280      	movs	r2, #128	; 0x80
 8004fbe:	03d1      	lsls	r1, r2, #15
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	4a2c      	ldr	r2, [pc, #176]	; (8005074 <UART_CheckIdleState+0x148>)
 8004fc4:	9200      	str	r2, [sp, #0]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f000 f858 	bl	800507c <UART_WaitOnFlagUntilTimeout>
 8004fcc:	1e03      	subs	r3, r0, #0
 8004fce:	d03b      	beq.n	8005048 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fd0:	f3ef 8310 	mrs	r3, PRIMASK
 8004fd4:	60fb      	str	r3, [r7, #12]
  return(result);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fd8:	637b      	str	r3, [r7, #52]	; 0x34
 8004fda:	2301      	movs	r3, #1
 8004fdc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	f383 8810 	msr	PRIMASK, r3
}
 8004fe4:	46c0      	nop			; (mov r8, r8)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4921      	ldr	r1, [pc, #132]	; (8005078 <UART_CheckIdleState+0x14c>)
 8004ff2:	400a      	ands	r2, r1
 8004ff4:	601a      	str	r2, [r3, #0]
 8004ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ff8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	f383 8810 	msr	PRIMASK, r3
}
 8005000:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005002:	f3ef 8310 	mrs	r3, PRIMASK
 8005006:	61bb      	str	r3, [r7, #24]
  return(result);
 8005008:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800500a:	633b      	str	r3, [r7, #48]	; 0x30
 800500c:	2301      	movs	r3, #1
 800500e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	f383 8810 	msr	PRIMASK, r3
}
 8005016:	46c0      	nop			; (mov r8, r8)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	689a      	ldr	r2, [r3, #8]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2101      	movs	r1, #1
 8005024:	438a      	bics	r2, r1
 8005026:	609a      	str	r2, [r3, #8]
 8005028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800502c:	6a3b      	ldr	r3, [r7, #32]
 800502e:	f383 8810 	msr	PRIMASK, r3
}
 8005032:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2280      	movs	r2, #128	; 0x80
 8005038:	2120      	movs	r1, #32
 800503a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2278      	movs	r2, #120	; 0x78
 8005040:	2100      	movs	r1, #0
 8005042:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e011      	b.n	800506c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2220      	movs	r2, #32
 800504c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2280      	movs	r2, #128	; 0x80
 8005052:	2120      	movs	r1, #32
 8005054:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2278      	movs	r2, #120	; 0x78
 8005066:	2100      	movs	r1, #0
 8005068:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800506a:	2300      	movs	r3, #0
}
 800506c:	0018      	movs	r0, r3
 800506e:	46bd      	mov	sp, r7
 8005070:	b010      	add	sp, #64	; 0x40
 8005072:	bd80      	pop	{r7, pc}
 8005074:	01ffffff 	.word	0x01ffffff
 8005078:	fffffedf 	.word	0xfffffedf

0800507c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	603b      	str	r3, [r7, #0]
 8005088:	1dfb      	adds	r3, r7, #7
 800508a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800508c:	e04b      	b.n	8005126 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	3301      	adds	r3, #1
 8005092:	d048      	beq.n	8005126 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005094:	f7fc fb3e 	bl	8001714 <HAL_GetTick>
 8005098:	0002      	movs	r2, r0
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	69ba      	ldr	r2, [r7, #24]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d302      	bcc.n	80050aa <UART_WaitOnFlagUntilTimeout+0x2e>
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d101      	bne.n	80050ae <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e04b      	b.n	8005146 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2204      	movs	r2, #4
 80050b6:	4013      	ands	r3, r2
 80050b8:	d035      	beq.n	8005126 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	69db      	ldr	r3, [r3, #28]
 80050c0:	2208      	movs	r2, #8
 80050c2:	4013      	ands	r3, r2
 80050c4:	2b08      	cmp	r3, #8
 80050c6:	d111      	bne.n	80050ec <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2208      	movs	r2, #8
 80050ce:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	0018      	movs	r0, r3
 80050d4:	f000 f906 	bl	80052e4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2284      	movs	r2, #132	; 0x84
 80050dc:	2108      	movs	r1, #8
 80050de:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2278      	movs	r2, #120	; 0x78
 80050e4:	2100      	movs	r1, #0
 80050e6:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e02c      	b.n	8005146 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	69da      	ldr	r2, [r3, #28]
 80050f2:	2380      	movs	r3, #128	; 0x80
 80050f4:	011b      	lsls	r3, r3, #4
 80050f6:	401a      	ands	r2, r3
 80050f8:	2380      	movs	r3, #128	; 0x80
 80050fa:	011b      	lsls	r3, r3, #4
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d112      	bne.n	8005126 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2280      	movs	r2, #128	; 0x80
 8005106:	0112      	lsls	r2, r2, #4
 8005108:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	0018      	movs	r0, r3
 800510e:	f000 f8e9 	bl	80052e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2284      	movs	r2, #132	; 0x84
 8005116:	2120      	movs	r1, #32
 8005118:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2278      	movs	r2, #120	; 0x78
 800511e:	2100      	movs	r1, #0
 8005120:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e00f      	b.n	8005146 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	69db      	ldr	r3, [r3, #28]
 800512c:	68ba      	ldr	r2, [r7, #8]
 800512e:	4013      	ands	r3, r2
 8005130:	68ba      	ldr	r2, [r7, #8]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	425a      	negs	r2, r3
 8005136:	4153      	adcs	r3, r2
 8005138:	b2db      	uxtb	r3, r3
 800513a:	001a      	movs	r2, r3
 800513c:	1dfb      	adds	r3, r7, #7
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	429a      	cmp	r2, r3
 8005142:	d0a4      	beq.n	800508e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	0018      	movs	r0, r3
 8005148:	46bd      	mov	sp, r7
 800514a:	b004      	add	sp, #16
 800514c:	bd80      	pop	{r7, pc}
	...

08005150 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b090      	sub	sp, #64	; 0x40
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	1dbb      	adds	r3, r7, #6
 800515c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	68ba      	ldr	r2, [r7, #8]
 8005162:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	1dba      	adds	r2, r7, #6
 8005168:	2158      	movs	r1, #88	; 0x58
 800516a:	8812      	ldrh	r2, [r2, #0]
 800516c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	1dba      	adds	r2, r7, #6
 8005172:	215a      	movs	r1, #90	; 0x5a
 8005174:	8812      	ldrh	r2, [r2, #0]
 8005176:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	689a      	ldr	r2, [r3, #8]
 8005182:	2380      	movs	r3, #128	; 0x80
 8005184:	015b      	lsls	r3, r3, #5
 8005186:	429a      	cmp	r2, r3
 8005188:	d10d      	bne.n	80051a6 <UART_Start_Receive_IT+0x56>
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d104      	bne.n	800519c <UART_Start_Receive_IT+0x4c>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	225c      	movs	r2, #92	; 0x5c
 8005196:	4950      	ldr	r1, [pc, #320]	; (80052d8 <UART_Start_Receive_IT+0x188>)
 8005198:	5299      	strh	r1, [r3, r2]
 800519a:	e02e      	b.n	80051fa <UART_Start_Receive_IT+0xaa>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	225c      	movs	r2, #92	; 0x5c
 80051a0:	21ff      	movs	r1, #255	; 0xff
 80051a2:	5299      	strh	r1, [r3, r2]
 80051a4:	e029      	b.n	80051fa <UART_Start_Receive_IT+0xaa>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d10d      	bne.n	80051ca <UART_Start_Receive_IT+0x7a>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d104      	bne.n	80051c0 <UART_Start_Receive_IT+0x70>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	225c      	movs	r2, #92	; 0x5c
 80051ba:	21ff      	movs	r1, #255	; 0xff
 80051bc:	5299      	strh	r1, [r3, r2]
 80051be:	e01c      	b.n	80051fa <UART_Start_Receive_IT+0xaa>
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	225c      	movs	r2, #92	; 0x5c
 80051c4:	217f      	movs	r1, #127	; 0x7f
 80051c6:	5299      	strh	r1, [r3, r2]
 80051c8:	e017      	b.n	80051fa <UART_Start_Receive_IT+0xaa>
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	689a      	ldr	r2, [r3, #8]
 80051ce:	2380      	movs	r3, #128	; 0x80
 80051d0:	055b      	lsls	r3, r3, #21
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d10d      	bne.n	80051f2 <UART_Start_Receive_IT+0xa2>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d104      	bne.n	80051e8 <UART_Start_Receive_IT+0x98>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	225c      	movs	r2, #92	; 0x5c
 80051e2:	217f      	movs	r1, #127	; 0x7f
 80051e4:	5299      	strh	r1, [r3, r2]
 80051e6:	e008      	b.n	80051fa <UART_Start_Receive_IT+0xaa>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	225c      	movs	r2, #92	; 0x5c
 80051ec:	213f      	movs	r1, #63	; 0x3f
 80051ee:	5299      	strh	r1, [r3, r2]
 80051f0:	e003      	b.n	80051fa <UART_Start_Receive_IT+0xaa>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	225c      	movs	r2, #92	; 0x5c
 80051f6:	2100      	movs	r1, #0
 80051f8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2284      	movs	r2, #132	; 0x84
 80051fe:	2100      	movs	r1, #0
 8005200:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2280      	movs	r2, #128	; 0x80
 8005206:	2122      	movs	r1, #34	; 0x22
 8005208:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800520a:	f3ef 8310 	mrs	r3, PRIMASK
 800520e:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005210:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005212:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005214:	2301      	movs	r3, #1
 8005216:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800521a:	f383 8810 	msr	PRIMASK, r3
}
 800521e:	46c0      	nop			; (mov r8, r8)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	689a      	ldr	r2, [r3, #8]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2101      	movs	r1, #1
 800522c:	430a      	orrs	r2, r1
 800522e:	609a      	str	r2, [r3, #8]
 8005230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005232:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005236:	f383 8810 	msr	PRIMASK, r3
}
 800523a:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	689a      	ldr	r2, [r3, #8]
 8005240:	2380      	movs	r3, #128	; 0x80
 8005242:	015b      	lsls	r3, r3, #5
 8005244:	429a      	cmp	r2, r3
 8005246:	d107      	bne.n	8005258 <UART_Start_Receive_IT+0x108>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d103      	bne.n	8005258 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	4a22      	ldr	r2, [pc, #136]	; (80052dc <UART_Start_Receive_IT+0x18c>)
 8005254:	669a      	str	r2, [r3, #104]	; 0x68
 8005256:	e002      	b.n	800525e <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	4a21      	ldr	r2, [pc, #132]	; (80052e0 <UART_Start_Receive_IT+0x190>)
 800525c:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d019      	beq.n	800529a <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005266:	f3ef 8310 	mrs	r3, PRIMASK
 800526a:	61fb      	str	r3, [r7, #28]
  return(result);
 800526c:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800526e:	637b      	str	r3, [r7, #52]	; 0x34
 8005270:	2301      	movs	r3, #1
 8005272:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005274:	6a3b      	ldr	r3, [r7, #32]
 8005276:	f383 8810 	msr	PRIMASK, r3
}
 800527a:	46c0      	nop			; (mov r8, r8)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2190      	movs	r1, #144	; 0x90
 8005288:	0049      	lsls	r1, r1, #1
 800528a:	430a      	orrs	r2, r1
 800528c:	601a      	str	r2, [r3, #0]
 800528e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005290:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005294:	f383 8810 	msr	PRIMASK, r3
}
 8005298:	e018      	b.n	80052cc <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800529a:	f3ef 8310 	mrs	r3, PRIMASK
 800529e:	613b      	str	r3, [r7, #16]
  return(result);
 80052a0:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80052a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80052a4:	2301      	movs	r3, #1
 80052a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	f383 8810 	msr	PRIMASK, r3
}
 80052ae:	46c0      	nop			; (mov r8, r8)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2120      	movs	r1, #32
 80052bc:	430a      	orrs	r2, r1
 80052be:	601a      	str	r2, [r3, #0]
 80052c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	f383 8810 	msr	PRIMASK, r3
}
 80052ca:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	0018      	movs	r0, r3
 80052d0:	46bd      	mov	sp, r7
 80052d2:	b010      	add	sp, #64	; 0x40
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	46c0      	nop			; (mov r8, r8)
 80052d8:	000001ff 	.word	0x000001ff
 80052dc:	080055e9 	.word	0x080055e9
 80052e0:	08005431 	.word	0x08005431

080052e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b08e      	sub	sp, #56	; 0x38
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052ec:	f3ef 8310 	mrs	r3, PRIMASK
 80052f0:	617b      	str	r3, [r7, #20]
  return(result);
 80052f2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052f4:	637b      	str	r3, [r7, #52]	; 0x34
 80052f6:	2301      	movs	r3, #1
 80052f8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	f383 8810 	msr	PRIMASK, r3
}
 8005300:	46c0      	nop			; (mov r8, r8)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4926      	ldr	r1, [pc, #152]	; (80053a8 <UART_EndRxTransfer+0xc4>)
 800530e:	400a      	ands	r2, r1
 8005310:	601a      	str	r2, [r3, #0]
 8005312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005314:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	f383 8810 	msr	PRIMASK, r3
}
 800531c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800531e:	f3ef 8310 	mrs	r3, PRIMASK
 8005322:	623b      	str	r3, [r7, #32]
  return(result);
 8005324:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005326:	633b      	str	r3, [r7, #48]	; 0x30
 8005328:	2301      	movs	r3, #1
 800532a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800532c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532e:	f383 8810 	msr	PRIMASK, r3
}
 8005332:	46c0      	nop			; (mov r8, r8)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	689a      	ldr	r2, [r3, #8]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2101      	movs	r1, #1
 8005340:	438a      	bics	r2, r1
 8005342:	609a      	str	r2, [r3, #8]
 8005344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005346:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534a:	f383 8810 	msr	PRIMASK, r3
}
 800534e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005354:	2b01      	cmp	r3, #1
 8005356:	d118      	bne.n	800538a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005358:	f3ef 8310 	mrs	r3, PRIMASK
 800535c:	60bb      	str	r3, [r7, #8]
  return(result);
 800535e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005360:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005362:	2301      	movs	r3, #1
 8005364:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f383 8810 	msr	PRIMASK, r3
}
 800536c:	46c0      	nop			; (mov r8, r8)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2110      	movs	r1, #16
 800537a:	438a      	bics	r2, r1
 800537c:	601a      	str	r2, [r3, #0]
 800537e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005380:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	f383 8810 	msr	PRIMASK, r3
}
 8005388:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2280      	movs	r2, #128	; 0x80
 800538e:	2120      	movs	r1, #32
 8005390:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800539e:	46c0      	nop			; (mov r8, r8)
 80053a0:	46bd      	mov	sp, r7
 80053a2:	b00e      	add	sp, #56	; 0x38
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	46c0      	nop			; (mov r8, r8)
 80053a8:	fffffedf 	.word	0xfffffedf

080053ac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	225a      	movs	r2, #90	; 0x5a
 80053be:	2100      	movs	r1, #0
 80053c0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2252      	movs	r2, #82	; 0x52
 80053c6:	2100      	movs	r1, #0
 80053c8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	0018      	movs	r0, r3
 80053ce:	f7fb ff01 	bl	80011d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053d2:	46c0      	nop			; (mov r8, r8)
 80053d4:	46bd      	mov	sp, r7
 80053d6:	b004      	add	sp, #16
 80053d8:	bd80      	pop	{r7, pc}

080053da <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053da:	b580      	push	{r7, lr}
 80053dc:	b086      	sub	sp, #24
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053e2:	f3ef 8310 	mrs	r3, PRIMASK
 80053e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80053e8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80053ea:	617b      	str	r3, [r7, #20]
 80053ec:	2301      	movs	r3, #1
 80053ee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f383 8810 	msr	PRIMASK, r3
}
 80053f6:	46c0      	nop			; (mov r8, r8)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2140      	movs	r1, #64	; 0x40
 8005404:	438a      	bics	r2, r1
 8005406:	601a      	str	r2, [r3, #0]
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	f383 8810 	msr	PRIMASK, r3
}
 8005412:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2220      	movs	r2, #32
 8005418:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	0018      	movs	r0, r3
 8005424:	f7ff fb7a 	bl	8004b1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005428:	46c0      	nop			; (mov r8, r8)
 800542a:	46bd      	mov	sp, r7
 800542c:	b006      	add	sp, #24
 800542e:	bd80      	pop	{r7, pc}

08005430 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b094      	sub	sp, #80	; 0x50
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005438:	204e      	movs	r0, #78	; 0x4e
 800543a:	183b      	adds	r3, r7, r0
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	215c      	movs	r1, #92	; 0x5c
 8005440:	5a52      	ldrh	r2, [r2, r1]
 8005442:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2280      	movs	r2, #128	; 0x80
 8005448:	589b      	ldr	r3, [r3, r2]
 800544a:	2b22      	cmp	r3, #34	; 0x22
 800544c:	d000      	beq.n	8005450 <UART_RxISR_8BIT+0x20>
 800544e:	e0ba      	b.n	80055c6 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	214c      	movs	r1, #76	; 0x4c
 8005456:	187b      	adds	r3, r7, r1
 8005458:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800545a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800545c:	187b      	adds	r3, r7, r1
 800545e:	881b      	ldrh	r3, [r3, #0]
 8005460:	b2da      	uxtb	r2, r3
 8005462:	183b      	adds	r3, r7, r0
 8005464:	881b      	ldrh	r3, [r3, #0]
 8005466:	b2d9      	uxtb	r1, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800546c:	400a      	ands	r2, r1
 800546e:	b2d2      	uxtb	r2, r2
 8005470:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005476:	1c5a      	adds	r2, r3, #1
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	225a      	movs	r2, #90	; 0x5a
 8005480:	5a9b      	ldrh	r3, [r3, r2]
 8005482:	b29b      	uxth	r3, r3
 8005484:	3b01      	subs	r3, #1
 8005486:	b299      	uxth	r1, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	225a      	movs	r2, #90	; 0x5a
 800548c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	225a      	movs	r2, #90	; 0x5a
 8005492:	5a9b      	ldrh	r3, [r3, r2]
 8005494:	b29b      	uxth	r3, r3
 8005496:	2b00      	cmp	r3, #0
 8005498:	d000      	beq.n	800549c <UART_RxISR_8BIT+0x6c>
 800549a:	e09c      	b.n	80055d6 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800549c:	f3ef 8310 	mrs	r3, PRIMASK
 80054a0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80054a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80054a6:	2301      	movs	r3, #1
 80054a8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ac:	f383 8810 	msr	PRIMASK, r3
}
 80054b0:	46c0      	nop			; (mov r8, r8)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4948      	ldr	r1, [pc, #288]	; (80055e0 <UART_RxISR_8BIT+0x1b0>)
 80054be:	400a      	ands	r2, r1
 80054c0:	601a      	str	r2, [r3, #0]
 80054c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c8:	f383 8810 	msr	PRIMASK, r3
}
 80054cc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054ce:	f3ef 8310 	mrs	r3, PRIMASK
 80054d2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80054d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054d6:	647b      	str	r3, [r7, #68]	; 0x44
 80054d8:	2301      	movs	r3, #1
 80054da:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054de:	f383 8810 	msr	PRIMASK, r3
}
 80054e2:	46c0      	nop			; (mov r8, r8)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	689a      	ldr	r2, [r3, #8]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2101      	movs	r1, #1
 80054f0:	438a      	bics	r2, r1
 80054f2:	609a      	str	r2, [r3, #8]
 80054f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054f6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054fa:	f383 8810 	msr	PRIMASK, r3
}
 80054fe:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2280      	movs	r2, #128	; 0x80
 8005504:	2120      	movs	r1, #32
 8005506:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	685a      	ldr	r2, [r3, #4]
 800551a:	2380      	movs	r3, #128	; 0x80
 800551c:	041b      	lsls	r3, r3, #16
 800551e:	4013      	ands	r3, r2
 8005520:	d018      	beq.n	8005554 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005522:	f3ef 8310 	mrs	r3, PRIMASK
 8005526:	61bb      	str	r3, [r7, #24]
  return(result);
 8005528:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800552a:	643b      	str	r3, [r7, #64]	; 0x40
 800552c:	2301      	movs	r3, #1
 800552e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	f383 8810 	msr	PRIMASK, r3
}
 8005536:	46c0      	nop			; (mov r8, r8)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4928      	ldr	r1, [pc, #160]	; (80055e4 <UART_RxISR_8BIT+0x1b4>)
 8005544:	400a      	ands	r2, r1
 8005546:	601a      	str	r2, [r3, #0]
 8005548:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800554a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800554c:	6a3b      	ldr	r3, [r7, #32]
 800554e:	f383 8810 	msr	PRIMASK, r3
}
 8005552:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005558:	2b01      	cmp	r3, #1
 800555a:	d12f      	bne.n	80055bc <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005562:	f3ef 8310 	mrs	r3, PRIMASK
 8005566:	60fb      	str	r3, [r7, #12]
  return(result);
 8005568:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800556a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800556c:	2301      	movs	r3, #1
 800556e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	f383 8810 	msr	PRIMASK, r3
}
 8005576:	46c0      	nop			; (mov r8, r8)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2110      	movs	r1, #16
 8005584:	438a      	bics	r2, r1
 8005586:	601a      	str	r2, [r3, #0]
 8005588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800558a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	f383 8810 	msr	PRIMASK, r3
}
 8005592:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	69db      	ldr	r3, [r3, #28]
 800559a:	2210      	movs	r2, #16
 800559c:	4013      	ands	r3, r2
 800559e:	2b10      	cmp	r3, #16
 80055a0:	d103      	bne.n	80055aa <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2210      	movs	r2, #16
 80055a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2258      	movs	r2, #88	; 0x58
 80055ae:	5a9a      	ldrh	r2, [r3, r2]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	0011      	movs	r1, r2
 80055b4:	0018      	movs	r0, r3
 80055b6:	f7ff fab9 	bl	8004b2c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80055ba:	e00c      	b.n	80055d6 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	0018      	movs	r0, r3
 80055c0:	f7fb fdb6 	bl	8001130 <HAL_UART_RxCpltCallback>
}
 80055c4:	e007      	b.n	80055d6 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	699a      	ldr	r2, [r3, #24]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2108      	movs	r1, #8
 80055d2:	430a      	orrs	r2, r1
 80055d4:	619a      	str	r2, [r3, #24]
}
 80055d6:	46c0      	nop			; (mov r8, r8)
 80055d8:	46bd      	mov	sp, r7
 80055da:	b014      	add	sp, #80	; 0x50
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	46c0      	nop			; (mov r8, r8)
 80055e0:	fffffedf 	.word	0xfffffedf
 80055e4:	fbffffff 	.word	0xfbffffff

080055e8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b094      	sub	sp, #80	; 0x50
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80055f0:	204e      	movs	r0, #78	; 0x4e
 80055f2:	183b      	adds	r3, r7, r0
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	215c      	movs	r1, #92	; 0x5c
 80055f8:	5a52      	ldrh	r2, [r2, r1]
 80055fa:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2280      	movs	r2, #128	; 0x80
 8005600:	589b      	ldr	r3, [r3, r2]
 8005602:	2b22      	cmp	r3, #34	; 0x22
 8005604:	d000      	beq.n	8005608 <UART_RxISR_16BIT+0x20>
 8005606:	e0ba      	b.n	800577e <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	214c      	movs	r1, #76	; 0x4c
 800560e:	187b      	adds	r3, r7, r1
 8005610:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8005612:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005618:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800561a:	187b      	adds	r3, r7, r1
 800561c:	183a      	adds	r2, r7, r0
 800561e:	881b      	ldrh	r3, [r3, #0]
 8005620:	8812      	ldrh	r2, [r2, #0]
 8005622:	4013      	ands	r3, r2
 8005624:	b29a      	uxth	r2, r3
 8005626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005628:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800562e:	1c9a      	adds	r2, r3, #2
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	225a      	movs	r2, #90	; 0x5a
 8005638:	5a9b      	ldrh	r3, [r3, r2]
 800563a:	b29b      	uxth	r3, r3
 800563c:	3b01      	subs	r3, #1
 800563e:	b299      	uxth	r1, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	225a      	movs	r2, #90	; 0x5a
 8005644:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	225a      	movs	r2, #90	; 0x5a
 800564a:	5a9b      	ldrh	r3, [r3, r2]
 800564c:	b29b      	uxth	r3, r3
 800564e:	2b00      	cmp	r3, #0
 8005650:	d000      	beq.n	8005654 <UART_RxISR_16BIT+0x6c>
 8005652:	e09c      	b.n	800578e <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005654:	f3ef 8310 	mrs	r3, PRIMASK
 8005658:	623b      	str	r3, [r7, #32]
  return(result);
 800565a:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800565c:	647b      	str	r3, [r7, #68]	; 0x44
 800565e:	2301      	movs	r3, #1
 8005660:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005664:	f383 8810 	msr	PRIMASK, r3
}
 8005668:	46c0      	nop			; (mov r8, r8)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4948      	ldr	r1, [pc, #288]	; (8005798 <UART_RxISR_16BIT+0x1b0>)
 8005676:	400a      	ands	r2, r1
 8005678:	601a      	str	r2, [r3, #0]
 800567a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800567c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800567e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005680:	f383 8810 	msr	PRIMASK, r3
}
 8005684:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005686:	f3ef 8310 	mrs	r3, PRIMASK
 800568a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800568c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800568e:	643b      	str	r3, [r7, #64]	; 0x40
 8005690:	2301      	movs	r3, #1
 8005692:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005696:	f383 8810 	msr	PRIMASK, r3
}
 800569a:	46c0      	nop			; (mov r8, r8)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	689a      	ldr	r2, [r3, #8]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2101      	movs	r1, #1
 80056a8:	438a      	bics	r2, r1
 80056aa:	609a      	str	r2, [r3, #8]
 80056ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056ae:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056b2:	f383 8810 	msr	PRIMASK, r3
}
 80056b6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2280      	movs	r2, #128	; 0x80
 80056bc:	2120      	movs	r1, #32
 80056be:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	685a      	ldr	r2, [r3, #4]
 80056d2:	2380      	movs	r3, #128	; 0x80
 80056d4:	041b      	lsls	r3, r3, #16
 80056d6:	4013      	ands	r3, r2
 80056d8:	d018      	beq.n	800570c <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056da:	f3ef 8310 	mrs	r3, PRIMASK
 80056de:	617b      	str	r3, [r7, #20]
  return(result);
 80056e0:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80056e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056e4:	2301      	movs	r3, #1
 80056e6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	f383 8810 	msr	PRIMASK, r3
}
 80056ee:	46c0      	nop			; (mov r8, r8)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4928      	ldr	r1, [pc, #160]	; (800579c <UART_RxISR_16BIT+0x1b4>)
 80056fc:	400a      	ands	r2, r1
 80056fe:	601a      	str	r2, [r3, #0]
 8005700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005702:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	f383 8810 	msr	PRIMASK, r3
}
 800570a:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005710:	2b01      	cmp	r3, #1
 8005712:	d12f      	bne.n	8005774 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800571a:	f3ef 8310 	mrs	r3, PRIMASK
 800571e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005720:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005722:	63bb      	str	r3, [r7, #56]	; 0x38
 8005724:	2301      	movs	r3, #1
 8005726:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f383 8810 	msr	PRIMASK, r3
}
 800572e:	46c0      	nop			; (mov r8, r8)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2110      	movs	r1, #16
 800573c:	438a      	bics	r2, r1
 800573e:	601a      	str	r2, [r3, #0]
 8005740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005742:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	f383 8810 	msr	PRIMASK, r3
}
 800574a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	69db      	ldr	r3, [r3, #28]
 8005752:	2210      	movs	r2, #16
 8005754:	4013      	ands	r3, r2
 8005756:	2b10      	cmp	r3, #16
 8005758:	d103      	bne.n	8005762 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	2210      	movs	r2, #16
 8005760:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2258      	movs	r2, #88	; 0x58
 8005766:	5a9a      	ldrh	r2, [r3, r2]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	0011      	movs	r1, r2
 800576c:	0018      	movs	r0, r3
 800576e:	f7ff f9dd 	bl	8004b2c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005772:	e00c      	b.n	800578e <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	0018      	movs	r0, r3
 8005778:	f7fb fcda 	bl	8001130 <HAL_UART_RxCpltCallback>
}
 800577c:	e007      	b.n	800578e <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	699a      	ldr	r2, [r3, #24]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2108      	movs	r1, #8
 800578a:	430a      	orrs	r2, r1
 800578c:	619a      	str	r2, [r3, #24]
}
 800578e:	46c0      	nop			; (mov r8, r8)
 8005790:	46bd      	mov	sp, r7
 8005792:	b014      	add	sp, #80	; 0x50
 8005794:	bd80      	pop	{r7, pc}
 8005796:	46c0      	nop			; (mov r8, r8)
 8005798:	fffffedf 	.word	0xfffffedf
 800579c:	fbffffff 	.word	0xfbffffff

080057a0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80057a8:	46c0      	nop			; (mov r8, r8)
 80057aa:	46bd      	mov	sp, r7
 80057ac:	b002      	add	sp, #8
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <__errno>:
 80057b0:	4b01      	ldr	r3, [pc, #4]	; (80057b8 <__errno+0x8>)
 80057b2:	6818      	ldr	r0, [r3, #0]
 80057b4:	4770      	bx	lr
 80057b6:	46c0      	nop			; (mov r8, r8)
 80057b8:	2000000c 	.word	0x2000000c

080057bc <__libc_init_array>:
 80057bc:	b570      	push	{r4, r5, r6, lr}
 80057be:	2600      	movs	r6, #0
 80057c0:	4d0c      	ldr	r5, [pc, #48]	; (80057f4 <__libc_init_array+0x38>)
 80057c2:	4c0d      	ldr	r4, [pc, #52]	; (80057f8 <__libc_init_array+0x3c>)
 80057c4:	1b64      	subs	r4, r4, r5
 80057c6:	10a4      	asrs	r4, r4, #2
 80057c8:	42a6      	cmp	r6, r4
 80057ca:	d109      	bne.n	80057e0 <__libc_init_array+0x24>
 80057cc:	2600      	movs	r6, #0
 80057ce:	f000 f8f1 	bl	80059b4 <_init>
 80057d2:	4d0a      	ldr	r5, [pc, #40]	; (80057fc <__libc_init_array+0x40>)
 80057d4:	4c0a      	ldr	r4, [pc, #40]	; (8005800 <__libc_init_array+0x44>)
 80057d6:	1b64      	subs	r4, r4, r5
 80057d8:	10a4      	asrs	r4, r4, #2
 80057da:	42a6      	cmp	r6, r4
 80057dc:	d105      	bne.n	80057ea <__libc_init_array+0x2e>
 80057de:	bd70      	pop	{r4, r5, r6, pc}
 80057e0:	00b3      	lsls	r3, r6, #2
 80057e2:	58eb      	ldr	r3, [r5, r3]
 80057e4:	4798      	blx	r3
 80057e6:	3601      	adds	r6, #1
 80057e8:	e7ee      	b.n	80057c8 <__libc_init_array+0xc>
 80057ea:	00b3      	lsls	r3, r6, #2
 80057ec:	58eb      	ldr	r3, [r5, r3]
 80057ee:	4798      	blx	r3
 80057f0:	3601      	adds	r6, #1
 80057f2:	e7f2      	b.n	80057da <__libc_init_array+0x1e>
 80057f4:	08005a18 	.word	0x08005a18
 80057f8:	08005a18 	.word	0x08005a18
 80057fc:	08005a18 	.word	0x08005a18
 8005800:	08005a1c 	.word	0x08005a1c

08005804 <malloc>:
 8005804:	b510      	push	{r4, lr}
 8005806:	4b03      	ldr	r3, [pc, #12]	; (8005814 <malloc+0x10>)
 8005808:	0001      	movs	r1, r0
 800580a:	6818      	ldr	r0, [r3, #0]
 800580c:	f000 f838 	bl	8005880 <_malloc_r>
 8005810:	bd10      	pop	{r4, pc}
 8005812:	46c0      	nop			; (mov r8, r8)
 8005814:	2000000c 	.word	0x2000000c

08005818 <memcpy>:
 8005818:	2300      	movs	r3, #0
 800581a:	b510      	push	{r4, lr}
 800581c:	429a      	cmp	r2, r3
 800581e:	d100      	bne.n	8005822 <memcpy+0xa>
 8005820:	bd10      	pop	{r4, pc}
 8005822:	5ccc      	ldrb	r4, [r1, r3]
 8005824:	54c4      	strb	r4, [r0, r3]
 8005826:	3301      	adds	r3, #1
 8005828:	e7f8      	b.n	800581c <memcpy+0x4>

0800582a <memset>:
 800582a:	0003      	movs	r3, r0
 800582c:	1882      	adds	r2, r0, r2
 800582e:	4293      	cmp	r3, r2
 8005830:	d100      	bne.n	8005834 <memset+0xa>
 8005832:	4770      	bx	lr
 8005834:	7019      	strb	r1, [r3, #0]
 8005836:	3301      	adds	r3, #1
 8005838:	e7f9      	b.n	800582e <memset+0x4>
	...

0800583c <sbrk_aligned>:
 800583c:	b570      	push	{r4, r5, r6, lr}
 800583e:	4e0f      	ldr	r6, [pc, #60]	; (800587c <sbrk_aligned+0x40>)
 8005840:	000d      	movs	r5, r1
 8005842:	6831      	ldr	r1, [r6, #0]
 8005844:	0004      	movs	r4, r0
 8005846:	2900      	cmp	r1, #0
 8005848:	d102      	bne.n	8005850 <sbrk_aligned+0x14>
 800584a:	f000 f88f 	bl	800596c <_sbrk_r>
 800584e:	6030      	str	r0, [r6, #0]
 8005850:	0029      	movs	r1, r5
 8005852:	0020      	movs	r0, r4
 8005854:	f000 f88a 	bl	800596c <_sbrk_r>
 8005858:	1c43      	adds	r3, r0, #1
 800585a:	d00a      	beq.n	8005872 <sbrk_aligned+0x36>
 800585c:	2303      	movs	r3, #3
 800585e:	1cc5      	adds	r5, r0, #3
 8005860:	439d      	bics	r5, r3
 8005862:	42a8      	cmp	r0, r5
 8005864:	d007      	beq.n	8005876 <sbrk_aligned+0x3a>
 8005866:	1a29      	subs	r1, r5, r0
 8005868:	0020      	movs	r0, r4
 800586a:	f000 f87f 	bl	800596c <_sbrk_r>
 800586e:	1c43      	adds	r3, r0, #1
 8005870:	d101      	bne.n	8005876 <sbrk_aligned+0x3a>
 8005872:	2501      	movs	r5, #1
 8005874:	426d      	negs	r5, r5
 8005876:	0028      	movs	r0, r5
 8005878:	bd70      	pop	{r4, r5, r6, pc}
 800587a:	46c0      	nop			; (mov r8, r8)
 800587c:	20000cb0 	.word	0x20000cb0

08005880 <_malloc_r>:
 8005880:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005882:	2203      	movs	r2, #3
 8005884:	1ccb      	adds	r3, r1, #3
 8005886:	4393      	bics	r3, r2
 8005888:	3308      	adds	r3, #8
 800588a:	0006      	movs	r6, r0
 800588c:	001f      	movs	r7, r3
 800588e:	2b0c      	cmp	r3, #12
 8005890:	d232      	bcs.n	80058f8 <_malloc_r+0x78>
 8005892:	270c      	movs	r7, #12
 8005894:	42b9      	cmp	r1, r7
 8005896:	d831      	bhi.n	80058fc <_malloc_r+0x7c>
 8005898:	0030      	movs	r0, r6
 800589a:	f000 f879 	bl	8005990 <__malloc_lock>
 800589e:	4d32      	ldr	r5, [pc, #200]	; (8005968 <_malloc_r+0xe8>)
 80058a0:	682b      	ldr	r3, [r5, #0]
 80058a2:	001c      	movs	r4, r3
 80058a4:	2c00      	cmp	r4, #0
 80058a6:	d12e      	bne.n	8005906 <_malloc_r+0x86>
 80058a8:	0039      	movs	r1, r7
 80058aa:	0030      	movs	r0, r6
 80058ac:	f7ff ffc6 	bl	800583c <sbrk_aligned>
 80058b0:	0004      	movs	r4, r0
 80058b2:	1c43      	adds	r3, r0, #1
 80058b4:	d11e      	bne.n	80058f4 <_malloc_r+0x74>
 80058b6:	682c      	ldr	r4, [r5, #0]
 80058b8:	0025      	movs	r5, r4
 80058ba:	2d00      	cmp	r5, #0
 80058bc:	d14a      	bne.n	8005954 <_malloc_r+0xd4>
 80058be:	6823      	ldr	r3, [r4, #0]
 80058c0:	0029      	movs	r1, r5
 80058c2:	18e3      	adds	r3, r4, r3
 80058c4:	0030      	movs	r0, r6
 80058c6:	9301      	str	r3, [sp, #4]
 80058c8:	f000 f850 	bl	800596c <_sbrk_r>
 80058cc:	9b01      	ldr	r3, [sp, #4]
 80058ce:	4283      	cmp	r3, r0
 80058d0:	d143      	bne.n	800595a <_malloc_r+0xda>
 80058d2:	6823      	ldr	r3, [r4, #0]
 80058d4:	3703      	adds	r7, #3
 80058d6:	1aff      	subs	r7, r7, r3
 80058d8:	2303      	movs	r3, #3
 80058da:	439f      	bics	r7, r3
 80058dc:	3708      	adds	r7, #8
 80058de:	2f0c      	cmp	r7, #12
 80058e0:	d200      	bcs.n	80058e4 <_malloc_r+0x64>
 80058e2:	270c      	movs	r7, #12
 80058e4:	0039      	movs	r1, r7
 80058e6:	0030      	movs	r0, r6
 80058e8:	f7ff ffa8 	bl	800583c <sbrk_aligned>
 80058ec:	1c43      	adds	r3, r0, #1
 80058ee:	d034      	beq.n	800595a <_malloc_r+0xda>
 80058f0:	6823      	ldr	r3, [r4, #0]
 80058f2:	19df      	adds	r7, r3, r7
 80058f4:	6027      	str	r7, [r4, #0]
 80058f6:	e013      	b.n	8005920 <_malloc_r+0xa0>
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	dacb      	bge.n	8005894 <_malloc_r+0x14>
 80058fc:	230c      	movs	r3, #12
 80058fe:	2500      	movs	r5, #0
 8005900:	6033      	str	r3, [r6, #0]
 8005902:	0028      	movs	r0, r5
 8005904:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005906:	6822      	ldr	r2, [r4, #0]
 8005908:	1bd1      	subs	r1, r2, r7
 800590a:	d420      	bmi.n	800594e <_malloc_r+0xce>
 800590c:	290b      	cmp	r1, #11
 800590e:	d917      	bls.n	8005940 <_malloc_r+0xc0>
 8005910:	19e2      	adds	r2, r4, r7
 8005912:	6027      	str	r7, [r4, #0]
 8005914:	42a3      	cmp	r3, r4
 8005916:	d111      	bne.n	800593c <_malloc_r+0xbc>
 8005918:	602a      	str	r2, [r5, #0]
 800591a:	6863      	ldr	r3, [r4, #4]
 800591c:	6011      	str	r1, [r2, #0]
 800591e:	6053      	str	r3, [r2, #4]
 8005920:	0030      	movs	r0, r6
 8005922:	0025      	movs	r5, r4
 8005924:	f000 f83c 	bl	80059a0 <__malloc_unlock>
 8005928:	2207      	movs	r2, #7
 800592a:	350b      	adds	r5, #11
 800592c:	1d23      	adds	r3, r4, #4
 800592e:	4395      	bics	r5, r2
 8005930:	1aea      	subs	r2, r5, r3
 8005932:	429d      	cmp	r5, r3
 8005934:	d0e5      	beq.n	8005902 <_malloc_r+0x82>
 8005936:	1b5b      	subs	r3, r3, r5
 8005938:	50a3      	str	r3, [r4, r2]
 800593a:	e7e2      	b.n	8005902 <_malloc_r+0x82>
 800593c:	605a      	str	r2, [r3, #4]
 800593e:	e7ec      	b.n	800591a <_malloc_r+0x9a>
 8005940:	6862      	ldr	r2, [r4, #4]
 8005942:	42a3      	cmp	r3, r4
 8005944:	d101      	bne.n	800594a <_malloc_r+0xca>
 8005946:	602a      	str	r2, [r5, #0]
 8005948:	e7ea      	b.n	8005920 <_malloc_r+0xa0>
 800594a:	605a      	str	r2, [r3, #4]
 800594c:	e7e8      	b.n	8005920 <_malloc_r+0xa0>
 800594e:	0023      	movs	r3, r4
 8005950:	6864      	ldr	r4, [r4, #4]
 8005952:	e7a7      	b.n	80058a4 <_malloc_r+0x24>
 8005954:	002c      	movs	r4, r5
 8005956:	686d      	ldr	r5, [r5, #4]
 8005958:	e7af      	b.n	80058ba <_malloc_r+0x3a>
 800595a:	230c      	movs	r3, #12
 800595c:	0030      	movs	r0, r6
 800595e:	6033      	str	r3, [r6, #0]
 8005960:	f000 f81e 	bl	80059a0 <__malloc_unlock>
 8005964:	e7cd      	b.n	8005902 <_malloc_r+0x82>
 8005966:	46c0      	nop			; (mov r8, r8)
 8005968:	20000cac 	.word	0x20000cac

0800596c <_sbrk_r>:
 800596c:	2300      	movs	r3, #0
 800596e:	b570      	push	{r4, r5, r6, lr}
 8005970:	4d06      	ldr	r5, [pc, #24]	; (800598c <_sbrk_r+0x20>)
 8005972:	0004      	movs	r4, r0
 8005974:	0008      	movs	r0, r1
 8005976:	602b      	str	r3, [r5, #0]
 8005978:	f7fb fdf4 	bl	8001564 <_sbrk>
 800597c:	1c43      	adds	r3, r0, #1
 800597e:	d103      	bne.n	8005988 <_sbrk_r+0x1c>
 8005980:	682b      	ldr	r3, [r5, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d000      	beq.n	8005988 <_sbrk_r+0x1c>
 8005986:	6023      	str	r3, [r4, #0]
 8005988:	bd70      	pop	{r4, r5, r6, pc}
 800598a:	46c0      	nop			; (mov r8, r8)
 800598c:	20000cb4 	.word	0x20000cb4

08005990 <__malloc_lock>:
 8005990:	b510      	push	{r4, lr}
 8005992:	4802      	ldr	r0, [pc, #8]	; (800599c <__malloc_lock+0xc>)
 8005994:	f000 f80c 	bl	80059b0 <__retarget_lock_acquire_recursive>
 8005998:	bd10      	pop	{r4, pc}
 800599a:	46c0      	nop			; (mov r8, r8)
 800599c:	20000cb8 	.word	0x20000cb8

080059a0 <__malloc_unlock>:
 80059a0:	b510      	push	{r4, lr}
 80059a2:	4802      	ldr	r0, [pc, #8]	; (80059ac <__malloc_unlock+0xc>)
 80059a4:	f000 f805 	bl	80059b2 <__retarget_lock_release_recursive>
 80059a8:	bd10      	pop	{r4, pc}
 80059aa:	46c0      	nop			; (mov r8, r8)
 80059ac:	20000cb8 	.word	0x20000cb8

080059b0 <__retarget_lock_acquire_recursive>:
 80059b0:	4770      	bx	lr

080059b2 <__retarget_lock_release_recursive>:
 80059b2:	4770      	bx	lr

080059b4 <_init>:
 80059b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059b6:	46c0      	nop			; (mov r8, r8)
 80059b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ba:	bc08      	pop	{r3}
 80059bc:	469e      	mov	lr, r3
 80059be:	4770      	bx	lr

080059c0 <_fini>:
 80059c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059c2:	46c0      	nop			; (mov r8, r8)
 80059c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059c6:	bc08      	pop	{r3}
 80059c8:	469e      	mov	lr, r3
 80059ca:	4770      	bx	lr
