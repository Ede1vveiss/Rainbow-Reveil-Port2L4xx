
1404-Reveil_Matrice_STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000589c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  0800595c  0800595c  0001595c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059a8  080059a8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080059a8  080059a8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080059a8  080059a8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059a8  080059a8  000159a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059ac  080059ac  000159ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080059b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c90  20000070  08005a20  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d00  08005a20  00020d00  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010cd4  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025bd  00000000  00000000  00030d6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed8  00000000  00000000  00033330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd0  00000000  00000000  00034208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a276  00000000  00000000  00034fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015c78  00000000  00000000  0004f24e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094578  00000000  00000000  00064ec6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f943e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003720  00000000  00000000  000f9490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005944 	.word	0x08005944

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08005944 	.word	0x08005944

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <sendCanvas>:
}



// Fonction pour mettre à jour l'affichage LED
void sendCanvas(Canvas* canvas) {
 80003f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003f6:	b085      	sub	sp, #20
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
    // Copiez les pixels du canevas vers l'écran LED
    for (uint16_t i = 0; i < canvas->numCols * canvas->numRows -1; i++) {  // -1 car résolution bug affichage photodiode inexistante
 80003fc:	230e      	movs	r3, #14
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	2200      	movs	r2, #0
 8000402:	801a      	strh	r2, [r3, #0]
 8000404:	e026      	b.n	8000454 <sendCanvas+0x60>
        setLEDcolor(i, canvas -> pixels[i].R, canvas -> pixels[i].G, canvas -> pixels[i].B);
 8000406:	260e      	movs	r6, #14
 8000408:	19bb      	adds	r3, r7, r6
 800040a:	8818      	ldrh	r0, [r3, #0]
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	6899      	ldr	r1, [r3, #8]
 8000410:	19bb      	adds	r3, r7, r6
 8000412:	881a      	ldrh	r2, [r3, #0]
 8000414:	0013      	movs	r3, r2
 8000416:	005b      	lsls	r3, r3, #1
 8000418:	189b      	adds	r3, r3, r2
 800041a:	18cb      	adds	r3, r1, r3
 800041c:	781c      	ldrb	r4, [r3, #0]
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	6899      	ldr	r1, [r3, #8]
 8000422:	19bb      	adds	r3, r7, r6
 8000424:	881a      	ldrh	r2, [r3, #0]
 8000426:	0013      	movs	r3, r2
 8000428:	005b      	lsls	r3, r3, #1
 800042a:	189b      	adds	r3, r3, r2
 800042c:	18cb      	adds	r3, r1, r3
 800042e:	785d      	ldrb	r5, [r3, #1]
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	6899      	ldr	r1, [r3, #8]
 8000434:	19bb      	adds	r3, r7, r6
 8000436:	881a      	ldrh	r2, [r3, #0]
 8000438:	0013      	movs	r3, r2
 800043a:	005b      	lsls	r3, r3, #1
 800043c:	189b      	adds	r3, r3, r2
 800043e:	18cb      	adds	r3, r1, r3
 8000440:	789b      	ldrb	r3, [r3, #2]
 8000442:	002a      	movs	r2, r5
 8000444:	0021      	movs	r1, r4
 8000446:	f000 fa65 	bl	8000914 <setLEDcolor>
    for (uint16_t i = 0; i < canvas->numCols * canvas->numRows -1; i++) {  // -1 car résolution bug affichage photodiode inexistante
 800044a:	19bb      	adds	r3, r7, r6
 800044c:	881a      	ldrh	r2, [r3, #0]
 800044e:	19bb      	adds	r3, r7, r6
 8000450:	3201      	adds	r2, #1
 8000452:	801a      	strh	r2, [r3, #0]
 8000454:	230e      	movs	r3, #14
 8000456:	18fb      	adds	r3, r7, r3
 8000458:	881a      	ldrh	r2, [r3, #0]
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	6819      	ldr	r1, [r3, #0]
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	685b      	ldr	r3, [r3, #4]
 8000462:	434b      	muls	r3, r1
 8000464:	3b01      	subs	r3, #1
 8000466:	429a      	cmp	r2, r3
 8000468:	dbcd      	blt.n	8000406 <sendCanvas+0x12>
    }
}
 800046a:	46c0      	nop			; (mov r8, r8)
 800046c:	46c0      	nop			; (mov r8, r8)
 800046e:	46bd      	mov	sp, r7
 8000470:	b005      	add	sp, #20
 8000472:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000474 <getPixel>:

Pixel* getPixel(Canvas* canvas, int x, int y) {
 8000474:	b580      	push	{r7, lr}
 8000476:	b084      	sub	sp, #16
 8000478:	af00      	add	r7, sp, #0
 800047a:	60f8      	str	r0, [r7, #12]
 800047c:	60b9      	str	r1, [r7, #8]
 800047e:	607a      	str	r2, [r7, #4]
    if (x > 0 && x <= canvas->numCols && y > 0 && y <= canvas->numRows) {
 8000480:	68bb      	ldr	r3, [r7, #8]
 8000482:	2b00      	cmp	r3, #0
 8000484:	dd1c      	ble.n	80004c0 <getPixel+0x4c>
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	68ba      	ldr	r2, [r7, #8]
 800048c:	429a      	cmp	r2, r3
 800048e:	dc17      	bgt.n	80004c0 <getPixel+0x4c>
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	2b00      	cmp	r3, #0
 8000494:	dd14      	ble.n	80004c0 <getPixel+0x4c>
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	685b      	ldr	r3, [r3, #4]
 800049a:	687a      	ldr	r2, [r7, #4]
 800049c:	429a      	cmp	r2, r3
 800049e:	dc0f      	bgt.n	80004c0 <getPixel+0x4c>
        return &canvas->pixels[(x-1)*canvas->numRows+(y-1)];
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	689a      	ldr	r2, [r3, #8]
 80004a4:	68bb      	ldr	r3, [r7, #8]
 80004a6:	1e59      	subs	r1, r3, #1
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	685b      	ldr	r3, [r3, #4]
 80004ac:	4359      	muls	r1, r3
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	3b01      	subs	r3, #1
 80004b2:	18cb      	adds	r3, r1, r3
 80004b4:	0019      	movs	r1, r3
 80004b6:	000b      	movs	r3, r1
 80004b8:	005b      	lsls	r3, r3, #1
 80004ba:	185b      	adds	r3, r3, r1
 80004bc:	18d3      	adds	r3, r2, r3
 80004be:	e000      	b.n	80004c2 <getPixel+0x4e>
    } else {
        return NULL; // Coordonnées hors limites
 80004c0:	2300      	movs	r3, #0
    }
}
 80004c2:	0018      	movs	r0, r3
 80004c4:	46bd      	mov	sp, r7
 80004c6:	b004      	add	sp, #16
 80004c8:	bd80      	pop	{r7, pc}

080004ca <colorDiagonal>:


void colorDiagonal(Canvas* canvas, Pixel encre, uint8_t diagSum) {
 80004ca:	b580      	push	{r7, lr}
 80004cc:	b088      	sub	sp, #32
 80004ce:	af00      	add	r7, sp, #0
 80004d0:	60f8      	str	r0, [r7, #12]
 80004d2:	2308      	movs	r3, #8
 80004d4:	18fb      	adds	r3, r7, r3
 80004d6:	6019      	str	r1, [r3, #0]
 80004d8:	1dfb      	adds	r3, r7, #7
 80004da:	701a      	strb	r2, [r3, #0]


    // Parcourir la diagonale où x + y == diagSum
    for (int x = 0; x <= canvas->numCols; x++) {
 80004dc:	2300      	movs	r3, #0
 80004de:	61fb      	str	r3, [r7, #28]
 80004e0:	e023      	b.n	800052a <colorDiagonal+0x60>
        int y = diagSum - x; // Calcul de la coordonnée y correspondante
 80004e2:	1dfb      	adds	r3, r7, #7
 80004e4:	781a      	ldrb	r2, [r3, #0]
 80004e6:	69fb      	ldr	r3, [r7, #28]
 80004e8:	1ad3      	subs	r3, r2, r3
 80004ea:	61bb      	str	r3, [r7, #24]
        if (y >= 0 && y <= canvas->numRows) {
 80004ec:	69bb      	ldr	r3, [r7, #24]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	db18      	blt.n	8000524 <colorDiagonal+0x5a>
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	685b      	ldr	r3, [r3, #4]
 80004f6:	69ba      	ldr	r2, [r7, #24]
 80004f8:	429a      	cmp	r2, r3
 80004fa:	dc13      	bgt.n	8000524 <colorDiagonal+0x5a>
            Pixel* pixel = getPixel(canvas, x, y);
 80004fc:	69ba      	ldr	r2, [r7, #24]
 80004fe:	69f9      	ldr	r1, [r7, #28]
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	0018      	movs	r0, r3
 8000504:	f7ff ffb6 	bl	8000474 <getPixel>
 8000508:	0003      	movs	r3, r0
 800050a:	617b      	str	r3, [r7, #20]
            if (pixel) {
 800050c:	697b      	ldr	r3, [r7, #20]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d008      	beq.n	8000524 <colorDiagonal+0x5a>
                // Mettre à jour la couleur
                *pixel=encre;
 8000512:	697a      	ldr	r2, [r7, #20]
 8000514:	2308      	movs	r3, #8
 8000516:	18fb      	adds	r3, r7, r3
 8000518:	0010      	movs	r0, r2
 800051a:	0019      	movs	r1, r3
 800051c:	2303      	movs	r3, #3
 800051e:	001a      	movs	r2, r3
 8000520:	f005 f942 	bl	80057a8 <memcpy>
    for (int x = 0; x <= canvas->numCols; x++) {
 8000524:	69fb      	ldr	r3, [r7, #28]
 8000526:	3301      	adds	r3, #1
 8000528:	61fb      	str	r3, [r7, #28]
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	69fa      	ldr	r2, [r7, #28]
 8000530:	429a      	cmp	r2, r3
 8000532:	ddd6      	ble.n	80004e2 <colorDiagonal+0x18>
            }
        }
    }
}
 8000534:	46c0      	nop			; (mov r8, r8)
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	46bd      	mov	sp, r7
 800053a:	b008      	add	sp, #32
 800053c:	bd80      	pop	{r7, pc}

0800053e <drawRectangle>:
//

// Fonction pour dessiner un rectangle
void drawRectangle(Canvas* canvas, int W,int H, int X, int Y, Pixel BorderInk, Pixel FillInk) {
 800053e:	b590      	push	{r4, r7, lr}
 8000540:	b087      	sub	sp, #28
 8000542:	af00      	add	r7, sp, #0
 8000544:	60f8      	str	r0, [r7, #12]
 8000546:	60b9      	str	r1, [r7, #8]
 8000548:	607a      	str	r2, [r7, #4]
 800054a:	603b      	str	r3, [r7, #0]
    if (canvas == NULL || H <= 0 || W <= 0 || X < 0 || Y < 0) {
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d100      	bne.n	8000554 <drawRectangle+0x16>
 8000552:	e06d      	b.n	8000630 <drawRectangle+0xf2>
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	2b00      	cmp	r3, #0
 8000558:	dc00      	bgt.n	800055c <drawRectangle+0x1e>
 800055a:	e069      	b.n	8000630 <drawRectangle+0xf2>
 800055c:	68bb      	ldr	r3, [r7, #8]
 800055e:	2b00      	cmp	r3, #0
 8000560:	dd66      	ble.n	8000630 <drawRectangle+0xf2>
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	2b00      	cmp	r3, #0
 8000566:	db63      	blt.n	8000630 <drawRectangle+0xf2>
 8000568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800056a:	2b00      	cmp	r3, #0
 800056c:	db60      	blt.n	8000630 <drawRectangle+0xf2>
        return;
    }

    int i, j;

    for (i = Y; i < Y + H; i++) {
 800056e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000570:	617b      	str	r3, [r7, #20]
 8000572:	e056      	b.n	8000622 <drawRectangle+0xe4>
        for (j = X; j < X + W; j++) {
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	613b      	str	r3, [r7, #16]
 8000578:	e04a      	b.n	8000610 <drawRectangle+0xd2>
            if (i == Y || i == Y + H - 1 || j == X || j == X + W - 1) {
 800057a:	697a      	ldr	r2, [r7, #20]
 800057c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800057e:	429a      	cmp	r2, r3
 8000580:	d011      	beq.n	80005a6 <drawRectangle+0x68>
 8000582:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	18d3      	adds	r3, r2, r3
 8000588:	3b01      	subs	r3, #1
 800058a:	697a      	ldr	r2, [r7, #20]
 800058c:	429a      	cmp	r2, r3
 800058e:	d00a      	beq.n	80005a6 <drawRectangle+0x68>
 8000590:	693a      	ldr	r2, [r7, #16]
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	429a      	cmp	r2, r3
 8000596:	d006      	beq.n	80005a6 <drawRectangle+0x68>
 8000598:	683a      	ldr	r2, [r7, #0]
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	18d3      	adds	r3, r2, r3
 800059e:	3b01      	subs	r3, #1
 80005a0:	693a      	ldr	r2, [r7, #16]
 80005a2:	429a      	cmp	r2, r3
 80005a4:	d114      	bne.n	80005d0 <drawRectangle+0x92>
                // Dessiner la bordure
                    *getPixel(canvas,j,i) = BorderInk;
 80005a6:	697a      	ldr	r2, [r7, #20]
 80005a8:	6939      	ldr	r1, [r7, #16]
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	0018      	movs	r0, r3
 80005ae:	f7ff ff61 	bl	8000474 <getPixel>
 80005b2:	0002      	movs	r2, r0
 80005b4:	2304      	movs	r3, #4
 80005b6:	2120      	movs	r1, #32
 80005b8:	185b      	adds	r3, r3, r1
 80005ba:	2108      	movs	r1, #8
 80005bc:	468c      	mov	ip, r1
 80005be:	44bc      	add	ip, r7
 80005c0:	4463      	add	r3, ip
 80005c2:	0010      	movs	r0, r2
 80005c4:	0019      	movs	r1, r3
 80005c6:	2303      	movs	r3, #3
 80005c8:	001a      	movs	r2, r3
 80005ca:	f005 f8ed 	bl	80057a8 <memcpy>
 80005ce:	e01c      	b.n	800060a <drawRectangle+0xcc>
            } else {
                // Remplir l'intérieur du rectangle
                if (FillInk.R != 1) {
 80005d0:	2308      	movs	r3, #8
 80005d2:	2420      	movs	r4, #32
 80005d4:	191b      	adds	r3, r3, r4
 80005d6:	2208      	movs	r2, #8
 80005d8:	4694      	mov	ip, r2
 80005da:	44bc      	add	ip, r7
 80005dc:	4463      	add	r3, ip
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d012      	beq.n	800060a <drawRectangle+0xcc>
                	*getPixel(canvas,j,i) = FillInk;
 80005e4:	697a      	ldr	r2, [r7, #20]
 80005e6:	6939      	ldr	r1, [r7, #16]
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	0018      	movs	r0, r3
 80005ec:	f7ff ff42 	bl	8000474 <getPixel>
 80005f0:	0002      	movs	r2, r0
 80005f2:	2308      	movs	r3, #8
 80005f4:	191b      	adds	r3, r3, r4
 80005f6:	2108      	movs	r1, #8
 80005f8:	468c      	mov	ip, r1
 80005fa:	44bc      	add	ip, r7
 80005fc:	4463      	add	r3, ip
 80005fe:	0010      	movs	r0, r2
 8000600:	0019      	movs	r1, r3
 8000602:	2303      	movs	r3, #3
 8000604:	001a      	movs	r2, r3
 8000606:	f005 f8cf 	bl	80057a8 <memcpy>
        for (j = X; j < X + W; j++) {
 800060a:	693b      	ldr	r3, [r7, #16]
 800060c:	3301      	adds	r3, #1
 800060e:	613b      	str	r3, [r7, #16]
 8000610:	683a      	ldr	r2, [r7, #0]
 8000612:	68bb      	ldr	r3, [r7, #8]
 8000614:	18d3      	adds	r3, r2, r3
 8000616:	693a      	ldr	r2, [r7, #16]
 8000618:	429a      	cmp	r2, r3
 800061a:	dbae      	blt.n	800057a <drawRectangle+0x3c>
    for (i = Y; i < Y + H; i++) {
 800061c:	697b      	ldr	r3, [r7, #20]
 800061e:	3301      	adds	r3, #1
 8000620:	617b      	str	r3, [r7, #20]
 8000622:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	18d3      	adds	r3, r2, r3
 8000628:	697a      	ldr	r2, [r7, #20]
 800062a:	429a      	cmp	r2, r3
 800062c:	dba2      	blt.n	8000574 <drawRectangle+0x36>
 800062e:	e000      	b.n	8000632 <drawRectangle+0xf4>
        return;
 8000630:	46c0      	nop			; (mov r8, r8)
                }
            }
        }
    }
}
 8000632:	46bd      	mov	sp, r7
 8000634:	b007      	add	sp, #28
 8000636:	bd90      	pop	{r4, r7, pc}

08000638 <displayBCD>:

// Fonction pour afficher un chiffre en BCD
void displayBCD(Canvas* canvas, int X, int Y, int BCD, int NbDeBitAffiches) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b088      	sub	sp, #32
 800063c:	af00      	add	r7, sp, #0
 800063e:	60f8      	str	r0, [r7, #12]
 8000640:	60b9      	str	r1, [r7, #8]
 8000642:	607a      	str	r2, [r7, #4]
 8000644:	603b      	str	r3, [r7, #0]
    if (canvas == NULL || X < 0 || Y < 0 || BCD < 0 || NbDeBitAffiches <= 0) {
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d04e      	beq.n	80006ea <displayBCD+0xb2>
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	2b00      	cmp	r3, #0
 8000650:	db4b      	blt.n	80006ea <displayBCD+0xb2>
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	2b00      	cmp	r3, #0
 8000656:	db48      	blt.n	80006ea <displayBCD+0xb2>
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	db45      	blt.n	80006ea <displayBCD+0xb2>
 800065e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000660:	2b00      	cmp	r3, #0
 8000662:	dd42      	ble.n	80006ea <displayBCD+0xb2>
        // Vérifiez les paramètres d'entrée valides
        return;
    }

    int j;
    int mask = 1 << (NbDeBitAffiches - 1);  // Masque pour extraire chaque bit
 8000664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000666:	3b01      	subs	r3, #1
 8000668:	2201      	movs	r2, #1
 800066a:	409a      	lsls	r2, r3
 800066c:	0013      	movs	r3, r2
 800066e:	61bb      	str	r3, [r7, #24]

        for (j = X; j < X + NbDeBitAffiches; j++) {
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	61fb      	str	r3, [r7, #28]
 8000674:	e032      	b.n	80006dc <displayBCD+0xa4>
            if (BCD & mask) {
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	69ba      	ldr	r2, [r7, #24]
 800067a:	4013      	ands	r3, r2
 800067c:	d014      	beq.n	80006a8 <displayBCD+0x70>
                // Afficher un 1 (blanc)
                Pixel* pixel = getPixel(canvas, j, Y);
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	69f9      	ldr	r1, [r7, #28]
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	0018      	movs	r0, r3
 8000686:	f7ff fef5 	bl	8000474 <getPixel>
 800068a:	0003      	movs	r3, r0
 800068c:	613b      	str	r3, [r7, #16]
                if (pixel != NULL) {
 800068e:	693b      	ldr	r3, [r7, #16]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d01d      	beq.n	80006d0 <displayBCD+0x98>
                    pixel->R = MAX_LUX;
 8000694:	693b      	ldr	r3, [r7, #16]
 8000696:	22fe      	movs	r2, #254	; 0xfe
 8000698:	701a      	strb	r2, [r3, #0]
                    pixel->G = MAX_LUX;
 800069a:	693b      	ldr	r3, [r7, #16]
 800069c:	22fe      	movs	r2, #254	; 0xfe
 800069e:	705a      	strb	r2, [r3, #1]
                    pixel->B = MAX_LUX;
 80006a0:	693b      	ldr	r3, [r7, #16]
 80006a2:	22fe      	movs	r2, #254	; 0xfe
 80006a4:	709a      	strb	r2, [r3, #2]
 80006a6:	e013      	b.n	80006d0 <displayBCD+0x98>
                }
            }
            else{
            	//afficher un 0 (noir)
            	Pixel* pixel = getPixel(canvas, j, Y);
 80006a8:	687a      	ldr	r2, [r7, #4]
 80006aa:	69f9      	ldr	r1, [r7, #28]
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	0018      	movs	r0, r3
 80006b0:	f7ff fee0 	bl	8000474 <getPixel>
 80006b4:	0003      	movs	r3, r0
 80006b6:	617b      	str	r3, [r7, #20]
            	if (pixel != NULL) {
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d008      	beq.n	80006d0 <displayBCD+0x98>
            		pixel->R = 0;
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	2200      	movs	r2, #0
 80006c2:	701a      	strb	r2, [r3, #0]
                    pixel->G = 0;
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	2200      	movs	r2, #0
 80006c8:	705a      	strb	r2, [r3, #1]
                    pixel->B = 0;
 80006ca:	697b      	ldr	r3, [r7, #20]
 80006cc:	2200      	movs	r2, #0
 80006ce:	709a      	strb	r2, [r3, #2]
            	}
            }
            mask >>= 1;
 80006d0:	69bb      	ldr	r3, [r7, #24]
 80006d2:	105b      	asrs	r3, r3, #1
 80006d4:	61bb      	str	r3, [r7, #24]
        for (j = X; j < X + NbDeBitAffiches; j++) {
 80006d6:	69fb      	ldr	r3, [r7, #28]
 80006d8:	3301      	adds	r3, #1
 80006da:	61fb      	str	r3, [r7, #28]
 80006dc:	68ba      	ldr	r2, [r7, #8]
 80006de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006e0:	18d3      	adds	r3, r2, r3
 80006e2:	69fa      	ldr	r2, [r7, #28]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	dbc6      	blt.n	8000676 <displayBCD+0x3e>
 80006e8:	e000      	b.n	80006ec <displayBCD+0xb4>
        return;
 80006ea:	46c0      	nop			; (mov r8, r8)
        }
}
 80006ec:	46bd      	mov	sp, r7
 80006ee:	b008      	add	sp, #32
 80006f0:	bd80      	pop	{r7, pc}
	...

080006f4 <HSVtoPixel>:
 *  Created on: Oct 11, 2023
 *      Author: alyvasseur
 */
#include "includes.h"

Pixel HSVtoPixel(uint8_t h, uint8_t v) {
 80006f4:	b5b0      	push	{r4, r5, r7, lr}
 80006f6:	b086      	sub	sp, #24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	0002      	movs	r2, r0
 80006fc:	1dfb      	adds	r3, r7, #7
 80006fe:	701a      	strb	r2, [r3, #0]
 8000700:	1dbb      	adds	r3, r7, #6
 8000702:	1c0a      	adds	r2, r1, #0
 8000704:	701a      	strb	r2, [r3, #0]
    Pixel pixel;
    unsigned char region, remainder, p, q, t;

    region = h / 43;
 8000706:	2517      	movs	r5, #23
 8000708:	197c      	adds	r4, r7, r5
 800070a:	1dfb      	adds	r3, r7, #7
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	212b      	movs	r1, #43	; 0x2b
 8000710:	0018      	movs	r0, r3
 8000712:	f7ff fcf9 	bl	8000108 <__udivsi3>
 8000716:	0003      	movs	r3, r0
 8000718:	7023      	strb	r3, [r4, #0]
    remainder = (h - (region * 43)) * 6;
 800071a:	1dfb      	adds	r3, r7, #7
 800071c:	7819      	ldrb	r1, [r3, #0]
 800071e:	0028      	movs	r0, r5
 8000720:	183b      	adds	r3, r7, r0
 8000722:	781a      	ldrb	r2, [r3, #0]
 8000724:	0013      	movs	r3, r2
 8000726:	069b      	lsls	r3, r3, #26
 8000728:	1a9b      	subs	r3, r3, r2
 800072a:	009b      	lsls	r3, r3, #2
 800072c:	189b      	adds	r3, r3, r2
 800072e:	009b      	lsls	r3, r3, #2
 8000730:	189b      	adds	r3, r3, r2
 8000732:	009b      	lsls	r3, r3, #2
 8000734:	189b      	adds	r3, r3, r2
 8000736:	18cb      	adds	r3, r1, r3
 8000738:	b2db      	uxtb	r3, r3
 800073a:	2416      	movs	r4, #22
 800073c:	193a      	adds	r2, r7, r4
 800073e:	1c19      	adds	r1, r3, #0
 8000740:	1c0b      	adds	r3, r1, #0
 8000742:	18db      	adds	r3, r3, r3
 8000744:	185b      	adds	r3, r3, r1
 8000746:	18db      	adds	r3, r3, r3
 8000748:	7013      	strb	r3, [r2, #0]

    p = (v * (255 - 255)) >> 8;
 800074a:	2315      	movs	r3, #21
 800074c:	18fb      	adds	r3, r7, r3
 800074e:	2200      	movs	r2, #0
 8000750:	701a      	strb	r2, [r3, #0]
    q = (v * (255 - ((255 * remainder) >> 8)) >> 8);
 8000752:	1dbb      	adds	r3, r7, #6
 8000754:	7819      	ldrb	r1, [r3, #0]
 8000756:	193b      	adds	r3, r7, r4
 8000758:	781a      	ldrb	r2, [r3, #0]
 800075a:	0013      	movs	r3, r2
 800075c:	021b      	lsls	r3, r3, #8
 800075e:	1a9b      	subs	r3, r3, r2
 8000760:	121b      	asrs	r3, r3, #8
 8000762:	22ff      	movs	r2, #255	; 0xff
 8000764:	1ad3      	subs	r3, r2, r3
 8000766:	434b      	muls	r3, r1
 8000768:	121a      	asrs	r2, r3, #8
 800076a:	2314      	movs	r3, #20
 800076c:	18fb      	adds	r3, r7, r3
 800076e:	701a      	strb	r2, [r3, #0]
    t = (v * (255 - ((255 * (255 - remainder)) >> 8)) >> 8);
 8000770:	1dbb      	adds	r3, r7, #6
 8000772:	7819      	ldrb	r1, [r3, #0]
 8000774:	193b      	adds	r3, r7, r4
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	22ff      	movs	r2, #255	; 0xff
 800077a:	1ad2      	subs	r2, r2, r3
 800077c:	0013      	movs	r3, r2
 800077e:	021b      	lsls	r3, r3, #8
 8000780:	1a9b      	subs	r3, r3, r2
 8000782:	121b      	asrs	r3, r3, #8
 8000784:	22ff      	movs	r2, #255	; 0xff
 8000786:	1ad3      	subs	r3, r2, r3
 8000788:	434b      	muls	r3, r1
 800078a:	121a      	asrs	r2, r3, #8
 800078c:	2313      	movs	r3, #19
 800078e:	18fb      	adds	r3, r7, r3
 8000790:	701a      	strb	r2, [r3, #0]

    switch (region) {
 8000792:	183b      	adds	r3, r7, r0
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	2b04      	cmp	r3, #4
 8000798:	d854      	bhi.n	8000844 <HSVtoPixel+0x150>
 800079a:	009a      	lsls	r2, r3, #2
 800079c:	4b4d      	ldr	r3, [pc, #308]	; (80008d4 <HSVtoPixel+0x1e0>)
 800079e:	18d3      	adds	r3, r2, r3
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	469f      	mov	pc, r3
        case 0:
            pixel.R = v;
 80007a4:	210c      	movs	r1, #12
 80007a6:	187b      	adds	r3, r7, r1
 80007a8:	1dba      	adds	r2, r7, #6
 80007aa:	7812      	ldrb	r2, [r2, #0]
 80007ac:	701a      	strb	r2, [r3, #0]
            pixel.G = t;
 80007ae:	187b      	adds	r3, r7, r1
 80007b0:	2213      	movs	r2, #19
 80007b2:	18ba      	adds	r2, r7, r2
 80007b4:	7812      	ldrb	r2, [r2, #0]
 80007b6:	705a      	strb	r2, [r3, #1]
            pixel.B = p;
 80007b8:	187b      	adds	r3, r7, r1
 80007ba:	2215      	movs	r2, #21
 80007bc:	18ba      	adds	r2, r7, r2
 80007be:	7812      	ldrb	r2, [r2, #0]
 80007c0:	709a      	strb	r2, [r3, #2]
            break;
 80007c2:	e04f      	b.n	8000864 <HSVtoPixel+0x170>
        case 1:
            pixel.R = q;
 80007c4:	210c      	movs	r1, #12
 80007c6:	187b      	adds	r3, r7, r1
 80007c8:	2214      	movs	r2, #20
 80007ca:	18ba      	adds	r2, r7, r2
 80007cc:	7812      	ldrb	r2, [r2, #0]
 80007ce:	701a      	strb	r2, [r3, #0]
            pixel.G = v;
 80007d0:	187b      	adds	r3, r7, r1
 80007d2:	1dba      	adds	r2, r7, #6
 80007d4:	7812      	ldrb	r2, [r2, #0]
 80007d6:	705a      	strb	r2, [r3, #1]
            pixel.B = p;
 80007d8:	187b      	adds	r3, r7, r1
 80007da:	2215      	movs	r2, #21
 80007dc:	18ba      	adds	r2, r7, r2
 80007de:	7812      	ldrb	r2, [r2, #0]
 80007e0:	709a      	strb	r2, [r3, #2]
            break;
 80007e2:	e03f      	b.n	8000864 <HSVtoPixel+0x170>
        case 2:
            pixel.R = p;
 80007e4:	210c      	movs	r1, #12
 80007e6:	187b      	adds	r3, r7, r1
 80007e8:	2215      	movs	r2, #21
 80007ea:	18ba      	adds	r2, r7, r2
 80007ec:	7812      	ldrb	r2, [r2, #0]
 80007ee:	701a      	strb	r2, [r3, #0]
            pixel.G = v;
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	1dba      	adds	r2, r7, #6
 80007f4:	7812      	ldrb	r2, [r2, #0]
 80007f6:	705a      	strb	r2, [r3, #1]
            pixel.B = t;
 80007f8:	187b      	adds	r3, r7, r1
 80007fa:	2213      	movs	r2, #19
 80007fc:	18ba      	adds	r2, r7, r2
 80007fe:	7812      	ldrb	r2, [r2, #0]
 8000800:	709a      	strb	r2, [r3, #2]
            break;
 8000802:	e02f      	b.n	8000864 <HSVtoPixel+0x170>
        case 3:
            pixel.R = p;
 8000804:	210c      	movs	r1, #12
 8000806:	187b      	adds	r3, r7, r1
 8000808:	2215      	movs	r2, #21
 800080a:	18ba      	adds	r2, r7, r2
 800080c:	7812      	ldrb	r2, [r2, #0]
 800080e:	701a      	strb	r2, [r3, #0]
            pixel.G = q;
 8000810:	187b      	adds	r3, r7, r1
 8000812:	2214      	movs	r2, #20
 8000814:	18ba      	adds	r2, r7, r2
 8000816:	7812      	ldrb	r2, [r2, #0]
 8000818:	705a      	strb	r2, [r3, #1]
            pixel.B = v;
 800081a:	187b      	adds	r3, r7, r1
 800081c:	1dba      	adds	r2, r7, #6
 800081e:	7812      	ldrb	r2, [r2, #0]
 8000820:	709a      	strb	r2, [r3, #2]
            break;
 8000822:	e01f      	b.n	8000864 <HSVtoPixel+0x170>
        case 4:
            pixel.R = t;
 8000824:	210c      	movs	r1, #12
 8000826:	187b      	adds	r3, r7, r1
 8000828:	2213      	movs	r2, #19
 800082a:	18ba      	adds	r2, r7, r2
 800082c:	7812      	ldrb	r2, [r2, #0]
 800082e:	701a      	strb	r2, [r3, #0]
            pixel.G = p;
 8000830:	187b      	adds	r3, r7, r1
 8000832:	2215      	movs	r2, #21
 8000834:	18ba      	adds	r2, r7, r2
 8000836:	7812      	ldrb	r2, [r2, #0]
 8000838:	705a      	strb	r2, [r3, #1]
            pixel.B = v;
 800083a:	187b      	adds	r3, r7, r1
 800083c:	1dba      	adds	r2, r7, #6
 800083e:	7812      	ldrb	r2, [r2, #0]
 8000840:	709a      	strb	r2, [r3, #2]
            break;
 8000842:	e00f      	b.n	8000864 <HSVtoPixel+0x170>
        default:
            pixel.R = v;
 8000844:	210c      	movs	r1, #12
 8000846:	187b      	adds	r3, r7, r1
 8000848:	1dba      	adds	r2, r7, #6
 800084a:	7812      	ldrb	r2, [r2, #0]
 800084c:	701a      	strb	r2, [r3, #0]
            pixel.G = p;
 800084e:	187b      	adds	r3, r7, r1
 8000850:	2215      	movs	r2, #21
 8000852:	18ba      	adds	r2, r7, r2
 8000854:	7812      	ldrb	r2, [r2, #0]
 8000856:	705a      	strb	r2, [r3, #1]
            pixel.B = q;
 8000858:	187b      	adds	r3, r7, r1
 800085a:	2214      	movs	r2, #20
 800085c:	18ba      	adds	r2, r7, r2
 800085e:	7812      	ldrb	r2, [r2, #0]
 8000860:	709a      	strb	r2, [r3, #2]
            break;
 8000862:	46c0      	nop			; (mov r8, r8)
    }

    // Appliquer le masque pour forcer les valeurs à être paires
    pixel.R &= 0xFE; // Le masque 0xFE force le dernier bit à 0.
 8000864:	210c      	movs	r1, #12
 8000866:	187b      	adds	r3, r7, r1
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	2201      	movs	r2, #1
 800086c:	4393      	bics	r3, r2
 800086e:	b2da      	uxtb	r2, r3
 8000870:	187b      	adds	r3, r7, r1
 8000872:	701a      	strb	r2, [r3, #0]
    pixel.G &= 0xFE;
 8000874:	187b      	adds	r3, r7, r1
 8000876:	785b      	ldrb	r3, [r3, #1]
 8000878:	2201      	movs	r2, #1
 800087a:	4393      	bics	r3, r2
 800087c:	b2da      	uxtb	r2, r3
 800087e:	187b      	adds	r3, r7, r1
 8000880:	705a      	strb	r2, [r3, #1]
    pixel.B &= 0xFE;
 8000882:	187b      	adds	r3, r7, r1
 8000884:	789b      	ldrb	r3, [r3, #2]
 8000886:	2201      	movs	r2, #1
 8000888:	4393      	bics	r3, r2
 800088a:	b2da      	uxtb	r2, r3
 800088c:	187b      	adds	r3, r7, r1
 800088e:	709a      	strb	r2, [r3, #2]

    return pixel;
 8000890:	2010      	movs	r0, #16
 8000892:	183b      	adds	r3, r7, r0
 8000894:	187a      	adds	r2, r7, r1
 8000896:	8811      	ldrh	r1, [r2, #0]
 8000898:	8019      	strh	r1, [r3, #0]
 800089a:	7892      	ldrb	r2, [r2, #2]
 800089c:	709a      	strb	r2, [r3, #2]
 800089e:	183a      	adds	r2, r7, r0
 80008a0:	2300      	movs	r3, #0
 80008a2:	7811      	ldrb	r1, [r2, #0]
 80008a4:	20ff      	movs	r0, #255	; 0xff
 80008a6:	4001      	ands	r1, r0
 80008a8:	20ff      	movs	r0, #255	; 0xff
 80008aa:	4383      	bics	r3, r0
 80008ac:	430b      	orrs	r3, r1
 80008ae:	7851      	ldrb	r1, [r2, #1]
 80008b0:	20ff      	movs	r0, #255	; 0xff
 80008b2:	4001      	ands	r1, r0
 80008b4:	0209      	lsls	r1, r1, #8
 80008b6:	4808      	ldr	r0, [pc, #32]	; (80008d8 <HSVtoPixel+0x1e4>)
 80008b8:	4003      	ands	r3, r0
 80008ba:	430b      	orrs	r3, r1
 80008bc:	7892      	ldrb	r2, [r2, #2]
 80008be:	21ff      	movs	r1, #255	; 0xff
 80008c0:	400a      	ands	r2, r1
 80008c2:	0412      	lsls	r2, r2, #16
 80008c4:	4905      	ldr	r1, [pc, #20]	; (80008dc <HSVtoPixel+0x1e8>)
 80008c6:	400b      	ands	r3, r1
 80008c8:	4313      	orrs	r3, r2
}
 80008ca:	0018      	movs	r0, r3
 80008cc:	46bd      	mov	sp, r7
 80008ce:	b006      	add	sp, #24
 80008d0:	bdb0      	pop	{r4, r5, r7, pc}
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	0800595c 	.word	0x0800595c
 80008d8:	ffff00ff 	.word	0xffff00ff
 80008dc:	ff00ffff 	.word	0xff00ffff

080008e0 <ws2812_start>:
/* Variables -----------------------------------------------*/
static uint8_t LEDbuffer[LED_BUFFER_SIZE];
extern TIM_HandleTypeDef htim2;

/* Functions -----------------------------------------------*/
void ws2812_start(void) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
	fillBufferBlack();
 80008e4:	f000 f89a 	bl	8000a1c <fillBufferBlack>
	htim2.Init.Period = TIMER_PERIOD - 1;
 80008e8:	4b07      	ldr	r3, [pc, #28]	; (8000908 <ws2812_start+0x28>)
 80008ea:	2209      	movs	r2, #9
 80008ec:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Init(&htim2);
 80008ee:	4b06      	ldr	r3, [pc, #24]	; (8000908 <ws2812_start+0x28>)
 80008f0:	0018      	movs	r0, r3
 80008f2:	f002 fd0b 	bl	800330c <HAL_TIM_Base_Init>
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *) LEDbuffer,
 80008f6:	4b05      	ldr	r3, [pc, #20]	; (800090c <ws2812_start+0x2c>)
 80008f8:	4a05      	ldr	r2, [pc, #20]	; (8000910 <ws2812_start+0x30>)
 80008fa:	4803      	ldr	r0, [pc, #12]	; (8000908 <ws2812_start+0x28>)
 80008fc:	2100      	movs	r1, #0
 80008fe:	f002 fdad 	bl	800345c <HAL_TIM_PWM_Start_DMA>
				LED_BUFFER_SIZE);
	//HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
}
 8000902:	46c0      	nop			; (mov r8, r8)
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000b74 	.word	0x20000b74
 800090c:	00000a61 	.word	0x00000a61
 8000910:	2000008c 	.word	0x2000008c

08000914 <setLEDcolor>:
void ws2812_update(void) {
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *) LEDbuffer,
			LED_BUFFER_SIZE);
}

void setLEDcolor(uint32_t LEDnumber, uint8_t RED, uint8_t GREEN, uint8_t BLUE) {
 8000914:	b590      	push	{r4, r7, lr}
 8000916:	b08b      	sub	sp, #44	; 0x2c
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	000c      	movs	r4, r1
 800091e:	0010      	movs	r0, r2
 8000920:	0019      	movs	r1, r3
 8000922:	1cfb      	adds	r3, r7, #3
 8000924:	1c22      	adds	r2, r4, #0
 8000926:	701a      	strb	r2, [r3, #0]
 8000928:	1cbb      	adds	r3, r7, #2
 800092a:	1c02      	adds	r2, r0, #0
 800092c:	701a      	strb	r2, [r3, #0]
 800092e:	1c7b      	adds	r3, r7, #1
 8000930:	1c0a      	adds	r2, r1, #0
 8000932:	701a      	strb	r2, [r3, #0]
	uint8_t tempBuffer[24];
	uint32_t i;
	uint32_t LEDindex;
	LEDindex = LEDnumber % LED_NUMBER;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	215e      	movs	r1, #94	; 0x5e
 8000938:	0018      	movs	r0, r3
 800093a:	f7ff fc6b 	bl	8000214 <__aeabi_uidivmod>
 800093e:	000b      	movs	r3, r1
 8000940:	623b      	str	r3, [r7, #32]

	for (i = 0; i < 8; i++) // GREEN data
 8000942:	2300      	movs	r3, #0
 8000944:	627b      	str	r3, [r7, #36]	; 0x24
 8000946:	e013      	b.n	8000970 <setLEDcolor+0x5c>
		tempBuffer[i] = ((GREEN << i) & 0x80) ? WS2812_1 : WS2812_0;
 8000948:	1cbb      	adds	r3, r7, #2
 800094a:	781a      	ldrb	r2, [r3, #0]
 800094c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800094e:	409a      	lsls	r2, r3
 8000950:	0013      	movs	r3, r2
 8000952:	2280      	movs	r2, #128	; 0x80
 8000954:	4013      	ands	r3, r2
 8000956:	d001      	beq.n	800095c <setLEDcolor+0x48>
 8000958:	2106      	movs	r1, #6
 800095a:	e000      	b.n	800095e <setLEDcolor+0x4a>
 800095c:	2103      	movs	r1, #3
 800095e:	2308      	movs	r3, #8
 8000960:	18fa      	adds	r2, r7, r3
 8000962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000964:	18d3      	adds	r3, r2, r3
 8000966:	1c0a      	adds	r2, r1, #0
 8000968:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) // GREEN data
 800096a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800096c:	3301      	adds	r3, #1
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
 8000970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000972:	2b07      	cmp	r3, #7
 8000974:	d9e8      	bls.n	8000948 <setLEDcolor+0x34>
	for (i = 0; i < 8; i++) // RED
 8000976:	2300      	movs	r3, #0
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
 800097a:	e012      	b.n	80009a2 <setLEDcolor+0x8e>
		tempBuffer[8 + i] = ((RED << i) & 0x80) ? WS2812_1 : WS2812_0;
 800097c:	1cfb      	adds	r3, r7, #3
 800097e:	781a      	ldrb	r2, [r3, #0]
 8000980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000982:	409a      	lsls	r2, r3
 8000984:	0013      	movs	r3, r2
 8000986:	2280      	movs	r2, #128	; 0x80
 8000988:	4013      	ands	r3, r2
 800098a:	d001      	beq.n	8000990 <setLEDcolor+0x7c>
 800098c:	2106      	movs	r1, #6
 800098e:	e000      	b.n	8000992 <setLEDcolor+0x7e>
 8000990:	2103      	movs	r1, #3
 8000992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000994:	3308      	adds	r3, #8
 8000996:	2208      	movs	r2, #8
 8000998:	18ba      	adds	r2, r7, r2
 800099a:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < 8; i++) // RED
 800099c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099e:	3301      	adds	r3, #1
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
 80009a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a4:	2b07      	cmp	r3, #7
 80009a6:	d9e9      	bls.n	800097c <setLEDcolor+0x68>
	for (i = 0; i < 8; i++) // BLUE
 80009a8:	2300      	movs	r3, #0
 80009aa:	627b      	str	r3, [r7, #36]	; 0x24
 80009ac:	e012      	b.n	80009d4 <setLEDcolor+0xc0>
		tempBuffer[16 + i] = ((BLUE << i) & 0x80) ? WS2812_1 : WS2812_0;
 80009ae:	1c7b      	adds	r3, r7, #1
 80009b0:	781a      	ldrb	r2, [r3, #0]
 80009b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b4:	409a      	lsls	r2, r3
 80009b6:	0013      	movs	r3, r2
 80009b8:	2280      	movs	r2, #128	; 0x80
 80009ba:	4013      	ands	r3, r2
 80009bc:	d001      	beq.n	80009c2 <setLEDcolor+0xae>
 80009be:	2106      	movs	r1, #6
 80009c0:	e000      	b.n	80009c4 <setLEDcolor+0xb0>
 80009c2:	2103      	movs	r1, #3
 80009c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c6:	3310      	adds	r3, #16
 80009c8:	2208      	movs	r2, #8
 80009ca:	18ba      	adds	r2, r7, r2
 80009cc:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < 8; i++) // BLUE
 80009ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d0:	3301      	adds	r3, #1
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
 80009d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d6:	2b07      	cmp	r3, #7
 80009d8:	d9e9      	bls.n	80009ae <setLEDcolor+0x9a>

	for (i = 0; i < 24; i++)
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
 80009de:	e012      	b.n	8000a06 <setLEDcolor+0xf2>
		LEDbuffer[RESET_SLOTS_BEGIN + LEDindex * 24 + i] = tempBuffer[i];
 80009e0:	6a3a      	ldr	r2, [r7, #32]
 80009e2:	0013      	movs	r3, r2
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	189b      	adds	r3, r3, r2
 80009e8:	00db      	lsls	r3, r3, #3
 80009ea:	001a      	movs	r2, r3
 80009ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ee:	18d3      	adds	r3, r2, r3
 80009f0:	33c8      	adds	r3, #200	; 0xc8
 80009f2:	2208      	movs	r2, #8
 80009f4:	18b9      	adds	r1, r7, r2
 80009f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009f8:	188a      	adds	r2, r1, r2
 80009fa:	7811      	ldrb	r1, [r2, #0]
 80009fc:	4a06      	ldr	r2, [pc, #24]	; (8000a18 <setLEDcolor+0x104>)
 80009fe:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < 24; i++)
 8000a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a02:	3301      	adds	r3, #1
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
 8000a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a08:	2b17      	cmp	r3, #23
 8000a0a:	d9e9      	bls.n	80009e0 <setLEDcolor+0xcc>
}
 8000a0c:	46c0      	nop			; (mov r8, r8)
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	46bd      	mov	sp, r7
 8000a12:	b00b      	add	sp, #44	; 0x2c
 8000a14:	bd90      	pop	{r4, r7, pc}
 8000a16:	46c0      	nop			; (mov r8, r8)
 8000a18:	2000008c 	.word	0x2000008c

08000a1c <fillBufferBlack>:

	for (index = 0; index < LED_NUMBER; index++)
		setLEDcolor(index, RED, GREEN, BLUE);
}

void fillBufferBlack(void) {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
	/*Fill LED buffer - ALL OFF*/
	uint32_t index, buffIndex;
	buffIndex = 0;
 8000a22:	2300      	movs	r3, #0
 8000a24:	603b      	str	r3, [r7, #0]

	for (index = 0; index < RESET_SLOTS_BEGIN; index++) {
 8000a26:	2300      	movs	r3, #0
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	e00a      	b.n	8000a42 <fillBufferBlack+0x26>
		LEDbuffer[buffIndex] = WS2812_RESET;
 8000a2c:	4a1f      	ldr	r2, [pc, #124]	; (8000aac <fillBufferBlack+0x90>)
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	18d3      	adds	r3, r2, r3
 8000a32:	2200      	movs	r2, #0
 8000a34:	701a      	strb	r2, [r3, #0]
		buffIndex++;
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	603b      	str	r3, [r7, #0]
	for (index = 0; index < RESET_SLOTS_BEGIN; index++) {
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2bc7      	cmp	r3, #199	; 0xc7
 8000a46:	d9f1      	bls.n	8000a2c <fillBufferBlack+0x10>
	}
	for (index = 0; index < LED_DATA_SIZE; index++) {
 8000a48:	2300      	movs	r3, #0
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	e00a      	b.n	8000a64 <fillBufferBlack+0x48>
		LEDbuffer[buffIndex] = WS2812_0;
 8000a4e:	4a17      	ldr	r2, [pc, #92]	; (8000aac <fillBufferBlack+0x90>)
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	18d3      	adds	r3, r2, r3
 8000a54:	2203      	movs	r2, #3
 8000a56:	701a      	strb	r2, [r3, #0]
		buffIndex++;
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	603b      	str	r3, [r7, #0]
	for (index = 0; index < LED_DATA_SIZE; index++) {
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	3301      	adds	r3, #1
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687a      	ldr	r2, [r7, #4]
 8000a66:	238d      	movs	r3, #141	; 0x8d
 8000a68:	011b      	lsls	r3, r3, #4
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	d3ef      	bcc.n	8000a4e <fillBufferBlack+0x32>
	}
	LEDbuffer[buffIndex] = WS2812_0;
 8000a6e:	4a0f      	ldr	r2, [pc, #60]	; (8000aac <fillBufferBlack+0x90>)
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	18d3      	adds	r3, r2, r3
 8000a74:	2203      	movs	r2, #3
 8000a76:	701a      	strb	r2, [r3, #0]
	buffIndex++;
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	603b      	str	r3, [r7, #0]
	for (index = 0; index < RESET_SLOTS_END; index++) {
 8000a7e:	2300      	movs	r3, #0
 8000a80:	607b      	str	r3, [r7, #4]
 8000a82:	e00a      	b.n	8000a9a <fillBufferBlack+0x7e>
		LEDbuffer[buffIndex] = 0;
 8000a84:	4a09      	ldr	r2, [pc, #36]	; (8000aac <fillBufferBlack+0x90>)
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	18d3      	adds	r3, r2, r3
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	701a      	strb	r2, [r3, #0]
		buffIndex++;
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	3301      	adds	r3, #1
 8000a92:	603b      	str	r3, [r7, #0]
	for (index = 0; index < RESET_SLOTS_END; index++) {
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	3301      	adds	r3, #1
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2bc7      	cmp	r3, #199	; 0xc7
 8000a9e:	d9f1      	bls.n	8000a84 <fillBufferBlack+0x68>
	}
}
 8000aa0:	46c0      	nop			; (mov r8, r8)
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	b002      	add	sp, #8
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	2000008c 	.word	0x2000008c

08000ab0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ab0:	b5b0      	push	{r4, r5, r7, lr}
 8000ab2:	b08c      	sub	sp, #48	; 0x30
 8000ab4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ab6:	f000 fda7 	bl	8001608 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aba:	f000 f8cf 	bl	8000c5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000abe:	f000 fa65 	bl	8000f8c <MX_GPIO_Init>
  MX_DMA_Init();
 8000ac2:	f000 fa35 	bl	8000f30 <MX_DMA_Init>
  MX_TIM2_Init();
 8000ac6:	f000 f983 	bl	8000dd0 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000aca:	f000 f9ff 	bl	8000ecc <MX_USART1_UART_Init>
  MX_ADC_Init();
 8000ace:	f000 f923 	bl	8000d18 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  ws2812_start();
 8000ad2:	f7ff ff05 	bl	80008e0 <ws2812_start>
  HAL_UART_Receive_IT(&huart1, Rx_data, 19);
 8000ad6:	495e      	ldr	r1, [pc, #376]	; (8000c50 <main+0x1a0>)
 8000ad8:	4b5e      	ldr	r3, [pc, #376]	; (8000c54 <main+0x1a4>)
 8000ada:	2213      	movs	r2, #19
 8000adc:	0018      	movs	r0, r3
 8000ade:	f003 fcad 	bl	800443c <HAL_UART_Receive_IT>
  HAL_ADC_Start(&hadc);
 8000ae2:	4b5d      	ldr	r3, [pc, #372]	; (8000c58 <main+0x1a8>)
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f000 ff33 	bl	8001950 <HAL_ADC_Start>

  uint8_t H =0;
 8000aea:	231f      	movs	r3, #31
 8000aec:	18fb      	adds	r3, r7, r3
 8000aee:	2200      	movs	r2, #0
 8000af0:	701a      	strb	r2, [r3, #0]
  // Déclarez une instance de Canvas
  Canvas myCanvas;
  // Initialisez la structure Canvas
  myCanvas.numCols = NUM_COLS;
 8000af2:	240c      	movs	r4, #12
 8000af4:	193b      	adds	r3, r7, r4
 8000af6:	2213      	movs	r2, #19
 8000af8:	601a      	str	r2, [r3, #0]
  myCanvas.numRows = NUM_ROWS;
 8000afa:	193b      	adds	r3, r7, r4
 8000afc:	2205      	movs	r2, #5
 8000afe:	605a      	str	r2, [r3, #4]
  // Allouez de la mémoire pour les pixels
  myCanvas.pixels = malloc(sizeof(Pixel) * NUM_COLS * NUM_ROWS);
 8000b00:	231e      	movs	r3, #30
 8000b02:	33ff      	adds	r3, #255	; 0xff
 8000b04:	0018      	movs	r0, r3
 8000b06:	f004 fe45 	bl	8005794 <malloc>
 8000b0a:	0003      	movs	r3, r0
 8000b0c:	001a      	movs	r2, r3
 8000b0e:	193b      	adds	r3, r7, r4
 8000b10:	609a      	str	r2, [r3, #8]
  // Utilisez memset pour initialiser le tableau à zéro
  memset(myCanvas.pixels, 0, sizeof(Pixel) * NUM_COLS * NUM_ROWS);
 8000b12:	193b      	adds	r3, r7, r4
 8000b14:	689b      	ldr	r3, [r3, #8]
 8000b16:	221e      	movs	r2, #30
 8000b18:	32ff      	adds	r2, #255	; 0xff
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f004 fe4c 	bl	80057ba <memset>
//
//	  ReadADC = HAL_ADC_GetValue(&hadc);



	  if(HAL_UART_Receive_IT(&huart1, Rx_data, 19) != HAL_BUSY)
 8000b22:	494b      	ldr	r1, [pc, #300]	; (8000c50 <main+0x1a0>)
 8000b24:	4b4b      	ldr	r3, [pc, #300]	; (8000c54 <main+0x1a4>)
 8000b26:	2213      	movs	r2, #19
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f003 fc87 	bl	800443c <HAL_UART_Receive_IT>
 8000b2e:	0003      	movs	r3, r0
 8000b30:	2b02      	cmp	r3, #2
 8000b32:	d005      	beq.n	8000b40 <main+0x90>
	  {
		  HAL_UART_Receive_IT(&huart1, Rx_data, 19);
 8000b34:	4946      	ldr	r1, [pc, #280]	; (8000c50 <main+0x1a0>)
 8000b36:	4b47      	ldr	r3, [pc, #284]	; (8000c54 <main+0x1a4>)
 8000b38:	2213      	movs	r2, #19
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	f003 fc7e 	bl	800443c <HAL_UART_Receive_IT>
	  }
	  /**********Background***************/

	  for(uint8_t diag=1; diag<=23; diag++){
 8000b40:	231e      	movs	r3, #30
 8000b42:	18fb      	adds	r3, r7, r3
 8000b44:	2201      	movs	r2, #1
 8000b46:	701a      	strb	r2, [r3, #0]
 8000b48:	e031      	b.n	8000bae <main+0xfe>
		  colorDiagonal(&myCanvas, HSVtoPixel((H + (diag* 255 / 23))%255 , MAX_LUX), diag);
 8000b4a:	231f      	movs	r3, #31
 8000b4c:	18fb      	adds	r3, r7, r3
 8000b4e:	781c      	ldrb	r4, [r3, #0]
 8000b50:	251e      	movs	r5, #30
 8000b52:	197b      	adds	r3, r7, r5
 8000b54:	781a      	ldrb	r2, [r3, #0]
 8000b56:	0013      	movs	r3, r2
 8000b58:	021b      	lsls	r3, r3, #8
 8000b5a:	1a9b      	subs	r3, r3, r2
 8000b5c:	2117      	movs	r1, #23
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f7ff fb5c 	bl	800021c <__divsi3>
 8000b64:	0003      	movs	r3, r0
 8000b66:	18e3      	adds	r3, r4, r3
 8000b68:	21ff      	movs	r1, #255	; 0xff
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f7ff fc3c 	bl	80003e8 <__aeabi_idivmod>
 8000b70:	000b      	movs	r3, r1
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	21fe      	movs	r1, #254	; 0xfe
 8000b76:	0018      	movs	r0, r3
 8000b78:	f7ff fdbc 	bl	80006f4 <HSVtoPixel>
 8000b7c:	0003      	movs	r3, r0
 8000b7e:	001a      	movs	r2, r3
 8000b80:	2018      	movs	r0, #24
 8000b82:	183b      	adds	r3, r7, r0
 8000b84:	1c11      	adds	r1, r2, #0
 8000b86:	7019      	strb	r1, [r3, #0]
 8000b88:	0411      	lsls	r1, r2, #16
 8000b8a:	0e09      	lsrs	r1, r1, #24
 8000b8c:	7059      	strb	r1, [r3, #1]
 8000b8e:	0212      	lsls	r2, r2, #8
 8000b90:	0e12      	lsrs	r2, r2, #24
 8000b92:	709a      	strb	r2, [r3, #2]
 8000b94:	197b      	adds	r3, r7, r5
 8000b96:	781a      	ldrb	r2, [r3, #0]
 8000b98:	183b      	adds	r3, r7, r0
 8000b9a:	210c      	movs	r1, #12
 8000b9c:	1878      	adds	r0, r7, r1
 8000b9e:	6819      	ldr	r1, [r3, #0]
 8000ba0:	f7ff fc93 	bl	80004ca <colorDiagonal>
	  for(uint8_t diag=1; diag<=23; diag++){
 8000ba4:	197b      	adds	r3, r7, r5
 8000ba6:	781a      	ldrb	r2, [r3, #0]
 8000ba8:	197b      	adds	r3, r7, r5
 8000baa:	3201      	adds	r2, #1
 8000bac:	701a      	strb	r2, [r3, #0]
 8000bae:	231e      	movs	r3, #30
 8000bb0:	18fb      	adds	r3, r7, r3
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b17      	cmp	r3, #23
 8000bb6:	d9c8      	bls.n	8000b4a <main+0x9a>
	  }

	  drawRectangle(&myCanvas, 17, 3, 2, 2, (Pixel){0,0,MAX_LUX}, (Pixel){1,0,0});
 8000bb8:	2408      	movs	r4, #8
 8000bba:	193b      	adds	r3, r7, r4
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	701a      	strb	r2, [r3, #0]
 8000bc0:	193b      	adds	r3, r7, r4
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	705a      	strb	r2, [r3, #1]
 8000bc6:	193b      	adds	r3, r7, r4
 8000bc8:	22fe      	movs	r2, #254	; 0xfe
 8000bca:	709a      	strb	r2, [r3, #2]
 8000bcc:	1d3b      	adds	r3, r7, #4
 8000bce:	2201      	movs	r2, #1
 8000bd0:	701a      	strb	r2, [r3, #0]
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	705a      	strb	r2, [r3, #1]
 8000bd8:	1d3b      	adds	r3, r7, #4
 8000bda:	2200      	movs	r2, #0
 8000bdc:	709a      	strb	r2, [r3, #2]
 8000bde:	250c      	movs	r5, #12
 8000be0:	1978      	adds	r0, r7, r5
 8000be2:	1d3a      	adds	r2, r7, #4
 8000be4:	2308      	movs	r3, #8
 8000be6:	446b      	add	r3, sp
 8000be8:	8811      	ldrh	r1, [r2, #0]
 8000bea:	8019      	strh	r1, [r3, #0]
 8000bec:	7892      	ldrb	r2, [r2, #2]
 8000bee:	709a      	strb	r2, [r3, #2]
 8000bf0:	193a      	adds	r2, r7, r4
 8000bf2:	2304      	movs	r3, #4
 8000bf4:	446b      	add	r3, sp
 8000bf6:	8811      	ldrh	r1, [r2, #0]
 8000bf8:	8019      	strh	r1, [r3, #0]
 8000bfa:	7892      	ldrb	r2, [r2, #2]
 8000bfc:	709a      	strb	r2, [r3, #2]
 8000bfe:	2302      	movs	r3, #2
 8000c00:	9300      	str	r3, [sp, #0]
 8000c02:	2302      	movs	r3, #2
 8000c04:	2203      	movs	r2, #3
 8000c06:	2111      	movs	r1, #17
 8000c08:	f7ff fc99 	bl	800053e <drawRectangle>

	  displayBCD(&myCanvas, 8, 3, H>>4, 4);
 8000c0c:	241f      	movs	r4, #31
 8000c0e:	193b      	adds	r3, r7, r4
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	091b      	lsrs	r3, r3, #4
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	001a      	movs	r2, r3
 8000c18:	1978      	adds	r0, r7, r5
 8000c1a:	2304      	movs	r3, #4
 8000c1c:	9300      	str	r3, [sp, #0]
 8000c1e:	0013      	movs	r3, r2
 8000c20:	2203      	movs	r2, #3
 8000c22:	2108      	movs	r1, #8
 8000c24:	f7ff fd08 	bl	8000638 <displayBCD>

	  sendCanvas(&myCanvas);
 8000c28:	197b      	adds	r3, r7, r5
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f7ff fbe2 	bl	80003f4 <sendCanvas>

	  if (H >= 255){
 8000c30:	193b      	adds	r3, r7, r4
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2bff      	cmp	r3, #255	; 0xff
 8000c36:	d103      	bne.n	8000c40 <main+0x190>
		  H=0;
 8000c38:	193b      	adds	r3, r7, r4
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	701a      	strb	r2, [r3, #0]
 8000c3e:	e770      	b.n	8000b22 <main+0x72>
	  }
	  else{
		  H++;
 8000c40:	211f      	movs	r1, #31
 8000c42:	187b      	adds	r3, r7, r1
 8000c44:	781a      	ldrb	r2, [r3, #0]
 8000c46:	187b      	adds	r3, r7, r1
 8000c48:	3201      	adds	r2, #1
 8000c4a:	701a      	strb	r2, [r3, #0]
  {
 8000c4c:	e769      	b.n	8000b22 <main+0x72>
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	20000cd4 	.word	0x20000cd4
 8000c54:	20000c00 	.word	0x20000c00
 8000c58:	20000af0 	.word	0x20000af0

08000c5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c5c:	b590      	push	{r4, r7, lr}
 8000c5e:	b099      	sub	sp, #100	; 0x64
 8000c60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c62:	242c      	movs	r4, #44	; 0x2c
 8000c64:	193b      	adds	r3, r7, r4
 8000c66:	0018      	movs	r0, r3
 8000c68:	2334      	movs	r3, #52	; 0x34
 8000c6a:	001a      	movs	r2, r3
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	f004 fda4 	bl	80057ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c72:	231c      	movs	r3, #28
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	0018      	movs	r0, r3
 8000c78:	2310      	movs	r3, #16
 8000c7a:	001a      	movs	r2, r3
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	f004 fd9c 	bl	80057ba <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	0018      	movs	r0, r3
 8000c86:	2318      	movs	r3, #24
 8000c88:	001a      	movs	r2, r3
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	f004 fd95 	bl	80057ba <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000c90:	0021      	movs	r1, r4
 8000c92:	187b      	adds	r3, r7, r1
 8000c94:	2212      	movs	r2, #18
 8000c96:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c98:	187b      	adds	r3, r7, r1
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000c9e:	187b      	adds	r3, r7, r1
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ca4:	187b      	adds	r3, r7, r1
 8000ca6:	2210      	movs	r2, #16
 8000ca8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000caa:	187b      	adds	r3, r7, r1
 8000cac:	2210      	movs	r2, #16
 8000cae:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000cb0:	187b      	adds	r3, r7, r1
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cb6:	187b      	adds	r3, r7, r1
 8000cb8:	0018      	movs	r0, r3
 8000cba:	f001 fd47 	bl	800274c <HAL_RCC_OscConfig>
 8000cbe:	1e03      	subs	r3, r0, #0
 8000cc0:	d001      	beq.n	8000cc6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000cc2:	f000 fa25 	bl	8001110 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cc6:	211c      	movs	r1, #28
 8000cc8:	187b      	adds	r3, r7, r1
 8000cca:	2207      	movs	r2, #7
 8000ccc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cce:	187b      	adds	r3, r7, r1
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cd4:	187b      	adds	r3, r7, r1
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cda:	187b      	adds	r3, r7, r1
 8000cdc:	2200      	movs	r2, #0
 8000cde:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ce0:	187b      	adds	r3, r7, r1
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f002 f8b7 	bl	8002e58 <HAL_RCC_ClockConfig>
 8000cea:	1e03      	subs	r3, r0, #0
 8000cec:	d001      	beq.n	8000cf2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000cee:	f000 fa0f 	bl	8001110 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000cf2:	1d3b      	adds	r3, r7, #4
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000cf8:	1d3b      	adds	r3, r7, #4
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cfe:	1d3b      	adds	r3, r7, #4
 8000d00:	0018      	movs	r0, r3
 8000d02:	f002 fa15 	bl	8003130 <HAL_RCCEx_PeriphCLKConfig>
 8000d06:	1e03      	subs	r3, r0, #0
 8000d08:	d001      	beq.n	8000d0e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000d0a:	f000 fa01 	bl	8001110 <Error_Handler>
  }
}
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	46bd      	mov	sp, r7
 8000d12:	b019      	add	sp, #100	; 0x64
 8000d14:	bd90      	pop	{r4, r7, pc}
	...

08000d18 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d1e:	1d3b      	adds	r3, r7, #4
 8000d20:	0018      	movs	r0, r3
 8000d22:	230c      	movs	r3, #12
 8000d24:	001a      	movs	r2, r3
 8000d26:	2100      	movs	r1, #0
 8000d28:	f004 fd47 	bl	80057ba <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000d2c:	4b26      	ldr	r3, [pc, #152]	; (8000dc8 <MX_ADC_Init+0xb0>)
 8000d2e:	4a27      	ldr	r2, [pc, #156]	; (8000dcc <MX_ADC_Init+0xb4>)
 8000d30:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d32:	4b25      	ldr	r3, [pc, #148]	; (8000dc8 <MX_ADC_Init+0xb0>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000d38:	4b23      	ldr	r3, [pc, #140]	; (8000dc8 <MX_ADC_Init+0xb0>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d3e:	4b22      	ldr	r3, [pc, #136]	; (8000dc8 <MX_ADC_Init+0xb0>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000d44:	4b20      	ldr	r3, [pc, #128]	; (8000dc8 <MX_ADC_Init+0xb0>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d4a:	4b1f      	ldr	r3, [pc, #124]	; (8000dc8 <MX_ADC_Init+0xb0>)
 8000d4c:	2204      	movs	r2, #4
 8000d4e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000d50:	4b1d      	ldr	r3, [pc, #116]	; (8000dc8 <MX_ADC_Init+0xb0>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000d56:	4b1c      	ldr	r3, [pc, #112]	; (8000dc8 <MX_ADC_Init+0xb0>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000d5c:	4b1a      	ldr	r3, [pc, #104]	; (8000dc8 <MX_ADC_Init+0xb0>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000d62:	4b19      	ldr	r3, [pc, #100]	; (8000dc8 <MX_ADC_Init+0xb0>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d68:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <MX_ADC_Init+0xb0>)
 8000d6a:	22c2      	movs	r2, #194	; 0xc2
 8000d6c:	32ff      	adds	r2, #255	; 0xff
 8000d6e:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d70:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <MX_ADC_Init+0xb0>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000d76:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <MX_ADC_Init+0xb0>)
 8000d78:	2224      	movs	r2, #36	; 0x24
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d7e:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <MX_ADC_Init+0xb0>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000d84:	4b10      	ldr	r3, [pc, #64]	; (8000dc8 <MX_ADC_Init+0xb0>)
 8000d86:	0018      	movs	r0, r3
 8000d88:	f000 fca2 	bl	80016d0 <HAL_ADC_Init>
 8000d8c:	1e03      	subs	r3, r0, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000d90:	f000 f9be 	bl	8001110 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000d94:	1d3b      	adds	r3, r7, #4
 8000d96:	2207      	movs	r2, #7
 8000d98:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	2280      	movs	r2, #128	; 0x80
 8000d9e:	0152      	lsls	r2, r2, #5
 8000da0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000da2:	1d3b      	adds	r3, r7, #4
 8000da4:	2280      	movs	r2, #128	; 0x80
 8000da6:	0552      	lsls	r2, r2, #21
 8000da8:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000daa:	1d3a      	adds	r2, r7, #4
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <MX_ADC_Init+0xb0>)
 8000dae:	0011      	movs	r1, r2
 8000db0:	0018      	movs	r0, r3
 8000db2:	f000 fedd 	bl	8001b70 <HAL_ADC_ConfigChannel>
 8000db6:	1e03      	subs	r3, r0, #0
 8000db8:	d001      	beq.n	8000dbe <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000dba:	f000 f9a9 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	b004      	add	sp, #16
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	20000af0 	.word	0x20000af0
 8000dcc:	40012400 	.word	0x40012400

08000dd0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08e      	sub	sp, #56	; 0x38
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dd6:	2328      	movs	r3, #40	; 0x28
 8000dd8:	18fb      	adds	r3, r7, r3
 8000dda:	0018      	movs	r0, r3
 8000ddc:	2310      	movs	r3, #16
 8000dde:	001a      	movs	r2, r3
 8000de0:	2100      	movs	r1, #0
 8000de2:	f004 fcea 	bl	80057ba <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de6:	2320      	movs	r3, #32
 8000de8:	18fb      	adds	r3, r7, r3
 8000dea:	0018      	movs	r0, r3
 8000dec:	2308      	movs	r3, #8
 8000dee:	001a      	movs	r2, r3
 8000df0:	2100      	movs	r1, #0
 8000df2:	f004 fce2 	bl	80057ba <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	0018      	movs	r0, r3
 8000dfa:	231c      	movs	r3, #28
 8000dfc:	001a      	movs	r2, r3
 8000dfe:	2100      	movs	r1, #0
 8000e00:	f004 fcdb 	bl	80057ba <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e04:	4b30      	ldr	r3, [pc, #192]	; (8000ec8 <MX_TIM2_Init+0xf8>)
 8000e06:	2280      	movs	r2, #128	; 0x80
 8000e08:	05d2      	lsls	r2, r2, #23
 8000e0a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e0c:	4b2e      	ldr	r3, [pc, #184]	; (8000ec8 <MX_TIM2_Init+0xf8>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e12:	4b2d      	ldr	r3, [pc, #180]	; (8000ec8 <MX_TIM2_Init+0xf8>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 8000e18:	4b2b      	ldr	r3, [pc, #172]	; (8000ec8 <MX_TIM2_Init+0xf8>)
 8000e1a:	2209      	movs	r2, #9
 8000e1c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e1e:	4b2a      	ldr	r3, [pc, #168]	; (8000ec8 <MX_TIM2_Init+0xf8>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e24:	4b28      	ldr	r3, [pc, #160]	; (8000ec8 <MX_TIM2_Init+0xf8>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e2a:	4b27      	ldr	r3, [pc, #156]	; (8000ec8 <MX_TIM2_Init+0xf8>)
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	f002 fa6d 	bl	800330c <HAL_TIM_Base_Init>
 8000e32:	1e03      	subs	r3, r0, #0
 8000e34:	d001      	beq.n	8000e3a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000e36:	f000 f96b 	bl	8001110 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e3a:	2128      	movs	r1, #40	; 0x28
 8000e3c:	187b      	adds	r3, r7, r1
 8000e3e:	2280      	movs	r2, #128	; 0x80
 8000e40:	0152      	lsls	r2, r2, #5
 8000e42:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e44:	187a      	adds	r2, r7, r1
 8000e46:	4b20      	ldr	r3, [pc, #128]	; (8000ec8 <MX_TIM2_Init+0xf8>)
 8000e48:	0011      	movs	r1, r2
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	f002 fd76 	bl	800393c <HAL_TIM_ConfigClockSource>
 8000e50:	1e03      	subs	r3, r0, #0
 8000e52:	d001      	beq.n	8000e58 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000e54:	f000 f95c 	bl	8001110 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e58:	4b1b      	ldr	r3, [pc, #108]	; (8000ec8 <MX_TIM2_Init+0xf8>)
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	f002 faa6 	bl	80033ac <HAL_TIM_PWM_Init>
 8000e60:	1e03      	subs	r3, r0, #0
 8000e62:	d001      	beq.n	8000e68 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000e64:	f000 f954 	bl	8001110 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e68:	2120      	movs	r1, #32
 8000e6a:	187b      	adds	r3, r7, r1
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e70:	187b      	adds	r3, r7, r1
 8000e72:	2200      	movs	r2, #0
 8000e74:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e76:	187a      	adds	r2, r7, r1
 8000e78:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <MX_TIM2_Init+0xf8>)
 8000e7a:	0011      	movs	r1, r2
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	f003 fa31 	bl	80042e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e82:	1e03      	subs	r3, r0, #0
 8000e84:	d001      	beq.n	8000e8a <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000e86:	f000 f943 	bl	8001110 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e8a:	1d3b      	adds	r3, r7, #4
 8000e8c:	2260      	movs	r2, #96	; 0x60
 8000e8e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000e90:	1d3b      	adds	r3, r7, #4
 8000e92:	2200      	movs	r2, #0
 8000e94:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e96:	1d3b      	adds	r3, r7, #4
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e9c:	1d3b      	adds	r3, r7, #4
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ea2:	1d39      	adds	r1, r7, #4
 8000ea4:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <MX_TIM2_Init+0xf8>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	f002 fc81 	bl	80037b0 <HAL_TIM_PWM_ConfigChannel>
 8000eae:	1e03      	subs	r3, r0, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8000eb2:	f000 f92d 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000eb6:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <MX_TIM2_Init+0xf8>)
 8000eb8:	0018      	movs	r0, r3
 8000eba:	f000 fa15 	bl	80012e8 <HAL_TIM_MspPostInit>

}
 8000ebe:	46c0      	nop			; (mov r8, r8)
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	b00e      	add	sp, #56	; 0x38
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	46c0      	nop			; (mov r8, r8)
 8000ec8:	20000b74 	.word	0x20000b74

08000ecc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ed0:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <MX_USART1_UART_Init+0x58>)
 8000ed2:	4a15      	ldr	r2, [pc, #84]	; (8000f28 <MX_USART1_UART_Init+0x5c>)
 8000ed4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 250000;
 8000ed6:	4b13      	ldr	r3, [pc, #76]	; (8000f24 <MX_USART1_UART_Init+0x58>)
 8000ed8:	4a14      	ldr	r2, [pc, #80]	; (8000f2c <MX_USART1_UART_Init+0x60>)
 8000eda:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000edc:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <MX_USART1_UART_Init+0x58>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ee2:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <MX_USART1_UART_Init+0x58>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ee8:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <MX_USART1_UART_Init+0x58>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000eee:	4b0d      	ldr	r3, [pc, #52]	; (8000f24 <MX_USART1_UART_Init+0x58>)
 8000ef0:	220c      	movs	r2, #12
 8000ef2:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ef4:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <MX_USART1_UART_Init+0x58>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000efa:	4b0a      	ldr	r3, [pc, #40]	; (8000f24 <MX_USART1_UART_Init+0x58>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f00:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <MX_USART1_UART_Init+0x58>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f06:	4b07      	ldr	r3, [pc, #28]	; (8000f24 <MX_USART1_UART_Init+0x58>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f0c:	4b05      	ldr	r3, [pc, #20]	; (8000f24 <MX_USART1_UART_Init+0x58>)
 8000f0e:	0018      	movs	r0, r3
 8000f10:	f003 fa40 	bl	8004394 <HAL_UART_Init>
 8000f14:	1e03      	subs	r3, r0, #0
 8000f16:	d001      	beq.n	8000f1c <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 8000f18:	f000 f8fa 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f1c:	46c0      	nop			; (mov r8, r8)
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	46c0      	nop			; (mov r8, r8)
 8000f24:	20000c00 	.word	0x20000c00
 8000f28:	40013800 	.word	0x40013800
 8000f2c:	0003d090 	.word	0x0003d090

08000f30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f36:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <MX_DMA_Init+0x58>)
 8000f38:	695a      	ldr	r2, [r3, #20]
 8000f3a:	4b13      	ldr	r3, [pc, #76]	; (8000f88 <MX_DMA_Init+0x58>)
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	430a      	orrs	r2, r1
 8000f40:	615a      	str	r2, [r3, #20]
 8000f42:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <MX_DMA_Init+0x58>)
 8000f44:	695b      	ldr	r3, [r3, #20]
 8000f46:	2201      	movs	r2, #1
 8000f48:	4013      	ands	r3, r2
 8000f4a:	607b      	str	r3, [r7, #4]
 8000f4c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2100      	movs	r1, #0
 8000f52:	2009      	movs	r0, #9
 8000f54:	f001 f84a 	bl	8001fec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f58:	2009      	movs	r0, #9
 8000f5a:	f001 f85c 	bl	8002016 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2100      	movs	r1, #0
 8000f62:	200a      	movs	r0, #10
 8000f64:	f001 f842 	bl	8001fec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000f68:	200a      	movs	r0, #10
 8000f6a:	f001 f854 	bl	8002016 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2100      	movs	r1, #0
 8000f72:	200b      	movs	r0, #11
 8000f74:	f001 f83a 	bl	8001fec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8000f78:	200b      	movs	r0, #11
 8000f7a:	f001 f84c 	bl	8002016 <HAL_NVIC_EnableIRQ>

}
 8000f7e:	46c0      	nop			; (mov r8, r8)
 8000f80:	46bd      	mov	sp, r7
 8000f82:	b002      	add	sp, #8
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	46c0      	nop			; (mov r8, r8)
 8000f88:	40021000 	.word	0x40021000

08000f8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f8c:	b590      	push	{r4, r7, lr}
 8000f8e:	b089      	sub	sp, #36	; 0x24
 8000f90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f92:	240c      	movs	r4, #12
 8000f94:	193b      	adds	r3, r7, r4
 8000f96:	0018      	movs	r0, r3
 8000f98:	2314      	movs	r3, #20
 8000f9a:	001a      	movs	r2, r3
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	f004 fc0c 	bl	80057ba <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fa2:	4b27      	ldr	r3, [pc, #156]	; (8001040 <MX_GPIO_Init+0xb4>)
 8000fa4:	695a      	ldr	r2, [r3, #20]
 8000fa6:	4b26      	ldr	r3, [pc, #152]	; (8001040 <MX_GPIO_Init+0xb4>)
 8000fa8:	2180      	movs	r1, #128	; 0x80
 8000faa:	03c9      	lsls	r1, r1, #15
 8000fac:	430a      	orrs	r2, r1
 8000fae:	615a      	str	r2, [r3, #20]
 8000fb0:	4b23      	ldr	r3, [pc, #140]	; (8001040 <MX_GPIO_Init+0xb4>)
 8000fb2:	695a      	ldr	r2, [r3, #20]
 8000fb4:	2380      	movs	r3, #128	; 0x80
 8000fb6:	03db      	lsls	r3, r3, #15
 8000fb8:	4013      	ands	r3, r2
 8000fba:	60bb      	str	r3, [r7, #8]
 8000fbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbe:	4b20      	ldr	r3, [pc, #128]	; (8001040 <MX_GPIO_Init+0xb4>)
 8000fc0:	695a      	ldr	r2, [r3, #20]
 8000fc2:	4b1f      	ldr	r3, [pc, #124]	; (8001040 <MX_GPIO_Init+0xb4>)
 8000fc4:	2180      	movs	r1, #128	; 0x80
 8000fc6:	0289      	lsls	r1, r1, #10
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	615a      	str	r2, [r3, #20]
 8000fcc:	4b1c      	ldr	r3, [pc, #112]	; (8001040 <MX_GPIO_Init+0xb4>)
 8000fce:	695a      	ldr	r2, [r3, #20]
 8000fd0:	2380      	movs	r3, #128	; 0x80
 8000fd2:	029b      	lsls	r3, r3, #10
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fda:	4b19      	ldr	r3, [pc, #100]	; (8001040 <MX_GPIO_Init+0xb4>)
 8000fdc:	695a      	ldr	r2, [r3, #20]
 8000fde:	4b18      	ldr	r3, [pc, #96]	; (8001040 <MX_GPIO_Init+0xb4>)
 8000fe0:	2180      	movs	r1, #128	; 0x80
 8000fe2:	02c9      	lsls	r1, r1, #11
 8000fe4:	430a      	orrs	r2, r1
 8000fe6:	615a      	str	r2, [r3, #20]
 8000fe8:	4b15      	ldr	r3, [pc, #84]	; (8001040 <MX_GPIO_Init+0xb4>)
 8000fea:	695a      	ldr	r2, [r3, #20]
 8000fec:	2380      	movs	r3, #128	; 0x80
 8000fee:	02db      	lsls	r3, r3, #11
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	603b      	str	r3, [r7, #0]
 8000ff4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : SW4_Pin SW3_Pin */
  GPIO_InitStruct.Pin = SW4_Pin|SW3_Pin;
 8000ff6:	193b      	adds	r3, r7, r4
 8000ff8:	2290      	movs	r2, #144	; 0x90
 8000ffa:	0112      	lsls	r2, r2, #4
 8000ffc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ffe:	193b      	adds	r3, r7, r4
 8001000:	2200      	movs	r2, #0
 8001002:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	193b      	adds	r3, r7, r4
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100a:	193a      	adds	r2, r7, r4
 800100c:	2390      	movs	r3, #144	; 0x90
 800100e:	05db      	lsls	r3, r3, #23
 8001010:	0011      	movs	r1, r2
 8001012:	0018      	movs	r0, r3
 8001014:	f001 fa32 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 8001018:	193b      	adds	r3, r7, r4
 800101a:	2230      	movs	r2, #48	; 0x30
 800101c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800101e:	193b      	adds	r3, r7, r4
 8001020:	2200      	movs	r2, #0
 8001022:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	193b      	adds	r3, r7, r4
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102a:	193b      	adds	r3, r7, r4
 800102c:	4a05      	ldr	r2, [pc, #20]	; (8001044 <MX_GPIO_Init+0xb8>)
 800102e:	0019      	movs	r1, r3
 8001030:	0010      	movs	r0, r2
 8001032:	f001 fa23 	bl	800247c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001036:	46c0      	nop			; (mov r8, r8)
 8001038:	46bd      	mov	sp, r7
 800103a:	b009      	add	sp, #36	; 0x24
 800103c:	bd90      	pop	{r4, r7, pc}
 800103e:	46c0      	nop			; (mov r8, r8)
 8001040:	40021000 	.word	0x40021000
 8001044:	48000400 	.word	0x48000400

08001048 <HAL_UART_RxCpltCallback>:
* Interruption qui va mettre dans des variables la réception UART comme le	  *
* temps										 								  *
******************************************************************************/

void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]

	if(&huart1 == huart)
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	4b1c      	ldr	r3, [pc, #112]	; (80010c4 <HAL_UART_RxCpltCallback+0x7c>)
 8001054:	429a      	cmp	r2, r3
 8001056:	d130      	bne.n	80010ba <HAL_UART_RxCpltCallback+0x72>
	{
		Heures_brt = Rx_data[4];	//Stock le data des heures, "brt" = brute
 8001058:	4b1b      	ldr	r3, [pc, #108]	; (80010c8 <HAL_UART_RxCpltCallback+0x80>)
 800105a:	791a      	ldrb	r2, [r3, #4]
 800105c:	4b1b      	ldr	r3, [pc, #108]	; (80010cc <HAL_UART_RxCpltCallback+0x84>)
 800105e:	701a      	strb	r2, [r3, #0]
		Minutes_brt = Rx_data[5];	//Stock le data des minutes
 8001060:	4b19      	ldr	r3, [pc, #100]	; (80010c8 <HAL_UART_RxCpltCallback+0x80>)
 8001062:	795a      	ldrb	r2, [r3, #5]
 8001064:	4b1a      	ldr	r3, [pc, #104]	; (80010d0 <HAL_UART_RxCpltCallback+0x88>)
 8001066:	701a      	strb	r2, [r3, #0]

		Heures_U = Heures_brt & 0x0F;	//Traite le data pour avoir l'Unité des Heures
 8001068:	4b18      	ldr	r3, [pc, #96]	; (80010cc <HAL_UART_RxCpltCallback+0x84>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	220f      	movs	r2, #15
 800106e:	4013      	ands	r3, r2
 8001070:	b2da      	uxtb	r2, r3
 8001072:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <HAL_UART_RxCpltCallback+0x8c>)
 8001074:	701a      	strb	r2, [r3, #0]

		Heures_D = (Heures_brt & 0xF0) >> 4;	//Traite le data pour avoir la Dizaine des Heures
 8001076:	4b15      	ldr	r3, [pc, #84]	; (80010cc <HAL_UART_RxCpltCallback+0x84>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	091b      	lsrs	r3, r3, #4
 800107c:	b2da      	uxtb	r2, r3
 800107e:	4b16      	ldr	r3, [pc, #88]	; (80010d8 <HAL_UART_RxCpltCallback+0x90>)
 8001080:	701a      	strb	r2, [r3, #0]

		Minutes_U = Minutes_brt & 0x0F;	//Traite le data pour avoir l'Unité des Minutes
 8001082:	4b13      	ldr	r3, [pc, #76]	; (80010d0 <HAL_UART_RxCpltCallback+0x88>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	220f      	movs	r2, #15
 8001088:	4013      	ands	r3, r2
 800108a:	b2da      	uxtb	r2, r3
 800108c:	4b13      	ldr	r3, [pc, #76]	; (80010dc <HAL_UART_RxCpltCallback+0x94>)
 800108e:	701a      	strb	r2, [r3, #0]

		Minutes_D = (Minutes_brt & 0xF0) >> 4;	//Traite le data pour avoir la Dizaine des Minutes
 8001090:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <HAL_UART_RxCpltCallback+0x88>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	091b      	lsrs	r3, r3, #4
 8001096:	b2da      	uxtb	r2, r3
 8001098:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <HAL_UART_RxCpltCallback+0x98>)
 800109a:	701a      	strb	r2, [r3, #0]

		if(HAL_UART_Receive_IT(&huart1, Rx_data, 19) == HAL_ERROR)	//Réception d'UART lors d'une erreur
 800109c:	490a      	ldr	r1, [pc, #40]	; (80010c8 <HAL_UART_RxCpltCallback+0x80>)
 800109e:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <HAL_UART_RxCpltCallback+0x7c>)
 80010a0:	2213      	movs	r2, #19
 80010a2:	0018      	movs	r0, r3
 80010a4:	f003 f9ca 	bl	800443c <HAL_UART_Receive_IT>
 80010a8:	0003      	movs	r3, r0
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d105      	bne.n	80010ba <HAL_UART_RxCpltCallback+0x72>
		{
			HAL_UART_Receive_IT(&huart1, Rx_data, 19);
 80010ae:	4906      	ldr	r1, [pc, #24]	; (80010c8 <HAL_UART_RxCpltCallback+0x80>)
 80010b0:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <HAL_UART_RxCpltCallback+0x7c>)
 80010b2:	2213      	movs	r2, #19
 80010b4:	0018      	movs	r0, r3
 80010b6:	f003 f9c1 	bl	800443c <HAL_UART_Receive_IT>
		}
	}
}
 80010ba:	46c0      	nop			; (mov r8, r8)
 80010bc:	46bd      	mov	sp, r7
 80010be:	b002      	add	sp, #8
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	46c0      	nop			; (mov r8, r8)
 80010c4:	20000c00 	.word	0x20000c00
 80010c8:	20000cd4 	.word	0x20000cd4
 80010cc:	20000ccc 	.word	0x20000ccc
 80010d0:	20000ccf 	.word	0x20000ccf
 80010d4:	20000ccd 	.word	0x20000ccd
 80010d8:	20000cce 	.word	0x20000cce
 80010dc:	20000cd0 	.word	0x20000cd0
 80010e0:	20000cd1 	.word	0x20000cd1

080010e4 <HAL_UART_ErrorCallback>:
* Interruption lorsqu'il y a un problème dans la transmission UART qui permet *
* de refaire une réception									 				  *
******************************************************************************/

void HAL_UART_ErrorCallback (UART_HandleTypeDef * huart)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
	if(&huart1 == huart)
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	4b06      	ldr	r3, [pc, #24]	; (8001108 <HAL_UART_ErrorCallback+0x24>)
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d105      	bne.n	8001100 <HAL_UART_ErrorCallback+0x1c>
	{
		HAL_UART_Receive_IT(&huart1, Rx_data, 19);
 80010f4:	4905      	ldr	r1, [pc, #20]	; (800110c <HAL_UART_ErrorCallback+0x28>)
 80010f6:	4b04      	ldr	r3, [pc, #16]	; (8001108 <HAL_UART_ErrorCallback+0x24>)
 80010f8:	2213      	movs	r2, #19
 80010fa:	0018      	movs	r0, r3
 80010fc:	f003 f99e 	bl	800443c <HAL_UART_Receive_IT>
	}
}
 8001100:	46c0      	nop			; (mov r8, r8)
 8001102:	46bd      	mov	sp, r7
 8001104:	b002      	add	sp, #8
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000c00 	.word	0x20000c00
 800110c:	20000cd4 	.word	0x20000cd4

08001110 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001114:	b672      	cpsid	i
}
 8001116:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001118:	e7fe      	b.n	8001118 <Error_Handler+0x8>
	...

0800111c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001122:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <HAL_MspInit+0x44>)
 8001124:	699a      	ldr	r2, [r3, #24]
 8001126:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <HAL_MspInit+0x44>)
 8001128:	2101      	movs	r1, #1
 800112a:	430a      	orrs	r2, r1
 800112c:	619a      	str	r2, [r3, #24]
 800112e:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <HAL_MspInit+0x44>)
 8001130:	699b      	ldr	r3, [r3, #24]
 8001132:	2201      	movs	r2, #1
 8001134:	4013      	ands	r3, r2
 8001136:	607b      	str	r3, [r7, #4]
 8001138:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800113a:	4b09      	ldr	r3, [pc, #36]	; (8001160 <HAL_MspInit+0x44>)
 800113c:	69da      	ldr	r2, [r3, #28]
 800113e:	4b08      	ldr	r3, [pc, #32]	; (8001160 <HAL_MspInit+0x44>)
 8001140:	2180      	movs	r1, #128	; 0x80
 8001142:	0549      	lsls	r1, r1, #21
 8001144:	430a      	orrs	r2, r1
 8001146:	61da      	str	r2, [r3, #28]
 8001148:	4b05      	ldr	r3, [pc, #20]	; (8001160 <HAL_MspInit+0x44>)
 800114a:	69da      	ldr	r2, [r3, #28]
 800114c:	2380      	movs	r3, #128	; 0x80
 800114e:	055b      	lsls	r3, r3, #21
 8001150:	4013      	ands	r3, r2
 8001152:	603b      	str	r3, [r7, #0]
 8001154:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001156:	46c0      	nop			; (mov r8, r8)
 8001158:	46bd      	mov	sp, r7
 800115a:	b002      	add	sp, #8
 800115c:	bd80      	pop	{r7, pc}
 800115e:	46c0      	nop			; (mov r8, r8)
 8001160:	40021000 	.word	0x40021000

08001164 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001164:	b590      	push	{r4, r7, lr}
 8001166:	b08b      	sub	sp, #44	; 0x2c
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116c:	2414      	movs	r4, #20
 800116e:	193b      	adds	r3, r7, r4
 8001170:	0018      	movs	r0, r3
 8001172:	2314      	movs	r3, #20
 8001174:	001a      	movs	r2, r3
 8001176:	2100      	movs	r1, #0
 8001178:	f004 fb1f 	bl	80057ba <memset>
  if(hadc->Instance==ADC1)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a31      	ldr	r2, [pc, #196]	; (8001248 <HAL_ADC_MspInit+0xe4>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d15b      	bne.n	800123e <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001186:	4b31      	ldr	r3, [pc, #196]	; (800124c <HAL_ADC_MspInit+0xe8>)
 8001188:	699a      	ldr	r2, [r3, #24]
 800118a:	4b30      	ldr	r3, [pc, #192]	; (800124c <HAL_ADC_MspInit+0xe8>)
 800118c:	2180      	movs	r1, #128	; 0x80
 800118e:	0089      	lsls	r1, r1, #2
 8001190:	430a      	orrs	r2, r1
 8001192:	619a      	str	r2, [r3, #24]
 8001194:	4b2d      	ldr	r3, [pc, #180]	; (800124c <HAL_ADC_MspInit+0xe8>)
 8001196:	699a      	ldr	r2, [r3, #24]
 8001198:	2380      	movs	r3, #128	; 0x80
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	4013      	ands	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
 80011a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a2:	4b2a      	ldr	r3, [pc, #168]	; (800124c <HAL_ADC_MspInit+0xe8>)
 80011a4:	695a      	ldr	r2, [r3, #20]
 80011a6:	4b29      	ldr	r3, [pc, #164]	; (800124c <HAL_ADC_MspInit+0xe8>)
 80011a8:	2180      	movs	r1, #128	; 0x80
 80011aa:	0289      	lsls	r1, r1, #10
 80011ac:	430a      	orrs	r2, r1
 80011ae:	615a      	str	r2, [r3, #20]
 80011b0:	4b26      	ldr	r3, [pc, #152]	; (800124c <HAL_ADC_MspInit+0xe8>)
 80011b2:	695a      	ldr	r2, [r3, #20]
 80011b4:	2380      	movs	r3, #128	; 0x80
 80011b6:	029b      	lsls	r3, r3, #10
 80011b8:	4013      	ands	r3, r2
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA7     ------> ADC_IN7
    */
    GPIO_InitStruct.Pin = ADC_BRIGHTNESS_Pin;
 80011be:	193b      	adds	r3, r7, r4
 80011c0:	2280      	movs	r2, #128	; 0x80
 80011c2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011c4:	193b      	adds	r3, r7, r4
 80011c6:	2203      	movs	r2, #3
 80011c8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	193b      	adds	r3, r7, r4
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(ADC_BRIGHTNESS_GPIO_Port, &GPIO_InitStruct);
 80011d0:	193a      	adds	r2, r7, r4
 80011d2:	2390      	movs	r3, #144	; 0x90
 80011d4:	05db      	lsls	r3, r3, #23
 80011d6:	0011      	movs	r1, r2
 80011d8:	0018      	movs	r0, r3
 80011da:	f001 f94f 	bl	800247c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80011de:	4b1c      	ldr	r3, [pc, #112]	; (8001250 <HAL_ADC_MspInit+0xec>)
 80011e0:	4a1c      	ldr	r2, [pc, #112]	; (8001254 <HAL_ADC_MspInit+0xf0>)
 80011e2:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011e4:	4b1a      	ldr	r3, [pc, #104]	; (8001250 <HAL_ADC_MspInit+0xec>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80011ea:	4b19      	ldr	r3, [pc, #100]	; (8001250 <HAL_ADC_MspInit+0xec>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80011f0:	4b17      	ldr	r3, [pc, #92]	; (8001250 <HAL_ADC_MspInit+0xec>)
 80011f2:	2280      	movs	r2, #128	; 0x80
 80011f4:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011f6:	4b16      	ldr	r3, [pc, #88]	; (8001250 <HAL_ADC_MspInit+0xec>)
 80011f8:	2280      	movs	r2, #128	; 0x80
 80011fa:	0052      	lsls	r2, r2, #1
 80011fc:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011fe:	4b14      	ldr	r3, [pc, #80]	; (8001250 <HAL_ADC_MspInit+0xec>)
 8001200:	2280      	movs	r2, #128	; 0x80
 8001202:	00d2      	lsls	r2, r2, #3
 8001204:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8001206:	4b12      	ldr	r3, [pc, #72]	; (8001250 <HAL_ADC_MspInit+0xec>)
 8001208:	2220      	movs	r2, #32
 800120a:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 800120c:	4b10      	ldr	r3, [pc, #64]	; (8001250 <HAL_ADC_MspInit+0xec>)
 800120e:	2200      	movs	r2, #0
 8001210:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001212:	4b0f      	ldr	r3, [pc, #60]	; (8001250 <HAL_ADC_MspInit+0xec>)
 8001214:	0018      	movs	r0, r3
 8001216:	f000 ff1b 	bl	8002050 <HAL_DMA_Init>
 800121a:	1e03      	subs	r3, r0, #0
 800121c:	d001      	beq.n	8001222 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 800121e:	f7ff ff77 	bl	8001110 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a0a      	ldr	r2, [pc, #40]	; (8001250 <HAL_ADC_MspInit+0xec>)
 8001226:	631a      	str	r2, [r3, #48]	; 0x30
 8001228:	4b09      	ldr	r3, [pc, #36]	; (8001250 <HAL_ADC_MspInit+0xec>)
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	625a      	str	r2, [r3, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800122e:	2200      	movs	r2, #0
 8001230:	2100      	movs	r1, #0
 8001232:	200c      	movs	r0, #12
 8001234:	f000 feda 	bl	8001fec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001238:	200c      	movs	r0, #12
 800123a:	f000 feec 	bl	8002016 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800123e:	46c0      	nop			; (mov r8, r8)
 8001240:	46bd      	mov	sp, r7
 8001242:	b00b      	add	sp, #44	; 0x2c
 8001244:	bd90      	pop	{r4, r7, pc}
 8001246:	46c0      	nop			; (mov r8, r8)
 8001248:	40012400 	.word	0x40012400
 800124c:	40021000 	.word	0x40021000
 8001250:	20000b30 	.word	0x20000b30
 8001254:	40020008 	.word	0x40020008

08001258 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	2380      	movs	r3, #128	; 0x80
 8001266:	05db      	lsls	r3, r3, #23
 8001268:	429a      	cmp	r2, r3
 800126a:	d133      	bne.n	80012d4 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800126c:	4b1b      	ldr	r3, [pc, #108]	; (80012dc <HAL_TIM_Base_MspInit+0x84>)
 800126e:	69da      	ldr	r2, [r3, #28]
 8001270:	4b1a      	ldr	r3, [pc, #104]	; (80012dc <HAL_TIM_Base_MspInit+0x84>)
 8001272:	2101      	movs	r1, #1
 8001274:	430a      	orrs	r2, r1
 8001276:	61da      	str	r2, [r3, #28]
 8001278:	4b18      	ldr	r3, [pc, #96]	; (80012dc <HAL_TIM_Base_MspInit+0x84>)
 800127a:	69db      	ldr	r3, [r3, #28]
 800127c:	2201      	movs	r2, #1
 800127e:	4013      	ands	r3, r2
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8001284:	4b16      	ldr	r3, [pc, #88]	; (80012e0 <HAL_TIM_Base_MspInit+0x88>)
 8001286:	4a17      	ldr	r2, [pc, #92]	; (80012e4 <HAL_TIM_Base_MspInit+0x8c>)
 8001288:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800128a:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <HAL_TIM_Base_MspInit+0x88>)
 800128c:	2210      	movs	r2, #16
 800128e:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001290:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <HAL_TIM_Base_MspInit+0x88>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001296:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <HAL_TIM_Base_MspInit+0x88>)
 8001298:	2280      	movs	r2, #128	; 0x80
 800129a:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800129c:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <HAL_TIM_Base_MspInit+0x88>)
 800129e:	2280      	movs	r2, #128	; 0x80
 80012a0:	0092      	lsls	r2, r2, #2
 80012a2:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012a4:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <HAL_TIM_Base_MspInit+0x88>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 80012aa:	4b0d      	ldr	r3, [pc, #52]	; (80012e0 <HAL_TIM_Base_MspInit+0x88>)
 80012ac:	2220      	movs	r2, #32
 80012ae:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80012b0:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <HAL_TIM_Base_MspInit+0x88>)
 80012b2:	2280      	movs	r2, #128	; 0x80
 80012b4:	0192      	lsls	r2, r2, #6
 80012b6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80012b8:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <HAL_TIM_Base_MspInit+0x88>)
 80012ba:	0018      	movs	r0, r3
 80012bc:	f000 fec8 	bl	8002050 <HAL_DMA_Init>
 80012c0:	1e03      	subs	r3, r0, #0
 80012c2:	d001      	beq.n	80012c8 <HAL_TIM_Base_MspInit+0x70>
    {
      Error_Handler();
 80012c4:	f7ff ff24 	bl	8001110 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4a05      	ldr	r2, [pc, #20]	; (80012e0 <HAL_TIM_Base_MspInit+0x88>)
 80012cc:	625a      	str	r2, [r3, #36]	; 0x24
 80012ce:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <HAL_TIM_Base_MspInit+0x88>)
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012d4:	46c0      	nop			; (mov r8, r8)
 80012d6:	46bd      	mov	sp, r7
 80012d8:	b004      	add	sp, #16
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40021000 	.word	0x40021000
 80012e0:	20000bbc 	.word	0x20000bbc
 80012e4:	40020058 	.word	0x40020058

080012e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012e8:	b590      	push	{r4, r7, lr}
 80012ea:	b089      	sub	sp, #36	; 0x24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f0:	240c      	movs	r4, #12
 80012f2:	193b      	adds	r3, r7, r4
 80012f4:	0018      	movs	r0, r3
 80012f6:	2314      	movs	r3, #20
 80012f8:	001a      	movs	r2, r3
 80012fa:	2100      	movs	r1, #0
 80012fc:	f004 fa5d 	bl	80057ba <memset>
  if(htim->Instance==TIM2)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	2380      	movs	r3, #128	; 0x80
 8001306:	05db      	lsls	r3, r3, #23
 8001308:	429a      	cmp	r2, r3
 800130a:	d124      	bne.n	8001356 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800130c:	4b14      	ldr	r3, [pc, #80]	; (8001360 <HAL_TIM_MspPostInit+0x78>)
 800130e:	695a      	ldr	r2, [r3, #20]
 8001310:	4b13      	ldr	r3, [pc, #76]	; (8001360 <HAL_TIM_MspPostInit+0x78>)
 8001312:	2180      	movs	r1, #128	; 0x80
 8001314:	0289      	lsls	r1, r1, #10
 8001316:	430a      	orrs	r2, r1
 8001318:	615a      	str	r2, [r3, #20]
 800131a:	4b11      	ldr	r3, [pc, #68]	; (8001360 <HAL_TIM_MspPostInit+0x78>)
 800131c:	695a      	ldr	r2, [r3, #20]
 800131e:	2380      	movs	r3, #128	; 0x80
 8001320:	029b      	lsls	r3, r3, #10
 8001322:	4013      	ands	r3, r2
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001328:	0021      	movs	r1, r4
 800132a:	187b      	adds	r3, r7, r1
 800132c:	2201      	movs	r2, #1
 800132e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001330:	187b      	adds	r3, r7, r1
 8001332:	2202      	movs	r2, #2
 8001334:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	187b      	adds	r3, r7, r1
 8001338:	2200      	movs	r2, #0
 800133a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133c:	187b      	adds	r3, r7, r1
 800133e:	2200      	movs	r2, #0
 8001340:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001342:	187b      	adds	r3, r7, r1
 8001344:	2202      	movs	r2, #2
 8001346:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001348:	187a      	adds	r2, r7, r1
 800134a:	2390      	movs	r3, #144	; 0x90
 800134c:	05db      	lsls	r3, r3, #23
 800134e:	0011      	movs	r1, r2
 8001350:	0018      	movs	r0, r3
 8001352:	f001 f893 	bl	800247c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001356:	46c0      	nop			; (mov r8, r8)
 8001358:	46bd      	mov	sp, r7
 800135a:	b009      	add	sp, #36	; 0x24
 800135c:	bd90      	pop	{r4, r7, pc}
 800135e:	46c0      	nop			; (mov r8, r8)
 8001360:	40021000 	.word	0x40021000

08001364 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001364:	b590      	push	{r4, r7, lr}
 8001366:	b08b      	sub	sp, #44	; 0x2c
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136c:	2414      	movs	r4, #20
 800136e:	193b      	adds	r3, r7, r4
 8001370:	0018      	movs	r0, r3
 8001372:	2314      	movs	r3, #20
 8001374:	001a      	movs	r2, r3
 8001376:	2100      	movs	r1, #0
 8001378:	f004 fa1f 	bl	80057ba <memset>
  if(huart->Instance==USART1)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a34      	ldr	r2, [pc, #208]	; (8001454 <HAL_UART_MspInit+0xf0>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d162      	bne.n	800144c <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001386:	4b34      	ldr	r3, [pc, #208]	; (8001458 <HAL_UART_MspInit+0xf4>)
 8001388:	699a      	ldr	r2, [r3, #24]
 800138a:	4b33      	ldr	r3, [pc, #204]	; (8001458 <HAL_UART_MspInit+0xf4>)
 800138c:	2180      	movs	r1, #128	; 0x80
 800138e:	01c9      	lsls	r1, r1, #7
 8001390:	430a      	orrs	r2, r1
 8001392:	619a      	str	r2, [r3, #24]
 8001394:	4b30      	ldr	r3, [pc, #192]	; (8001458 <HAL_UART_MspInit+0xf4>)
 8001396:	699a      	ldr	r2, [r3, #24]
 8001398:	2380      	movs	r3, #128	; 0x80
 800139a:	01db      	lsls	r3, r3, #7
 800139c:	4013      	ands	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
 80013a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a2:	4b2d      	ldr	r3, [pc, #180]	; (8001458 <HAL_UART_MspInit+0xf4>)
 80013a4:	695a      	ldr	r2, [r3, #20]
 80013a6:	4b2c      	ldr	r3, [pc, #176]	; (8001458 <HAL_UART_MspInit+0xf4>)
 80013a8:	2180      	movs	r1, #128	; 0x80
 80013aa:	0289      	lsls	r1, r1, #10
 80013ac:	430a      	orrs	r2, r1
 80013ae:	615a      	str	r2, [r3, #20]
 80013b0:	4b29      	ldr	r3, [pc, #164]	; (8001458 <HAL_UART_MspInit+0xf4>)
 80013b2:	695a      	ldr	r2, [r3, #20]
 80013b4:	2380      	movs	r3, #128	; 0x80
 80013b6:	029b      	lsls	r3, r3, #10
 80013b8:	4013      	ands	r3, r2
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80013be:	193b      	adds	r3, r7, r4
 80013c0:	22c0      	movs	r2, #192	; 0xc0
 80013c2:	00d2      	lsls	r2, r2, #3
 80013c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c6:	0021      	movs	r1, r4
 80013c8:	187b      	adds	r3, r7, r1
 80013ca:	2202      	movs	r2, #2
 80013cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	187b      	adds	r3, r7, r1
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013d4:	187b      	adds	r3, r7, r1
 80013d6:	2203      	movs	r2, #3
 80013d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80013da:	187b      	adds	r3, r7, r1
 80013dc:	2201      	movs	r2, #1
 80013de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e0:	187a      	adds	r2, r7, r1
 80013e2:	2390      	movs	r3, #144	; 0x90
 80013e4:	05db      	lsls	r3, r3, #23
 80013e6:	0011      	movs	r1, r2
 80013e8:	0018      	movs	r0, r3
 80013ea:	f001 f847 	bl	800247c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 80013ee:	4b1b      	ldr	r3, [pc, #108]	; (800145c <HAL_UART_MspInit+0xf8>)
 80013f0:	4a1b      	ldr	r2, [pc, #108]	; (8001460 <HAL_UART_MspInit+0xfc>)
 80013f2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013f4:	4b19      	ldr	r3, [pc, #100]	; (800145c <HAL_UART_MspInit+0xf8>)
 80013f6:	2210      	movs	r2, #16
 80013f8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013fa:	4b18      	ldr	r3, [pc, #96]	; (800145c <HAL_UART_MspInit+0xf8>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001400:	4b16      	ldr	r3, [pc, #88]	; (800145c <HAL_UART_MspInit+0xf8>)
 8001402:	2280      	movs	r2, #128	; 0x80
 8001404:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001406:	4b15      	ldr	r3, [pc, #84]	; (800145c <HAL_UART_MspInit+0xf8>)
 8001408:	2200      	movs	r2, #0
 800140a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800140c:	4b13      	ldr	r3, [pc, #76]	; (800145c <HAL_UART_MspInit+0xf8>)
 800140e:	2200      	movs	r2, #0
 8001410:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001412:	4b12      	ldr	r3, [pc, #72]	; (800145c <HAL_UART_MspInit+0xf8>)
 8001414:	2200      	movs	r2, #0
 8001416:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001418:	4b10      	ldr	r3, [pc, #64]	; (800145c <HAL_UART_MspInit+0xf8>)
 800141a:	22c0      	movs	r2, #192	; 0xc0
 800141c:	0192      	lsls	r2, r2, #6
 800141e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001420:	4b0e      	ldr	r3, [pc, #56]	; (800145c <HAL_UART_MspInit+0xf8>)
 8001422:	0018      	movs	r0, r3
 8001424:	f000 fe14 	bl	8002050 <HAL_DMA_Init>
 8001428:	1e03      	subs	r3, r0, #0
 800142a:	d001      	beq.n	8001430 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800142c:	f7ff fe70 	bl	8001110 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4a0a      	ldr	r2, [pc, #40]	; (800145c <HAL_UART_MspInit+0xf8>)
 8001434:	671a      	str	r2, [r3, #112]	; 0x70
 8001436:	4b09      	ldr	r3, [pc, #36]	; (800145c <HAL_UART_MspInit+0xf8>)
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800143c:	2200      	movs	r2, #0
 800143e:	2100      	movs	r1, #0
 8001440:	201b      	movs	r0, #27
 8001442:	f000 fdd3 	bl	8001fec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001446:	201b      	movs	r0, #27
 8001448:	f000 fde5 	bl	8002016 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800144c:	46c0      	nop			; (mov r8, r8)
 800144e:	46bd      	mov	sp, r7
 8001450:	b00b      	add	sp, #44	; 0x2c
 8001452:	bd90      	pop	{r4, r7, pc}
 8001454:	40013800 	.word	0x40013800
 8001458:	40021000 	.word	0x40021000
 800145c:	20000c88 	.word	0x20000c88
 8001460:	4002001c 	.word	0x4002001c

08001464 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001468:	e7fe      	b.n	8001468 <NMI_Handler+0x4>

0800146a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800146e:	e7fe      	b.n	800146e <HardFault_Handler+0x4>

08001470 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001474:	46c0      	nop			; (mov r8, r8)
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800147e:	46c0      	nop			; (mov r8, r8)
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001488:	f000 f906 	bl	8001698 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800148c:	46c0      	nop			; (mov r8, r8)
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
	...

08001494 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001498:	4b03      	ldr	r3, [pc, #12]	; (80014a8 <DMA1_Channel1_IRQHandler+0x14>)
 800149a:	0018      	movs	r0, r3
 800149c:	f000 ff03 	bl	80022a6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80014a0:	46c0      	nop			; (mov r8, r8)
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	46c0      	nop			; (mov r8, r8)
 80014a8:	20000b30 	.word	0x20000b30

080014ac <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80014b0:	4b03      	ldr	r3, [pc, #12]	; (80014c0 <DMA1_Channel2_3_IRQHandler+0x14>)
 80014b2:	0018      	movs	r0, r3
 80014b4:	f000 fef7 	bl	80022a6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80014b8:	46c0      	nop			; (mov r8, r8)
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	46c0      	nop			; (mov r8, r8)
 80014c0:	20000c88 	.word	0x20000c88

080014c4 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80014c8:	4b03      	ldr	r3, [pc, #12]	; (80014d8 <DMA1_Channel4_5_IRQHandler+0x14>)
 80014ca:	0018      	movs	r0, r3
 80014cc:	f000 feeb 	bl	80022a6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 80014d0:	46c0      	nop			; (mov r8, r8)
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	46c0      	nop			; (mov r8, r8)
 80014d8:	20000bbc 	.word	0x20000bbc

080014dc <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC interrupt.
  */
void ADC1_IRQHandler(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 80014e0:	4b03      	ldr	r3, [pc, #12]	; (80014f0 <ADC1_IRQHandler+0x14>)
 80014e2:	0018      	movs	r0, r3
 80014e4:	f000 fa88 	bl	80019f8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80014e8:	46c0      	nop			; (mov r8, r8)
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	46c0      	nop			; (mov r8, r8)
 80014f0:	20000af0 	.word	0x20000af0

080014f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014f8:	4b03      	ldr	r3, [pc, #12]	; (8001508 <USART1_IRQHandler+0x14>)
 80014fa:	0018      	movs	r0, r3
 80014fc:	f002 fff6 	bl	80044ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001500:	46c0      	nop			; (mov r8, r8)
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	46c0      	nop			; (mov r8, r8)
 8001508:	20000c00 	.word	0x20000c00

0800150c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001514:	4a14      	ldr	r2, [pc, #80]	; (8001568 <_sbrk+0x5c>)
 8001516:	4b15      	ldr	r3, [pc, #84]	; (800156c <_sbrk+0x60>)
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001520:	4b13      	ldr	r3, [pc, #76]	; (8001570 <_sbrk+0x64>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d102      	bne.n	800152e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001528:	4b11      	ldr	r3, [pc, #68]	; (8001570 <_sbrk+0x64>)
 800152a:	4a12      	ldr	r2, [pc, #72]	; (8001574 <_sbrk+0x68>)
 800152c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800152e:	4b10      	ldr	r3, [pc, #64]	; (8001570 <_sbrk+0x64>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	18d3      	adds	r3, r2, r3
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	429a      	cmp	r2, r3
 800153a:	d207      	bcs.n	800154c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800153c:	f004 f900 	bl	8005740 <__errno>
 8001540:	0003      	movs	r3, r0
 8001542:	220c      	movs	r2, #12
 8001544:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001546:	2301      	movs	r3, #1
 8001548:	425b      	negs	r3, r3
 800154a:	e009      	b.n	8001560 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800154c:	4b08      	ldr	r3, [pc, #32]	; (8001570 <_sbrk+0x64>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001552:	4b07      	ldr	r3, [pc, #28]	; (8001570 <_sbrk+0x64>)
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	18d2      	adds	r2, r2, r3
 800155a:	4b05      	ldr	r3, [pc, #20]	; (8001570 <_sbrk+0x64>)
 800155c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800155e:	68fb      	ldr	r3, [r7, #12]
}
 8001560:	0018      	movs	r0, r3
 8001562:	46bd      	mov	sp, r7
 8001564:	b006      	add	sp, #24
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20001800 	.word	0x20001800
 800156c:	00000400 	.word	0x00000400
 8001570:	20000ce8 	.word	0x20000ce8
 8001574:	20000d00 	.word	0x20000d00

08001578 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800157c:	46c0      	nop			; (mov r8, r8)
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
	...

08001584 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001584:	4813      	ldr	r0, [pc, #76]	; (80015d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001586:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001588:	f7ff fff6 	bl	8001578 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 800158c:	4812      	ldr	r0, [pc, #72]	; (80015d8 <LoopForever+0x6>)
    LDR R1, [R0]
 800158e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001590:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001592:	4a12      	ldr	r2, [pc, #72]	; (80015dc <LoopForever+0xa>)
    CMP R1, R2
 8001594:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001596:	d105      	bne.n	80015a4 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8001598:	4811      	ldr	r0, [pc, #68]	; (80015e0 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800159a:	4912      	ldr	r1, [pc, #72]	; (80015e4 <LoopForever+0x12>)
    STR R1, [R0]
 800159c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800159e:	4812      	ldr	r0, [pc, #72]	; (80015e8 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80015a0:	4912      	ldr	r1, [pc, #72]	; (80015ec <LoopForever+0x1a>)
    STR R1, [R0]
 80015a2:	6001      	str	r1, [r0, #0]

080015a4 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015a4:	4812      	ldr	r0, [pc, #72]	; (80015f0 <LoopForever+0x1e>)
  ldr r1, =_edata
 80015a6:	4913      	ldr	r1, [pc, #76]	; (80015f4 <LoopForever+0x22>)
  ldr r2, =_sidata
 80015a8:	4a13      	ldr	r2, [pc, #76]	; (80015f8 <LoopForever+0x26>)
  movs r3, #0
 80015aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015ac:	e002      	b.n	80015b4 <LoopCopyDataInit>

080015ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015b2:	3304      	adds	r3, #4

080015b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015b8:	d3f9      	bcc.n	80015ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ba:	4a10      	ldr	r2, [pc, #64]	; (80015fc <LoopForever+0x2a>)
  ldr r4, =_ebss
 80015bc:	4c10      	ldr	r4, [pc, #64]	; (8001600 <LoopForever+0x2e>)
  movs r3, #0
 80015be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015c0:	e001      	b.n	80015c6 <LoopFillZerobss>

080015c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015c4:	3204      	adds	r2, #4

080015c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015c8:	d3fb      	bcc.n	80015c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80015ca:	f004 f8bf 	bl	800574c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015ce:	f7ff fa6f 	bl	8000ab0 <main>

080015d2 <LoopForever>:

LoopForever:
    b LoopForever
 80015d2:	e7fe      	b.n	80015d2 <LoopForever>
  ldr   r0, =_estack
 80015d4:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 80015d8:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80015dc:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 80015e0:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 80015e4:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80015e8:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80015ec:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80015f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015f4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80015f8:	080059b0 	.word	0x080059b0
  ldr r2, =_sbss
 80015fc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001600:	20000d00 	.word	0x20000d00

08001604 <CEC_CAN_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001604:	e7fe      	b.n	8001604 <CEC_CAN_IRQHandler>
	...

08001608 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800160c:	4b07      	ldr	r3, [pc, #28]	; (800162c <HAL_Init+0x24>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	4b06      	ldr	r3, [pc, #24]	; (800162c <HAL_Init+0x24>)
 8001612:	2110      	movs	r1, #16
 8001614:	430a      	orrs	r2, r1
 8001616:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001618:	2000      	movs	r0, #0
 800161a:	f000 f809 	bl	8001630 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800161e:	f7ff fd7d 	bl	800111c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001622:	2300      	movs	r3, #0
}
 8001624:	0018      	movs	r0, r3
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	46c0      	nop			; (mov r8, r8)
 800162c:	40022000 	.word	0x40022000

08001630 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001630:	b590      	push	{r4, r7, lr}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001638:	4b14      	ldr	r3, [pc, #80]	; (800168c <HAL_InitTick+0x5c>)
 800163a:	681c      	ldr	r4, [r3, #0]
 800163c:	4b14      	ldr	r3, [pc, #80]	; (8001690 <HAL_InitTick+0x60>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	0019      	movs	r1, r3
 8001642:	23fa      	movs	r3, #250	; 0xfa
 8001644:	0098      	lsls	r0, r3, #2
 8001646:	f7fe fd5f 	bl	8000108 <__udivsi3>
 800164a:	0003      	movs	r3, r0
 800164c:	0019      	movs	r1, r3
 800164e:	0020      	movs	r0, r4
 8001650:	f7fe fd5a 	bl	8000108 <__udivsi3>
 8001654:	0003      	movs	r3, r0
 8001656:	0018      	movs	r0, r3
 8001658:	f000 fced 	bl	8002036 <HAL_SYSTICK_Config>
 800165c:	1e03      	subs	r3, r0, #0
 800165e:	d001      	beq.n	8001664 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e00f      	b.n	8001684 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2b03      	cmp	r3, #3
 8001668:	d80b      	bhi.n	8001682 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800166a:	6879      	ldr	r1, [r7, #4]
 800166c:	2301      	movs	r3, #1
 800166e:	425b      	negs	r3, r3
 8001670:	2200      	movs	r2, #0
 8001672:	0018      	movs	r0, r3
 8001674:	f000 fcba 	bl	8001fec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001678:	4b06      	ldr	r3, [pc, #24]	; (8001694 <HAL_InitTick+0x64>)
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800167e:	2300      	movs	r3, #0
 8001680:	e000      	b.n	8001684 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
}
 8001684:	0018      	movs	r0, r3
 8001686:	46bd      	mov	sp, r7
 8001688:	b003      	add	sp, #12
 800168a:	bd90      	pop	{r4, r7, pc}
 800168c:	20000000 	.word	0x20000000
 8001690:	20000008 	.word	0x20000008
 8001694:	20000004 	.word	0x20000004

08001698 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800169c:	4b05      	ldr	r3, [pc, #20]	; (80016b4 <HAL_IncTick+0x1c>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	001a      	movs	r2, r3
 80016a2:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <HAL_IncTick+0x20>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	18d2      	adds	r2, r2, r3
 80016a8:	4b03      	ldr	r3, [pc, #12]	; (80016b8 <HAL_IncTick+0x20>)
 80016aa:	601a      	str	r2, [r3, #0]
}
 80016ac:	46c0      	nop			; (mov r8, r8)
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	46c0      	nop			; (mov r8, r8)
 80016b4:	20000008 	.word	0x20000008
 80016b8:	20000cec 	.word	0x20000cec

080016bc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  return uwTick;
 80016c0:	4b02      	ldr	r3, [pc, #8]	; (80016cc <HAL_GetTick+0x10>)
 80016c2:	681b      	ldr	r3, [r3, #0]
}
 80016c4:	0018      	movs	r0, r3
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	46c0      	nop			; (mov r8, r8)
 80016cc:	20000cec 	.word	0x20000cec

080016d0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016d8:	230f      	movs	r3, #15
 80016da:	18fb      	adds	r3, r7, r3
 80016dc:	2200      	movs	r2, #0
 80016de:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80016e0:	2300      	movs	r3, #0
 80016e2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d101      	bne.n	80016ee <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e125      	b.n	800193a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d10a      	bne.n	800170c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2234      	movs	r2, #52	; 0x34
 8001700:	2100      	movs	r1, #0
 8001702:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	0018      	movs	r0, r3
 8001708:	f7ff fd2c 	bl	8001164 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001710:	2210      	movs	r2, #16
 8001712:	4013      	ands	r3, r2
 8001714:	d000      	beq.n	8001718 <HAL_ADC_Init+0x48>
 8001716:	e103      	b.n	8001920 <HAL_ADC_Init+0x250>
 8001718:	230f      	movs	r3, #15
 800171a:	18fb      	adds	r3, r7, r3
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d000      	beq.n	8001724 <HAL_ADC_Init+0x54>
 8001722:	e0fd      	b.n	8001920 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	2204      	movs	r2, #4
 800172c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800172e:	d000      	beq.n	8001732 <HAL_ADC_Init+0x62>
 8001730:	e0f6      	b.n	8001920 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001736:	4a83      	ldr	r2, [pc, #524]	; (8001944 <HAL_ADC_Init+0x274>)
 8001738:	4013      	ands	r3, r2
 800173a:	2202      	movs	r2, #2
 800173c:	431a      	orrs	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	2203      	movs	r2, #3
 800174a:	4013      	ands	r3, r2
 800174c:	2b01      	cmp	r3, #1
 800174e:	d112      	bne.n	8001776 <HAL_ADC_Init+0xa6>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2201      	movs	r2, #1
 8001758:	4013      	ands	r3, r2
 800175a:	2b01      	cmp	r3, #1
 800175c:	d009      	beq.n	8001772 <HAL_ADC_Init+0xa2>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	68da      	ldr	r2, [r3, #12]
 8001764:	2380      	movs	r3, #128	; 0x80
 8001766:	021b      	lsls	r3, r3, #8
 8001768:	401a      	ands	r2, r3
 800176a:	2380      	movs	r3, #128	; 0x80
 800176c:	021b      	lsls	r3, r3, #8
 800176e:	429a      	cmp	r2, r3
 8001770:	d101      	bne.n	8001776 <HAL_ADC_Init+0xa6>
 8001772:	2301      	movs	r3, #1
 8001774:	e000      	b.n	8001778 <HAL_ADC_Init+0xa8>
 8001776:	2300      	movs	r3, #0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d116      	bne.n	80017aa <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	2218      	movs	r2, #24
 8001784:	4393      	bics	r3, r2
 8001786:	0019      	movs	r1, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689a      	ldr	r2, [r3, #8]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	430a      	orrs	r2, r1
 8001792:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	691b      	ldr	r3, [r3, #16]
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	0899      	lsrs	r1, r3, #2
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685a      	ldr	r2, [r3, #4]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	430a      	orrs	r2, r1
 80017a8:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	68da      	ldr	r2, [r3, #12]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4964      	ldr	r1, [pc, #400]	; (8001948 <HAL_ADC_Init+0x278>)
 80017b6:	400a      	ands	r2, r1
 80017b8:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	7e1b      	ldrb	r3, [r3, #24]
 80017be:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	7e5b      	ldrb	r3, [r3, #25]
 80017c4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80017c6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	7e9b      	ldrb	r3, [r3, #26]
 80017cc:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80017ce:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d002      	beq.n	80017de <HAL_ADC_Init+0x10e>
 80017d8:	2380      	movs	r3, #128	; 0x80
 80017da:	015b      	lsls	r3, r3, #5
 80017dc:	e000      	b.n	80017e0 <HAL_ADC_Init+0x110>
 80017de:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80017e0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80017e6:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	691b      	ldr	r3, [r3, #16]
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d101      	bne.n	80017f4 <HAL_ADC_Init+0x124>
 80017f0:	2304      	movs	r3, #4
 80017f2:	e000      	b.n	80017f6 <HAL_ADC_Init+0x126>
 80017f4:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80017f6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2124      	movs	r1, #36	; 0x24
 80017fc:	5c5b      	ldrb	r3, [r3, r1]
 80017fe:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001800:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001802:	68ba      	ldr	r2, [r7, #8]
 8001804:	4313      	orrs	r3, r2
 8001806:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	7edb      	ldrb	r3, [r3, #27]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d115      	bne.n	800183c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	7e9b      	ldrb	r3, [r3, #26]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d105      	bne.n	8001824 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	2280      	movs	r2, #128	; 0x80
 800181c:	0252      	lsls	r2, r2, #9
 800181e:	4313      	orrs	r3, r2
 8001820:	60bb      	str	r3, [r7, #8]
 8001822:	e00b      	b.n	800183c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001828:	2220      	movs	r2, #32
 800182a:	431a      	orrs	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001834:	2201      	movs	r2, #1
 8001836:	431a      	orrs	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	69da      	ldr	r2, [r3, #28]
 8001840:	23c2      	movs	r3, #194	; 0xc2
 8001842:	33ff      	adds	r3, #255	; 0xff
 8001844:	429a      	cmp	r2, r3
 8001846:	d007      	beq.n	8001858 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001850:	4313      	orrs	r3, r2
 8001852:	68ba      	ldr	r2, [r7, #8]
 8001854:	4313      	orrs	r3, r2
 8001856:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	68d9      	ldr	r1, [r3, #12]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	68ba      	ldr	r2, [r7, #8]
 8001864:	430a      	orrs	r2, r1
 8001866:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800186c:	2380      	movs	r3, #128	; 0x80
 800186e:	055b      	lsls	r3, r3, #21
 8001870:	429a      	cmp	r2, r3
 8001872:	d01b      	beq.n	80018ac <HAL_ADC_Init+0x1dc>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001878:	2b01      	cmp	r3, #1
 800187a:	d017      	beq.n	80018ac <HAL_ADC_Init+0x1dc>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001880:	2b02      	cmp	r3, #2
 8001882:	d013      	beq.n	80018ac <HAL_ADC_Init+0x1dc>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001888:	2b03      	cmp	r3, #3
 800188a:	d00f      	beq.n	80018ac <HAL_ADC_Init+0x1dc>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001890:	2b04      	cmp	r3, #4
 8001892:	d00b      	beq.n	80018ac <HAL_ADC_Init+0x1dc>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001898:	2b05      	cmp	r3, #5
 800189a:	d007      	beq.n	80018ac <HAL_ADC_Init+0x1dc>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a0:	2b06      	cmp	r3, #6
 80018a2:	d003      	beq.n	80018ac <HAL_ADC_Init+0x1dc>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a8:	2b07      	cmp	r3, #7
 80018aa:	d112      	bne.n	80018d2 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	695a      	ldr	r2, [r3, #20]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2107      	movs	r1, #7
 80018b8:	438a      	bics	r2, r1
 80018ba:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6959      	ldr	r1, [r3, #20]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c6:	2207      	movs	r2, #7
 80018c8:	401a      	ands	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	430a      	orrs	r2, r1
 80018d0:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	4a1c      	ldr	r2, [pc, #112]	; (800194c <HAL_ADC_Init+0x27c>)
 80018da:	4013      	ands	r3, r2
 80018dc:	68ba      	ldr	r2, [r7, #8]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d10b      	bne.n	80018fa <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ec:	2203      	movs	r2, #3
 80018ee:	4393      	bics	r3, r2
 80018f0:	2201      	movs	r2, #1
 80018f2:	431a      	orrs	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80018f8:	e01c      	b.n	8001934 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018fe:	2212      	movs	r2, #18
 8001900:	4393      	bics	r3, r2
 8001902:	2210      	movs	r2, #16
 8001904:	431a      	orrs	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800190e:	2201      	movs	r2, #1
 8001910:	431a      	orrs	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001916:	230f      	movs	r3, #15
 8001918:	18fb      	adds	r3, r7, r3
 800191a:	2201      	movs	r2, #1
 800191c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800191e:	e009      	b.n	8001934 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001924:	2210      	movs	r2, #16
 8001926:	431a      	orrs	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 800192c:	230f      	movs	r3, #15
 800192e:	18fb      	adds	r3, r7, r3
 8001930:	2201      	movs	r2, #1
 8001932:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001934:	230f      	movs	r3, #15
 8001936:	18fb      	adds	r3, r7, r3
 8001938:	781b      	ldrb	r3, [r3, #0]
}
 800193a:	0018      	movs	r0, r3
 800193c:	46bd      	mov	sp, r7
 800193e:	b004      	add	sp, #16
 8001940:	bd80      	pop	{r7, pc}
 8001942:	46c0      	nop			; (mov r8, r8)
 8001944:	fffffefd 	.word	0xfffffefd
 8001948:	fffe0219 	.word	0xfffe0219
 800194c:	833fffe7 	.word	0x833fffe7

08001950 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001950:	b590      	push	{r4, r7, lr}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001958:	230f      	movs	r3, #15
 800195a:	18fb      	adds	r3, r7, r3
 800195c:	2200      	movs	r2, #0
 800195e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	2204      	movs	r2, #4
 8001968:	4013      	ands	r3, r2
 800196a:	d138      	bne.n	80019de <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2234      	movs	r2, #52	; 0x34
 8001970:	5c9b      	ldrb	r3, [r3, r2]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d101      	bne.n	800197a <HAL_ADC_Start+0x2a>
 8001976:	2302      	movs	r3, #2
 8001978:	e038      	b.n	80019ec <HAL_ADC_Start+0x9c>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2234      	movs	r2, #52	; 0x34
 800197e:	2101      	movs	r1, #1
 8001980:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	7e5b      	ldrb	r3, [r3, #25]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d007      	beq.n	800199a <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800198a:	230f      	movs	r3, #15
 800198c:	18fc      	adds	r4, r7, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	0018      	movs	r0, r3
 8001992:	f000 f9fb 	bl	8001d8c <ADC_Enable>
 8001996:	0003      	movs	r3, r0
 8001998:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800199a:	230f      	movs	r3, #15
 800199c:	18fb      	adds	r3, r7, r3
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d120      	bne.n	80019e6 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019a8:	4a12      	ldr	r2, [pc, #72]	; (80019f4 <HAL_ADC_Start+0xa4>)
 80019aa:	4013      	ands	r3, r2
 80019ac:	2280      	movs	r2, #128	; 0x80
 80019ae:	0052      	lsls	r2, r2, #1
 80019b0:	431a      	orrs	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2234      	movs	r2, #52	; 0x34
 80019c0:	2100      	movs	r1, #0
 80019c2:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	221c      	movs	r2, #28
 80019ca:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	689a      	ldr	r2, [r3, #8]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2104      	movs	r1, #4
 80019d8:	430a      	orrs	r2, r1
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	e003      	b.n	80019e6 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80019de:	230f      	movs	r3, #15
 80019e0:	18fb      	adds	r3, r7, r3
 80019e2:	2202      	movs	r2, #2
 80019e4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80019e6:	230f      	movs	r3, #15
 80019e8:	18fb      	adds	r3, r7, r3
 80019ea:	781b      	ldrb	r3, [r3, #0]
}
 80019ec:	0018      	movs	r0, r3
 80019ee:	46bd      	mov	sp, r7
 80019f0:	b005      	add	sp, #20
 80019f2:	bd90      	pop	{r4, r7, pc}
 80019f4:	fffff0fe 	.word	0xfffff0fe

080019f8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2204      	movs	r2, #4
 8001a14:	4013      	ands	r3, r2
 8001a16:	d003      	beq.n	8001a20 <HAL_ADC_IRQHandler+0x28>
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	2204      	movs	r2, #4
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	d107      	bne.n	8001a30 <HAL_ADC_IRQHandler+0x38>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2208      	movs	r2, #8
 8001a24:	4013      	ands	r3, r2
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001a26:	d049      	beq.n	8001abc <HAL_ADC_IRQHandler+0xc4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	2208      	movs	r2, #8
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	d045      	beq.n	8001abc <HAL_ADC_IRQHandler+0xc4>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a34:	2210      	movs	r2, #16
 8001a36:	4013      	ands	r3, r2
 8001a38:	d106      	bne.n	8001a48 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a3e:	2280      	movs	r2, #128	; 0x80
 8001a40:	0092      	lsls	r2, r2, #2
 8001a42:	431a      	orrs	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	68da      	ldr	r2, [r3, #12]
 8001a4e:	23c0      	movs	r3, #192	; 0xc0
 8001a50:	011b      	lsls	r3, r3, #4
 8001a52:	4013      	ands	r3, r2
 8001a54:	d12a      	bne.n	8001aac <HAL_ADC_IRQHandler+0xb4>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d126      	bne.n	8001aac <HAL_ADC_IRQHandler+0xb4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2208      	movs	r2, #8
 8001a62:	4013      	ands	r3, r2
 8001a64:	d022      	beq.n	8001aac <HAL_ADC_IRQHandler+0xb4>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	2204      	movs	r2, #4
 8001a6e:	4013      	ands	r3, r2
 8001a70:	d110      	bne.n	8001a94 <HAL_ADC_IRQHandler+0x9c>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	685a      	ldr	r2, [r3, #4]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	210c      	movs	r1, #12
 8001a7e:	438a      	bics	r2, r1
 8001a80:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a86:	4a2d      	ldr	r2, [pc, #180]	; (8001b3c <HAL_ADC_IRQHandler+0x144>)
 8001a88:	4013      	ands	r3, r2
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	431a      	orrs	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	639a      	str	r2, [r3, #56]	; 0x38
 8001a92:	e00b      	b.n	8001aac <HAL_ADC_IRQHandler+0xb4>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a98:	2220      	movs	r2, #32
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	431a      	orrs	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	0018      	movs	r0, r3
 8001ab0:	f000 f846 	bl	8001b40 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	220c      	movs	r2, #12
 8001aba:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(((tmp_isr & ADC_FLAG_AWD) == ADC_FLAG_AWD) && ((tmp_ier & ADC_IT_AWD) == ADC_IT_AWD))
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2280      	movs	r2, #128	; 0x80
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	d012      	beq.n	8001aea <HAL_ADC_IRQHandler+0xf2>
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	2280      	movs	r2, #128	; 0x80
 8001ac8:	4013      	ands	r3, r2
 8001aca:	d00e      	beq.n	8001aea <HAL_ADC_IRQHandler+0xf2>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ad0:	2280      	movs	r2, #128	; 0x80
 8001ad2:	0252      	lsls	r2, r2, #9
 8001ad4:	431a      	orrs	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	0018      	movs	r0, r3
 8001ade:	f000 f837 	bl	8001b50 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2280      	movs	r2, #128	; 0x80
 8001ae8:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2210      	movs	r2, #16
 8001aee:	4013      	ands	r3, r2
 8001af0:	d020      	beq.n	8001b34 <HAL_ADC_IRQHandler+0x13c>
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	2210      	movs	r2, #16
 8001af6:	4013      	ands	r3, r2
 8001af8:	d01c      	beq.n	8001b34 <HAL_ADC_IRQHandler+0x13c>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d006      	beq.n	8001b10 <HAL_ADC_IRQHandler+0x118>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d10d      	bne.n	8001b2c <HAL_ADC_IRQHandler+0x134>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b14:	2202      	movs	r2, #2
 8001b16:	431a      	orrs	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2210      	movs	r2, #16
 8001b22:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	0018      	movs	r0, r3
 8001b28:	f000 f81a 	bl	8001b60 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2210      	movs	r2, #16
 8001b32:	601a      	str	r2, [r3, #0]
  }

}
 8001b34:	46c0      	nop			; (mov r8, r8)
 8001b36:	46bd      	mov	sp, r7
 8001b38:	b004      	add	sp, #16
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	fffffefe 	.word	0xfffffefe

08001b40 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001b48:	46c0      	nop			; (mov r8, r8)
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	b002      	add	sp, #8
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001b58:	46c0      	nop			; (mov r8, r8)
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	b002      	add	sp, #8
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001b68:	46c0      	nop			; (mov r8, r8)
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	b002      	add	sp, #8
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b7a:	230f      	movs	r3, #15
 8001b7c:	18fb      	adds	r3, r7, r3
 8001b7e:	2200      	movs	r2, #0
 8001b80:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001b82:	2300      	movs	r3, #0
 8001b84:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b8a:	2380      	movs	r3, #128	; 0x80
 8001b8c:	055b      	lsls	r3, r3, #21
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d011      	beq.n	8001bb6 <HAL_ADC_ConfigChannel+0x46>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d00d      	beq.n	8001bb6 <HAL_ADC_ConfigChannel+0x46>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d009      	beq.n	8001bb6 <HAL_ADC_ConfigChannel+0x46>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba6:	2b03      	cmp	r3, #3
 8001ba8:	d005      	beq.n	8001bb6 <HAL_ADC_ConfigChannel+0x46>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bae:	2b04      	cmp	r3, #4
 8001bb0:	d001      	beq.n	8001bb6 <HAL_ADC_ConfigChannel+0x46>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2234      	movs	r2, #52	; 0x34
 8001bba:	5c9b      	ldrb	r3, [r3, r2]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d101      	bne.n	8001bc4 <HAL_ADC_ConfigChannel+0x54>
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	e0d0      	b.n	8001d66 <HAL_ADC_ConfigChannel+0x1f6>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2234      	movs	r2, #52	; 0x34
 8001bc8:	2101      	movs	r1, #1
 8001bca:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	2204      	movs	r2, #4
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	d000      	beq.n	8001bda <HAL_ADC_ConfigChannel+0x6a>
 8001bd8:	e0b4      	b.n	8001d44 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	4a64      	ldr	r2, [pc, #400]	; (8001d70 <HAL_ADC_ConfigChannel+0x200>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d100      	bne.n	8001be6 <HAL_ADC_ConfigChannel+0x76>
 8001be4:	e082      	b.n	8001cec <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	409a      	lsls	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c00:	2380      	movs	r3, #128	; 0x80
 8001c02:	055b      	lsls	r3, r3, #21
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d037      	beq.n	8001c78 <HAL_ADC_ConfigChannel+0x108>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d033      	beq.n	8001c78 <HAL_ADC_ConfigChannel+0x108>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d02f      	beq.n	8001c78 <HAL_ADC_ConfigChannel+0x108>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1c:	2b03      	cmp	r3, #3
 8001c1e:	d02b      	beq.n	8001c78 <HAL_ADC_ConfigChannel+0x108>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c24:	2b04      	cmp	r3, #4
 8001c26:	d027      	beq.n	8001c78 <HAL_ADC_ConfigChannel+0x108>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2c:	2b05      	cmp	r3, #5
 8001c2e:	d023      	beq.n	8001c78 <HAL_ADC_ConfigChannel+0x108>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c34:	2b06      	cmp	r3, #6
 8001c36:	d01f      	beq.n	8001c78 <HAL_ADC_ConfigChannel+0x108>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3c:	2b07      	cmp	r3, #7
 8001c3e:	d01b      	beq.n	8001c78 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	689a      	ldr	r2, [r3, #8]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	2107      	movs	r1, #7
 8001c4c:	400b      	ands	r3, r1
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d012      	beq.n	8001c78 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	695a      	ldr	r2, [r3, #20]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2107      	movs	r1, #7
 8001c5e:	438a      	bics	r2, r1
 8001c60:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	6959      	ldr	r1, [r3, #20]
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	2207      	movs	r2, #7
 8001c6e:	401a      	ands	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	430a      	orrs	r2, r1
 8001c76:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2b10      	cmp	r3, #16
 8001c7e:	d007      	beq.n	8001c90 <HAL_ADC_ConfigChannel+0x120>
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2b11      	cmp	r3, #17
 8001c86:	d003      	beq.n	8001c90 <HAL_ADC_ConfigChannel+0x120>
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2b12      	cmp	r3, #18
 8001c8e:	d163      	bne.n	8001d58 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001c90:	4b38      	ldr	r3, [pc, #224]	; (8001d74 <HAL_ADC_ConfigChannel+0x204>)
 8001c92:	6819      	ldr	r1, [r3, #0]
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2b10      	cmp	r3, #16
 8001c9a:	d009      	beq.n	8001cb0 <HAL_ADC_ConfigChannel+0x140>
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2b11      	cmp	r3, #17
 8001ca2:	d102      	bne.n	8001caa <HAL_ADC_ConfigChannel+0x13a>
 8001ca4:	2380      	movs	r3, #128	; 0x80
 8001ca6:	03db      	lsls	r3, r3, #15
 8001ca8:	e004      	b.n	8001cb4 <HAL_ADC_ConfigChannel+0x144>
 8001caa:	2380      	movs	r3, #128	; 0x80
 8001cac:	045b      	lsls	r3, r3, #17
 8001cae:	e001      	b.n	8001cb4 <HAL_ADC_ConfigChannel+0x144>
 8001cb0:	2380      	movs	r3, #128	; 0x80
 8001cb2:	041b      	lsls	r3, r3, #16
 8001cb4:	4a2f      	ldr	r2, [pc, #188]	; (8001d74 <HAL_ADC_ConfigChannel+0x204>)
 8001cb6:	430b      	orrs	r3, r1
 8001cb8:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2b10      	cmp	r3, #16
 8001cc0:	d14a      	bne.n	8001d58 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001cc2:	4b2d      	ldr	r3, [pc, #180]	; (8001d78 <HAL_ADC_ConfigChannel+0x208>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	492d      	ldr	r1, [pc, #180]	; (8001d7c <HAL_ADC_ConfigChannel+0x20c>)
 8001cc8:	0018      	movs	r0, r3
 8001cca:	f7fe fa1d 	bl	8000108 <__udivsi3>
 8001cce:	0003      	movs	r3, r0
 8001cd0:	001a      	movs	r2, r3
 8001cd2:	0013      	movs	r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	189b      	adds	r3, r3, r2
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001cdc:	e002      	b.n	8001ce4 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d1f9      	bne.n	8001cde <HAL_ADC_ConfigChannel+0x16e>
 8001cea:	e035      	b.n	8001d58 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	4099      	lsls	r1, r3
 8001cfa:	000b      	movs	r3, r1
 8001cfc:	43d9      	mvns	r1, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	400a      	ands	r2, r1
 8001d04:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2b10      	cmp	r3, #16
 8001d0c:	d007      	beq.n	8001d1e <HAL_ADC_ConfigChannel+0x1ae>
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2b11      	cmp	r3, #17
 8001d14:	d003      	beq.n	8001d1e <HAL_ADC_ConfigChannel+0x1ae>
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2b12      	cmp	r3, #18
 8001d1c:	d11c      	bne.n	8001d58 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001d1e:	4b15      	ldr	r3, [pc, #84]	; (8001d74 <HAL_ADC_ConfigChannel+0x204>)
 8001d20:	6819      	ldr	r1, [r3, #0]
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2b10      	cmp	r3, #16
 8001d28:	d007      	beq.n	8001d3a <HAL_ADC_ConfigChannel+0x1ca>
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2b11      	cmp	r3, #17
 8001d30:	d101      	bne.n	8001d36 <HAL_ADC_ConfigChannel+0x1c6>
 8001d32:	4b13      	ldr	r3, [pc, #76]	; (8001d80 <HAL_ADC_ConfigChannel+0x210>)
 8001d34:	e002      	b.n	8001d3c <HAL_ADC_ConfigChannel+0x1cc>
 8001d36:	4b13      	ldr	r3, [pc, #76]	; (8001d84 <HAL_ADC_ConfigChannel+0x214>)
 8001d38:	e000      	b.n	8001d3c <HAL_ADC_ConfigChannel+0x1cc>
 8001d3a:	4b13      	ldr	r3, [pc, #76]	; (8001d88 <HAL_ADC_ConfigChannel+0x218>)
 8001d3c:	4a0d      	ldr	r2, [pc, #52]	; (8001d74 <HAL_ADC_ConfigChannel+0x204>)
 8001d3e:	400b      	ands	r3, r1
 8001d40:	6013      	str	r3, [r2, #0]
 8001d42:	e009      	b.n	8001d58 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d48:	2220      	movs	r2, #32
 8001d4a:	431a      	orrs	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001d50:	230f      	movs	r3, #15
 8001d52:	18fb      	adds	r3, r7, r3
 8001d54:	2201      	movs	r2, #1
 8001d56:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2234      	movs	r2, #52	; 0x34
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001d60:	230f      	movs	r3, #15
 8001d62:	18fb      	adds	r3, r7, r3
 8001d64:	781b      	ldrb	r3, [r3, #0]
}
 8001d66:	0018      	movs	r0, r3
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	b004      	add	sp, #16
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	46c0      	nop			; (mov r8, r8)
 8001d70:	00001001 	.word	0x00001001
 8001d74:	40012708 	.word	0x40012708
 8001d78:	20000000 	.word	0x20000000
 8001d7c:	000f4240 	.word	0x000f4240
 8001d80:	ffbfffff 	.word	0xffbfffff
 8001d84:	feffffff 	.word	0xfeffffff
 8001d88:	ff7fffff 	.word	0xff7fffff

08001d8c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d94:	2300      	movs	r3, #0
 8001d96:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	2203      	movs	r2, #3
 8001da4:	4013      	ands	r3, r2
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d112      	bne.n	8001dd0 <ADC_Enable+0x44>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2201      	movs	r2, #1
 8001db2:	4013      	ands	r3, r2
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d009      	beq.n	8001dcc <ADC_Enable+0x40>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68da      	ldr	r2, [r3, #12]
 8001dbe:	2380      	movs	r3, #128	; 0x80
 8001dc0:	021b      	lsls	r3, r3, #8
 8001dc2:	401a      	ands	r2, r3
 8001dc4:	2380      	movs	r3, #128	; 0x80
 8001dc6:	021b      	lsls	r3, r3, #8
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d101      	bne.n	8001dd0 <ADC_Enable+0x44>
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e000      	b.n	8001dd2 <ADC_Enable+0x46>
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d152      	bne.n	8001e7c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	4a2a      	ldr	r2, [pc, #168]	; (8001e88 <ADC_Enable+0xfc>)
 8001dde:	4013      	ands	r3, r2
 8001de0:	d00d      	beq.n	8001dfe <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001de6:	2210      	movs	r2, #16
 8001de8:	431a      	orrs	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001df2:	2201      	movs	r2, #1
 8001df4:	431a      	orrs	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e03f      	b.n	8001e7e <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689a      	ldr	r2, [r3, #8]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2101      	movs	r1, #1
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e0e:	4b1f      	ldr	r3, [pc, #124]	; (8001e8c <ADC_Enable+0x100>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	491f      	ldr	r1, [pc, #124]	; (8001e90 <ADC_Enable+0x104>)
 8001e14:	0018      	movs	r0, r3
 8001e16:	f7fe f977 	bl	8000108 <__udivsi3>
 8001e1a:	0003      	movs	r3, r0
 8001e1c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e1e:	e002      	b.n	8001e26 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1f9      	bne.n	8001e20 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e2c:	f7ff fc46 	bl	80016bc <HAL_GetTick>
 8001e30:	0003      	movs	r3, r0
 8001e32:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001e34:	e01b      	b.n	8001e6e <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e36:	f7ff fc41 	bl	80016bc <HAL_GetTick>
 8001e3a:	0002      	movs	r2, r0
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d914      	bls.n	8001e6e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d00d      	beq.n	8001e6e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e56:	2210      	movs	r2, #16
 8001e58:	431a      	orrs	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e62:	2201      	movs	r2, #1
 8001e64:	431a      	orrs	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e007      	b.n	8001e7e <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2201      	movs	r2, #1
 8001e76:	4013      	ands	r3, r2
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d1dc      	bne.n	8001e36 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	0018      	movs	r0, r3
 8001e80:	46bd      	mov	sp, r7
 8001e82:	b004      	add	sp, #16
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	46c0      	nop			; (mov r8, r8)
 8001e88:	80000017 	.word	0x80000017
 8001e8c:	20000000 	.word	0x20000000
 8001e90:	000f4240 	.word	0x000f4240

08001e94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	0002      	movs	r2, r0
 8001e9c:	1dfb      	adds	r3, r7, #7
 8001e9e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ea0:	1dfb      	adds	r3, r7, #7
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b7f      	cmp	r3, #127	; 0x7f
 8001ea6:	d809      	bhi.n	8001ebc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ea8:	1dfb      	adds	r3, r7, #7
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	001a      	movs	r2, r3
 8001eae:	231f      	movs	r3, #31
 8001eb0:	401a      	ands	r2, r3
 8001eb2:	4b04      	ldr	r3, [pc, #16]	; (8001ec4 <__NVIC_EnableIRQ+0x30>)
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	4091      	lsls	r1, r2
 8001eb8:	000a      	movs	r2, r1
 8001eba:	601a      	str	r2, [r3, #0]
  }
}
 8001ebc:	46c0      	nop			; (mov r8, r8)
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	b002      	add	sp, #8
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	e000e100 	.word	0xe000e100

08001ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ec8:	b590      	push	{r4, r7, lr}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	0002      	movs	r2, r0
 8001ed0:	6039      	str	r1, [r7, #0]
 8001ed2:	1dfb      	adds	r3, r7, #7
 8001ed4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ed6:	1dfb      	adds	r3, r7, #7
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	2b7f      	cmp	r3, #127	; 0x7f
 8001edc:	d828      	bhi.n	8001f30 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ede:	4a2f      	ldr	r2, [pc, #188]	; (8001f9c <__NVIC_SetPriority+0xd4>)
 8001ee0:	1dfb      	adds	r3, r7, #7
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	b25b      	sxtb	r3, r3
 8001ee6:	089b      	lsrs	r3, r3, #2
 8001ee8:	33c0      	adds	r3, #192	; 0xc0
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	589b      	ldr	r3, [r3, r2]
 8001eee:	1dfa      	adds	r2, r7, #7
 8001ef0:	7812      	ldrb	r2, [r2, #0]
 8001ef2:	0011      	movs	r1, r2
 8001ef4:	2203      	movs	r2, #3
 8001ef6:	400a      	ands	r2, r1
 8001ef8:	00d2      	lsls	r2, r2, #3
 8001efa:	21ff      	movs	r1, #255	; 0xff
 8001efc:	4091      	lsls	r1, r2
 8001efe:	000a      	movs	r2, r1
 8001f00:	43d2      	mvns	r2, r2
 8001f02:	401a      	ands	r2, r3
 8001f04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	019b      	lsls	r3, r3, #6
 8001f0a:	22ff      	movs	r2, #255	; 0xff
 8001f0c:	401a      	ands	r2, r3
 8001f0e:	1dfb      	adds	r3, r7, #7
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	0018      	movs	r0, r3
 8001f14:	2303      	movs	r3, #3
 8001f16:	4003      	ands	r3, r0
 8001f18:	00db      	lsls	r3, r3, #3
 8001f1a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f1c:	481f      	ldr	r0, [pc, #124]	; (8001f9c <__NVIC_SetPriority+0xd4>)
 8001f1e:	1dfb      	adds	r3, r7, #7
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	b25b      	sxtb	r3, r3
 8001f24:	089b      	lsrs	r3, r3, #2
 8001f26:	430a      	orrs	r2, r1
 8001f28:	33c0      	adds	r3, #192	; 0xc0
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001f2e:	e031      	b.n	8001f94 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f30:	4a1b      	ldr	r2, [pc, #108]	; (8001fa0 <__NVIC_SetPriority+0xd8>)
 8001f32:	1dfb      	adds	r3, r7, #7
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	0019      	movs	r1, r3
 8001f38:	230f      	movs	r3, #15
 8001f3a:	400b      	ands	r3, r1
 8001f3c:	3b08      	subs	r3, #8
 8001f3e:	089b      	lsrs	r3, r3, #2
 8001f40:	3306      	adds	r3, #6
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	18d3      	adds	r3, r2, r3
 8001f46:	3304      	adds	r3, #4
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	1dfa      	adds	r2, r7, #7
 8001f4c:	7812      	ldrb	r2, [r2, #0]
 8001f4e:	0011      	movs	r1, r2
 8001f50:	2203      	movs	r2, #3
 8001f52:	400a      	ands	r2, r1
 8001f54:	00d2      	lsls	r2, r2, #3
 8001f56:	21ff      	movs	r1, #255	; 0xff
 8001f58:	4091      	lsls	r1, r2
 8001f5a:	000a      	movs	r2, r1
 8001f5c:	43d2      	mvns	r2, r2
 8001f5e:	401a      	ands	r2, r3
 8001f60:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	019b      	lsls	r3, r3, #6
 8001f66:	22ff      	movs	r2, #255	; 0xff
 8001f68:	401a      	ands	r2, r3
 8001f6a:	1dfb      	adds	r3, r7, #7
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	0018      	movs	r0, r3
 8001f70:	2303      	movs	r3, #3
 8001f72:	4003      	ands	r3, r0
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f78:	4809      	ldr	r0, [pc, #36]	; (8001fa0 <__NVIC_SetPriority+0xd8>)
 8001f7a:	1dfb      	adds	r3, r7, #7
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	001c      	movs	r4, r3
 8001f80:	230f      	movs	r3, #15
 8001f82:	4023      	ands	r3, r4
 8001f84:	3b08      	subs	r3, #8
 8001f86:	089b      	lsrs	r3, r3, #2
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	3306      	adds	r3, #6
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	18c3      	adds	r3, r0, r3
 8001f90:	3304      	adds	r3, #4
 8001f92:	601a      	str	r2, [r3, #0]
}
 8001f94:	46c0      	nop			; (mov r8, r8)
 8001f96:	46bd      	mov	sp, r7
 8001f98:	b003      	add	sp, #12
 8001f9a:	bd90      	pop	{r4, r7, pc}
 8001f9c:	e000e100 	.word	0xe000e100
 8001fa0:	e000ed00 	.word	0xe000ed00

08001fa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	1e5a      	subs	r2, r3, #1
 8001fb0:	2380      	movs	r3, #128	; 0x80
 8001fb2:	045b      	lsls	r3, r3, #17
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d301      	bcc.n	8001fbc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e010      	b.n	8001fde <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fbc:	4b0a      	ldr	r3, [pc, #40]	; (8001fe8 <SysTick_Config+0x44>)
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	3a01      	subs	r2, #1
 8001fc2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	425b      	negs	r3, r3
 8001fc8:	2103      	movs	r1, #3
 8001fca:	0018      	movs	r0, r3
 8001fcc:	f7ff ff7c 	bl	8001ec8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fd0:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <SysTick_Config+0x44>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fd6:	4b04      	ldr	r3, [pc, #16]	; (8001fe8 <SysTick_Config+0x44>)
 8001fd8:	2207      	movs	r2, #7
 8001fda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	0018      	movs	r0, r3
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	b002      	add	sp, #8
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	46c0      	nop			; (mov r8, r8)
 8001fe8:	e000e010 	.word	0xe000e010

08001fec <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60b9      	str	r1, [r7, #8]
 8001ff4:	607a      	str	r2, [r7, #4]
 8001ff6:	210f      	movs	r1, #15
 8001ff8:	187b      	adds	r3, r7, r1
 8001ffa:	1c02      	adds	r2, r0, #0
 8001ffc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001ffe:	68ba      	ldr	r2, [r7, #8]
 8002000:	187b      	adds	r3, r7, r1
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	b25b      	sxtb	r3, r3
 8002006:	0011      	movs	r1, r2
 8002008:	0018      	movs	r0, r3
 800200a:	f7ff ff5d 	bl	8001ec8 <__NVIC_SetPriority>
}
 800200e:	46c0      	nop			; (mov r8, r8)
 8002010:	46bd      	mov	sp, r7
 8002012:	b004      	add	sp, #16
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b082      	sub	sp, #8
 800201a:	af00      	add	r7, sp, #0
 800201c:	0002      	movs	r2, r0
 800201e:	1dfb      	adds	r3, r7, #7
 8002020:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002022:	1dfb      	adds	r3, r7, #7
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	b25b      	sxtb	r3, r3
 8002028:	0018      	movs	r0, r3
 800202a:	f7ff ff33 	bl	8001e94 <__NVIC_EnableIRQ>
}
 800202e:	46c0      	nop			; (mov r8, r8)
 8002030:	46bd      	mov	sp, r7
 8002032:	b002      	add	sp, #8
 8002034:	bd80      	pop	{r7, pc}

08002036 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b082      	sub	sp, #8
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	0018      	movs	r0, r3
 8002042:	f7ff ffaf 	bl	8001fa4 <SysTick_Config>
 8002046:	0003      	movs	r3, r0
}
 8002048:	0018      	movs	r0, r3
 800204a:	46bd      	mov	sp, r7
 800204c:	b002      	add	sp, #8
 800204e:	bd80      	pop	{r7, pc}

08002050 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002058:	2300      	movs	r3, #0
 800205a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e036      	b.n	80020d4 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2221      	movs	r2, #33	; 0x21
 800206a:	2102      	movs	r1, #2
 800206c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	4a18      	ldr	r2, [pc, #96]	; (80020dc <HAL_DMA_Init+0x8c>)
 800207a:	4013      	ands	r3, r2
 800207c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002086:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002092:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	695b      	ldr	r3, [r3, #20]
 8002098:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800209e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	69db      	ldr	r3, [r3, #28]
 80020a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	0018      	movs	r0, r3
 80020b8:	f000 f9c4 	bl	8002444 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2221      	movs	r2, #33	; 0x21
 80020c6:	2101      	movs	r1, #1
 80020c8:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2220      	movs	r2, #32
 80020ce:	2100      	movs	r1, #0
 80020d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	0018      	movs	r0, r3
 80020d6:	46bd      	mov	sp, r7
 80020d8:	b004      	add	sp, #16
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	ffffc00f 	.word	0xffffc00f

080020e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
 80020ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020ee:	2317      	movs	r3, #23
 80020f0:	18fb      	adds	r3, r7, r3
 80020f2:	2200      	movs	r2, #0
 80020f4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2220      	movs	r2, #32
 80020fa:	5c9b      	ldrb	r3, [r3, r2]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d101      	bne.n	8002104 <HAL_DMA_Start_IT+0x24>
 8002100:	2302      	movs	r3, #2
 8002102:	e04f      	b.n	80021a4 <HAL_DMA_Start_IT+0xc4>
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2220      	movs	r2, #32
 8002108:	2101      	movs	r1, #1
 800210a:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2221      	movs	r2, #33	; 0x21
 8002110:	5c9b      	ldrb	r3, [r3, r2]
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b01      	cmp	r3, #1
 8002116:	d13a      	bne.n	800218e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2221      	movs	r2, #33	; 0x21
 800211c:	2102      	movs	r1, #2
 800211e:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2200      	movs	r2, #0
 8002124:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2101      	movs	r1, #1
 8002132:	438a      	bics	r2, r1
 8002134:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	68b9      	ldr	r1, [r7, #8]
 800213c:	68f8      	ldr	r0, [r7, #12]
 800213e:	f000 f954 	bl	80023ea <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002146:	2b00      	cmp	r3, #0
 8002148:	d008      	beq.n	800215c <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	210e      	movs	r1, #14
 8002156:	430a      	orrs	r2, r1
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	e00f      	b.n	800217c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	210a      	movs	r1, #10
 8002168:	430a      	orrs	r2, r1
 800216a:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2104      	movs	r1, #4
 8002178:	438a      	bics	r2, r1
 800217a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2101      	movs	r1, #1
 8002188:	430a      	orrs	r2, r1
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	e007      	b.n	800219e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2220      	movs	r2, #32
 8002192:	2100      	movs	r1, #0
 8002194:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002196:	2317      	movs	r3, #23
 8002198:	18fb      	adds	r3, r7, r3
 800219a:	2202      	movs	r2, #2
 800219c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800219e:	2317      	movs	r3, #23
 80021a0:	18fb      	adds	r3, r7, r3
 80021a2:	781b      	ldrb	r3, [r3, #0]
}
 80021a4:	0018      	movs	r0, r3
 80021a6:	46bd      	mov	sp, r7
 80021a8:	b006      	add	sp, #24
 80021aa:	bd80      	pop	{r7, pc}

080021ac <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2221      	movs	r2, #33	; 0x21
 80021b8:	5c9b      	ldrb	r3, [r3, r2]
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d008      	beq.n	80021d2 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2204      	movs	r2, #4
 80021c4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2220      	movs	r2, #32
 80021ca:	2100      	movs	r1, #0
 80021cc:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e020      	b.n	8002214 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	210e      	movs	r1, #14
 80021de:	438a      	bics	r2, r1
 80021e0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2101      	movs	r1, #1
 80021ee:	438a      	bics	r2, r1
 80021f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021fa:	2101      	movs	r1, #1
 80021fc:	4091      	lsls	r1, r2
 80021fe:	000a      	movs	r2, r1
 8002200:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2221      	movs	r2, #33	; 0x21
 8002206:	2101      	movs	r1, #1
 8002208:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2220      	movs	r2, #32
 800220e:	2100      	movs	r1, #0
 8002210:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002212:	2300      	movs	r3, #0
}
 8002214:	0018      	movs	r0, r3
 8002216:	46bd      	mov	sp, r7
 8002218:	b002      	add	sp, #8
 800221a:	bd80      	pop	{r7, pc}

0800221c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002224:	210f      	movs	r1, #15
 8002226:	187b      	adds	r3, r7, r1
 8002228:	2200      	movs	r2, #0
 800222a:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2221      	movs	r2, #33	; 0x21
 8002230:	5c9b      	ldrb	r3, [r3, r2]
 8002232:	b2db      	uxtb	r3, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d006      	beq.n	8002246 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2204      	movs	r2, #4
 800223c:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 800223e:	187b      	adds	r3, r7, r1
 8002240:	2201      	movs	r2, #1
 8002242:	701a      	strb	r2, [r3, #0]
 8002244:	e028      	b.n	8002298 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	210e      	movs	r1, #14
 8002252:	438a      	bics	r2, r1
 8002254:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2101      	movs	r1, #1
 8002262:	438a      	bics	r2, r1
 8002264:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800226e:	2101      	movs	r1, #1
 8002270:	4091      	lsls	r1, r2
 8002272:	000a      	movs	r2, r1
 8002274:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2221      	movs	r2, #33	; 0x21
 800227a:	2101      	movs	r1, #1
 800227c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2220      	movs	r2, #32
 8002282:	2100      	movs	r1, #0
 8002284:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800228a:	2b00      	cmp	r3, #0
 800228c:	d004      	beq.n	8002298 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	0010      	movs	r0, r2
 8002296:	4798      	blx	r3
    }
  }
  return status;
 8002298:	230f      	movs	r3, #15
 800229a:	18fb      	adds	r3, r7, r3
 800229c:	781b      	ldrb	r3, [r3, #0]
}
 800229e:	0018      	movs	r0, r3
 80022a0:	46bd      	mov	sp, r7
 80022a2:	b004      	add	sp, #16
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b084      	sub	sp, #16
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	2204      	movs	r2, #4
 80022c4:	409a      	lsls	r2, r3
 80022c6:	0013      	movs	r3, r2
 80022c8:	68fa      	ldr	r2, [r7, #12]
 80022ca:	4013      	ands	r3, r2
 80022cc:	d024      	beq.n	8002318 <HAL_DMA_IRQHandler+0x72>
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	2204      	movs	r2, #4
 80022d2:	4013      	ands	r3, r2
 80022d4:	d020      	beq.n	8002318 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2220      	movs	r2, #32
 80022de:	4013      	ands	r3, r2
 80022e0:	d107      	bne.n	80022f2 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2104      	movs	r1, #4
 80022ee:	438a      	bics	r2, r1
 80022f0:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022fa:	2104      	movs	r1, #4
 80022fc:	4091      	lsls	r1, r2
 80022fe:	000a      	movs	r2, r1
 8002300:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002306:	2b00      	cmp	r3, #0
 8002308:	d100      	bne.n	800230c <HAL_DMA_IRQHandler+0x66>
 800230a:	e06a      	b.n	80023e2 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	0010      	movs	r0, r2
 8002314:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002316:	e064      	b.n	80023e2 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231c:	2202      	movs	r2, #2
 800231e:	409a      	lsls	r2, r3
 8002320:	0013      	movs	r3, r2
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	4013      	ands	r3, r2
 8002326:	d02b      	beq.n	8002380 <HAL_DMA_IRQHandler+0xda>
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	2202      	movs	r2, #2
 800232c:	4013      	ands	r3, r2
 800232e:	d027      	beq.n	8002380 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2220      	movs	r2, #32
 8002338:	4013      	ands	r3, r2
 800233a:	d10b      	bne.n	8002354 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	210a      	movs	r1, #10
 8002348:	438a      	bics	r2, r1
 800234a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2221      	movs	r2, #33	; 0x21
 8002350:	2101      	movs	r1, #1
 8002352:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800235c:	2102      	movs	r1, #2
 800235e:	4091      	lsls	r1, r2
 8002360:	000a      	movs	r2, r1
 8002362:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2220      	movs	r2, #32
 8002368:	2100      	movs	r1, #0
 800236a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002370:	2b00      	cmp	r3, #0
 8002372:	d036      	beq.n	80023e2 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	0010      	movs	r0, r2
 800237c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800237e:	e030      	b.n	80023e2 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002384:	2208      	movs	r2, #8
 8002386:	409a      	lsls	r2, r3
 8002388:	0013      	movs	r3, r2
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	4013      	ands	r3, r2
 800238e:	d028      	beq.n	80023e2 <HAL_DMA_IRQHandler+0x13c>
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	2208      	movs	r2, #8
 8002394:	4013      	ands	r3, r2
 8002396:	d024      	beq.n	80023e2 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	210e      	movs	r1, #14
 80023a4:	438a      	bics	r2, r1
 80023a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b0:	2101      	movs	r1, #1
 80023b2:	4091      	lsls	r1, r2
 80023b4:	000a      	movs	r2, r1
 80023b6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2221      	movs	r2, #33	; 0x21
 80023c2:	2101      	movs	r1, #1
 80023c4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2220      	movs	r2, #32
 80023ca:	2100      	movs	r1, #0
 80023cc:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d005      	beq.n	80023e2 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	0010      	movs	r0, r2
 80023de:	4798      	blx	r3
    }
  }
}
 80023e0:	e7ff      	b.n	80023e2 <HAL_DMA_IRQHandler+0x13c>
 80023e2:	46c0      	nop			; (mov r8, r8)
 80023e4:	46bd      	mov	sp, r7
 80023e6:	b004      	add	sp, #16
 80023e8:	bd80      	pop	{r7, pc}

080023ea <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b084      	sub	sp, #16
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	60f8      	str	r0, [r7, #12]
 80023f2:	60b9      	str	r1, [r7, #8]
 80023f4:	607a      	str	r2, [r7, #4]
 80023f6:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002400:	2101      	movs	r1, #1
 8002402:	4091      	lsls	r1, r2
 8002404:	000a      	movs	r2, r1
 8002406:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	2b10      	cmp	r3, #16
 8002416:	d108      	bne.n	800242a <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68ba      	ldr	r2, [r7, #8]
 8002426:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002428:	e007      	b.n	800243a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68ba      	ldr	r2, [r7, #8]
 8002430:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	60da      	str	r2, [r3, #12]
}
 800243a:	46c0      	nop			; (mov r8, r8)
 800243c:	46bd      	mov	sp, r7
 800243e:	b004      	add	sp, #16
 8002440:	bd80      	pop	{r7, pc}
	...

08002444 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a08      	ldr	r2, [pc, #32]	; (8002474 <DMA_CalcBaseAndBitshift+0x30>)
 8002452:	4694      	mov	ip, r2
 8002454:	4463      	add	r3, ip
 8002456:	2114      	movs	r1, #20
 8002458:	0018      	movs	r0, r3
 800245a:	f7fd fe55 	bl	8000108 <__udivsi3>
 800245e:	0003      	movs	r3, r0
 8002460:	009a      	lsls	r2, r3, #2
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a03      	ldr	r2, [pc, #12]	; (8002478 <DMA_CalcBaseAndBitshift+0x34>)
 800246a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800246c:	46c0      	nop			; (mov r8, r8)
 800246e:	46bd      	mov	sp, r7
 8002470:	b002      	add	sp, #8
 8002472:	bd80      	pop	{r7, pc}
 8002474:	bffdfff8 	.word	0xbffdfff8
 8002478:	40020000 	.word	0x40020000

0800247c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002486:	2300      	movs	r3, #0
 8002488:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800248a:	e149      	b.n	8002720 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2101      	movs	r1, #1
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	4091      	lsls	r1, r2
 8002496:	000a      	movs	r2, r1
 8002498:	4013      	ands	r3, r2
 800249a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d100      	bne.n	80024a4 <HAL_GPIO_Init+0x28>
 80024a2:	e13a      	b.n	800271a <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	2203      	movs	r2, #3
 80024aa:	4013      	ands	r3, r2
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d005      	beq.n	80024bc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	2203      	movs	r2, #3
 80024b6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d130      	bne.n	800251e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	2203      	movs	r2, #3
 80024c8:	409a      	lsls	r2, r3
 80024ca:	0013      	movs	r3, r2
 80024cc:	43da      	mvns	r2, r3
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	4013      	ands	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	68da      	ldr	r2, [r3, #12]
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	409a      	lsls	r2, r3
 80024de:	0013      	movs	r3, r2
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024f2:	2201      	movs	r2, #1
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	409a      	lsls	r2, r3
 80024f8:	0013      	movs	r3, r2
 80024fa:	43da      	mvns	r2, r3
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	4013      	ands	r3, r2
 8002500:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	091b      	lsrs	r3, r3, #4
 8002508:	2201      	movs	r2, #1
 800250a:	401a      	ands	r2, r3
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	409a      	lsls	r2, r3
 8002510:	0013      	movs	r3, r2
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	4313      	orrs	r3, r2
 8002516:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	2203      	movs	r2, #3
 8002524:	4013      	ands	r3, r2
 8002526:	2b03      	cmp	r3, #3
 8002528:	d017      	beq.n	800255a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	2203      	movs	r2, #3
 8002536:	409a      	lsls	r2, r3
 8002538:	0013      	movs	r3, r2
 800253a:	43da      	mvns	r2, r3
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	4013      	ands	r3, r2
 8002540:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	689a      	ldr	r2, [r3, #8]
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	409a      	lsls	r2, r3
 800254c:	0013      	movs	r3, r2
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	4313      	orrs	r3, r2
 8002552:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2203      	movs	r2, #3
 8002560:	4013      	ands	r3, r2
 8002562:	2b02      	cmp	r3, #2
 8002564:	d123      	bne.n	80025ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	08da      	lsrs	r2, r3, #3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	3208      	adds	r2, #8
 800256e:	0092      	lsls	r2, r2, #2
 8002570:	58d3      	ldr	r3, [r2, r3]
 8002572:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	2207      	movs	r2, #7
 8002578:	4013      	ands	r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	220f      	movs	r2, #15
 800257e:	409a      	lsls	r2, r3
 8002580:	0013      	movs	r3, r2
 8002582:	43da      	mvns	r2, r3
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	4013      	ands	r3, r2
 8002588:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	691a      	ldr	r2, [r3, #16]
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	2107      	movs	r1, #7
 8002592:	400b      	ands	r3, r1
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	409a      	lsls	r2, r3
 8002598:	0013      	movs	r3, r2
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	4313      	orrs	r3, r2
 800259e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	08da      	lsrs	r2, r3, #3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3208      	adds	r2, #8
 80025a8:	0092      	lsls	r2, r2, #2
 80025aa:	6939      	ldr	r1, [r7, #16]
 80025ac:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	2203      	movs	r2, #3
 80025ba:	409a      	lsls	r2, r3
 80025bc:	0013      	movs	r3, r2
 80025be:	43da      	mvns	r2, r3
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	4013      	ands	r3, r2
 80025c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	2203      	movs	r2, #3
 80025cc:	401a      	ands	r2, r3
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	409a      	lsls	r2, r3
 80025d4:	0013      	movs	r3, r2
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	4313      	orrs	r3, r2
 80025da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685a      	ldr	r2, [r3, #4]
 80025e6:	23c0      	movs	r3, #192	; 0xc0
 80025e8:	029b      	lsls	r3, r3, #10
 80025ea:	4013      	ands	r3, r2
 80025ec:	d100      	bne.n	80025f0 <HAL_GPIO_Init+0x174>
 80025ee:	e094      	b.n	800271a <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025f0:	4b51      	ldr	r3, [pc, #324]	; (8002738 <HAL_GPIO_Init+0x2bc>)
 80025f2:	699a      	ldr	r2, [r3, #24]
 80025f4:	4b50      	ldr	r3, [pc, #320]	; (8002738 <HAL_GPIO_Init+0x2bc>)
 80025f6:	2101      	movs	r1, #1
 80025f8:	430a      	orrs	r2, r1
 80025fa:	619a      	str	r2, [r3, #24]
 80025fc:	4b4e      	ldr	r3, [pc, #312]	; (8002738 <HAL_GPIO_Init+0x2bc>)
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	2201      	movs	r2, #1
 8002602:	4013      	ands	r3, r2
 8002604:	60bb      	str	r3, [r7, #8]
 8002606:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002608:	4a4c      	ldr	r2, [pc, #304]	; (800273c <HAL_GPIO_Init+0x2c0>)
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	089b      	lsrs	r3, r3, #2
 800260e:	3302      	adds	r3, #2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	589b      	ldr	r3, [r3, r2]
 8002614:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	2203      	movs	r2, #3
 800261a:	4013      	ands	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	220f      	movs	r2, #15
 8002620:	409a      	lsls	r2, r3
 8002622:	0013      	movs	r3, r2
 8002624:	43da      	mvns	r2, r3
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	4013      	ands	r3, r2
 800262a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	2390      	movs	r3, #144	; 0x90
 8002630:	05db      	lsls	r3, r3, #23
 8002632:	429a      	cmp	r2, r3
 8002634:	d00d      	beq.n	8002652 <HAL_GPIO_Init+0x1d6>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a41      	ldr	r2, [pc, #260]	; (8002740 <HAL_GPIO_Init+0x2c4>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d007      	beq.n	800264e <HAL_GPIO_Init+0x1d2>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a40      	ldr	r2, [pc, #256]	; (8002744 <HAL_GPIO_Init+0x2c8>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d101      	bne.n	800264a <HAL_GPIO_Init+0x1ce>
 8002646:	2302      	movs	r3, #2
 8002648:	e004      	b.n	8002654 <HAL_GPIO_Init+0x1d8>
 800264a:	2305      	movs	r3, #5
 800264c:	e002      	b.n	8002654 <HAL_GPIO_Init+0x1d8>
 800264e:	2301      	movs	r3, #1
 8002650:	e000      	b.n	8002654 <HAL_GPIO_Init+0x1d8>
 8002652:	2300      	movs	r3, #0
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	2103      	movs	r1, #3
 8002658:	400a      	ands	r2, r1
 800265a:	0092      	lsls	r2, r2, #2
 800265c:	4093      	lsls	r3, r2
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	4313      	orrs	r3, r2
 8002662:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002664:	4935      	ldr	r1, [pc, #212]	; (800273c <HAL_GPIO_Init+0x2c0>)
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	089b      	lsrs	r3, r3, #2
 800266a:	3302      	adds	r3, #2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002672:	4b35      	ldr	r3, [pc, #212]	; (8002748 <HAL_GPIO_Init+0x2cc>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	43da      	mvns	r2, r3
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	4013      	ands	r3, r2
 8002680:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685a      	ldr	r2, [r3, #4]
 8002686:	2380      	movs	r3, #128	; 0x80
 8002688:	035b      	lsls	r3, r3, #13
 800268a:	4013      	ands	r3, r2
 800268c:	d003      	beq.n	8002696 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	4313      	orrs	r3, r2
 8002694:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002696:	4b2c      	ldr	r3, [pc, #176]	; (8002748 <HAL_GPIO_Init+0x2cc>)
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800269c:	4b2a      	ldr	r3, [pc, #168]	; (8002748 <HAL_GPIO_Init+0x2cc>)
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	43da      	mvns	r2, r3
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	4013      	ands	r3, r2
 80026aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	2380      	movs	r3, #128	; 0x80
 80026b2:	039b      	lsls	r3, r3, #14
 80026b4:	4013      	ands	r3, r2
 80026b6:	d003      	beq.n	80026c0 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	4313      	orrs	r3, r2
 80026be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80026c0:	4b21      	ldr	r3, [pc, #132]	; (8002748 <HAL_GPIO_Init+0x2cc>)
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80026c6:	4b20      	ldr	r3, [pc, #128]	; (8002748 <HAL_GPIO_Init+0x2cc>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	43da      	mvns	r2, r3
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	4013      	ands	r3, r2
 80026d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685a      	ldr	r2, [r3, #4]
 80026da:	2380      	movs	r3, #128	; 0x80
 80026dc:	029b      	lsls	r3, r3, #10
 80026de:	4013      	ands	r3, r2
 80026e0:	d003      	beq.n	80026ea <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80026ea:	4b17      	ldr	r3, [pc, #92]	; (8002748 <HAL_GPIO_Init+0x2cc>)
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80026f0:	4b15      	ldr	r3, [pc, #84]	; (8002748 <HAL_GPIO_Init+0x2cc>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	43da      	mvns	r2, r3
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	4013      	ands	r3, r2
 80026fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685a      	ldr	r2, [r3, #4]
 8002704:	2380      	movs	r3, #128	; 0x80
 8002706:	025b      	lsls	r3, r3, #9
 8002708:	4013      	ands	r3, r2
 800270a:	d003      	beq.n	8002714 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	4313      	orrs	r3, r2
 8002712:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002714:	4b0c      	ldr	r3, [pc, #48]	; (8002748 <HAL_GPIO_Init+0x2cc>)
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	3301      	adds	r3, #1
 800271e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	40da      	lsrs	r2, r3
 8002728:	1e13      	subs	r3, r2, #0
 800272a:	d000      	beq.n	800272e <HAL_GPIO_Init+0x2b2>
 800272c:	e6ae      	b.n	800248c <HAL_GPIO_Init+0x10>
  } 
}
 800272e:	46c0      	nop			; (mov r8, r8)
 8002730:	46c0      	nop			; (mov r8, r8)
 8002732:	46bd      	mov	sp, r7
 8002734:	b006      	add	sp, #24
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40021000 	.word	0x40021000
 800273c:	40010000 	.word	0x40010000
 8002740:	48000400 	.word	0x48000400
 8002744:	48000800 	.word	0x48000800
 8002748:	40010400 	.word	0x40010400

0800274c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b088      	sub	sp, #32
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d102      	bne.n	8002760 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	f000 fb76 	bl	8002e4c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2201      	movs	r2, #1
 8002766:	4013      	ands	r3, r2
 8002768:	d100      	bne.n	800276c <HAL_RCC_OscConfig+0x20>
 800276a:	e08e      	b.n	800288a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800276c:	4bc5      	ldr	r3, [pc, #788]	; (8002a84 <HAL_RCC_OscConfig+0x338>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	220c      	movs	r2, #12
 8002772:	4013      	ands	r3, r2
 8002774:	2b04      	cmp	r3, #4
 8002776:	d00e      	beq.n	8002796 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002778:	4bc2      	ldr	r3, [pc, #776]	; (8002a84 <HAL_RCC_OscConfig+0x338>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	220c      	movs	r2, #12
 800277e:	4013      	ands	r3, r2
 8002780:	2b08      	cmp	r3, #8
 8002782:	d117      	bne.n	80027b4 <HAL_RCC_OscConfig+0x68>
 8002784:	4bbf      	ldr	r3, [pc, #764]	; (8002a84 <HAL_RCC_OscConfig+0x338>)
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	23c0      	movs	r3, #192	; 0xc0
 800278a:	025b      	lsls	r3, r3, #9
 800278c:	401a      	ands	r2, r3
 800278e:	2380      	movs	r3, #128	; 0x80
 8002790:	025b      	lsls	r3, r3, #9
 8002792:	429a      	cmp	r2, r3
 8002794:	d10e      	bne.n	80027b4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002796:	4bbb      	ldr	r3, [pc, #748]	; (8002a84 <HAL_RCC_OscConfig+0x338>)
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	2380      	movs	r3, #128	; 0x80
 800279c:	029b      	lsls	r3, r3, #10
 800279e:	4013      	ands	r3, r2
 80027a0:	d100      	bne.n	80027a4 <HAL_RCC_OscConfig+0x58>
 80027a2:	e071      	b.n	8002888 <HAL_RCC_OscConfig+0x13c>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d000      	beq.n	80027ae <HAL_RCC_OscConfig+0x62>
 80027ac:	e06c      	b.n	8002888 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	f000 fb4c 	bl	8002e4c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d107      	bne.n	80027cc <HAL_RCC_OscConfig+0x80>
 80027bc:	4bb1      	ldr	r3, [pc, #708]	; (8002a84 <HAL_RCC_OscConfig+0x338>)
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	4bb0      	ldr	r3, [pc, #704]	; (8002a84 <HAL_RCC_OscConfig+0x338>)
 80027c2:	2180      	movs	r1, #128	; 0x80
 80027c4:	0249      	lsls	r1, r1, #9
 80027c6:	430a      	orrs	r2, r1
 80027c8:	601a      	str	r2, [r3, #0]
 80027ca:	e02f      	b.n	800282c <HAL_RCC_OscConfig+0xe0>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10c      	bne.n	80027ee <HAL_RCC_OscConfig+0xa2>
 80027d4:	4bab      	ldr	r3, [pc, #684]	; (8002a84 <HAL_RCC_OscConfig+0x338>)
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	4baa      	ldr	r3, [pc, #680]	; (8002a84 <HAL_RCC_OscConfig+0x338>)
 80027da:	49ab      	ldr	r1, [pc, #684]	; (8002a88 <HAL_RCC_OscConfig+0x33c>)
 80027dc:	400a      	ands	r2, r1
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	4ba8      	ldr	r3, [pc, #672]	; (8002a84 <HAL_RCC_OscConfig+0x338>)
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	4ba7      	ldr	r3, [pc, #668]	; (8002a84 <HAL_RCC_OscConfig+0x338>)
 80027e6:	49a9      	ldr	r1, [pc, #676]	; (8002a8c <HAL_RCC_OscConfig+0x340>)
 80027e8:	400a      	ands	r2, r1
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	e01e      	b.n	800282c <HAL_RCC_OscConfig+0xe0>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	2b05      	cmp	r3, #5
 80027f4:	d10e      	bne.n	8002814 <HAL_RCC_OscConfig+0xc8>
 80027f6:	4ba3      	ldr	r3, [pc, #652]	; (8002a84 <HAL_RCC_OscConfig+0x338>)
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	4ba2      	ldr	r3, [pc, #648]	; (8002a84 <HAL_RCC_OscConfig+0x338>)
 80027fc:	2180      	movs	r1, #128	; 0x80
 80027fe:	02c9      	lsls	r1, r1, #11
 8002800:	430a      	orrs	r2, r1
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	4b9f      	ldr	r3, [pc, #636]	; (8002a84 <HAL_RCC_OscConfig+0x338>)
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	4b9e      	ldr	r3, [pc, #632]	; (8002a84 <HAL_RCC_OscConfig+0x338>)
 800280a:	2180      	movs	r1, #128	; 0x80
 800280c:	0249      	lsls	r1, r1, #9
 800280e:	430a      	orrs	r2, r1
 8002810:	601a      	str	r2, [r3, #0]
 8002812:	e00b      	b.n	800282c <HAL_RCC_OscConfig+0xe0>
 8002814:	4b9b      	ldr	r3, [pc, #620]	; (8002a84 <HAL_RCC_OscConfig+0x338>)
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	4b9a      	ldr	r3, [pc, #616]	; (8002a84 <HAL_RCC_OscConfig+0x338>)
 800281a:	499b      	ldr	r1, [pc, #620]	; (8002a88 <HAL_RCC_OscConfig+0x33c>)
 800281c:	400a      	ands	r2, r1
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	4b98      	ldr	r3, [pc, #608]	; (8002a84 <HAL_RCC_OscConfig+0x338>)
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	4b97      	ldr	r3, [pc, #604]	; (8002a84 <HAL_RCC_OscConfig+0x338>)
 8002826:	4999      	ldr	r1, [pc, #612]	; (8002a8c <HAL_RCC_OscConfig+0x340>)
 8002828:	400a      	ands	r2, r1
 800282a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d014      	beq.n	800285e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002834:	f7fe ff42 	bl	80016bc <HAL_GetTick>
 8002838:	0003      	movs	r3, r0
 800283a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800283c:	e008      	b.n	8002850 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800283e:	f7fe ff3d 	bl	80016bc <HAL_GetTick>
 8002842:	0002      	movs	r2, r0
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b64      	cmp	r3, #100	; 0x64
 800284a:	d901      	bls.n	8002850 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e2fd      	b.n	8002e4c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002850:	4b8c      	ldr	r3, [pc, #560]	; (8002a84 <HAL_RCC_OscConfig+0x338>)
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	2380      	movs	r3, #128	; 0x80
 8002856:	029b      	lsls	r3, r3, #10
 8002858:	4013      	ands	r3, r2
 800285a:	d0f0      	beq.n	800283e <HAL_RCC_OscConfig+0xf2>
 800285c:	e015      	b.n	800288a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800285e:	f7fe ff2d 	bl	80016bc <HAL_GetTick>
 8002862:	0003      	movs	r3, r0
 8002864:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002868:	f7fe ff28 	bl	80016bc <HAL_GetTick>
 800286c:	0002      	movs	r2, r0
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b64      	cmp	r3, #100	; 0x64
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e2e8      	b.n	8002e4c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800287a:	4b82      	ldr	r3, [pc, #520]	; (8002a84 <HAL_RCC_OscConfig+0x338>)
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	2380      	movs	r3, #128	; 0x80
 8002880:	029b      	lsls	r3, r3, #10
 8002882:	4013      	ands	r3, r2
 8002884:	d1f0      	bne.n	8002868 <HAL_RCC_OscConfig+0x11c>
 8002886:	e000      	b.n	800288a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002888:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2202      	movs	r2, #2
 8002890:	4013      	ands	r3, r2
 8002892:	d100      	bne.n	8002896 <HAL_RCC_OscConfig+0x14a>
 8002894:	e06c      	b.n	8002970 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002896:	4b7b      	ldr	r3, [pc, #492]	; (8002a84 <HAL_RCC_OscConfig+0x338>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	220c      	movs	r2, #12
 800289c:	4013      	ands	r3, r2
 800289e:	d00e      	beq.n	80028be <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80028a0:	4b78      	ldr	r3, [pc, #480]	; (8002a84 <HAL_RCC_OscConfig+0x338>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	220c      	movs	r2, #12
 80028a6:	4013      	ands	r3, r2
 80028a8:	2b08      	cmp	r3, #8
 80028aa:	d11f      	bne.n	80028ec <HAL_RCC_OscConfig+0x1a0>
 80028ac:	4b75      	ldr	r3, [pc, #468]	; (8002a84 <HAL_RCC_OscConfig+0x338>)
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	23c0      	movs	r3, #192	; 0xc0
 80028b2:	025b      	lsls	r3, r3, #9
 80028b4:	401a      	ands	r2, r3
 80028b6:	2380      	movs	r3, #128	; 0x80
 80028b8:	021b      	lsls	r3, r3, #8
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d116      	bne.n	80028ec <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028be:	4b71      	ldr	r3, [pc, #452]	; (8002a84 <HAL_RCC_OscConfig+0x338>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2202      	movs	r2, #2
 80028c4:	4013      	ands	r3, r2
 80028c6:	d005      	beq.n	80028d4 <HAL_RCC_OscConfig+0x188>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d001      	beq.n	80028d4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e2bb      	b.n	8002e4c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028d4:	4b6b      	ldr	r3, [pc, #428]	; (8002a84 <HAL_RCC_OscConfig+0x338>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	22f8      	movs	r2, #248	; 0xf8
 80028da:	4393      	bics	r3, r2
 80028dc:	0019      	movs	r1, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	00da      	lsls	r2, r3, #3
 80028e4:	4b67      	ldr	r3, [pc, #412]	; (8002a84 <HAL_RCC_OscConfig+0x338>)
 80028e6:	430a      	orrs	r2, r1
 80028e8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ea:	e041      	b.n	8002970 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d024      	beq.n	800293e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028f4:	4b63      	ldr	r3, [pc, #396]	; (8002a84 <HAL_RCC_OscConfig+0x338>)
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	4b62      	ldr	r3, [pc, #392]	; (8002a84 <HAL_RCC_OscConfig+0x338>)
 80028fa:	2101      	movs	r1, #1
 80028fc:	430a      	orrs	r2, r1
 80028fe:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002900:	f7fe fedc 	bl	80016bc <HAL_GetTick>
 8002904:	0003      	movs	r3, r0
 8002906:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002908:	e008      	b.n	800291c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800290a:	f7fe fed7 	bl	80016bc <HAL_GetTick>
 800290e:	0002      	movs	r2, r0
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d901      	bls.n	800291c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e297      	b.n	8002e4c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800291c:	4b59      	ldr	r3, [pc, #356]	; (8002a84 <HAL_RCC_OscConfig+0x338>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2202      	movs	r2, #2
 8002922:	4013      	ands	r3, r2
 8002924:	d0f1      	beq.n	800290a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002926:	4b57      	ldr	r3, [pc, #348]	; (8002a84 <HAL_RCC_OscConfig+0x338>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	22f8      	movs	r2, #248	; 0xf8
 800292c:	4393      	bics	r3, r2
 800292e:	0019      	movs	r1, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	00da      	lsls	r2, r3, #3
 8002936:	4b53      	ldr	r3, [pc, #332]	; (8002a84 <HAL_RCC_OscConfig+0x338>)
 8002938:	430a      	orrs	r2, r1
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	e018      	b.n	8002970 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800293e:	4b51      	ldr	r3, [pc, #324]	; (8002a84 <HAL_RCC_OscConfig+0x338>)
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	4b50      	ldr	r3, [pc, #320]	; (8002a84 <HAL_RCC_OscConfig+0x338>)
 8002944:	2101      	movs	r1, #1
 8002946:	438a      	bics	r2, r1
 8002948:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800294a:	f7fe feb7 	bl	80016bc <HAL_GetTick>
 800294e:	0003      	movs	r3, r0
 8002950:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002954:	f7fe feb2 	bl	80016bc <HAL_GetTick>
 8002958:	0002      	movs	r2, r0
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e272      	b.n	8002e4c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002966:	4b47      	ldr	r3, [pc, #284]	; (8002a84 <HAL_RCC_OscConfig+0x338>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2202      	movs	r2, #2
 800296c:	4013      	ands	r3, r2
 800296e:	d1f1      	bne.n	8002954 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2208      	movs	r2, #8
 8002976:	4013      	ands	r3, r2
 8002978:	d036      	beq.n	80029e8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d019      	beq.n	80029b6 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002982:	4b40      	ldr	r3, [pc, #256]	; (8002a84 <HAL_RCC_OscConfig+0x338>)
 8002984:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002986:	4b3f      	ldr	r3, [pc, #252]	; (8002a84 <HAL_RCC_OscConfig+0x338>)
 8002988:	2101      	movs	r1, #1
 800298a:	430a      	orrs	r2, r1
 800298c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800298e:	f7fe fe95 	bl	80016bc <HAL_GetTick>
 8002992:	0003      	movs	r3, r0
 8002994:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002996:	e008      	b.n	80029aa <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002998:	f7fe fe90 	bl	80016bc <HAL_GetTick>
 800299c:	0002      	movs	r2, r0
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e250      	b.n	8002e4c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029aa:	4b36      	ldr	r3, [pc, #216]	; (8002a84 <HAL_RCC_OscConfig+0x338>)
 80029ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ae:	2202      	movs	r2, #2
 80029b0:	4013      	ands	r3, r2
 80029b2:	d0f1      	beq.n	8002998 <HAL_RCC_OscConfig+0x24c>
 80029b4:	e018      	b.n	80029e8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029b6:	4b33      	ldr	r3, [pc, #204]	; (8002a84 <HAL_RCC_OscConfig+0x338>)
 80029b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029ba:	4b32      	ldr	r3, [pc, #200]	; (8002a84 <HAL_RCC_OscConfig+0x338>)
 80029bc:	2101      	movs	r1, #1
 80029be:	438a      	bics	r2, r1
 80029c0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029c2:	f7fe fe7b 	bl	80016bc <HAL_GetTick>
 80029c6:	0003      	movs	r3, r0
 80029c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029ca:	e008      	b.n	80029de <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029cc:	f7fe fe76 	bl	80016bc <HAL_GetTick>
 80029d0:	0002      	movs	r2, r0
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e236      	b.n	8002e4c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029de:	4b29      	ldr	r3, [pc, #164]	; (8002a84 <HAL_RCC_OscConfig+0x338>)
 80029e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e2:	2202      	movs	r2, #2
 80029e4:	4013      	ands	r3, r2
 80029e6:	d1f1      	bne.n	80029cc <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2204      	movs	r2, #4
 80029ee:	4013      	ands	r3, r2
 80029f0:	d100      	bne.n	80029f4 <HAL_RCC_OscConfig+0x2a8>
 80029f2:	e0b5      	b.n	8002b60 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029f4:	201f      	movs	r0, #31
 80029f6:	183b      	adds	r3, r7, r0
 80029f8:	2200      	movs	r2, #0
 80029fa:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029fc:	4b21      	ldr	r3, [pc, #132]	; (8002a84 <HAL_RCC_OscConfig+0x338>)
 80029fe:	69da      	ldr	r2, [r3, #28]
 8002a00:	2380      	movs	r3, #128	; 0x80
 8002a02:	055b      	lsls	r3, r3, #21
 8002a04:	4013      	ands	r3, r2
 8002a06:	d110      	bne.n	8002a2a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a08:	4b1e      	ldr	r3, [pc, #120]	; (8002a84 <HAL_RCC_OscConfig+0x338>)
 8002a0a:	69da      	ldr	r2, [r3, #28]
 8002a0c:	4b1d      	ldr	r3, [pc, #116]	; (8002a84 <HAL_RCC_OscConfig+0x338>)
 8002a0e:	2180      	movs	r1, #128	; 0x80
 8002a10:	0549      	lsls	r1, r1, #21
 8002a12:	430a      	orrs	r2, r1
 8002a14:	61da      	str	r2, [r3, #28]
 8002a16:	4b1b      	ldr	r3, [pc, #108]	; (8002a84 <HAL_RCC_OscConfig+0x338>)
 8002a18:	69da      	ldr	r2, [r3, #28]
 8002a1a:	2380      	movs	r3, #128	; 0x80
 8002a1c:	055b      	lsls	r3, r3, #21
 8002a1e:	4013      	ands	r3, r2
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002a24:	183b      	adds	r3, r7, r0
 8002a26:	2201      	movs	r2, #1
 8002a28:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a2a:	4b19      	ldr	r3, [pc, #100]	; (8002a90 <HAL_RCC_OscConfig+0x344>)
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	2380      	movs	r3, #128	; 0x80
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	4013      	ands	r3, r2
 8002a34:	d11a      	bne.n	8002a6c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a36:	4b16      	ldr	r3, [pc, #88]	; (8002a90 <HAL_RCC_OscConfig+0x344>)
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	4b15      	ldr	r3, [pc, #84]	; (8002a90 <HAL_RCC_OscConfig+0x344>)
 8002a3c:	2180      	movs	r1, #128	; 0x80
 8002a3e:	0049      	lsls	r1, r1, #1
 8002a40:	430a      	orrs	r2, r1
 8002a42:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a44:	f7fe fe3a 	bl	80016bc <HAL_GetTick>
 8002a48:	0003      	movs	r3, r0
 8002a4a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a4c:	e008      	b.n	8002a60 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a4e:	f7fe fe35 	bl	80016bc <HAL_GetTick>
 8002a52:	0002      	movs	r2, r0
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	2b64      	cmp	r3, #100	; 0x64
 8002a5a:	d901      	bls.n	8002a60 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e1f5      	b.n	8002e4c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a60:	4b0b      	ldr	r3, [pc, #44]	; (8002a90 <HAL_RCC_OscConfig+0x344>)
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	2380      	movs	r3, #128	; 0x80
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	4013      	ands	r3, r2
 8002a6a:	d0f0      	beq.n	8002a4e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d10f      	bne.n	8002a94 <HAL_RCC_OscConfig+0x348>
 8002a74:	4b03      	ldr	r3, [pc, #12]	; (8002a84 <HAL_RCC_OscConfig+0x338>)
 8002a76:	6a1a      	ldr	r2, [r3, #32]
 8002a78:	4b02      	ldr	r3, [pc, #8]	; (8002a84 <HAL_RCC_OscConfig+0x338>)
 8002a7a:	2101      	movs	r1, #1
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	621a      	str	r2, [r3, #32]
 8002a80:	e036      	b.n	8002af0 <HAL_RCC_OscConfig+0x3a4>
 8002a82:	46c0      	nop			; (mov r8, r8)
 8002a84:	40021000 	.word	0x40021000
 8002a88:	fffeffff 	.word	0xfffeffff
 8002a8c:	fffbffff 	.word	0xfffbffff
 8002a90:	40007000 	.word	0x40007000
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d10c      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x36a>
 8002a9c:	4bca      	ldr	r3, [pc, #808]	; (8002dc8 <HAL_RCC_OscConfig+0x67c>)
 8002a9e:	6a1a      	ldr	r2, [r3, #32]
 8002aa0:	4bc9      	ldr	r3, [pc, #804]	; (8002dc8 <HAL_RCC_OscConfig+0x67c>)
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	438a      	bics	r2, r1
 8002aa6:	621a      	str	r2, [r3, #32]
 8002aa8:	4bc7      	ldr	r3, [pc, #796]	; (8002dc8 <HAL_RCC_OscConfig+0x67c>)
 8002aaa:	6a1a      	ldr	r2, [r3, #32]
 8002aac:	4bc6      	ldr	r3, [pc, #792]	; (8002dc8 <HAL_RCC_OscConfig+0x67c>)
 8002aae:	2104      	movs	r1, #4
 8002ab0:	438a      	bics	r2, r1
 8002ab2:	621a      	str	r2, [r3, #32]
 8002ab4:	e01c      	b.n	8002af0 <HAL_RCC_OscConfig+0x3a4>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	2b05      	cmp	r3, #5
 8002abc:	d10c      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x38c>
 8002abe:	4bc2      	ldr	r3, [pc, #776]	; (8002dc8 <HAL_RCC_OscConfig+0x67c>)
 8002ac0:	6a1a      	ldr	r2, [r3, #32]
 8002ac2:	4bc1      	ldr	r3, [pc, #772]	; (8002dc8 <HAL_RCC_OscConfig+0x67c>)
 8002ac4:	2104      	movs	r1, #4
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	621a      	str	r2, [r3, #32]
 8002aca:	4bbf      	ldr	r3, [pc, #764]	; (8002dc8 <HAL_RCC_OscConfig+0x67c>)
 8002acc:	6a1a      	ldr	r2, [r3, #32]
 8002ace:	4bbe      	ldr	r3, [pc, #760]	; (8002dc8 <HAL_RCC_OscConfig+0x67c>)
 8002ad0:	2101      	movs	r1, #1
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	621a      	str	r2, [r3, #32]
 8002ad6:	e00b      	b.n	8002af0 <HAL_RCC_OscConfig+0x3a4>
 8002ad8:	4bbb      	ldr	r3, [pc, #748]	; (8002dc8 <HAL_RCC_OscConfig+0x67c>)
 8002ada:	6a1a      	ldr	r2, [r3, #32]
 8002adc:	4bba      	ldr	r3, [pc, #744]	; (8002dc8 <HAL_RCC_OscConfig+0x67c>)
 8002ade:	2101      	movs	r1, #1
 8002ae0:	438a      	bics	r2, r1
 8002ae2:	621a      	str	r2, [r3, #32]
 8002ae4:	4bb8      	ldr	r3, [pc, #736]	; (8002dc8 <HAL_RCC_OscConfig+0x67c>)
 8002ae6:	6a1a      	ldr	r2, [r3, #32]
 8002ae8:	4bb7      	ldr	r3, [pc, #732]	; (8002dc8 <HAL_RCC_OscConfig+0x67c>)
 8002aea:	2104      	movs	r1, #4
 8002aec:	438a      	bics	r2, r1
 8002aee:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d014      	beq.n	8002b22 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002af8:	f7fe fde0 	bl	80016bc <HAL_GetTick>
 8002afc:	0003      	movs	r3, r0
 8002afe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b00:	e009      	b.n	8002b16 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b02:	f7fe fddb 	bl	80016bc <HAL_GetTick>
 8002b06:	0002      	movs	r2, r0
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	4aaf      	ldr	r2, [pc, #700]	; (8002dcc <HAL_RCC_OscConfig+0x680>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e19a      	b.n	8002e4c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b16:	4bac      	ldr	r3, [pc, #688]	; (8002dc8 <HAL_RCC_OscConfig+0x67c>)
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	d0f0      	beq.n	8002b02 <HAL_RCC_OscConfig+0x3b6>
 8002b20:	e013      	b.n	8002b4a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b22:	f7fe fdcb 	bl	80016bc <HAL_GetTick>
 8002b26:	0003      	movs	r3, r0
 8002b28:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b2a:	e009      	b.n	8002b40 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b2c:	f7fe fdc6 	bl	80016bc <HAL_GetTick>
 8002b30:	0002      	movs	r2, r0
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	4aa5      	ldr	r2, [pc, #660]	; (8002dcc <HAL_RCC_OscConfig+0x680>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e185      	b.n	8002e4c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b40:	4ba1      	ldr	r3, [pc, #644]	; (8002dc8 <HAL_RCC_OscConfig+0x67c>)
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	2202      	movs	r2, #2
 8002b46:	4013      	ands	r3, r2
 8002b48:	d1f0      	bne.n	8002b2c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b4a:	231f      	movs	r3, #31
 8002b4c:	18fb      	adds	r3, r7, r3
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d105      	bne.n	8002b60 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b54:	4b9c      	ldr	r3, [pc, #624]	; (8002dc8 <HAL_RCC_OscConfig+0x67c>)
 8002b56:	69da      	ldr	r2, [r3, #28]
 8002b58:	4b9b      	ldr	r3, [pc, #620]	; (8002dc8 <HAL_RCC_OscConfig+0x67c>)
 8002b5a:	499d      	ldr	r1, [pc, #628]	; (8002dd0 <HAL_RCC_OscConfig+0x684>)
 8002b5c:	400a      	ands	r2, r1
 8002b5e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2210      	movs	r2, #16
 8002b66:	4013      	ands	r3, r2
 8002b68:	d063      	beq.n	8002c32 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d12a      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002b72:	4b95      	ldr	r3, [pc, #596]	; (8002dc8 <HAL_RCC_OscConfig+0x67c>)
 8002b74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b76:	4b94      	ldr	r3, [pc, #592]	; (8002dc8 <HAL_RCC_OscConfig+0x67c>)
 8002b78:	2104      	movs	r1, #4
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002b7e:	4b92      	ldr	r3, [pc, #584]	; (8002dc8 <HAL_RCC_OscConfig+0x67c>)
 8002b80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b82:	4b91      	ldr	r3, [pc, #580]	; (8002dc8 <HAL_RCC_OscConfig+0x67c>)
 8002b84:	2101      	movs	r1, #1
 8002b86:	430a      	orrs	r2, r1
 8002b88:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b8a:	f7fe fd97 	bl	80016bc <HAL_GetTick>
 8002b8e:	0003      	movs	r3, r0
 8002b90:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002b94:	f7fe fd92 	bl	80016bc <HAL_GetTick>
 8002b98:	0002      	movs	r2, r0
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e152      	b.n	8002e4c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002ba6:	4b88      	ldr	r3, [pc, #544]	; (8002dc8 <HAL_RCC_OscConfig+0x67c>)
 8002ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002baa:	2202      	movs	r2, #2
 8002bac:	4013      	ands	r3, r2
 8002bae:	d0f1      	beq.n	8002b94 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002bb0:	4b85      	ldr	r3, [pc, #532]	; (8002dc8 <HAL_RCC_OscConfig+0x67c>)
 8002bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bb4:	22f8      	movs	r2, #248	; 0xf8
 8002bb6:	4393      	bics	r3, r2
 8002bb8:	0019      	movs	r1, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	00da      	lsls	r2, r3, #3
 8002bc0:	4b81      	ldr	r3, [pc, #516]	; (8002dc8 <HAL_RCC_OscConfig+0x67c>)
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	635a      	str	r2, [r3, #52]	; 0x34
 8002bc6:	e034      	b.n	8002c32 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	695b      	ldr	r3, [r3, #20]
 8002bcc:	3305      	adds	r3, #5
 8002bce:	d111      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002bd0:	4b7d      	ldr	r3, [pc, #500]	; (8002dc8 <HAL_RCC_OscConfig+0x67c>)
 8002bd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bd4:	4b7c      	ldr	r3, [pc, #496]	; (8002dc8 <HAL_RCC_OscConfig+0x67c>)
 8002bd6:	2104      	movs	r1, #4
 8002bd8:	438a      	bics	r2, r1
 8002bda:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002bdc:	4b7a      	ldr	r3, [pc, #488]	; (8002dc8 <HAL_RCC_OscConfig+0x67c>)
 8002bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002be0:	22f8      	movs	r2, #248	; 0xf8
 8002be2:	4393      	bics	r3, r2
 8002be4:	0019      	movs	r1, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	00da      	lsls	r2, r3, #3
 8002bec:	4b76      	ldr	r3, [pc, #472]	; (8002dc8 <HAL_RCC_OscConfig+0x67c>)
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	635a      	str	r2, [r3, #52]	; 0x34
 8002bf2:	e01e      	b.n	8002c32 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002bf4:	4b74      	ldr	r3, [pc, #464]	; (8002dc8 <HAL_RCC_OscConfig+0x67c>)
 8002bf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bf8:	4b73      	ldr	r3, [pc, #460]	; (8002dc8 <HAL_RCC_OscConfig+0x67c>)
 8002bfa:	2104      	movs	r1, #4
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002c00:	4b71      	ldr	r3, [pc, #452]	; (8002dc8 <HAL_RCC_OscConfig+0x67c>)
 8002c02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c04:	4b70      	ldr	r3, [pc, #448]	; (8002dc8 <HAL_RCC_OscConfig+0x67c>)
 8002c06:	2101      	movs	r1, #1
 8002c08:	438a      	bics	r2, r1
 8002c0a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c0c:	f7fe fd56 	bl	80016bc <HAL_GetTick>
 8002c10:	0003      	movs	r3, r0
 8002c12:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002c14:	e008      	b.n	8002c28 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002c16:	f7fe fd51 	bl	80016bc <HAL_GetTick>
 8002c1a:	0002      	movs	r2, r0
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e111      	b.n	8002e4c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002c28:	4b67      	ldr	r3, [pc, #412]	; (8002dc8 <HAL_RCC_OscConfig+0x67c>)
 8002c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c2c:	2202      	movs	r2, #2
 8002c2e:	4013      	ands	r3, r2
 8002c30:	d1f1      	bne.n	8002c16 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2220      	movs	r2, #32
 8002c38:	4013      	ands	r3, r2
 8002c3a:	d05c      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002c3c:	4b62      	ldr	r3, [pc, #392]	; (8002dc8 <HAL_RCC_OscConfig+0x67c>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	220c      	movs	r2, #12
 8002c42:	4013      	ands	r3, r2
 8002c44:	2b0c      	cmp	r3, #12
 8002c46:	d00e      	beq.n	8002c66 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002c48:	4b5f      	ldr	r3, [pc, #380]	; (8002dc8 <HAL_RCC_OscConfig+0x67c>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	220c      	movs	r2, #12
 8002c4e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002c50:	2b08      	cmp	r3, #8
 8002c52:	d114      	bne.n	8002c7e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002c54:	4b5c      	ldr	r3, [pc, #368]	; (8002dc8 <HAL_RCC_OscConfig+0x67c>)
 8002c56:	685a      	ldr	r2, [r3, #4]
 8002c58:	23c0      	movs	r3, #192	; 0xc0
 8002c5a:	025b      	lsls	r3, r3, #9
 8002c5c:	401a      	ands	r2, r3
 8002c5e:	23c0      	movs	r3, #192	; 0xc0
 8002c60:	025b      	lsls	r3, r3, #9
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d10b      	bne.n	8002c7e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002c66:	4b58      	ldr	r3, [pc, #352]	; (8002dc8 <HAL_RCC_OscConfig+0x67c>)
 8002c68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c6a:	2380      	movs	r3, #128	; 0x80
 8002c6c:	029b      	lsls	r3, r3, #10
 8002c6e:	4013      	ands	r3, r2
 8002c70:	d040      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x5a8>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d03c      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e0e6      	b.n	8002e4c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d01b      	beq.n	8002cbe <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002c86:	4b50      	ldr	r3, [pc, #320]	; (8002dc8 <HAL_RCC_OscConfig+0x67c>)
 8002c88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c8a:	4b4f      	ldr	r3, [pc, #316]	; (8002dc8 <HAL_RCC_OscConfig+0x67c>)
 8002c8c:	2180      	movs	r1, #128	; 0x80
 8002c8e:	0249      	lsls	r1, r1, #9
 8002c90:	430a      	orrs	r2, r1
 8002c92:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c94:	f7fe fd12 	bl	80016bc <HAL_GetTick>
 8002c98:	0003      	movs	r3, r0
 8002c9a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002c9c:	e008      	b.n	8002cb0 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c9e:	f7fe fd0d 	bl	80016bc <HAL_GetTick>
 8002ca2:	0002      	movs	r2, r0
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e0cd      	b.n	8002e4c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002cb0:	4b45      	ldr	r3, [pc, #276]	; (8002dc8 <HAL_RCC_OscConfig+0x67c>)
 8002cb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cb4:	2380      	movs	r3, #128	; 0x80
 8002cb6:	029b      	lsls	r3, r3, #10
 8002cb8:	4013      	ands	r3, r2
 8002cba:	d0f0      	beq.n	8002c9e <HAL_RCC_OscConfig+0x552>
 8002cbc:	e01b      	b.n	8002cf6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002cbe:	4b42      	ldr	r3, [pc, #264]	; (8002dc8 <HAL_RCC_OscConfig+0x67c>)
 8002cc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cc2:	4b41      	ldr	r3, [pc, #260]	; (8002dc8 <HAL_RCC_OscConfig+0x67c>)
 8002cc4:	4943      	ldr	r1, [pc, #268]	; (8002dd4 <HAL_RCC_OscConfig+0x688>)
 8002cc6:	400a      	ands	r2, r1
 8002cc8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cca:	f7fe fcf7 	bl	80016bc <HAL_GetTick>
 8002cce:	0003      	movs	r3, r0
 8002cd0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cd4:	f7fe fcf2 	bl	80016bc <HAL_GetTick>
 8002cd8:	0002      	movs	r2, r0
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e0b2      	b.n	8002e4c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002ce6:	4b38      	ldr	r3, [pc, #224]	; (8002dc8 <HAL_RCC_OscConfig+0x67c>)
 8002ce8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cea:	2380      	movs	r3, #128	; 0x80
 8002cec:	029b      	lsls	r3, r3, #10
 8002cee:	4013      	ands	r3, r2
 8002cf0:	d1f0      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x588>
 8002cf2:	e000      	b.n	8002cf6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002cf4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d100      	bne.n	8002d00 <HAL_RCC_OscConfig+0x5b4>
 8002cfe:	e0a4      	b.n	8002e4a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d00:	4b31      	ldr	r3, [pc, #196]	; (8002dc8 <HAL_RCC_OscConfig+0x67c>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	220c      	movs	r2, #12
 8002d06:	4013      	ands	r3, r2
 8002d08:	2b08      	cmp	r3, #8
 8002d0a:	d100      	bne.n	8002d0e <HAL_RCC_OscConfig+0x5c2>
 8002d0c:	e078      	b.n	8002e00 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d14c      	bne.n	8002db0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d16:	4b2c      	ldr	r3, [pc, #176]	; (8002dc8 <HAL_RCC_OscConfig+0x67c>)
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	4b2b      	ldr	r3, [pc, #172]	; (8002dc8 <HAL_RCC_OscConfig+0x67c>)
 8002d1c:	492e      	ldr	r1, [pc, #184]	; (8002dd8 <HAL_RCC_OscConfig+0x68c>)
 8002d1e:	400a      	ands	r2, r1
 8002d20:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d22:	f7fe fccb 	bl	80016bc <HAL_GetTick>
 8002d26:	0003      	movs	r3, r0
 8002d28:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d2c:	f7fe fcc6 	bl	80016bc <HAL_GetTick>
 8002d30:	0002      	movs	r2, r0
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e086      	b.n	8002e4c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d3e:	4b22      	ldr	r3, [pc, #136]	; (8002dc8 <HAL_RCC_OscConfig+0x67c>)
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	2380      	movs	r3, #128	; 0x80
 8002d44:	049b      	lsls	r3, r3, #18
 8002d46:	4013      	ands	r3, r2
 8002d48:	d1f0      	bne.n	8002d2c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d4a:	4b1f      	ldr	r3, [pc, #124]	; (8002dc8 <HAL_RCC_OscConfig+0x67c>)
 8002d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4e:	220f      	movs	r2, #15
 8002d50:	4393      	bics	r3, r2
 8002d52:	0019      	movs	r1, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d58:	4b1b      	ldr	r3, [pc, #108]	; (8002dc8 <HAL_RCC_OscConfig+0x67c>)
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d5e:	4b1a      	ldr	r3, [pc, #104]	; (8002dc8 <HAL_RCC_OscConfig+0x67c>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	4a1e      	ldr	r2, [pc, #120]	; (8002ddc <HAL_RCC_OscConfig+0x690>)
 8002d64:	4013      	ands	r3, r2
 8002d66:	0019      	movs	r1, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d70:	431a      	orrs	r2, r3
 8002d72:	4b15      	ldr	r3, [pc, #84]	; (8002dc8 <HAL_RCC_OscConfig+0x67c>)
 8002d74:	430a      	orrs	r2, r1
 8002d76:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d78:	4b13      	ldr	r3, [pc, #76]	; (8002dc8 <HAL_RCC_OscConfig+0x67c>)
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	4b12      	ldr	r3, [pc, #72]	; (8002dc8 <HAL_RCC_OscConfig+0x67c>)
 8002d7e:	2180      	movs	r1, #128	; 0x80
 8002d80:	0449      	lsls	r1, r1, #17
 8002d82:	430a      	orrs	r2, r1
 8002d84:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d86:	f7fe fc99 	bl	80016bc <HAL_GetTick>
 8002d8a:	0003      	movs	r3, r0
 8002d8c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d90:	f7fe fc94 	bl	80016bc <HAL_GetTick>
 8002d94:	0002      	movs	r2, r0
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e054      	b.n	8002e4c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002da2:	4b09      	ldr	r3, [pc, #36]	; (8002dc8 <HAL_RCC_OscConfig+0x67c>)
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	2380      	movs	r3, #128	; 0x80
 8002da8:	049b      	lsls	r3, r3, #18
 8002daa:	4013      	ands	r3, r2
 8002dac:	d0f0      	beq.n	8002d90 <HAL_RCC_OscConfig+0x644>
 8002dae:	e04c      	b.n	8002e4a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002db0:	4b05      	ldr	r3, [pc, #20]	; (8002dc8 <HAL_RCC_OscConfig+0x67c>)
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	4b04      	ldr	r3, [pc, #16]	; (8002dc8 <HAL_RCC_OscConfig+0x67c>)
 8002db6:	4908      	ldr	r1, [pc, #32]	; (8002dd8 <HAL_RCC_OscConfig+0x68c>)
 8002db8:	400a      	ands	r2, r1
 8002dba:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dbc:	f7fe fc7e 	bl	80016bc <HAL_GetTick>
 8002dc0:	0003      	movs	r3, r0
 8002dc2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dc4:	e015      	b.n	8002df2 <HAL_RCC_OscConfig+0x6a6>
 8002dc6:	46c0      	nop			; (mov r8, r8)
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	00001388 	.word	0x00001388
 8002dd0:	efffffff 	.word	0xefffffff
 8002dd4:	fffeffff 	.word	0xfffeffff
 8002dd8:	feffffff 	.word	0xfeffffff
 8002ddc:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002de0:	f7fe fc6c 	bl	80016bc <HAL_GetTick>
 8002de4:	0002      	movs	r2, r0
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e02c      	b.n	8002e4c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002df2:	4b18      	ldr	r3, [pc, #96]	; (8002e54 <HAL_RCC_OscConfig+0x708>)
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	2380      	movs	r3, #128	; 0x80
 8002df8:	049b      	lsls	r3, r3, #18
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	d1f0      	bne.n	8002de0 <HAL_RCC_OscConfig+0x694>
 8002dfe:	e024      	b.n	8002e4a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d101      	bne.n	8002e0c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e01f      	b.n	8002e4c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002e0c:	4b11      	ldr	r3, [pc, #68]	; (8002e54 <HAL_RCC_OscConfig+0x708>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002e12:	4b10      	ldr	r3, [pc, #64]	; (8002e54 <HAL_RCC_OscConfig+0x708>)
 8002e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e16:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e18:	697a      	ldr	r2, [r7, #20]
 8002e1a:	23c0      	movs	r3, #192	; 0xc0
 8002e1c:	025b      	lsls	r3, r3, #9
 8002e1e:	401a      	ands	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d10e      	bne.n	8002e46 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	220f      	movs	r2, #15
 8002e2c:	401a      	ands	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d107      	bne.n	8002e46 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002e36:	697a      	ldr	r2, [r7, #20]
 8002e38:	23f0      	movs	r3, #240	; 0xf0
 8002e3a:	039b      	lsls	r3, r3, #14
 8002e3c:	401a      	ands	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d001      	beq.n	8002e4a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e000      	b.n	8002e4c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	0018      	movs	r0, r3
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	b008      	add	sp, #32
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	40021000 	.word	0x40021000

08002e58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d101      	bne.n	8002e6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e0bf      	b.n	8002fec <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e6c:	4b61      	ldr	r3, [pc, #388]	; (8002ff4 <HAL_RCC_ClockConfig+0x19c>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2201      	movs	r2, #1
 8002e72:	4013      	ands	r3, r2
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d911      	bls.n	8002e9e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e7a:	4b5e      	ldr	r3, [pc, #376]	; (8002ff4 <HAL_RCC_ClockConfig+0x19c>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	4393      	bics	r3, r2
 8002e82:	0019      	movs	r1, r3
 8002e84:	4b5b      	ldr	r3, [pc, #364]	; (8002ff4 <HAL_RCC_ClockConfig+0x19c>)
 8002e86:	683a      	ldr	r2, [r7, #0]
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e8c:	4b59      	ldr	r3, [pc, #356]	; (8002ff4 <HAL_RCC_ClockConfig+0x19c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2201      	movs	r2, #1
 8002e92:	4013      	ands	r3, r2
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d001      	beq.n	8002e9e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e0a6      	b.n	8002fec <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	d015      	beq.n	8002ed4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2204      	movs	r2, #4
 8002eae:	4013      	ands	r3, r2
 8002eb0:	d006      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002eb2:	4b51      	ldr	r3, [pc, #324]	; (8002ff8 <HAL_RCC_ClockConfig+0x1a0>)
 8002eb4:	685a      	ldr	r2, [r3, #4]
 8002eb6:	4b50      	ldr	r3, [pc, #320]	; (8002ff8 <HAL_RCC_ClockConfig+0x1a0>)
 8002eb8:	21e0      	movs	r1, #224	; 0xe0
 8002eba:	00c9      	lsls	r1, r1, #3
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ec0:	4b4d      	ldr	r3, [pc, #308]	; (8002ff8 <HAL_RCC_ClockConfig+0x1a0>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	22f0      	movs	r2, #240	; 0xf0
 8002ec6:	4393      	bics	r3, r2
 8002ec8:	0019      	movs	r1, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	689a      	ldr	r2, [r3, #8]
 8002ece:	4b4a      	ldr	r3, [pc, #296]	; (8002ff8 <HAL_RCC_ClockConfig+0x1a0>)
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	4013      	ands	r3, r2
 8002edc:	d04c      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d107      	bne.n	8002ef6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ee6:	4b44      	ldr	r3, [pc, #272]	; (8002ff8 <HAL_RCC_ClockConfig+0x1a0>)
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	2380      	movs	r3, #128	; 0x80
 8002eec:	029b      	lsls	r3, r3, #10
 8002eee:	4013      	ands	r3, r2
 8002ef0:	d120      	bne.n	8002f34 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e07a      	b.n	8002fec <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d107      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002efe:	4b3e      	ldr	r3, [pc, #248]	; (8002ff8 <HAL_RCC_ClockConfig+0x1a0>)
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	2380      	movs	r3, #128	; 0x80
 8002f04:	049b      	lsls	r3, r3, #18
 8002f06:	4013      	ands	r3, r2
 8002f08:	d114      	bne.n	8002f34 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e06e      	b.n	8002fec <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	2b03      	cmp	r3, #3
 8002f14:	d107      	bne.n	8002f26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002f16:	4b38      	ldr	r3, [pc, #224]	; (8002ff8 <HAL_RCC_ClockConfig+0x1a0>)
 8002f18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f1a:	2380      	movs	r3, #128	; 0x80
 8002f1c:	029b      	lsls	r3, r3, #10
 8002f1e:	4013      	ands	r3, r2
 8002f20:	d108      	bne.n	8002f34 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e062      	b.n	8002fec <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f26:	4b34      	ldr	r3, [pc, #208]	; (8002ff8 <HAL_RCC_ClockConfig+0x1a0>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2202      	movs	r2, #2
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	d101      	bne.n	8002f34 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e05b      	b.n	8002fec <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f34:	4b30      	ldr	r3, [pc, #192]	; (8002ff8 <HAL_RCC_ClockConfig+0x1a0>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	2203      	movs	r2, #3
 8002f3a:	4393      	bics	r3, r2
 8002f3c:	0019      	movs	r1, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685a      	ldr	r2, [r3, #4]
 8002f42:	4b2d      	ldr	r3, [pc, #180]	; (8002ff8 <HAL_RCC_ClockConfig+0x1a0>)
 8002f44:	430a      	orrs	r2, r1
 8002f46:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f48:	f7fe fbb8 	bl	80016bc <HAL_GetTick>
 8002f4c:	0003      	movs	r3, r0
 8002f4e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f50:	e009      	b.n	8002f66 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f52:	f7fe fbb3 	bl	80016bc <HAL_GetTick>
 8002f56:	0002      	movs	r2, r0
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	4a27      	ldr	r2, [pc, #156]	; (8002ffc <HAL_RCC_ClockConfig+0x1a4>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e042      	b.n	8002fec <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f66:	4b24      	ldr	r3, [pc, #144]	; (8002ff8 <HAL_RCC_ClockConfig+0x1a0>)
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	220c      	movs	r2, #12
 8002f6c:	401a      	ands	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d1ec      	bne.n	8002f52 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f78:	4b1e      	ldr	r3, [pc, #120]	; (8002ff4 <HAL_RCC_ClockConfig+0x19c>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	4013      	ands	r3, r2
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d211      	bcs.n	8002faa <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f86:	4b1b      	ldr	r3, [pc, #108]	; (8002ff4 <HAL_RCC_ClockConfig+0x19c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	4393      	bics	r3, r2
 8002f8e:	0019      	movs	r1, r3
 8002f90:	4b18      	ldr	r3, [pc, #96]	; (8002ff4 <HAL_RCC_ClockConfig+0x19c>)
 8002f92:	683a      	ldr	r2, [r7, #0]
 8002f94:	430a      	orrs	r2, r1
 8002f96:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f98:	4b16      	ldr	r3, [pc, #88]	; (8002ff4 <HAL_RCC_ClockConfig+0x19c>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	683a      	ldr	r2, [r7, #0]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d001      	beq.n	8002faa <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e020      	b.n	8002fec <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2204      	movs	r2, #4
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	d009      	beq.n	8002fc8 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002fb4:	4b10      	ldr	r3, [pc, #64]	; (8002ff8 <HAL_RCC_ClockConfig+0x1a0>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	4a11      	ldr	r2, [pc, #68]	; (8003000 <HAL_RCC_ClockConfig+0x1a8>)
 8002fba:	4013      	ands	r3, r2
 8002fbc:	0019      	movs	r1, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	68da      	ldr	r2, [r3, #12]
 8002fc2:	4b0d      	ldr	r3, [pc, #52]	; (8002ff8 <HAL_RCC_ClockConfig+0x1a0>)
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002fc8:	f000 f820 	bl	800300c <HAL_RCC_GetSysClockFreq>
 8002fcc:	0001      	movs	r1, r0
 8002fce:	4b0a      	ldr	r3, [pc, #40]	; (8002ff8 <HAL_RCC_ClockConfig+0x1a0>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	091b      	lsrs	r3, r3, #4
 8002fd4:	220f      	movs	r2, #15
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	4a0a      	ldr	r2, [pc, #40]	; (8003004 <HAL_RCC_ClockConfig+0x1ac>)
 8002fda:	5cd3      	ldrb	r3, [r2, r3]
 8002fdc:	000a      	movs	r2, r1
 8002fde:	40da      	lsrs	r2, r3
 8002fe0:	4b09      	ldr	r3, [pc, #36]	; (8003008 <HAL_RCC_ClockConfig+0x1b0>)
 8002fe2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002fe4:	2000      	movs	r0, #0
 8002fe6:	f7fe fb23 	bl	8001630 <HAL_InitTick>
  
  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	0018      	movs	r0, r3
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	b004      	add	sp, #16
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	40022000 	.word	0x40022000
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	00001388 	.word	0x00001388
 8003000:	fffff8ff 	.word	0xfffff8ff
 8003004:	08005970 	.word	0x08005970
 8003008:	20000000 	.word	0x20000000

0800300c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003012:	2300      	movs	r3, #0
 8003014:	60fb      	str	r3, [r7, #12]
 8003016:	2300      	movs	r3, #0
 8003018:	60bb      	str	r3, [r7, #8]
 800301a:	2300      	movs	r3, #0
 800301c:	617b      	str	r3, [r7, #20]
 800301e:	2300      	movs	r3, #0
 8003020:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003022:	2300      	movs	r3, #0
 8003024:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003026:	4b2d      	ldr	r3, [pc, #180]	; (80030dc <HAL_RCC_GetSysClockFreq+0xd0>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	220c      	movs	r2, #12
 8003030:	4013      	ands	r3, r2
 8003032:	2b0c      	cmp	r3, #12
 8003034:	d046      	beq.n	80030c4 <HAL_RCC_GetSysClockFreq+0xb8>
 8003036:	d848      	bhi.n	80030ca <HAL_RCC_GetSysClockFreq+0xbe>
 8003038:	2b04      	cmp	r3, #4
 800303a:	d002      	beq.n	8003042 <HAL_RCC_GetSysClockFreq+0x36>
 800303c:	2b08      	cmp	r3, #8
 800303e:	d003      	beq.n	8003048 <HAL_RCC_GetSysClockFreq+0x3c>
 8003040:	e043      	b.n	80030ca <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003042:	4b27      	ldr	r3, [pc, #156]	; (80030e0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003044:	613b      	str	r3, [r7, #16]
      break;
 8003046:	e043      	b.n	80030d0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	0c9b      	lsrs	r3, r3, #18
 800304c:	220f      	movs	r2, #15
 800304e:	4013      	ands	r3, r2
 8003050:	4a24      	ldr	r2, [pc, #144]	; (80030e4 <HAL_RCC_GetSysClockFreq+0xd8>)
 8003052:	5cd3      	ldrb	r3, [r2, r3]
 8003054:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003056:	4b21      	ldr	r3, [pc, #132]	; (80030dc <HAL_RCC_GetSysClockFreq+0xd0>)
 8003058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305a:	220f      	movs	r2, #15
 800305c:	4013      	ands	r3, r2
 800305e:	4a22      	ldr	r2, [pc, #136]	; (80030e8 <HAL_RCC_GetSysClockFreq+0xdc>)
 8003060:	5cd3      	ldrb	r3, [r2, r3]
 8003062:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	23c0      	movs	r3, #192	; 0xc0
 8003068:	025b      	lsls	r3, r3, #9
 800306a:	401a      	ands	r2, r3
 800306c:	2380      	movs	r3, #128	; 0x80
 800306e:	025b      	lsls	r3, r3, #9
 8003070:	429a      	cmp	r2, r3
 8003072:	d109      	bne.n	8003088 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003074:	68b9      	ldr	r1, [r7, #8]
 8003076:	481a      	ldr	r0, [pc, #104]	; (80030e0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003078:	f7fd f846 	bl	8000108 <__udivsi3>
 800307c:	0003      	movs	r3, r0
 800307e:	001a      	movs	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4353      	muls	r3, r2
 8003084:	617b      	str	r3, [r7, #20]
 8003086:	e01a      	b.n	80030be <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	23c0      	movs	r3, #192	; 0xc0
 800308c:	025b      	lsls	r3, r3, #9
 800308e:	401a      	ands	r2, r3
 8003090:	23c0      	movs	r3, #192	; 0xc0
 8003092:	025b      	lsls	r3, r3, #9
 8003094:	429a      	cmp	r2, r3
 8003096:	d109      	bne.n	80030ac <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003098:	68b9      	ldr	r1, [r7, #8]
 800309a:	4814      	ldr	r0, [pc, #80]	; (80030ec <HAL_RCC_GetSysClockFreq+0xe0>)
 800309c:	f7fd f834 	bl	8000108 <__udivsi3>
 80030a0:	0003      	movs	r3, r0
 80030a2:	001a      	movs	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4353      	muls	r3, r2
 80030a8:	617b      	str	r3, [r7, #20]
 80030aa:	e008      	b.n	80030be <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80030ac:	68b9      	ldr	r1, [r7, #8]
 80030ae:	480c      	ldr	r0, [pc, #48]	; (80030e0 <HAL_RCC_GetSysClockFreq+0xd4>)
 80030b0:	f7fd f82a 	bl	8000108 <__udivsi3>
 80030b4:	0003      	movs	r3, r0
 80030b6:	001a      	movs	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4353      	muls	r3, r2
 80030bc:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	613b      	str	r3, [r7, #16]
      break;
 80030c2:	e005      	b.n	80030d0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80030c4:	4b09      	ldr	r3, [pc, #36]	; (80030ec <HAL_RCC_GetSysClockFreq+0xe0>)
 80030c6:	613b      	str	r3, [r7, #16]
      break;
 80030c8:	e002      	b.n	80030d0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030ca:	4b05      	ldr	r3, [pc, #20]	; (80030e0 <HAL_RCC_GetSysClockFreq+0xd4>)
 80030cc:	613b      	str	r3, [r7, #16]
      break;
 80030ce:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80030d0:	693b      	ldr	r3, [r7, #16]
}
 80030d2:	0018      	movs	r0, r3
 80030d4:	46bd      	mov	sp, r7
 80030d6:	b006      	add	sp, #24
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	46c0      	nop			; (mov r8, r8)
 80030dc:	40021000 	.word	0x40021000
 80030e0:	007a1200 	.word	0x007a1200
 80030e4:	08005988 	.word	0x08005988
 80030e8:	08005998 	.word	0x08005998
 80030ec:	02dc6c00 	.word	0x02dc6c00

080030f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030f4:	4b02      	ldr	r3, [pc, #8]	; (8003100 <HAL_RCC_GetHCLKFreq+0x10>)
 80030f6:	681b      	ldr	r3, [r3, #0]
}
 80030f8:	0018      	movs	r0, r3
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	46c0      	nop			; (mov r8, r8)
 8003100:	20000000 	.word	0x20000000

08003104 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003108:	f7ff fff2 	bl	80030f0 <HAL_RCC_GetHCLKFreq>
 800310c:	0001      	movs	r1, r0
 800310e:	4b06      	ldr	r3, [pc, #24]	; (8003128 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	0a1b      	lsrs	r3, r3, #8
 8003114:	2207      	movs	r2, #7
 8003116:	4013      	ands	r3, r2
 8003118:	4a04      	ldr	r2, [pc, #16]	; (800312c <HAL_RCC_GetPCLK1Freq+0x28>)
 800311a:	5cd3      	ldrb	r3, [r2, r3]
 800311c:	40d9      	lsrs	r1, r3
 800311e:	000b      	movs	r3, r1
}    
 8003120:	0018      	movs	r0, r3
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	46c0      	nop			; (mov r8, r8)
 8003128:	40021000 	.word	0x40021000
 800312c:	08005980 	.word	0x08005980

08003130 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b086      	sub	sp, #24
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003138:	2300      	movs	r3, #0
 800313a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800313c:	2300      	movs	r3, #0
 800313e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	2380      	movs	r3, #128	; 0x80
 8003146:	025b      	lsls	r3, r3, #9
 8003148:	4013      	ands	r3, r2
 800314a:	d100      	bne.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800314c:	e08e      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800314e:	2017      	movs	r0, #23
 8003150:	183b      	adds	r3, r7, r0
 8003152:	2200      	movs	r2, #0
 8003154:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003156:	4b67      	ldr	r3, [pc, #412]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003158:	69da      	ldr	r2, [r3, #28]
 800315a:	2380      	movs	r3, #128	; 0x80
 800315c:	055b      	lsls	r3, r3, #21
 800315e:	4013      	ands	r3, r2
 8003160:	d110      	bne.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003162:	4b64      	ldr	r3, [pc, #400]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003164:	69da      	ldr	r2, [r3, #28]
 8003166:	4b63      	ldr	r3, [pc, #396]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003168:	2180      	movs	r1, #128	; 0x80
 800316a:	0549      	lsls	r1, r1, #21
 800316c:	430a      	orrs	r2, r1
 800316e:	61da      	str	r2, [r3, #28]
 8003170:	4b60      	ldr	r3, [pc, #384]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003172:	69da      	ldr	r2, [r3, #28]
 8003174:	2380      	movs	r3, #128	; 0x80
 8003176:	055b      	lsls	r3, r3, #21
 8003178:	4013      	ands	r3, r2
 800317a:	60bb      	str	r3, [r7, #8]
 800317c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800317e:	183b      	adds	r3, r7, r0
 8003180:	2201      	movs	r2, #1
 8003182:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003184:	4b5c      	ldr	r3, [pc, #368]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	2380      	movs	r3, #128	; 0x80
 800318a:	005b      	lsls	r3, r3, #1
 800318c:	4013      	ands	r3, r2
 800318e:	d11a      	bne.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003190:	4b59      	ldr	r3, [pc, #356]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	4b58      	ldr	r3, [pc, #352]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003196:	2180      	movs	r1, #128	; 0x80
 8003198:	0049      	lsls	r1, r1, #1
 800319a:	430a      	orrs	r2, r1
 800319c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800319e:	f7fe fa8d 	bl	80016bc <HAL_GetTick>
 80031a2:	0003      	movs	r3, r0
 80031a4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a6:	e008      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031a8:	f7fe fa88 	bl	80016bc <HAL_GetTick>
 80031ac:	0002      	movs	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b64      	cmp	r3, #100	; 0x64
 80031b4:	d901      	bls.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e097      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ba:	4b4f      	ldr	r3, [pc, #316]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	2380      	movs	r3, #128	; 0x80
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	4013      	ands	r3, r2
 80031c4:	d0f0      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031c6:	4b4b      	ldr	r3, [pc, #300]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80031c8:	6a1a      	ldr	r2, [r3, #32]
 80031ca:	23c0      	movs	r3, #192	; 0xc0
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	4013      	ands	r3, r2
 80031d0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d034      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685a      	ldr	r2, [r3, #4]
 80031dc:	23c0      	movs	r3, #192	; 0xc0
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	4013      	ands	r3, r2
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d02c      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031e8:	4b42      	ldr	r3, [pc, #264]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	4a43      	ldr	r2, [pc, #268]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80031ee:	4013      	ands	r3, r2
 80031f0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80031f2:	4b40      	ldr	r3, [pc, #256]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80031f4:	6a1a      	ldr	r2, [r3, #32]
 80031f6:	4b3f      	ldr	r3, [pc, #252]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80031f8:	2180      	movs	r1, #128	; 0x80
 80031fa:	0249      	lsls	r1, r1, #9
 80031fc:	430a      	orrs	r2, r1
 80031fe:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003200:	4b3c      	ldr	r3, [pc, #240]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003202:	6a1a      	ldr	r2, [r3, #32]
 8003204:	4b3b      	ldr	r3, [pc, #236]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003206:	493e      	ldr	r1, [pc, #248]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003208:	400a      	ands	r2, r1
 800320a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800320c:	4b39      	ldr	r3, [pc, #228]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2201      	movs	r2, #1
 8003216:	4013      	ands	r3, r2
 8003218:	d013      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321a:	f7fe fa4f 	bl	80016bc <HAL_GetTick>
 800321e:	0003      	movs	r3, r0
 8003220:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003222:	e009      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003224:	f7fe fa4a 	bl	80016bc <HAL_GetTick>
 8003228:	0002      	movs	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	4a35      	ldr	r2, [pc, #212]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d901      	bls.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e058      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003238:	4b2e      	ldr	r3, [pc, #184]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	2202      	movs	r2, #2
 800323e:	4013      	ands	r3, r2
 8003240:	d0f0      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003242:	4b2c      	ldr	r3, [pc, #176]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	4a2d      	ldr	r2, [pc, #180]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003248:	4013      	ands	r3, r2
 800324a:	0019      	movs	r1, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685a      	ldr	r2, [r3, #4]
 8003250:	4b28      	ldr	r3, [pc, #160]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003252:	430a      	orrs	r2, r1
 8003254:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003256:	2317      	movs	r3, #23
 8003258:	18fb      	adds	r3, r7, r3
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d105      	bne.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003260:	4b24      	ldr	r3, [pc, #144]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003262:	69da      	ldr	r2, [r3, #28]
 8003264:	4b23      	ldr	r3, [pc, #140]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003266:	4928      	ldr	r1, [pc, #160]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003268:	400a      	ands	r2, r1
 800326a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2201      	movs	r2, #1
 8003272:	4013      	ands	r3, r2
 8003274:	d009      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003276:	4b1f      	ldr	r3, [pc, #124]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327a:	2203      	movs	r2, #3
 800327c:	4393      	bics	r3, r2
 800327e:	0019      	movs	r1, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	4b1b      	ldr	r3, [pc, #108]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003286:	430a      	orrs	r2, r1
 8003288:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2220      	movs	r2, #32
 8003290:	4013      	ands	r3, r2
 8003292:	d009      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003294:	4b17      	ldr	r3, [pc, #92]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003298:	2210      	movs	r2, #16
 800329a:	4393      	bics	r3, r2
 800329c:	0019      	movs	r1, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	68da      	ldr	r2, [r3, #12]
 80032a2:	4b14      	ldr	r3, [pc, #80]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80032a4:	430a      	orrs	r2, r1
 80032a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	2380      	movs	r3, #128	; 0x80
 80032ae:	029b      	lsls	r3, r3, #10
 80032b0:	4013      	ands	r3, r2
 80032b2:	d009      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032b4:	4b0f      	ldr	r3, [pc, #60]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80032b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b8:	2280      	movs	r2, #128	; 0x80
 80032ba:	4393      	bics	r3, r2
 80032bc:	0019      	movs	r1, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	695a      	ldr	r2, [r3, #20]
 80032c2:	4b0c      	ldr	r3, [pc, #48]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80032c4:	430a      	orrs	r2, r1
 80032c6:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	2380      	movs	r3, #128	; 0x80
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	4013      	ands	r3, r2
 80032d2:	d009      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80032d4:	4b07      	ldr	r3, [pc, #28]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80032d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d8:	2240      	movs	r2, #64	; 0x40
 80032da:	4393      	bics	r3, r2
 80032dc:	0019      	movs	r1, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	691a      	ldr	r2, [r3, #16]
 80032e2:	4b04      	ldr	r3, [pc, #16]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80032e4:	430a      	orrs	r2, r1
 80032e6:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	0018      	movs	r0, r3
 80032ec:	46bd      	mov	sp, r7
 80032ee:	b006      	add	sp, #24
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	46c0      	nop			; (mov r8, r8)
 80032f4:	40021000 	.word	0x40021000
 80032f8:	40007000 	.word	0x40007000
 80032fc:	fffffcff 	.word	0xfffffcff
 8003300:	fffeffff 	.word	0xfffeffff
 8003304:	00001388 	.word	0x00001388
 8003308:	efffffff 	.word	0xefffffff

0800330c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e042      	b.n	80033a4 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	223d      	movs	r2, #61	; 0x3d
 8003322:	5c9b      	ldrb	r3, [r3, r2]
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d107      	bne.n	800333a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	223c      	movs	r2, #60	; 0x3c
 800332e:	2100      	movs	r1, #0
 8003330:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	0018      	movs	r0, r3
 8003336:	f7fd ff8f 	bl	8001258 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	223d      	movs	r2, #61	; 0x3d
 800333e:	2102      	movs	r1, #2
 8003340:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	3304      	adds	r3, #4
 800334a:	0019      	movs	r1, r3
 800334c:	0010      	movs	r0, r2
 800334e:	f000 fcb5 	bl	8003cbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2246      	movs	r2, #70	; 0x46
 8003356:	2101      	movs	r1, #1
 8003358:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	223e      	movs	r2, #62	; 0x3e
 800335e:	2101      	movs	r1, #1
 8003360:	5499      	strb	r1, [r3, r2]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	223f      	movs	r2, #63	; 0x3f
 8003366:	2101      	movs	r1, #1
 8003368:	5499      	strb	r1, [r3, r2]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2240      	movs	r2, #64	; 0x40
 800336e:	2101      	movs	r1, #1
 8003370:	5499      	strb	r1, [r3, r2]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2241      	movs	r2, #65	; 0x41
 8003376:	2101      	movs	r1, #1
 8003378:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2242      	movs	r2, #66	; 0x42
 800337e:	2101      	movs	r1, #1
 8003380:	5499      	strb	r1, [r3, r2]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2243      	movs	r2, #67	; 0x43
 8003386:	2101      	movs	r1, #1
 8003388:	5499      	strb	r1, [r3, r2]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2244      	movs	r2, #68	; 0x44
 800338e:	2101      	movs	r1, #1
 8003390:	5499      	strb	r1, [r3, r2]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2245      	movs	r2, #69	; 0x45
 8003396:	2101      	movs	r1, #1
 8003398:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	223d      	movs	r2, #61	; 0x3d
 800339e:	2101      	movs	r1, #1
 80033a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	0018      	movs	r0, r3
 80033a6:	46bd      	mov	sp, r7
 80033a8:	b002      	add	sp, #8
 80033aa:	bd80      	pop	{r7, pc}

080033ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e042      	b.n	8003444 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	223d      	movs	r2, #61	; 0x3d
 80033c2:	5c9b      	ldrb	r3, [r3, r2]
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d107      	bne.n	80033da <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	223c      	movs	r2, #60	; 0x3c
 80033ce:	2100      	movs	r1, #0
 80033d0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	0018      	movs	r0, r3
 80033d6:	f000 f839 	bl	800344c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	223d      	movs	r2, #61	; 0x3d
 80033de:	2102      	movs	r1, #2
 80033e0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	3304      	adds	r3, #4
 80033ea:	0019      	movs	r1, r3
 80033ec:	0010      	movs	r0, r2
 80033ee:	f000 fc65 	bl	8003cbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2246      	movs	r2, #70	; 0x46
 80033f6:	2101      	movs	r1, #1
 80033f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	223e      	movs	r2, #62	; 0x3e
 80033fe:	2101      	movs	r1, #1
 8003400:	5499      	strb	r1, [r3, r2]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	223f      	movs	r2, #63	; 0x3f
 8003406:	2101      	movs	r1, #1
 8003408:	5499      	strb	r1, [r3, r2]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2240      	movs	r2, #64	; 0x40
 800340e:	2101      	movs	r1, #1
 8003410:	5499      	strb	r1, [r3, r2]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2241      	movs	r2, #65	; 0x41
 8003416:	2101      	movs	r1, #1
 8003418:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2242      	movs	r2, #66	; 0x42
 800341e:	2101      	movs	r1, #1
 8003420:	5499      	strb	r1, [r3, r2]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2243      	movs	r2, #67	; 0x43
 8003426:	2101      	movs	r1, #1
 8003428:	5499      	strb	r1, [r3, r2]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2244      	movs	r2, #68	; 0x44
 800342e:	2101      	movs	r1, #1
 8003430:	5499      	strb	r1, [r3, r2]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2245      	movs	r2, #69	; 0x45
 8003436:	2101      	movs	r1, #1
 8003438:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	223d      	movs	r2, #61	; 0x3d
 800343e:	2101      	movs	r1, #1
 8003440:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	0018      	movs	r0, r3
 8003446:	46bd      	mov	sp, r7
 8003448:	b002      	add	sp, #8
 800344a:	bd80      	pop	{r7, pc}

0800344c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003454:	46c0      	nop			; (mov r8, r8)
 8003456:	46bd      	mov	sp, r7
 8003458:	b002      	add	sp, #8
 800345a:	bd80      	pop	{r7, pc}

0800345c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b086      	sub	sp, #24
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
 8003468:	001a      	movs	r2, r3
 800346a:	1cbb      	adds	r3, r7, #2
 800346c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800346e:	2317      	movs	r3, #23
 8003470:	18fb      	adds	r3, r7, r3
 8003472:	2200      	movs	r2, #0
 8003474:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d108      	bne.n	800348e <HAL_TIM_PWM_Start_DMA+0x32>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	223e      	movs	r2, #62	; 0x3e
 8003480:	5c9b      	ldrb	r3, [r3, r2]
 8003482:	b2db      	uxtb	r3, r3
 8003484:	3b02      	subs	r3, #2
 8003486:	425a      	negs	r2, r3
 8003488:	4153      	adcs	r3, r2
 800348a:	b2db      	uxtb	r3, r3
 800348c:	e01f      	b.n	80034ce <HAL_TIM_PWM_Start_DMA+0x72>
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	2b04      	cmp	r3, #4
 8003492:	d108      	bne.n	80034a6 <HAL_TIM_PWM_Start_DMA+0x4a>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	223f      	movs	r2, #63	; 0x3f
 8003498:	5c9b      	ldrb	r3, [r3, r2]
 800349a:	b2db      	uxtb	r3, r3
 800349c:	3b02      	subs	r3, #2
 800349e:	425a      	negs	r2, r3
 80034a0:	4153      	adcs	r3, r2
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	e013      	b.n	80034ce <HAL_TIM_PWM_Start_DMA+0x72>
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	2b08      	cmp	r3, #8
 80034aa:	d108      	bne.n	80034be <HAL_TIM_PWM_Start_DMA+0x62>
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2240      	movs	r2, #64	; 0x40
 80034b0:	5c9b      	ldrb	r3, [r3, r2]
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	3b02      	subs	r3, #2
 80034b6:	425a      	negs	r2, r3
 80034b8:	4153      	adcs	r3, r2
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	e007      	b.n	80034ce <HAL_TIM_PWM_Start_DMA+0x72>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2241      	movs	r2, #65	; 0x41
 80034c2:	5c9b      	ldrb	r3, [r3, r2]
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	3b02      	subs	r3, #2
 80034c8:	425a      	negs	r2, r3
 80034ca:	4153      	adcs	r3, r2
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80034d2:	2302      	movs	r3, #2
 80034d4:	e15a      	b.n	800378c <HAL_TIM_PWM_Start_DMA+0x330>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d108      	bne.n	80034ee <HAL_TIM_PWM_Start_DMA+0x92>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	223e      	movs	r2, #62	; 0x3e
 80034e0:	5c9b      	ldrb	r3, [r3, r2]
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	3b01      	subs	r3, #1
 80034e6:	425a      	negs	r2, r3
 80034e8:	4153      	adcs	r3, r2
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	e01f      	b.n	800352e <HAL_TIM_PWM_Start_DMA+0xd2>
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	2b04      	cmp	r3, #4
 80034f2:	d108      	bne.n	8003506 <HAL_TIM_PWM_Start_DMA+0xaa>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	223f      	movs	r2, #63	; 0x3f
 80034f8:	5c9b      	ldrb	r3, [r3, r2]
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	3b01      	subs	r3, #1
 80034fe:	425a      	negs	r2, r3
 8003500:	4153      	adcs	r3, r2
 8003502:	b2db      	uxtb	r3, r3
 8003504:	e013      	b.n	800352e <HAL_TIM_PWM_Start_DMA+0xd2>
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	2b08      	cmp	r3, #8
 800350a:	d108      	bne.n	800351e <HAL_TIM_PWM_Start_DMA+0xc2>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2240      	movs	r2, #64	; 0x40
 8003510:	5c9b      	ldrb	r3, [r3, r2]
 8003512:	b2db      	uxtb	r3, r3
 8003514:	3b01      	subs	r3, #1
 8003516:	425a      	negs	r2, r3
 8003518:	4153      	adcs	r3, r2
 800351a:	b2db      	uxtb	r3, r3
 800351c:	e007      	b.n	800352e <HAL_TIM_PWM_Start_DMA+0xd2>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2241      	movs	r2, #65	; 0x41
 8003522:	5c9b      	ldrb	r3, [r3, r2]
 8003524:	b2db      	uxtb	r3, r3
 8003526:	3b01      	subs	r3, #1
 8003528:	425a      	negs	r2, r3
 800352a:	4153      	adcs	r3, r2
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b00      	cmp	r3, #0
 8003530:	d025      	beq.n	800357e <HAL_TIM_PWM_Start_DMA+0x122>
  {
    if ((pData == NULL) || (Length == 0U))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d003      	beq.n	8003540 <HAL_TIM_PWM_Start_DMA+0xe4>
 8003538:	1cbb      	adds	r3, r7, #2
 800353a:	881b      	ldrh	r3, [r3, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d101      	bne.n	8003544 <HAL_TIM_PWM_Start_DMA+0xe8>
    {
      return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e123      	b.n	800378c <HAL_TIM_PWM_Start_DMA+0x330>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d104      	bne.n	8003554 <HAL_TIM_PWM_Start_DMA+0xf8>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	223e      	movs	r2, #62	; 0x3e
 800354e:	2102      	movs	r1, #2
 8003550:	5499      	strb	r1, [r3, r2]
 8003552:	e016      	b.n	8003582 <HAL_TIM_PWM_Start_DMA+0x126>
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	2b04      	cmp	r3, #4
 8003558:	d104      	bne.n	8003564 <HAL_TIM_PWM_Start_DMA+0x108>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	223f      	movs	r2, #63	; 0x3f
 800355e:	2102      	movs	r1, #2
 8003560:	5499      	strb	r1, [r3, r2]
 8003562:	e00e      	b.n	8003582 <HAL_TIM_PWM_Start_DMA+0x126>
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	2b08      	cmp	r3, #8
 8003568:	d104      	bne.n	8003574 <HAL_TIM_PWM_Start_DMA+0x118>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2240      	movs	r2, #64	; 0x40
 800356e:	2102      	movs	r1, #2
 8003570:	5499      	strb	r1, [r3, r2]
 8003572:	e006      	b.n	8003582 <HAL_TIM_PWM_Start_DMA+0x126>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2241      	movs	r2, #65	; 0x41
 8003578:	2102      	movs	r1, #2
 800357a:	5499      	strb	r1, [r3, r2]
 800357c:	e001      	b.n	8003582 <HAL_TIM_PWM_Start_DMA+0x126>
    }
  }
  else
  {
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e104      	b.n	800378c <HAL_TIM_PWM_Start_DMA+0x330>
  }

  switch (Channel)
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	2b0c      	cmp	r3, #12
 8003586:	d100      	bne.n	800358a <HAL_TIM_PWM_Start_DMA+0x12e>
 8003588:	e080      	b.n	800368c <HAL_TIM_PWM_Start_DMA+0x230>
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	2b0c      	cmp	r3, #12
 800358e:	d900      	bls.n	8003592 <HAL_TIM_PWM_Start_DMA+0x136>
 8003590:	e0a1      	b.n	80036d6 <HAL_TIM_PWM_Start_DMA+0x27a>
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	2b08      	cmp	r3, #8
 8003596:	d054      	beq.n	8003642 <HAL_TIM_PWM_Start_DMA+0x1e6>
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	2b08      	cmp	r3, #8
 800359c:	d900      	bls.n	80035a0 <HAL_TIM_PWM_Start_DMA+0x144>
 800359e:	e09a      	b.n	80036d6 <HAL_TIM_PWM_Start_DMA+0x27a>
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d003      	beq.n	80035ae <HAL_TIM_PWM_Start_DMA+0x152>
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	2b04      	cmp	r3, #4
 80035aa:	d025      	beq.n	80035f8 <HAL_TIM_PWM_Start_DMA+0x19c>
 80035ac:	e093      	b.n	80036d6 <HAL_TIM_PWM_Start_DMA+0x27a>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b2:	4a78      	ldr	r2, [pc, #480]	; (8003794 <HAL_TIM_PWM_Start_DMA+0x338>)
 80035b4:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ba:	4a77      	ldr	r2, [pc, #476]	; (8003798 <HAL_TIM_PWM_Start_DMA+0x33c>)
 80035bc:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c2:	4a76      	ldr	r2, [pc, #472]	; (800379c <HAL_TIM_PWM_Start_DMA+0x340>)
 80035c4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80035ca:	6879      	ldr	r1, [r7, #4]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	3334      	adds	r3, #52	; 0x34
 80035d2:	001a      	movs	r2, r3
 80035d4:	1cbb      	adds	r3, r7, #2
 80035d6:	881b      	ldrh	r3, [r3, #0]
 80035d8:	f7fe fd82 	bl	80020e0 <HAL_DMA_Start_IT>
 80035dc:	1e03      	subs	r3, r0, #0
 80035de:	d001      	beq.n	80035e4 <HAL_TIM_PWM_Start_DMA+0x188>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e0d3      	b.n	800378c <HAL_TIM_PWM_Start_DMA+0x330>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68da      	ldr	r2, [r3, #12]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2180      	movs	r1, #128	; 0x80
 80035f0:	0089      	lsls	r1, r1, #2
 80035f2:	430a      	orrs	r2, r1
 80035f4:	60da      	str	r2, [r3, #12]
      break;
 80035f6:	e073      	b.n	80036e0 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fc:	4a65      	ldr	r2, [pc, #404]	; (8003794 <HAL_TIM_PWM_Start_DMA+0x338>)
 80035fe:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003604:	4a64      	ldr	r2, [pc, #400]	; (8003798 <HAL_TIM_PWM_Start_DMA+0x33c>)
 8003606:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360c:	4a63      	ldr	r2, [pc, #396]	; (800379c <HAL_TIM_PWM_Start_DMA+0x340>)
 800360e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003614:	6879      	ldr	r1, [r7, #4]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	3338      	adds	r3, #56	; 0x38
 800361c:	001a      	movs	r2, r3
 800361e:	1cbb      	adds	r3, r7, #2
 8003620:	881b      	ldrh	r3, [r3, #0]
 8003622:	f7fe fd5d 	bl	80020e0 <HAL_DMA_Start_IT>
 8003626:	1e03      	subs	r3, r0, #0
 8003628:	d001      	beq.n	800362e <HAL_TIM_PWM_Start_DMA+0x1d2>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e0ae      	b.n	800378c <HAL_TIM_PWM_Start_DMA+0x330>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68da      	ldr	r2, [r3, #12]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2180      	movs	r1, #128	; 0x80
 800363a:	00c9      	lsls	r1, r1, #3
 800363c:	430a      	orrs	r2, r1
 800363e:	60da      	str	r2, [r3, #12]
      break;
 8003640:	e04e      	b.n	80036e0 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003646:	4a53      	ldr	r2, [pc, #332]	; (8003794 <HAL_TIM_PWM_Start_DMA+0x338>)
 8003648:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364e:	4a52      	ldr	r2, [pc, #328]	; (8003798 <HAL_TIM_PWM_Start_DMA+0x33c>)
 8003650:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003656:	4a51      	ldr	r2, [pc, #324]	; (800379c <HAL_TIM_PWM_Start_DMA+0x340>)
 8003658:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800365e:	6879      	ldr	r1, [r7, #4]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	333c      	adds	r3, #60	; 0x3c
 8003666:	001a      	movs	r2, r3
 8003668:	1cbb      	adds	r3, r7, #2
 800366a:	881b      	ldrh	r3, [r3, #0]
 800366c:	f7fe fd38 	bl	80020e0 <HAL_DMA_Start_IT>
 8003670:	1e03      	subs	r3, r0, #0
 8003672:	d001      	beq.n	8003678 <HAL_TIM_PWM_Start_DMA+0x21c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e089      	b.n	800378c <HAL_TIM_PWM_Start_DMA+0x330>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68da      	ldr	r2, [r3, #12]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2180      	movs	r1, #128	; 0x80
 8003684:	0109      	lsls	r1, r1, #4
 8003686:	430a      	orrs	r2, r1
 8003688:	60da      	str	r2, [r3, #12]
      break;
 800368a:	e029      	b.n	80036e0 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003690:	4a40      	ldr	r2, [pc, #256]	; (8003794 <HAL_TIM_PWM_Start_DMA+0x338>)
 8003692:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003698:	4a3f      	ldr	r2, [pc, #252]	; (8003798 <HAL_TIM_PWM_Start_DMA+0x33c>)
 800369a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a0:	4a3e      	ldr	r2, [pc, #248]	; (800379c <HAL_TIM_PWM_Start_DMA+0x340>)
 80036a2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80036a8:	6879      	ldr	r1, [r7, #4]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	3340      	adds	r3, #64	; 0x40
 80036b0:	001a      	movs	r2, r3
 80036b2:	1cbb      	adds	r3, r7, #2
 80036b4:	881b      	ldrh	r3, [r3, #0]
 80036b6:	f7fe fd13 	bl	80020e0 <HAL_DMA_Start_IT>
 80036ba:	1e03      	subs	r3, r0, #0
 80036bc:	d001      	beq.n	80036c2 <HAL_TIM_PWM_Start_DMA+0x266>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e064      	b.n	800378c <HAL_TIM_PWM_Start_DMA+0x330>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68da      	ldr	r2, [r3, #12]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2180      	movs	r1, #128	; 0x80
 80036ce:	0149      	lsls	r1, r1, #5
 80036d0:	430a      	orrs	r2, r1
 80036d2:	60da      	str	r2, [r3, #12]
      break;
 80036d4:	e004      	b.n	80036e0 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    default:
      status = HAL_ERROR;
 80036d6:	2317      	movs	r3, #23
 80036d8:	18fb      	adds	r3, r7, r3
 80036da:	2201      	movs	r2, #1
 80036dc:	701a      	strb	r2, [r3, #0]
      break;
 80036de:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 80036e0:	2317      	movs	r3, #23
 80036e2:	18fb      	adds	r3, r7, r3
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d14d      	bne.n	8003786 <HAL_TIM_PWM_Start_DMA+0x32a>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68b9      	ldr	r1, [r7, #8]
 80036f0:	2201      	movs	r2, #1
 80036f2:	0018      	movs	r0, r3
 80036f4:	f000 fdd2 	bl	800429c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a28      	ldr	r2, [pc, #160]	; (80037a0 <HAL_TIM_PWM_Start_DMA+0x344>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d009      	beq.n	8003716 <HAL_TIM_PWM_Start_DMA+0x2ba>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a27      	ldr	r2, [pc, #156]	; (80037a4 <HAL_TIM_PWM_Start_DMA+0x348>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d004      	beq.n	8003716 <HAL_TIM_PWM_Start_DMA+0x2ba>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a25      	ldr	r2, [pc, #148]	; (80037a8 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d101      	bne.n	800371a <HAL_TIM_PWM_Start_DMA+0x2be>
 8003716:	2301      	movs	r3, #1
 8003718:	e000      	b.n	800371c <HAL_TIM_PWM_Start_DMA+0x2c0>
 800371a:	2300      	movs	r3, #0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d008      	beq.n	8003732 <HAL_TIM_PWM_Start_DMA+0x2d6>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2180      	movs	r1, #128	; 0x80
 800372c:	0209      	lsls	r1, r1, #8
 800372e:	430a      	orrs	r2, r1
 8003730:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a1a      	ldr	r2, [pc, #104]	; (80037a0 <HAL_TIM_PWM_Start_DMA+0x344>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d00a      	beq.n	8003752 <HAL_TIM_PWM_Start_DMA+0x2f6>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	2380      	movs	r3, #128	; 0x80
 8003742:	05db      	lsls	r3, r3, #23
 8003744:	429a      	cmp	r2, r3
 8003746:	d004      	beq.n	8003752 <HAL_TIM_PWM_Start_DMA+0x2f6>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a17      	ldr	r2, [pc, #92]	; (80037ac <HAL_TIM_PWM_Start_DMA+0x350>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d111      	bne.n	8003776 <HAL_TIM_PWM_Start_DMA+0x31a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	2207      	movs	r2, #7
 800375a:	4013      	ands	r3, r2
 800375c:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	2b06      	cmp	r3, #6
 8003762:	d010      	beq.n	8003786 <HAL_TIM_PWM_Start_DMA+0x32a>
      {
        __HAL_TIM_ENABLE(htim);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2101      	movs	r1, #1
 8003770:	430a      	orrs	r2, r1
 8003772:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003774:	e007      	b.n	8003786 <HAL_TIM_PWM_Start_DMA+0x32a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2101      	movs	r1, #1
 8003782:	430a      	orrs	r2, r1
 8003784:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003786:	2317      	movs	r3, #23
 8003788:	18fb      	adds	r3, r7, r3
 800378a:	781b      	ldrb	r3, [r3, #0]
}
 800378c:	0018      	movs	r0, r3
 800378e:	46bd      	mov	sp, r7
 8003790:	b006      	add	sp, #24
 8003792:	bd80      	pop	{r7, pc}
 8003794:	08003ba9 	.word	0x08003ba9
 8003798:	08003c53 	.word	0x08003c53
 800379c:	08003b15 	.word	0x08003b15
 80037a0:	40012c00 	.word	0x40012c00
 80037a4:	40014400 	.word	0x40014400
 80037a8:	40014800 	.word	0x40014800
 80037ac:	40000400 	.word	0x40000400

080037b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037bc:	2317      	movs	r3, #23
 80037be:	18fb      	adds	r3, r7, r3
 80037c0:	2200      	movs	r2, #0
 80037c2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	223c      	movs	r2, #60	; 0x3c
 80037c8:	5c9b      	ldrb	r3, [r3, r2]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d101      	bne.n	80037d2 <HAL_TIM_PWM_ConfigChannel+0x22>
 80037ce:	2302      	movs	r3, #2
 80037d0:	e0ad      	b.n	800392e <HAL_TIM_PWM_ConfigChannel+0x17e>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	223c      	movs	r2, #60	; 0x3c
 80037d6:	2101      	movs	r1, #1
 80037d8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2b0c      	cmp	r3, #12
 80037de:	d100      	bne.n	80037e2 <HAL_TIM_PWM_ConfigChannel+0x32>
 80037e0:	e076      	b.n	80038d0 <HAL_TIM_PWM_ConfigChannel+0x120>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2b0c      	cmp	r3, #12
 80037e6:	d900      	bls.n	80037ea <HAL_TIM_PWM_ConfigChannel+0x3a>
 80037e8:	e095      	b.n	8003916 <HAL_TIM_PWM_ConfigChannel+0x166>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2b08      	cmp	r3, #8
 80037ee:	d04e      	beq.n	800388e <HAL_TIM_PWM_ConfigChannel+0xde>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2b08      	cmp	r3, #8
 80037f4:	d900      	bls.n	80037f8 <HAL_TIM_PWM_ConfigChannel+0x48>
 80037f6:	e08e      	b.n	8003916 <HAL_TIM_PWM_ConfigChannel+0x166>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <HAL_TIM_PWM_ConfigChannel+0x56>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2b04      	cmp	r3, #4
 8003802:	d021      	beq.n	8003848 <HAL_TIM_PWM_ConfigChannel+0x98>
 8003804:	e087      	b.n	8003916 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68ba      	ldr	r2, [r7, #8]
 800380c:	0011      	movs	r1, r2
 800380e:	0018      	movs	r0, r3
 8003810:	f000 faca 	bl	8003da8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	699a      	ldr	r2, [r3, #24]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2108      	movs	r1, #8
 8003820:	430a      	orrs	r2, r1
 8003822:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	699a      	ldr	r2, [r3, #24]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2104      	movs	r1, #4
 8003830:	438a      	bics	r2, r1
 8003832:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6999      	ldr	r1, [r3, #24]
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	691a      	ldr	r2, [r3, #16]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	430a      	orrs	r2, r1
 8003844:	619a      	str	r2, [r3, #24]
      break;
 8003846:	e06b      	b.n	8003920 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68ba      	ldr	r2, [r7, #8]
 800384e:	0011      	movs	r1, r2
 8003850:	0018      	movs	r0, r3
 8003852:	f000 fb27 	bl	8003ea4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	699a      	ldr	r2, [r3, #24]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2180      	movs	r1, #128	; 0x80
 8003862:	0109      	lsls	r1, r1, #4
 8003864:	430a      	orrs	r2, r1
 8003866:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	699a      	ldr	r2, [r3, #24]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4931      	ldr	r1, [pc, #196]	; (8003938 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003874:	400a      	ands	r2, r1
 8003876:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	6999      	ldr	r1, [r3, #24]
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	021a      	lsls	r2, r3, #8
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	430a      	orrs	r2, r1
 800388a:	619a      	str	r2, [r3, #24]
      break;
 800388c:	e048      	b.n	8003920 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68ba      	ldr	r2, [r7, #8]
 8003894:	0011      	movs	r1, r2
 8003896:	0018      	movs	r0, r3
 8003898:	f000 fb82 	bl	8003fa0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	69da      	ldr	r2, [r3, #28]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2108      	movs	r1, #8
 80038a8:	430a      	orrs	r2, r1
 80038aa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	69da      	ldr	r2, [r3, #28]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2104      	movs	r1, #4
 80038b8:	438a      	bics	r2, r1
 80038ba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	69d9      	ldr	r1, [r3, #28]
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	691a      	ldr	r2, [r3, #16]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	430a      	orrs	r2, r1
 80038cc:	61da      	str	r2, [r3, #28]
      break;
 80038ce:	e027      	b.n	8003920 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68ba      	ldr	r2, [r7, #8]
 80038d6:	0011      	movs	r1, r2
 80038d8:	0018      	movs	r0, r3
 80038da:	f000 fbe1 	bl	80040a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	69da      	ldr	r2, [r3, #28]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2180      	movs	r1, #128	; 0x80
 80038ea:	0109      	lsls	r1, r1, #4
 80038ec:	430a      	orrs	r2, r1
 80038ee:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	69da      	ldr	r2, [r3, #28]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	490f      	ldr	r1, [pc, #60]	; (8003938 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80038fc:	400a      	ands	r2, r1
 80038fe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	69d9      	ldr	r1, [r3, #28]
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	021a      	lsls	r2, r3, #8
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	430a      	orrs	r2, r1
 8003912:	61da      	str	r2, [r3, #28]
      break;
 8003914:	e004      	b.n	8003920 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8003916:	2317      	movs	r3, #23
 8003918:	18fb      	adds	r3, r7, r3
 800391a:	2201      	movs	r2, #1
 800391c:	701a      	strb	r2, [r3, #0]
      break;
 800391e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	223c      	movs	r2, #60	; 0x3c
 8003924:	2100      	movs	r1, #0
 8003926:	5499      	strb	r1, [r3, r2]

  return status;
 8003928:	2317      	movs	r3, #23
 800392a:	18fb      	adds	r3, r7, r3
 800392c:	781b      	ldrb	r3, [r3, #0]
}
 800392e:	0018      	movs	r0, r3
 8003930:	46bd      	mov	sp, r7
 8003932:	b006      	add	sp, #24
 8003934:	bd80      	pop	{r7, pc}
 8003936:	46c0      	nop			; (mov r8, r8)
 8003938:	fffffbff 	.word	0xfffffbff

0800393c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003946:	230f      	movs	r3, #15
 8003948:	18fb      	adds	r3, r7, r3
 800394a:	2200      	movs	r2, #0
 800394c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	223c      	movs	r2, #60	; 0x3c
 8003952:	5c9b      	ldrb	r3, [r3, r2]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d101      	bne.n	800395c <HAL_TIM_ConfigClockSource+0x20>
 8003958:	2302      	movs	r3, #2
 800395a:	e0bc      	b.n	8003ad6 <HAL_TIM_ConfigClockSource+0x19a>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	223c      	movs	r2, #60	; 0x3c
 8003960:	2101      	movs	r1, #1
 8003962:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	223d      	movs	r2, #61	; 0x3d
 8003968:	2102      	movs	r1, #2
 800396a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	2277      	movs	r2, #119	; 0x77
 8003978:	4393      	bics	r3, r2
 800397a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	4a58      	ldr	r2, [pc, #352]	; (8003ae0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003980:	4013      	ands	r3, r2
 8003982:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68ba      	ldr	r2, [r7, #8]
 800398a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2280      	movs	r2, #128	; 0x80
 8003992:	0192      	lsls	r2, r2, #6
 8003994:	4293      	cmp	r3, r2
 8003996:	d040      	beq.n	8003a1a <HAL_TIM_ConfigClockSource+0xde>
 8003998:	2280      	movs	r2, #128	; 0x80
 800399a:	0192      	lsls	r2, r2, #6
 800399c:	4293      	cmp	r3, r2
 800399e:	d900      	bls.n	80039a2 <HAL_TIM_ConfigClockSource+0x66>
 80039a0:	e088      	b.n	8003ab4 <HAL_TIM_ConfigClockSource+0x178>
 80039a2:	2280      	movs	r2, #128	; 0x80
 80039a4:	0152      	lsls	r2, r2, #5
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d100      	bne.n	80039ac <HAL_TIM_ConfigClockSource+0x70>
 80039aa:	e088      	b.n	8003abe <HAL_TIM_ConfigClockSource+0x182>
 80039ac:	2280      	movs	r2, #128	; 0x80
 80039ae:	0152      	lsls	r2, r2, #5
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d900      	bls.n	80039b6 <HAL_TIM_ConfigClockSource+0x7a>
 80039b4:	e07e      	b.n	8003ab4 <HAL_TIM_ConfigClockSource+0x178>
 80039b6:	2b70      	cmp	r3, #112	; 0x70
 80039b8:	d018      	beq.n	80039ec <HAL_TIM_ConfigClockSource+0xb0>
 80039ba:	d900      	bls.n	80039be <HAL_TIM_ConfigClockSource+0x82>
 80039bc:	e07a      	b.n	8003ab4 <HAL_TIM_ConfigClockSource+0x178>
 80039be:	2b60      	cmp	r3, #96	; 0x60
 80039c0:	d04f      	beq.n	8003a62 <HAL_TIM_ConfigClockSource+0x126>
 80039c2:	d900      	bls.n	80039c6 <HAL_TIM_ConfigClockSource+0x8a>
 80039c4:	e076      	b.n	8003ab4 <HAL_TIM_ConfigClockSource+0x178>
 80039c6:	2b50      	cmp	r3, #80	; 0x50
 80039c8:	d03b      	beq.n	8003a42 <HAL_TIM_ConfigClockSource+0x106>
 80039ca:	d900      	bls.n	80039ce <HAL_TIM_ConfigClockSource+0x92>
 80039cc:	e072      	b.n	8003ab4 <HAL_TIM_ConfigClockSource+0x178>
 80039ce:	2b40      	cmp	r3, #64	; 0x40
 80039d0:	d057      	beq.n	8003a82 <HAL_TIM_ConfigClockSource+0x146>
 80039d2:	d900      	bls.n	80039d6 <HAL_TIM_ConfigClockSource+0x9a>
 80039d4:	e06e      	b.n	8003ab4 <HAL_TIM_ConfigClockSource+0x178>
 80039d6:	2b30      	cmp	r3, #48	; 0x30
 80039d8:	d063      	beq.n	8003aa2 <HAL_TIM_ConfigClockSource+0x166>
 80039da:	d86b      	bhi.n	8003ab4 <HAL_TIM_ConfigClockSource+0x178>
 80039dc:	2b20      	cmp	r3, #32
 80039de:	d060      	beq.n	8003aa2 <HAL_TIM_ConfigClockSource+0x166>
 80039e0:	d868      	bhi.n	8003ab4 <HAL_TIM_ConfigClockSource+0x178>
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d05d      	beq.n	8003aa2 <HAL_TIM_ConfigClockSource+0x166>
 80039e6:	2b10      	cmp	r3, #16
 80039e8:	d05b      	beq.n	8003aa2 <HAL_TIM_ConfigClockSource+0x166>
 80039ea:	e063      	b.n	8003ab4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6818      	ldr	r0, [r3, #0]
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	6899      	ldr	r1, [r3, #8]
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	f000 fc2e 	bl	800425c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	2277      	movs	r2, #119	; 0x77
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68ba      	ldr	r2, [r7, #8]
 8003a16:	609a      	str	r2, [r3, #8]
      break;
 8003a18:	e052      	b.n	8003ac0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6818      	ldr	r0, [r3, #0]
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	6899      	ldr	r1, [r3, #8]
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685a      	ldr	r2, [r3, #4]
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	f000 fc17 	bl	800425c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	689a      	ldr	r2, [r3, #8]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2180      	movs	r1, #128	; 0x80
 8003a3a:	01c9      	lsls	r1, r1, #7
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	609a      	str	r2, [r3, #8]
      break;
 8003a40:	e03e      	b.n	8003ac0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6818      	ldr	r0, [r3, #0]
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	6859      	ldr	r1, [r3, #4]
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	001a      	movs	r2, r3
 8003a50:	f000 fb8a 	bl	8004168 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2150      	movs	r1, #80	; 0x50
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	f000 fbe4 	bl	8004228 <TIM_ITRx_SetConfig>
      break;
 8003a60:	e02e      	b.n	8003ac0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6818      	ldr	r0, [r3, #0]
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	6859      	ldr	r1, [r3, #4]
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	001a      	movs	r2, r3
 8003a70:	f000 fba8 	bl	80041c4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2160      	movs	r1, #96	; 0x60
 8003a7a:	0018      	movs	r0, r3
 8003a7c:	f000 fbd4 	bl	8004228 <TIM_ITRx_SetConfig>
      break;
 8003a80:	e01e      	b.n	8003ac0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6818      	ldr	r0, [r3, #0]
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	6859      	ldr	r1, [r3, #4]
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	001a      	movs	r2, r3
 8003a90:	f000 fb6a 	bl	8004168 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2140      	movs	r1, #64	; 0x40
 8003a9a:	0018      	movs	r0, r3
 8003a9c:	f000 fbc4 	bl	8004228 <TIM_ITRx_SetConfig>
      break;
 8003aa0:	e00e      	b.n	8003ac0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	0019      	movs	r1, r3
 8003aac:	0010      	movs	r0, r2
 8003aae:	f000 fbbb 	bl	8004228 <TIM_ITRx_SetConfig>
      break;
 8003ab2:	e005      	b.n	8003ac0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003ab4:	230f      	movs	r3, #15
 8003ab6:	18fb      	adds	r3, r7, r3
 8003ab8:	2201      	movs	r2, #1
 8003aba:	701a      	strb	r2, [r3, #0]
      break;
 8003abc:	e000      	b.n	8003ac0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003abe:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	223d      	movs	r2, #61	; 0x3d
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	223c      	movs	r2, #60	; 0x3c
 8003acc:	2100      	movs	r1, #0
 8003ace:	5499      	strb	r1, [r3, r2]

  return status;
 8003ad0:	230f      	movs	r3, #15
 8003ad2:	18fb      	adds	r3, r7, r3
 8003ad4:	781b      	ldrb	r3, [r3, #0]
}
 8003ad6:	0018      	movs	r0, r3
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	b004      	add	sp, #16
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	46c0      	nop			; (mov r8, r8)
 8003ae0:	ffff00ff 	.word	0xffff00ff

08003ae4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003aec:	46c0      	nop			; (mov r8, r8)
 8003aee:	46bd      	mov	sp, r7
 8003af0:	b002      	add	sp, #8
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003afc:	46c0      	nop			; (mov r8, r8)
 8003afe:	46bd      	mov	sp, r7
 8003b00:	b002      	add	sp, #8
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003b0c:	46c0      	nop			; (mov r8, r8)
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	b002      	add	sp, #8
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b20:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d107      	bne.n	8003b3c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	223e      	movs	r2, #62	; 0x3e
 8003b36:	2101      	movs	r1, #1
 8003b38:	5499      	strb	r1, [r3, r2]
 8003b3a:	e02a      	b.n	8003b92 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d107      	bne.n	8003b56 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2202      	movs	r2, #2
 8003b4a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	223f      	movs	r2, #63	; 0x3f
 8003b50:	2101      	movs	r1, #1
 8003b52:	5499      	strb	r1, [r3, r2]
 8003b54:	e01d      	b.n	8003b92 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d107      	bne.n	8003b70 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2204      	movs	r2, #4
 8003b64:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2240      	movs	r2, #64	; 0x40
 8003b6a:	2101      	movs	r1, #1
 8003b6c:	5499      	strb	r1, [r3, r2]
 8003b6e:	e010      	b.n	8003b92 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d107      	bne.n	8003b8a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2208      	movs	r2, #8
 8003b7e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2241      	movs	r2, #65	; 0x41
 8003b84:	2101      	movs	r1, #1
 8003b86:	5499      	strb	r1, [r3, r2]
 8003b88:	e003      	b.n	8003b92 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	223d      	movs	r2, #61	; 0x3d
 8003b8e:	2101      	movs	r1, #1
 8003b90:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	0018      	movs	r0, r3
 8003b96:	f7ff ffb5 	bl	8003b04 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	771a      	strb	r2, [r3, #28]
}
 8003ba0:	46c0      	nop			; (mov r8, r8)
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	b004      	add	sp, #16
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d10b      	bne.n	8003bd8 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d136      	bne.n	8003c3c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	223e      	movs	r2, #62	; 0x3e
 8003bd2:	2101      	movs	r1, #1
 8003bd4:	5499      	strb	r1, [r3, r2]
 8003bd6:	e031      	b.n	8003c3c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d10b      	bne.n	8003bfa <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2202      	movs	r2, #2
 8003be6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	699b      	ldr	r3, [r3, #24]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d125      	bne.n	8003c3c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	223f      	movs	r2, #63	; 0x3f
 8003bf4:	2101      	movs	r1, #1
 8003bf6:	5499      	strb	r1, [r3, r2]
 8003bf8:	e020      	b.n	8003c3c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d10b      	bne.n	8003c1c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2204      	movs	r2, #4
 8003c08:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d114      	bne.n	8003c3c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2240      	movs	r2, #64	; 0x40
 8003c16:	2101      	movs	r1, #1
 8003c18:	5499      	strb	r1, [r3, r2]
 8003c1a:	e00f      	b.n	8003c3c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d10a      	bne.n	8003c3c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2208      	movs	r2, #8
 8003c2a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d103      	bne.n	8003c3c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2241      	movs	r2, #65	; 0x41
 8003c38:	2101      	movs	r1, #1
 8003c3a:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	0018      	movs	r0, r3
 8003c40:	f7ff ff50 	bl	8003ae4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	771a      	strb	r2, [r3, #28]
}
 8003c4a:	46c0      	nop			; (mov r8, r8)
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	b004      	add	sp, #16
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b084      	sub	sp, #16
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d103      	bne.n	8003c72 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	771a      	strb	r2, [r3, #28]
 8003c70:	e019      	b.n	8003ca6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d103      	bne.n	8003c84 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2202      	movs	r2, #2
 8003c80:	771a      	strb	r2, [r3, #28]
 8003c82:	e010      	b.n	8003ca6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d103      	bne.n	8003c96 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2204      	movs	r2, #4
 8003c92:	771a      	strb	r2, [r3, #28]
 8003c94:	e007      	b.n	8003ca6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d102      	bne.n	8003ca6 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2208      	movs	r2, #8
 8003ca4:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	0018      	movs	r0, r3
 8003caa:	f7ff ff23 	bl	8003af4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	771a      	strb	r2, [r3, #28]
}
 8003cb4:	46c0      	nop			; (mov r8, r8)
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	b004      	add	sp, #16
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a30      	ldr	r2, [pc, #192]	; (8003d90 <TIM_Base_SetConfig+0xd4>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d008      	beq.n	8003ce6 <TIM_Base_SetConfig+0x2a>
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	2380      	movs	r3, #128	; 0x80
 8003cd8:	05db      	lsls	r3, r3, #23
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d003      	beq.n	8003ce6 <TIM_Base_SetConfig+0x2a>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a2c      	ldr	r2, [pc, #176]	; (8003d94 <TIM_Base_SetConfig+0xd8>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d108      	bne.n	8003cf8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2270      	movs	r2, #112	; 0x70
 8003cea:	4393      	bics	r3, r2
 8003cec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a25      	ldr	r2, [pc, #148]	; (8003d90 <TIM_Base_SetConfig+0xd4>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d014      	beq.n	8003d2a <TIM_Base_SetConfig+0x6e>
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	2380      	movs	r3, #128	; 0x80
 8003d04:	05db      	lsls	r3, r3, #23
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d00f      	beq.n	8003d2a <TIM_Base_SetConfig+0x6e>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a21      	ldr	r2, [pc, #132]	; (8003d94 <TIM_Base_SetConfig+0xd8>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d00b      	beq.n	8003d2a <TIM_Base_SetConfig+0x6e>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a20      	ldr	r2, [pc, #128]	; (8003d98 <TIM_Base_SetConfig+0xdc>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d007      	beq.n	8003d2a <TIM_Base_SetConfig+0x6e>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a1f      	ldr	r2, [pc, #124]	; (8003d9c <TIM_Base_SetConfig+0xe0>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d003      	beq.n	8003d2a <TIM_Base_SetConfig+0x6e>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a1e      	ldr	r2, [pc, #120]	; (8003da0 <TIM_Base_SetConfig+0xe4>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d108      	bne.n	8003d3c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	4a1d      	ldr	r2, [pc, #116]	; (8003da4 <TIM_Base_SetConfig+0xe8>)
 8003d2e:	4013      	ands	r3, r2
 8003d30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2280      	movs	r2, #128	; 0x80
 8003d40:	4393      	bics	r3, r2
 8003d42:	001a      	movs	r2, r3
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	695b      	ldr	r3, [r3, #20]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	689a      	ldr	r2, [r3, #8]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a0a      	ldr	r2, [pc, #40]	; (8003d90 <TIM_Base_SetConfig+0xd4>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d007      	beq.n	8003d7a <TIM_Base_SetConfig+0xbe>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a0b      	ldr	r2, [pc, #44]	; (8003d9c <TIM_Base_SetConfig+0xe0>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d003      	beq.n	8003d7a <TIM_Base_SetConfig+0xbe>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a0a      	ldr	r2, [pc, #40]	; (8003da0 <TIM_Base_SetConfig+0xe4>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d103      	bne.n	8003d82 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	691a      	ldr	r2, [r3, #16]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	615a      	str	r2, [r3, #20]
}
 8003d88:	46c0      	nop			; (mov r8, r8)
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	b004      	add	sp, #16
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	40012c00 	.word	0x40012c00
 8003d94:	40000400 	.word	0x40000400
 8003d98:	40002000 	.word	0x40002000
 8003d9c:	40014400 	.word	0x40014400
 8003da0:	40014800 	.word	0x40014800
 8003da4:	fffffcff 	.word	0xfffffcff

08003da8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a1b      	ldr	r3, [r3, #32]
 8003db6:	2201      	movs	r2, #1
 8003db8:	4393      	bics	r3, r2
 8003dba:	001a      	movs	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a1b      	ldr	r3, [r3, #32]
 8003dc4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2270      	movs	r2, #112	; 0x70
 8003dd6:	4393      	bics	r3, r2
 8003dd8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2203      	movs	r2, #3
 8003dde:	4393      	bics	r3, r2
 8003de0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	2202      	movs	r2, #2
 8003df0:	4393      	bics	r3, r2
 8003df2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	697a      	ldr	r2, [r7, #20]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a23      	ldr	r2, [pc, #140]	; (8003e90 <TIM_OC1_SetConfig+0xe8>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d007      	beq.n	8003e16 <TIM_OC1_SetConfig+0x6e>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a22      	ldr	r2, [pc, #136]	; (8003e94 <TIM_OC1_SetConfig+0xec>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d003      	beq.n	8003e16 <TIM_OC1_SetConfig+0x6e>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a21      	ldr	r2, [pc, #132]	; (8003e98 <TIM_OC1_SetConfig+0xf0>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d10c      	bne.n	8003e30 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	2208      	movs	r2, #8
 8003e1a:	4393      	bics	r3, r2
 8003e1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	2204      	movs	r2, #4
 8003e2c:	4393      	bics	r3, r2
 8003e2e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a17      	ldr	r2, [pc, #92]	; (8003e90 <TIM_OC1_SetConfig+0xe8>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d007      	beq.n	8003e48 <TIM_OC1_SetConfig+0xa0>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a16      	ldr	r2, [pc, #88]	; (8003e94 <TIM_OC1_SetConfig+0xec>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d003      	beq.n	8003e48 <TIM_OC1_SetConfig+0xa0>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a15      	ldr	r2, [pc, #84]	; (8003e98 <TIM_OC1_SetConfig+0xf0>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d111      	bne.n	8003e6c <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	4a14      	ldr	r2, [pc, #80]	; (8003e9c <TIM_OC1_SetConfig+0xf4>)
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	4a13      	ldr	r2, [pc, #76]	; (8003ea0 <TIM_OC1_SetConfig+0xf8>)
 8003e54:	4013      	ands	r3, r2
 8003e56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	695b      	ldr	r3, [r3, #20]
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	68fa      	ldr	r2, [r7, #12]
 8003e76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	685a      	ldr	r2, [r3, #4]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	697a      	ldr	r2, [r7, #20]
 8003e84:	621a      	str	r2, [r3, #32]
}
 8003e86:	46c0      	nop			; (mov r8, r8)
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	b006      	add	sp, #24
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	46c0      	nop			; (mov r8, r8)
 8003e90:	40012c00 	.word	0x40012c00
 8003e94:	40014400 	.word	0x40014400
 8003e98:	40014800 	.word	0x40014800
 8003e9c:	fffffeff 	.word	0xfffffeff
 8003ea0:	fffffdff 	.word	0xfffffdff

08003ea4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b086      	sub	sp, #24
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	2210      	movs	r2, #16
 8003eb4:	4393      	bics	r3, r2
 8003eb6:	001a      	movs	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a1b      	ldr	r3, [r3, #32]
 8003ec0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	4a2c      	ldr	r2, [pc, #176]	; (8003f84 <TIM_OC2_SetConfig+0xe0>)
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	4a2b      	ldr	r2, [pc, #172]	; (8003f88 <TIM_OC2_SetConfig+0xe4>)
 8003eda:	4013      	ands	r3, r2
 8003edc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	021b      	lsls	r3, r3, #8
 8003ee4:	68fa      	ldr	r2, [r7, #12]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	2220      	movs	r2, #32
 8003eee:	4393      	bics	r3, r2
 8003ef0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	011b      	lsls	r3, r3, #4
 8003ef8:	697a      	ldr	r2, [r7, #20]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a22      	ldr	r2, [pc, #136]	; (8003f8c <TIM_OC2_SetConfig+0xe8>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d10d      	bne.n	8003f22 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	2280      	movs	r2, #128	; 0x80
 8003f0a:	4393      	bics	r3, r2
 8003f0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	011b      	lsls	r3, r3, #4
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	2240      	movs	r2, #64	; 0x40
 8003f1e:	4393      	bics	r3, r2
 8003f20:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a19      	ldr	r2, [pc, #100]	; (8003f8c <TIM_OC2_SetConfig+0xe8>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d007      	beq.n	8003f3a <TIM_OC2_SetConfig+0x96>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a18      	ldr	r2, [pc, #96]	; (8003f90 <TIM_OC2_SetConfig+0xec>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d003      	beq.n	8003f3a <TIM_OC2_SetConfig+0x96>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a17      	ldr	r2, [pc, #92]	; (8003f94 <TIM_OC2_SetConfig+0xf0>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d113      	bne.n	8003f62 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	4a16      	ldr	r2, [pc, #88]	; (8003f98 <TIM_OC2_SetConfig+0xf4>)
 8003f3e:	4013      	ands	r3, r2
 8003f40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	4a15      	ldr	r2, [pc, #84]	; (8003f9c <TIM_OC2_SetConfig+0xf8>)
 8003f46:	4013      	ands	r3, r2
 8003f48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	621a      	str	r2, [r3, #32]
}
 8003f7c:	46c0      	nop			; (mov r8, r8)
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	b006      	add	sp, #24
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	ffff8fff 	.word	0xffff8fff
 8003f88:	fffffcff 	.word	0xfffffcff
 8003f8c:	40012c00 	.word	0x40012c00
 8003f90:	40014400 	.word	0x40014400
 8003f94:	40014800 	.word	0x40014800
 8003f98:	fffffbff 	.word	0xfffffbff
 8003f9c:	fffff7ff 	.word	0xfffff7ff

08003fa0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b086      	sub	sp, #24
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	4a33      	ldr	r2, [pc, #204]	; (800407c <TIM_OC3_SetConfig+0xdc>)
 8003fb0:	401a      	ands	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	69db      	ldr	r3, [r3, #28]
 8003fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2270      	movs	r2, #112	; 0x70
 8003fcc:	4393      	bics	r3, r2
 8003fce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2203      	movs	r2, #3
 8003fd4:	4393      	bics	r3, r2
 8003fd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	4a26      	ldr	r2, [pc, #152]	; (8004080 <TIM_OC3_SetConfig+0xe0>)
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	021b      	lsls	r3, r3, #8
 8003ff0:	697a      	ldr	r2, [r7, #20]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a22      	ldr	r2, [pc, #136]	; (8004084 <TIM_OC3_SetConfig+0xe4>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d10d      	bne.n	800401a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	4a21      	ldr	r2, [pc, #132]	; (8004088 <TIM_OC3_SetConfig+0xe8>)
 8004002:	4013      	ands	r3, r2
 8004004:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	021b      	lsls	r3, r3, #8
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	4313      	orrs	r3, r2
 8004010:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	4a1d      	ldr	r2, [pc, #116]	; (800408c <TIM_OC3_SetConfig+0xec>)
 8004016:	4013      	ands	r3, r2
 8004018:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a19      	ldr	r2, [pc, #100]	; (8004084 <TIM_OC3_SetConfig+0xe4>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d007      	beq.n	8004032 <TIM_OC3_SetConfig+0x92>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a1a      	ldr	r2, [pc, #104]	; (8004090 <TIM_OC3_SetConfig+0xf0>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d003      	beq.n	8004032 <TIM_OC3_SetConfig+0x92>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a19      	ldr	r2, [pc, #100]	; (8004094 <TIM_OC3_SetConfig+0xf4>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d113      	bne.n	800405a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	4a18      	ldr	r2, [pc, #96]	; (8004098 <TIM_OC3_SetConfig+0xf8>)
 8004036:	4013      	ands	r3, r2
 8004038:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	4a17      	ldr	r2, [pc, #92]	; (800409c <TIM_OC3_SetConfig+0xfc>)
 800403e:	4013      	ands	r3, r2
 8004040:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	011b      	lsls	r3, r3, #4
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	4313      	orrs	r3, r2
 800404c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	011b      	lsls	r3, r3, #4
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	4313      	orrs	r3, r2
 8004058:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	693a      	ldr	r2, [r7, #16]
 800405e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	685a      	ldr	r2, [r3, #4]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	697a      	ldr	r2, [r7, #20]
 8004072:	621a      	str	r2, [r3, #32]
}
 8004074:	46c0      	nop			; (mov r8, r8)
 8004076:	46bd      	mov	sp, r7
 8004078:	b006      	add	sp, #24
 800407a:	bd80      	pop	{r7, pc}
 800407c:	fffffeff 	.word	0xfffffeff
 8004080:	fffffdff 	.word	0xfffffdff
 8004084:	40012c00 	.word	0x40012c00
 8004088:	fffff7ff 	.word	0xfffff7ff
 800408c:	fffffbff 	.word	0xfffffbff
 8004090:	40014400 	.word	0x40014400
 8004094:	40014800 	.word	0x40014800
 8004098:	ffffefff 	.word	0xffffefff
 800409c:	ffffdfff 	.word	0xffffdfff

080040a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	4a26      	ldr	r2, [pc, #152]	; (8004148 <TIM_OC4_SetConfig+0xa8>)
 80040b0:	401a      	ands	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	69db      	ldr	r3, [r3, #28]
 80040c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	4a20      	ldr	r2, [pc, #128]	; (800414c <TIM_OC4_SetConfig+0xac>)
 80040cc:	4013      	ands	r3, r2
 80040ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	4a1f      	ldr	r2, [pc, #124]	; (8004150 <TIM_OC4_SetConfig+0xb0>)
 80040d4:	4013      	ands	r3, r2
 80040d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	021b      	lsls	r3, r3, #8
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	4a1b      	ldr	r2, [pc, #108]	; (8004154 <TIM_OC4_SetConfig+0xb4>)
 80040e8:	4013      	ands	r3, r2
 80040ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	031b      	lsls	r3, r3, #12
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a17      	ldr	r2, [pc, #92]	; (8004158 <TIM_OC4_SetConfig+0xb8>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d007      	beq.n	8004110 <TIM_OC4_SetConfig+0x70>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a16      	ldr	r2, [pc, #88]	; (800415c <TIM_OC4_SetConfig+0xbc>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d003      	beq.n	8004110 <TIM_OC4_SetConfig+0x70>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a15      	ldr	r2, [pc, #84]	; (8004160 <TIM_OC4_SetConfig+0xc0>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d109      	bne.n	8004124 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	4a14      	ldr	r2, [pc, #80]	; (8004164 <TIM_OC4_SetConfig+0xc4>)
 8004114:	4013      	ands	r3, r2
 8004116:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	695b      	ldr	r3, [r3, #20]
 800411c:	019b      	lsls	r3, r3, #6
 800411e:	697a      	ldr	r2, [r7, #20]
 8004120:	4313      	orrs	r3, r2
 8004122:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685a      	ldr	r2, [r3, #4]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	621a      	str	r2, [r3, #32]
}
 800413e:	46c0      	nop			; (mov r8, r8)
 8004140:	46bd      	mov	sp, r7
 8004142:	b006      	add	sp, #24
 8004144:	bd80      	pop	{r7, pc}
 8004146:	46c0      	nop			; (mov r8, r8)
 8004148:	ffffefff 	.word	0xffffefff
 800414c:	ffff8fff 	.word	0xffff8fff
 8004150:	fffffcff 	.word	0xfffffcff
 8004154:	ffffdfff 	.word	0xffffdfff
 8004158:	40012c00 	.word	0x40012c00
 800415c:	40014400 	.word	0x40014400
 8004160:	40014800 	.word	0x40014800
 8004164:	ffffbfff 	.word	0xffffbfff

08004168 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6a1b      	ldr	r3, [r3, #32]
 8004178:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	2201      	movs	r2, #1
 8004180:	4393      	bics	r3, r2
 8004182:	001a      	movs	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	22f0      	movs	r2, #240	; 0xf0
 8004192:	4393      	bics	r3, r2
 8004194:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	011b      	lsls	r3, r3, #4
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	4313      	orrs	r3, r2
 800419e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	220a      	movs	r2, #10
 80041a4:	4393      	bics	r3, r2
 80041a6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	621a      	str	r2, [r3, #32]
}
 80041bc:	46c0      	nop			; (mov r8, r8)
 80041be:	46bd      	mov	sp, r7
 80041c0:	b006      	add	sp, #24
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	2210      	movs	r2, #16
 80041d6:	4393      	bics	r3, r2
 80041d8:	001a      	movs	r2, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	4a0d      	ldr	r2, [pc, #52]	; (8004224 <TIM_TI2_ConfigInputStage+0x60>)
 80041ee:	4013      	ands	r3, r2
 80041f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	031b      	lsls	r3, r3, #12
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	22a0      	movs	r2, #160	; 0xa0
 8004200:	4393      	bics	r3, r2
 8004202:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	011b      	lsls	r3, r3, #4
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	4313      	orrs	r3, r2
 800420c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	621a      	str	r2, [r3, #32]
}
 800421a:	46c0      	nop			; (mov r8, r8)
 800421c:	46bd      	mov	sp, r7
 800421e:	b006      	add	sp, #24
 8004220:	bd80      	pop	{r7, pc}
 8004222:	46c0      	nop			; (mov r8, r8)
 8004224:	ffff0fff 	.word	0xffff0fff

08004228 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2270      	movs	r2, #112	; 0x70
 800423c:	4393      	bics	r3, r2
 800423e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004240:	683a      	ldr	r2, [r7, #0]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	4313      	orrs	r3, r2
 8004246:	2207      	movs	r2, #7
 8004248:	4313      	orrs	r3, r2
 800424a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	609a      	str	r2, [r3, #8]
}
 8004252:	46c0      	nop			; (mov r8, r8)
 8004254:	46bd      	mov	sp, r7
 8004256:	b004      	add	sp, #16
 8004258:	bd80      	pop	{r7, pc}
	...

0800425c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
 8004268:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	4a09      	ldr	r2, [pc, #36]	; (8004298 <TIM_ETR_SetConfig+0x3c>)
 8004274:	4013      	ands	r3, r2
 8004276:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	021a      	lsls	r2, r3, #8
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	431a      	orrs	r2, r3
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	4313      	orrs	r3, r2
 8004284:	697a      	ldr	r2, [r7, #20]
 8004286:	4313      	orrs	r3, r2
 8004288:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	697a      	ldr	r2, [r7, #20]
 800428e:	609a      	str	r2, [r3, #8]
}
 8004290:	46c0      	nop			; (mov r8, r8)
 8004292:	46bd      	mov	sp, r7
 8004294:	b006      	add	sp, #24
 8004296:	bd80      	pop	{r7, pc}
 8004298:	ffff00ff 	.word	0xffff00ff

0800429c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b086      	sub	sp, #24
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	221f      	movs	r2, #31
 80042ac:	4013      	ands	r3, r2
 80042ae:	2201      	movs	r2, #1
 80042b0:	409a      	lsls	r2, r3
 80042b2:	0013      	movs	r3, r2
 80042b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	697a      	ldr	r2, [r7, #20]
 80042bc:	43d2      	mvns	r2, r2
 80042be:	401a      	ands	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6a1a      	ldr	r2, [r3, #32]
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	211f      	movs	r1, #31
 80042cc:	400b      	ands	r3, r1
 80042ce:	6879      	ldr	r1, [r7, #4]
 80042d0:	4099      	lsls	r1, r3
 80042d2:	000b      	movs	r3, r1
 80042d4:	431a      	orrs	r2, r3
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	621a      	str	r2, [r3, #32]
}
 80042da:	46c0      	nop			; (mov r8, r8)
 80042dc:	46bd      	mov	sp, r7
 80042de:	b006      	add	sp, #24
 80042e0:	bd80      	pop	{r7, pc}
	...

080042e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	223c      	movs	r2, #60	; 0x3c
 80042f2:	5c9b      	ldrb	r3, [r3, r2]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d101      	bne.n	80042fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042f8:	2302      	movs	r3, #2
 80042fa:	e042      	b.n	8004382 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	223c      	movs	r2, #60	; 0x3c
 8004300:	2101      	movs	r1, #1
 8004302:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	223d      	movs	r2, #61	; 0x3d
 8004308:	2102      	movs	r1, #2
 800430a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2270      	movs	r2, #112	; 0x70
 8004320:	4393      	bics	r3, r2
 8004322:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	4313      	orrs	r3, r2
 800432c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a14      	ldr	r2, [pc, #80]	; (800438c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d00a      	beq.n	8004356 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	2380      	movs	r3, #128	; 0x80
 8004346:	05db      	lsls	r3, r3, #23
 8004348:	429a      	cmp	r2, r3
 800434a:	d004      	beq.n	8004356 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a0f      	ldr	r2, [pc, #60]	; (8004390 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d10c      	bne.n	8004370 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	2280      	movs	r2, #128	; 0x80
 800435a:	4393      	bics	r3, r2
 800435c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	68ba      	ldr	r2, [r7, #8]
 8004364:	4313      	orrs	r3, r2
 8004366:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68ba      	ldr	r2, [r7, #8]
 800436e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	223d      	movs	r2, #61	; 0x3d
 8004374:	2101      	movs	r1, #1
 8004376:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	223c      	movs	r2, #60	; 0x3c
 800437c:	2100      	movs	r1, #0
 800437e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	0018      	movs	r0, r3
 8004384:	46bd      	mov	sp, r7
 8004386:	b004      	add	sp, #16
 8004388:	bd80      	pop	{r7, pc}
 800438a:	46c0      	nop			; (mov r8, r8)
 800438c:	40012c00 	.word	0x40012c00
 8004390:	40000400 	.word	0x40000400

08004394 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d101      	bne.n	80043a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e044      	b.n	8004430 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d107      	bne.n	80043be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2278      	movs	r2, #120	; 0x78
 80043b2:	2100      	movs	r1, #0
 80043b4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	0018      	movs	r0, r3
 80043ba:	f7fc ffd3 	bl	8001364 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2224      	movs	r2, #36	; 0x24
 80043c2:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2101      	movs	r1, #1
 80043d0:	438a      	bics	r2, r1
 80043d2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	0018      	movs	r0, r3
 80043d8:	f000 fb7c 	bl	8004ad4 <UART_SetConfig>
 80043dc:	0003      	movs	r3, r0
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d101      	bne.n	80043e6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e024      	b.n	8004430 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	0018      	movs	r0, r3
 80043f2:	f000 fcaf 	bl	8004d54 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	685a      	ldr	r2, [r3, #4]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	490d      	ldr	r1, [pc, #52]	; (8004438 <HAL_UART_Init+0xa4>)
 8004402:	400a      	ands	r2, r1
 8004404:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	689a      	ldr	r2, [r3, #8]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	212a      	movs	r1, #42	; 0x2a
 8004412:	438a      	bics	r2, r1
 8004414:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2101      	movs	r1, #1
 8004422:	430a      	orrs	r2, r1
 8004424:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	0018      	movs	r0, r3
 800442a:	f000 fd47 	bl	8004ebc <UART_CheckIdleState>
 800442e:	0003      	movs	r3, r0
}
 8004430:	0018      	movs	r0, r3
 8004432:	46bd      	mov	sp, r7
 8004434:	b002      	add	sp, #8
 8004436:	bd80      	pop	{r7, pc}
 8004438:	ffffb7ff 	.word	0xffffb7ff

0800443c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b088      	sub	sp, #32
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	1dbb      	adds	r3, r7, #6
 8004448:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2280      	movs	r2, #128	; 0x80
 800444e:	589b      	ldr	r3, [r3, r2]
 8004450:	2b20      	cmp	r3, #32
 8004452:	d145      	bne.n	80044e0 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d003      	beq.n	8004462 <HAL_UART_Receive_IT+0x26>
 800445a:	1dbb      	adds	r3, r7, #6
 800445c:	881b      	ldrh	r3, [r3, #0]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d101      	bne.n	8004466 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e03d      	b.n	80044e2 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	689a      	ldr	r2, [r3, #8]
 800446a:	2380      	movs	r3, #128	; 0x80
 800446c:	015b      	lsls	r3, r3, #5
 800446e:	429a      	cmp	r2, r3
 8004470:	d109      	bne.n	8004486 <HAL_UART_Receive_IT+0x4a>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d105      	bne.n	8004486 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	2201      	movs	r2, #1
 800447e:	4013      	ands	r3, r2
 8004480:	d001      	beq.n	8004486 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e02d      	b.n	80044e2 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	685a      	ldr	r2, [r3, #4]
 8004492:	2380      	movs	r3, #128	; 0x80
 8004494:	041b      	lsls	r3, r3, #16
 8004496:	4013      	ands	r3, r2
 8004498:	d019      	beq.n	80044ce <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800449a:	f3ef 8310 	mrs	r3, PRIMASK
 800449e:	613b      	str	r3, [r7, #16]
  return(result);
 80044a0:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80044a2:	61fb      	str	r3, [r7, #28]
 80044a4:	2301      	movs	r3, #1
 80044a6:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	f383 8810 	msr	PRIMASK, r3
}
 80044ae:	46c0      	nop			; (mov r8, r8)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2180      	movs	r1, #128	; 0x80
 80044bc:	04c9      	lsls	r1, r1, #19
 80044be:	430a      	orrs	r2, r1
 80044c0:	601a      	str	r2, [r3, #0]
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	f383 8810 	msr	PRIMASK, r3
}
 80044cc:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80044ce:	1dbb      	adds	r3, r7, #6
 80044d0:	881a      	ldrh	r2, [r3, #0]
 80044d2:	68b9      	ldr	r1, [r7, #8]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	0018      	movs	r0, r3
 80044d8:	f000 fe02 	bl	80050e0 <UART_Start_Receive_IT>
 80044dc:	0003      	movs	r3, r0
 80044de:	e000      	b.n	80044e2 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80044e0:	2302      	movs	r3, #2
  }
}
 80044e2:	0018      	movs	r0, r3
 80044e4:	46bd      	mov	sp, r7
 80044e6:	b008      	add	sp, #32
 80044e8:	bd80      	pop	{r7, pc}
	...

080044ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044ec:	b590      	push	{r4, r7, lr}
 80044ee:	b0ab      	sub	sp, #172	; 0xac
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	69db      	ldr	r3, [r3, #28]
 80044fa:	22a4      	movs	r2, #164	; 0xa4
 80044fc:	18b9      	adds	r1, r7, r2
 80044fe:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	20a0      	movs	r0, #160	; 0xa0
 8004508:	1839      	adds	r1, r7, r0
 800450a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	219c      	movs	r1, #156	; 0x9c
 8004514:	1879      	adds	r1, r7, r1
 8004516:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004518:	0011      	movs	r1, r2
 800451a:	18bb      	adds	r3, r7, r2
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a99      	ldr	r2, [pc, #612]	; (8004784 <HAL_UART_IRQHandler+0x298>)
 8004520:	4013      	ands	r3, r2
 8004522:	2298      	movs	r2, #152	; 0x98
 8004524:	18bc      	adds	r4, r7, r2
 8004526:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8004528:	18bb      	adds	r3, r7, r2
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d114      	bne.n	800455a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004530:	187b      	adds	r3, r7, r1
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2220      	movs	r2, #32
 8004536:	4013      	ands	r3, r2
 8004538:	d00f      	beq.n	800455a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800453a:	183b      	adds	r3, r7, r0
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2220      	movs	r2, #32
 8004540:	4013      	ands	r3, r2
 8004542:	d00a      	beq.n	800455a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004548:	2b00      	cmp	r3, #0
 800454a:	d100      	bne.n	800454e <HAL_UART_IRQHandler+0x62>
 800454c:	e29e      	b.n	8004a8c <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	0010      	movs	r0, r2
 8004556:	4798      	blx	r3
      }
      return;
 8004558:	e298      	b.n	8004a8c <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800455a:	2398      	movs	r3, #152	; 0x98
 800455c:	18fb      	adds	r3, r7, r3
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d100      	bne.n	8004566 <HAL_UART_IRQHandler+0x7a>
 8004564:	e114      	b.n	8004790 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004566:	239c      	movs	r3, #156	; 0x9c
 8004568:	18fb      	adds	r3, r7, r3
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2201      	movs	r2, #1
 800456e:	4013      	ands	r3, r2
 8004570:	d106      	bne.n	8004580 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004572:	23a0      	movs	r3, #160	; 0xa0
 8004574:	18fb      	adds	r3, r7, r3
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a83      	ldr	r2, [pc, #524]	; (8004788 <HAL_UART_IRQHandler+0x29c>)
 800457a:	4013      	ands	r3, r2
 800457c:	d100      	bne.n	8004580 <HAL_UART_IRQHandler+0x94>
 800457e:	e107      	b.n	8004790 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004580:	23a4      	movs	r3, #164	; 0xa4
 8004582:	18fb      	adds	r3, r7, r3
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2201      	movs	r2, #1
 8004588:	4013      	ands	r3, r2
 800458a:	d012      	beq.n	80045b2 <HAL_UART_IRQHandler+0xc6>
 800458c:	23a0      	movs	r3, #160	; 0xa0
 800458e:	18fb      	adds	r3, r7, r3
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	2380      	movs	r3, #128	; 0x80
 8004594:	005b      	lsls	r3, r3, #1
 8004596:	4013      	ands	r3, r2
 8004598:	d00b      	beq.n	80045b2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2201      	movs	r2, #1
 80045a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2284      	movs	r2, #132	; 0x84
 80045a6:	589b      	ldr	r3, [r3, r2]
 80045a8:	2201      	movs	r2, #1
 80045aa:	431a      	orrs	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2184      	movs	r1, #132	; 0x84
 80045b0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045b2:	23a4      	movs	r3, #164	; 0xa4
 80045b4:	18fb      	adds	r3, r7, r3
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2202      	movs	r2, #2
 80045ba:	4013      	ands	r3, r2
 80045bc:	d011      	beq.n	80045e2 <HAL_UART_IRQHandler+0xf6>
 80045be:	239c      	movs	r3, #156	; 0x9c
 80045c0:	18fb      	adds	r3, r7, r3
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2201      	movs	r2, #1
 80045c6:	4013      	ands	r3, r2
 80045c8:	d00b      	beq.n	80045e2 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2202      	movs	r2, #2
 80045d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2284      	movs	r2, #132	; 0x84
 80045d6:	589b      	ldr	r3, [r3, r2]
 80045d8:	2204      	movs	r2, #4
 80045da:	431a      	orrs	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2184      	movs	r1, #132	; 0x84
 80045e0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045e2:	23a4      	movs	r3, #164	; 0xa4
 80045e4:	18fb      	adds	r3, r7, r3
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2204      	movs	r2, #4
 80045ea:	4013      	ands	r3, r2
 80045ec:	d011      	beq.n	8004612 <HAL_UART_IRQHandler+0x126>
 80045ee:	239c      	movs	r3, #156	; 0x9c
 80045f0:	18fb      	adds	r3, r7, r3
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2201      	movs	r2, #1
 80045f6:	4013      	ands	r3, r2
 80045f8:	d00b      	beq.n	8004612 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2204      	movs	r2, #4
 8004600:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2284      	movs	r2, #132	; 0x84
 8004606:	589b      	ldr	r3, [r3, r2]
 8004608:	2202      	movs	r2, #2
 800460a:	431a      	orrs	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2184      	movs	r1, #132	; 0x84
 8004610:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004612:	23a4      	movs	r3, #164	; 0xa4
 8004614:	18fb      	adds	r3, r7, r3
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2208      	movs	r2, #8
 800461a:	4013      	ands	r3, r2
 800461c:	d017      	beq.n	800464e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800461e:	23a0      	movs	r3, #160	; 0xa0
 8004620:	18fb      	adds	r3, r7, r3
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2220      	movs	r2, #32
 8004626:	4013      	ands	r3, r2
 8004628:	d105      	bne.n	8004636 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800462a:	239c      	movs	r3, #156	; 0x9c
 800462c:	18fb      	adds	r3, r7, r3
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2201      	movs	r2, #1
 8004632:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004634:	d00b      	beq.n	800464e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2208      	movs	r2, #8
 800463c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2284      	movs	r2, #132	; 0x84
 8004642:	589b      	ldr	r3, [r3, r2]
 8004644:	2208      	movs	r2, #8
 8004646:	431a      	orrs	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2184      	movs	r1, #132	; 0x84
 800464c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800464e:	23a4      	movs	r3, #164	; 0xa4
 8004650:	18fb      	adds	r3, r7, r3
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	2380      	movs	r3, #128	; 0x80
 8004656:	011b      	lsls	r3, r3, #4
 8004658:	4013      	ands	r3, r2
 800465a:	d013      	beq.n	8004684 <HAL_UART_IRQHandler+0x198>
 800465c:	23a0      	movs	r3, #160	; 0xa0
 800465e:	18fb      	adds	r3, r7, r3
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	2380      	movs	r3, #128	; 0x80
 8004664:	04db      	lsls	r3, r3, #19
 8004666:	4013      	ands	r3, r2
 8004668:	d00c      	beq.n	8004684 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2280      	movs	r2, #128	; 0x80
 8004670:	0112      	lsls	r2, r2, #4
 8004672:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2284      	movs	r2, #132	; 0x84
 8004678:	589b      	ldr	r3, [r3, r2]
 800467a:	2220      	movs	r2, #32
 800467c:	431a      	orrs	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2184      	movs	r1, #132	; 0x84
 8004682:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2284      	movs	r2, #132	; 0x84
 8004688:	589b      	ldr	r3, [r3, r2]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d100      	bne.n	8004690 <HAL_UART_IRQHandler+0x1a4>
 800468e:	e1ff      	b.n	8004a90 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004690:	23a4      	movs	r3, #164	; 0xa4
 8004692:	18fb      	adds	r3, r7, r3
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2220      	movs	r2, #32
 8004698:	4013      	ands	r3, r2
 800469a:	d00e      	beq.n	80046ba <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800469c:	23a0      	movs	r3, #160	; 0xa0
 800469e:	18fb      	adds	r3, r7, r3
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2220      	movs	r2, #32
 80046a4:	4013      	ands	r3, r2
 80046a6:	d008      	beq.n	80046ba <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d004      	beq.n	80046ba <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	0010      	movs	r0, r2
 80046b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2284      	movs	r2, #132	; 0x84
 80046be:	589b      	ldr	r3, [r3, r2]
 80046c0:	2194      	movs	r1, #148	; 0x94
 80046c2:	187a      	adds	r2, r7, r1
 80046c4:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	2240      	movs	r2, #64	; 0x40
 80046ce:	4013      	ands	r3, r2
 80046d0:	2b40      	cmp	r3, #64	; 0x40
 80046d2:	d004      	beq.n	80046de <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80046d4:	187b      	adds	r3, r7, r1
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2228      	movs	r2, #40	; 0x28
 80046da:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046dc:	d047      	beq.n	800476e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	0018      	movs	r0, r3
 80046e2:	f000 fdc7 	bl	8005274 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	2240      	movs	r2, #64	; 0x40
 80046ee:	4013      	ands	r3, r2
 80046f0:	2b40      	cmp	r3, #64	; 0x40
 80046f2:	d137      	bne.n	8004764 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046f4:	f3ef 8310 	mrs	r3, PRIMASK
 80046f8:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80046fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046fc:	2090      	movs	r0, #144	; 0x90
 80046fe:	183a      	adds	r2, r7, r0
 8004700:	6013      	str	r3, [r2, #0]
 8004702:	2301      	movs	r3, #1
 8004704:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004706:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004708:	f383 8810 	msr	PRIMASK, r3
}
 800470c:	46c0      	nop			; (mov r8, r8)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	689a      	ldr	r2, [r3, #8]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2140      	movs	r1, #64	; 0x40
 800471a:	438a      	bics	r2, r1
 800471c:	609a      	str	r2, [r3, #8]
 800471e:	183b      	adds	r3, r7, r0
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004724:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004726:	f383 8810 	msr	PRIMASK, r3
}
 800472a:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004730:	2b00      	cmp	r3, #0
 8004732:	d012      	beq.n	800475a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004738:	4a14      	ldr	r2, [pc, #80]	; (800478c <HAL_UART_IRQHandler+0x2a0>)
 800473a:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004740:	0018      	movs	r0, r3
 8004742:	f7fd fd6b 	bl	800221c <HAL_DMA_Abort_IT>
 8004746:	1e03      	subs	r3, r0, #0
 8004748:	d01a      	beq.n	8004780 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800474e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004754:	0018      	movs	r0, r3
 8004756:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004758:	e012      	b.n	8004780 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	0018      	movs	r0, r3
 800475e:	f7fc fcc1 	bl	80010e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004762:	e00d      	b.n	8004780 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	0018      	movs	r0, r3
 8004768:	f7fc fcbc 	bl	80010e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800476c:	e008      	b.n	8004780 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	0018      	movs	r0, r3
 8004772:	f7fc fcb7 	bl	80010e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2284      	movs	r2, #132	; 0x84
 800477a:	2100      	movs	r1, #0
 800477c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800477e:	e187      	b.n	8004a90 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004780:	46c0      	nop			; (mov r8, r8)
    return;
 8004782:	e185      	b.n	8004a90 <HAL_UART_IRQHandler+0x5a4>
 8004784:	0000080f 	.word	0x0000080f
 8004788:	04000120 	.word	0x04000120
 800478c:	0800533d 	.word	0x0800533d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004794:	2b01      	cmp	r3, #1
 8004796:	d000      	beq.n	800479a <HAL_UART_IRQHandler+0x2ae>
 8004798:	e139      	b.n	8004a0e <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800479a:	23a4      	movs	r3, #164	; 0xa4
 800479c:	18fb      	adds	r3, r7, r3
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2210      	movs	r2, #16
 80047a2:	4013      	ands	r3, r2
 80047a4:	d100      	bne.n	80047a8 <HAL_UART_IRQHandler+0x2bc>
 80047a6:	e132      	b.n	8004a0e <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80047a8:	23a0      	movs	r3, #160	; 0xa0
 80047aa:	18fb      	adds	r3, r7, r3
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2210      	movs	r2, #16
 80047b0:	4013      	ands	r3, r2
 80047b2:	d100      	bne.n	80047b6 <HAL_UART_IRQHandler+0x2ca>
 80047b4:	e12b      	b.n	8004a0e <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2210      	movs	r2, #16
 80047bc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	2240      	movs	r2, #64	; 0x40
 80047c6:	4013      	ands	r3, r2
 80047c8:	2b40      	cmp	r3, #64	; 0x40
 80047ca:	d000      	beq.n	80047ce <HAL_UART_IRQHandler+0x2e2>
 80047cc:	e09f      	b.n	800490e <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	685a      	ldr	r2, [r3, #4]
 80047d6:	217e      	movs	r1, #126	; 0x7e
 80047d8:	187b      	adds	r3, r7, r1
 80047da:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80047dc:	187b      	adds	r3, r7, r1
 80047de:	881b      	ldrh	r3, [r3, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d100      	bne.n	80047e6 <HAL_UART_IRQHandler+0x2fa>
 80047e4:	e156      	b.n	8004a94 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2258      	movs	r2, #88	; 0x58
 80047ea:	5a9b      	ldrh	r3, [r3, r2]
 80047ec:	187a      	adds	r2, r7, r1
 80047ee:	8812      	ldrh	r2, [r2, #0]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d300      	bcc.n	80047f6 <HAL_UART_IRQHandler+0x30a>
 80047f4:	e14e      	b.n	8004a94 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	187a      	adds	r2, r7, r1
 80047fa:	215a      	movs	r1, #90	; 0x5a
 80047fc:	8812      	ldrh	r2, [r2, #0]
 80047fe:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	2b20      	cmp	r3, #32
 8004808:	d06f      	beq.n	80048ea <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800480a:	f3ef 8310 	mrs	r3, PRIMASK
 800480e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004812:	67bb      	str	r3, [r7, #120]	; 0x78
 8004814:	2301      	movs	r3, #1
 8004816:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800481a:	f383 8810 	msr	PRIMASK, r3
}
 800481e:	46c0      	nop			; (mov r8, r8)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	499e      	ldr	r1, [pc, #632]	; (8004aa4 <HAL_UART_IRQHandler+0x5b8>)
 800482c:	400a      	ands	r2, r1
 800482e:	601a      	str	r2, [r3, #0]
 8004830:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004832:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004836:	f383 8810 	msr	PRIMASK, r3
}
 800483a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800483c:	f3ef 8310 	mrs	r3, PRIMASK
 8004840:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004844:	677b      	str	r3, [r7, #116]	; 0x74
 8004846:	2301      	movs	r3, #1
 8004848:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800484a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800484c:	f383 8810 	msr	PRIMASK, r3
}
 8004850:	46c0      	nop			; (mov r8, r8)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	689a      	ldr	r2, [r3, #8]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2101      	movs	r1, #1
 800485e:	438a      	bics	r2, r1
 8004860:	609a      	str	r2, [r3, #8]
 8004862:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004864:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004866:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004868:	f383 8810 	msr	PRIMASK, r3
}
 800486c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800486e:	f3ef 8310 	mrs	r3, PRIMASK
 8004872:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004874:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004876:	673b      	str	r3, [r7, #112]	; 0x70
 8004878:	2301      	movs	r3, #1
 800487a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800487c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800487e:	f383 8810 	msr	PRIMASK, r3
}
 8004882:	46c0      	nop			; (mov r8, r8)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	689a      	ldr	r2, [r3, #8]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2140      	movs	r1, #64	; 0x40
 8004890:	438a      	bics	r2, r1
 8004892:	609a      	str	r2, [r3, #8]
 8004894:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004896:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004898:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800489a:	f383 8810 	msr	PRIMASK, r3
}
 800489e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2280      	movs	r2, #128	; 0x80
 80048a4:	2120      	movs	r1, #32
 80048a6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048ae:	f3ef 8310 	mrs	r3, PRIMASK
 80048b2:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80048b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80048b8:	2301      	movs	r3, #1
 80048ba:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048be:	f383 8810 	msr	PRIMASK, r3
}
 80048c2:	46c0      	nop			; (mov r8, r8)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2110      	movs	r1, #16
 80048d0:	438a      	bics	r2, r1
 80048d2:	601a      	str	r2, [r3, #0]
 80048d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048d6:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048da:	f383 8810 	msr	PRIMASK, r3
}
 80048de:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048e4:	0018      	movs	r0, r3
 80048e6:	f7fd fc61 	bl	80021ac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2202      	movs	r2, #2
 80048ee:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2258      	movs	r2, #88	; 0x58
 80048f4:	5a9a      	ldrh	r2, [r3, r2]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	215a      	movs	r1, #90	; 0x5a
 80048fa:	5a5b      	ldrh	r3, [r3, r1]
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	b29a      	uxth	r2, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	0011      	movs	r1, r2
 8004906:	0018      	movs	r0, r3
 8004908:	f000 f8d8 	bl	8004abc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800490c:	e0c2      	b.n	8004a94 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2258      	movs	r2, #88	; 0x58
 8004912:	5a99      	ldrh	r1, [r3, r2]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	225a      	movs	r2, #90	; 0x5a
 8004918:	5a9b      	ldrh	r3, [r3, r2]
 800491a:	b29a      	uxth	r2, r3
 800491c:	208e      	movs	r0, #142	; 0x8e
 800491e:	183b      	adds	r3, r7, r0
 8004920:	1a8a      	subs	r2, r1, r2
 8004922:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	225a      	movs	r2, #90	; 0x5a
 8004928:	5a9b      	ldrh	r3, [r3, r2]
 800492a:	b29b      	uxth	r3, r3
 800492c:	2b00      	cmp	r3, #0
 800492e:	d100      	bne.n	8004932 <HAL_UART_IRQHandler+0x446>
 8004930:	e0b2      	b.n	8004a98 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8004932:	183b      	adds	r3, r7, r0
 8004934:	881b      	ldrh	r3, [r3, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d100      	bne.n	800493c <HAL_UART_IRQHandler+0x450>
 800493a:	e0ad      	b.n	8004a98 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800493c:	f3ef 8310 	mrs	r3, PRIMASK
 8004940:	60fb      	str	r3, [r7, #12]
  return(result);
 8004942:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004944:	2488      	movs	r4, #136	; 0x88
 8004946:	193a      	adds	r2, r7, r4
 8004948:	6013      	str	r3, [r2, #0]
 800494a:	2301      	movs	r3, #1
 800494c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	f383 8810 	msr	PRIMASK, r3
}
 8004954:	46c0      	nop			; (mov r8, r8)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4951      	ldr	r1, [pc, #324]	; (8004aa8 <HAL_UART_IRQHandler+0x5bc>)
 8004962:	400a      	ands	r2, r1
 8004964:	601a      	str	r2, [r3, #0]
 8004966:	193b      	adds	r3, r7, r4
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	f383 8810 	msr	PRIMASK, r3
}
 8004972:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004974:	f3ef 8310 	mrs	r3, PRIMASK
 8004978:	61bb      	str	r3, [r7, #24]
  return(result);
 800497a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800497c:	2484      	movs	r4, #132	; 0x84
 800497e:	193a      	adds	r2, r7, r4
 8004980:	6013      	str	r3, [r2, #0]
 8004982:	2301      	movs	r3, #1
 8004984:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	f383 8810 	msr	PRIMASK, r3
}
 800498c:	46c0      	nop			; (mov r8, r8)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	689a      	ldr	r2, [r3, #8]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2101      	movs	r1, #1
 800499a:	438a      	bics	r2, r1
 800499c:	609a      	str	r2, [r3, #8]
 800499e:	193b      	adds	r3, r7, r4
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049a4:	6a3b      	ldr	r3, [r7, #32]
 80049a6:	f383 8810 	msr	PRIMASK, r3
}
 80049aa:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2280      	movs	r2, #128	; 0x80
 80049b0:	2120      	movs	r1, #32
 80049b2:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049c0:	f3ef 8310 	mrs	r3, PRIMASK
 80049c4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80049c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049c8:	2480      	movs	r4, #128	; 0x80
 80049ca:	193a      	adds	r2, r7, r4
 80049cc:	6013      	str	r3, [r2, #0]
 80049ce:	2301      	movs	r3, #1
 80049d0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d4:	f383 8810 	msr	PRIMASK, r3
}
 80049d8:	46c0      	nop			; (mov r8, r8)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2110      	movs	r1, #16
 80049e6:	438a      	bics	r2, r1
 80049e8:	601a      	str	r2, [r3, #0]
 80049ea:	193b      	adds	r3, r7, r4
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f2:	f383 8810 	msr	PRIMASK, r3
}
 80049f6:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2202      	movs	r2, #2
 80049fc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049fe:	183b      	adds	r3, r7, r0
 8004a00:	881a      	ldrh	r2, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	0011      	movs	r1, r2
 8004a06:	0018      	movs	r0, r3
 8004a08:	f000 f858 	bl	8004abc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a0c:	e044      	b.n	8004a98 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004a0e:	23a4      	movs	r3, #164	; 0xa4
 8004a10:	18fb      	adds	r3, r7, r3
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	2380      	movs	r3, #128	; 0x80
 8004a16:	035b      	lsls	r3, r3, #13
 8004a18:	4013      	ands	r3, r2
 8004a1a:	d010      	beq.n	8004a3e <HAL_UART_IRQHandler+0x552>
 8004a1c:	239c      	movs	r3, #156	; 0x9c
 8004a1e:	18fb      	adds	r3, r7, r3
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	2380      	movs	r3, #128	; 0x80
 8004a24:	03db      	lsls	r3, r3, #15
 8004a26:	4013      	ands	r3, r2
 8004a28:	d009      	beq.n	8004a3e <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2280      	movs	r2, #128	; 0x80
 8004a30:	0352      	lsls	r2, r2, #13
 8004a32:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	0018      	movs	r0, r3
 8004a38:	f000 fe7a 	bl	8005730 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a3c:	e02f      	b.n	8004a9e <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004a3e:	23a4      	movs	r3, #164	; 0xa4
 8004a40:	18fb      	adds	r3, r7, r3
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2280      	movs	r2, #128	; 0x80
 8004a46:	4013      	ands	r3, r2
 8004a48:	d00f      	beq.n	8004a6a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004a4a:	23a0      	movs	r3, #160	; 0xa0
 8004a4c:	18fb      	adds	r3, r7, r3
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2280      	movs	r2, #128	; 0x80
 8004a52:	4013      	ands	r3, r2
 8004a54:	d009      	beq.n	8004a6a <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d01e      	beq.n	8004a9c <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	0010      	movs	r0, r2
 8004a66:	4798      	blx	r3
    }
    return;
 8004a68:	e018      	b.n	8004a9c <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004a6a:	23a4      	movs	r3, #164	; 0xa4
 8004a6c:	18fb      	adds	r3, r7, r3
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2240      	movs	r2, #64	; 0x40
 8004a72:	4013      	ands	r3, r2
 8004a74:	d013      	beq.n	8004a9e <HAL_UART_IRQHandler+0x5b2>
 8004a76:	23a0      	movs	r3, #160	; 0xa0
 8004a78:	18fb      	adds	r3, r7, r3
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2240      	movs	r2, #64	; 0x40
 8004a7e:	4013      	ands	r3, r2
 8004a80:	d00d      	beq.n	8004a9e <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	0018      	movs	r0, r3
 8004a86:	f000 fc70 	bl	800536a <UART_EndTransmit_IT>
    return;
 8004a8a:	e008      	b.n	8004a9e <HAL_UART_IRQHandler+0x5b2>
      return;
 8004a8c:	46c0      	nop			; (mov r8, r8)
 8004a8e:	e006      	b.n	8004a9e <HAL_UART_IRQHandler+0x5b2>
    return;
 8004a90:	46c0      	nop			; (mov r8, r8)
 8004a92:	e004      	b.n	8004a9e <HAL_UART_IRQHandler+0x5b2>
      return;
 8004a94:	46c0      	nop			; (mov r8, r8)
 8004a96:	e002      	b.n	8004a9e <HAL_UART_IRQHandler+0x5b2>
      return;
 8004a98:	46c0      	nop			; (mov r8, r8)
 8004a9a:	e000      	b.n	8004a9e <HAL_UART_IRQHandler+0x5b2>
    return;
 8004a9c:	46c0      	nop			; (mov r8, r8)
  }

}
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	b02b      	add	sp, #172	; 0xac
 8004aa2:	bd90      	pop	{r4, r7, pc}
 8004aa4:	fffffeff 	.word	0xfffffeff
 8004aa8:	fffffedf 	.word	0xfffffedf

08004aac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004ab4:	46c0      	nop			; (mov r8, r8)
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	b002      	add	sp, #8
 8004aba:	bd80      	pop	{r7, pc}

08004abc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	000a      	movs	r2, r1
 8004ac6:	1cbb      	adds	r3, r7, #2
 8004ac8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004aca:	46c0      	nop			; (mov r8, r8)
 8004acc:	46bd      	mov	sp, r7
 8004ace:	b002      	add	sp, #8
 8004ad0:	bd80      	pop	{r7, pc}
	...

08004ad4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b088      	sub	sp, #32
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004adc:	231e      	movs	r3, #30
 8004ade:	18fb      	adds	r3, r7, r3
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	689a      	ldr	r2, [r3, #8]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	431a      	orrs	r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	695b      	ldr	r3, [r3, #20]
 8004af2:	431a      	orrs	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	69db      	ldr	r3, [r3, #28]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a8d      	ldr	r2, [pc, #564]	; (8004d38 <UART_SetConfig+0x264>)
 8004b04:	4013      	ands	r3, r2
 8004b06:	0019      	movs	r1, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	4a88      	ldr	r2, [pc, #544]	; (8004d3c <UART_SetConfig+0x268>)
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	0019      	movs	r1, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	68da      	ldr	r2, [r3, #12]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	430a      	orrs	r2, r1
 8004b28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a1b      	ldr	r3, [r3, #32]
 8004b34:	697a      	ldr	r2, [r7, #20]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	4a7f      	ldr	r2, [pc, #508]	; (8004d40 <UART_SetConfig+0x26c>)
 8004b42:	4013      	ands	r3, r2
 8004b44:	0019      	movs	r1, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	430a      	orrs	r2, r1
 8004b4e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a7b      	ldr	r2, [pc, #492]	; (8004d44 <UART_SetConfig+0x270>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d127      	bne.n	8004baa <UART_SetConfig+0xd6>
 8004b5a:	4b7b      	ldr	r3, [pc, #492]	; (8004d48 <UART_SetConfig+0x274>)
 8004b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5e:	2203      	movs	r2, #3
 8004b60:	4013      	ands	r3, r2
 8004b62:	2b03      	cmp	r3, #3
 8004b64:	d00d      	beq.n	8004b82 <UART_SetConfig+0xae>
 8004b66:	d81b      	bhi.n	8004ba0 <UART_SetConfig+0xcc>
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d014      	beq.n	8004b96 <UART_SetConfig+0xc2>
 8004b6c:	d818      	bhi.n	8004ba0 <UART_SetConfig+0xcc>
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d002      	beq.n	8004b78 <UART_SetConfig+0xa4>
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d00a      	beq.n	8004b8c <UART_SetConfig+0xb8>
 8004b76:	e013      	b.n	8004ba0 <UART_SetConfig+0xcc>
 8004b78:	231f      	movs	r3, #31
 8004b7a:	18fb      	adds	r3, r7, r3
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	701a      	strb	r2, [r3, #0]
 8004b80:	e021      	b.n	8004bc6 <UART_SetConfig+0xf2>
 8004b82:	231f      	movs	r3, #31
 8004b84:	18fb      	adds	r3, r7, r3
 8004b86:	2202      	movs	r2, #2
 8004b88:	701a      	strb	r2, [r3, #0]
 8004b8a:	e01c      	b.n	8004bc6 <UART_SetConfig+0xf2>
 8004b8c:	231f      	movs	r3, #31
 8004b8e:	18fb      	adds	r3, r7, r3
 8004b90:	2204      	movs	r2, #4
 8004b92:	701a      	strb	r2, [r3, #0]
 8004b94:	e017      	b.n	8004bc6 <UART_SetConfig+0xf2>
 8004b96:	231f      	movs	r3, #31
 8004b98:	18fb      	adds	r3, r7, r3
 8004b9a:	2208      	movs	r2, #8
 8004b9c:	701a      	strb	r2, [r3, #0]
 8004b9e:	e012      	b.n	8004bc6 <UART_SetConfig+0xf2>
 8004ba0:	231f      	movs	r3, #31
 8004ba2:	18fb      	adds	r3, r7, r3
 8004ba4:	2210      	movs	r2, #16
 8004ba6:	701a      	strb	r2, [r3, #0]
 8004ba8:	e00d      	b.n	8004bc6 <UART_SetConfig+0xf2>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a67      	ldr	r2, [pc, #412]	; (8004d4c <UART_SetConfig+0x278>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d104      	bne.n	8004bbe <UART_SetConfig+0xea>
 8004bb4:	231f      	movs	r3, #31
 8004bb6:	18fb      	adds	r3, r7, r3
 8004bb8:	2200      	movs	r2, #0
 8004bba:	701a      	strb	r2, [r3, #0]
 8004bbc:	e003      	b.n	8004bc6 <UART_SetConfig+0xf2>
 8004bbe:	231f      	movs	r3, #31
 8004bc0:	18fb      	adds	r3, r7, r3
 8004bc2:	2210      	movs	r2, #16
 8004bc4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	69da      	ldr	r2, [r3, #28]
 8004bca:	2380      	movs	r3, #128	; 0x80
 8004bcc:	021b      	lsls	r3, r3, #8
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d15c      	bne.n	8004c8c <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8004bd2:	231f      	movs	r3, #31
 8004bd4:	18fb      	adds	r3, r7, r3
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	2b08      	cmp	r3, #8
 8004bda:	d015      	beq.n	8004c08 <UART_SetConfig+0x134>
 8004bdc:	dc18      	bgt.n	8004c10 <UART_SetConfig+0x13c>
 8004bde:	2b04      	cmp	r3, #4
 8004be0:	d00d      	beq.n	8004bfe <UART_SetConfig+0x12a>
 8004be2:	dc15      	bgt.n	8004c10 <UART_SetConfig+0x13c>
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d002      	beq.n	8004bee <UART_SetConfig+0x11a>
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d005      	beq.n	8004bf8 <UART_SetConfig+0x124>
 8004bec:	e010      	b.n	8004c10 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bee:	f7fe fa89 	bl	8003104 <HAL_RCC_GetPCLK1Freq>
 8004bf2:	0003      	movs	r3, r0
 8004bf4:	61bb      	str	r3, [r7, #24]
        break;
 8004bf6:	e012      	b.n	8004c1e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bf8:	4b55      	ldr	r3, [pc, #340]	; (8004d50 <UART_SetConfig+0x27c>)
 8004bfa:	61bb      	str	r3, [r7, #24]
        break;
 8004bfc:	e00f      	b.n	8004c1e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bfe:	f7fe fa05 	bl	800300c <HAL_RCC_GetSysClockFreq>
 8004c02:	0003      	movs	r3, r0
 8004c04:	61bb      	str	r3, [r7, #24]
        break;
 8004c06:	e00a      	b.n	8004c1e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c08:	2380      	movs	r3, #128	; 0x80
 8004c0a:	021b      	lsls	r3, r3, #8
 8004c0c:	61bb      	str	r3, [r7, #24]
        break;
 8004c0e:	e006      	b.n	8004c1e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8004c10:	2300      	movs	r3, #0
 8004c12:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c14:	231e      	movs	r3, #30
 8004c16:	18fb      	adds	r3, r7, r3
 8004c18:	2201      	movs	r2, #1
 8004c1a:	701a      	strb	r2, [r3, #0]
        break;
 8004c1c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d100      	bne.n	8004c26 <UART_SetConfig+0x152>
 8004c24:	e07a      	b.n	8004d1c <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	005a      	lsls	r2, r3, #1
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	085b      	lsrs	r3, r3, #1
 8004c30:	18d2      	adds	r2, r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	0019      	movs	r1, r3
 8004c38:	0010      	movs	r0, r2
 8004c3a:	f7fb fa65 	bl	8000108 <__udivsi3>
 8004c3e:	0003      	movs	r3, r0
 8004c40:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	2b0f      	cmp	r3, #15
 8004c46:	d91c      	bls.n	8004c82 <UART_SetConfig+0x1ae>
 8004c48:	693a      	ldr	r2, [r7, #16]
 8004c4a:	2380      	movs	r3, #128	; 0x80
 8004c4c:	025b      	lsls	r3, r3, #9
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d217      	bcs.n	8004c82 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	200e      	movs	r0, #14
 8004c58:	183b      	adds	r3, r7, r0
 8004c5a:	210f      	movs	r1, #15
 8004c5c:	438a      	bics	r2, r1
 8004c5e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	085b      	lsrs	r3, r3, #1
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	2207      	movs	r2, #7
 8004c68:	4013      	ands	r3, r2
 8004c6a:	b299      	uxth	r1, r3
 8004c6c:	183b      	adds	r3, r7, r0
 8004c6e:	183a      	adds	r2, r7, r0
 8004c70:	8812      	ldrh	r2, [r2, #0]
 8004c72:	430a      	orrs	r2, r1
 8004c74:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	183a      	adds	r2, r7, r0
 8004c7c:	8812      	ldrh	r2, [r2, #0]
 8004c7e:	60da      	str	r2, [r3, #12]
 8004c80:	e04c      	b.n	8004d1c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004c82:	231e      	movs	r3, #30
 8004c84:	18fb      	adds	r3, r7, r3
 8004c86:	2201      	movs	r2, #1
 8004c88:	701a      	strb	r2, [r3, #0]
 8004c8a:	e047      	b.n	8004d1c <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c8c:	231f      	movs	r3, #31
 8004c8e:	18fb      	adds	r3, r7, r3
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	2b08      	cmp	r3, #8
 8004c94:	d015      	beq.n	8004cc2 <UART_SetConfig+0x1ee>
 8004c96:	dc18      	bgt.n	8004cca <UART_SetConfig+0x1f6>
 8004c98:	2b04      	cmp	r3, #4
 8004c9a:	d00d      	beq.n	8004cb8 <UART_SetConfig+0x1e4>
 8004c9c:	dc15      	bgt.n	8004cca <UART_SetConfig+0x1f6>
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d002      	beq.n	8004ca8 <UART_SetConfig+0x1d4>
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d005      	beq.n	8004cb2 <UART_SetConfig+0x1de>
 8004ca6:	e010      	b.n	8004cca <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ca8:	f7fe fa2c 	bl	8003104 <HAL_RCC_GetPCLK1Freq>
 8004cac:	0003      	movs	r3, r0
 8004cae:	61bb      	str	r3, [r7, #24]
        break;
 8004cb0:	e012      	b.n	8004cd8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cb2:	4b27      	ldr	r3, [pc, #156]	; (8004d50 <UART_SetConfig+0x27c>)
 8004cb4:	61bb      	str	r3, [r7, #24]
        break;
 8004cb6:	e00f      	b.n	8004cd8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cb8:	f7fe f9a8 	bl	800300c <HAL_RCC_GetSysClockFreq>
 8004cbc:	0003      	movs	r3, r0
 8004cbe:	61bb      	str	r3, [r7, #24]
        break;
 8004cc0:	e00a      	b.n	8004cd8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cc2:	2380      	movs	r3, #128	; 0x80
 8004cc4:	021b      	lsls	r3, r3, #8
 8004cc6:	61bb      	str	r3, [r7, #24]
        break;
 8004cc8:	e006      	b.n	8004cd8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004cce:	231e      	movs	r3, #30
 8004cd0:	18fb      	adds	r3, r7, r3
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	701a      	strb	r2, [r3, #0]
        break;
 8004cd6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d01e      	beq.n	8004d1c <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	085a      	lsrs	r2, r3, #1
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	18d2      	adds	r2, r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	0019      	movs	r1, r3
 8004cee:	0010      	movs	r0, r2
 8004cf0:	f7fb fa0a 	bl	8000108 <__udivsi3>
 8004cf4:	0003      	movs	r3, r0
 8004cf6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	2b0f      	cmp	r3, #15
 8004cfc:	d90a      	bls.n	8004d14 <UART_SetConfig+0x240>
 8004cfe:	693a      	ldr	r2, [r7, #16]
 8004d00:	2380      	movs	r3, #128	; 0x80
 8004d02:	025b      	lsls	r3, r3, #9
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d205      	bcs.n	8004d14 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	60da      	str	r2, [r3, #12]
 8004d12:	e003      	b.n	8004d1c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004d14:	231e      	movs	r3, #30
 8004d16:	18fb      	adds	r3, r7, r3
 8004d18:	2201      	movs	r2, #1
 8004d1a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004d28:	231e      	movs	r3, #30
 8004d2a:	18fb      	adds	r3, r7, r3
 8004d2c:	781b      	ldrb	r3, [r3, #0]
}
 8004d2e:	0018      	movs	r0, r3
 8004d30:	46bd      	mov	sp, r7
 8004d32:	b008      	add	sp, #32
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	46c0      	nop			; (mov r8, r8)
 8004d38:	efff69f3 	.word	0xefff69f3
 8004d3c:	ffffcfff 	.word	0xffffcfff
 8004d40:	fffff4ff 	.word	0xfffff4ff
 8004d44:	40013800 	.word	0x40013800
 8004d48:	40021000 	.word	0x40021000
 8004d4c:	40004400 	.word	0x40004400
 8004d50:	007a1200 	.word	0x007a1200

08004d54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d60:	2201      	movs	r2, #1
 8004d62:	4013      	ands	r3, r2
 8004d64:	d00b      	beq.n	8004d7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	4a4a      	ldr	r2, [pc, #296]	; (8004e98 <UART_AdvFeatureConfig+0x144>)
 8004d6e:	4013      	ands	r3, r2
 8004d70:	0019      	movs	r1, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d82:	2202      	movs	r2, #2
 8004d84:	4013      	ands	r3, r2
 8004d86:	d00b      	beq.n	8004da0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	4a43      	ldr	r2, [pc, #268]	; (8004e9c <UART_AdvFeatureConfig+0x148>)
 8004d90:	4013      	ands	r3, r2
 8004d92:	0019      	movs	r1, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	430a      	orrs	r2, r1
 8004d9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da4:	2204      	movs	r2, #4
 8004da6:	4013      	ands	r3, r2
 8004da8:	d00b      	beq.n	8004dc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	4a3b      	ldr	r2, [pc, #236]	; (8004ea0 <UART_AdvFeatureConfig+0x14c>)
 8004db2:	4013      	ands	r3, r2
 8004db4:	0019      	movs	r1, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc6:	2208      	movs	r2, #8
 8004dc8:	4013      	ands	r3, r2
 8004dca:	d00b      	beq.n	8004de4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	4a34      	ldr	r2, [pc, #208]	; (8004ea4 <UART_AdvFeatureConfig+0x150>)
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	0019      	movs	r1, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	430a      	orrs	r2, r1
 8004de2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de8:	2210      	movs	r2, #16
 8004dea:	4013      	ands	r3, r2
 8004dec:	d00b      	beq.n	8004e06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	4a2c      	ldr	r2, [pc, #176]	; (8004ea8 <UART_AdvFeatureConfig+0x154>)
 8004df6:	4013      	ands	r3, r2
 8004df8:	0019      	movs	r1, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	430a      	orrs	r2, r1
 8004e04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0a:	2220      	movs	r2, #32
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	d00b      	beq.n	8004e28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	4a25      	ldr	r2, [pc, #148]	; (8004eac <UART_AdvFeatureConfig+0x158>)
 8004e18:	4013      	ands	r3, r2
 8004e1a:	0019      	movs	r1, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	430a      	orrs	r2, r1
 8004e26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2c:	2240      	movs	r2, #64	; 0x40
 8004e2e:	4013      	ands	r3, r2
 8004e30:	d01d      	beq.n	8004e6e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	4a1d      	ldr	r2, [pc, #116]	; (8004eb0 <UART_AdvFeatureConfig+0x15c>)
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	0019      	movs	r1, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	430a      	orrs	r2, r1
 8004e48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e4e:	2380      	movs	r3, #128	; 0x80
 8004e50:	035b      	lsls	r3, r3, #13
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d10b      	bne.n	8004e6e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	4a15      	ldr	r2, [pc, #84]	; (8004eb4 <UART_AdvFeatureConfig+0x160>)
 8004e5e:	4013      	ands	r3, r2
 8004e60:	0019      	movs	r1, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	430a      	orrs	r2, r1
 8004e6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e72:	2280      	movs	r2, #128	; 0x80
 8004e74:	4013      	ands	r3, r2
 8004e76:	d00b      	beq.n	8004e90 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	4a0e      	ldr	r2, [pc, #56]	; (8004eb8 <UART_AdvFeatureConfig+0x164>)
 8004e80:	4013      	ands	r3, r2
 8004e82:	0019      	movs	r1, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	430a      	orrs	r2, r1
 8004e8e:	605a      	str	r2, [r3, #4]
  }
}
 8004e90:	46c0      	nop			; (mov r8, r8)
 8004e92:	46bd      	mov	sp, r7
 8004e94:	b002      	add	sp, #8
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	fffdffff 	.word	0xfffdffff
 8004e9c:	fffeffff 	.word	0xfffeffff
 8004ea0:	fffbffff 	.word	0xfffbffff
 8004ea4:	ffff7fff 	.word	0xffff7fff
 8004ea8:	ffffefff 	.word	0xffffefff
 8004eac:	ffffdfff 	.word	0xffffdfff
 8004eb0:	ffefffff 	.word	0xffefffff
 8004eb4:	ff9fffff 	.word	0xff9fffff
 8004eb8:	fff7ffff 	.word	0xfff7ffff

08004ebc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b092      	sub	sp, #72	; 0x48
 8004ec0:	af02      	add	r7, sp, #8
 8004ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2284      	movs	r2, #132	; 0x84
 8004ec8:	2100      	movs	r1, #0
 8004eca:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ecc:	f7fc fbf6 	bl	80016bc <HAL_GetTick>
 8004ed0:	0003      	movs	r3, r0
 8004ed2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2208      	movs	r2, #8
 8004edc:	4013      	ands	r3, r2
 8004ede:	2b08      	cmp	r3, #8
 8004ee0:	d12c      	bne.n	8004f3c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ee4:	2280      	movs	r2, #128	; 0x80
 8004ee6:	0391      	lsls	r1, r2, #14
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	4a46      	ldr	r2, [pc, #280]	; (8005004 <UART_CheckIdleState+0x148>)
 8004eec:	9200      	str	r2, [sp, #0]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f000 f88c 	bl	800500c <UART_WaitOnFlagUntilTimeout>
 8004ef4:	1e03      	subs	r3, r0, #0
 8004ef6:	d021      	beq.n	8004f3c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ef8:	f3ef 8310 	mrs	r3, PRIMASK
 8004efc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004f00:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f02:	2301      	movs	r3, #1
 8004f04:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f08:	f383 8810 	msr	PRIMASK, r3
}
 8004f0c:	46c0      	nop			; (mov r8, r8)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2180      	movs	r1, #128	; 0x80
 8004f1a:	438a      	bics	r2, r1
 8004f1c:	601a      	str	r2, [r3, #0]
 8004f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f20:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f24:	f383 8810 	msr	PRIMASK, r3
}
 8004f28:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2220      	movs	r2, #32
 8004f2e:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2278      	movs	r2, #120	; 0x78
 8004f34:	2100      	movs	r1, #0
 8004f36:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e05f      	b.n	8004ffc <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2204      	movs	r2, #4
 8004f44:	4013      	ands	r3, r2
 8004f46:	2b04      	cmp	r3, #4
 8004f48:	d146      	bne.n	8004fd8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f4c:	2280      	movs	r2, #128	; 0x80
 8004f4e:	03d1      	lsls	r1, r2, #15
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	4a2c      	ldr	r2, [pc, #176]	; (8005004 <UART_CheckIdleState+0x148>)
 8004f54:	9200      	str	r2, [sp, #0]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f000 f858 	bl	800500c <UART_WaitOnFlagUntilTimeout>
 8004f5c:	1e03      	subs	r3, r0, #0
 8004f5e:	d03b      	beq.n	8004fd8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f60:	f3ef 8310 	mrs	r3, PRIMASK
 8004f64:	60fb      	str	r3, [r7, #12]
  return(result);
 8004f66:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f68:	637b      	str	r3, [r7, #52]	; 0x34
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	f383 8810 	msr	PRIMASK, r3
}
 8004f74:	46c0      	nop			; (mov r8, r8)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4921      	ldr	r1, [pc, #132]	; (8005008 <UART_CheckIdleState+0x14c>)
 8004f82:	400a      	ands	r2, r1
 8004f84:	601a      	str	r2, [r3, #0]
 8004f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	f383 8810 	msr	PRIMASK, r3
}
 8004f90:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f92:	f3ef 8310 	mrs	r3, PRIMASK
 8004f96:	61bb      	str	r3, [r7, #24]
  return(result);
 8004f98:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f9a:	633b      	str	r3, [r7, #48]	; 0x30
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	f383 8810 	msr	PRIMASK, r3
}
 8004fa6:	46c0      	nop			; (mov r8, r8)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	689a      	ldr	r2, [r3, #8]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2101      	movs	r1, #1
 8004fb4:	438a      	bics	r2, r1
 8004fb6:	609a      	str	r2, [r3, #8]
 8004fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fba:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fbc:	6a3b      	ldr	r3, [r7, #32]
 8004fbe:	f383 8810 	msr	PRIMASK, r3
}
 8004fc2:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2280      	movs	r2, #128	; 0x80
 8004fc8:	2120      	movs	r1, #32
 8004fca:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2278      	movs	r2, #120	; 0x78
 8004fd0:	2100      	movs	r1, #0
 8004fd2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e011      	b.n	8004ffc <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2220      	movs	r2, #32
 8004fdc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2280      	movs	r2, #128	; 0x80
 8004fe2:	2120      	movs	r1, #32
 8004fe4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2278      	movs	r2, #120	; 0x78
 8004ff6:	2100      	movs	r1, #0
 8004ff8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	0018      	movs	r0, r3
 8004ffe:	46bd      	mov	sp, r7
 8005000:	b010      	add	sp, #64	; 0x40
 8005002:	bd80      	pop	{r7, pc}
 8005004:	01ffffff 	.word	0x01ffffff
 8005008:	fffffedf 	.word	0xfffffedf

0800500c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	603b      	str	r3, [r7, #0]
 8005018:	1dfb      	adds	r3, r7, #7
 800501a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800501c:	e04b      	b.n	80050b6 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	3301      	adds	r3, #1
 8005022:	d048      	beq.n	80050b6 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005024:	f7fc fb4a 	bl	80016bc <HAL_GetTick>
 8005028:	0002      	movs	r2, r0
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	69ba      	ldr	r2, [r7, #24]
 8005030:	429a      	cmp	r2, r3
 8005032:	d302      	bcc.n	800503a <UART_WaitOnFlagUntilTimeout+0x2e>
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d101      	bne.n	800503e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e04b      	b.n	80050d6 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2204      	movs	r2, #4
 8005046:	4013      	ands	r3, r2
 8005048:	d035      	beq.n	80050b6 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	69db      	ldr	r3, [r3, #28]
 8005050:	2208      	movs	r2, #8
 8005052:	4013      	ands	r3, r2
 8005054:	2b08      	cmp	r3, #8
 8005056:	d111      	bne.n	800507c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2208      	movs	r2, #8
 800505e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	0018      	movs	r0, r3
 8005064:	f000 f906 	bl	8005274 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2284      	movs	r2, #132	; 0x84
 800506c:	2108      	movs	r1, #8
 800506e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2278      	movs	r2, #120	; 0x78
 8005074:	2100      	movs	r1, #0
 8005076:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e02c      	b.n	80050d6 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	69da      	ldr	r2, [r3, #28]
 8005082:	2380      	movs	r3, #128	; 0x80
 8005084:	011b      	lsls	r3, r3, #4
 8005086:	401a      	ands	r2, r3
 8005088:	2380      	movs	r3, #128	; 0x80
 800508a:	011b      	lsls	r3, r3, #4
 800508c:	429a      	cmp	r2, r3
 800508e:	d112      	bne.n	80050b6 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2280      	movs	r2, #128	; 0x80
 8005096:	0112      	lsls	r2, r2, #4
 8005098:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	0018      	movs	r0, r3
 800509e:	f000 f8e9 	bl	8005274 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2284      	movs	r2, #132	; 0x84
 80050a6:	2120      	movs	r1, #32
 80050a8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2278      	movs	r2, #120	; 0x78
 80050ae:	2100      	movs	r1, #0
 80050b0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e00f      	b.n	80050d6 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	69db      	ldr	r3, [r3, #28]
 80050bc:	68ba      	ldr	r2, [r7, #8]
 80050be:	4013      	ands	r3, r2
 80050c0:	68ba      	ldr	r2, [r7, #8]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	425a      	negs	r2, r3
 80050c6:	4153      	adcs	r3, r2
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	001a      	movs	r2, r3
 80050cc:	1dfb      	adds	r3, r7, #7
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d0a4      	beq.n	800501e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	0018      	movs	r0, r3
 80050d8:	46bd      	mov	sp, r7
 80050da:	b004      	add	sp, #16
 80050dc:	bd80      	pop	{r7, pc}
	...

080050e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b090      	sub	sp, #64	; 0x40
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	1dbb      	adds	r3, r7, #6
 80050ec:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	68ba      	ldr	r2, [r7, #8]
 80050f2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	1dba      	adds	r2, r7, #6
 80050f8:	2158      	movs	r1, #88	; 0x58
 80050fa:	8812      	ldrh	r2, [r2, #0]
 80050fc:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	1dba      	adds	r2, r7, #6
 8005102:	215a      	movs	r1, #90	; 0x5a
 8005104:	8812      	ldrh	r2, [r2, #0]
 8005106:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2200      	movs	r2, #0
 800510c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	689a      	ldr	r2, [r3, #8]
 8005112:	2380      	movs	r3, #128	; 0x80
 8005114:	015b      	lsls	r3, r3, #5
 8005116:	429a      	cmp	r2, r3
 8005118:	d10d      	bne.n	8005136 <UART_Start_Receive_IT+0x56>
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d104      	bne.n	800512c <UART_Start_Receive_IT+0x4c>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	225c      	movs	r2, #92	; 0x5c
 8005126:	4950      	ldr	r1, [pc, #320]	; (8005268 <UART_Start_Receive_IT+0x188>)
 8005128:	5299      	strh	r1, [r3, r2]
 800512a:	e02e      	b.n	800518a <UART_Start_Receive_IT+0xaa>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	225c      	movs	r2, #92	; 0x5c
 8005130:	21ff      	movs	r1, #255	; 0xff
 8005132:	5299      	strh	r1, [r3, r2]
 8005134:	e029      	b.n	800518a <UART_Start_Receive_IT+0xaa>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d10d      	bne.n	800515a <UART_Start_Receive_IT+0x7a>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d104      	bne.n	8005150 <UART_Start_Receive_IT+0x70>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	225c      	movs	r2, #92	; 0x5c
 800514a:	21ff      	movs	r1, #255	; 0xff
 800514c:	5299      	strh	r1, [r3, r2]
 800514e:	e01c      	b.n	800518a <UART_Start_Receive_IT+0xaa>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	225c      	movs	r2, #92	; 0x5c
 8005154:	217f      	movs	r1, #127	; 0x7f
 8005156:	5299      	strh	r1, [r3, r2]
 8005158:	e017      	b.n	800518a <UART_Start_Receive_IT+0xaa>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	689a      	ldr	r2, [r3, #8]
 800515e:	2380      	movs	r3, #128	; 0x80
 8005160:	055b      	lsls	r3, r3, #21
 8005162:	429a      	cmp	r2, r3
 8005164:	d10d      	bne.n	8005182 <UART_Start_Receive_IT+0xa2>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d104      	bne.n	8005178 <UART_Start_Receive_IT+0x98>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	225c      	movs	r2, #92	; 0x5c
 8005172:	217f      	movs	r1, #127	; 0x7f
 8005174:	5299      	strh	r1, [r3, r2]
 8005176:	e008      	b.n	800518a <UART_Start_Receive_IT+0xaa>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	225c      	movs	r2, #92	; 0x5c
 800517c:	213f      	movs	r1, #63	; 0x3f
 800517e:	5299      	strh	r1, [r3, r2]
 8005180:	e003      	b.n	800518a <UART_Start_Receive_IT+0xaa>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	225c      	movs	r2, #92	; 0x5c
 8005186:	2100      	movs	r1, #0
 8005188:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2284      	movs	r2, #132	; 0x84
 800518e:	2100      	movs	r1, #0
 8005190:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2280      	movs	r2, #128	; 0x80
 8005196:	2122      	movs	r1, #34	; 0x22
 8005198:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800519a:	f3ef 8310 	mrs	r3, PRIMASK
 800519e:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80051a0:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051a4:	2301      	movs	r3, #1
 80051a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051aa:	f383 8810 	msr	PRIMASK, r3
}
 80051ae:	46c0      	nop			; (mov r8, r8)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	689a      	ldr	r2, [r3, #8]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2101      	movs	r1, #1
 80051bc:	430a      	orrs	r2, r1
 80051be:	609a      	str	r2, [r3, #8]
 80051c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051c2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c6:	f383 8810 	msr	PRIMASK, r3
}
 80051ca:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	689a      	ldr	r2, [r3, #8]
 80051d0:	2380      	movs	r3, #128	; 0x80
 80051d2:	015b      	lsls	r3, r3, #5
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d107      	bne.n	80051e8 <UART_Start_Receive_IT+0x108>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d103      	bne.n	80051e8 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	4a22      	ldr	r2, [pc, #136]	; (800526c <UART_Start_Receive_IT+0x18c>)
 80051e4:	669a      	str	r2, [r3, #104]	; 0x68
 80051e6:	e002      	b.n	80051ee <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	4a21      	ldr	r2, [pc, #132]	; (8005270 <UART_Start_Receive_IT+0x190>)
 80051ec:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d019      	beq.n	800522a <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051f6:	f3ef 8310 	mrs	r3, PRIMASK
 80051fa:	61fb      	str	r3, [r7, #28]
  return(result);
 80051fc:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80051fe:	637b      	str	r3, [r7, #52]	; 0x34
 8005200:	2301      	movs	r3, #1
 8005202:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005204:	6a3b      	ldr	r3, [r7, #32]
 8005206:	f383 8810 	msr	PRIMASK, r3
}
 800520a:	46c0      	nop			; (mov r8, r8)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2190      	movs	r1, #144	; 0x90
 8005218:	0049      	lsls	r1, r1, #1
 800521a:	430a      	orrs	r2, r1
 800521c:	601a      	str	r2, [r3, #0]
 800521e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005220:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005224:	f383 8810 	msr	PRIMASK, r3
}
 8005228:	e018      	b.n	800525c <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800522a:	f3ef 8310 	mrs	r3, PRIMASK
 800522e:	613b      	str	r3, [r7, #16]
  return(result);
 8005230:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005232:	63bb      	str	r3, [r7, #56]	; 0x38
 8005234:	2301      	movs	r3, #1
 8005236:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	f383 8810 	msr	PRIMASK, r3
}
 800523e:	46c0      	nop			; (mov r8, r8)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2120      	movs	r1, #32
 800524c:	430a      	orrs	r2, r1
 800524e:	601a      	str	r2, [r3, #0]
 8005250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005252:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	f383 8810 	msr	PRIMASK, r3
}
 800525a:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	0018      	movs	r0, r3
 8005260:	46bd      	mov	sp, r7
 8005262:	b010      	add	sp, #64	; 0x40
 8005264:	bd80      	pop	{r7, pc}
 8005266:	46c0      	nop			; (mov r8, r8)
 8005268:	000001ff 	.word	0x000001ff
 800526c:	08005579 	.word	0x08005579
 8005270:	080053c1 	.word	0x080053c1

08005274 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b08e      	sub	sp, #56	; 0x38
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800527c:	f3ef 8310 	mrs	r3, PRIMASK
 8005280:	617b      	str	r3, [r7, #20]
  return(result);
 8005282:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005284:	637b      	str	r3, [r7, #52]	; 0x34
 8005286:	2301      	movs	r3, #1
 8005288:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	f383 8810 	msr	PRIMASK, r3
}
 8005290:	46c0      	nop			; (mov r8, r8)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4926      	ldr	r1, [pc, #152]	; (8005338 <UART_EndRxTransfer+0xc4>)
 800529e:	400a      	ands	r2, r1
 80052a0:	601a      	str	r2, [r3, #0]
 80052a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	f383 8810 	msr	PRIMASK, r3
}
 80052ac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052ae:	f3ef 8310 	mrs	r3, PRIMASK
 80052b2:	623b      	str	r3, [r7, #32]
  return(result);
 80052b4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052b6:	633b      	str	r3, [r7, #48]	; 0x30
 80052b8:	2301      	movs	r3, #1
 80052ba:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052be:	f383 8810 	msr	PRIMASK, r3
}
 80052c2:	46c0      	nop			; (mov r8, r8)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	689a      	ldr	r2, [r3, #8]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2101      	movs	r1, #1
 80052d0:	438a      	bics	r2, r1
 80052d2:	609a      	str	r2, [r3, #8]
 80052d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052da:	f383 8810 	msr	PRIMASK, r3
}
 80052de:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d118      	bne.n	800531a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052e8:	f3ef 8310 	mrs	r3, PRIMASK
 80052ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80052ee:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052f2:	2301      	movs	r3, #1
 80052f4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f383 8810 	msr	PRIMASK, r3
}
 80052fc:	46c0      	nop			; (mov r8, r8)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2110      	movs	r1, #16
 800530a:	438a      	bics	r2, r1
 800530c:	601a      	str	r2, [r3, #0]
 800530e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005310:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	f383 8810 	msr	PRIMASK, r3
}
 8005318:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2280      	movs	r2, #128	; 0x80
 800531e:	2120      	movs	r1, #32
 8005320:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800532e:	46c0      	nop			; (mov r8, r8)
 8005330:	46bd      	mov	sp, r7
 8005332:	b00e      	add	sp, #56	; 0x38
 8005334:	bd80      	pop	{r7, pc}
 8005336:	46c0      	nop			; (mov r8, r8)
 8005338:	fffffedf 	.word	0xfffffedf

0800533c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005348:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	225a      	movs	r2, #90	; 0x5a
 800534e:	2100      	movs	r1, #0
 8005350:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2252      	movs	r2, #82	; 0x52
 8005356:	2100      	movs	r1, #0
 8005358:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	0018      	movs	r0, r3
 800535e:	f7fb fec1 	bl	80010e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005362:	46c0      	nop			; (mov r8, r8)
 8005364:	46bd      	mov	sp, r7
 8005366:	b004      	add	sp, #16
 8005368:	bd80      	pop	{r7, pc}

0800536a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800536a:	b580      	push	{r7, lr}
 800536c:	b086      	sub	sp, #24
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005372:	f3ef 8310 	mrs	r3, PRIMASK
 8005376:	60bb      	str	r3, [r7, #8]
  return(result);
 8005378:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800537a:	617b      	str	r3, [r7, #20]
 800537c:	2301      	movs	r3, #1
 800537e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f383 8810 	msr	PRIMASK, r3
}
 8005386:	46c0      	nop			; (mov r8, r8)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2140      	movs	r1, #64	; 0x40
 8005394:	438a      	bics	r2, r1
 8005396:	601a      	str	r2, [r3, #0]
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	f383 8810 	msr	PRIMASK, r3
}
 80053a2:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2220      	movs	r2, #32
 80053a8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	0018      	movs	r0, r3
 80053b4:	f7ff fb7a 	bl	8004aac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053b8:	46c0      	nop			; (mov r8, r8)
 80053ba:	46bd      	mov	sp, r7
 80053bc:	b006      	add	sp, #24
 80053be:	bd80      	pop	{r7, pc}

080053c0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b094      	sub	sp, #80	; 0x50
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80053c8:	204e      	movs	r0, #78	; 0x4e
 80053ca:	183b      	adds	r3, r7, r0
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	215c      	movs	r1, #92	; 0x5c
 80053d0:	5a52      	ldrh	r2, [r2, r1]
 80053d2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2280      	movs	r2, #128	; 0x80
 80053d8:	589b      	ldr	r3, [r3, r2]
 80053da:	2b22      	cmp	r3, #34	; 0x22
 80053dc:	d000      	beq.n	80053e0 <UART_RxISR_8BIT+0x20>
 80053de:	e0ba      	b.n	8005556 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	214c      	movs	r1, #76	; 0x4c
 80053e6:	187b      	adds	r3, r7, r1
 80053e8:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80053ea:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80053ec:	187b      	adds	r3, r7, r1
 80053ee:	881b      	ldrh	r3, [r3, #0]
 80053f0:	b2da      	uxtb	r2, r3
 80053f2:	183b      	adds	r3, r7, r0
 80053f4:	881b      	ldrh	r3, [r3, #0]
 80053f6:	b2d9      	uxtb	r1, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053fc:	400a      	ands	r2, r1
 80053fe:	b2d2      	uxtb	r2, r2
 8005400:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005406:	1c5a      	adds	r2, r3, #1
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	225a      	movs	r2, #90	; 0x5a
 8005410:	5a9b      	ldrh	r3, [r3, r2]
 8005412:	b29b      	uxth	r3, r3
 8005414:	3b01      	subs	r3, #1
 8005416:	b299      	uxth	r1, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	225a      	movs	r2, #90	; 0x5a
 800541c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	225a      	movs	r2, #90	; 0x5a
 8005422:	5a9b      	ldrh	r3, [r3, r2]
 8005424:	b29b      	uxth	r3, r3
 8005426:	2b00      	cmp	r3, #0
 8005428:	d000      	beq.n	800542c <UART_RxISR_8BIT+0x6c>
 800542a:	e09c      	b.n	8005566 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800542c:	f3ef 8310 	mrs	r3, PRIMASK
 8005430:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005434:	64bb      	str	r3, [r7, #72]	; 0x48
 8005436:	2301      	movs	r3, #1
 8005438:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800543a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543c:	f383 8810 	msr	PRIMASK, r3
}
 8005440:	46c0      	nop			; (mov r8, r8)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4948      	ldr	r1, [pc, #288]	; (8005570 <UART_RxISR_8BIT+0x1b0>)
 800544e:	400a      	ands	r2, r1
 8005450:	601a      	str	r2, [r3, #0]
 8005452:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005454:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005458:	f383 8810 	msr	PRIMASK, r3
}
 800545c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800545e:	f3ef 8310 	mrs	r3, PRIMASK
 8005462:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005464:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005466:	647b      	str	r3, [r7, #68]	; 0x44
 8005468:	2301      	movs	r3, #1
 800546a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800546c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800546e:	f383 8810 	msr	PRIMASK, r3
}
 8005472:	46c0      	nop			; (mov r8, r8)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	689a      	ldr	r2, [r3, #8]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2101      	movs	r1, #1
 8005480:	438a      	bics	r2, r1
 8005482:	609a      	str	r2, [r3, #8]
 8005484:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005486:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800548a:	f383 8810 	msr	PRIMASK, r3
}
 800548e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2280      	movs	r2, #128	; 0x80
 8005494:	2120      	movs	r1, #32
 8005496:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	685a      	ldr	r2, [r3, #4]
 80054aa:	2380      	movs	r3, #128	; 0x80
 80054ac:	041b      	lsls	r3, r3, #16
 80054ae:	4013      	ands	r3, r2
 80054b0:	d018      	beq.n	80054e4 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054b2:	f3ef 8310 	mrs	r3, PRIMASK
 80054b6:	61bb      	str	r3, [r7, #24]
  return(result);
 80054b8:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80054ba:	643b      	str	r3, [r7, #64]	; 0x40
 80054bc:	2301      	movs	r3, #1
 80054be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	f383 8810 	msr	PRIMASK, r3
}
 80054c6:	46c0      	nop			; (mov r8, r8)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4928      	ldr	r1, [pc, #160]	; (8005574 <UART_RxISR_8BIT+0x1b4>)
 80054d4:	400a      	ands	r2, r1
 80054d6:	601a      	str	r2, [r3, #0]
 80054d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054da:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054dc:	6a3b      	ldr	r3, [r7, #32]
 80054de:	f383 8810 	msr	PRIMASK, r3
}
 80054e2:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d12f      	bne.n	800554c <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054f2:	f3ef 8310 	mrs	r3, PRIMASK
 80054f6:	60fb      	str	r3, [r7, #12]
  return(result);
 80054f8:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054fc:	2301      	movs	r3, #1
 80054fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	f383 8810 	msr	PRIMASK, r3
}
 8005506:	46c0      	nop			; (mov r8, r8)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2110      	movs	r1, #16
 8005514:	438a      	bics	r2, r1
 8005516:	601a      	str	r2, [r3, #0]
 8005518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800551a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	f383 8810 	msr	PRIMASK, r3
}
 8005522:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	69db      	ldr	r3, [r3, #28]
 800552a:	2210      	movs	r2, #16
 800552c:	4013      	ands	r3, r2
 800552e:	2b10      	cmp	r3, #16
 8005530:	d103      	bne.n	800553a <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2210      	movs	r2, #16
 8005538:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2258      	movs	r2, #88	; 0x58
 800553e:	5a9a      	ldrh	r2, [r3, r2]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	0011      	movs	r1, r2
 8005544:	0018      	movs	r0, r3
 8005546:	f7ff fab9 	bl	8004abc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800554a:	e00c      	b.n	8005566 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	0018      	movs	r0, r3
 8005550:	f7fb fd7a 	bl	8001048 <HAL_UART_RxCpltCallback>
}
 8005554:	e007      	b.n	8005566 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	699a      	ldr	r2, [r3, #24]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2108      	movs	r1, #8
 8005562:	430a      	orrs	r2, r1
 8005564:	619a      	str	r2, [r3, #24]
}
 8005566:	46c0      	nop			; (mov r8, r8)
 8005568:	46bd      	mov	sp, r7
 800556a:	b014      	add	sp, #80	; 0x50
 800556c:	bd80      	pop	{r7, pc}
 800556e:	46c0      	nop			; (mov r8, r8)
 8005570:	fffffedf 	.word	0xfffffedf
 8005574:	fbffffff 	.word	0xfbffffff

08005578 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b094      	sub	sp, #80	; 0x50
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005580:	204e      	movs	r0, #78	; 0x4e
 8005582:	183b      	adds	r3, r7, r0
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	215c      	movs	r1, #92	; 0x5c
 8005588:	5a52      	ldrh	r2, [r2, r1]
 800558a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2280      	movs	r2, #128	; 0x80
 8005590:	589b      	ldr	r3, [r3, r2]
 8005592:	2b22      	cmp	r3, #34	; 0x22
 8005594:	d000      	beq.n	8005598 <UART_RxISR_16BIT+0x20>
 8005596:	e0ba      	b.n	800570e <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	214c      	movs	r1, #76	; 0x4c
 800559e:	187b      	adds	r3, r7, r1
 80055a0:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80055a2:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a8:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 80055aa:	187b      	adds	r3, r7, r1
 80055ac:	183a      	adds	r2, r7, r0
 80055ae:	881b      	ldrh	r3, [r3, #0]
 80055b0:	8812      	ldrh	r2, [r2, #0]
 80055b2:	4013      	ands	r3, r2
 80055b4:	b29a      	uxth	r2, r3
 80055b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055b8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055be:	1c9a      	adds	r2, r3, #2
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	225a      	movs	r2, #90	; 0x5a
 80055c8:	5a9b      	ldrh	r3, [r3, r2]
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	3b01      	subs	r3, #1
 80055ce:	b299      	uxth	r1, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	225a      	movs	r2, #90	; 0x5a
 80055d4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	225a      	movs	r2, #90	; 0x5a
 80055da:	5a9b      	ldrh	r3, [r3, r2]
 80055dc:	b29b      	uxth	r3, r3
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d000      	beq.n	80055e4 <UART_RxISR_16BIT+0x6c>
 80055e2:	e09c      	b.n	800571e <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055e4:	f3ef 8310 	mrs	r3, PRIMASK
 80055e8:	623b      	str	r3, [r7, #32]
  return(result);
 80055ea:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055ec:	647b      	str	r3, [r7, #68]	; 0x44
 80055ee:	2301      	movs	r3, #1
 80055f0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f4:	f383 8810 	msr	PRIMASK, r3
}
 80055f8:	46c0      	nop			; (mov r8, r8)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4948      	ldr	r1, [pc, #288]	; (8005728 <UART_RxISR_16BIT+0x1b0>)
 8005606:	400a      	ands	r2, r1
 8005608:	601a      	str	r2, [r3, #0]
 800560a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800560c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800560e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005610:	f383 8810 	msr	PRIMASK, r3
}
 8005614:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005616:	f3ef 8310 	mrs	r3, PRIMASK
 800561a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800561c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800561e:	643b      	str	r3, [r7, #64]	; 0x40
 8005620:	2301      	movs	r3, #1
 8005622:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005626:	f383 8810 	msr	PRIMASK, r3
}
 800562a:	46c0      	nop			; (mov r8, r8)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	689a      	ldr	r2, [r3, #8]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2101      	movs	r1, #1
 8005638:	438a      	bics	r2, r1
 800563a:	609a      	str	r2, [r3, #8]
 800563c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800563e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005642:	f383 8810 	msr	PRIMASK, r3
}
 8005646:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2280      	movs	r2, #128	; 0x80
 800564c:	2120      	movs	r1, #32
 800564e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	685a      	ldr	r2, [r3, #4]
 8005662:	2380      	movs	r3, #128	; 0x80
 8005664:	041b      	lsls	r3, r3, #16
 8005666:	4013      	ands	r3, r2
 8005668:	d018      	beq.n	800569c <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800566a:	f3ef 8310 	mrs	r3, PRIMASK
 800566e:	617b      	str	r3, [r7, #20]
  return(result);
 8005670:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005672:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005674:	2301      	movs	r3, #1
 8005676:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	f383 8810 	msr	PRIMASK, r3
}
 800567e:	46c0      	nop			; (mov r8, r8)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4928      	ldr	r1, [pc, #160]	; (800572c <UART_RxISR_16BIT+0x1b4>)
 800568c:	400a      	ands	r2, r1
 800568e:	601a      	str	r2, [r3, #0]
 8005690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005692:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	f383 8810 	msr	PRIMASK, r3
}
 800569a:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d12f      	bne.n	8005704 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056aa:	f3ef 8310 	mrs	r3, PRIMASK
 80056ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80056b0:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80056b4:	2301      	movs	r3, #1
 80056b6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f383 8810 	msr	PRIMASK, r3
}
 80056be:	46c0      	nop			; (mov r8, r8)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	2110      	movs	r1, #16
 80056cc:	438a      	bics	r2, r1
 80056ce:	601a      	str	r2, [r3, #0]
 80056d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	f383 8810 	msr	PRIMASK, r3
}
 80056da:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	69db      	ldr	r3, [r3, #28]
 80056e2:	2210      	movs	r2, #16
 80056e4:	4013      	ands	r3, r2
 80056e6:	2b10      	cmp	r3, #16
 80056e8:	d103      	bne.n	80056f2 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2210      	movs	r2, #16
 80056f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2258      	movs	r2, #88	; 0x58
 80056f6:	5a9a      	ldrh	r2, [r3, r2]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	0011      	movs	r1, r2
 80056fc:	0018      	movs	r0, r3
 80056fe:	f7ff f9dd 	bl	8004abc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005702:	e00c      	b.n	800571e <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	0018      	movs	r0, r3
 8005708:	f7fb fc9e 	bl	8001048 <HAL_UART_RxCpltCallback>
}
 800570c:	e007      	b.n	800571e <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	699a      	ldr	r2, [r3, #24]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2108      	movs	r1, #8
 800571a:	430a      	orrs	r2, r1
 800571c:	619a      	str	r2, [r3, #24]
}
 800571e:	46c0      	nop			; (mov r8, r8)
 8005720:	46bd      	mov	sp, r7
 8005722:	b014      	add	sp, #80	; 0x50
 8005724:	bd80      	pop	{r7, pc}
 8005726:	46c0      	nop			; (mov r8, r8)
 8005728:	fffffedf 	.word	0xfffffedf
 800572c:	fbffffff 	.word	0xfbffffff

08005730 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005738:	46c0      	nop			; (mov r8, r8)
 800573a:	46bd      	mov	sp, r7
 800573c:	b002      	add	sp, #8
 800573e:	bd80      	pop	{r7, pc}

08005740 <__errno>:
 8005740:	4b01      	ldr	r3, [pc, #4]	; (8005748 <__errno+0x8>)
 8005742:	6818      	ldr	r0, [r3, #0]
 8005744:	4770      	bx	lr
 8005746:	46c0      	nop			; (mov r8, r8)
 8005748:	2000000c 	.word	0x2000000c

0800574c <__libc_init_array>:
 800574c:	b570      	push	{r4, r5, r6, lr}
 800574e:	2600      	movs	r6, #0
 8005750:	4d0c      	ldr	r5, [pc, #48]	; (8005784 <__libc_init_array+0x38>)
 8005752:	4c0d      	ldr	r4, [pc, #52]	; (8005788 <__libc_init_array+0x3c>)
 8005754:	1b64      	subs	r4, r4, r5
 8005756:	10a4      	asrs	r4, r4, #2
 8005758:	42a6      	cmp	r6, r4
 800575a:	d109      	bne.n	8005770 <__libc_init_array+0x24>
 800575c:	2600      	movs	r6, #0
 800575e:	f000 f8f1 	bl	8005944 <_init>
 8005762:	4d0a      	ldr	r5, [pc, #40]	; (800578c <__libc_init_array+0x40>)
 8005764:	4c0a      	ldr	r4, [pc, #40]	; (8005790 <__libc_init_array+0x44>)
 8005766:	1b64      	subs	r4, r4, r5
 8005768:	10a4      	asrs	r4, r4, #2
 800576a:	42a6      	cmp	r6, r4
 800576c:	d105      	bne.n	800577a <__libc_init_array+0x2e>
 800576e:	bd70      	pop	{r4, r5, r6, pc}
 8005770:	00b3      	lsls	r3, r6, #2
 8005772:	58eb      	ldr	r3, [r5, r3]
 8005774:	4798      	blx	r3
 8005776:	3601      	adds	r6, #1
 8005778:	e7ee      	b.n	8005758 <__libc_init_array+0xc>
 800577a:	00b3      	lsls	r3, r6, #2
 800577c:	58eb      	ldr	r3, [r5, r3]
 800577e:	4798      	blx	r3
 8005780:	3601      	adds	r6, #1
 8005782:	e7f2      	b.n	800576a <__libc_init_array+0x1e>
 8005784:	080059a8 	.word	0x080059a8
 8005788:	080059a8 	.word	0x080059a8
 800578c:	080059a8 	.word	0x080059a8
 8005790:	080059ac 	.word	0x080059ac

08005794 <malloc>:
 8005794:	b510      	push	{r4, lr}
 8005796:	4b03      	ldr	r3, [pc, #12]	; (80057a4 <malloc+0x10>)
 8005798:	0001      	movs	r1, r0
 800579a:	6818      	ldr	r0, [r3, #0]
 800579c:	f000 f838 	bl	8005810 <_malloc_r>
 80057a0:	bd10      	pop	{r4, pc}
 80057a2:	46c0      	nop			; (mov r8, r8)
 80057a4:	2000000c 	.word	0x2000000c

080057a8 <memcpy>:
 80057a8:	2300      	movs	r3, #0
 80057aa:	b510      	push	{r4, lr}
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d100      	bne.n	80057b2 <memcpy+0xa>
 80057b0:	bd10      	pop	{r4, pc}
 80057b2:	5ccc      	ldrb	r4, [r1, r3]
 80057b4:	54c4      	strb	r4, [r0, r3]
 80057b6:	3301      	adds	r3, #1
 80057b8:	e7f8      	b.n	80057ac <memcpy+0x4>

080057ba <memset>:
 80057ba:	0003      	movs	r3, r0
 80057bc:	1882      	adds	r2, r0, r2
 80057be:	4293      	cmp	r3, r2
 80057c0:	d100      	bne.n	80057c4 <memset+0xa>
 80057c2:	4770      	bx	lr
 80057c4:	7019      	strb	r1, [r3, #0]
 80057c6:	3301      	adds	r3, #1
 80057c8:	e7f9      	b.n	80057be <memset+0x4>
	...

080057cc <sbrk_aligned>:
 80057cc:	b570      	push	{r4, r5, r6, lr}
 80057ce:	4e0f      	ldr	r6, [pc, #60]	; (800580c <sbrk_aligned+0x40>)
 80057d0:	000d      	movs	r5, r1
 80057d2:	6831      	ldr	r1, [r6, #0]
 80057d4:	0004      	movs	r4, r0
 80057d6:	2900      	cmp	r1, #0
 80057d8:	d102      	bne.n	80057e0 <sbrk_aligned+0x14>
 80057da:	f000 f88f 	bl	80058fc <_sbrk_r>
 80057de:	6030      	str	r0, [r6, #0]
 80057e0:	0029      	movs	r1, r5
 80057e2:	0020      	movs	r0, r4
 80057e4:	f000 f88a 	bl	80058fc <_sbrk_r>
 80057e8:	1c43      	adds	r3, r0, #1
 80057ea:	d00a      	beq.n	8005802 <sbrk_aligned+0x36>
 80057ec:	2303      	movs	r3, #3
 80057ee:	1cc5      	adds	r5, r0, #3
 80057f0:	439d      	bics	r5, r3
 80057f2:	42a8      	cmp	r0, r5
 80057f4:	d007      	beq.n	8005806 <sbrk_aligned+0x3a>
 80057f6:	1a29      	subs	r1, r5, r0
 80057f8:	0020      	movs	r0, r4
 80057fa:	f000 f87f 	bl	80058fc <_sbrk_r>
 80057fe:	1c43      	adds	r3, r0, #1
 8005800:	d101      	bne.n	8005806 <sbrk_aligned+0x3a>
 8005802:	2501      	movs	r5, #1
 8005804:	426d      	negs	r5, r5
 8005806:	0028      	movs	r0, r5
 8005808:	bd70      	pop	{r4, r5, r6, pc}
 800580a:	46c0      	nop			; (mov r8, r8)
 800580c:	20000cf4 	.word	0x20000cf4

08005810 <_malloc_r>:
 8005810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005812:	2203      	movs	r2, #3
 8005814:	1ccb      	adds	r3, r1, #3
 8005816:	4393      	bics	r3, r2
 8005818:	3308      	adds	r3, #8
 800581a:	0006      	movs	r6, r0
 800581c:	001f      	movs	r7, r3
 800581e:	2b0c      	cmp	r3, #12
 8005820:	d232      	bcs.n	8005888 <_malloc_r+0x78>
 8005822:	270c      	movs	r7, #12
 8005824:	42b9      	cmp	r1, r7
 8005826:	d831      	bhi.n	800588c <_malloc_r+0x7c>
 8005828:	0030      	movs	r0, r6
 800582a:	f000 f879 	bl	8005920 <__malloc_lock>
 800582e:	4d32      	ldr	r5, [pc, #200]	; (80058f8 <_malloc_r+0xe8>)
 8005830:	682b      	ldr	r3, [r5, #0]
 8005832:	001c      	movs	r4, r3
 8005834:	2c00      	cmp	r4, #0
 8005836:	d12e      	bne.n	8005896 <_malloc_r+0x86>
 8005838:	0039      	movs	r1, r7
 800583a:	0030      	movs	r0, r6
 800583c:	f7ff ffc6 	bl	80057cc <sbrk_aligned>
 8005840:	0004      	movs	r4, r0
 8005842:	1c43      	adds	r3, r0, #1
 8005844:	d11e      	bne.n	8005884 <_malloc_r+0x74>
 8005846:	682c      	ldr	r4, [r5, #0]
 8005848:	0025      	movs	r5, r4
 800584a:	2d00      	cmp	r5, #0
 800584c:	d14a      	bne.n	80058e4 <_malloc_r+0xd4>
 800584e:	6823      	ldr	r3, [r4, #0]
 8005850:	0029      	movs	r1, r5
 8005852:	18e3      	adds	r3, r4, r3
 8005854:	0030      	movs	r0, r6
 8005856:	9301      	str	r3, [sp, #4]
 8005858:	f000 f850 	bl	80058fc <_sbrk_r>
 800585c:	9b01      	ldr	r3, [sp, #4]
 800585e:	4283      	cmp	r3, r0
 8005860:	d143      	bne.n	80058ea <_malloc_r+0xda>
 8005862:	6823      	ldr	r3, [r4, #0]
 8005864:	3703      	adds	r7, #3
 8005866:	1aff      	subs	r7, r7, r3
 8005868:	2303      	movs	r3, #3
 800586a:	439f      	bics	r7, r3
 800586c:	3708      	adds	r7, #8
 800586e:	2f0c      	cmp	r7, #12
 8005870:	d200      	bcs.n	8005874 <_malloc_r+0x64>
 8005872:	270c      	movs	r7, #12
 8005874:	0039      	movs	r1, r7
 8005876:	0030      	movs	r0, r6
 8005878:	f7ff ffa8 	bl	80057cc <sbrk_aligned>
 800587c:	1c43      	adds	r3, r0, #1
 800587e:	d034      	beq.n	80058ea <_malloc_r+0xda>
 8005880:	6823      	ldr	r3, [r4, #0]
 8005882:	19df      	adds	r7, r3, r7
 8005884:	6027      	str	r7, [r4, #0]
 8005886:	e013      	b.n	80058b0 <_malloc_r+0xa0>
 8005888:	2b00      	cmp	r3, #0
 800588a:	dacb      	bge.n	8005824 <_malloc_r+0x14>
 800588c:	230c      	movs	r3, #12
 800588e:	2500      	movs	r5, #0
 8005890:	6033      	str	r3, [r6, #0]
 8005892:	0028      	movs	r0, r5
 8005894:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005896:	6822      	ldr	r2, [r4, #0]
 8005898:	1bd1      	subs	r1, r2, r7
 800589a:	d420      	bmi.n	80058de <_malloc_r+0xce>
 800589c:	290b      	cmp	r1, #11
 800589e:	d917      	bls.n	80058d0 <_malloc_r+0xc0>
 80058a0:	19e2      	adds	r2, r4, r7
 80058a2:	6027      	str	r7, [r4, #0]
 80058a4:	42a3      	cmp	r3, r4
 80058a6:	d111      	bne.n	80058cc <_malloc_r+0xbc>
 80058a8:	602a      	str	r2, [r5, #0]
 80058aa:	6863      	ldr	r3, [r4, #4]
 80058ac:	6011      	str	r1, [r2, #0]
 80058ae:	6053      	str	r3, [r2, #4]
 80058b0:	0030      	movs	r0, r6
 80058b2:	0025      	movs	r5, r4
 80058b4:	f000 f83c 	bl	8005930 <__malloc_unlock>
 80058b8:	2207      	movs	r2, #7
 80058ba:	350b      	adds	r5, #11
 80058bc:	1d23      	adds	r3, r4, #4
 80058be:	4395      	bics	r5, r2
 80058c0:	1aea      	subs	r2, r5, r3
 80058c2:	429d      	cmp	r5, r3
 80058c4:	d0e5      	beq.n	8005892 <_malloc_r+0x82>
 80058c6:	1b5b      	subs	r3, r3, r5
 80058c8:	50a3      	str	r3, [r4, r2]
 80058ca:	e7e2      	b.n	8005892 <_malloc_r+0x82>
 80058cc:	605a      	str	r2, [r3, #4]
 80058ce:	e7ec      	b.n	80058aa <_malloc_r+0x9a>
 80058d0:	6862      	ldr	r2, [r4, #4]
 80058d2:	42a3      	cmp	r3, r4
 80058d4:	d101      	bne.n	80058da <_malloc_r+0xca>
 80058d6:	602a      	str	r2, [r5, #0]
 80058d8:	e7ea      	b.n	80058b0 <_malloc_r+0xa0>
 80058da:	605a      	str	r2, [r3, #4]
 80058dc:	e7e8      	b.n	80058b0 <_malloc_r+0xa0>
 80058de:	0023      	movs	r3, r4
 80058e0:	6864      	ldr	r4, [r4, #4]
 80058e2:	e7a7      	b.n	8005834 <_malloc_r+0x24>
 80058e4:	002c      	movs	r4, r5
 80058e6:	686d      	ldr	r5, [r5, #4]
 80058e8:	e7af      	b.n	800584a <_malloc_r+0x3a>
 80058ea:	230c      	movs	r3, #12
 80058ec:	0030      	movs	r0, r6
 80058ee:	6033      	str	r3, [r6, #0]
 80058f0:	f000 f81e 	bl	8005930 <__malloc_unlock>
 80058f4:	e7cd      	b.n	8005892 <_malloc_r+0x82>
 80058f6:	46c0      	nop			; (mov r8, r8)
 80058f8:	20000cf0 	.word	0x20000cf0

080058fc <_sbrk_r>:
 80058fc:	2300      	movs	r3, #0
 80058fe:	b570      	push	{r4, r5, r6, lr}
 8005900:	4d06      	ldr	r5, [pc, #24]	; (800591c <_sbrk_r+0x20>)
 8005902:	0004      	movs	r4, r0
 8005904:	0008      	movs	r0, r1
 8005906:	602b      	str	r3, [r5, #0]
 8005908:	f7fb fe00 	bl	800150c <_sbrk>
 800590c:	1c43      	adds	r3, r0, #1
 800590e:	d103      	bne.n	8005918 <_sbrk_r+0x1c>
 8005910:	682b      	ldr	r3, [r5, #0]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d000      	beq.n	8005918 <_sbrk_r+0x1c>
 8005916:	6023      	str	r3, [r4, #0]
 8005918:	bd70      	pop	{r4, r5, r6, pc}
 800591a:	46c0      	nop			; (mov r8, r8)
 800591c:	20000cf8 	.word	0x20000cf8

08005920 <__malloc_lock>:
 8005920:	b510      	push	{r4, lr}
 8005922:	4802      	ldr	r0, [pc, #8]	; (800592c <__malloc_lock+0xc>)
 8005924:	f000 f80c 	bl	8005940 <__retarget_lock_acquire_recursive>
 8005928:	bd10      	pop	{r4, pc}
 800592a:	46c0      	nop			; (mov r8, r8)
 800592c:	20000cfc 	.word	0x20000cfc

08005930 <__malloc_unlock>:
 8005930:	b510      	push	{r4, lr}
 8005932:	4802      	ldr	r0, [pc, #8]	; (800593c <__malloc_unlock+0xc>)
 8005934:	f000 f805 	bl	8005942 <__retarget_lock_release_recursive>
 8005938:	bd10      	pop	{r4, pc}
 800593a:	46c0      	nop			; (mov r8, r8)
 800593c:	20000cfc 	.word	0x20000cfc

08005940 <__retarget_lock_acquire_recursive>:
 8005940:	4770      	bx	lr

08005942 <__retarget_lock_release_recursive>:
 8005942:	4770      	bx	lr

08005944 <_init>:
 8005944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005946:	46c0      	nop			; (mov r8, r8)
 8005948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800594a:	bc08      	pop	{r3}
 800594c:	469e      	mov	lr, r3
 800594e:	4770      	bx	lr

08005950 <_fini>:
 8005950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005952:	46c0      	nop			; (mov r8, r8)
 8005954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005956:	bc08      	pop	{r3}
 8005958:	469e      	mov	lr, r3
 800595a:	4770      	bx	lr
