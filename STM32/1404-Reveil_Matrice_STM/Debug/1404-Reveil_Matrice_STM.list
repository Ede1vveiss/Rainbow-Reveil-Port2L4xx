
1404-Reveil_Matrice_STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ac0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08005b80  08005b80  00015b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005be4  08005be4  00020220  2**0
                  CONTENTS
  4 .ARM          00000000  08005be4  08005be4  00020220  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005be4  08005be4  00020220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005be4  08005be4  00015be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005be8  08005be8  00015be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  08005bec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c90  20000220  08005e0c  00020220  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000eb0  08005e0c  00020eb0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ffc  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002653  00000000  00000000  00031244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef8  00000000  00000000  00033898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd8  00000000  00000000  00034790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a5d5  00000000  00000000  00035568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000169e1  00000000  00000000  0004fb3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009463a  00000000  00000000  0006651e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fab58  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003740  00000000  00000000  000faba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000220 	.word	0x20000220
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005b68 	.word	0x08005b68

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000224 	.word	0x20000224
 8000104:	08005b68 	.word	0x08005b68

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <sendCanvas>:
}



// Fonction pour mettre à jour l'affichage LED
void sendCanvas(Canvas* canvas) {
 80003f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003f6:	b085      	sub	sp, #20
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
    // Copiez les pixels du canevas vers l'écran LED
    for (uint16_t i = 0; i < canvas->numCols * canvas->numRows -1; i++) {  // -1 car résolution bug affichage photodiode inexistante
 80003fc:	230e      	movs	r3, #14
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	2200      	movs	r2, #0
 8000402:	801a      	strh	r2, [r3, #0]
 8000404:	e026      	b.n	8000454 <sendCanvas+0x60>
        setLEDcolor(i, canvas -> pixels[i].R, canvas -> pixels[i].G, canvas -> pixels[i].B);
 8000406:	260e      	movs	r6, #14
 8000408:	19bb      	adds	r3, r7, r6
 800040a:	8818      	ldrh	r0, [r3, #0]
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	6899      	ldr	r1, [r3, #8]
 8000410:	19bb      	adds	r3, r7, r6
 8000412:	881a      	ldrh	r2, [r3, #0]
 8000414:	0013      	movs	r3, r2
 8000416:	005b      	lsls	r3, r3, #1
 8000418:	189b      	adds	r3, r3, r2
 800041a:	18cb      	adds	r3, r1, r3
 800041c:	781c      	ldrb	r4, [r3, #0]
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	6899      	ldr	r1, [r3, #8]
 8000422:	19bb      	adds	r3, r7, r6
 8000424:	881a      	ldrh	r2, [r3, #0]
 8000426:	0013      	movs	r3, r2
 8000428:	005b      	lsls	r3, r3, #1
 800042a:	189b      	adds	r3, r3, r2
 800042c:	18cb      	adds	r3, r1, r3
 800042e:	785d      	ldrb	r5, [r3, #1]
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	6899      	ldr	r1, [r3, #8]
 8000434:	19bb      	adds	r3, r7, r6
 8000436:	881a      	ldrh	r2, [r3, #0]
 8000438:	0013      	movs	r3, r2
 800043a:	005b      	lsls	r3, r3, #1
 800043c:	189b      	adds	r3, r3, r2
 800043e:	18cb      	adds	r3, r1, r3
 8000440:	789b      	ldrb	r3, [r3, #2]
 8000442:	002a      	movs	r2, r5
 8000444:	0021      	movs	r1, r4
 8000446:	f000 fb31 	bl	8000aac <setLEDcolor>
    for (uint16_t i = 0; i < canvas->numCols * canvas->numRows -1; i++) {  // -1 car résolution bug affichage photodiode inexistante
 800044a:	19bb      	adds	r3, r7, r6
 800044c:	881a      	ldrh	r2, [r3, #0]
 800044e:	19bb      	adds	r3, r7, r6
 8000450:	3201      	adds	r2, #1
 8000452:	801a      	strh	r2, [r3, #0]
 8000454:	230e      	movs	r3, #14
 8000456:	18fb      	adds	r3, r7, r3
 8000458:	881a      	ldrh	r2, [r3, #0]
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	6819      	ldr	r1, [r3, #0]
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	685b      	ldr	r3, [r3, #4]
 8000462:	434b      	muls	r3, r1
 8000464:	3b01      	subs	r3, #1
 8000466:	429a      	cmp	r2, r3
 8000468:	dbcd      	blt.n	8000406 <sendCanvas+0x12>
    }
}
 800046a:	46c0      	nop			; (mov r8, r8)
 800046c:	46c0      	nop			; (mov r8, r8)
 800046e:	46bd      	mov	sp, r7
 8000470:	b005      	add	sp, #20
 8000472:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000474 <getPixel>:

Pixel* getPixel(Canvas* canvas, int x, int y) {
 8000474:	b580      	push	{r7, lr}
 8000476:	b084      	sub	sp, #16
 8000478:	af00      	add	r7, sp, #0
 800047a:	60f8      	str	r0, [r7, #12]
 800047c:	60b9      	str	r1, [r7, #8]
 800047e:	607a      	str	r2, [r7, #4]
    if (x > 0 && x <= canvas->numCols && y > 0 && y <= canvas->numRows) {
 8000480:	68bb      	ldr	r3, [r7, #8]
 8000482:	2b00      	cmp	r3, #0
 8000484:	dd1c      	ble.n	80004c0 <getPixel+0x4c>
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	68ba      	ldr	r2, [r7, #8]
 800048c:	429a      	cmp	r2, r3
 800048e:	dc17      	bgt.n	80004c0 <getPixel+0x4c>
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	2b00      	cmp	r3, #0
 8000494:	dd14      	ble.n	80004c0 <getPixel+0x4c>
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	685b      	ldr	r3, [r3, #4]
 800049a:	687a      	ldr	r2, [r7, #4]
 800049c:	429a      	cmp	r2, r3
 800049e:	dc0f      	bgt.n	80004c0 <getPixel+0x4c>
        return &canvas->pixels[(x-1)*canvas->numRows+(y-1)];
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	689a      	ldr	r2, [r3, #8]
 80004a4:	68bb      	ldr	r3, [r7, #8]
 80004a6:	1e59      	subs	r1, r3, #1
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	685b      	ldr	r3, [r3, #4]
 80004ac:	4359      	muls	r1, r3
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	3b01      	subs	r3, #1
 80004b2:	18cb      	adds	r3, r1, r3
 80004b4:	0019      	movs	r1, r3
 80004b6:	000b      	movs	r3, r1
 80004b8:	005b      	lsls	r3, r3, #1
 80004ba:	185b      	adds	r3, r3, r1
 80004bc:	18d3      	adds	r3, r2, r3
 80004be:	e000      	b.n	80004c2 <getPixel+0x4e>
    } else {
        return NULL; // Coordonnées hors limites
 80004c0:	2300      	movs	r3, #0
    }
}
 80004c2:	0018      	movs	r0, r3
 80004c4:	46bd      	mov	sp, r7
 80004c6:	b004      	add	sp, #16
 80004c8:	bd80      	pop	{r7, pc}

080004ca <colorDiagonal>:


void colorDiagonal(Canvas* canvas, Pixel encre, uint8_t diagSum) {
 80004ca:	b580      	push	{r7, lr}
 80004cc:	b088      	sub	sp, #32
 80004ce:	af00      	add	r7, sp, #0
 80004d0:	60f8      	str	r0, [r7, #12]
 80004d2:	2308      	movs	r3, #8
 80004d4:	18fb      	adds	r3, r7, r3
 80004d6:	6019      	str	r1, [r3, #0]
 80004d8:	1dfb      	adds	r3, r7, #7
 80004da:	701a      	strb	r2, [r3, #0]


    // Parcourir la diagonale où x + y == diagSum
    for (int x = 0; x <= canvas->numCols; x++) {
 80004dc:	2300      	movs	r3, #0
 80004de:	61fb      	str	r3, [r7, #28]
 80004e0:	e023      	b.n	800052a <colorDiagonal+0x60>
        int y = diagSum - x; // Calcul de la coordonnée y correspondante
 80004e2:	1dfb      	adds	r3, r7, #7
 80004e4:	781a      	ldrb	r2, [r3, #0]
 80004e6:	69fb      	ldr	r3, [r7, #28]
 80004e8:	1ad3      	subs	r3, r2, r3
 80004ea:	61bb      	str	r3, [r7, #24]
        if (y >= 0 && y <= canvas->numRows) {
 80004ec:	69bb      	ldr	r3, [r7, #24]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	db18      	blt.n	8000524 <colorDiagonal+0x5a>
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	685b      	ldr	r3, [r3, #4]
 80004f6:	69ba      	ldr	r2, [r7, #24]
 80004f8:	429a      	cmp	r2, r3
 80004fa:	dc13      	bgt.n	8000524 <colorDiagonal+0x5a>
            Pixel* pixel = getPixel(canvas, x, y);
 80004fc:	69ba      	ldr	r2, [r7, #24]
 80004fe:	69f9      	ldr	r1, [r7, #28]
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	0018      	movs	r0, r3
 8000504:	f7ff ffb6 	bl	8000474 <getPixel>
 8000508:	0003      	movs	r3, r0
 800050a:	617b      	str	r3, [r7, #20]
            if (pixel) {
 800050c:	697b      	ldr	r3, [r7, #20]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d008      	beq.n	8000524 <colorDiagonal+0x5a>
                // Mettre à jour la couleur
                *pixel=encre;
 8000512:	697a      	ldr	r2, [r7, #20]
 8000514:	2308      	movs	r3, #8
 8000516:	18fb      	adds	r3, r7, r3
 8000518:	0010      	movs	r0, r2
 800051a:	0019      	movs	r1, r3
 800051c:	2303      	movs	r3, #3
 800051e:	001a      	movs	r2, r3
 8000520:	f005 fa54 	bl	80059cc <memcpy>
    for (int x = 0; x <= canvas->numCols; x++) {
 8000524:	69fb      	ldr	r3, [r7, #28]
 8000526:	3301      	adds	r3, #1
 8000528:	61fb      	str	r3, [r7, #28]
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	69fa      	ldr	r2, [r7, #28]
 8000530:	429a      	cmp	r2, r3
 8000532:	ddd6      	ble.n	80004e2 <colorDiagonal+0x18>
            }
        }
    }
}
 8000534:	46c0      	nop			; (mov r8, r8)
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	46bd      	mov	sp, r7
 800053a:	b008      	add	sp, #32
 800053c:	bd80      	pop	{r7, pc}

0800053e <drawRectangle>:
//

// Fonction pour dessiner un rectangle
void drawRectangle(Canvas* canvas, int W,int H, int X, int Y, Pixel BorderInk, Pixel FillInk) {
 800053e:	b590      	push	{r4, r7, lr}
 8000540:	b087      	sub	sp, #28
 8000542:	af00      	add	r7, sp, #0
 8000544:	60f8      	str	r0, [r7, #12]
 8000546:	60b9      	str	r1, [r7, #8]
 8000548:	607a      	str	r2, [r7, #4]
 800054a:	603b      	str	r3, [r7, #0]
    if (canvas == NULL || H <= 0 || W <= 0 || X < 0 || Y < 0) {
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d100      	bne.n	8000554 <drawRectangle+0x16>
 8000552:	e06d      	b.n	8000630 <drawRectangle+0xf2>
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	2b00      	cmp	r3, #0
 8000558:	dc00      	bgt.n	800055c <drawRectangle+0x1e>
 800055a:	e069      	b.n	8000630 <drawRectangle+0xf2>
 800055c:	68bb      	ldr	r3, [r7, #8]
 800055e:	2b00      	cmp	r3, #0
 8000560:	dd66      	ble.n	8000630 <drawRectangle+0xf2>
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	2b00      	cmp	r3, #0
 8000566:	db63      	blt.n	8000630 <drawRectangle+0xf2>
 8000568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800056a:	2b00      	cmp	r3, #0
 800056c:	db60      	blt.n	8000630 <drawRectangle+0xf2>
        return;
    }

    int i, j;

    for (i = Y; i < Y + H; i++) {
 800056e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000570:	617b      	str	r3, [r7, #20]
 8000572:	e056      	b.n	8000622 <drawRectangle+0xe4>
        for (j = X; j < X + W; j++) {
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	613b      	str	r3, [r7, #16]
 8000578:	e04a      	b.n	8000610 <drawRectangle+0xd2>
            if (i == Y || i == Y + H - 1 || j == X || j == X + W - 1) {
 800057a:	697a      	ldr	r2, [r7, #20]
 800057c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800057e:	429a      	cmp	r2, r3
 8000580:	d011      	beq.n	80005a6 <drawRectangle+0x68>
 8000582:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	18d3      	adds	r3, r2, r3
 8000588:	3b01      	subs	r3, #1
 800058a:	697a      	ldr	r2, [r7, #20]
 800058c:	429a      	cmp	r2, r3
 800058e:	d00a      	beq.n	80005a6 <drawRectangle+0x68>
 8000590:	693a      	ldr	r2, [r7, #16]
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	429a      	cmp	r2, r3
 8000596:	d006      	beq.n	80005a6 <drawRectangle+0x68>
 8000598:	683a      	ldr	r2, [r7, #0]
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	18d3      	adds	r3, r2, r3
 800059e:	3b01      	subs	r3, #1
 80005a0:	693a      	ldr	r2, [r7, #16]
 80005a2:	429a      	cmp	r2, r3
 80005a4:	d114      	bne.n	80005d0 <drawRectangle+0x92>
                // Dessiner la bordure
                    *getPixel(canvas,j,i) = BorderInk;
 80005a6:	697a      	ldr	r2, [r7, #20]
 80005a8:	6939      	ldr	r1, [r7, #16]
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	0018      	movs	r0, r3
 80005ae:	f7ff ff61 	bl	8000474 <getPixel>
 80005b2:	0002      	movs	r2, r0
 80005b4:	2304      	movs	r3, #4
 80005b6:	2120      	movs	r1, #32
 80005b8:	185b      	adds	r3, r3, r1
 80005ba:	2108      	movs	r1, #8
 80005bc:	468c      	mov	ip, r1
 80005be:	44bc      	add	ip, r7
 80005c0:	4463      	add	r3, ip
 80005c2:	0010      	movs	r0, r2
 80005c4:	0019      	movs	r1, r3
 80005c6:	2303      	movs	r3, #3
 80005c8:	001a      	movs	r2, r3
 80005ca:	f005 f9ff 	bl	80059cc <memcpy>
 80005ce:	e01c      	b.n	800060a <drawRectangle+0xcc>
            } else {
                // Remplir l'intérieur du rectangle
                if (FillInk.R != 1) {
 80005d0:	2308      	movs	r3, #8
 80005d2:	2420      	movs	r4, #32
 80005d4:	191b      	adds	r3, r3, r4
 80005d6:	2208      	movs	r2, #8
 80005d8:	4694      	mov	ip, r2
 80005da:	44bc      	add	ip, r7
 80005dc:	4463      	add	r3, ip
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d012      	beq.n	800060a <drawRectangle+0xcc>
                	*getPixel(canvas,j,i) = FillInk;
 80005e4:	697a      	ldr	r2, [r7, #20]
 80005e6:	6939      	ldr	r1, [r7, #16]
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	0018      	movs	r0, r3
 80005ec:	f7ff ff42 	bl	8000474 <getPixel>
 80005f0:	0002      	movs	r2, r0
 80005f2:	2308      	movs	r3, #8
 80005f4:	191b      	adds	r3, r3, r4
 80005f6:	2108      	movs	r1, #8
 80005f8:	468c      	mov	ip, r1
 80005fa:	44bc      	add	ip, r7
 80005fc:	4463      	add	r3, ip
 80005fe:	0010      	movs	r0, r2
 8000600:	0019      	movs	r1, r3
 8000602:	2303      	movs	r3, #3
 8000604:	001a      	movs	r2, r3
 8000606:	f005 f9e1 	bl	80059cc <memcpy>
        for (j = X; j < X + W; j++) {
 800060a:	693b      	ldr	r3, [r7, #16]
 800060c:	3301      	adds	r3, #1
 800060e:	613b      	str	r3, [r7, #16]
 8000610:	683a      	ldr	r2, [r7, #0]
 8000612:	68bb      	ldr	r3, [r7, #8]
 8000614:	18d3      	adds	r3, r2, r3
 8000616:	693a      	ldr	r2, [r7, #16]
 8000618:	429a      	cmp	r2, r3
 800061a:	dbae      	blt.n	800057a <drawRectangle+0x3c>
    for (i = Y; i < Y + H; i++) {
 800061c:	697b      	ldr	r3, [r7, #20]
 800061e:	3301      	adds	r3, #1
 8000620:	617b      	str	r3, [r7, #20]
 8000622:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	18d3      	adds	r3, r2, r3
 8000628:	697a      	ldr	r2, [r7, #20]
 800062a:	429a      	cmp	r2, r3
 800062c:	dba2      	blt.n	8000574 <drawRectangle+0x36>
 800062e:	e000      	b.n	8000632 <drawRectangle+0xf4>
        return;
 8000630:	46c0      	nop			; (mov r8, r8)
                }
            }
        }
    }
}
 8000632:	46bd      	mov	sp, r7
 8000634:	b007      	add	sp, #28
 8000636:	bd90      	pop	{r4, r7, pc}

08000638 <displayBCD>:

// Fonction pour afficher un chiffre en BCD
void displayBCD(Canvas* canvas, int X, int Y, int BCD, int NbDeBitAffiches) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b088      	sub	sp, #32
 800063c:	af00      	add	r7, sp, #0
 800063e:	60f8      	str	r0, [r7, #12]
 8000640:	60b9      	str	r1, [r7, #8]
 8000642:	607a      	str	r2, [r7, #4]
 8000644:	603b      	str	r3, [r7, #0]
    if (canvas == NULL || X < 0 || Y < 0 || BCD < 0 || NbDeBitAffiches <= 0) {
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d04e      	beq.n	80006ea <displayBCD+0xb2>
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	2b00      	cmp	r3, #0
 8000650:	db4b      	blt.n	80006ea <displayBCD+0xb2>
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	2b00      	cmp	r3, #0
 8000656:	db48      	blt.n	80006ea <displayBCD+0xb2>
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	db45      	blt.n	80006ea <displayBCD+0xb2>
 800065e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000660:	2b00      	cmp	r3, #0
 8000662:	dd42      	ble.n	80006ea <displayBCD+0xb2>
        // Vérifiez les paramètres d'entrée valides
        return;
    }

    int j;
    int mask = 1 << (NbDeBitAffiches - 1);  // Masque pour extraire chaque bit
 8000664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000666:	3b01      	subs	r3, #1
 8000668:	2201      	movs	r2, #1
 800066a:	409a      	lsls	r2, r3
 800066c:	0013      	movs	r3, r2
 800066e:	61bb      	str	r3, [r7, #24]

        for (j = X; j < X + NbDeBitAffiches; j++) {
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	61fb      	str	r3, [r7, #28]
 8000674:	e032      	b.n	80006dc <displayBCD+0xa4>
            if (BCD & mask) {
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	69ba      	ldr	r2, [r7, #24]
 800067a:	4013      	ands	r3, r2
 800067c:	d014      	beq.n	80006a8 <displayBCD+0x70>
                // Afficher un 1 (blanc)
                Pixel* pixel = getPixel(canvas, j, Y);
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	69f9      	ldr	r1, [r7, #28]
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	0018      	movs	r0, r3
 8000686:	f7ff fef5 	bl	8000474 <getPixel>
 800068a:	0003      	movs	r3, r0
 800068c:	613b      	str	r3, [r7, #16]
                if (pixel != NULL) {
 800068e:	693b      	ldr	r3, [r7, #16]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d01d      	beq.n	80006d0 <displayBCD+0x98>
                    pixel->R = MAX_LUX;
 8000694:	693b      	ldr	r3, [r7, #16]
 8000696:	22fe      	movs	r2, #254	; 0xfe
 8000698:	701a      	strb	r2, [r3, #0]
                    pixel->G = MAX_LUX;
 800069a:	693b      	ldr	r3, [r7, #16]
 800069c:	22fe      	movs	r2, #254	; 0xfe
 800069e:	705a      	strb	r2, [r3, #1]
                    pixel->B = MAX_LUX;
 80006a0:	693b      	ldr	r3, [r7, #16]
 80006a2:	22fe      	movs	r2, #254	; 0xfe
 80006a4:	709a      	strb	r2, [r3, #2]
 80006a6:	e013      	b.n	80006d0 <displayBCD+0x98>
                }
            }
            else{
            	//afficher un 0 (noir)
            	Pixel* pixel = getPixel(canvas, j, Y);
 80006a8:	687a      	ldr	r2, [r7, #4]
 80006aa:	69f9      	ldr	r1, [r7, #28]
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	0018      	movs	r0, r3
 80006b0:	f7ff fee0 	bl	8000474 <getPixel>
 80006b4:	0003      	movs	r3, r0
 80006b6:	617b      	str	r3, [r7, #20]
            	if (pixel != NULL) {
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d008      	beq.n	80006d0 <displayBCD+0x98>
            		pixel->R = 0;
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	2200      	movs	r2, #0
 80006c2:	701a      	strb	r2, [r3, #0]
                    pixel->G = 0;
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	2200      	movs	r2, #0
 80006c8:	705a      	strb	r2, [r3, #1]
                    pixel->B = 0;
 80006ca:	697b      	ldr	r3, [r7, #20]
 80006cc:	2200      	movs	r2, #0
 80006ce:	709a      	strb	r2, [r3, #2]
            	}
            }
            mask >>= 1;
 80006d0:	69bb      	ldr	r3, [r7, #24]
 80006d2:	105b      	asrs	r3, r3, #1
 80006d4:	61bb      	str	r3, [r7, #24]
        for (j = X; j < X + NbDeBitAffiches; j++) {
 80006d6:	69fb      	ldr	r3, [r7, #28]
 80006d8:	3301      	adds	r3, #1
 80006da:	61fb      	str	r3, [r7, #28]
 80006dc:	68ba      	ldr	r2, [r7, #8]
 80006de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006e0:	18d3      	adds	r3, r2, r3
 80006e2:	69fa      	ldr	r2, [r7, #28]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	dbc6      	blt.n	8000676 <displayBCD+0x3e>
 80006e8:	e000      	b.n	80006ec <displayBCD+0xb4>
        return;
 80006ea:	46c0      	nop			; (mov r8, r8)
        }
}
 80006ec:	46bd      	mov	sp, r7
 80006ee:	b008      	add	sp, #32
 80006f0:	bd80      	pop	{r7, pc}

080006f2 <drawImage>:

void drawImage(ImageData* imageData, int x, int y, Canvas* canvas) {
 80006f2:	b580      	push	{r7, lr}
 80006f4:	b08a      	sub	sp, #40	; 0x28
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	60f8      	str	r0, [r7, #12]
 80006fa:	60b9      	str	r1, [r7, #8]
 80006fc:	607a      	str	r2, [r7, #4]
 80006fe:	603b      	str	r3, [r7, #0]
    if (imageData == NULL || canvas == NULL) {
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d100      	bne.n	8000708 <drawImage+0x16>
 8000706:	e0bc      	b.n	8000882 <drawImage+0x190>
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d100      	bne.n	8000710 <drawImage+0x1e>
 800070e:	e0b8      	b.n	8000882 <drawImage+0x190>
        // Gérez les cas d'erreur ou de paramètres non valides, si nécessaire
        return;
    }

    for (int imgY = 0; imgY < imageData->height; imgY++) {
 8000710:	2300      	movs	r3, #0
 8000712:	627b      	str	r3, [r7, #36]	; 0x24
 8000714:	e0ad      	b.n	8000872 <drawImage+0x180>
        for (int imgX = 0; imgX < imageData->width; imgX++) {
 8000716:	2300      	movs	r3, #0
 8000718:	623b      	str	r3, [r7, #32]
 800071a:	e0a0      	b.n	800085e <drawImage+0x16c>
            uint8_t* pixel = &imageData->data[(imgY * imageData->width + imgX) * 4];  // BGRA format
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	685b      	ldr	r3, [r3, #4]
 8000720:	68fa      	ldr	r2, [r7, #12]
 8000722:	8812      	ldrh	r2, [r2, #0]
 8000724:	0011      	movs	r1, r2
 8000726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000728:	4351      	muls	r1, r2
 800072a:	6a3a      	ldr	r2, [r7, #32]
 800072c:	188a      	adds	r2, r1, r2
 800072e:	0092      	lsls	r2, r2, #2
 8000730:	189b      	adds	r3, r3, r2
 8000732:	61fb      	str	r3, [r7, #28]

            // Ignore les pixels totalement transparents (canal alpha à zéro)
            if (pixel[3] == 0x00) {
 8000734:	69fb      	ldr	r3, [r7, #28]
 8000736:	3303      	adds	r3, #3
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d100      	bne.n	8000740 <drawImage+0x4e>
 800073e:	e08a      	b.n	8000856 <drawImage+0x164>
                continue;
            }

            int canvasX = x + imgX;  // Coordonnée X sur le canevas
 8000740:	68ba      	ldr	r2, [r7, #8]
 8000742:	6a3b      	ldr	r3, [r7, #32]
 8000744:	18d3      	adds	r3, r2, r3
 8000746:	61bb      	str	r3, [r7, #24]
            int canvasY = y + (imageData->height - 1) - imgY;  // Coordonnée Y sur le canevas
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	885b      	ldrh	r3, [r3, #2]
 800074c:	1e5a      	subs	r2, r3, #1
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	18d2      	adds	r2, r2, r3
 8000752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000754:	1ad3      	subs	r3, r2, r3
 8000756:	617b      	str	r3, [r7, #20]

            // Assurez-vous que les coordonnées se trouvent dans les limites du canevas
            if (canvasX > 0 && canvasX <= canvas->numCols && canvasY > 0 && canvasY <= canvas->numRows) {
 8000758:	69bb      	ldr	r3, [r7, #24]
 800075a:	2b00      	cmp	r3, #0
 800075c:	dc00      	bgt.n	8000760 <drawImage+0x6e>
 800075e:	e07b      	b.n	8000858 <drawImage+0x166>
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	69ba      	ldr	r2, [r7, #24]
 8000766:	429a      	cmp	r2, r3
 8000768:	dc76      	bgt.n	8000858 <drawImage+0x166>
 800076a:	697b      	ldr	r3, [r7, #20]
 800076c:	2b00      	cmp	r3, #0
 800076e:	dd73      	ble.n	8000858 <drawImage+0x166>
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	697a      	ldr	r2, [r7, #20]
 8000776:	429a      	cmp	r2, r3
 8000778:	dc6e      	bgt.n	8000858 <drawImage+0x166>
                // Obtenez le pixel actuel du canevas en utilisant la fonction getPixel
                Pixel* canvasPixel = getPixel(canvas, canvasX, canvasY);
 800077a:	697a      	ldr	r2, [r7, #20]
 800077c:	69b9      	ldr	r1, [r7, #24]
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	0018      	movs	r0, r3
 8000782:	f7ff fe77 	bl	8000474 <getPixel>
 8000786:	0003      	movs	r3, r0
 8000788:	613b      	str	r3, [r7, #16]

                // Appliquez la couleur de l'image avec la transparence sur le pixel du canevas
                // Assurez-vous d'ajuster les canaux alpha en conséquence
                canvasPixel->R = (pixel[2] * pixel[3] + canvasPixel->R * (255 - pixel[3])) / 255;
 800078a:	69fb      	ldr	r3, [r7, #28]
 800078c:	3302      	adds	r3, #2
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	001a      	movs	r2, r3
 8000792:	69fb      	ldr	r3, [r7, #28]
 8000794:	3303      	adds	r3, #3
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	435a      	muls	r2, r3
 800079a:	693b      	ldr	r3, [r7, #16]
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	0019      	movs	r1, r3
 80007a0:	69fb      	ldr	r3, [r7, #28]
 80007a2:	3303      	adds	r3, #3
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	0018      	movs	r0, r3
 80007a8:	23ff      	movs	r3, #255	; 0xff
 80007aa:	1a1b      	subs	r3, r3, r0
 80007ac:	434b      	muls	r3, r1
 80007ae:	18d3      	adds	r3, r2, r3
 80007b0:	21ff      	movs	r1, #255	; 0xff
 80007b2:	0018      	movs	r0, r3
 80007b4:	f7ff fd32 	bl	800021c <__divsi3>
 80007b8:	0003      	movs	r3, r0
 80007ba:	b2da      	uxtb	r2, r3
 80007bc:	693b      	ldr	r3, [r7, #16]
 80007be:	701a      	strb	r2, [r3, #0]
                canvasPixel->G = (pixel[1] * pixel[3] + canvasPixel->G * (255 - pixel[3])) / 255;
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	3301      	adds	r3, #1
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	001a      	movs	r2, r3
 80007c8:	69fb      	ldr	r3, [r7, #28]
 80007ca:	3303      	adds	r3, #3
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	435a      	muls	r2, r3
 80007d0:	693b      	ldr	r3, [r7, #16]
 80007d2:	785b      	ldrb	r3, [r3, #1]
 80007d4:	0019      	movs	r1, r3
 80007d6:	69fb      	ldr	r3, [r7, #28]
 80007d8:	3303      	adds	r3, #3
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	0018      	movs	r0, r3
 80007de:	23ff      	movs	r3, #255	; 0xff
 80007e0:	1a1b      	subs	r3, r3, r0
 80007e2:	434b      	muls	r3, r1
 80007e4:	18d3      	adds	r3, r2, r3
 80007e6:	21ff      	movs	r1, #255	; 0xff
 80007e8:	0018      	movs	r0, r3
 80007ea:	f7ff fd17 	bl	800021c <__divsi3>
 80007ee:	0003      	movs	r3, r0
 80007f0:	b2da      	uxtb	r2, r3
 80007f2:	693b      	ldr	r3, [r7, #16]
 80007f4:	705a      	strb	r2, [r3, #1]
                canvasPixel->B = (pixel[0] * pixel[3] + canvasPixel->B * (255 - pixel[3])) / 255;
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	001a      	movs	r2, r3
 80007fc:	69fb      	ldr	r3, [r7, #28]
 80007fe:	3303      	adds	r3, #3
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	435a      	muls	r2, r3
 8000804:	693b      	ldr	r3, [r7, #16]
 8000806:	789b      	ldrb	r3, [r3, #2]
 8000808:	0019      	movs	r1, r3
 800080a:	69fb      	ldr	r3, [r7, #28]
 800080c:	3303      	adds	r3, #3
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	0018      	movs	r0, r3
 8000812:	23ff      	movs	r3, #255	; 0xff
 8000814:	1a1b      	subs	r3, r3, r0
 8000816:	434b      	muls	r3, r1
 8000818:	18d3      	adds	r3, r2, r3
 800081a:	21ff      	movs	r1, #255	; 0xff
 800081c:	0018      	movs	r0, r3
 800081e:	f7ff fcfd 	bl	800021c <__divsi3>
 8000822:	0003      	movs	r3, r0
 8000824:	b2da      	uxtb	r2, r3
 8000826:	693b      	ldr	r3, [r7, #16]
 8000828:	709a      	strb	r2, [r3, #2]
                // Appliquer le masque pour forcer les valeurs à être paires
                canvasPixel->R &= 0xFE; // Le masque 0xFE force le dernier bit à 0.
 800082a:	693b      	ldr	r3, [r7, #16]
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	2201      	movs	r2, #1
 8000830:	4393      	bics	r3, r2
 8000832:	b2da      	uxtb	r2, r3
 8000834:	693b      	ldr	r3, [r7, #16]
 8000836:	701a      	strb	r2, [r3, #0]
                canvasPixel->G &= 0xFE;
 8000838:	693b      	ldr	r3, [r7, #16]
 800083a:	785b      	ldrb	r3, [r3, #1]
 800083c:	2201      	movs	r2, #1
 800083e:	4393      	bics	r3, r2
 8000840:	b2da      	uxtb	r2, r3
 8000842:	693b      	ldr	r3, [r7, #16]
 8000844:	705a      	strb	r2, [r3, #1]
                canvasPixel->B &= 0xFE;
 8000846:	693b      	ldr	r3, [r7, #16]
 8000848:	789b      	ldrb	r3, [r3, #2]
 800084a:	2201      	movs	r2, #1
 800084c:	4393      	bics	r3, r2
 800084e:	b2da      	uxtb	r2, r3
 8000850:	693b      	ldr	r3, [r7, #16]
 8000852:	709a      	strb	r2, [r3, #2]
 8000854:	e000      	b.n	8000858 <drawImage+0x166>
                continue;
 8000856:	46c0      	nop			; (mov r8, r8)
        for (int imgX = 0; imgX < imageData->width; imgX++) {
 8000858:	6a3b      	ldr	r3, [r7, #32]
 800085a:	3301      	adds	r3, #1
 800085c:	623b      	str	r3, [r7, #32]
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	881b      	ldrh	r3, [r3, #0]
 8000862:	001a      	movs	r2, r3
 8000864:	6a3b      	ldr	r3, [r7, #32]
 8000866:	4293      	cmp	r3, r2
 8000868:	da00      	bge.n	800086c <drawImage+0x17a>
 800086a:	e757      	b.n	800071c <drawImage+0x2a>
    for (int imgY = 0; imgY < imageData->height; imgY++) {
 800086c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800086e:	3301      	adds	r3, #1
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	885b      	ldrh	r3, [r3, #2]
 8000876:	001a      	movs	r2, r3
 8000878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800087a:	4293      	cmp	r3, r2
 800087c:	da00      	bge.n	8000880 <drawImage+0x18e>
 800087e:	e74a      	b.n	8000716 <drawImage+0x24>
 8000880:	e000      	b.n	8000884 <drawImage+0x192>
        return;
 8000882:	46c0      	nop			; (mov r8, r8)

            }
        }
    }
}
 8000884:	46bd      	mov	sp, r7
 8000886:	b00a      	add	sp, #40	; 0x28
 8000888:	bd80      	pop	{r7, pc}
	...

0800088c <HSVtoPixel>:
 *  Created on: Oct 11, 2023
 *      Author: alyvasseur
 */
#include "includes.h"

Pixel HSVtoPixel(uint8_t h, uint8_t v) {
 800088c:	b5b0      	push	{r4, r5, r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0
 8000892:	0002      	movs	r2, r0
 8000894:	1dfb      	adds	r3, r7, #7
 8000896:	701a      	strb	r2, [r3, #0]
 8000898:	1dbb      	adds	r3, r7, #6
 800089a:	1c0a      	adds	r2, r1, #0
 800089c:	701a      	strb	r2, [r3, #0]
    Pixel pixel;
    unsigned char region, remainder, p, q, t;

    region = h / 43;
 800089e:	2517      	movs	r5, #23
 80008a0:	197c      	adds	r4, r7, r5
 80008a2:	1dfb      	adds	r3, r7, #7
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	212b      	movs	r1, #43	; 0x2b
 80008a8:	0018      	movs	r0, r3
 80008aa:	f7ff fc2d 	bl	8000108 <__udivsi3>
 80008ae:	0003      	movs	r3, r0
 80008b0:	7023      	strb	r3, [r4, #0]
    remainder = (h - (region * 43)) * 6;
 80008b2:	1dfb      	adds	r3, r7, #7
 80008b4:	7819      	ldrb	r1, [r3, #0]
 80008b6:	0028      	movs	r0, r5
 80008b8:	183b      	adds	r3, r7, r0
 80008ba:	781a      	ldrb	r2, [r3, #0]
 80008bc:	0013      	movs	r3, r2
 80008be:	069b      	lsls	r3, r3, #26
 80008c0:	1a9b      	subs	r3, r3, r2
 80008c2:	009b      	lsls	r3, r3, #2
 80008c4:	189b      	adds	r3, r3, r2
 80008c6:	009b      	lsls	r3, r3, #2
 80008c8:	189b      	adds	r3, r3, r2
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	189b      	adds	r3, r3, r2
 80008ce:	18cb      	adds	r3, r1, r3
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	2416      	movs	r4, #22
 80008d4:	193a      	adds	r2, r7, r4
 80008d6:	1c19      	adds	r1, r3, #0
 80008d8:	1c0b      	adds	r3, r1, #0
 80008da:	18db      	adds	r3, r3, r3
 80008dc:	185b      	adds	r3, r3, r1
 80008de:	18db      	adds	r3, r3, r3
 80008e0:	7013      	strb	r3, [r2, #0]

    p = (v * (255 - 255)) >> 8;
 80008e2:	2315      	movs	r3, #21
 80008e4:	18fb      	adds	r3, r7, r3
 80008e6:	2200      	movs	r2, #0
 80008e8:	701a      	strb	r2, [r3, #0]
    q = (v * (255 - ((255 * remainder) >> 8)) >> 8);
 80008ea:	1dbb      	adds	r3, r7, #6
 80008ec:	7819      	ldrb	r1, [r3, #0]
 80008ee:	193b      	adds	r3, r7, r4
 80008f0:	781a      	ldrb	r2, [r3, #0]
 80008f2:	0013      	movs	r3, r2
 80008f4:	021b      	lsls	r3, r3, #8
 80008f6:	1a9b      	subs	r3, r3, r2
 80008f8:	121b      	asrs	r3, r3, #8
 80008fa:	22ff      	movs	r2, #255	; 0xff
 80008fc:	1ad3      	subs	r3, r2, r3
 80008fe:	434b      	muls	r3, r1
 8000900:	121a      	asrs	r2, r3, #8
 8000902:	2314      	movs	r3, #20
 8000904:	18fb      	adds	r3, r7, r3
 8000906:	701a      	strb	r2, [r3, #0]
    t = (v * (255 - ((255 * (255 - remainder)) >> 8)) >> 8);
 8000908:	1dbb      	adds	r3, r7, #6
 800090a:	7819      	ldrb	r1, [r3, #0]
 800090c:	193b      	adds	r3, r7, r4
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	22ff      	movs	r2, #255	; 0xff
 8000912:	1ad2      	subs	r2, r2, r3
 8000914:	0013      	movs	r3, r2
 8000916:	021b      	lsls	r3, r3, #8
 8000918:	1a9b      	subs	r3, r3, r2
 800091a:	121b      	asrs	r3, r3, #8
 800091c:	22ff      	movs	r2, #255	; 0xff
 800091e:	1ad3      	subs	r3, r2, r3
 8000920:	434b      	muls	r3, r1
 8000922:	121a      	asrs	r2, r3, #8
 8000924:	2313      	movs	r3, #19
 8000926:	18fb      	adds	r3, r7, r3
 8000928:	701a      	strb	r2, [r3, #0]

    switch (region) {
 800092a:	183b      	adds	r3, r7, r0
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	2b04      	cmp	r3, #4
 8000930:	d854      	bhi.n	80009dc <HSVtoPixel+0x150>
 8000932:	009a      	lsls	r2, r3, #2
 8000934:	4b4d      	ldr	r3, [pc, #308]	; (8000a6c <HSVtoPixel+0x1e0>)
 8000936:	18d3      	adds	r3, r2, r3
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	469f      	mov	pc, r3
        case 0:
            pixel.R = v;
 800093c:	210c      	movs	r1, #12
 800093e:	187b      	adds	r3, r7, r1
 8000940:	1dba      	adds	r2, r7, #6
 8000942:	7812      	ldrb	r2, [r2, #0]
 8000944:	701a      	strb	r2, [r3, #0]
            pixel.G = t;
 8000946:	187b      	adds	r3, r7, r1
 8000948:	2213      	movs	r2, #19
 800094a:	18ba      	adds	r2, r7, r2
 800094c:	7812      	ldrb	r2, [r2, #0]
 800094e:	705a      	strb	r2, [r3, #1]
            pixel.B = p;
 8000950:	187b      	adds	r3, r7, r1
 8000952:	2215      	movs	r2, #21
 8000954:	18ba      	adds	r2, r7, r2
 8000956:	7812      	ldrb	r2, [r2, #0]
 8000958:	709a      	strb	r2, [r3, #2]
            break;
 800095a:	e04f      	b.n	80009fc <HSVtoPixel+0x170>
        case 1:
            pixel.R = q;
 800095c:	210c      	movs	r1, #12
 800095e:	187b      	adds	r3, r7, r1
 8000960:	2214      	movs	r2, #20
 8000962:	18ba      	adds	r2, r7, r2
 8000964:	7812      	ldrb	r2, [r2, #0]
 8000966:	701a      	strb	r2, [r3, #0]
            pixel.G = v;
 8000968:	187b      	adds	r3, r7, r1
 800096a:	1dba      	adds	r2, r7, #6
 800096c:	7812      	ldrb	r2, [r2, #0]
 800096e:	705a      	strb	r2, [r3, #1]
            pixel.B = p;
 8000970:	187b      	adds	r3, r7, r1
 8000972:	2215      	movs	r2, #21
 8000974:	18ba      	adds	r2, r7, r2
 8000976:	7812      	ldrb	r2, [r2, #0]
 8000978:	709a      	strb	r2, [r3, #2]
            break;
 800097a:	e03f      	b.n	80009fc <HSVtoPixel+0x170>
        case 2:
            pixel.R = p;
 800097c:	210c      	movs	r1, #12
 800097e:	187b      	adds	r3, r7, r1
 8000980:	2215      	movs	r2, #21
 8000982:	18ba      	adds	r2, r7, r2
 8000984:	7812      	ldrb	r2, [r2, #0]
 8000986:	701a      	strb	r2, [r3, #0]
            pixel.G = v;
 8000988:	187b      	adds	r3, r7, r1
 800098a:	1dba      	adds	r2, r7, #6
 800098c:	7812      	ldrb	r2, [r2, #0]
 800098e:	705a      	strb	r2, [r3, #1]
            pixel.B = t;
 8000990:	187b      	adds	r3, r7, r1
 8000992:	2213      	movs	r2, #19
 8000994:	18ba      	adds	r2, r7, r2
 8000996:	7812      	ldrb	r2, [r2, #0]
 8000998:	709a      	strb	r2, [r3, #2]
            break;
 800099a:	e02f      	b.n	80009fc <HSVtoPixel+0x170>
        case 3:
            pixel.R = p;
 800099c:	210c      	movs	r1, #12
 800099e:	187b      	adds	r3, r7, r1
 80009a0:	2215      	movs	r2, #21
 80009a2:	18ba      	adds	r2, r7, r2
 80009a4:	7812      	ldrb	r2, [r2, #0]
 80009a6:	701a      	strb	r2, [r3, #0]
            pixel.G = q;
 80009a8:	187b      	adds	r3, r7, r1
 80009aa:	2214      	movs	r2, #20
 80009ac:	18ba      	adds	r2, r7, r2
 80009ae:	7812      	ldrb	r2, [r2, #0]
 80009b0:	705a      	strb	r2, [r3, #1]
            pixel.B = v;
 80009b2:	187b      	adds	r3, r7, r1
 80009b4:	1dba      	adds	r2, r7, #6
 80009b6:	7812      	ldrb	r2, [r2, #0]
 80009b8:	709a      	strb	r2, [r3, #2]
            break;
 80009ba:	e01f      	b.n	80009fc <HSVtoPixel+0x170>
        case 4:
            pixel.R = t;
 80009bc:	210c      	movs	r1, #12
 80009be:	187b      	adds	r3, r7, r1
 80009c0:	2213      	movs	r2, #19
 80009c2:	18ba      	adds	r2, r7, r2
 80009c4:	7812      	ldrb	r2, [r2, #0]
 80009c6:	701a      	strb	r2, [r3, #0]
            pixel.G = p;
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	2215      	movs	r2, #21
 80009cc:	18ba      	adds	r2, r7, r2
 80009ce:	7812      	ldrb	r2, [r2, #0]
 80009d0:	705a      	strb	r2, [r3, #1]
            pixel.B = v;
 80009d2:	187b      	adds	r3, r7, r1
 80009d4:	1dba      	adds	r2, r7, #6
 80009d6:	7812      	ldrb	r2, [r2, #0]
 80009d8:	709a      	strb	r2, [r3, #2]
            break;
 80009da:	e00f      	b.n	80009fc <HSVtoPixel+0x170>
        default:
            pixel.R = v;
 80009dc:	210c      	movs	r1, #12
 80009de:	187b      	adds	r3, r7, r1
 80009e0:	1dba      	adds	r2, r7, #6
 80009e2:	7812      	ldrb	r2, [r2, #0]
 80009e4:	701a      	strb	r2, [r3, #0]
            pixel.G = p;
 80009e6:	187b      	adds	r3, r7, r1
 80009e8:	2215      	movs	r2, #21
 80009ea:	18ba      	adds	r2, r7, r2
 80009ec:	7812      	ldrb	r2, [r2, #0]
 80009ee:	705a      	strb	r2, [r3, #1]
            pixel.B = q;
 80009f0:	187b      	adds	r3, r7, r1
 80009f2:	2214      	movs	r2, #20
 80009f4:	18ba      	adds	r2, r7, r2
 80009f6:	7812      	ldrb	r2, [r2, #0]
 80009f8:	709a      	strb	r2, [r3, #2]
            break;
 80009fa:	46c0      	nop			; (mov r8, r8)
    }

    // Appliquer le masque pour forcer les valeurs à être paires
    pixel.R &= 0xFE; // Le masque 0xFE force le dernier bit à 0.
 80009fc:	210c      	movs	r1, #12
 80009fe:	187b      	adds	r3, r7, r1
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	2201      	movs	r2, #1
 8000a04:	4393      	bics	r3, r2
 8000a06:	b2da      	uxtb	r2, r3
 8000a08:	187b      	adds	r3, r7, r1
 8000a0a:	701a      	strb	r2, [r3, #0]
    pixel.G &= 0xFE;
 8000a0c:	187b      	adds	r3, r7, r1
 8000a0e:	785b      	ldrb	r3, [r3, #1]
 8000a10:	2201      	movs	r2, #1
 8000a12:	4393      	bics	r3, r2
 8000a14:	b2da      	uxtb	r2, r3
 8000a16:	187b      	adds	r3, r7, r1
 8000a18:	705a      	strb	r2, [r3, #1]
    pixel.B &= 0xFE;
 8000a1a:	187b      	adds	r3, r7, r1
 8000a1c:	789b      	ldrb	r3, [r3, #2]
 8000a1e:	2201      	movs	r2, #1
 8000a20:	4393      	bics	r3, r2
 8000a22:	b2da      	uxtb	r2, r3
 8000a24:	187b      	adds	r3, r7, r1
 8000a26:	709a      	strb	r2, [r3, #2]

    return pixel;
 8000a28:	2010      	movs	r0, #16
 8000a2a:	183b      	adds	r3, r7, r0
 8000a2c:	187a      	adds	r2, r7, r1
 8000a2e:	8811      	ldrh	r1, [r2, #0]
 8000a30:	8019      	strh	r1, [r3, #0]
 8000a32:	7892      	ldrb	r2, [r2, #2]
 8000a34:	709a      	strb	r2, [r3, #2]
 8000a36:	183a      	adds	r2, r7, r0
 8000a38:	2300      	movs	r3, #0
 8000a3a:	7811      	ldrb	r1, [r2, #0]
 8000a3c:	20ff      	movs	r0, #255	; 0xff
 8000a3e:	4001      	ands	r1, r0
 8000a40:	20ff      	movs	r0, #255	; 0xff
 8000a42:	4383      	bics	r3, r0
 8000a44:	430b      	orrs	r3, r1
 8000a46:	7851      	ldrb	r1, [r2, #1]
 8000a48:	20ff      	movs	r0, #255	; 0xff
 8000a4a:	4001      	ands	r1, r0
 8000a4c:	0209      	lsls	r1, r1, #8
 8000a4e:	4808      	ldr	r0, [pc, #32]	; (8000a70 <HSVtoPixel+0x1e4>)
 8000a50:	4003      	ands	r3, r0
 8000a52:	430b      	orrs	r3, r1
 8000a54:	7892      	ldrb	r2, [r2, #2]
 8000a56:	21ff      	movs	r1, #255	; 0xff
 8000a58:	400a      	ands	r2, r1
 8000a5a:	0412      	lsls	r2, r2, #16
 8000a5c:	4905      	ldr	r1, [pc, #20]	; (8000a74 <HSVtoPixel+0x1e8>)
 8000a5e:	400b      	ands	r3, r1
 8000a60:	4313      	orrs	r3, r2
}
 8000a62:	0018      	movs	r0, r3
 8000a64:	46bd      	mov	sp, r7
 8000a66:	b006      	add	sp, #24
 8000a68:	bdb0      	pop	{r4, r5, r7, pc}
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	08005b80 	.word	0x08005b80
 8000a70:	ffff00ff 	.word	0xffff00ff
 8000a74:	ff00ffff 	.word	0xff00ffff

08000a78 <ws2812_start>:
/* Variables -----------------------------------------------*/
static uint8_t LEDbuffer[LED_BUFFER_SIZE];
extern TIM_HandleTypeDef htim2;

/* Functions -----------------------------------------------*/
void ws2812_start(void) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
	fillBufferBlack();
 8000a7c:	f000 f89a 	bl	8000bb4 <fillBufferBlack>
	htim2.Init.Period = TIMER_PERIOD - 1;
 8000a80:	4b07      	ldr	r3, [pc, #28]	; (8000aa0 <ws2812_start+0x28>)
 8000a82:	2209      	movs	r2, #9
 8000a84:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Init(&htim2);
 8000a86:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <ws2812_start+0x28>)
 8000a88:	0018      	movs	r0, r3
 8000a8a:	f002 fd51 	bl	8003530 <HAL_TIM_Base_Init>
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *) LEDbuffer,
 8000a8e:	4b05      	ldr	r3, [pc, #20]	; (8000aa4 <ws2812_start+0x2c>)
 8000a90:	4a05      	ldr	r2, [pc, #20]	; (8000aa8 <ws2812_start+0x30>)
 8000a92:	4803      	ldr	r0, [pc, #12]	; (8000aa0 <ws2812_start+0x28>)
 8000a94:	2100      	movs	r1, #0
 8000a96:	f002 fdf3 	bl	8003680 <HAL_TIM_PWM_Start_DMA>
				LED_BUFFER_SIZE);
	//HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
}
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20000d24 	.word	0x20000d24
 8000aa4:	00000a61 	.word	0x00000a61
 8000aa8:	2000023c 	.word	0x2000023c

08000aac <setLEDcolor>:
void ws2812_update(void) {
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *) LEDbuffer,
			LED_BUFFER_SIZE);
}

void setLEDcolor(uint32_t LEDnumber, uint8_t RED, uint8_t GREEN, uint8_t BLUE) {
 8000aac:	b590      	push	{r4, r7, lr}
 8000aae:	b08b      	sub	sp, #44	; 0x2c
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	000c      	movs	r4, r1
 8000ab6:	0010      	movs	r0, r2
 8000ab8:	0019      	movs	r1, r3
 8000aba:	1cfb      	adds	r3, r7, #3
 8000abc:	1c22      	adds	r2, r4, #0
 8000abe:	701a      	strb	r2, [r3, #0]
 8000ac0:	1cbb      	adds	r3, r7, #2
 8000ac2:	1c02      	adds	r2, r0, #0
 8000ac4:	701a      	strb	r2, [r3, #0]
 8000ac6:	1c7b      	adds	r3, r7, #1
 8000ac8:	1c0a      	adds	r2, r1, #0
 8000aca:	701a      	strb	r2, [r3, #0]
	uint8_t tempBuffer[24];
	uint32_t i;
	uint32_t LEDindex;
	LEDindex = LEDnumber % LED_NUMBER;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	215e      	movs	r1, #94	; 0x5e
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f7ff fb9f 	bl	8000214 <__aeabi_uidivmod>
 8000ad6:	000b      	movs	r3, r1
 8000ad8:	623b      	str	r3, [r7, #32]

	for (i = 0; i < 8; i++) // GREEN data
 8000ada:	2300      	movs	r3, #0
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
 8000ade:	e013      	b.n	8000b08 <setLEDcolor+0x5c>
		tempBuffer[i] = ((GREEN << i) & 0x80) ? WS2812_1 : WS2812_0;
 8000ae0:	1cbb      	adds	r3, r7, #2
 8000ae2:	781a      	ldrb	r2, [r3, #0]
 8000ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae6:	409a      	lsls	r2, r3
 8000ae8:	0013      	movs	r3, r2
 8000aea:	2280      	movs	r2, #128	; 0x80
 8000aec:	4013      	ands	r3, r2
 8000aee:	d001      	beq.n	8000af4 <setLEDcolor+0x48>
 8000af0:	2106      	movs	r1, #6
 8000af2:	e000      	b.n	8000af6 <setLEDcolor+0x4a>
 8000af4:	2103      	movs	r1, #3
 8000af6:	2308      	movs	r3, #8
 8000af8:	18fa      	adds	r2, r7, r3
 8000afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afc:	18d3      	adds	r3, r2, r3
 8000afe:	1c0a      	adds	r2, r1, #0
 8000b00:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) // GREEN data
 8000b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b04:	3301      	adds	r3, #1
 8000b06:	627b      	str	r3, [r7, #36]	; 0x24
 8000b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0a:	2b07      	cmp	r3, #7
 8000b0c:	d9e8      	bls.n	8000ae0 <setLEDcolor+0x34>
	for (i = 0; i < 8; i++) // RED
 8000b0e:	2300      	movs	r3, #0
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
 8000b12:	e012      	b.n	8000b3a <setLEDcolor+0x8e>
		tempBuffer[8 + i] = ((RED << i) & 0x80) ? WS2812_1 : WS2812_0;
 8000b14:	1cfb      	adds	r3, r7, #3
 8000b16:	781a      	ldrb	r2, [r3, #0]
 8000b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b1a:	409a      	lsls	r2, r3
 8000b1c:	0013      	movs	r3, r2
 8000b1e:	2280      	movs	r2, #128	; 0x80
 8000b20:	4013      	ands	r3, r2
 8000b22:	d001      	beq.n	8000b28 <setLEDcolor+0x7c>
 8000b24:	2106      	movs	r1, #6
 8000b26:	e000      	b.n	8000b2a <setLEDcolor+0x7e>
 8000b28:	2103      	movs	r1, #3
 8000b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b2c:	3308      	adds	r3, #8
 8000b2e:	2208      	movs	r2, #8
 8000b30:	18ba      	adds	r2, r7, r2
 8000b32:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < 8; i++) // RED
 8000b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b36:	3301      	adds	r3, #1
 8000b38:	627b      	str	r3, [r7, #36]	; 0x24
 8000b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b3c:	2b07      	cmp	r3, #7
 8000b3e:	d9e9      	bls.n	8000b14 <setLEDcolor+0x68>
	for (i = 0; i < 8; i++) // BLUE
 8000b40:	2300      	movs	r3, #0
 8000b42:	627b      	str	r3, [r7, #36]	; 0x24
 8000b44:	e012      	b.n	8000b6c <setLEDcolor+0xc0>
		tempBuffer[16 + i] = ((BLUE << i) & 0x80) ? WS2812_1 : WS2812_0;
 8000b46:	1c7b      	adds	r3, r7, #1
 8000b48:	781a      	ldrb	r2, [r3, #0]
 8000b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b4c:	409a      	lsls	r2, r3
 8000b4e:	0013      	movs	r3, r2
 8000b50:	2280      	movs	r2, #128	; 0x80
 8000b52:	4013      	ands	r3, r2
 8000b54:	d001      	beq.n	8000b5a <setLEDcolor+0xae>
 8000b56:	2106      	movs	r1, #6
 8000b58:	e000      	b.n	8000b5c <setLEDcolor+0xb0>
 8000b5a:	2103      	movs	r1, #3
 8000b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5e:	3310      	adds	r3, #16
 8000b60:	2208      	movs	r2, #8
 8000b62:	18ba      	adds	r2, r7, r2
 8000b64:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < 8; i++) // BLUE
 8000b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b68:	3301      	adds	r3, #1
 8000b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8000b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b6e:	2b07      	cmp	r3, #7
 8000b70:	d9e9      	bls.n	8000b46 <setLEDcolor+0x9a>

	for (i = 0; i < 24; i++)
 8000b72:	2300      	movs	r3, #0
 8000b74:	627b      	str	r3, [r7, #36]	; 0x24
 8000b76:	e012      	b.n	8000b9e <setLEDcolor+0xf2>
		LEDbuffer[RESET_SLOTS_BEGIN + LEDindex * 24 + i] = tempBuffer[i];
 8000b78:	6a3a      	ldr	r2, [r7, #32]
 8000b7a:	0013      	movs	r3, r2
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	189b      	adds	r3, r3, r2
 8000b80:	00db      	lsls	r3, r3, #3
 8000b82:	001a      	movs	r2, r3
 8000b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b86:	18d3      	adds	r3, r2, r3
 8000b88:	33c8      	adds	r3, #200	; 0xc8
 8000b8a:	2208      	movs	r2, #8
 8000b8c:	18b9      	adds	r1, r7, r2
 8000b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b90:	188a      	adds	r2, r1, r2
 8000b92:	7811      	ldrb	r1, [r2, #0]
 8000b94:	4a06      	ldr	r2, [pc, #24]	; (8000bb0 <setLEDcolor+0x104>)
 8000b96:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < 24; i++)
 8000b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24
 8000b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba0:	2b17      	cmp	r3, #23
 8000ba2:	d9e9      	bls.n	8000b78 <setLEDcolor+0xcc>
}
 8000ba4:	46c0      	nop			; (mov r8, r8)
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	b00b      	add	sp, #44	; 0x2c
 8000bac:	bd90      	pop	{r4, r7, pc}
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	2000023c 	.word	0x2000023c

08000bb4 <fillBufferBlack>:

	for (index = 0; index < LED_NUMBER; index++)
		setLEDcolor(index, RED, GREEN, BLUE);
}

void fillBufferBlack(void) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
	/*Fill LED buffer - ALL OFF*/
	uint32_t index, buffIndex;
	buffIndex = 0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	603b      	str	r3, [r7, #0]

	for (index = 0; index < RESET_SLOTS_BEGIN; index++) {
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	e00a      	b.n	8000bda <fillBufferBlack+0x26>
		LEDbuffer[buffIndex] = WS2812_RESET;
 8000bc4:	4a1f      	ldr	r2, [pc, #124]	; (8000c44 <fillBufferBlack+0x90>)
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	18d3      	adds	r3, r2, r3
 8000bca:	2200      	movs	r2, #0
 8000bcc:	701a      	strb	r2, [r3, #0]
		buffIndex++;
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	603b      	str	r3, [r7, #0]
	for (index = 0; index < RESET_SLOTS_BEGIN; index++) {
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2bc7      	cmp	r3, #199	; 0xc7
 8000bde:	d9f1      	bls.n	8000bc4 <fillBufferBlack+0x10>
	}
	for (index = 0; index < LED_DATA_SIZE; index++) {
 8000be0:	2300      	movs	r3, #0
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	e00a      	b.n	8000bfc <fillBufferBlack+0x48>
		LEDbuffer[buffIndex] = WS2812_0;
 8000be6:	4a17      	ldr	r2, [pc, #92]	; (8000c44 <fillBufferBlack+0x90>)
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	18d3      	adds	r3, r2, r3
 8000bec:	2203      	movs	r2, #3
 8000bee:	701a      	strb	r2, [r3, #0]
		buffIndex++;
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	603b      	str	r3, [r7, #0]
	for (index = 0; index < LED_DATA_SIZE; index++) {
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687a      	ldr	r2, [r7, #4]
 8000bfe:	238d      	movs	r3, #141	; 0x8d
 8000c00:	011b      	lsls	r3, r3, #4
 8000c02:	429a      	cmp	r2, r3
 8000c04:	d3ef      	bcc.n	8000be6 <fillBufferBlack+0x32>
	}
	LEDbuffer[buffIndex] = WS2812_0;
 8000c06:	4a0f      	ldr	r2, [pc, #60]	; (8000c44 <fillBufferBlack+0x90>)
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	18d3      	adds	r3, r2, r3
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	701a      	strb	r2, [r3, #0]
	buffIndex++;
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	3301      	adds	r3, #1
 8000c14:	603b      	str	r3, [r7, #0]
	for (index = 0; index < RESET_SLOTS_END; index++) {
 8000c16:	2300      	movs	r3, #0
 8000c18:	607b      	str	r3, [r7, #4]
 8000c1a:	e00a      	b.n	8000c32 <fillBufferBlack+0x7e>
		LEDbuffer[buffIndex] = 0;
 8000c1c:	4a09      	ldr	r2, [pc, #36]	; (8000c44 <fillBufferBlack+0x90>)
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	18d3      	adds	r3, r2, r3
 8000c22:	2200      	movs	r2, #0
 8000c24:	701a      	strb	r2, [r3, #0]
		buffIndex++;
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	603b      	str	r3, [r7, #0]
	for (index = 0; index < RESET_SLOTS_END; index++) {
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	607b      	str	r3, [r7, #4]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2bc7      	cmp	r3, #199	; 0xc7
 8000c36:	d9f1      	bls.n	8000c1c <fillBufferBlack+0x68>
	}
}
 8000c38:	46c0      	nop			; (mov r8, r8)
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	b002      	add	sp, #8
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	2000023c 	.word	0x2000023c

08000c48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c48:	b5b0      	push	{r4, r5, r7, lr}
 8000c4a:	b08c      	sub	sp, #48	; 0x30
 8000c4c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c4e:	f000 fded 	bl	800182c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c52:	f000 f915 	bl	8000e80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c56:	f000 faab 	bl	80011b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c5a:	f000 fa7b 	bl	8001154 <MX_DMA_Init>
  MX_TIM2_Init();
 8000c5e:	f000 f9c9 	bl	8000ff4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000c62:	f000 fa45 	bl	80010f0 <MX_USART1_UART_Init>
  MX_ADC_Init();
 8000c66:	f000 f969 	bl	8000f3c <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  ws2812_start();
 8000c6a:	f7ff ff05 	bl	8000a78 <ws2812_start>
  HAL_UART_Receive_IT(&huart1, Rx_data, 19);
 8000c6e:	497c      	ldr	r1, [pc, #496]	; (8000e60 <main+0x218>)
 8000c70:	4b7c      	ldr	r3, [pc, #496]	; (8000e64 <main+0x21c>)
 8000c72:	2213      	movs	r2, #19
 8000c74:	0018      	movs	r0, r3
 8000c76:	f003 fcf3 	bl	8004660 <HAL_UART_Receive_IT>
  HAL_ADC_Start(&hadc);
 8000c7a:	4b7b      	ldr	r3, [pc, #492]	; (8000e68 <main+0x220>)
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	f000 ff79 	bl	8001b74 <HAL_ADC_Start>

  uint8_t H =0;
 8000c82:	231f      	movs	r3, #31
 8000c84:	18fb      	adds	r3, r7, r3
 8000c86:	2200      	movs	r2, #0
 8000c88:	701a      	strb	r2, [r3, #0]
  ImageData* pacManSprite;
  // Déclarez une instance de Canvas
  Canvas myCanvas;
  // Initialisez la structure Canvas
  myCanvas.numCols = NUM_COLS;
 8000c8a:	2408      	movs	r4, #8
 8000c8c:	193b      	adds	r3, r7, r4
 8000c8e:	2213      	movs	r2, #19
 8000c90:	601a      	str	r2, [r3, #0]
  myCanvas.numRows = NUM_ROWS;
 8000c92:	193b      	adds	r3, r7, r4
 8000c94:	2205      	movs	r2, #5
 8000c96:	605a      	str	r2, [r3, #4]
  // Allouez de la mémoire pour les pixels
  myCanvas.pixels = malloc(sizeof(Pixel) * NUM_COLS * NUM_ROWS);
 8000c98:	231e      	movs	r3, #30
 8000c9a:	33ff      	adds	r3, #255	; 0xff
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	f004 fe8b 	bl	80059b8 <malloc>
 8000ca2:	0003      	movs	r3, r0
 8000ca4:	001a      	movs	r2, r3
 8000ca6:	193b      	adds	r3, r7, r4
 8000ca8:	609a      	str	r2, [r3, #8]
  // Utilisez memset pour initialiser le tableau à zéro
  memset(myCanvas.pixels, 0, sizeof(Pixel) * NUM_COLS * NUM_ROWS);
 8000caa:	193b      	adds	r3, r7, r4
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	221e      	movs	r2, #30
 8000cb0:	32ff      	adds	r2, #255	; 0xff
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f004 fe92 	bl	80059de <memset>
//
//	  ReadADC = HAL_ADC_GetValue(&hadc);



	  if(HAL_UART_Receive_IT(&huart1, Rx_data, 19) != HAL_BUSY)
 8000cba:	4969      	ldr	r1, [pc, #420]	; (8000e60 <main+0x218>)
 8000cbc:	4b69      	ldr	r3, [pc, #420]	; (8000e64 <main+0x21c>)
 8000cbe:	2213      	movs	r2, #19
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	f003 fccd 	bl	8004660 <HAL_UART_Receive_IT>
 8000cc6:	0003      	movs	r3, r0
 8000cc8:	2b02      	cmp	r3, #2
 8000cca:	d005      	beq.n	8000cd8 <main+0x90>
	  {
		  HAL_UART_Receive_IT(&huart1, Rx_data, 19);
 8000ccc:	4964      	ldr	r1, [pc, #400]	; (8000e60 <main+0x218>)
 8000cce:	4b65      	ldr	r3, [pc, #404]	; (8000e64 <main+0x21c>)
 8000cd0:	2213      	movs	r2, #19
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	f003 fcc4 	bl	8004660 <HAL_UART_Receive_IT>
	  }
	  /**********Background***************/

	  for(uint8_t diag=1; diag<=23; diag++){
 8000cd8:	2317      	movs	r3, #23
 8000cda:	18fb      	adds	r3, r7, r3
 8000cdc:	2201      	movs	r2, #1
 8000cde:	701a      	strb	r2, [r3, #0]
 8000ce0:	e031      	b.n	8000d46 <main+0xfe>
		  colorDiagonal(&myCanvas, HSVtoPixel((H + (diag* 255 / 23))%255 , MAX_LUX), diag);
 8000ce2:	231f      	movs	r3, #31
 8000ce4:	18fb      	adds	r3, r7, r3
 8000ce6:	781c      	ldrb	r4, [r3, #0]
 8000ce8:	2517      	movs	r5, #23
 8000cea:	197b      	adds	r3, r7, r5
 8000cec:	781a      	ldrb	r2, [r3, #0]
 8000cee:	0013      	movs	r3, r2
 8000cf0:	021b      	lsls	r3, r3, #8
 8000cf2:	1a9b      	subs	r3, r3, r2
 8000cf4:	2117      	movs	r1, #23
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f7ff fa90 	bl	800021c <__divsi3>
 8000cfc:	0003      	movs	r3, r0
 8000cfe:	18e3      	adds	r3, r4, r3
 8000d00:	21ff      	movs	r1, #255	; 0xff
 8000d02:	0018      	movs	r0, r3
 8000d04:	f7ff fb70 	bl	80003e8 <__aeabi_idivmod>
 8000d08:	000b      	movs	r3, r1
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	21fe      	movs	r1, #254	; 0xfe
 8000d0e:	0018      	movs	r0, r3
 8000d10:	f7ff fdbc 	bl	800088c <HSVtoPixel>
 8000d14:	0003      	movs	r3, r0
 8000d16:	001a      	movs	r2, r3
 8000d18:	2014      	movs	r0, #20
 8000d1a:	183b      	adds	r3, r7, r0
 8000d1c:	1c11      	adds	r1, r2, #0
 8000d1e:	7019      	strb	r1, [r3, #0]
 8000d20:	0411      	lsls	r1, r2, #16
 8000d22:	0e09      	lsrs	r1, r1, #24
 8000d24:	7059      	strb	r1, [r3, #1]
 8000d26:	0212      	lsls	r2, r2, #8
 8000d28:	0e12      	lsrs	r2, r2, #24
 8000d2a:	709a      	strb	r2, [r3, #2]
 8000d2c:	197b      	adds	r3, r7, r5
 8000d2e:	781a      	ldrb	r2, [r3, #0]
 8000d30:	183b      	adds	r3, r7, r0
 8000d32:	2108      	movs	r1, #8
 8000d34:	1878      	adds	r0, r7, r1
 8000d36:	6819      	ldr	r1, [r3, #0]
 8000d38:	f7ff fbc7 	bl	80004ca <colorDiagonal>
	  for(uint8_t diag=1; diag<=23; diag++){
 8000d3c:	197b      	adds	r3, r7, r5
 8000d3e:	781a      	ldrb	r2, [r3, #0]
 8000d40:	197b      	adds	r3, r7, r5
 8000d42:	3201      	adds	r2, #1
 8000d44:	701a      	strb	r2, [r3, #0]
 8000d46:	2317      	movs	r3, #23
 8000d48:	18fb      	adds	r3, r7, r3
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b17      	cmp	r3, #23
 8000d4e:	d9c8      	bls.n	8000ce2 <main+0x9a>
	  }

	  drawRectangle(&myCanvas, 19, 5, 1, 1, (Pixel){0,0,0}, (Pixel){0,0,0});
 8000d50:	1d3b      	adds	r3, r7, #4
 8000d52:	2200      	movs	r2, #0
 8000d54:	701a      	strb	r2, [r3, #0]
 8000d56:	1d3b      	adds	r3, r7, #4
 8000d58:	2200      	movs	r2, #0
 8000d5a:	705a      	strb	r2, [r3, #1]
 8000d5c:	1d3b      	adds	r3, r7, #4
 8000d5e:	2200      	movs	r2, #0
 8000d60:	709a      	strb	r2, [r3, #2]
 8000d62:	003b      	movs	r3, r7
 8000d64:	2200      	movs	r2, #0
 8000d66:	701a      	strb	r2, [r3, #0]
 8000d68:	003b      	movs	r3, r7
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	705a      	strb	r2, [r3, #1]
 8000d6e:	003b      	movs	r3, r7
 8000d70:	2200      	movs	r2, #0
 8000d72:	709a      	strb	r2, [r3, #2]
 8000d74:	2408      	movs	r4, #8
 8000d76:	1938      	adds	r0, r7, r4
 8000d78:	003a      	movs	r2, r7
 8000d7a:	2308      	movs	r3, #8
 8000d7c:	446b      	add	r3, sp
 8000d7e:	8811      	ldrh	r1, [r2, #0]
 8000d80:	8019      	strh	r1, [r3, #0]
 8000d82:	7892      	ldrb	r2, [r2, #2]
 8000d84:	709a      	strb	r2, [r3, #2]
 8000d86:	1d3a      	adds	r2, r7, #4
 8000d88:	2304      	movs	r3, #4
 8000d8a:	446b      	add	r3, sp
 8000d8c:	8811      	ldrh	r1, [r2, #0]
 8000d8e:	8019      	strh	r1, [r3, #0]
 8000d90:	7892      	ldrb	r2, [r2, #2]
 8000d92:	709a      	strb	r2, [r3, #2]
 8000d94:	2301      	movs	r3, #1
 8000d96:	9300      	str	r3, [sp, #0]
 8000d98:	2301      	movs	r3, #1
 8000d9a:	2205      	movs	r2, #5
 8000d9c:	2113      	movs	r1, #19
 8000d9e:	f7ff fbce 	bl	800053e <drawRectangle>

	  displayBCD(&myCanvas, 8, 3, H>>4, 4);
 8000da2:	251f      	movs	r5, #31
 8000da4:	197b      	adds	r3, r7, r5
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	091b      	lsrs	r3, r3, #4
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	001a      	movs	r2, r3
 8000dae:	1938      	adds	r0, r7, r4
 8000db0:	2304      	movs	r3, #4
 8000db2:	9300      	str	r3, [sp, #0]
 8000db4:	0013      	movs	r3, r2
 8000db6:	2203      	movs	r2, #3
 8000db8:	2108      	movs	r1, #8
 8000dba:	f7ff fc3d 	bl	8000638 <displayBCD>

	  switch((H*6/100)%7){
 8000dbe:	197b      	adds	r3, r7, r5
 8000dc0:	781a      	ldrb	r2, [r3, #0]
 8000dc2:	0013      	movs	r3, r2
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	189b      	adds	r3, r3, r2
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	2164      	movs	r1, #100	; 0x64
 8000dcc:	0018      	movs	r0, r3
 8000dce:	f7ff fa25 	bl	800021c <__divsi3>
 8000dd2:	0003      	movs	r3, r0
 8000dd4:	2107      	movs	r1, #7
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	f7ff fb06 	bl	80003e8 <__aeabi_idivmod>
 8000ddc:	000b      	movs	r3, r1
 8000dde:	2b05      	cmp	r3, #5
 8000de0:	d816      	bhi.n	8000e10 <main+0x1c8>
 8000de2:	009a      	lsls	r2, r3, #2
 8000de4:	4b21      	ldr	r3, [pc, #132]	; (8000e6c <main+0x224>)
 8000de6:	18d3      	adds	r3, r2, r3
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	469f      	mov	pc, r3
	  case 0 : pacManSprite = &pacMan0; break;
 8000dec:	4b20      	ldr	r3, [pc, #128]	; (8000e70 <main+0x228>)
 8000dee:	61bb      	str	r3, [r7, #24]
 8000df0:	e00e      	b.n	8000e10 <main+0x1c8>
	  case 1 : pacManSprite = &pacMan1; break;
 8000df2:	4b20      	ldr	r3, [pc, #128]	; (8000e74 <main+0x22c>)
 8000df4:	61bb      	str	r3, [r7, #24]
 8000df6:	e00b      	b.n	8000e10 <main+0x1c8>
	  case 2 : pacManSprite = &pacMan2; break;
 8000df8:	4b1f      	ldr	r3, [pc, #124]	; (8000e78 <main+0x230>)
 8000dfa:	61bb      	str	r3, [r7, #24]
 8000dfc:	e008      	b.n	8000e10 <main+0x1c8>
	  case 3 : pacManSprite = &pacMan3; break;
 8000dfe:	4b1f      	ldr	r3, [pc, #124]	; (8000e7c <main+0x234>)
 8000e00:	61bb      	str	r3, [r7, #24]
 8000e02:	e005      	b.n	8000e10 <main+0x1c8>
	  case 4 : pacManSprite = &pacMan2; break;
 8000e04:	4b1c      	ldr	r3, [pc, #112]	; (8000e78 <main+0x230>)
 8000e06:	61bb      	str	r3, [r7, #24]
 8000e08:	e002      	b.n	8000e10 <main+0x1c8>
	  case 5 : pacManSprite = &pacMan1; break;
 8000e0a:	4b1a      	ldr	r3, [pc, #104]	; (8000e74 <main+0x22c>)
 8000e0c:	61bb      	str	r3, [r7, #24]
 8000e0e:	46c0      	nop			; (mov r8, r8)
	  }
	  drawImage(pacManSprite, -5 + (25*H)/255,1, &myCanvas);
 8000e10:	241f      	movs	r4, #31
 8000e12:	193b      	adds	r3, r7, r4
 8000e14:	781a      	ldrb	r2, [r3, #0]
 8000e16:	0013      	movs	r3, r2
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	189b      	adds	r3, r3, r2
 8000e1c:	009a      	lsls	r2, r3, #2
 8000e1e:	189b      	adds	r3, r3, r2
 8000e20:	21ff      	movs	r1, #255	; 0xff
 8000e22:	0018      	movs	r0, r3
 8000e24:	f7ff f9fa 	bl	800021c <__divsi3>
 8000e28:	0003      	movs	r3, r0
 8000e2a:	1f59      	subs	r1, r3, #5
 8000e2c:	2508      	movs	r5, #8
 8000e2e:	197b      	adds	r3, r7, r5
 8000e30:	69b8      	ldr	r0, [r7, #24]
 8000e32:	2201      	movs	r2, #1
 8000e34:	f7ff fc5d 	bl	80006f2 <drawImage>


	  sendCanvas(&myCanvas);
 8000e38:	197b      	adds	r3, r7, r5
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	f7ff fada 	bl	80003f4 <sendCanvas>

	  if (H >= 255){
 8000e40:	193b      	adds	r3, r7, r4
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	2bff      	cmp	r3, #255	; 0xff
 8000e46:	d103      	bne.n	8000e50 <main+0x208>
		  H=0;
 8000e48:	193b      	adds	r3, r7, r4
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	701a      	strb	r2, [r3, #0]
 8000e4e:	e734      	b.n	8000cba <main+0x72>
	  }
	  else{
		  H++;
 8000e50:	211f      	movs	r1, #31
 8000e52:	187b      	adds	r3, r7, r1
 8000e54:	781a      	ldrb	r2, [r3, #0]
 8000e56:	187b      	adds	r3, r7, r1
 8000e58:	3201      	adds	r2, #1
 8000e5a:	701a      	strb	r2, [r3, #0]
  {
 8000e5c:	e72d      	b.n	8000cba <main+0x72>
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	20000e84 	.word	0x20000e84
 8000e64:	20000db0 	.word	0x20000db0
 8000e68:	20000ca0 	.word	0x20000ca0
 8000e6c:	08005b94 	.word	0x08005b94
 8000e70:	20000064 	.word	0x20000064
 8000e74:	200000d0 	.word	0x200000d0
 8000e78:	2000013c 	.word	0x2000013c
 8000e7c:	200001a8 	.word	0x200001a8

08000e80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e80:	b590      	push	{r4, r7, lr}
 8000e82:	b099      	sub	sp, #100	; 0x64
 8000e84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e86:	242c      	movs	r4, #44	; 0x2c
 8000e88:	193b      	adds	r3, r7, r4
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	2334      	movs	r3, #52	; 0x34
 8000e8e:	001a      	movs	r2, r3
 8000e90:	2100      	movs	r1, #0
 8000e92:	f004 fda4 	bl	80059de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e96:	231c      	movs	r3, #28
 8000e98:	18fb      	adds	r3, r7, r3
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	2310      	movs	r3, #16
 8000e9e:	001a      	movs	r2, r3
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	f004 fd9c 	bl	80059de <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ea6:	1d3b      	adds	r3, r7, #4
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	2318      	movs	r3, #24
 8000eac:	001a      	movs	r2, r3
 8000eae:	2100      	movs	r1, #0
 8000eb0:	f004 fd95 	bl	80059de <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000eb4:	0021      	movs	r1, r4
 8000eb6:	187b      	adds	r3, r7, r1
 8000eb8:	2212      	movs	r2, #18
 8000eba:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ebc:	187b      	adds	r3, r7, r1
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000ec2:	187b      	adds	r3, r7, r1
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ec8:	187b      	adds	r3, r7, r1
 8000eca:	2210      	movs	r2, #16
 8000ecc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000ece:	187b      	adds	r3, r7, r1
 8000ed0:	2210      	movs	r2, #16
 8000ed2:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ed4:	187b      	adds	r3, r7, r1
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eda:	187b      	adds	r3, r7, r1
 8000edc:	0018      	movs	r0, r3
 8000ede:	f001 fd47 	bl	8002970 <HAL_RCC_OscConfig>
 8000ee2:	1e03      	subs	r3, r0, #0
 8000ee4:	d001      	beq.n	8000eea <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000ee6:	f000 fa25 	bl	8001334 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eea:	211c      	movs	r1, #28
 8000eec:	187b      	adds	r3, r7, r1
 8000eee:	2207      	movs	r2, #7
 8000ef0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ef2:	187b      	adds	r3, r7, r1
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ef8:	187b      	adds	r3, r7, r1
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000efe:	187b      	adds	r3, r7, r1
 8000f00:	2200      	movs	r2, #0
 8000f02:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f04:	187b      	adds	r3, r7, r1
 8000f06:	2100      	movs	r1, #0
 8000f08:	0018      	movs	r0, r3
 8000f0a:	f002 f8b7 	bl	800307c <HAL_RCC_ClockConfig>
 8000f0e:	1e03      	subs	r3, r0, #0
 8000f10:	d001      	beq.n	8000f16 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000f12:	f000 fa0f 	bl	8001334 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f16:	1d3b      	adds	r3, r7, #4
 8000f18:	2201      	movs	r2, #1
 8000f1a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000f1c:	1d3b      	adds	r3, r7, #4
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	0018      	movs	r0, r3
 8000f26:	f002 fa15 	bl	8003354 <HAL_RCCEx_PeriphCLKConfig>
 8000f2a:	1e03      	subs	r3, r0, #0
 8000f2c:	d001      	beq.n	8000f32 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000f2e:	f000 fa01 	bl	8001334 <Error_Handler>
  }
}
 8000f32:	46c0      	nop			; (mov r8, r8)
 8000f34:	46bd      	mov	sp, r7
 8000f36:	b019      	add	sp, #100	; 0x64
 8000f38:	bd90      	pop	{r4, r7, pc}
	...

08000f3c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	0018      	movs	r0, r3
 8000f46:	230c      	movs	r3, #12
 8000f48:	001a      	movs	r2, r3
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	f004 fd47 	bl	80059de <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000f50:	4b26      	ldr	r3, [pc, #152]	; (8000fec <MX_ADC_Init+0xb0>)
 8000f52:	4a27      	ldr	r2, [pc, #156]	; (8000ff0 <MX_ADC_Init+0xb4>)
 8000f54:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f56:	4b25      	ldr	r3, [pc, #148]	; (8000fec <MX_ADC_Init+0xb0>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000f5c:	4b23      	ldr	r3, [pc, #140]	; (8000fec <MX_ADC_Init+0xb0>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f62:	4b22      	ldr	r3, [pc, #136]	; (8000fec <MX_ADC_Init+0xb0>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000f68:	4b20      	ldr	r3, [pc, #128]	; (8000fec <MX_ADC_Init+0xb0>)
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f6e:	4b1f      	ldr	r3, [pc, #124]	; (8000fec <MX_ADC_Init+0xb0>)
 8000f70:	2204      	movs	r2, #4
 8000f72:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000f74:	4b1d      	ldr	r3, [pc, #116]	; (8000fec <MX_ADC_Init+0xb0>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000f7a:	4b1c      	ldr	r3, [pc, #112]	; (8000fec <MX_ADC_Init+0xb0>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000f80:	4b1a      	ldr	r3, [pc, #104]	; (8000fec <MX_ADC_Init+0xb0>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000f86:	4b19      	ldr	r3, [pc, #100]	; (8000fec <MX_ADC_Init+0xb0>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f8c:	4b17      	ldr	r3, [pc, #92]	; (8000fec <MX_ADC_Init+0xb0>)
 8000f8e:	22c2      	movs	r2, #194	; 0xc2
 8000f90:	32ff      	adds	r2, #255	; 0xff
 8000f92:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f94:	4b15      	ldr	r3, [pc, #84]	; (8000fec <MX_ADC_Init+0xb0>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000f9a:	4b14      	ldr	r3, [pc, #80]	; (8000fec <MX_ADC_Init+0xb0>)
 8000f9c:	2224      	movs	r2, #36	; 0x24
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fa2:	4b12      	ldr	r3, [pc, #72]	; (8000fec <MX_ADC_Init+0xb0>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000fa8:	4b10      	ldr	r3, [pc, #64]	; (8000fec <MX_ADC_Init+0xb0>)
 8000faa:	0018      	movs	r0, r3
 8000fac:	f000 fca2 	bl	80018f4 <HAL_ADC_Init>
 8000fb0:	1e03      	subs	r3, r0, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000fb4:	f000 f9be 	bl	8001334 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000fb8:	1d3b      	adds	r3, r7, #4
 8000fba:	2207      	movs	r2, #7
 8000fbc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000fbe:	1d3b      	adds	r3, r7, #4
 8000fc0:	2280      	movs	r2, #128	; 0x80
 8000fc2:	0152      	lsls	r2, r2, #5
 8000fc4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000fc6:	1d3b      	adds	r3, r7, #4
 8000fc8:	2280      	movs	r2, #128	; 0x80
 8000fca:	0552      	lsls	r2, r2, #21
 8000fcc:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000fce:	1d3a      	adds	r2, r7, #4
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <MX_ADC_Init+0xb0>)
 8000fd2:	0011      	movs	r1, r2
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	f000 fedd 	bl	8001d94 <HAL_ADC_ConfigChannel>
 8000fda:	1e03      	subs	r3, r0, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000fde:	f000 f9a9 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000fe2:	46c0      	nop			; (mov r8, r8)
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	b004      	add	sp, #16
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	46c0      	nop			; (mov r8, r8)
 8000fec:	20000ca0 	.word	0x20000ca0
 8000ff0:	40012400 	.word	0x40012400

08000ff4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08e      	sub	sp, #56	; 0x38
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ffa:	2328      	movs	r3, #40	; 0x28
 8000ffc:	18fb      	adds	r3, r7, r3
 8000ffe:	0018      	movs	r0, r3
 8001000:	2310      	movs	r3, #16
 8001002:	001a      	movs	r2, r3
 8001004:	2100      	movs	r1, #0
 8001006:	f004 fcea 	bl	80059de <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800100a:	2320      	movs	r3, #32
 800100c:	18fb      	adds	r3, r7, r3
 800100e:	0018      	movs	r0, r3
 8001010:	2308      	movs	r3, #8
 8001012:	001a      	movs	r2, r3
 8001014:	2100      	movs	r1, #0
 8001016:	f004 fce2 	bl	80059de <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800101a:	1d3b      	adds	r3, r7, #4
 800101c:	0018      	movs	r0, r3
 800101e:	231c      	movs	r3, #28
 8001020:	001a      	movs	r2, r3
 8001022:	2100      	movs	r1, #0
 8001024:	f004 fcdb 	bl	80059de <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001028:	4b30      	ldr	r3, [pc, #192]	; (80010ec <MX_TIM2_Init+0xf8>)
 800102a:	2280      	movs	r2, #128	; 0x80
 800102c:	05d2      	lsls	r2, r2, #23
 800102e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001030:	4b2e      	ldr	r3, [pc, #184]	; (80010ec <MX_TIM2_Init+0xf8>)
 8001032:	2200      	movs	r2, #0
 8001034:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001036:	4b2d      	ldr	r3, [pc, #180]	; (80010ec <MX_TIM2_Init+0xf8>)
 8001038:	2200      	movs	r2, #0
 800103a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 800103c:	4b2b      	ldr	r3, [pc, #172]	; (80010ec <MX_TIM2_Init+0xf8>)
 800103e:	2209      	movs	r2, #9
 8001040:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001042:	4b2a      	ldr	r3, [pc, #168]	; (80010ec <MX_TIM2_Init+0xf8>)
 8001044:	2200      	movs	r2, #0
 8001046:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001048:	4b28      	ldr	r3, [pc, #160]	; (80010ec <MX_TIM2_Init+0xf8>)
 800104a:	2200      	movs	r2, #0
 800104c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800104e:	4b27      	ldr	r3, [pc, #156]	; (80010ec <MX_TIM2_Init+0xf8>)
 8001050:	0018      	movs	r0, r3
 8001052:	f002 fa6d 	bl	8003530 <HAL_TIM_Base_Init>
 8001056:	1e03      	subs	r3, r0, #0
 8001058:	d001      	beq.n	800105e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800105a:	f000 f96b 	bl	8001334 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800105e:	2128      	movs	r1, #40	; 0x28
 8001060:	187b      	adds	r3, r7, r1
 8001062:	2280      	movs	r2, #128	; 0x80
 8001064:	0152      	lsls	r2, r2, #5
 8001066:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001068:	187a      	adds	r2, r7, r1
 800106a:	4b20      	ldr	r3, [pc, #128]	; (80010ec <MX_TIM2_Init+0xf8>)
 800106c:	0011      	movs	r1, r2
 800106e:	0018      	movs	r0, r3
 8001070:	f002 fd76 	bl	8003b60 <HAL_TIM_ConfigClockSource>
 8001074:	1e03      	subs	r3, r0, #0
 8001076:	d001      	beq.n	800107c <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8001078:	f000 f95c 	bl	8001334 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800107c:	4b1b      	ldr	r3, [pc, #108]	; (80010ec <MX_TIM2_Init+0xf8>)
 800107e:	0018      	movs	r0, r3
 8001080:	f002 faa6 	bl	80035d0 <HAL_TIM_PWM_Init>
 8001084:	1e03      	subs	r3, r0, #0
 8001086:	d001      	beq.n	800108c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001088:	f000 f954 	bl	8001334 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800108c:	2120      	movs	r1, #32
 800108e:	187b      	adds	r3, r7, r1
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001094:	187b      	adds	r3, r7, r1
 8001096:	2200      	movs	r2, #0
 8001098:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800109a:	187a      	adds	r2, r7, r1
 800109c:	4b13      	ldr	r3, [pc, #76]	; (80010ec <MX_TIM2_Init+0xf8>)
 800109e:	0011      	movs	r1, r2
 80010a0:	0018      	movs	r0, r3
 80010a2:	f003 fa31 	bl	8004508 <HAL_TIMEx_MasterConfigSynchronization>
 80010a6:	1e03      	subs	r3, r0, #0
 80010a8:	d001      	beq.n	80010ae <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80010aa:	f000 f943 	bl	8001334 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010ae:	1d3b      	adds	r3, r7, #4
 80010b0:	2260      	movs	r2, #96	; 0x60
 80010b2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	2200      	movs	r2, #0
 80010b8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ba:	1d3b      	adds	r3, r7, #4
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	2200      	movs	r2, #0
 80010c4:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010c6:	1d39      	adds	r1, r7, #4
 80010c8:	4b08      	ldr	r3, [pc, #32]	; (80010ec <MX_TIM2_Init+0xf8>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	0018      	movs	r0, r3
 80010ce:	f002 fc81 	bl	80039d4 <HAL_TIM_PWM_ConfigChannel>
 80010d2:	1e03      	subs	r3, r0, #0
 80010d4:	d001      	beq.n	80010da <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 80010d6:	f000 f92d 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80010da:	4b04      	ldr	r3, [pc, #16]	; (80010ec <MX_TIM2_Init+0xf8>)
 80010dc:	0018      	movs	r0, r3
 80010de:	f000 fa15 	bl	800150c <HAL_TIM_MspPostInit>

}
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	46bd      	mov	sp, r7
 80010e6:	b00e      	add	sp, #56	; 0x38
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	46c0      	nop			; (mov r8, r8)
 80010ec:	20000d24 	.word	0x20000d24

080010f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010f4:	4b14      	ldr	r3, [pc, #80]	; (8001148 <MX_USART1_UART_Init+0x58>)
 80010f6:	4a15      	ldr	r2, [pc, #84]	; (800114c <MX_USART1_UART_Init+0x5c>)
 80010f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 250000;
 80010fa:	4b13      	ldr	r3, [pc, #76]	; (8001148 <MX_USART1_UART_Init+0x58>)
 80010fc:	4a14      	ldr	r2, [pc, #80]	; (8001150 <MX_USART1_UART_Init+0x60>)
 80010fe:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001100:	4b11      	ldr	r3, [pc, #68]	; (8001148 <MX_USART1_UART_Init+0x58>)
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001106:	4b10      	ldr	r3, [pc, #64]	; (8001148 <MX_USART1_UART_Init+0x58>)
 8001108:	2200      	movs	r2, #0
 800110a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800110c:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <MX_USART1_UART_Init+0x58>)
 800110e:	2200      	movs	r2, #0
 8001110:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001112:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <MX_USART1_UART_Init+0x58>)
 8001114:	220c      	movs	r2, #12
 8001116:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001118:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <MX_USART1_UART_Init+0x58>)
 800111a:	2200      	movs	r2, #0
 800111c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800111e:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <MX_USART1_UART_Init+0x58>)
 8001120:	2200      	movs	r2, #0
 8001122:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001124:	4b08      	ldr	r3, [pc, #32]	; (8001148 <MX_USART1_UART_Init+0x58>)
 8001126:	2200      	movs	r2, #0
 8001128:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800112a:	4b07      	ldr	r3, [pc, #28]	; (8001148 <MX_USART1_UART_Init+0x58>)
 800112c:	2200      	movs	r2, #0
 800112e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001130:	4b05      	ldr	r3, [pc, #20]	; (8001148 <MX_USART1_UART_Init+0x58>)
 8001132:	0018      	movs	r0, r3
 8001134:	f003 fa40 	bl	80045b8 <HAL_UART_Init>
 8001138:	1e03      	subs	r3, r0, #0
 800113a:	d001      	beq.n	8001140 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 800113c:	f000 f8fa 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001140:	46c0      	nop			; (mov r8, r8)
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	46c0      	nop			; (mov r8, r8)
 8001148:	20000db0 	.word	0x20000db0
 800114c:	40013800 	.word	0x40013800
 8001150:	0003d090 	.word	0x0003d090

08001154 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800115a:	4b14      	ldr	r3, [pc, #80]	; (80011ac <MX_DMA_Init+0x58>)
 800115c:	695a      	ldr	r2, [r3, #20]
 800115e:	4b13      	ldr	r3, [pc, #76]	; (80011ac <MX_DMA_Init+0x58>)
 8001160:	2101      	movs	r1, #1
 8001162:	430a      	orrs	r2, r1
 8001164:	615a      	str	r2, [r3, #20]
 8001166:	4b11      	ldr	r3, [pc, #68]	; (80011ac <MX_DMA_Init+0x58>)
 8001168:	695b      	ldr	r3, [r3, #20]
 800116a:	2201      	movs	r2, #1
 800116c:	4013      	ands	r3, r2
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001172:	2200      	movs	r2, #0
 8001174:	2100      	movs	r1, #0
 8001176:	2009      	movs	r0, #9
 8001178:	f001 f84a 	bl	8002210 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800117c:	2009      	movs	r0, #9
 800117e:	f001 f85c 	bl	800223a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	2100      	movs	r1, #0
 8001186:	200a      	movs	r0, #10
 8001188:	f001 f842 	bl	8002210 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800118c:	200a      	movs	r0, #10
 800118e:	f001 f854 	bl	800223a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8001192:	2200      	movs	r2, #0
 8001194:	2100      	movs	r1, #0
 8001196:	200b      	movs	r0, #11
 8001198:	f001 f83a 	bl	8002210 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 800119c:	200b      	movs	r0, #11
 800119e:	f001 f84c 	bl	800223a <HAL_NVIC_EnableIRQ>

}
 80011a2:	46c0      	nop			; (mov r8, r8)
 80011a4:	46bd      	mov	sp, r7
 80011a6:	b002      	add	sp, #8
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	46c0      	nop			; (mov r8, r8)
 80011ac:	40021000 	.word	0x40021000

080011b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b0:	b590      	push	{r4, r7, lr}
 80011b2:	b089      	sub	sp, #36	; 0x24
 80011b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b6:	240c      	movs	r4, #12
 80011b8:	193b      	adds	r3, r7, r4
 80011ba:	0018      	movs	r0, r3
 80011bc:	2314      	movs	r3, #20
 80011be:	001a      	movs	r2, r3
 80011c0:	2100      	movs	r1, #0
 80011c2:	f004 fc0c 	bl	80059de <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011c6:	4b27      	ldr	r3, [pc, #156]	; (8001264 <MX_GPIO_Init+0xb4>)
 80011c8:	695a      	ldr	r2, [r3, #20]
 80011ca:	4b26      	ldr	r3, [pc, #152]	; (8001264 <MX_GPIO_Init+0xb4>)
 80011cc:	2180      	movs	r1, #128	; 0x80
 80011ce:	03c9      	lsls	r1, r1, #15
 80011d0:	430a      	orrs	r2, r1
 80011d2:	615a      	str	r2, [r3, #20]
 80011d4:	4b23      	ldr	r3, [pc, #140]	; (8001264 <MX_GPIO_Init+0xb4>)
 80011d6:	695a      	ldr	r2, [r3, #20]
 80011d8:	2380      	movs	r3, #128	; 0x80
 80011da:	03db      	lsls	r3, r3, #15
 80011dc:	4013      	ands	r3, r2
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e2:	4b20      	ldr	r3, [pc, #128]	; (8001264 <MX_GPIO_Init+0xb4>)
 80011e4:	695a      	ldr	r2, [r3, #20]
 80011e6:	4b1f      	ldr	r3, [pc, #124]	; (8001264 <MX_GPIO_Init+0xb4>)
 80011e8:	2180      	movs	r1, #128	; 0x80
 80011ea:	0289      	lsls	r1, r1, #10
 80011ec:	430a      	orrs	r2, r1
 80011ee:	615a      	str	r2, [r3, #20]
 80011f0:	4b1c      	ldr	r3, [pc, #112]	; (8001264 <MX_GPIO_Init+0xb4>)
 80011f2:	695a      	ldr	r2, [r3, #20]
 80011f4:	2380      	movs	r3, #128	; 0x80
 80011f6:	029b      	lsls	r3, r3, #10
 80011f8:	4013      	ands	r3, r2
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fe:	4b19      	ldr	r3, [pc, #100]	; (8001264 <MX_GPIO_Init+0xb4>)
 8001200:	695a      	ldr	r2, [r3, #20]
 8001202:	4b18      	ldr	r3, [pc, #96]	; (8001264 <MX_GPIO_Init+0xb4>)
 8001204:	2180      	movs	r1, #128	; 0x80
 8001206:	02c9      	lsls	r1, r1, #11
 8001208:	430a      	orrs	r2, r1
 800120a:	615a      	str	r2, [r3, #20]
 800120c:	4b15      	ldr	r3, [pc, #84]	; (8001264 <MX_GPIO_Init+0xb4>)
 800120e:	695a      	ldr	r2, [r3, #20]
 8001210:	2380      	movs	r3, #128	; 0x80
 8001212:	02db      	lsls	r3, r3, #11
 8001214:	4013      	ands	r3, r2
 8001216:	603b      	str	r3, [r7, #0]
 8001218:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : SW4_Pin SW3_Pin */
  GPIO_InitStruct.Pin = SW4_Pin|SW3_Pin;
 800121a:	193b      	adds	r3, r7, r4
 800121c:	2290      	movs	r2, #144	; 0x90
 800121e:	0112      	lsls	r2, r2, #4
 8001220:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001222:	193b      	adds	r3, r7, r4
 8001224:	2200      	movs	r2, #0
 8001226:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	193b      	adds	r3, r7, r4
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122e:	193a      	adds	r2, r7, r4
 8001230:	2390      	movs	r3, #144	; 0x90
 8001232:	05db      	lsls	r3, r3, #23
 8001234:	0011      	movs	r1, r2
 8001236:	0018      	movs	r0, r3
 8001238:	f001 fa32 	bl	80026a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 800123c:	193b      	adds	r3, r7, r4
 800123e:	2230      	movs	r2, #48	; 0x30
 8001240:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001242:	193b      	adds	r3, r7, r4
 8001244:	2200      	movs	r2, #0
 8001246:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	193b      	adds	r3, r7, r4
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124e:	193b      	adds	r3, r7, r4
 8001250:	4a05      	ldr	r2, [pc, #20]	; (8001268 <MX_GPIO_Init+0xb8>)
 8001252:	0019      	movs	r1, r3
 8001254:	0010      	movs	r0, r2
 8001256:	f001 fa23 	bl	80026a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800125a:	46c0      	nop			; (mov r8, r8)
 800125c:	46bd      	mov	sp, r7
 800125e:	b009      	add	sp, #36	; 0x24
 8001260:	bd90      	pop	{r4, r7, pc}
 8001262:	46c0      	nop			; (mov r8, r8)
 8001264:	40021000 	.word	0x40021000
 8001268:	48000400 	.word	0x48000400

0800126c <HAL_UART_RxCpltCallback>:
* Interruption qui va mettre dans des variables la réception UART comme le	  *
* temps										 								  *
******************************************************************************/

void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]

	if(&huart1 == huart)
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	4b1c      	ldr	r3, [pc, #112]	; (80012e8 <HAL_UART_RxCpltCallback+0x7c>)
 8001278:	429a      	cmp	r2, r3
 800127a:	d130      	bne.n	80012de <HAL_UART_RxCpltCallback+0x72>
	{
		Heures_brt = Rx_data[4];	//Stock le data des heures, "brt" = brute
 800127c:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <HAL_UART_RxCpltCallback+0x80>)
 800127e:	791a      	ldrb	r2, [r3, #4]
 8001280:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <HAL_UART_RxCpltCallback+0x84>)
 8001282:	701a      	strb	r2, [r3, #0]
		Minutes_brt = Rx_data[5];	//Stock le data des minutes
 8001284:	4b19      	ldr	r3, [pc, #100]	; (80012ec <HAL_UART_RxCpltCallback+0x80>)
 8001286:	795a      	ldrb	r2, [r3, #5]
 8001288:	4b1a      	ldr	r3, [pc, #104]	; (80012f4 <HAL_UART_RxCpltCallback+0x88>)
 800128a:	701a      	strb	r2, [r3, #0]

		Heures_U = Heures_brt & 0x0F;	//Traite le data pour avoir l'Unité des Heures
 800128c:	4b18      	ldr	r3, [pc, #96]	; (80012f0 <HAL_UART_RxCpltCallback+0x84>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	220f      	movs	r2, #15
 8001292:	4013      	ands	r3, r2
 8001294:	b2da      	uxtb	r2, r3
 8001296:	4b18      	ldr	r3, [pc, #96]	; (80012f8 <HAL_UART_RxCpltCallback+0x8c>)
 8001298:	701a      	strb	r2, [r3, #0]

		Heures_D = (Heures_brt & 0xF0) >> 4;	//Traite le data pour avoir la Dizaine des Heures
 800129a:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <HAL_UART_RxCpltCallback+0x84>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	091b      	lsrs	r3, r3, #4
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	4b16      	ldr	r3, [pc, #88]	; (80012fc <HAL_UART_RxCpltCallback+0x90>)
 80012a4:	701a      	strb	r2, [r3, #0]

		Minutes_U = Minutes_brt & 0x0F;	//Traite le data pour avoir l'Unité des Minutes
 80012a6:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <HAL_UART_RxCpltCallback+0x88>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	220f      	movs	r2, #15
 80012ac:	4013      	ands	r3, r2
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	4b13      	ldr	r3, [pc, #76]	; (8001300 <HAL_UART_RxCpltCallback+0x94>)
 80012b2:	701a      	strb	r2, [r3, #0]

		Minutes_D = (Minutes_brt & 0xF0) >> 4;	//Traite le data pour avoir la Dizaine des Minutes
 80012b4:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <HAL_UART_RxCpltCallback+0x88>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	091b      	lsrs	r3, r3, #4
 80012ba:	b2da      	uxtb	r2, r3
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <HAL_UART_RxCpltCallback+0x98>)
 80012be:	701a      	strb	r2, [r3, #0]

		if(HAL_UART_Receive_IT(&huart1, Rx_data, 19) == HAL_ERROR)	//Réception d'UART lors d'une erreur
 80012c0:	490a      	ldr	r1, [pc, #40]	; (80012ec <HAL_UART_RxCpltCallback+0x80>)
 80012c2:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <HAL_UART_RxCpltCallback+0x7c>)
 80012c4:	2213      	movs	r2, #19
 80012c6:	0018      	movs	r0, r3
 80012c8:	f003 f9ca 	bl	8004660 <HAL_UART_Receive_IT>
 80012cc:	0003      	movs	r3, r0
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d105      	bne.n	80012de <HAL_UART_RxCpltCallback+0x72>
		{
			HAL_UART_Receive_IT(&huart1, Rx_data, 19);
 80012d2:	4906      	ldr	r1, [pc, #24]	; (80012ec <HAL_UART_RxCpltCallback+0x80>)
 80012d4:	4b04      	ldr	r3, [pc, #16]	; (80012e8 <HAL_UART_RxCpltCallback+0x7c>)
 80012d6:	2213      	movs	r2, #19
 80012d8:	0018      	movs	r0, r3
 80012da:	f003 f9c1 	bl	8004660 <HAL_UART_Receive_IT>
		}
	}
}
 80012de:	46c0      	nop			; (mov r8, r8)
 80012e0:	46bd      	mov	sp, r7
 80012e2:	b002      	add	sp, #8
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	46c0      	nop			; (mov r8, r8)
 80012e8:	20000db0 	.word	0x20000db0
 80012ec:	20000e84 	.word	0x20000e84
 80012f0:	20000e7c 	.word	0x20000e7c
 80012f4:	20000e7f 	.word	0x20000e7f
 80012f8:	20000e7d 	.word	0x20000e7d
 80012fc:	20000e7e 	.word	0x20000e7e
 8001300:	20000e80 	.word	0x20000e80
 8001304:	20000e81 	.word	0x20000e81

08001308 <HAL_UART_ErrorCallback>:
* Interruption lorsqu'il y a un problème dans la transmission UART qui permet *
* de refaire une réception									 				  *
******************************************************************************/

void HAL_UART_ErrorCallback (UART_HandleTypeDef * huart)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
	if(&huart1 == huart)
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	4b06      	ldr	r3, [pc, #24]	; (800132c <HAL_UART_ErrorCallback+0x24>)
 8001314:	429a      	cmp	r2, r3
 8001316:	d105      	bne.n	8001324 <HAL_UART_ErrorCallback+0x1c>
	{
		HAL_UART_Receive_IT(&huart1, Rx_data, 19);
 8001318:	4905      	ldr	r1, [pc, #20]	; (8001330 <HAL_UART_ErrorCallback+0x28>)
 800131a:	4b04      	ldr	r3, [pc, #16]	; (800132c <HAL_UART_ErrorCallback+0x24>)
 800131c:	2213      	movs	r2, #19
 800131e:	0018      	movs	r0, r3
 8001320:	f003 f99e 	bl	8004660 <HAL_UART_Receive_IT>
	}
}
 8001324:	46c0      	nop			; (mov r8, r8)
 8001326:	46bd      	mov	sp, r7
 8001328:	b002      	add	sp, #8
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20000db0 	.word	0x20000db0
 8001330:	20000e84 	.word	0x20000e84

08001334 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001338:	b672      	cpsid	i
}
 800133a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800133c:	e7fe      	b.n	800133c <Error_Handler+0x8>
	...

08001340 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001346:	4b0f      	ldr	r3, [pc, #60]	; (8001384 <HAL_MspInit+0x44>)
 8001348:	699a      	ldr	r2, [r3, #24]
 800134a:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <HAL_MspInit+0x44>)
 800134c:	2101      	movs	r1, #1
 800134e:	430a      	orrs	r2, r1
 8001350:	619a      	str	r2, [r3, #24]
 8001352:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <HAL_MspInit+0x44>)
 8001354:	699b      	ldr	r3, [r3, #24]
 8001356:	2201      	movs	r2, #1
 8001358:	4013      	ands	r3, r2
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800135e:	4b09      	ldr	r3, [pc, #36]	; (8001384 <HAL_MspInit+0x44>)
 8001360:	69da      	ldr	r2, [r3, #28]
 8001362:	4b08      	ldr	r3, [pc, #32]	; (8001384 <HAL_MspInit+0x44>)
 8001364:	2180      	movs	r1, #128	; 0x80
 8001366:	0549      	lsls	r1, r1, #21
 8001368:	430a      	orrs	r2, r1
 800136a:	61da      	str	r2, [r3, #28]
 800136c:	4b05      	ldr	r3, [pc, #20]	; (8001384 <HAL_MspInit+0x44>)
 800136e:	69da      	ldr	r2, [r3, #28]
 8001370:	2380      	movs	r3, #128	; 0x80
 8001372:	055b      	lsls	r3, r3, #21
 8001374:	4013      	ands	r3, r2
 8001376:	603b      	str	r3, [r7, #0]
 8001378:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800137a:	46c0      	nop			; (mov r8, r8)
 800137c:	46bd      	mov	sp, r7
 800137e:	b002      	add	sp, #8
 8001380:	bd80      	pop	{r7, pc}
 8001382:	46c0      	nop			; (mov r8, r8)
 8001384:	40021000 	.word	0x40021000

08001388 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001388:	b590      	push	{r4, r7, lr}
 800138a:	b08b      	sub	sp, #44	; 0x2c
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001390:	2414      	movs	r4, #20
 8001392:	193b      	adds	r3, r7, r4
 8001394:	0018      	movs	r0, r3
 8001396:	2314      	movs	r3, #20
 8001398:	001a      	movs	r2, r3
 800139a:	2100      	movs	r1, #0
 800139c:	f004 fb1f 	bl	80059de <memset>
  if(hadc->Instance==ADC1)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a31      	ldr	r2, [pc, #196]	; (800146c <HAL_ADC_MspInit+0xe4>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d15b      	bne.n	8001462 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013aa:	4b31      	ldr	r3, [pc, #196]	; (8001470 <HAL_ADC_MspInit+0xe8>)
 80013ac:	699a      	ldr	r2, [r3, #24]
 80013ae:	4b30      	ldr	r3, [pc, #192]	; (8001470 <HAL_ADC_MspInit+0xe8>)
 80013b0:	2180      	movs	r1, #128	; 0x80
 80013b2:	0089      	lsls	r1, r1, #2
 80013b4:	430a      	orrs	r2, r1
 80013b6:	619a      	str	r2, [r3, #24]
 80013b8:	4b2d      	ldr	r3, [pc, #180]	; (8001470 <HAL_ADC_MspInit+0xe8>)
 80013ba:	699a      	ldr	r2, [r3, #24]
 80013bc:	2380      	movs	r3, #128	; 0x80
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	4013      	ands	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]
 80013c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c6:	4b2a      	ldr	r3, [pc, #168]	; (8001470 <HAL_ADC_MspInit+0xe8>)
 80013c8:	695a      	ldr	r2, [r3, #20]
 80013ca:	4b29      	ldr	r3, [pc, #164]	; (8001470 <HAL_ADC_MspInit+0xe8>)
 80013cc:	2180      	movs	r1, #128	; 0x80
 80013ce:	0289      	lsls	r1, r1, #10
 80013d0:	430a      	orrs	r2, r1
 80013d2:	615a      	str	r2, [r3, #20]
 80013d4:	4b26      	ldr	r3, [pc, #152]	; (8001470 <HAL_ADC_MspInit+0xe8>)
 80013d6:	695a      	ldr	r2, [r3, #20]
 80013d8:	2380      	movs	r3, #128	; 0x80
 80013da:	029b      	lsls	r3, r3, #10
 80013dc:	4013      	ands	r3, r2
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA7     ------> ADC_IN7
    */
    GPIO_InitStruct.Pin = ADC_BRIGHTNESS_Pin;
 80013e2:	193b      	adds	r3, r7, r4
 80013e4:	2280      	movs	r2, #128	; 0x80
 80013e6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013e8:	193b      	adds	r3, r7, r4
 80013ea:	2203      	movs	r2, #3
 80013ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	193b      	adds	r3, r7, r4
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(ADC_BRIGHTNESS_GPIO_Port, &GPIO_InitStruct);
 80013f4:	193a      	adds	r2, r7, r4
 80013f6:	2390      	movs	r3, #144	; 0x90
 80013f8:	05db      	lsls	r3, r3, #23
 80013fa:	0011      	movs	r1, r2
 80013fc:	0018      	movs	r0, r3
 80013fe:	f001 f94f 	bl	80026a0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8001402:	4b1c      	ldr	r3, [pc, #112]	; (8001474 <HAL_ADC_MspInit+0xec>)
 8001404:	4a1c      	ldr	r2, [pc, #112]	; (8001478 <HAL_ADC_MspInit+0xf0>)
 8001406:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001408:	4b1a      	ldr	r3, [pc, #104]	; (8001474 <HAL_ADC_MspInit+0xec>)
 800140a:	2200      	movs	r2, #0
 800140c:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800140e:	4b19      	ldr	r3, [pc, #100]	; (8001474 <HAL_ADC_MspInit+0xec>)
 8001410:	2200      	movs	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001414:	4b17      	ldr	r3, [pc, #92]	; (8001474 <HAL_ADC_MspInit+0xec>)
 8001416:	2280      	movs	r2, #128	; 0x80
 8001418:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800141a:	4b16      	ldr	r3, [pc, #88]	; (8001474 <HAL_ADC_MspInit+0xec>)
 800141c:	2280      	movs	r2, #128	; 0x80
 800141e:	0052      	lsls	r2, r2, #1
 8001420:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001422:	4b14      	ldr	r3, [pc, #80]	; (8001474 <HAL_ADC_MspInit+0xec>)
 8001424:	2280      	movs	r2, #128	; 0x80
 8001426:	00d2      	lsls	r2, r2, #3
 8001428:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 800142a:	4b12      	ldr	r3, [pc, #72]	; (8001474 <HAL_ADC_MspInit+0xec>)
 800142c:	2220      	movs	r2, #32
 800142e:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8001430:	4b10      	ldr	r3, [pc, #64]	; (8001474 <HAL_ADC_MspInit+0xec>)
 8001432:	2200      	movs	r2, #0
 8001434:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001436:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <HAL_ADC_MspInit+0xec>)
 8001438:	0018      	movs	r0, r3
 800143a:	f000 ff1b 	bl	8002274 <HAL_DMA_Init>
 800143e:	1e03      	subs	r3, r0, #0
 8001440:	d001      	beq.n	8001446 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8001442:	f7ff ff77 	bl	8001334 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a0a      	ldr	r2, [pc, #40]	; (8001474 <HAL_ADC_MspInit+0xec>)
 800144a:	631a      	str	r2, [r3, #48]	; 0x30
 800144c:	4b09      	ldr	r3, [pc, #36]	; (8001474 <HAL_ADC_MspInit+0xec>)
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	625a      	str	r2, [r3, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001452:	2200      	movs	r2, #0
 8001454:	2100      	movs	r1, #0
 8001456:	200c      	movs	r0, #12
 8001458:	f000 feda 	bl	8002210 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800145c:	200c      	movs	r0, #12
 800145e:	f000 feec 	bl	800223a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001462:	46c0      	nop			; (mov r8, r8)
 8001464:	46bd      	mov	sp, r7
 8001466:	b00b      	add	sp, #44	; 0x2c
 8001468:	bd90      	pop	{r4, r7, pc}
 800146a:	46c0      	nop			; (mov r8, r8)
 800146c:	40012400 	.word	0x40012400
 8001470:	40021000 	.word	0x40021000
 8001474:	20000ce0 	.word	0x20000ce0
 8001478:	40020008 	.word	0x40020008

0800147c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	2380      	movs	r3, #128	; 0x80
 800148a:	05db      	lsls	r3, r3, #23
 800148c:	429a      	cmp	r2, r3
 800148e:	d133      	bne.n	80014f8 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001490:	4b1b      	ldr	r3, [pc, #108]	; (8001500 <HAL_TIM_Base_MspInit+0x84>)
 8001492:	69da      	ldr	r2, [r3, #28]
 8001494:	4b1a      	ldr	r3, [pc, #104]	; (8001500 <HAL_TIM_Base_MspInit+0x84>)
 8001496:	2101      	movs	r1, #1
 8001498:	430a      	orrs	r2, r1
 800149a:	61da      	str	r2, [r3, #28]
 800149c:	4b18      	ldr	r3, [pc, #96]	; (8001500 <HAL_TIM_Base_MspInit+0x84>)
 800149e:	69db      	ldr	r3, [r3, #28]
 80014a0:	2201      	movs	r2, #1
 80014a2:	4013      	ands	r3, r2
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 80014a8:	4b16      	ldr	r3, [pc, #88]	; (8001504 <HAL_TIM_Base_MspInit+0x88>)
 80014aa:	4a17      	ldr	r2, [pc, #92]	; (8001508 <HAL_TIM_Base_MspInit+0x8c>)
 80014ac:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014ae:	4b15      	ldr	r3, [pc, #84]	; (8001504 <HAL_TIM_Base_MspInit+0x88>)
 80014b0:	2210      	movs	r2, #16
 80014b2:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014b4:	4b13      	ldr	r3, [pc, #76]	; (8001504 <HAL_TIM_Base_MspInit+0x88>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80014ba:	4b12      	ldr	r3, [pc, #72]	; (8001504 <HAL_TIM_Base_MspInit+0x88>)
 80014bc:	2280      	movs	r2, #128	; 0x80
 80014be:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014c0:	4b10      	ldr	r3, [pc, #64]	; (8001504 <HAL_TIM_Base_MspInit+0x88>)
 80014c2:	2280      	movs	r2, #128	; 0x80
 80014c4:	0092      	lsls	r2, r2, #2
 80014c6:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014c8:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <HAL_TIM_Base_MspInit+0x88>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 80014ce:	4b0d      	ldr	r3, [pc, #52]	; (8001504 <HAL_TIM_Base_MspInit+0x88>)
 80014d0:	2220      	movs	r2, #32
 80014d2:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80014d4:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <HAL_TIM_Base_MspInit+0x88>)
 80014d6:	2280      	movs	r2, #128	; 0x80
 80014d8:	0192      	lsls	r2, r2, #6
 80014da:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80014dc:	4b09      	ldr	r3, [pc, #36]	; (8001504 <HAL_TIM_Base_MspInit+0x88>)
 80014de:	0018      	movs	r0, r3
 80014e0:	f000 fec8 	bl	8002274 <HAL_DMA_Init>
 80014e4:	1e03      	subs	r3, r0, #0
 80014e6:	d001      	beq.n	80014ec <HAL_TIM_Base_MspInit+0x70>
    {
      Error_Handler();
 80014e8:	f7ff ff24 	bl	8001334 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a05      	ldr	r2, [pc, #20]	; (8001504 <HAL_TIM_Base_MspInit+0x88>)
 80014f0:	625a      	str	r2, [r3, #36]	; 0x24
 80014f2:	4b04      	ldr	r3, [pc, #16]	; (8001504 <HAL_TIM_Base_MspInit+0x88>)
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014f8:	46c0      	nop			; (mov r8, r8)
 80014fa:	46bd      	mov	sp, r7
 80014fc:	b004      	add	sp, #16
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40021000 	.word	0x40021000
 8001504:	20000d6c 	.word	0x20000d6c
 8001508:	40020058 	.word	0x40020058

0800150c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800150c:	b590      	push	{r4, r7, lr}
 800150e:	b089      	sub	sp, #36	; 0x24
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001514:	240c      	movs	r4, #12
 8001516:	193b      	adds	r3, r7, r4
 8001518:	0018      	movs	r0, r3
 800151a:	2314      	movs	r3, #20
 800151c:	001a      	movs	r2, r3
 800151e:	2100      	movs	r1, #0
 8001520:	f004 fa5d 	bl	80059de <memset>
  if(htim->Instance==TIM2)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	2380      	movs	r3, #128	; 0x80
 800152a:	05db      	lsls	r3, r3, #23
 800152c:	429a      	cmp	r2, r3
 800152e:	d124      	bne.n	800157a <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001530:	4b14      	ldr	r3, [pc, #80]	; (8001584 <HAL_TIM_MspPostInit+0x78>)
 8001532:	695a      	ldr	r2, [r3, #20]
 8001534:	4b13      	ldr	r3, [pc, #76]	; (8001584 <HAL_TIM_MspPostInit+0x78>)
 8001536:	2180      	movs	r1, #128	; 0x80
 8001538:	0289      	lsls	r1, r1, #10
 800153a:	430a      	orrs	r2, r1
 800153c:	615a      	str	r2, [r3, #20]
 800153e:	4b11      	ldr	r3, [pc, #68]	; (8001584 <HAL_TIM_MspPostInit+0x78>)
 8001540:	695a      	ldr	r2, [r3, #20]
 8001542:	2380      	movs	r3, #128	; 0x80
 8001544:	029b      	lsls	r3, r3, #10
 8001546:	4013      	ands	r3, r2
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800154c:	0021      	movs	r1, r4
 800154e:	187b      	adds	r3, r7, r1
 8001550:	2201      	movs	r2, #1
 8001552:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001554:	187b      	adds	r3, r7, r1
 8001556:	2202      	movs	r2, #2
 8001558:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	187b      	adds	r3, r7, r1
 800155c:	2200      	movs	r2, #0
 800155e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001560:	187b      	adds	r3, r7, r1
 8001562:	2200      	movs	r2, #0
 8001564:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001566:	187b      	adds	r3, r7, r1
 8001568:	2202      	movs	r2, #2
 800156a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156c:	187a      	adds	r2, r7, r1
 800156e:	2390      	movs	r3, #144	; 0x90
 8001570:	05db      	lsls	r3, r3, #23
 8001572:	0011      	movs	r1, r2
 8001574:	0018      	movs	r0, r3
 8001576:	f001 f893 	bl	80026a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800157a:	46c0      	nop			; (mov r8, r8)
 800157c:	46bd      	mov	sp, r7
 800157e:	b009      	add	sp, #36	; 0x24
 8001580:	bd90      	pop	{r4, r7, pc}
 8001582:	46c0      	nop			; (mov r8, r8)
 8001584:	40021000 	.word	0x40021000

08001588 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001588:	b590      	push	{r4, r7, lr}
 800158a:	b08b      	sub	sp, #44	; 0x2c
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001590:	2414      	movs	r4, #20
 8001592:	193b      	adds	r3, r7, r4
 8001594:	0018      	movs	r0, r3
 8001596:	2314      	movs	r3, #20
 8001598:	001a      	movs	r2, r3
 800159a:	2100      	movs	r1, #0
 800159c:	f004 fa1f 	bl	80059de <memset>
  if(huart->Instance==USART1)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a34      	ldr	r2, [pc, #208]	; (8001678 <HAL_UART_MspInit+0xf0>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d162      	bne.n	8001670 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015aa:	4b34      	ldr	r3, [pc, #208]	; (800167c <HAL_UART_MspInit+0xf4>)
 80015ac:	699a      	ldr	r2, [r3, #24]
 80015ae:	4b33      	ldr	r3, [pc, #204]	; (800167c <HAL_UART_MspInit+0xf4>)
 80015b0:	2180      	movs	r1, #128	; 0x80
 80015b2:	01c9      	lsls	r1, r1, #7
 80015b4:	430a      	orrs	r2, r1
 80015b6:	619a      	str	r2, [r3, #24]
 80015b8:	4b30      	ldr	r3, [pc, #192]	; (800167c <HAL_UART_MspInit+0xf4>)
 80015ba:	699a      	ldr	r2, [r3, #24]
 80015bc:	2380      	movs	r3, #128	; 0x80
 80015be:	01db      	lsls	r3, r3, #7
 80015c0:	4013      	ands	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
 80015c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c6:	4b2d      	ldr	r3, [pc, #180]	; (800167c <HAL_UART_MspInit+0xf4>)
 80015c8:	695a      	ldr	r2, [r3, #20]
 80015ca:	4b2c      	ldr	r3, [pc, #176]	; (800167c <HAL_UART_MspInit+0xf4>)
 80015cc:	2180      	movs	r1, #128	; 0x80
 80015ce:	0289      	lsls	r1, r1, #10
 80015d0:	430a      	orrs	r2, r1
 80015d2:	615a      	str	r2, [r3, #20]
 80015d4:	4b29      	ldr	r3, [pc, #164]	; (800167c <HAL_UART_MspInit+0xf4>)
 80015d6:	695a      	ldr	r2, [r3, #20]
 80015d8:	2380      	movs	r3, #128	; 0x80
 80015da:	029b      	lsls	r3, r3, #10
 80015dc:	4013      	ands	r3, r2
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80015e2:	193b      	adds	r3, r7, r4
 80015e4:	22c0      	movs	r2, #192	; 0xc0
 80015e6:	00d2      	lsls	r2, r2, #3
 80015e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ea:	0021      	movs	r1, r4
 80015ec:	187b      	adds	r3, r7, r1
 80015ee:	2202      	movs	r2, #2
 80015f0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	187b      	adds	r3, r7, r1
 80015f4:	2200      	movs	r2, #0
 80015f6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015f8:	187b      	adds	r3, r7, r1
 80015fa:	2203      	movs	r2, #3
 80015fc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80015fe:	187b      	adds	r3, r7, r1
 8001600:	2201      	movs	r2, #1
 8001602:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001604:	187a      	adds	r2, r7, r1
 8001606:	2390      	movs	r3, #144	; 0x90
 8001608:	05db      	lsls	r3, r3, #23
 800160a:	0011      	movs	r1, r2
 800160c:	0018      	movs	r0, r3
 800160e:	f001 f847 	bl	80026a0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8001612:	4b1b      	ldr	r3, [pc, #108]	; (8001680 <HAL_UART_MspInit+0xf8>)
 8001614:	4a1b      	ldr	r2, [pc, #108]	; (8001684 <HAL_UART_MspInit+0xfc>)
 8001616:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001618:	4b19      	ldr	r3, [pc, #100]	; (8001680 <HAL_UART_MspInit+0xf8>)
 800161a:	2210      	movs	r2, #16
 800161c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800161e:	4b18      	ldr	r3, [pc, #96]	; (8001680 <HAL_UART_MspInit+0xf8>)
 8001620:	2200      	movs	r2, #0
 8001622:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001624:	4b16      	ldr	r3, [pc, #88]	; (8001680 <HAL_UART_MspInit+0xf8>)
 8001626:	2280      	movs	r2, #128	; 0x80
 8001628:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800162a:	4b15      	ldr	r3, [pc, #84]	; (8001680 <HAL_UART_MspInit+0xf8>)
 800162c:	2200      	movs	r2, #0
 800162e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001630:	4b13      	ldr	r3, [pc, #76]	; (8001680 <HAL_UART_MspInit+0xf8>)
 8001632:	2200      	movs	r2, #0
 8001634:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001636:	4b12      	ldr	r3, [pc, #72]	; (8001680 <HAL_UART_MspInit+0xf8>)
 8001638:	2200      	movs	r2, #0
 800163a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800163c:	4b10      	ldr	r3, [pc, #64]	; (8001680 <HAL_UART_MspInit+0xf8>)
 800163e:	22c0      	movs	r2, #192	; 0xc0
 8001640:	0192      	lsls	r2, r2, #6
 8001642:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001644:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <HAL_UART_MspInit+0xf8>)
 8001646:	0018      	movs	r0, r3
 8001648:	f000 fe14 	bl	8002274 <HAL_DMA_Init>
 800164c:	1e03      	subs	r3, r0, #0
 800164e:	d001      	beq.n	8001654 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001650:	f7ff fe70 	bl	8001334 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4a0a      	ldr	r2, [pc, #40]	; (8001680 <HAL_UART_MspInit+0xf8>)
 8001658:	671a      	str	r2, [r3, #112]	; 0x70
 800165a:	4b09      	ldr	r3, [pc, #36]	; (8001680 <HAL_UART_MspInit+0xf8>)
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001660:	2200      	movs	r2, #0
 8001662:	2100      	movs	r1, #0
 8001664:	201b      	movs	r0, #27
 8001666:	f000 fdd3 	bl	8002210 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800166a:	201b      	movs	r0, #27
 800166c:	f000 fde5 	bl	800223a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001670:	46c0      	nop			; (mov r8, r8)
 8001672:	46bd      	mov	sp, r7
 8001674:	b00b      	add	sp, #44	; 0x2c
 8001676:	bd90      	pop	{r4, r7, pc}
 8001678:	40013800 	.word	0x40013800
 800167c:	40021000 	.word	0x40021000
 8001680:	20000e38 	.word	0x20000e38
 8001684:	4002001c 	.word	0x4002001c

08001688 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800168c:	e7fe      	b.n	800168c <NMI_Handler+0x4>

0800168e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001692:	e7fe      	b.n	8001692 <HardFault_Handler+0x4>

08001694 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001698:	46c0      	nop			; (mov r8, r8)
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016a2:	46c0      	nop			; (mov r8, r8)
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ac:	f000 f906 	bl	80018bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016b0:	46c0      	nop			; (mov r8, r8)
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
	...

080016b8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80016bc:	4b03      	ldr	r3, [pc, #12]	; (80016cc <DMA1_Channel1_IRQHandler+0x14>)
 80016be:	0018      	movs	r0, r3
 80016c0:	f000 ff03 	bl	80024ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80016c4:	46c0      	nop			; (mov r8, r8)
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	46c0      	nop			; (mov r8, r8)
 80016cc:	20000ce0 	.word	0x20000ce0

080016d0 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80016d4:	4b03      	ldr	r3, [pc, #12]	; (80016e4 <DMA1_Channel2_3_IRQHandler+0x14>)
 80016d6:	0018      	movs	r0, r3
 80016d8:	f000 fef7 	bl	80024ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80016dc:	46c0      	nop			; (mov r8, r8)
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	46c0      	nop			; (mov r8, r8)
 80016e4:	20000e38 	.word	0x20000e38

080016e8 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80016ec:	4b03      	ldr	r3, [pc, #12]	; (80016fc <DMA1_Channel4_5_IRQHandler+0x14>)
 80016ee:	0018      	movs	r0, r3
 80016f0:	f000 feeb 	bl	80024ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 80016f4:	46c0      	nop			; (mov r8, r8)
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	46c0      	nop			; (mov r8, r8)
 80016fc:	20000d6c 	.word	0x20000d6c

08001700 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8001704:	4b03      	ldr	r3, [pc, #12]	; (8001714 <ADC1_IRQHandler+0x14>)
 8001706:	0018      	movs	r0, r3
 8001708:	f000 fa88 	bl	8001c1c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800170c:	46c0      	nop			; (mov r8, r8)
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	46c0      	nop			; (mov r8, r8)
 8001714:	20000ca0 	.word	0x20000ca0

08001718 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800171c:	4b03      	ldr	r3, [pc, #12]	; (800172c <USART1_IRQHandler+0x14>)
 800171e:	0018      	movs	r0, r3
 8001720:	f002 fff6 	bl	8004710 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001724:	46c0      	nop			; (mov r8, r8)
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	46c0      	nop			; (mov r8, r8)
 800172c:	20000db0 	.word	0x20000db0

08001730 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001738:	4a14      	ldr	r2, [pc, #80]	; (800178c <_sbrk+0x5c>)
 800173a:	4b15      	ldr	r3, [pc, #84]	; (8001790 <_sbrk+0x60>)
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001744:	4b13      	ldr	r3, [pc, #76]	; (8001794 <_sbrk+0x64>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d102      	bne.n	8001752 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800174c:	4b11      	ldr	r3, [pc, #68]	; (8001794 <_sbrk+0x64>)
 800174e:	4a12      	ldr	r2, [pc, #72]	; (8001798 <_sbrk+0x68>)
 8001750:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001752:	4b10      	ldr	r3, [pc, #64]	; (8001794 <_sbrk+0x64>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	18d3      	adds	r3, r2, r3
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	429a      	cmp	r2, r3
 800175e:	d207      	bcs.n	8001770 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001760:	f004 f900 	bl	8005964 <__errno>
 8001764:	0003      	movs	r3, r0
 8001766:	220c      	movs	r2, #12
 8001768:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800176a:	2301      	movs	r3, #1
 800176c:	425b      	negs	r3, r3
 800176e:	e009      	b.n	8001784 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001770:	4b08      	ldr	r3, [pc, #32]	; (8001794 <_sbrk+0x64>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001776:	4b07      	ldr	r3, [pc, #28]	; (8001794 <_sbrk+0x64>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	18d2      	adds	r2, r2, r3
 800177e:	4b05      	ldr	r3, [pc, #20]	; (8001794 <_sbrk+0x64>)
 8001780:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001782:	68fb      	ldr	r3, [r7, #12]
}
 8001784:	0018      	movs	r0, r3
 8001786:	46bd      	mov	sp, r7
 8001788:	b006      	add	sp, #24
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20001800 	.word	0x20001800
 8001790:	00000400 	.word	0x00000400
 8001794:	20000e98 	.word	0x20000e98
 8001798:	20000eb0 	.word	0x20000eb0

0800179c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80017a0:	46c0      	nop			; (mov r8, r8)
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
	...

080017a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017a8:	4813      	ldr	r0, [pc, #76]	; (80017f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017aa:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80017ac:	f7ff fff6 	bl	800179c <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80017b0:	4812      	ldr	r0, [pc, #72]	; (80017fc <LoopForever+0x6>)
    LDR R1, [R0]
 80017b2:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80017b4:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80017b6:	4a12      	ldr	r2, [pc, #72]	; (8001800 <LoopForever+0xa>)
    CMP R1, R2
 80017b8:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80017ba:	d105      	bne.n	80017c8 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80017bc:	4811      	ldr	r0, [pc, #68]	; (8001804 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80017be:	4912      	ldr	r1, [pc, #72]	; (8001808 <LoopForever+0x12>)
    STR R1, [R0]
 80017c0:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80017c2:	4812      	ldr	r0, [pc, #72]	; (800180c <LoopForever+0x16>)
    LDR R1,=0x00000000
 80017c4:	4912      	ldr	r1, [pc, #72]	; (8001810 <LoopForever+0x1a>)
    STR R1, [R0]
 80017c6:	6001      	str	r1, [r0, #0]

080017c8 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017c8:	4812      	ldr	r0, [pc, #72]	; (8001814 <LoopForever+0x1e>)
  ldr r1, =_edata
 80017ca:	4913      	ldr	r1, [pc, #76]	; (8001818 <LoopForever+0x22>)
  ldr r2, =_sidata
 80017cc:	4a13      	ldr	r2, [pc, #76]	; (800181c <LoopForever+0x26>)
  movs r3, #0
 80017ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017d0:	e002      	b.n	80017d8 <LoopCopyDataInit>

080017d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017d6:	3304      	adds	r3, #4

080017d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017dc:	d3f9      	bcc.n	80017d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017de:	4a10      	ldr	r2, [pc, #64]	; (8001820 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80017e0:	4c10      	ldr	r4, [pc, #64]	; (8001824 <LoopForever+0x2e>)
  movs r3, #0
 80017e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e4:	e001      	b.n	80017ea <LoopFillZerobss>

080017e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e8:	3204      	adds	r2, #4

080017ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017ec:	d3fb      	bcc.n	80017e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80017ee:	f004 f8bf 	bl	8005970 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017f2:	f7ff fa29 	bl	8000c48 <main>

080017f6 <LoopForever>:

LoopForever:
    b LoopForever
 80017f6:	e7fe      	b.n	80017f6 <LoopForever>
  ldr   r0, =_estack
 80017f8:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 80017fc:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001800:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8001804:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8001808:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 800180c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001810:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001814:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001818:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 800181c:	08005bec 	.word	0x08005bec
  ldr r2, =_sbss
 8001820:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8001824:	20000eb0 	.word	0x20000eb0

08001828 <CEC_CAN_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001828:	e7fe      	b.n	8001828 <CEC_CAN_IRQHandler>
	...

0800182c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001830:	4b07      	ldr	r3, [pc, #28]	; (8001850 <HAL_Init+0x24>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	4b06      	ldr	r3, [pc, #24]	; (8001850 <HAL_Init+0x24>)
 8001836:	2110      	movs	r1, #16
 8001838:	430a      	orrs	r2, r1
 800183a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800183c:	2000      	movs	r0, #0
 800183e:	f000 f809 	bl	8001854 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001842:	f7ff fd7d 	bl	8001340 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001846:	2300      	movs	r3, #0
}
 8001848:	0018      	movs	r0, r3
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	46c0      	nop			; (mov r8, r8)
 8001850:	40022000 	.word	0x40022000

08001854 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001854:	b590      	push	{r4, r7, lr}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800185c:	4b14      	ldr	r3, [pc, #80]	; (80018b0 <HAL_InitTick+0x5c>)
 800185e:	681c      	ldr	r4, [r3, #0]
 8001860:	4b14      	ldr	r3, [pc, #80]	; (80018b4 <HAL_InitTick+0x60>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	0019      	movs	r1, r3
 8001866:	23fa      	movs	r3, #250	; 0xfa
 8001868:	0098      	lsls	r0, r3, #2
 800186a:	f7fe fc4d 	bl	8000108 <__udivsi3>
 800186e:	0003      	movs	r3, r0
 8001870:	0019      	movs	r1, r3
 8001872:	0020      	movs	r0, r4
 8001874:	f7fe fc48 	bl	8000108 <__udivsi3>
 8001878:	0003      	movs	r3, r0
 800187a:	0018      	movs	r0, r3
 800187c:	f000 fced 	bl	800225a <HAL_SYSTICK_Config>
 8001880:	1e03      	subs	r3, r0, #0
 8001882:	d001      	beq.n	8001888 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e00f      	b.n	80018a8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2b03      	cmp	r3, #3
 800188c:	d80b      	bhi.n	80018a6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	2301      	movs	r3, #1
 8001892:	425b      	negs	r3, r3
 8001894:	2200      	movs	r2, #0
 8001896:	0018      	movs	r0, r3
 8001898:	f000 fcba 	bl	8002210 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800189c:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <HAL_InitTick+0x64>)
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80018a2:	2300      	movs	r3, #0
 80018a4:	e000      	b.n	80018a8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
}
 80018a8:	0018      	movs	r0, r3
 80018aa:	46bd      	mov	sp, r7
 80018ac:	b003      	add	sp, #12
 80018ae:	bd90      	pop	{r4, r7, pc}
 80018b0:	200001b0 	.word	0x200001b0
 80018b4:	200001b8 	.word	0x200001b8
 80018b8:	200001b4 	.word	0x200001b4

080018bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018c0:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <HAL_IncTick+0x1c>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	001a      	movs	r2, r3
 80018c6:	4b05      	ldr	r3, [pc, #20]	; (80018dc <HAL_IncTick+0x20>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	18d2      	adds	r2, r2, r3
 80018cc:	4b03      	ldr	r3, [pc, #12]	; (80018dc <HAL_IncTick+0x20>)
 80018ce:	601a      	str	r2, [r3, #0]
}
 80018d0:	46c0      	nop			; (mov r8, r8)
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	46c0      	nop			; (mov r8, r8)
 80018d8:	200001b8 	.word	0x200001b8
 80018dc:	20000e9c 	.word	0x20000e9c

080018e0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  return uwTick;
 80018e4:	4b02      	ldr	r3, [pc, #8]	; (80018f0 <HAL_GetTick+0x10>)
 80018e6:	681b      	ldr	r3, [r3, #0]
}
 80018e8:	0018      	movs	r0, r3
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	46c0      	nop			; (mov r8, r8)
 80018f0:	20000e9c 	.word	0x20000e9c

080018f4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018fc:	230f      	movs	r3, #15
 80018fe:	18fb      	adds	r3, r7, r3
 8001900:	2200      	movs	r2, #0
 8001902:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001904:	2300      	movs	r3, #0
 8001906:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d101      	bne.n	8001912 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e125      	b.n	8001b5e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001916:	2b00      	cmp	r3, #0
 8001918:	d10a      	bne.n	8001930 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2234      	movs	r2, #52	; 0x34
 8001924:	2100      	movs	r1, #0
 8001926:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	0018      	movs	r0, r3
 800192c:	f7ff fd2c 	bl	8001388 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001934:	2210      	movs	r2, #16
 8001936:	4013      	ands	r3, r2
 8001938:	d000      	beq.n	800193c <HAL_ADC_Init+0x48>
 800193a:	e103      	b.n	8001b44 <HAL_ADC_Init+0x250>
 800193c:	230f      	movs	r3, #15
 800193e:	18fb      	adds	r3, r7, r3
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d000      	beq.n	8001948 <HAL_ADC_Init+0x54>
 8001946:	e0fd      	b.n	8001b44 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	2204      	movs	r2, #4
 8001950:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001952:	d000      	beq.n	8001956 <HAL_ADC_Init+0x62>
 8001954:	e0f6      	b.n	8001b44 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800195a:	4a83      	ldr	r2, [pc, #524]	; (8001b68 <HAL_ADC_Init+0x274>)
 800195c:	4013      	ands	r3, r2
 800195e:	2202      	movs	r2, #2
 8001960:	431a      	orrs	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	2203      	movs	r2, #3
 800196e:	4013      	ands	r3, r2
 8001970:	2b01      	cmp	r3, #1
 8001972:	d112      	bne.n	800199a <HAL_ADC_Init+0xa6>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2201      	movs	r2, #1
 800197c:	4013      	ands	r3, r2
 800197e:	2b01      	cmp	r3, #1
 8001980:	d009      	beq.n	8001996 <HAL_ADC_Init+0xa2>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	68da      	ldr	r2, [r3, #12]
 8001988:	2380      	movs	r3, #128	; 0x80
 800198a:	021b      	lsls	r3, r3, #8
 800198c:	401a      	ands	r2, r3
 800198e:	2380      	movs	r3, #128	; 0x80
 8001990:	021b      	lsls	r3, r3, #8
 8001992:	429a      	cmp	r2, r3
 8001994:	d101      	bne.n	800199a <HAL_ADC_Init+0xa6>
 8001996:	2301      	movs	r3, #1
 8001998:	e000      	b.n	800199c <HAL_ADC_Init+0xa8>
 800199a:	2300      	movs	r3, #0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d116      	bne.n	80019ce <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	2218      	movs	r2, #24
 80019a8:	4393      	bics	r3, r2
 80019aa:	0019      	movs	r1, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689a      	ldr	r2, [r3, #8]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	430a      	orrs	r2, r1
 80019b6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	691b      	ldr	r3, [r3, #16]
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	0899      	lsrs	r1, r3, #2
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685a      	ldr	r2, [r3, #4]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	430a      	orrs	r2, r1
 80019cc:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	68da      	ldr	r2, [r3, #12]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4964      	ldr	r1, [pc, #400]	; (8001b6c <HAL_ADC_Init+0x278>)
 80019da:	400a      	ands	r2, r1
 80019dc:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	7e1b      	ldrb	r3, [r3, #24]
 80019e2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	7e5b      	ldrb	r3, [r3, #25]
 80019e8:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80019ea:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	7e9b      	ldrb	r3, [r3, #26]
 80019f0:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80019f2:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d002      	beq.n	8001a02 <HAL_ADC_Init+0x10e>
 80019fc:	2380      	movs	r3, #128	; 0x80
 80019fe:	015b      	lsls	r3, r3, #5
 8001a00:	e000      	b.n	8001a04 <HAL_ADC_Init+0x110>
 8001a02:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001a04:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001a0a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d101      	bne.n	8001a18 <HAL_ADC_Init+0x124>
 8001a14:	2304      	movs	r3, #4
 8001a16:	e000      	b.n	8001a1a <HAL_ADC_Init+0x126>
 8001a18:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001a1a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2124      	movs	r1, #36	; 0x24
 8001a20:	5c5b      	ldrb	r3, [r3, r1]
 8001a22:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001a24:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a26:	68ba      	ldr	r2, [r7, #8]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	7edb      	ldrb	r3, [r3, #27]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d115      	bne.n	8001a60 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	7e9b      	ldrb	r3, [r3, #26]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d105      	bne.n	8001a48 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	2280      	movs	r2, #128	; 0x80
 8001a40:	0252      	lsls	r2, r2, #9
 8001a42:	4313      	orrs	r3, r2
 8001a44:	60bb      	str	r3, [r7, #8]
 8001a46:	e00b      	b.n	8001a60 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a4c:	2220      	movs	r2, #32
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a58:	2201      	movs	r2, #1
 8001a5a:	431a      	orrs	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	69da      	ldr	r2, [r3, #28]
 8001a64:	23c2      	movs	r3, #194	; 0xc2
 8001a66:	33ff      	adds	r3, #255	; 0xff
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d007      	beq.n	8001a7c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001a74:	4313      	orrs	r3, r2
 8001a76:	68ba      	ldr	r2, [r7, #8]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	68d9      	ldr	r1, [r3, #12]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	68ba      	ldr	r2, [r7, #8]
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a90:	2380      	movs	r3, #128	; 0x80
 8001a92:	055b      	lsls	r3, r3, #21
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d01b      	beq.n	8001ad0 <HAL_ADC_Init+0x1dc>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d017      	beq.n	8001ad0 <HAL_ADC_Init+0x1dc>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d013      	beq.n	8001ad0 <HAL_ADC_Init+0x1dc>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aac:	2b03      	cmp	r3, #3
 8001aae:	d00f      	beq.n	8001ad0 <HAL_ADC_Init+0x1dc>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab4:	2b04      	cmp	r3, #4
 8001ab6:	d00b      	beq.n	8001ad0 <HAL_ADC_Init+0x1dc>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001abc:	2b05      	cmp	r3, #5
 8001abe:	d007      	beq.n	8001ad0 <HAL_ADC_Init+0x1dc>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac4:	2b06      	cmp	r3, #6
 8001ac6:	d003      	beq.n	8001ad0 <HAL_ADC_Init+0x1dc>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001acc:	2b07      	cmp	r3, #7
 8001ace:	d112      	bne.n	8001af6 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	695a      	ldr	r2, [r3, #20]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2107      	movs	r1, #7
 8001adc:	438a      	bics	r2, r1
 8001ade:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6959      	ldr	r1, [r3, #20]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aea:	2207      	movs	r2, #7
 8001aec:	401a      	ands	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	430a      	orrs	r2, r1
 8001af4:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	4a1c      	ldr	r2, [pc, #112]	; (8001b70 <HAL_ADC_Init+0x27c>)
 8001afe:	4013      	ands	r3, r2
 8001b00:	68ba      	ldr	r2, [r7, #8]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d10b      	bne.n	8001b1e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b10:	2203      	movs	r2, #3
 8001b12:	4393      	bics	r3, r2
 8001b14:	2201      	movs	r2, #1
 8001b16:	431a      	orrs	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001b1c:	e01c      	b.n	8001b58 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b22:	2212      	movs	r2, #18
 8001b24:	4393      	bics	r3, r2
 8001b26:	2210      	movs	r2, #16
 8001b28:	431a      	orrs	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b32:	2201      	movs	r2, #1
 8001b34:	431a      	orrs	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001b3a:	230f      	movs	r3, #15
 8001b3c:	18fb      	adds	r3, r7, r3
 8001b3e:	2201      	movs	r2, #1
 8001b40:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001b42:	e009      	b.n	8001b58 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b48:	2210      	movs	r2, #16
 8001b4a:	431a      	orrs	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001b50:	230f      	movs	r3, #15
 8001b52:	18fb      	adds	r3, r7, r3
 8001b54:	2201      	movs	r2, #1
 8001b56:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001b58:	230f      	movs	r3, #15
 8001b5a:	18fb      	adds	r3, r7, r3
 8001b5c:	781b      	ldrb	r3, [r3, #0]
}
 8001b5e:	0018      	movs	r0, r3
 8001b60:	46bd      	mov	sp, r7
 8001b62:	b004      	add	sp, #16
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	46c0      	nop			; (mov r8, r8)
 8001b68:	fffffefd 	.word	0xfffffefd
 8001b6c:	fffe0219 	.word	0xfffe0219
 8001b70:	833fffe7 	.word	0x833fffe7

08001b74 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001b74:	b590      	push	{r4, r7, lr}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b7c:	230f      	movs	r3, #15
 8001b7e:	18fb      	adds	r3, r7, r3
 8001b80:	2200      	movs	r2, #0
 8001b82:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	2204      	movs	r2, #4
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	d138      	bne.n	8001c02 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2234      	movs	r2, #52	; 0x34
 8001b94:	5c9b      	ldrb	r3, [r3, r2]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d101      	bne.n	8001b9e <HAL_ADC_Start+0x2a>
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	e038      	b.n	8001c10 <HAL_ADC_Start+0x9c>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2234      	movs	r2, #52	; 0x34
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	7e5b      	ldrb	r3, [r3, #25]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d007      	beq.n	8001bbe <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001bae:	230f      	movs	r3, #15
 8001bb0:	18fc      	adds	r4, r7, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	f000 f9fb 	bl	8001fb0 <ADC_Enable>
 8001bba:	0003      	movs	r3, r0
 8001bbc:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001bbe:	230f      	movs	r3, #15
 8001bc0:	18fb      	adds	r3, r7, r3
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d120      	bne.n	8001c0a <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bcc:	4a12      	ldr	r2, [pc, #72]	; (8001c18 <HAL_ADC_Start+0xa4>)
 8001bce:	4013      	ands	r3, r2
 8001bd0:	2280      	movs	r2, #128	; 0x80
 8001bd2:	0052      	lsls	r2, r2, #1
 8001bd4:	431a      	orrs	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2234      	movs	r2, #52	; 0x34
 8001be4:	2100      	movs	r1, #0
 8001be6:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	221c      	movs	r2, #28
 8001bee:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	689a      	ldr	r2, [r3, #8]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2104      	movs	r1, #4
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	e003      	b.n	8001c0a <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001c02:	230f      	movs	r3, #15
 8001c04:	18fb      	adds	r3, r7, r3
 8001c06:	2202      	movs	r2, #2
 8001c08:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c0a:	230f      	movs	r3, #15
 8001c0c:	18fb      	adds	r3, r7, r3
 8001c0e:	781b      	ldrb	r3, [r3, #0]
}
 8001c10:	0018      	movs	r0, r3
 8001c12:	46bd      	mov	sp, r7
 8001c14:	b005      	add	sp, #20
 8001c16:	bd90      	pop	{r4, r7, pc}
 8001c18:	fffff0fe 	.word	0xfffff0fe

08001c1c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2204      	movs	r2, #4
 8001c38:	4013      	ands	r3, r2
 8001c3a:	d003      	beq.n	8001c44 <HAL_ADC_IRQHandler+0x28>
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	2204      	movs	r2, #4
 8001c40:	4013      	ands	r3, r2
 8001c42:	d107      	bne.n	8001c54 <HAL_ADC_IRQHandler+0x38>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2208      	movs	r2, #8
 8001c48:	4013      	ands	r3, r2
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001c4a:	d049      	beq.n	8001ce0 <HAL_ADC_IRQHandler+0xc4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	2208      	movs	r2, #8
 8001c50:	4013      	ands	r3, r2
 8001c52:	d045      	beq.n	8001ce0 <HAL_ADC_IRQHandler+0xc4>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c58:	2210      	movs	r2, #16
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	d106      	bne.n	8001c6c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c62:	2280      	movs	r2, #128	; 0x80
 8001c64:	0092      	lsls	r2, r2, #2
 8001c66:	431a      	orrs	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	68da      	ldr	r2, [r3, #12]
 8001c72:	23c0      	movs	r3, #192	; 0xc0
 8001c74:	011b      	lsls	r3, r3, #4
 8001c76:	4013      	ands	r3, r2
 8001c78:	d12a      	bne.n	8001cd0 <HAL_ADC_IRQHandler+0xb4>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d126      	bne.n	8001cd0 <HAL_ADC_IRQHandler+0xb4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2208      	movs	r2, #8
 8001c86:	4013      	ands	r3, r2
 8001c88:	d022      	beq.n	8001cd0 <HAL_ADC_IRQHandler+0xb4>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	2204      	movs	r2, #4
 8001c92:	4013      	ands	r3, r2
 8001c94:	d110      	bne.n	8001cb8 <HAL_ADC_IRQHandler+0x9c>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	210c      	movs	r1, #12
 8001ca2:	438a      	bics	r2, r1
 8001ca4:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001caa:	4a2d      	ldr	r2, [pc, #180]	; (8001d60 <HAL_ADC_IRQHandler+0x144>)
 8001cac:	4013      	ands	r3, r2
 8001cae:	2201      	movs	r2, #1
 8001cb0:	431a      	orrs	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	639a      	str	r2, [r3, #56]	; 0x38
 8001cb6:	e00b      	b.n	8001cd0 <HAL_ADC_IRQHandler+0xb4>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cbc:	2220      	movs	r2, #32
 8001cbe:	431a      	orrs	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cc8:	2201      	movs	r2, #1
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	0018      	movs	r0, r3
 8001cd4:	f000 f846 	bl	8001d64 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	220c      	movs	r2, #12
 8001cde:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(((tmp_isr & ADC_FLAG_AWD) == ADC_FLAG_AWD) && ((tmp_ier & ADC_IT_AWD) == ADC_IT_AWD))
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2280      	movs	r2, #128	; 0x80
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	d012      	beq.n	8001d0e <HAL_ADC_IRQHandler+0xf2>
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	2280      	movs	r2, #128	; 0x80
 8001cec:	4013      	ands	r3, r2
 8001cee:	d00e      	beq.n	8001d0e <HAL_ADC_IRQHandler+0xf2>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cf4:	2280      	movs	r2, #128	; 0x80
 8001cf6:	0252      	lsls	r2, r2, #9
 8001cf8:	431a      	orrs	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	0018      	movs	r0, r3
 8001d02:	f000 f837 	bl	8001d74 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2280      	movs	r2, #128	; 0x80
 8001d0c:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2210      	movs	r2, #16
 8001d12:	4013      	ands	r3, r2
 8001d14:	d020      	beq.n	8001d58 <HAL_ADC_IRQHandler+0x13c>
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	2210      	movs	r2, #16
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	d01c      	beq.n	8001d58 <HAL_ADC_IRQHandler+0x13c>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d006      	beq.n	8001d34 <HAL_ADC_IRQHandler+0x118>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d10d      	bne.n	8001d50 <HAL_ADC_IRQHandler+0x134>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d38:	2202      	movs	r2, #2
 8001d3a:	431a      	orrs	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2210      	movs	r2, #16
 8001d46:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	0018      	movs	r0, r3
 8001d4c:	f000 f81a 	bl	8001d84 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2210      	movs	r2, #16
 8001d56:	601a      	str	r2, [r3, #0]
  }

}
 8001d58:	46c0      	nop			; (mov r8, r8)
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	b004      	add	sp, #16
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	fffffefe 	.word	0xfffffefe

08001d64 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001d6c:	46c0      	nop			; (mov r8, r8)
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	b002      	add	sp, #8
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001d7c:	46c0      	nop			; (mov r8, r8)
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	b002      	add	sp, #8
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001d8c:	46c0      	nop			; (mov r8, r8)
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	b002      	add	sp, #8
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d9e:	230f      	movs	r3, #15
 8001da0:	18fb      	adds	r3, r7, r3
 8001da2:	2200      	movs	r2, #0
 8001da4:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001da6:	2300      	movs	r3, #0
 8001da8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dae:	2380      	movs	r3, #128	; 0x80
 8001db0:	055b      	lsls	r3, r3, #21
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d011      	beq.n	8001dda <HAL_ADC_ConfigChannel+0x46>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d00d      	beq.n	8001dda <HAL_ADC_ConfigChannel+0x46>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d009      	beq.n	8001dda <HAL_ADC_ConfigChannel+0x46>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dca:	2b03      	cmp	r3, #3
 8001dcc:	d005      	beq.n	8001dda <HAL_ADC_ConfigChannel+0x46>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd2:	2b04      	cmp	r3, #4
 8001dd4:	d001      	beq.n	8001dda <HAL_ADC_ConfigChannel+0x46>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2234      	movs	r2, #52	; 0x34
 8001dde:	5c9b      	ldrb	r3, [r3, r2]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d101      	bne.n	8001de8 <HAL_ADC_ConfigChannel+0x54>
 8001de4:	2302      	movs	r3, #2
 8001de6:	e0d0      	b.n	8001f8a <HAL_ADC_ConfigChannel+0x1f6>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2234      	movs	r2, #52	; 0x34
 8001dec:	2101      	movs	r1, #1
 8001dee:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	2204      	movs	r2, #4
 8001df8:	4013      	ands	r3, r2
 8001dfa:	d000      	beq.n	8001dfe <HAL_ADC_ConfigChannel+0x6a>
 8001dfc:	e0b4      	b.n	8001f68 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	4a64      	ldr	r2, [pc, #400]	; (8001f94 <HAL_ADC_ConfigChannel+0x200>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d100      	bne.n	8001e0a <HAL_ADC_ConfigChannel+0x76>
 8001e08:	e082      	b.n	8001f10 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2201      	movs	r2, #1
 8001e16:	409a      	lsls	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e24:	2380      	movs	r3, #128	; 0x80
 8001e26:	055b      	lsls	r3, r3, #21
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d037      	beq.n	8001e9c <HAL_ADC_ConfigChannel+0x108>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d033      	beq.n	8001e9c <HAL_ADC_ConfigChannel+0x108>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d02f      	beq.n	8001e9c <HAL_ADC_ConfigChannel+0x108>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e40:	2b03      	cmp	r3, #3
 8001e42:	d02b      	beq.n	8001e9c <HAL_ADC_ConfigChannel+0x108>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e48:	2b04      	cmp	r3, #4
 8001e4a:	d027      	beq.n	8001e9c <HAL_ADC_ConfigChannel+0x108>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e50:	2b05      	cmp	r3, #5
 8001e52:	d023      	beq.n	8001e9c <HAL_ADC_ConfigChannel+0x108>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e58:	2b06      	cmp	r3, #6
 8001e5a:	d01f      	beq.n	8001e9c <HAL_ADC_ConfigChannel+0x108>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e60:	2b07      	cmp	r3, #7
 8001e62:	d01b      	beq.n	8001e9c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	2107      	movs	r1, #7
 8001e70:	400b      	ands	r3, r1
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d012      	beq.n	8001e9c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	695a      	ldr	r2, [r3, #20]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2107      	movs	r1, #7
 8001e82:	438a      	bics	r2, r1
 8001e84:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	6959      	ldr	r1, [r3, #20]
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	2207      	movs	r2, #7
 8001e92:	401a      	ands	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b10      	cmp	r3, #16
 8001ea2:	d007      	beq.n	8001eb4 <HAL_ADC_ConfigChannel+0x120>
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2b11      	cmp	r3, #17
 8001eaa:	d003      	beq.n	8001eb4 <HAL_ADC_ConfigChannel+0x120>
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2b12      	cmp	r3, #18
 8001eb2:	d163      	bne.n	8001f7c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001eb4:	4b38      	ldr	r3, [pc, #224]	; (8001f98 <HAL_ADC_ConfigChannel+0x204>)
 8001eb6:	6819      	ldr	r1, [r3, #0]
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2b10      	cmp	r3, #16
 8001ebe:	d009      	beq.n	8001ed4 <HAL_ADC_ConfigChannel+0x140>
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2b11      	cmp	r3, #17
 8001ec6:	d102      	bne.n	8001ece <HAL_ADC_ConfigChannel+0x13a>
 8001ec8:	2380      	movs	r3, #128	; 0x80
 8001eca:	03db      	lsls	r3, r3, #15
 8001ecc:	e004      	b.n	8001ed8 <HAL_ADC_ConfigChannel+0x144>
 8001ece:	2380      	movs	r3, #128	; 0x80
 8001ed0:	045b      	lsls	r3, r3, #17
 8001ed2:	e001      	b.n	8001ed8 <HAL_ADC_ConfigChannel+0x144>
 8001ed4:	2380      	movs	r3, #128	; 0x80
 8001ed6:	041b      	lsls	r3, r3, #16
 8001ed8:	4a2f      	ldr	r2, [pc, #188]	; (8001f98 <HAL_ADC_ConfigChannel+0x204>)
 8001eda:	430b      	orrs	r3, r1
 8001edc:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2b10      	cmp	r3, #16
 8001ee4:	d14a      	bne.n	8001f7c <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ee6:	4b2d      	ldr	r3, [pc, #180]	; (8001f9c <HAL_ADC_ConfigChannel+0x208>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	492d      	ldr	r1, [pc, #180]	; (8001fa0 <HAL_ADC_ConfigChannel+0x20c>)
 8001eec:	0018      	movs	r0, r3
 8001eee:	f7fe f90b 	bl	8000108 <__udivsi3>
 8001ef2:	0003      	movs	r3, r0
 8001ef4:	001a      	movs	r2, r3
 8001ef6:	0013      	movs	r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	189b      	adds	r3, r3, r2
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f00:	e002      	b.n	8001f08 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	3b01      	subs	r3, #1
 8001f06:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1f9      	bne.n	8001f02 <HAL_ADC_ConfigChannel+0x16e>
 8001f0e:	e035      	b.n	8001f7c <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2101      	movs	r1, #1
 8001f1c:	4099      	lsls	r1, r3
 8001f1e:	000b      	movs	r3, r1
 8001f20:	43d9      	mvns	r1, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	400a      	ands	r2, r1
 8001f28:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2b10      	cmp	r3, #16
 8001f30:	d007      	beq.n	8001f42 <HAL_ADC_ConfigChannel+0x1ae>
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2b11      	cmp	r3, #17
 8001f38:	d003      	beq.n	8001f42 <HAL_ADC_ConfigChannel+0x1ae>
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2b12      	cmp	r3, #18
 8001f40:	d11c      	bne.n	8001f7c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001f42:	4b15      	ldr	r3, [pc, #84]	; (8001f98 <HAL_ADC_ConfigChannel+0x204>)
 8001f44:	6819      	ldr	r1, [r3, #0]
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2b10      	cmp	r3, #16
 8001f4c:	d007      	beq.n	8001f5e <HAL_ADC_ConfigChannel+0x1ca>
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2b11      	cmp	r3, #17
 8001f54:	d101      	bne.n	8001f5a <HAL_ADC_ConfigChannel+0x1c6>
 8001f56:	4b13      	ldr	r3, [pc, #76]	; (8001fa4 <HAL_ADC_ConfigChannel+0x210>)
 8001f58:	e002      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x1cc>
 8001f5a:	4b13      	ldr	r3, [pc, #76]	; (8001fa8 <HAL_ADC_ConfigChannel+0x214>)
 8001f5c:	e000      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x1cc>
 8001f5e:	4b13      	ldr	r3, [pc, #76]	; (8001fac <HAL_ADC_ConfigChannel+0x218>)
 8001f60:	4a0d      	ldr	r2, [pc, #52]	; (8001f98 <HAL_ADC_ConfigChannel+0x204>)
 8001f62:	400b      	ands	r3, r1
 8001f64:	6013      	str	r3, [r2, #0]
 8001f66:	e009      	b.n	8001f7c <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f6c:	2220      	movs	r2, #32
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001f74:	230f      	movs	r3, #15
 8001f76:	18fb      	adds	r3, r7, r3
 8001f78:	2201      	movs	r2, #1
 8001f7a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2234      	movs	r2, #52	; 0x34
 8001f80:	2100      	movs	r1, #0
 8001f82:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001f84:	230f      	movs	r3, #15
 8001f86:	18fb      	adds	r3, r7, r3
 8001f88:	781b      	ldrb	r3, [r3, #0]
}
 8001f8a:	0018      	movs	r0, r3
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	b004      	add	sp, #16
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	46c0      	nop			; (mov r8, r8)
 8001f94:	00001001 	.word	0x00001001
 8001f98:	40012708 	.word	0x40012708
 8001f9c:	200001b0 	.word	0x200001b0
 8001fa0:	000f4240 	.word	0x000f4240
 8001fa4:	ffbfffff 	.word	0xffbfffff
 8001fa8:	feffffff 	.word	0xfeffffff
 8001fac:	ff7fffff 	.word	0xff7fffff

08001fb0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	2203      	movs	r2, #3
 8001fc8:	4013      	ands	r3, r2
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d112      	bne.n	8001ff4 <ADC_Enable+0x44>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d009      	beq.n	8001ff0 <ADC_Enable+0x40>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68da      	ldr	r2, [r3, #12]
 8001fe2:	2380      	movs	r3, #128	; 0x80
 8001fe4:	021b      	lsls	r3, r3, #8
 8001fe6:	401a      	ands	r2, r3
 8001fe8:	2380      	movs	r3, #128	; 0x80
 8001fea:	021b      	lsls	r3, r3, #8
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d101      	bne.n	8001ff4 <ADC_Enable+0x44>
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e000      	b.n	8001ff6 <ADC_Enable+0x46>
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d152      	bne.n	80020a0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	4a2a      	ldr	r2, [pc, #168]	; (80020ac <ADC_Enable+0xfc>)
 8002002:	4013      	ands	r3, r2
 8002004:	d00d      	beq.n	8002022 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800200a:	2210      	movs	r2, #16
 800200c:	431a      	orrs	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002016:	2201      	movs	r2, #1
 8002018:	431a      	orrs	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e03f      	b.n	80020a2 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2101      	movs	r1, #1
 800202e:	430a      	orrs	r2, r1
 8002030:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002032:	4b1f      	ldr	r3, [pc, #124]	; (80020b0 <ADC_Enable+0x100>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	491f      	ldr	r1, [pc, #124]	; (80020b4 <ADC_Enable+0x104>)
 8002038:	0018      	movs	r0, r3
 800203a:	f7fe f865 	bl	8000108 <__udivsi3>
 800203e:	0003      	movs	r3, r0
 8002040:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002042:	e002      	b.n	800204a <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	3b01      	subs	r3, #1
 8002048:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1f9      	bne.n	8002044 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002050:	f7ff fc46 	bl	80018e0 <HAL_GetTick>
 8002054:	0003      	movs	r3, r0
 8002056:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002058:	e01b      	b.n	8002092 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800205a:	f7ff fc41 	bl	80018e0 <HAL_GetTick>
 800205e:	0002      	movs	r2, r0
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d914      	bls.n	8002092 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2201      	movs	r2, #1
 8002070:	4013      	ands	r3, r2
 8002072:	2b01      	cmp	r3, #1
 8002074:	d00d      	beq.n	8002092 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800207a:	2210      	movs	r2, #16
 800207c:	431a      	orrs	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002086:	2201      	movs	r2, #1
 8002088:	431a      	orrs	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e007      	b.n	80020a2 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2201      	movs	r2, #1
 800209a:	4013      	ands	r3, r2
 800209c:	2b01      	cmp	r3, #1
 800209e:	d1dc      	bne.n	800205a <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	0018      	movs	r0, r3
 80020a4:	46bd      	mov	sp, r7
 80020a6:	b004      	add	sp, #16
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	46c0      	nop			; (mov r8, r8)
 80020ac:	80000017 	.word	0x80000017
 80020b0:	200001b0 	.word	0x200001b0
 80020b4:	000f4240 	.word	0x000f4240

080020b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	0002      	movs	r2, r0
 80020c0:	1dfb      	adds	r3, r7, #7
 80020c2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80020c4:	1dfb      	adds	r3, r7, #7
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	2b7f      	cmp	r3, #127	; 0x7f
 80020ca:	d809      	bhi.n	80020e0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020cc:	1dfb      	adds	r3, r7, #7
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	001a      	movs	r2, r3
 80020d2:	231f      	movs	r3, #31
 80020d4:	401a      	ands	r2, r3
 80020d6:	4b04      	ldr	r3, [pc, #16]	; (80020e8 <__NVIC_EnableIRQ+0x30>)
 80020d8:	2101      	movs	r1, #1
 80020da:	4091      	lsls	r1, r2
 80020dc:	000a      	movs	r2, r1
 80020de:	601a      	str	r2, [r3, #0]
  }
}
 80020e0:	46c0      	nop			; (mov r8, r8)
 80020e2:	46bd      	mov	sp, r7
 80020e4:	b002      	add	sp, #8
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	e000e100 	.word	0xe000e100

080020ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020ec:	b590      	push	{r4, r7, lr}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	0002      	movs	r2, r0
 80020f4:	6039      	str	r1, [r7, #0]
 80020f6:	1dfb      	adds	r3, r7, #7
 80020f8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80020fa:	1dfb      	adds	r3, r7, #7
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	2b7f      	cmp	r3, #127	; 0x7f
 8002100:	d828      	bhi.n	8002154 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002102:	4a2f      	ldr	r2, [pc, #188]	; (80021c0 <__NVIC_SetPriority+0xd4>)
 8002104:	1dfb      	adds	r3, r7, #7
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	b25b      	sxtb	r3, r3
 800210a:	089b      	lsrs	r3, r3, #2
 800210c:	33c0      	adds	r3, #192	; 0xc0
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	589b      	ldr	r3, [r3, r2]
 8002112:	1dfa      	adds	r2, r7, #7
 8002114:	7812      	ldrb	r2, [r2, #0]
 8002116:	0011      	movs	r1, r2
 8002118:	2203      	movs	r2, #3
 800211a:	400a      	ands	r2, r1
 800211c:	00d2      	lsls	r2, r2, #3
 800211e:	21ff      	movs	r1, #255	; 0xff
 8002120:	4091      	lsls	r1, r2
 8002122:	000a      	movs	r2, r1
 8002124:	43d2      	mvns	r2, r2
 8002126:	401a      	ands	r2, r3
 8002128:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	019b      	lsls	r3, r3, #6
 800212e:	22ff      	movs	r2, #255	; 0xff
 8002130:	401a      	ands	r2, r3
 8002132:	1dfb      	adds	r3, r7, #7
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	0018      	movs	r0, r3
 8002138:	2303      	movs	r3, #3
 800213a:	4003      	ands	r3, r0
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002140:	481f      	ldr	r0, [pc, #124]	; (80021c0 <__NVIC_SetPriority+0xd4>)
 8002142:	1dfb      	adds	r3, r7, #7
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	b25b      	sxtb	r3, r3
 8002148:	089b      	lsrs	r3, r3, #2
 800214a:	430a      	orrs	r2, r1
 800214c:	33c0      	adds	r3, #192	; 0xc0
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002152:	e031      	b.n	80021b8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002154:	4a1b      	ldr	r2, [pc, #108]	; (80021c4 <__NVIC_SetPriority+0xd8>)
 8002156:	1dfb      	adds	r3, r7, #7
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	0019      	movs	r1, r3
 800215c:	230f      	movs	r3, #15
 800215e:	400b      	ands	r3, r1
 8002160:	3b08      	subs	r3, #8
 8002162:	089b      	lsrs	r3, r3, #2
 8002164:	3306      	adds	r3, #6
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	18d3      	adds	r3, r2, r3
 800216a:	3304      	adds	r3, #4
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	1dfa      	adds	r2, r7, #7
 8002170:	7812      	ldrb	r2, [r2, #0]
 8002172:	0011      	movs	r1, r2
 8002174:	2203      	movs	r2, #3
 8002176:	400a      	ands	r2, r1
 8002178:	00d2      	lsls	r2, r2, #3
 800217a:	21ff      	movs	r1, #255	; 0xff
 800217c:	4091      	lsls	r1, r2
 800217e:	000a      	movs	r2, r1
 8002180:	43d2      	mvns	r2, r2
 8002182:	401a      	ands	r2, r3
 8002184:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	019b      	lsls	r3, r3, #6
 800218a:	22ff      	movs	r2, #255	; 0xff
 800218c:	401a      	ands	r2, r3
 800218e:	1dfb      	adds	r3, r7, #7
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	0018      	movs	r0, r3
 8002194:	2303      	movs	r3, #3
 8002196:	4003      	ands	r3, r0
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800219c:	4809      	ldr	r0, [pc, #36]	; (80021c4 <__NVIC_SetPriority+0xd8>)
 800219e:	1dfb      	adds	r3, r7, #7
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	001c      	movs	r4, r3
 80021a4:	230f      	movs	r3, #15
 80021a6:	4023      	ands	r3, r4
 80021a8:	3b08      	subs	r3, #8
 80021aa:	089b      	lsrs	r3, r3, #2
 80021ac:	430a      	orrs	r2, r1
 80021ae:	3306      	adds	r3, #6
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	18c3      	adds	r3, r0, r3
 80021b4:	3304      	adds	r3, #4
 80021b6:	601a      	str	r2, [r3, #0]
}
 80021b8:	46c0      	nop			; (mov r8, r8)
 80021ba:	46bd      	mov	sp, r7
 80021bc:	b003      	add	sp, #12
 80021be:	bd90      	pop	{r4, r7, pc}
 80021c0:	e000e100 	.word	0xe000e100
 80021c4:	e000ed00 	.word	0xe000ed00

080021c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	1e5a      	subs	r2, r3, #1
 80021d4:	2380      	movs	r3, #128	; 0x80
 80021d6:	045b      	lsls	r3, r3, #17
 80021d8:	429a      	cmp	r2, r3
 80021da:	d301      	bcc.n	80021e0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021dc:	2301      	movs	r3, #1
 80021de:	e010      	b.n	8002202 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021e0:	4b0a      	ldr	r3, [pc, #40]	; (800220c <SysTick_Config+0x44>)
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	3a01      	subs	r2, #1
 80021e6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021e8:	2301      	movs	r3, #1
 80021ea:	425b      	negs	r3, r3
 80021ec:	2103      	movs	r1, #3
 80021ee:	0018      	movs	r0, r3
 80021f0:	f7ff ff7c 	bl	80020ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021f4:	4b05      	ldr	r3, [pc, #20]	; (800220c <SysTick_Config+0x44>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021fa:	4b04      	ldr	r3, [pc, #16]	; (800220c <SysTick_Config+0x44>)
 80021fc:	2207      	movs	r2, #7
 80021fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002200:	2300      	movs	r3, #0
}
 8002202:	0018      	movs	r0, r3
 8002204:	46bd      	mov	sp, r7
 8002206:	b002      	add	sp, #8
 8002208:	bd80      	pop	{r7, pc}
 800220a:	46c0      	nop			; (mov r8, r8)
 800220c:	e000e010 	.word	0xe000e010

08002210 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	60b9      	str	r1, [r7, #8]
 8002218:	607a      	str	r2, [r7, #4]
 800221a:	210f      	movs	r1, #15
 800221c:	187b      	adds	r3, r7, r1
 800221e:	1c02      	adds	r2, r0, #0
 8002220:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002222:	68ba      	ldr	r2, [r7, #8]
 8002224:	187b      	adds	r3, r7, r1
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	b25b      	sxtb	r3, r3
 800222a:	0011      	movs	r1, r2
 800222c:	0018      	movs	r0, r3
 800222e:	f7ff ff5d 	bl	80020ec <__NVIC_SetPriority>
}
 8002232:	46c0      	nop			; (mov r8, r8)
 8002234:	46bd      	mov	sp, r7
 8002236:	b004      	add	sp, #16
 8002238:	bd80      	pop	{r7, pc}

0800223a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	b082      	sub	sp, #8
 800223e:	af00      	add	r7, sp, #0
 8002240:	0002      	movs	r2, r0
 8002242:	1dfb      	adds	r3, r7, #7
 8002244:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002246:	1dfb      	adds	r3, r7, #7
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	b25b      	sxtb	r3, r3
 800224c:	0018      	movs	r0, r3
 800224e:	f7ff ff33 	bl	80020b8 <__NVIC_EnableIRQ>
}
 8002252:	46c0      	nop			; (mov r8, r8)
 8002254:	46bd      	mov	sp, r7
 8002256:	b002      	add	sp, #8
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b082      	sub	sp, #8
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	0018      	movs	r0, r3
 8002266:	f7ff ffaf 	bl	80021c8 <SysTick_Config>
 800226a:	0003      	movs	r3, r0
}
 800226c:	0018      	movs	r0, r3
 800226e:	46bd      	mov	sp, r7
 8002270:	b002      	add	sp, #8
 8002272:	bd80      	pop	{r7, pc}

08002274 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800227c:	2300      	movs	r3, #0
 800227e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e036      	b.n	80022f8 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2221      	movs	r2, #33	; 0x21
 800228e:	2102      	movs	r1, #2
 8002290:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	4a18      	ldr	r2, [pc, #96]	; (8002300 <HAL_DMA_Init+0x8c>)
 800229e:	4013      	ands	r3, r2
 80022a0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80022aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	695b      	ldr	r3, [r3, #20]
 80022bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	69db      	ldr	r3, [r3, #28]
 80022c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	0018      	movs	r0, r3
 80022dc:	f000 f9c4 	bl	8002668 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2221      	movs	r2, #33	; 0x21
 80022ea:	2101      	movs	r1, #1
 80022ec:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2220      	movs	r2, #32
 80022f2:	2100      	movs	r1, #0
 80022f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	0018      	movs	r0, r3
 80022fa:	46bd      	mov	sp, r7
 80022fc:	b004      	add	sp, #16
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	ffffc00f 	.word	0xffffc00f

08002304 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
 8002310:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002312:	2317      	movs	r3, #23
 8002314:	18fb      	adds	r3, r7, r3
 8002316:	2200      	movs	r2, #0
 8002318:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2220      	movs	r2, #32
 800231e:	5c9b      	ldrb	r3, [r3, r2]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d101      	bne.n	8002328 <HAL_DMA_Start_IT+0x24>
 8002324:	2302      	movs	r3, #2
 8002326:	e04f      	b.n	80023c8 <HAL_DMA_Start_IT+0xc4>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2220      	movs	r2, #32
 800232c:	2101      	movs	r1, #1
 800232e:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2221      	movs	r2, #33	; 0x21
 8002334:	5c9b      	ldrb	r3, [r3, r2]
 8002336:	b2db      	uxtb	r3, r3
 8002338:	2b01      	cmp	r3, #1
 800233a:	d13a      	bne.n	80023b2 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2221      	movs	r2, #33	; 0x21
 8002340:	2102      	movs	r1, #2
 8002342:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2200      	movs	r2, #0
 8002348:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2101      	movs	r1, #1
 8002356:	438a      	bics	r2, r1
 8002358:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	68b9      	ldr	r1, [r7, #8]
 8002360:	68f8      	ldr	r0, [r7, #12]
 8002362:	f000 f954 	bl	800260e <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236a:	2b00      	cmp	r3, #0
 800236c:	d008      	beq.n	8002380 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	210e      	movs	r1, #14
 800237a:	430a      	orrs	r2, r1
 800237c:	601a      	str	r2, [r3, #0]
 800237e:	e00f      	b.n	80023a0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	210a      	movs	r1, #10
 800238c:	430a      	orrs	r2, r1
 800238e:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2104      	movs	r1, #4
 800239c:	438a      	bics	r2, r1
 800239e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2101      	movs	r1, #1
 80023ac:	430a      	orrs	r2, r1
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	e007      	b.n	80023c2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2220      	movs	r2, #32
 80023b6:	2100      	movs	r1, #0
 80023b8:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80023ba:	2317      	movs	r3, #23
 80023bc:	18fb      	adds	r3, r7, r3
 80023be:	2202      	movs	r2, #2
 80023c0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80023c2:	2317      	movs	r3, #23
 80023c4:	18fb      	adds	r3, r7, r3
 80023c6:	781b      	ldrb	r3, [r3, #0]
}
 80023c8:	0018      	movs	r0, r3
 80023ca:	46bd      	mov	sp, r7
 80023cc:	b006      	add	sp, #24
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2221      	movs	r2, #33	; 0x21
 80023dc:	5c9b      	ldrb	r3, [r3, r2]
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d008      	beq.n	80023f6 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2204      	movs	r2, #4
 80023e8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2220      	movs	r2, #32
 80023ee:	2100      	movs	r1, #0
 80023f0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e020      	b.n	8002438 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	210e      	movs	r1, #14
 8002402:	438a      	bics	r2, r1
 8002404:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2101      	movs	r1, #1
 8002412:	438a      	bics	r2, r1
 8002414:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800241e:	2101      	movs	r1, #1
 8002420:	4091      	lsls	r1, r2
 8002422:	000a      	movs	r2, r1
 8002424:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2221      	movs	r2, #33	; 0x21
 800242a:	2101      	movs	r1, #1
 800242c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2220      	movs	r2, #32
 8002432:	2100      	movs	r1, #0
 8002434:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002436:	2300      	movs	r3, #0
}
 8002438:	0018      	movs	r0, r3
 800243a:	46bd      	mov	sp, r7
 800243c:	b002      	add	sp, #8
 800243e:	bd80      	pop	{r7, pc}

08002440 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002448:	210f      	movs	r1, #15
 800244a:	187b      	adds	r3, r7, r1
 800244c:	2200      	movs	r2, #0
 800244e:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2221      	movs	r2, #33	; 0x21
 8002454:	5c9b      	ldrb	r3, [r3, r2]
 8002456:	b2db      	uxtb	r3, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d006      	beq.n	800246a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2204      	movs	r2, #4
 8002460:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8002462:	187b      	adds	r3, r7, r1
 8002464:	2201      	movs	r2, #1
 8002466:	701a      	strb	r2, [r3, #0]
 8002468:	e028      	b.n	80024bc <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	210e      	movs	r1, #14
 8002476:	438a      	bics	r2, r1
 8002478:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2101      	movs	r1, #1
 8002486:	438a      	bics	r2, r1
 8002488:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002492:	2101      	movs	r1, #1
 8002494:	4091      	lsls	r1, r2
 8002496:	000a      	movs	r2, r1
 8002498:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2221      	movs	r2, #33	; 0x21
 800249e:	2101      	movs	r1, #1
 80024a0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2220      	movs	r2, #32
 80024a6:	2100      	movs	r1, #0
 80024a8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d004      	beq.n	80024bc <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	0010      	movs	r0, r2
 80024ba:	4798      	blx	r3
    }
  }
  return status;
 80024bc:	230f      	movs	r3, #15
 80024be:	18fb      	adds	r3, r7, r3
 80024c0:	781b      	ldrb	r3, [r3, #0]
}
 80024c2:	0018      	movs	r0, r3
 80024c4:	46bd      	mov	sp, r7
 80024c6:	b004      	add	sp, #16
 80024c8:	bd80      	pop	{r7, pc}

080024ca <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b084      	sub	sp, #16
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	2204      	movs	r2, #4
 80024e8:	409a      	lsls	r2, r3
 80024ea:	0013      	movs	r3, r2
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	4013      	ands	r3, r2
 80024f0:	d024      	beq.n	800253c <HAL_DMA_IRQHandler+0x72>
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	2204      	movs	r2, #4
 80024f6:	4013      	ands	r3, r2
 80024f8:	d020      	beq.n	800253c <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2220      	movs	r2, #32
 8002502:	4013      	ands	r3, r2
 8002504:	d107      	bne.n	8002516 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2104      	movs	r1, #4
 8002512:	438a      	bics	r2, r1
 8002514:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800251e:	2104      	movs	r1, #4
 8002520:	4091      	lsls	r1, r2
 8002522:	000a      	movs	r2, r1
 8002524:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252a:	2b00      	cmp	r3, #0
 800252c:	d100      	bne.n	8002530 <HAL_DMA_IRQHandler+0x66>
 800252e:	e06a      	b.n	8002606 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	0010      	movs	r0, r2
 8002538:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800253a:	e064      	b.n	8002606 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002540:	2202      	movs	r2, #2
 8002542:	409a      	lsls	r2, r3
 8002544:	0013      	movs	r3, r2
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	4013      	ands	r3, r2
 800254a:	d02b      	beq.n	80025a4 <HAL_DMA_IRQHandler+0xda>
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	2202      	movs	r2, #2
 8002550:	4013      	ands	r3, r2
 8002552:	d027      	beq.n	80025a4 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2220      	movs	r2, #32
 800255c:	4013      	ands	r3, r2
 800255e:	d10b      	bne.n	8002578 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	210a      	movs	r1, #10
 800256c:	438a      	bics	r2, r1
 800256e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2221      	movs	r2, #33	; 0x21
 8002574:	2101      	movs	r1, #1
 8002576:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002580:	2102      	movs	r1, #2
 8002582:	4091      	lsls	r1, r2
 8002584:	000a      	movs	r2, r1
 8002586:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2220      	movs	r2, #32
 800258c:	2100      	movs	r1, #0
 800258e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002594:	2b00      	cmp	r3, #0
 8002596:	d036      	beq.n	8002606 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	0010      	movs	r0, r2
 80025a0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80025a2:	e030      	b.n	8002606 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a8:	2208      	movs	r2, #8
 80025aa:	409a      	lsls	r2, r3
 80025ac:	0013      	movs	r3, r2
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	4013      	ands	r3, r2
 80025b2:	d028      	beq.n	8002606 <HAL_DMA_IRQHandler+0x13c>
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	2208      	movs	r2, #8
 80025b8:	4013      	ands	r3, r2
 80025ba:	d024      	beq.n	8002606 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	210e      	movs	r1, #14
 80025c8:	438a      	bics	r2, r1
 80025ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d4:	2101      	movs	r1, #1
 80025d6:	4091      	lsls	r1, r2
 80025d8:	000a      	movs	r2, r1
 80025da:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2221      	movs	r2, #33	; 0x21
 80025e6:	2101      	movs	r1, #1
 80025e8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2220      	movs	r2, #32
 80025ee:	2100      	movs	r1, #0
 80025f0:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d005      	beq.n	8002606 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	0010      	movs	r0, r2
 8002602:	4798      	blx	r3
    }
  }
}
 8002604:	e7ff      	b.n	8002606 <HAL_DMA_IRQHandler+0x13c>
 8002606:	46c0      	nop			; (mov r8, r8)
 8002608:	46bd      	mov	sp, r7
 800260a:	b004      	add	sp, #16
 800260c:	bd80      	pop	{r7, pc}

0800260e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b084      	sub	sp, #16
 8002612:	af00      	add	r7, sp, #0
 8002614:	60f8      	str	r0, [r7, #12]
 8002616:	60b9      	str	r1, [r7, #8]
 8002618:	607a      	str	r2, [r7, #4]
 800261a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002624:	2101      	movs	r1, #1
 8002626:	4091      	lsls	r1, r2
 8002628:	000a      	movs	r2, r1
 800262a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	2b10      	cmp	r3, #16
 800263a:	d108      	bne.n	800264e <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68ba      	ldr	r2, [r7, #8]
 800264a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800264c:	e007      	b.n	800265e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68ba      	ldr	r2, [r7, #8]
 8002654:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	60da      	str	r2, [r3, #12]
}
 800265e:	46c0      	nop			; (mov r8, r8)
 8002660:	46bd      	mov	sp, r7
 8002662:	b004      	add	sp, #16
 8002664:	bd80      	pop	{r7, pc}
	...

08002668 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a08      	ldr	r2, [pc, #32]	; (8002698 <DMA_CalcBaseAndBitshift+0x30>)
 8002676:	4694      	mov	ip, r2
 8002678:	4463      	add	r3, ip
 800267a:	2114      	movs	r1, #20
 800267c:	0018      	movs	r0, r3
 800267e:	f7fd fd43 	bl	8000108 <__udivsi3>
 8002682:	0003      	movs	r3, r0
 8002684:	009a      	lsls	r2, r3, #2
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a03      	ldr	r2, [pc, #12]	; (800269c <DMA_CalcBaseAndBitshift+0x34>)
 800268e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002690:	46c0      	nop			; (mov r8, r8)
 8002692:	46bd      	mov	sp, r7
 8002694:	b002      	add	sp, #8
 8002696:	bd80      	pop	{r7, pc}
 8002698:	bffdfff8 	.word	0xbffdfff8
 800269c:	40020000 	.word	0x40020000

080026a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026aa:	2300      	movs	r3, #0
 80026ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026ae:	e149      	b.n	8002944 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2101      	movs	r1, #1
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	4091      	lsls	r1, r2
 80026ba:	000a      	movs	r2, r1
 80026bc:	4013      	ands	r3, r2
 80026be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d100      	bne.n	80026c8 <HAL_GPIO_Init+0x28>
 80026c6:	e13a      	b.n	800293e <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	2203      	movs	r2, #3
 80026ce:	4013      	ands	r3, r2
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d005      	beq.n	80026e0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	2203      	movs	r2, #3
 80026da:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d130      	bne.n	8002742 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	2203      	movs	r2, #3
 80026ec:	409a      	lsls	r2, r3
 80026ee:	0013      	movs	r3, r2
 80026f0:	43da      	mvns	r2, r3
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	4013      	ands	r3, r2
 80026f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	68da      	ldr	r2, [r3, #12]
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	409a      	lsls	r2, r3
 8002702:	0013      	movs	r3, r2
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	4313      	orrs	r3, r2
 8002708:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002716:	2201      	movs	r2, #1
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	409a      	lsls	r2, r3
 800271c:	0013      	movs	r3, r2
 800271e:	43da      	mvns	r2, r3
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	4013      	ands	r3, r2
 8002724:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	091b      	lsrs	r3, r3, #4
 800272c:	2201      	movs	r2, #1
 800272e:	401a      	ands	r2, r3
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	409a      	lsls	r2, r3
 8002734:	0013      	movs	r3, r2
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	4313      	orrs	r3, r2
 800273a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2203      	movs	r2, #3
 8002748:	4013      	ands	r3, r2
 800274a:	2b03      	cmp	r3, #3
 800274c:	d017      	beq.n	800277e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	2203      	movs	r2, #3
 800275a:	409a      	lsls	r2, r3
 800275c:	0013      	movs	r3, r2
 800275e:	43da      	mvns	r2, r3
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	4013      	ands	r3, r2
 8002764:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	689a      	ldr	r2, [r3, #8]
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	409a      	lsls	r2, r3
 8002770:	0013      	movs	r3, r2
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	4313      	orrs	r3, r2
 8002776:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2203      	movs	r2, #3
 8002784:	4013      	ands	r3, r2
 8002786:	2b02      	cmp	r3, #2
 8002788:	d123      	bne.n	80027d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	08da      	lsrs	r2, r3, #3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	3208      	adds	r2, #8
 8002792:	0092      	lsls	r2, r2, #2
 8002794:	58d3      	ldr	r3, [r2, r3]
 8002796:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	2207      	movs	r2, #7
 800279c:	4013      	ands	r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	220f      	movs	r2, #15
 80027a2:	409a      	lsls	r2, r3
 80027a4:	0013      	movs	r3, r2
 80027a6:	43da      	mvns	r2, r3
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	4013      	ands	r3, r2
 80027ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	691a      	ldr	r2, [r3, #16]
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	2107      	movs	r1, #7
 80027b6:	400b      	ands	r3, r1
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	409a      	lsls	r2, r3
 80027bc:	0013      	movs	r3, r2
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	08da      	lsrs	r2, r3, #3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3208      	adds	r2, #8
 80027cc:	0092      	lsls	r2, r2, #2
 80027ce:	6939      	ldr	r1, [r7, #16]
 80027d0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	2203      	movs	r2, #3
 80027de:	409a      	lsls	r2, r3
 80027e0:	0013      	movs	r3, r2
 80027e2:	43da      	mvns	r2, r3
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	4013      	ands	r3, r2
 80027e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	2203      	movs	r2, #3
 80027f0:	401a      	ands	r2, r3
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	409a      	lsls	r2, r3
 80027f8:	0013      	movs	r3, r2
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	23c0      	movs	r3, #192	; 0xc0
 800280c:	029b      	lsls	r3, r3, #10
 800280e:	4013      	ands	r3, r2
 8002810:	d100      	bne.n	8002814 <HAL_GPIO_Init+0x174>
 8002812:	e094      	b.n	800293e <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002814:	4b51      	ldr	r3, [pc, #324]	; (800295c <HAL_GPIO_Init+0x2bc>)
 8002816:	699a      	ldr	r2, [r3, #24]
 8002818:	4b50      	ldr	r3, [pc, #320]	; (800295c <HAL_GPIO_Init+0x2bc>)
 800281a:	2101      	movs	r1, #1
 800281c:	430a      	orrs	r2, r1
 800281e:	619a      	str	r2, [r3, #24]
 8002820:	4b4e      	ldr	r3, [pc, #312]	; (800295c <HAL_GPIO_Init+0x2bc>)
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	2201      	movs	r2, #1
 8002826:	4013      	ands	r3, r2
 8002828:	60bb      	str	r3, [r7, #8]
 800282a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800282c:	4a4c      	ldr	r2, [pc, #304]	; (8002960 <HAL_GPIO_Init+0x2c0>)
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	089b      	lsrs	r3, r3, #2
 8002832:	3302      	adds	r3, #2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	589b      	ldr	r3, [r3, r2]
 8002838:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	2203      	movs	r2, #3
 800283e:	4013      	ands	r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	220f      	movs	r2, #15
 8002844:	409a      	lsls	r2, r3
 8002846:	0013      	movs	r3, r2
 8002848:	43da      	mvns	r2, r3
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	4013      	ands	r3, r2
 800284e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	2390      	movs	r3, #144	; 0x90
 8002854:	05db      	lsls	r3, r3, #23
 8002856:	429a      	cmp	r2, r3
 8002858:	d00d      	beq.n	8002876 <HAL_GPIO_Init+0x1d6>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a41      	ldr	r2, [pc, #260]	; (8002964 <HAL_GPIO_Init+0x2c4>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d007      	beq.n	8002872 <HAL_GPIO_Init+0x1d2>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a40      	ldr	r2, [pc, #256]	; (8002968 <HAL_GPIO_Init+0x2c8>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d101      	bne.n	800286e <HAL_GPIO_Init+0x1ce>
 800286a:	2302      	movs	r3, #2
 800286c:	e004      	b.n	8002878 <HAL_GPIO_Init+0x1d8>
 800286e:	2305      	movs	r3, #5
 8002870:	e002      	b.n	8002878 <HAL_GPIO_Init+0x1d8>
 8002872:	2301      	movs	r3, #1
 8002874:	e000      	b.n	8002878 <HAL_GPIO_Init+0x1d8>
 8002876:	2300      	movs	r3, #0
 8002878:	697a      	ldr	r2, [r7, #20]
 800287a:	2103      	movs	r1, #3
 800287c:	400a      	ands	r2, r1
 800287e:	0092      	lsls	r2, r2, #2
 8002880:	4093      	lsls	r3, r2
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	4313      	orrs	r3, r2
 8002886:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002888:	4935      	ldr	r1, [pc, #212]	; (8002960 <HAL_GPIO_Init+0x2c0>)
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	089b      	lsrs	r3, r3, #2
 800288e:	3302      	adds	r3, #2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002896:	4b35      	ldr	r3, [pc, #212]	; (800296c <HAL_GPIO_Init+0x2cc>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	43da      	mvns	r2, r3
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	4013      	ands	r3, r2
 80028a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685a      	ldr	r2, [r3, #4]
 80028aa:	2380      	movs	r3, #128	; 0x80
 80028ac:	035b      	lsls	r3, r3, #13
 80028ae:	4013      	ands	r3, r2
 80028b0:	d003      	beq.n	80028ba <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80028ba:	4b2c      	ldr	r3, [pc, #176]	; (800296c <HAL_GPIO_Init+0x2cc>)
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80028c0:	4b2a      	ldr	r3, [pc, #168]	; (800296c <HAL_GPIO_Init+0x2cc>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	43da      	mvns	r2, r3
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	4013      	ands	r3, r2
 80028ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685a      	ldr	r2, [r3, #4]
 80028d4:	2380      	movs	r3, #128	; 0x80
 80028d6:	039b      	lsls	r3, r3, #14
 80028d8:	4013      	ands	r3, r2
 80028da:	d003      	beq.n	80028e4 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80028e4:	4b21      	ldr	r3, [pc, #132]	; (800296c <HAL_GPIO_Init+0x2cc>)
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80028ea:	4b20      	ldr	r3, [pc, #128]	; (800296c <HAL_GPIO_Init+0x2cc>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	43da      	mvns	r2, r3
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	4013      	ands	r3, r2
 80028f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685a      	ldr	r2, [r3, #4]
 80028fe:	2380      	movs	r3, #128	; 0x80
 8002900:	029b      	lsls	r3, r3, #10
 8002902:	4013      	ands	r3, r2
 8002904:	d003      	beq.n	800290e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	4313      	orrs	r3, r2
 800290c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800290e:	4b17      	ldr	r3, [pc, #92]	; (800296c <HAL_GPIO_Init+0x2cc>)
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002914:	4b15      	ldr	r3, [pc, #84]	; (800296c <HAL_GPIO_Init+0x2cc>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	43da      	mvns	r2, r3
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	4013      	ands	r3, r2
 8002922:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685a      	ldr	r2, [r3, #4]
 8002928:	2380      	movs	r3, #128	; 0x80
 800292a:	025b      	lsls	r3, r3, #9
 800292c:	4013      	ands	r3, r2
 800292e:	d003      	beq.n	8002938 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	4313      	orrs	r3, r2
 8002936:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002938:	4b0c      	ldr	r3, [pc, #48]	; (800296c <HAL_GPIO_Init+0x2cc>)
 800293a:	693a      	ldr	r2, [r7, #16]
 800293c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	3301      	adds	r3, #1
 8002942:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	40da      	lsrs	r2, r3
 800294c:	1e13      	subs	r3, r2, #0
 800294e:	d000      	beq.n	8002952 <HAL_GPIO_Init+0x2b2>
 8002950:	e6ae      	b.n	80026b0 <HAL_GPIO_Init+0x10>
  } 
}
 8002952:	46c0      	nop			; (mov r8, r8)
 8002954:	46c0      	nop			; (mov r8, r8)
 8002956:	46bd      	mov	sp, r7
 8002958:	b006      	add	sp, #24
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40021000 	.word	0x40021000
 8002960:	40010000 	.word	0x40010000
 8002964:	48000400 	.word	0x48000400
 8002968:	48000800 	.word	0x48000800
 800296c:	40010400 	.word	0x40010400

08002970 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b088      	sub	sp, #32
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d102      	bne.n	8002984 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	f000 fb76 	bl	8003070 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2201      	movs	r2, #1
 800298a:	4013      	ands	r3, r2
 800298c:	d100      	bne.n	8002990 <HAL_RCC_OscConfig+0x20>
 800298e:	e08e      	b.n	8002aae <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002990:	4bc5      	ldr	r3, [pc, #788]	; (8002ca8 <HAL_RCC_OscConfig+0x338>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	220c      	movs	r2, #12
 8002996:	4013      	ands	r3, r2
 8002998:	2b04      	cmp	r3, #4
 800299a:	d00e      	beq.n	80029ba <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800299c:	4bc2      	ldr	r3, [pc, #776]	; (8002ca8 <HAL_RCC_OscConfig+0x338>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	220c      	movs	r2, #12
 80029a2:	4013      	ands	r3, r2
 80029a4:	2b08      	cmp	r3, #8
 80029a6:	d117      	bne.n	80029d8 <HAL_RCC_OscConfig+0x68>
 80029a8:	4bbf      	ldr	r3, [pc, #764]	; (8002ca8 <HAL_RCC_OscConfig+0x338>)
 80029aa:	685a      	ldr	r2, [r3, #4]
 80029ac:	23c0      	movs	r3, #192	; 0xc0
 80029ae:	025b      	lsls	r3, r3, #9
 80029b0:	401a      	ands	r2, r3
 80029b2:	2380      	movs	r3, #128	; 0x80
 80029b4:	025b      	lsls	r3, r3, #9
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d10e      	bne.n	80029d8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029ba:	4bbb      	ldr	r3, [pc, #748]	; (8002ca8 <HAL_RCC_OscConfig+0x338>)
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	2380      	movs	r3, #128	; 0x80
 80029c0:	029b      	lsls	r3, r3, #10
 80029c2:	4013      	ands	r3, r2
 80029c4:	d100      	bne.n	80029c8 <HAL_RCC_OscConfig+0x58>
 80029c6:	e071      	b.n	8002aac <HAL_RCC_OscConfig+0x13c>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d000      	beq.n	80029d2 <HAL_RCC_OscConfig+0x62>
 80029d0:	e06c      	b.n	8002aac <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	f000 fb4c 	bl	8003070 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d107      	bne.n	80029f0 <HAL_RCC_OscConfig+0x80>
 80029e0:	4bb1      	ldr	r3, [pc, #708]	; (8002ca8 <HAL_RCC_OscConfig+0x338>)
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	4bb0      	ldr	r3, [pc, #704]	; (8002ca8 <HAL_RCC_OscConfig+0x338>)
 80029e6:	2180      	movs	r1, #128	; 0x80
 80029e8:	0249      	lsls	r1, r1, #9
 80029ea:	430a      	orrs	r2, r1
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	e02f      	b.n	8002a50 <HAL_RCC_OscConfig+0xe0>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d10c      	bne.n	8002a12 <HAL_RCC_OscConfig+0xa2>
 80029f8:	4bab      	ldr	r3, [pc, #684]	; (8002ca8 <HAL_RCC_OscConfig+0x338>)
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	4baa      	ldr	r3, [pc, #680]	; (8002ca8 <HAL_RCC_OscConfig+0x338>)
 80029fe:	49ab      	ldr	r1, [pc, #684]	; (8002cac <HAL_RCC_OscConfig+0x33c>)
 8002a00:	400a      	ands	r2, r1
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	4ba8      	ldr	r3, [pc, #672]	; (8002ca8 <HAL_RCC_OscConfig+0x338>)
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	4ba7      	ldr	r3, [pc, #668]	; (8002ca8 <HAL_RCC_OscConfig+0x338>)
 8002a0a:	49a9      	ldr	r1, [pc, #676]	; (8002cb0 <HAL_RCC_OscConfig+0x340>)
 8002a0c:	400a      	ands	r2, r1
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	e01e      	b.n	8002a50 <HAL_RCC_OscConfig+0xe0>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	2b05      	cmp	r3, #5
 8002a18:	d10e      	bne.n	8002a38 <HAL_RCC_OscConfig+0xc8>
 8002a1a:	4ba3      	ldr	r3, [pc, #652]	; (8002ca8 <HAL_RCC_OscConfig+0x338>)
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	4ba2      	ldr	r3, [pc, #648]	; (8002ca8 <HAL_RCC_OscConfig+0x338>)
 8002a20:	2180      	movs	r1, #128	; 0x80
 8002a22:	02c9      	lsls	r1, r1, #11
 8002a24:	430a      	orrs	r2, r1
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	4b9f      	ldr	r3, [pc, #636]	; (8002ca8 <HAL_RCC_OscConfig+0x338>)
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	4b9e      	ldr	r3, [pc, #632]	; (8002ca8 <HAL_RCC_OscConfig+0x338>)
 8002a2e:	2180      	movs	r1, #128	; 0x80
 8002a30:	0249      	lsls	r1, r1, #9
 8002a32:	430a      	orrs	r2, r1
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	e00b      	b.n	8002a50 <HAL_RCC_OscConfig+0xe0>
 8002a38:	4b9b      	ldr	r3, [pc, #620]	; (8002ca8 <HAL_RCC_OscConfig+0x338>)
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	4b9a      	ldr	r3, [pc, #616]	; (8002ca8 <HAL_RCC_OscConfig+0x338>)
 8002a3e:	499b      	ldr	r1, [pc, #620]	; (8002cac <HAL_RCC_OscConfig+0x33c>)
 8002a40:	400a      	ands	r2, r1
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	4b98      	ldr	r3, [pc, #608]	; (8002ca8 <HAL_RCC_OscConfig+0x338>)
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	4b97      	ldr	r3, [pc, #604]	; (8002ca8 <HAL_RCC_OscConfig+0x338>)
 8002a4a:	4999      	ldr	r1, [pc, #612]	; (8002cb0 <HAL_RCC_OscConfig+0x340>)
 8002a4c:	400a      	ands	r2, r1
 8002a4e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d014      	beq.n	8002a82 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a58:	f7fe ff42 	bl	80018e0 <HAL_GetTick>
 8002a5c:	0003      	movs	r3, r0
 8002a5e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a62:	f7fe ff3d 	bl	80018e0 <HAL_GetTick>
 8002a66:	0002      	movs	r2, r0
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b64      	cmp	r3, #100	; 0x64
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e2fd      	b.n	8003070 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a74:	4b8c      	ldr	r3, [pc, #560]	; (8002ca8 <HAL_RCC_OscConfig+0x338>)
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	2380      	movs	r3, #128	; 0x80
 8002a7a:	029b      	lsls	r3, r3, #10
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	d0f0      	beq.n	8002a62 <HAL_RCC_OscConfig+0xf2>
 8002a80:	e015      	b.n	8002aae <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a82:	f7fe ff2d 	bl	80018e0 <HAL_GetTick>
 8002a86:	0003      	movs	r3, r0
 8002a88:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a8c:	f7fe ff28 	bl	80018e0 <HAL_GetTick>
 8002a90:	0002      	movs	r2, r0
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b64      	cmp	r3, #100	; 0x64
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e2e8      	b.n	8003070 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a9e:	4b82      	ldr	r3, [pc, #520]	; (8002ca8 <HAL_RCC_OscConfig+0x338>)
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	2380      	movs	r3, #128	; 0x80
 8002aa4:	029b      	lsls	r3, r3, #10
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	d1f0      	bne.n	8002a8c <HAL_RCC_OscConfig+0x11c>
 8002aaa:	e000      	b.n	8002aae <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aac:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	d100      	bne.n	8002aba <HAL_RCC_OscConfig+0x14a>
 8002ab8:	e06c      	b.n	8002b94 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002aba:	4b7b      	ldr	r3, [pc, #492]	; (8002ca8 <HAL_RCC_OscConfig+0x338>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	220c      	movs	r2, #12
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	d00e      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002ac4:	4b78      	ldr	r3, [pc, #480]	; (8002ca8 <HAL_RCC_OscConfig+0x338>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	220c      	movs	r2, #12
 8002aca:	4013      	ands	r3, r2
 8002acc:	2b08      	cmp	r3, #8
 8002ace:	d11f      	bne.n	8002b10 <HAL_RCC_OscConfig+0x1a0>
 8002ad0:	4b75      	ldr	r3, [pc, #468]	; (8002ca8 <HAL_RCC_OscConfig+0x338>)
 8002ad2:	685a      	ldr	r2, [r3, #4]
 8002ad4:	23c0      	movs	r3, #192	; 0xc0
 8002ad6:	025b      	lsls	r3, r3, #9
 8002ad8:	401a      	ands	r2, r3
 8002ada:	2380      	movs	r3, #128	; 0x80
 8002adc:	021b      	lsls	r3, r3, #8
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d116      	bne.n	8002b10 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ae2:	4b71      	ldr	r3, [pc, #452]	; (8002ca8 <HAL_RCC_OscConfig+0x338>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2202      	movs	r2, #2
 8002ae8:	4013      	ands	r3, r2
 8002aea:	d005      	beq.n	8002af8 <HAL_RCC_OscConfig+0x188>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d001      	beq.n	8002af8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e2bb      	b.n	8003070 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af8:	4b6b      	ldr	r3, [pc, #428]	; (8002ca8 <HAL_RCC_OscConfig+0x338>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	22f8      	movs	r2, #248	; 0xf8
 8002afe:	4393      	bics	r3, r2
 8002b00:	0019      	movs	r1, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	00da      	lsls	r2, r3, #3
 8002b08:	4b67      	ldr	r3, [pc, #412]	; (8002ca8 <HAL_RCC_OscConfig+0x338>)
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b0e:	e041      	b.n	8002b94 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d024      	beq.n	8002b62 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b18:	4b63      	ldr	r3, [pc, #396]	; (8002ca8 <HAL_RCC_OscConfig+0x338>)
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	4b62      	ldr	r3, [pc, #392]	; (8002ca8 <HAL_RCC_OscConfig+0x338>)
 8002b1e:	2101      	movs	r1, #1
 8002b20:	430a      	orrs	r2, r1
 8002b22:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b24:	f7fe fedc 	bl	80018e0 <HAL_GetTick>
 8002b28:	0003      	movs	r3, r0
 8002b2a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b2c:	e008      	b.n	8002b40 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b2e:	f7fe fed7 	bl	80018e0 <HAL_GetTick>
 8002b32:	0002      	movs	r2, r0
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e297      	b.n	8003070 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b40:	4b59      	ldr	r3, [pc, #356]	; (8002ca8 <HAL_RCC_OscConfig+0x338>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2202      	movs	r2, #2
 8002b46:	4013      	ands	r3, r2
 8002b48:	d0f1      	beq.n	8002b2e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b4a:	4b57      	ldr	r3, [pc, #348]	; (8002ca8 <HAL_RCC_OscConfig+0x338>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	22f8      	movs	r2, #248	; 0xf8
 8002b50:	4393      	bics	r3, r2
 8002b52:	0019      	movs	r1, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	00da      	lsls	r2, r3, #3
 8002b5a:	4b53      	ldr	r3, [pc, #332]	; (8002ca8 <HAL_RCC_OscConfig+0x338>)
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	601a      	str	r2, [r3, #0]
 8002b60:	e018      	b.n	8002b94 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b62:	4b51      	ldr	r3, [pc, #324]	; (8002ca8 <HAL_RCC_OscConfig+0x338>)
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	4b50      	ldr	r3, [pc, #320]	; (8002ca8 <HAL_RCC_OscConfig+0x338>)
 8002b68:	2101      	movs	r1, #1
 8002b6a:	438a      	bics	r2, r1
 8002b6c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6e:	f7fe feb7 	bl	80018e0 <HAL_GetTick>
 8002b72:	0003      	movs	r3, r0
 8002b74:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b78:	f7fe feb2 	bl	80018e0 <HAL_GetTick>
 8002b7c:	0002      	movs	r2, r0
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e272      	b.n	8003070 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b8a:	4b47      	ldr	r3, [pc, #284]	; (8002ca8 <HAL_RCC_OscConfig+0x338>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2202      	movs	r2, #2
 8002b90:	4013      	ands	r3, r2
 8002b92:	d1f1      	bne.n	8002b78 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2208      	movs	r2, #8
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	d036      	beq.n	8002c0c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	69db      	ldr	r3, [r3, #28]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d019      	beq.n	8002bda <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ba6:	4b40      	ldr	r3, [pc, #256]	; (8002ca8 <HAL_RCC_OscConfig+0x338>)
 8002ba8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002baa:	4b3f      	ldr	r3, [pc, #252]	; (8002ca8 <HAL_RCC_OscConfig+0x338>)
 8002bac:	2101      	movs	r1, #1
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bb2:	f7fe fe95 	bl	80018e0 <HAL_GetTick>
 8002bb6:	0003      	movs	r3, r0
 8002bb8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bbc:	f7fe fe90 	bl	80018e0 <HAL_GetTick>
 8002bc0:	0002      	movs	r2, r0
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e250      	b.n	8003070 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bce:	4b36      	ldr	r3, [pc, #216]	; (8002ca8 <HAL_RCC_OscConfig+0x338>)
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	d0f1      	beq.n	8002bbc <HAL_RCC_OscConfig+0x24c>
 8002bd8:	e018      	b.n	8002c0c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bda:	4b33      	ldr	r3, [pc, #204]	; (8002ca8 <HAL_RCC_OscConfig+0x338>)
 8002bdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bde:	4b32      	ldr	r3, [pc, #200]	; (8002ca8 <HAL_RCC_OscConfig+0x338>)
 8002be0:	2101      	movs	r1, #1
 8002be2:	438a      	bics	r2, r1
 8002be4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002be6:	f7fe fe7b 	bl	80018e0 <HAL_GetTick>
 8002bea:	0003      	movs	r3, r0
 8002bec:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bf0:	f7fe fe76 	bl	80018e0 <HAL_GetTick>
 8002bf4:	0002      	movs	r2, r0
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e236      	b.n	8003070 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c02:	4b29      	ldr	r3, [pc, #164]	; (8002ca8 <HAL_RCC_OscConfig+0x338>)
 8002c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c06:	2202      	movs	r2, #2
 8002c08:	4013      	ands	r3, r2
 8002c0a:	d1f1      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2204      	movs	r2, #4
 8002c12:	4013      	ands	r3, r2
 8002c14:	d100      	bne.n	8002c18 <HAL_RCC_OscConfig+0x2a8>
 8002c16:	e0b5      	b.n	8002d84 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c18:	201f      	movs	r0, #31
 8002c1a:	183b      	adds	r3, r7, r0
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c20:	4b21      	ldr	r3, [pc, #132]	; (8002ca8 <HAL_RCC_OscConfig+0x338>)
 8002c22:	69da      	ldr	r2, [r3, #28]
 8002c24:	2380      	movs	r3, #128	; 0x80
 8002c26:	055b      	lsls	r3, r3, #21
 8002c28:	4013      	ands	r3, r2
 8002c2a:	d110      	bne.n	8002c4e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c2c:	4b1e      	ldr	r3, [pc, #120]	; (8002ca8 <HAL_RCC_OscConfig+0x338>)
 8002c2e:	69da      	ldr	r2, [r3, #28]
 8002c30:	4b1d      	ldr	r3, [pc, #116]	; (8002ca8 <HAL_RCC_OscConfig+0x338>)
 8002c32:	2180      	movs	r1, #128	; 0x80
 8002c34:	0549      	lsls	r1, r1, #21
 8002c36:	430a      	orrs	r2, r1
 8002c38:	61da      	str	r2, [r3, #28]
 8002c3a:	4b1b      	ldr	r3, [pc, #108]	; (8002ca8 <HAL_RCC_OscConfig+0x338>)
 8002c3c:	69da      	ldr	r2, [r3, #28]
 8002c3e:	2380      	movs	r3, #128	; 0x80
 8002c40:	055b      	lsls	r3, r3, #21
 8002c42:	4013      	ands	r3, r2
 8002c44:	60fb      	str	r3, [r7, #12]
 8002c46:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002c48:	183b      	adds	r3, r7, r0
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c4e:	4b19      	ldr	r3, [pc, #100]	; (8002cb4 <HAL_RCC_OscConfig+0x344>)
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	2380      	movs	r3, #128	; 0x80
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	4013      	ands	r3, r2
 8002c58:	d11a      	bne.n	8002c90 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c5a:	4b16      	ldr	r3, [pc, #88]	; (8002cb4 <HAL_RCC_OscConfig+0x344>)
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	4b15      	ldr	r3, [pc, #84]	; (8002cb4 <HAL_RCC_OscConfig+0x344>)
 8002c60:	2180      	movs	r1, #128	; 0x80
 8002c62:	0049      	lsls	r1, r1, #1
 8002c64:	430a      	orrs	r2, r1
 8002c66:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c68:	f7fe fe3a 	bl	80018e0 <HAL_GetTick>
 8002c6c:	0003      	movs	r3, r0
 8002c6e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c70:	e008      	b.n	8002c84 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c72:	f7fe fe35 	bl	80018e0 <HAL_GetTick>
 8002c76:	0002      	movs	r2, r0
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b64      	cmp	r3, #100	; 0x64
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e1f5      	b.n	8003070 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c84:	4b0b      	ldr	r3, [pc, #44]	; (8002cb4 <HAL_RCC_OscConfig+0x344>)
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	2380      	movs	r3, #128	; 0x80
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	d0f0      	beq.n	8002c72 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d10f      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x348>
 8002c98:	4b03      	ldr	r3, [pc, #12]	; (8002ca8 <HAL_RCC_OscConfig+0x338>)
 8002c9a:	6a1a      	ldr	r2, [r3, #32]
 8002c9c:	4b02      	ldr	r3, [pc, #8]	; (8002ca8 <HAL_RCC_OscConfig+0x338>)
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	621a      	str	r2, [r3, #32]
 8002ca4:	e036      	b.n	8002d14 <HAL_RCC_OscConfig+0x3a4>
 8002ca6:	46c0      	nop			; (mov r8, r8)
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	fffeffff 	.word	0xfffeffff
 8002cb0:	fffbffff 	.word	0xfffbffff
 8002cb4:	40007000 	.word	0x40007000
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d10c      	bne.n	8002cda <HAL_RCC_OscConfig+0x36a>
 8002cc0:	4bca      	ldr	r3, [pc, #808]	; (8002fec <HAL_RCC_OscConfig+0x67c>)
 8002cc2:	6a1a      	ldr	r2, [r3, #32]
 8002cc4:	4bc9      	ldr	r3, [pc, #804]	; (8002fec <HAL_RCC_OscConfig+0x67c>)
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	438a      	bics	r2, r1
 8002cca:	621a      	str	r2, [r3, #32]
 8002ccc:	4bc7      	ldr	r3, [pc, #796]	; (8002fec <HAL_RCC_OscConfig+0x67c>)
 8002cce:	6a1a      	ldr	r2, [r3, #32]
 8002cd0:	4bc6      	ldr	r3, [pc, #792]	; (8002fec <HAL_RCC_OscConfig+0x67c>)
 8002cd2:	2104      	movs	r1, #4
 8002cd4:	438a      	bics	r2, r1
 8002cd6:	621a      	str	r2, [r3, #32]
 8002cd8:	e01c      	b.n	8002d14 <HAL_RCC_OscConfig+0x3a4>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	2b05      	cmp	r3, #5
 8002ce0:	d10c      	bne.n	8002cfc <HAL_RCC_OscConfig+0x38c>
 8002ce2:	4bc2      	ldr	r3, [pc, #776]	; (8002fec <HAL_RCC_OscConfig+0x67c>)
 8002ce4:	6a1a      	ldr	r2, [r3, #32]
 8002ce6:	4bc1      	ldr	r3, [pc, #772]	; (8002fec <HAL_RCC_OscConfig+0x67c>)
 8002ce8:	2104      	movs	r1, #4
 8002cea:	430a      	orrs	r2, r1
 8002cec:	621a      	str	r2, [r3, #32]
 8002cee:	4bbf      	ldr	r3, [pc, #764]	; (8002fec <HAL_RCC_OscConfig+0x67c>)
 8002cf0:	6a1a      	ldr	r2, [r3, #32]
 8002cf2:	4bbe      	ldr	r3, [pc, #760]	; (8002fec <HAL_RCC_OscConfig+0x67c>)
 8002cf4:	2101      	movs	r1, #1
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	621a      	str	r2, [r3, #32]
 8002cfa:	e00b      	b.n	8002d14 <HAL_RCC_OscConfig+0x3a4>
 8002cfc:	4bbb      	ldr	r3, [pc, #748]	; (8002fec <HAL_RCC_OscConfig+0x67c>)
 8002cfe:	6a1a      	ldr	r2, [r3, #32]
 8002d00:	4bba      	ldr	r3, [pc, #744]	; (8002fec <HAL_RCC_OscConfig+0x67c>)
 8002d02:	2101      	movs	r1, #1
 8002d04:	438a      	bics	r2, r1
 8002d06:	621a      	str	r2, [r3, #32]
 8002d08:	4bb8      	ldr	r3, [pc, #736]	; (8002fec <HAL_RCC_OscConfig+0x67c>)
 8002d0a:	6a1a      	ldr	r2, [r3, #32]
 8002d0c:	4bb7      	ldr	r3, [pc, #732]	; (8002fec <HAL_RCC_OscConfig+0x67c>)
 8002d0e:	2104      	movs	r1, #4
 8002d10:	438a      	bics	r2, r1
 8002d12:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d014      	beq.n	8002d46 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d1c:	f7fe fde0 	bl	80018e0 <HAL_GetTick>
 8002d20:	0003      	movs	r3, r0
 8002d22:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d24:	e009      	b.n	8002d3a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d26:	f7fe fddb 	bl	80018e0 <HAL_GetTick>
 8002d2a:	0002      	movs	r2, r0
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	4aaf      	ldr	r2, [pc, #700]	; (8002ff0 <HAL_RCC_OscConfig+0x680>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e19a      	b.n	8003070 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d3a:	4bac      	ldr	r3, [pc, #688]	; (8002fec <HAL_RCC_OscConfig+0x67c>)
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	2202      	movs	r2, #2
 8002d40:	4013      	ands	r3, r2
 8002d42:	d0f0      	beq.n	8002d26 <HAL_RCC_OscConfig+0x3b6>
 8002d44:	e013      	b.n	8002d6e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d46:	f7fe fdcb 	bl	80018e0 <HAL_GetTick>
 8002d4a:	0003      	movs	r3, r0
 8002d4c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d4e:	e009      	b.n	8002d64 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d50:	f7fe fdc6 	bl	80018e0 <HAL_GetTick>
 8002d54:	0002      	movs	r2, r0
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	4aa5      	ldr	r2, [pc, #660]	; (8002ff0 <HAL_RCC_OscConfig+0x680>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e185      	b.n	8003070 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d64:	4ba1      	ldr	r3, [pc, #644]	; (8002fec <HAL_RCC_OscConfig+0x67c>)
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	2202      	movs	r2, #2
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	d1f0      	bne.n	8002d50 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d6e:	231f      	movs	r3, #31
 8002d70:	18fb      	adds	r3, r7, r3
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d105      	bne.n	8002d84 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d78:	4b9c      	ldr	r3, [pc, #624]	; (8002fec <HAL_RCC_OscConfig+0x67c>)
 8002d7a:	69da      	ldr	r2, [r3, #28]
 8002d7c:	4b9b      	ldr	r3, [pc, #620]	; (8002fec <HAL_RCC_OscConfig+0x67c>)
 8002d7e:	499d      	ldr	r1, [pc, #628]	; (8002ff4 <HAL_RCC_OscConfig+0x684>)
 8002d80:	400a      	ands	r2, r1
 8002d82:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2210      	movs	r2, #16
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	d063      	beq.n	8002e56 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d12a      	bne.n	8002dec <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002d96:	4b95      	ldr	r3, [pc, #596]	; (8002fec <HAL_RCC_OscConfig+0x67c>)
 8002d98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d9a:	4b94      	ldr	r3, [pc, #592]	; (8002fec <HAL_RCC_OscConfig+0x67c>)
 8002d9c:	2104      	movs	r1, #4
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002da2:	4b92      	ldr	r3, [pc, #584]	; (8002fec <HAL_RCC_OscConfig+0x67c>)
 8002da4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002da6:	4b91      	ldr	r3, [pc, #580]	; (8002fec <HAL_RCC_OscConfig+0x67c>)
 8002da8:	2101      	movs	r1, #1
 8002daa:	430a      	orrs	r2, r1
 8002dac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dae:	f7fe fd97 	bl	80018e0 <HAL_GetTick>
 8002db2:	0003      	movs	r3, r0
 8002db4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002db6:	e008      	b.n	8002dca <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002db8:	f7fe fd92 	bl	80018e0 <HAL_GetTick>
 8002dbc:	0002      	movs	r2, r0
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e152      	b.n	8003070 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002dca:	4b88      	ldr	r3, [pc, #544]	; (8002fec <HAL_RCC_OscConfig+0x67c>)
 8002dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dce:	2202      	movs	r2, #2
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	d0f1      	beq.n	8002db8 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002dd4:	4b85      	ldr	r3, [pc, #532]	; (8002fec <HAL_RCC_OscConfig+0x67c>)
 8002dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd8:	22f8      	movs	r2, #248	; 0xf8
 8002dda:	4393      	bics	r3, r2
 8002ddc:	0019      	movs	r1, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	00da      	lsls	r2, r3, #3
 8002de4:	4b81      	ldr	r3, [pc, #516]	; (8002fec <HAL_RCC_OscConfig+0x67c>)
 8002de6:	430a      	orrs	r2, r1
 8002de8:	635a      	str	r2, [r3, #52]	; 0x34
 8002dea:	e034      	b.n	8002e56 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	695b      	ldr	r3, [r3, #20]
 8002df0:	3305      	adds	r3, #5
 8002df2:	d111      	bne.n	8002e18 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002df4:	4b7d      	ldr	r3, [pc, #500]	; (8002fec <HAL_RCC_OscConfig+0x67c>)
 8002df6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002df8:	4b7c      	ldr	r3, [pc, #496]	; (8002fec <HAL_RCC_OscConfig+0x67c>)
 8002dfa:	2104      	movs	r1, #4
 8002dfc:	438a      	bics	r2, r1
 8002dfe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002e00:	4b7a      	ldr	r3, [pc, #488]	; (8002fec <HAL_RCC_OscConfig+0x67c>)
 8002e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e04:	22f8      	movs	r2, #248	; 0xf8
 8002e06:	4393      	bics	r3, r2
 8002e08:	0019      	movs	r1, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	00da      	lsls	r2, r3, #3
 8002e10:	4b76      	ldr	r3, [pc, #472]	; (8002fec <HAL_RCC_OscConfig+0x67c>)
 8002e12:	430a      	orrs	r2, r1
 8002e14:	635a      	str	r2, [r3, #52]	; 0x34
 8002e16:	e01e      	b.n	8002e56 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002e18:	4b74      	ldr	r3, [pc, #464]	; (8002fec <HAL_RCC_OscConfig+0x67c>)
 8002e1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e1c:	4b73      	ldr	r3, [pc, #460]	; (8002fec <HAL_RCC_OscConfig+0x67c>)
 8002e1e:	2104      	movs	r1, #4
 8002e20:	430a      	orrs	r2, r1
 8002e22:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002e24:	4b71      	ldr	r3, [pc, #452]	; (8002fec <HAL_RCC_OscConfig+0x67c>)
 8002e26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e28:	4b70      	ldr	r3, [pc, #448]	; (8002fec <HAL_RCC_OscConfig+0x67c>)
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	438a      	bics	r2, r1
 8002e2e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e30:	f7fe fd56 	bl	80018e0 <HAL_GetTick>
 8002e34:	0003      	movs	r3, r0
 8002e36:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002e38:	e008      	b.n	8002e4c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002e3a:	f7fe fd51 	bl	80018e0 <HAL_GetTick>
 8002e3e:	0002      	movs	r2, r0
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e111      	b.n	8003070 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002e4c:	4b67      	ldr	r3, [pc, #412]	; (8002fec <HAL_RCC_OscConfig+0x67c>)
 8002e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e50:	2202      	movs	r2, #2
 8002e52:	4013      	ands	r3, r2
 8002e54:	d1f1      	bne.n	8002e3a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2220      	movs	r2, #32
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	d05c      	beq.n	8002f1a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002e60:	4b62      	ldr	r3, [pc, #392]	; (8002fec <HAL_RCC_OscConfig+0x67c>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	220c      	movs	r2, #12
 8002e66:	4013      	ands	r3, r2
 8002e68:	2b0c      	cmp	r3, #12
 8002e6a:	d00e      	beq.n	8002e8a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002e6c:	4b5f      	ldr	r3, [pc, #380]	; (8002fec <HAL_RCC_OscConfig+0x67c>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	220c      	movs	r2, #12
 8002e72:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002e74:	2b08      	cmp	r3, #8
 8002e76:	d114      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002e78:	4b5c      	ldr	r3, [pc, #368]	; (8002fec <HAL_RCC_OscConfig+0x67c>)
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	23c0      	movs	r3, #192	; 0xc0
 8002e7e:	025b      	lsls	r3, r3, #9
 8002e80:	401a      	ands	r2, r3
 8002e82:	23c0      	movs	r3, #192	; 0xc0
 8002e84:	025b      	lsls	r3, r3, #9
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d10b      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002e8a:	4b58      	ldr	r3, [pc, #352]	; (8002fec <HAL_RCC_OscConfig+0x67c>)
 8002e8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e8e:	2380      	movs	r3, #128	; 0x80
 8002e90:	029b      	lsls	r3, r3, #10
 8002e92:	4013      	ands	r3, r2
 8002e94:	d040      	beq.n	8002f18 <HAL_RCC_OscConfig+0x5a8>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d03c      	beq.n	8002f18 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e0e6      	b.n	8003070 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d01b      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002eaa:	4b50      	ldr	r3, [pc, #320]	; (8002fec <HAL_RCC_OscConfig+0x67c>)
 8002eac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002eae:	4b4f      	ldr	r3, [pc, #316]	; (8002fec <HAL_RCC_OscConfig+0x67c>)
 8002eb0:	2180      	movs	r1, #128	; 0x80
 8002eb2:	0249      	lsls	r1, r1, #9
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb8:	f7fe fd12 	bl	80018e0 <HAL_GetTick>
 8002ebc:	0003      	movs	r3, r0
 8002ebe:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002ec0:	e008      	b.n	8002ed4 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ec2:	f7fe fd0d 	bl	80018e0 <HAL_GetTick>
 8002ec6:	0002      	movs	r2, r0
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e0cd      	b.n	8003070 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002ed4:	4b45      	ldr	r3, [pc, #276]	; (8002fec <HAL_RCC_OscConfig+0x67c>)
 8002ed6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ed8:	2380      	movs	r3, #128	; 0x80
 8002eda:	029b      	lsls	r3, r3, #10
 8002edc:	4013      	ands	r3, r2
 8002ede:	d0f0      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x552>
 8002ee0:	e01b      	b.n	8002f1a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002ee2:	4b42      	ldr	r3, [pc, #264]	; (8002fec <HAL_RCC_OscConfig+0x67c>)
 8002ee4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ee6:	4b41      	ldr	r3, [pc, #260]	; (8002fec <HAL_RCC_OscConfig+0x67c>)
 8002ee8:	4943      	ldr	r1, [pc, #268]	; (8002ff8 <HAL_RCC_OscConfig+0x688>)
 8002eea:	400a      	ands	r2, r1
 8002eec:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eee:	f7fe fcf7 	bl	80018e0 <HAL_GetTick>
 8002ef2:	0003      	movs	r3, r0
 8002ef4:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ef8:	f7fe fcf2 	bl	80018e0 <HAL_GetTick>
 8002efc:	0002      	movs	r2, r0
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e0b2      	b.n	8003070 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002f0a:	4b38      	ldr	r3, [pc, #224]	; (8002fec <HAL_RCC_OscConfig+0x67c>)
 8002f0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f0e:	2380      	movs	r3, #128	; 0x80
 8002f10:	029b      	lsls	r3, r3, #10
 8002f12:	4013      	ands	r3, r2
 8002f14:	d1f0      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x588>
 8002f16:	e000      	b.n	8002f1a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002f18:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d100      	bne.n	8002f24 <HAL_RCC_OscConfig+0x5b4>
 8002f22:	e0a4      	b.n	800306e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f24:	4b31      	ldr	r3, [pc, #196]	; (8002fec <HAL_RCC_OscConfig+0x67c>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	220c      	movs	r2, #12
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	2b08      	cmp	r3, #8
 8002f2e:	d100      	bne.n	8002f32 <HAL_RCC_OscConfig+0x5c2>
 8002f30:	e078      	b.n	8003024 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d14c      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f3a:	4b2c      	ldr	r3, [pc, #176]	; (8002fec <HAL_RCC_OscConfig+0x67c>)
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	4b2b      	ldr	r3, [pc, #172]	; (8002fec <HAL_RCC_OscConfig+0x67c>)
 8002f40:	492e      	ldr	r1, [pc, #184]	; (8002ffc <HAL_RCC_OscConfig+0x68c>)
 8002f42:	400a      	ands	r2, r1
 8002f44:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f46:	f7fe fccb 	bl	80018e0 <HAL_GetTick>
 8002f4a:	0003      	movs	r3, r0
 8002f4c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f50:	f7fe fcc6 	bl	80018e0 <HAL_GetTick>
 8002f54:	0002      	movs	r2, r0
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e086      	b.n	8003070 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f62:	4b22      	ldr	r3, [pc, #136]	; (8002fec <HAL_RCC_OscConfig+0x67c>)
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	2380      	movs	r3, #128	; 0x80
 8002f68:	049b      	lsls	r3, r3, #18
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	d1f0      	bne.n	8002f50 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f6e:	4b1f      	ldr	r3, [pc, #124]	; (8002fec <HAL_RCC_OscConfig+0x67c>)
 8002f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f72:	220f      	movs	r2, #15
 8002f74:	4393      	bics	r3, r2
 8002f76:	0019      	movs	r1, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f7c:	4b1b      	ldr	r3, [pc, #108]	; (8002fec <HAL_RCC_OscConfig+0x67c>)
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f82:	4b1a      	ldr	r3, [pc, #104]	; (8002fec <HAL_RCC_OscConfig+0x67c>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	4a1e      	ldr	r2, [pc, #120]	; (8003000 <HAL_RCC_OscConfig+0x690>)
 8002f88:	4013      	ands	r3, r2
 8002f8a:	0019      	movs	r1, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f94:	431a      	orrs	r2, r3
 8002f96:	4b15      	ldr	r3, [pc, #84]	; (8002fec <HAL_RCC_OscConfig+0x67c>)
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f9c:	4b13      	ldr	r3, [pc, #76]	; (8002fec <HAL_RCC_OscConfig+0x67c>)
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	4b12      	ldr	r3, [pc, #72]	; (8002fec <HAL_RCC_OscConfig+0x67c>)
 8002fa2:	2180      	movs	r1, #128	; 0x80
 8002fa4:	0449      	lsls	r1, r1, #17
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002faa:	f7fe fc99 	bl	80018e0 <HAL_GetTick>
 8002fae:	0003      	movs	r3, r0
 8002fb0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fb4:	f7fe fc94 	bl	80018e0 <HAL_GetTick>
 8002fb8:	0002      	movs	r2, r0
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e054      	b.n	8003070 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fc6:	4b09      	ldr	r3, [pc, #36]	; (8002fec <HAL_RCC_OscConfig+0x67c>)
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	2380      	movs	r3, #128	; 0x80
 8002fcc:	049b      	lsls	r3, r3, #18
 8002fce:	4013      	ands	r3, r2
 8002fd0:	d0f0      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x644>
 8002fd2:	e04c      	b.n	800306e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fd4:	4b05      	ldr	r3, [pc, #20]	; (8002fec <HAL_RCC_OscConfig+0x67c>)
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	4b04      	ldr	r3, [pc, #16]	; (8002fec <HAL_RCC_OscConfig+0x67c>)
 8002fda:	4908      	ldr	r1, [pc, #32]	; (8002ffc <HAL_RCC_OscConfig+0x68c>)
 8002fdc:	400a      	ands	r2, r1
 8002fde:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe0:	f7fe fc7e 	bl	80018e0 <HAL_GetTick>
 8002fe4:	0003      	movs	r3, r0
 8002fe6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fe8:	e015      	b.n	8003016 <HAL_RCC_OscConfig+0x6a6>
 8002fea:	46c0      	nop			; (mov r8, r8)
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	00001388 	.word	0x00001388
 8002ff4:	efffffff 	.word	0xefffffff
 8002ff8:	fffeffff 	.word	0xfffeffff
 8002ffc:	feffffff 	.word	0xfeffffff
 8003000:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003004:	f7fe fc6c 	bl	80018e0 <HAL_GetTick>
 8003008:	0002      	movs	r2, r0
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b02      	cmp	r3, #2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e02c      	b.n	8003070 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003016:	4b18      	ldr	r3, [pc, #96]	; (8003078 <HAL_RCC_OscConfig+0x708>)
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	2380      	movs	r3, #128	; 0x80
 800301c:	049b      	lsls	r3, r3, #18
 800301e:	4013      	ands	r3, r2
 8003020:	d1f0      	bne.n	8003004 <HAL_RCC_OscConfig+0x694>
 8003022:	e024      	b.n	800306e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003028:	2b01      	cmp	r3, #1
 800302a:	d101      	bne.n	8003030 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e01f      	b.n	8003070 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003030:	4b11      	ldr	r3, [pc, #68]	; (8003078 <HAL_RCC_OscConfig+0x708>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003036:	4b10      	ldr	r3, [pc, #64]	; (8003078 <HAL_RCC_OscConfig+0x708>)
 8003038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800303c:	697a      	ldr	r2, [r7, #20]
 800303e:	23c0      	movs	r3, #192	; 0xc0
 8003040:	025b      	lsls	r3, r3, #9
 8003042:	401a      	ands	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003048:	429a      	cmp	r2, r3
 800304a:	d10e      	bne.n	800306a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	220f      	movs	r2, #15
 8003050:	401a      	ands	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003056:	429a      	cmp	r2, r3
 8003058:	d107      	bne.n	800306a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	23f0      	movs	r3, #240	; 0xf0
 800305e:	039b      	lsls	r3, r3, #14
 8003060:	401a      	ands	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003066:	429a      	cmp	r2, r3
 8003068:	d001      	beq.n	800306e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e000      	b.n	8003070 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	0018      	movs	r0, r3
 8003072:	46bd      	mov	sp, r7
 8003074:	b008      	add	sp, #32
 8003076:	bd80      	pop	{r7, pc}
 8003078:	40021000 	.word	0x40021000

0800307c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e0bf      	b.n	8003210 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003090:	4b61      	ldr	r3, [pc, #388]	; (8003218 <HAL_RCC_ClockConfig+0x19c>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2201      	movs	r2, #1
 8003096:	4013      	ands	r3, r2
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	429a      	cmp	r2, r3
 800309c:	d911      	bls.n	80030c2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800309e:	4b5e      	ldr	r3, [pc, #376]	; (8003218 <HAL_RCC_ClockConfig+0x19c>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2201      	movs	r2, #1
 80030a4:	4393      	bics	r3, r2
 80030a6:	0019      	movs	r1, r3
 80030a8:	4b5b      	ldr	r3, [pc, #364]	; (8003218 <HAL_RCC_ClockConfig+0x19c>)
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	430a      	orrs	r2, r1
 80030ae:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b0:	4b59      	ldr	r3, [pc, #356]	; (8003218 <HAL_RCC_ClockConfig+0x19c>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2201      	movs	r2, #1
 80030b6:	4013      	ands	r3, r2
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d001      	beq.n	80030c2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e0a6      	b.n	8003210 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2202      	movs	r2, #2
 80030c8:	4013      	ands	r3, r2
 80030ca:	d015      	beq.n	80030f8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2204      	movs	r2, #4
 80030d2:	4013      	ands	r3, r2
 80030d4:	d006      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80030d6:	4b51      	ldr	r3, [pc, #324]	; (800321c <HAL_RCC_ClockConfig+0x1a0>)
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	4b50      	ldr	r3, [pc, #320]	; (800321c <HAL_RCC_ClockConfig+0x1a0>)
 80030dc:	21e0      	movs	r1, #224	; 0xe0
 80030de:	00c9      	lsls	r1, r1, #3
 80030e0:	430a      	orrs	r2, r1
 80030e2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030e4:	4b4d      	ldr	r3, [pc, #308]	; (800321c <HAL_RCC_ClockConfig+0x1a0>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	22f0      	movs	r2, #240	; 0xf0
 80030ea:	4393      	bics	r3, r2
 80030ec:	0019      	movs	r1, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	689a      	ldr	r2, [r3, #8]
 80030f2:	4b4a      	ldr	r3, [pc, #296]	; (800321c <HAL_RCC_ClockConfig+0x1a0>)
 80030f4:	430a      	orrs	r2, r1
 80030f6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2201      	movs	r2, #1
 80030fe:	4013      	ands	r3, r2
 8003100:	d04c      	beq.n	800319c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d107      	bne.n	800311a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800310a:	4b44      	ldr	r3, [pc, #272]	; (800321c <HAL_RCC_ClockConfig+0x1a0>)
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	2380      	movs	r3, #128	; 0x80
 8003110:	029b      	lsls	r3, r3, #10
 8003112:	4013      	ands	r3, r2
 8003114:	d120      	bne.n	8003158 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e07a      	b.n	8003210 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	2b02      	cmp	r3, #2
 8003120:	d107      	bne.n	8003132 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003122:	4b3e      	ldr	r3, [pc, #248]	; (800321c <HAL_RCC_ClockConfig+0x1a0>)
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	2380      	movs	r3, #128	; 0x80
 8003128:	049b      	lsls	r3, r3, #18
 800312a:	4013      	ands	r3, r2
 800312c:	d114      	bne.n	8003158 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e06e      	b.n	8003210 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	2b03      	cmp	r3, #3
 8003138:	d107      	bne.n	800314a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800313a:	4b38      	ldr	r3, [pc, #224]	; (800321c <HAL_RCC_ClockConfig+0x1a0>)
 800313c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800313e:	2380      	movs	r3, #128	; 0x80
 8003140:	029b      	lsls	r3, r3, #10
 8003142:	4013      	ands	r3, r2
 8003144:	d108      	bne.n	8003158 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e062      	b.n	8003210 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800314a:	4b34      	ldr	r3, [pc, #208]	; (800321c <HAL_RCC_ClockConfig+0x1a0>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2202      	movs	r2, #2
 8003150:	4013      	ands	r3, r2
 8003152:	d101      	bne.n	8003158 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e05b      	b.n	8003210 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003158:	4b30      	ldr	r3, [pc, #192]	; (800321c <HAL_RCC_ClockConfig+0x1a0>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	2203      	movs	r2, #3
 800315e:	4393      	bics	r3, r2
 8003160:	0019      	movs	r1, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	4b2d      	ldr	r3, [pc, #180]	; (800321c <HAL_RCC_ClockConfig+0x1a0>)
 8003168:	430a      	orrs	r2, r1
 800316a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800316c:	f7fe fbb8 	bl	80018e0 <HAL_GetTick>
 8003170:	0003      	movs	r3, r0
 8003172:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003174:	e009      	b.n	800318a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003176:	f7fe fbb3 	bl	80018e0 <HAL_GetTick>
 800317a:	0002      	movs	r2, r0
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	4a27      	ldr	r2, [pc, #156]	; (8003220 <HAL_RCC_ClockConfig+0x1a4>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d901      	bls.n	800318a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e042      	b.n	8003210 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800318a:	4b24      	ldr	r3, [pc, #144]	; (800321c <HAL_RCC_ClockConfig+0x1a0>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	220c      	movs	r2, #12
 8003190:	401a      	ands	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	429a      	cmp	r2, r3
 800319a:	d1ec      	bne.n	8003176 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800319c:	4b1e      	ldr	r3, [pc, #120]	; (8003218 <HAL_RCC_ClockConfig+0x19c>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2201      	movs	r2, #1
 80031a2:	4013      	ands	r3, r2
 80031a4:	683a      	ldr	r2, [r7, #0]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d211      	bcs.n	80031ce <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031aa:	4b1b      	ldr	r3, [pc, #108]	; (8003218 <HAL_RCC_ClockConfig+0x19c>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2201      	movs	r2, #1
 80031b0:	4393      	bics	r3, r2
 80031b2:	0019      	movs	r1, r3
 80031b4:	4b18      	ldr	r3, [pc, #96]	; (8003218 <HAL_RCC_ClockConfig+0x19c>)
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	430a      	orrs	r2, r1
 80031ba:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031bc:	4b16      	ldr	r3, [pc, #88]	; (8003218 <HAL_RCC_ClockConfig+0x19c>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2201      	movs	r2, #1
 80031c2:	4013      	ands	r3, r2
 80031c4:	683a      	ldr	r2, [r7, #0]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d001      	beq.n	80031ce <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e020      	b.n	8003210 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2204      	movs	r2, #4
 80031d4:	4013      	ands	r3, r2
 80031d6:	d009      	beq.n	80031ec <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80031d8:	4b10      	ldr	r3, [pc, #64]	; (800321c <HAL_RCC_ClockConfig+0x1a0>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	4a11      	ldr	r2, [pc, #68]	; (8003224 <HAL_RCC_ClockConfig+0x1a8>)
 80031de:	4013      	ands	r3, r2
 80031e0:	0019      	movs	r1, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68da      	ldr	r2, [r3, #12]
 80031e6:	4b0d      	ldr	r3, [pc, #52]	; (800321c <HAL_RCC_ClockConfig+0x1a0>)
 80031e8:	430a      	orrs	r2, r1
 80031ea:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80031ec:	f000 f820 	bl	8003230 <HAL_RCC_GetSysClockFreq>
 80031f0:	0001      	movs	r1, r0
 80031f2:	4b0a      	ldr	r3, [pc, #40]	; (800321c <HAL_RCC_ClockConfig+0x1a0>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	091b      	lsrs	r3, r3, #4
 80031f8:	220f      	movs	r2, #15
 80031fa:	4013      	ands	r3, r2
 80031fc:	4a0a      	ldr	r2, [pc, #40]	; (8003228 <HAL_RCC_ClockConfig+0x1ac>)
 80031fe:	5cd3      	ldrb	r3, [r2, r3]
 8003200:	000a      	movs	r2, r1
 8003202:	40da      	lsrs	r2, r3
 8003204:	4b09      	ldr	r3, [pc, #36]	; (800322c <HAL_RCC_ClockConfig+0x1b0>)
 8003206:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003208:	2000      	movs	r0, #0
 800320a:	f7fe fb23 	bl	8001854 <HAL_InitTick>
  
  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	0018      	movs	r0, r3
 8003212:	46bd      	mov	sp, r7
 8003214:	b004      	add	sp, #16
 8003216:	bd80      	pop	{r7, pc}
 8003218:	40022000 	.word	0x40022000
 800321c:	40021000 	.word	0x40021000
 8003220:	00001388 	.word	0x00001388
 8003224:	fffff8ff 	.word	0xfffff8ff
 8003228:	08005bac 	.word	0x08005bac
 800322c:	200001b0 	.word	0x200001b0

08003230 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003236:	2300      	movs	r3, #0
 8003238:	60fb      	str	r3, [r7, #12]
 800323a:	2300      	movs	r3, #0
 800323c:	60bb      	str	r3, [r7, #8]
 800323e:	2300      	movs	r3, #0
 8003240:	617b      	str	r3, [r7, #20]
 8003242:	2300      	movs	r3, #0
 8003244:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003246:	2300      	movs	r3, #0
 8003248:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800324a:	4b2d      	ldr	r3, [pc, #180]	; (8003300 <HAL_RCC_GetSysClockFreq+0xd0>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	220c      	movs	r2, #12
 8003254:	4013      	ands	r3, r2
 8003256:	2b0c      	cmp	r3, #12
 8003258:	d046      	beq.n	80032e8 <HAL_RCC_GetSysClockFreq+0xb8>
 800325a:	d848      	bhi.n	80032ee <HAL_RCC_GetSysClockFreq+0xbe>
 800325c:	2b04      	cmp	r3, #4
 800325e:	d002      	beq.n	8003266 <HAL_RCC_GetSysClockFreq+0x36>
 8003260:	2b08      	cmp	r3, #8
 8003262:	d003      	beq.n	800326c <HAL_RCC_GetSysClockFreq+0x3c>
 8003264:	e043      	b.n	80032ee <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003266:	4b27      	ldr	r3, [pc, #156]	; (8003304 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003268:	613b      	str	r3, [r7, #16]
      break;
 800326a:	e043      	b.n	80032f4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	0c9b      	lsrs	r3, r3, #18
 8003270:	220f      	movs	r2, #15
 8003272:	4013      	ands	r3, r2
 8003274:	4a24      	ldr	r2, [pc, #144]	; (8003308 <HAL_RCC_GetSysClockFreq+0xd8>)
 8003276:	5cd3      	ldrb	r3, [r2, r3]
 8003278:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800327a:	4b21      	ldr	r3, [pc, #132]	; (8003300 <HAL_RCC_GetSysClockFreq+0xd0>)
 800327c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327e:	220f      	movs	r2, #15
 8003280:	4013      	ands	r3, r2
 8003282:	4a22      	ldr	r2, [pc, #136]	; (800330c <HAL_RCC_GetSysClockFreq+0xdc>)
 8003284:	5cd3      	ldrb	r3, [r2, r3]
 8003286:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	23c0      	movs	r3, #192	; 0xc0
 800328c:	025b      	lsls	r3, r3, #9
 800328e:	401a      	ands	r2, r3
 8003290:	2380      	movs	r3, #128	; 0x80
 8003292:	025b      	lsls	r3, r3, #9
 8003294:	429a      	cmp	r2, r3
 8003296:	d109      	bne.n	80032ac <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003298:	68b9      	ldr	r1, [r7, #8]
 800329a:	481a      	ldr	r0, [pc, #104]	; (8003304 <HAL_RCC_GetSysClockFreq+0xd4>)
 800329c:	f7fc ff34 	bl	8000108 <__udivsi3>
 80032a0:	0003      	movs	r3, r0
 80032a2:	001a      	movs	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4353      	muls	r3, r2
 80032a8:	617b      	str	r3, [r7, #20]
 80032aa:	e01a      	b.n	80032e2 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	23c0      	movs	r3, #192	; 0xc0
 80032b0:	025b      	lsls	r3, r3, #9
 80032b2:	401a      	ands	r2, r3
 80032b4:	23c0      	movs	r3, #192	; 0xc0
 80032b6:	025b      	lsls	r3, r3, #9
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d109      	bne.n	80032d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80032bc:	68b9      	ldr	r1, [r7, #8]
 80032be:	4814      	ldr	r0, [pc, #80]	; (8003310 <HAL_RCC_GetSysClockFreq+0xe0>)
 80032c0:	f7fc ff22 	bl	8000108 <__udivsi3>
 80032c4:	0003      	movs	r3, r0
 80032c6:	001a      	movs	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4353      	muls	r3, r2
 80032cc:	617b      	str	r3, [r7, #20]
 80032ce:	e008      	b.n	80032e2 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80032d0:	68b9      	ldr	r1, [r7, #8]
 80032d2:	480c      	ldr	r0, [pc, #48]	; (8003304 <HAL_RCC_GetSysClockFreq+0xd4>)
 80032d4:	f7fc ff18 	bl	8000108 <__udivsi3>
 80032d8:	0003      	movs	r3, r0
 80032da:	001a      	movs	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4353      	muls	r3, r2
 80032e0:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	613b      	str	r3, [r7, #16]
      break;
 80032e6:	e005      	b.n	80032f4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80032e8:	4b09      	ldr	r3, [pc, #36]	; (8003310 <HAL_RCC_GetSysClockFreq+0xe0>)
 80032ea:	613b      	str	r3, [r7, #16]
      break;
 80032ec:	e002      	b.n	80032f4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032ee:	4b05      	ldr	r3, [pc, #20]	; (8003304 <HAL_RCC_GetSysClockFreq+0xd4>)
 80032f0:	613b      	str	r3, [r7, #16]
      break;
 80032f2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80032f4:	693b      	ldr	r3, [r7, #16]
}
 80032f6:	0018      	movs	r0, r3
 80032f8:	46bd      	mov	sp, r7
 80032fa:	b006      	add	sp, #24
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	46c0      	nop			; (mov r8, r8)
 8003300:	40021000 	.word	0x40021000
 8003304:	007a1200 	.word	0x007a1200
 8003308:	08005bc4 	.word	0x08005bc4
 800330c:	08005bd4 	.word	0x08005bd4
 8003310:	02dc6c00 	.word	0x02dc6c00

08003314 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003318:	4b02      	ldr	r3, [pc, #8]	; (8003324 <HAL_RCC_GetHCLKFreq+0x10>)
 800331a:	681b      	ldr	r3, [r3, #0]
}
 800331c:	0018      	movs	r0, r3
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	46c0      	nop			; (mov r8, r8)
 8003324:	200001b0 	.word	0x200001b0

08003328 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800332c:	f7ff fff2 	bl	8003314 <HAL_RCC_GetHCLKFreq>
 8003330:	0001      	movs	r1, r0
 8003332:	4b06      	ldr	r3, [pc, #24]	; (800334c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	0a1b      	lsrs	r3, r3, #8
 8003338:	2207      	movs	r2, #7
 800333a:	4013      	ands	r3, r2
 800333c:	4a04      	ldr	r2, [pc, #16]	; (8003350 <HAL_RCC_GetPCLK1Freq+0x28>)
 800333e:	5cd3      	ldrb	r3, [r2, r3]
 8003340:	40d9      	lsrs	r1, r3
 8003342:	000b      	movs	r3, r1
}    
 8003344:	0018      	movs	r0, r3
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	46c0      	nop			; (mov r8, r8)
 800334c:	40021000 	.word	0x40021000
 8003350:	08005bbc 	.word	0x08005bbc

08003354 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b086      	sub	sp, #24
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800335c:	2300      	movs	r3, #0
 800335e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003360:	2300      	movs	r3, #0
 8003362:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	2380      	movs	r3, #128	; 0x80
 800336a:	025b      	lsls	r3, r3, #9
 800336c:	4013      	ands	r3, r2
 800336e:	d100      	bne.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003370:	e08e      	b.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003372:	2017      	movs	r0, #23
 8003374:	183b      	adds	r3, r7, r0
 8003376:	2200      	movs	r2, #0
 8003378:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800337a:	4b67      	ldr	r3, [pc, #412]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800337c:	69da      	ldr	r2, [r3, #28]
 800337e:	2380      	movs	r3, #128	; 0x80
 8003380:	055b      	lsls	r3, r3, #21
 8003382:	4013      	ands	r3, r2
 8003384:	d110      	bne.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003386:	4b64      	ldr	r3, [pc, #400]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003388:	69da      	ldr	r2, [r3, #28]
 800338a:	4b63      	ldr	r3, [pc, #396]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800338c:	2180      	movs	r1, #128	; 0x80
 800338e:	0549      	lsls	r1, r1, #21
 8003390:	430a      	orrs	r2, r1
 8003392:	61da      	str	r2, [r3, #28]
 8003394:	4b60      	ldr	r3, [pc, #384]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003396:	69da      	ldr	r2, [r3, #28]
 8003398:	2380      	movs	r3, #128	; 0x80
 800339a:	055b      	lsls	r3, r3, #21
 800339c:	4013      	ands	r3, r2
 800339e:	60bb      	str	r3, [r7, #8]
 80033a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033a2:	183b      	adds	r3, r7, r0
 80033a4:	2201      	movs	r2, #1
 80033a6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a8:	4b5c      	ldr	r3, [pc, #368]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	2380      	movs	r3, #128	; 0x80
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	4013      	ands	r3, r2
 80033b2:	d11a      	bne.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033b4:	4b59      	ldr	r3, [pc, #356]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	4b58      	ldr	r3, [pc, #352]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80033ba:	2180      	movs	r1, #128	; 0x80
 80033bc:	0049      	lsls	r1, r1, #1
 80033be:	430a      	orrs	r2, r1
 80033c0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033c2:	f7fe fa8d 	bl	80018e0 <HAL_GetTick>
 80033c6:	0003      	movs	r3, r0
 80033c8:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ca:	e008      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033cc:	f7fe fa88 	bl	80018e0 <HAL_GetTick>
 80033d0:	0002      	movs	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b64      	cmp	r3, #100	; 0x64
 80033d8:	d901      	bls.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e097      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033de:	4b4f      	ldr	r3, [pc, #316]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	2380      	movs	r3, #128	; 0x80
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	4013      	ands	r3, r2
 80033e8:	d0f0      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033ea:	4b4b      	ldr	r3, [pc, #300]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80033ec:	6a1a      	ldr	r2, [r3, #32]
 80033ee:	23c0      	movs	r3, #192	; 0xc0
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4013      	ands	r3, r2
 80033f4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d034      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685a      	ldr	r2, [r3, #4]
 8003400:	23c0      	movs	r3, #192	; 0xc0
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	4013      	ands	r3, r2
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	429a      	cmp	r2, r3
 800340a:	d02c      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800340c:	4b42      	ldr	r3, [pc, #264]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800340e:	6a1b      	ldr	r3, [r3, #32]
 8003410:	4a43      	ldr	r2, [pc, #268]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003412:	4013      	ands	r3, r2
 8003414:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003416:	4b40      	ldr	r3, [pc, #256]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003418:	6a1a      	ldr	r2, [r3, #32]
 800341a:	4b3f      	ldr	r3, [pc, #252]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800341c:	2180      	movs	r1, #128	; 0x80
 800341e:	0249      	lsls	r1, r1, #9
 8003420:	430a      	orrs	r2, r1
 8003422:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003424:	4b3c      	ldr	r3, [pc, #240]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003426:	6a1a      	ldr	r2, [r3, #32]
 8003428:	4b3b      	ldr	r3, [pc, #236]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800342a:	493e      	ldr	r1, [pc, #248]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800342c:	400a      	ands	r2, r1
 800342e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003430:	4b39      	ldr	r3, [pc, #228]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2201      	movs	r2, #1
 800343a:	4013      	ands	r3, r2
 800343c:	d013      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800343e:	f7fe fa4f 	bl	80018e0 <HAL_GetTick>
 8003442:	0003      	movs	r3, r0
 8003444:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003446:	e009      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003448:	f7fe fa4a 	bl	80018e0 <HAL_GetTick>
 800344c:	0002      	movs	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	4a35      	ldr	r2, [pc, #212]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d901      	bls.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e058      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800345c:	4b2e      	ldr	r3, [pc, #184]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800345e:	6a1b      	ldr	r3, [r3, #32]
 8003460:	2202      	movs	r2, #2
 8003462:	4013      	ands	r3, r2
 8003464:	d0f0      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003466:	4b2c      	ldr	r3, [pc, #176]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	4a2d      	ldr	r2, [pc, #180]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800346c:	4013      	ands	r3, r2
 800346e:	0019      	movs	r1, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	4b28      	ldr	r3, [pc, #160]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003476:	430a      	orrs	r2, r1
 8003478:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800347a:	2317      	movs	r3, #23
 800347c:	18fb      	adds	r3, r7, r3
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d105      	bne.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003484:	4b24      	ldr	r3, [pc, #144]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003486:	69da      	ldr	r2, [r3, #28]
 8003488:	4b23      	ldr	r3, [pc, #140]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800348a:	4928      	ldr	r1, [pc, #160]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800348c:	400a      	ands	r2, r1
 800348e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2201      	movs	r2, #1
 8003496:	4013      	ands	r3, r2
 8003498:	d009      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800349a:	4b1f      	ldr	r3, [pc, #124]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800349c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349e:	2203      	movs	r2, #3
 80034a0:	4393      	bics	r3, r2
 80034a2:	0019      	movs	r1, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	689a      	ldr	r2, [r3, #8]
 80034a8:	4b1b      	ldr	r3, [pc, #108]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80034aa:	430a      	orrs	r2, r1
 80034ac:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2220      	movs	r2, #32
 80034b4:	4013      	ands	r3, r2
 80034b6:	d009      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034b8:	4b17      	ldr	r3, [pc, #92]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80034ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034bc:	2210      	movs	r2, #16
 80034be:	4393      	bics	r3, r2
 80034c0:	0019      	movs	r1, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	68da      	ldr	r2, [r3, #12]
 80034c6:	4b14      	ldr	r3, [pc, #80]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80034c8:	430a      	orrs	r2, r1
 80034ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	2380      	movs	r3, #128	; 0x80
 80034d2:	029b      	lsls	r3, r3, #10
 80034d4:	4013      	ands	r3, r2
 80034d6:	d009      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034d8:	4b0f      	ldr	r3, [pc, #60]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80034da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034dc:	2280      	movs	r2, #128	; 0x80
 80034de:	4393      	bics	r3, r2
 80034e0:	0019      	movs	r1, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	695a      	ldr	r2, [r3, #20]
 80034e6:	4b0c      	ldr	r3, [pc, #48]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80034e8:	430a      	orrs	r2, r1
 80034ea:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	2380      	movs	r3, #128	; 0x80
 80034f2:	00db      	lsls	r3, r3, #3
 80034f4:	4013      	ands	r3, r2
 80034f6:	d009      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80034f8:	4b07      	ldr	r3, [pc, #28]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80034fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fc:	2240      	movs	r2, #64	; 0x40
 80034fe:	4393      	bics	r3, r2
 8003500:	0019      	movs	r1, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	691a      	ldr	r2, [r3, #16]
 8003506:	4b04      	ldr	r3, [pc, #16]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003508:	430a      	orrs	r2, r1
 800350a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	0018      	movs	r0, r3
 8003510:	46bd      	mov	sp, r7
 8003512:	b006      	add	sp, #24
 8003514:	bd80      	pop	{r7, pc}
 8003516:	46c0      	nop			; (mov r8, r8)
 8003518:	40021000 	.word	0x40021000
 800351c:	40007000 	.word	0x40007000
 8003520:	fffffcff 	.word	0xfffffcff
 8003524:	fffeffff 	.word	0xfffeffff
 8003528:	00001388 	.word	0x00001388
 800352c:	efffffff 	.word	0xefffffff

08003530 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e042      	b.n	80035c8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	223d      	movs	r2, #61	; 0x3d
 8003546:	5c9b      	ldrb	r3, [r3, r2]
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d107      	bne.n	800355e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	223c      	movs	r2, #60	; 0x3c
 8003552:	2100      	movs	r1, #0
 8003554:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	0018      	movs	r0, r3
 800355a:	f7fd ff8f 	bl	800147c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	223d      	movs	r2, #61	; 0x3d
 8003562:	2102      	movs	r1, #2
 8003564:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	3304      	adds	r3, #4
 800356e:	0019      	movs	r1, r3
 8003570:	0010      	movs	r0, r2
 8003572:	f000 fcb5 	bl	8003ee0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2246      	movs	r2, #70	; 0x46
 800357a:	2101      	movs	r1, #1
 800357c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	223e      	movs	r2, #62	; 0x3e
 8003582:	2101      	movs	r1, #1
 8003584:	5499      	strb	r1, [r3, r2]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	223f      	movs	r2, #63	; 0x3f
 800358a:	2101      	movs	r1, #1
 800358c:	5499      	strb	r1, [r3, r2]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2240      	movs	r2, #64	; 0x40
 8003592:	2101      	movs	r1, #1
 8003594:	5499      	strb	r1, [r3, r2]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2241      	movs	r2, #65	; 0x41
 800359a:	2101      	movs	r1, #1
 800359c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2242      	movs	r2, #66	; 0x42
 80035a2:	2101      	movs	r1, #1
 80035a4:	5499      	strb	r1, [r3, r2]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2243      	movs	r2, #67	; 0x43
 80035aa:	2101      	movs	r1, #1
 80035ac:	5499      	strb	r1, [r3, r2]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2244      	movs	r2, #68	; 0x44
 80035b2:	2101      	movs	r1, #1
 80035b4:	5499      	strb	r1, [r3, r2]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2245      	movs	r2, #69	; 0x45
 80035ba:	2101      	movs	r1, #1
 80035bc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	223d      	movs	r2, #61	; 0x3d
 80035c2:	2101      	movs	r1, #1
 80035c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	0018      	movs	r0, r3
 80035ca:	46bd      	mov	sp, r7
 80035cc:	b002      	add	sp, #8
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e042      	b.n	8003668 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	223d      	movs	r2, #61	; 0x3d
 80035e6:	5c9b      	ldrb	r3, [r3, r2]
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d107      	bne.n	80035fe <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	223c      	movs	r2, #60	; 0x3c
 80035f2:	2100      	movs	r1, #0
 80035f4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	0018      	movs	r0, r3
 80035fa:	f000 f839 	bl	8003670 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	223d      	movs	r2, #61	; 0x3d
 8003602:	2102      	movs	r1, #2
 8003604:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	3304      	adds	r3, #4
 800360e:	0019      	movs	r1, r3
 8003610:	0010      	movs	r0, r2
 8003612:	f000 fc65 	bl	8003ee0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2246      	movs	r2, #70	; 0x46
 800361a:	2101      	movs	r1, #1
 800361c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	223e      	movs	r2, #62	; 0x3e
 8003622:	2101      	movs	r1, #1
 8003624:	5499      	strb	r1, [r3, r2]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	223f      	movs	r2, #63	; 0x3f
 800362a:	2101      	movs	r1, #1
 800362c:	5499      	strb	r1, [r3, r2]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2240      	movs	r2, #64	; 0x40
 8003632:	2101      	movs	r1, #1
 8003634:	5499      	strb	r1, [r3, r2]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2241      	movs	r2, #65	; 0x41
 800363a:	2101      	movs	r1, #1
 800363c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2242      	movs	r2, #66	; 0x42
 8003642:	2101      	movs	r1, #1
 8003644:	5499      	strb	r1, [r3, r2]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2243      	movs	r2, #67	; 0x43
 800364a:	2101      	movs	r1, #1
 800364c:	5499      	strb	r1, [r3, r2]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2244      	movs	r2, #68	; 0x44
 8003652:	2101      	movs	r1, #1
 8003654:	5499      	strb	r1, [r3, r2]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2245      	movs	r2, #69	; 0x45
 800365a:	2101      	movs	r1, #1
 800365c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	223d      	movs	r2, #61	; 0x3d
 8003662:	2101      	movs	r1, #1
 8003664:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	0018      	movs	r0, r3
 800366a:	46bd      	mov	sp, r7
 800366c:	b002      	add	sp, #8
 800366e:	bd80      	pop	{r7, pc}

08003670 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003678:	46c0      	nop			; (mov r8, r8)
 800367a:	46bd      	mov	sp, r7
 800367c:	b002      	add	sp, #8
 800367e:	bd80      	pop	{r7, pc}

08003680 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
 800368c:	001a      	movs	r2, r3
 800368e:	1cbb      	adds	r3, r7, #2
 8003690:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003692:	2317      	movs	r3, #23
 8003694:	18fb      	adds	r3, r7, r3
 8003696:	2200      	movs	r2, #0
 8003698:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d108      	bne.n	80036b2 <HAL_TIM_PWM_Start_DMA+0x32>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	223e      	movs	r2, #62	; 0x3e
 80036a4:	5c9b      	ldrb	r3, [r3, r2]
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	3b02      	subs	r3, #2
 80036aa:	425a      	negs	r2, r3
 80036ac:	4153      	adcs	r3, r2
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	e01f      	b.n	80036f2 <HAL_TIM_PWM_Start_DMA+0x72>
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	2b04      	cmp	r3, #4
 80036b6:	d108      	bne.n	80036ca <HAL_TIM_PWM_Start_DMA+0x4a>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	223f      	movs	r2, #63	; 0x3f
 80036bc:	5c9b      	ldrb	r3, [r3, r2]
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	3b02      	subs	r3, #2
 80036c2:	425a      	negs	r2, r3
 80036c4:	4153      	adcs	r3, r2
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	e013      	b.n	80036f2 <HAL_TIM_PWM_Start_DMA+0x72>
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	2b08      	cmp	r3, #8
 80036ce:	d108      	bne.n	80036e2 <HAL_TIM_PWM_Start_DMA+0x62>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2240      	movs	r2, #64	; 0x40
 80036d4:	5c9b      	ldrb	r3, [r3, r2]
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	3b02      	subs	r3, #2
 80036da:	425a      	negs	r2, r3
 80036dc:	4153      	adcs	r3, r2
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	e007      	b.n	80036f2 <HAL_TIM_PWM_Start_DMA+0x72>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2241      	movs	r2, #65	; 0x41
 80036e6:	5c9b      	ldrb	r3, [r3, r2]
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	3b02      	subs	r3, #2
 80036ec:	425a      	negs	r2, r3
 80036ee:	4153      	adcs	r3, r2
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80036f6:	2302      	movs	r3, #2
 80036f8:	e15a      	b.n	80039b0 <HAL_TIM_PWM_Start_DMA+0x330>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d108      	bne.n	8003712 <HAL_TIM_PWM_Start_DMA+0x92>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	223e      	movs	r2, #62	; 0x3e
 8003704:	5c9b      	ldrb	r3, [r3, r2]
 8003706:	b2db      	uxtb	r3, r3
 8003708:	3b01      	subs	r3, #1
 800370a:	425a      	negs	r2, r3
 800370c:	4153      	adcs	r3, r2
 800370e:	b2db      	uxtb	r3, r3
 8003710:	e01f      	b.n	8003752 <HAL_TIM_PWM_Start_DMA+0xd2>
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	2b04      	cmp	r3, #4
 8003716:	d108      	bne.n	800372a <HAL_TIM_PWM_Start_DMA+0xaa>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	223f      	movs	r2, #63	; 0x3f
 800371c:	5c9b      	ldrb	r3, [r3, r2]
 800371e:	b2db      	uxtb	r3, r3
 8003720:	3b01      	subs	r3, #1
 8003722:	425a      	negs	r2, r3
 8003724:	4153      	adcs	r3, r2
 8003726:	b2db      	uxtb	r3, r3
 8003728:	e013      	b.n	8003752 <HAL_TIM_PWM_Start_DMA+0xd2>
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	2b08      	cmp	r3, #8
 800372e:	d108      	bne.n	8003742 <HAL_TIM_PWM_Start_DMA+0xc2>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2240      	movs	r2, #64	; 0x40
 8003734:	5c9b      	ldrb	r3, [r3, r2]
 8003736:	b2db      	uxtb	r3, r3
 8003738:	3b01      	subs	r3, #1
 800373a:	425a      	negs	r2, r3
 800373c:	4153      	adcs	r3, r2
 800373e:	b2db      	uxtb	r3, r3
 8003740:	e007      	b.n	8003752 <HAL_TIM_PWM_Start_DMA+0xd2>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2241      	movs	r2, #65	; 0x41
 8003746:	5c9b      	ldrb	r3, [r3, r2]
 8003748:	b2db      	uxtb	r3, r3
 800374a:	3b01      	subs	r3, #1
 800374c:	425a      	negs	r2, r3
 800374e:	4153      	adcs	r3, r2
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d025      	beq.n	80037a2 <HAL_TIM_PWM_Start_DMA+0x122>
  {
    if ((pData == NULL) || (Length == 0U))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d003      	beq.n	8003764 <HAL_TIM_PWM_Start_DMA+0xe4>
 800375c:	1cbb      	adds	r3, r7, #2
 800375e:	881b      	ldrh	r3, [r3, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d101      	bne.n	8003768 <HAL_TIM_PWM_Start_DMA+0xe8>
    {
      return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e123      	b.n	80039b0 <HAL_TIM_PWM_Start_DMA+0x330>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d104      	bne.n	8003778 <HAL_TIM_PWM_Start_DMA+0xf8>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	223e      	movs	r2, #62	; 0x3e
 8003772:	2102      	movs	r1, #2
 8003774:	5499      	strb	r1, [r3, r2]
 8003776:	e016      	b.n	80037a6 <HAL_TIM_PWM_Start_DMA+0x126>
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	2b04      	cmp	r3, #4
 800377c:	d104      	bne.n	8003788 <HAL_TIM_PWM_Start_DMA+0x108>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	223f      	movs	r2, #63	; 0x3f
 8003782:	2102      	movs	r1, #2
 8003784:	5499      	strb	r1, [r3, r2]
 8003786:	e00e      	b.n	80037a6 <HAL_TIM_PWM_Start_DMA+0x126>
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	2b08      	cmp	r3, #8
 800378c:	d104      	bne.n	8003798 <HAL_TIM_PWM_Start_DMA+0x118>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2240      	movs	r2, #64	; 0x40
 8003792:	2102      	movs	r1, #2
 8003794:	5499      	strb	r1, [r3, r2]
 8003796:	e006      	b.n	80037a6 <HAL_TIM_PWM_Start_DMA+0x126>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2241      	movs	r2, #65	; 0x41
 800379c:	2102      	movs	r1, #2
 800379e:	5499      	strb	r1, [r3, r2]
 80037a0:	e001      	b.n	80037a6 <HAL_TIM_PWM_Start_DMA+0x126>
    }
  }
  else
  {
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e104      	b.n	80039b0 <HAL_TIM_PWM_Start_DMA+0x330>
  }

  switch (Channel)
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	2b0c      	cmp	r3, #12
 80037aa:	d100      	bne.n	80037ae <HAL_TIM_PWM_Start_DMA+0x12e>
 80037ac:	e080      	b.n	80038b0 <HAL_TIM_PWM_Start_DMA+0x230>
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	2b0c      	cmp	r3, #12
 80037b2:	d900      	bls.n	80037b6 <HAL_TIM_PWM_Start_DMA+0x136>
 80037b4:	e0a1      	b.n	80038fa <HAL_TIM_PWM_Start_DMA+0x27a>
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	2b08      	cmp	r3, #8
 80037ba:	d054      	beq.n	8003866 <HAL_TIM_PWM_Start_DMA+0x1e6>
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	2b08      	cmp	r3, #8
 80037c0:	d900      	bls.n	80037c4 <HAL_TIM_PWM_Start_DMA+0x144>
 80037c2:	e09a      	b.n	80038fa <HAL_TIM_PWM_Start_DMA+0x27a>
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d003      	beq.n	80037d2 <HAL_TIM_PWM_Start_DMA+0x152>
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	2b04      	cmp	r3, #4
 80037ce:	d025      	beq.n	800381c <HAL_TIM_PWM_Start_DMA+0x19c>
 80037d0:	e093      	b.n	80038fa <HAL_TIM_PWM_Start_DMA+0x27a>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d6:	4a78      	ldr	r2, [pc, #480]	; (80039b8 <HAL_TIM_PWM_Start_DMA+0x338>)
 80037d8:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037de:	4a77      	ldr	r2, [pc, #476]	; (80039bc <HAL_TIM_PWM_Start_DMA+0x33c>)
 80037e0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e6:	4a76      	ldr	r2, [pc, #472]	; (80039c0 <HAL_TIM_PWM_Start_DMA+0x340>)
 80037e8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80037ee:	6879      	ldr	r1, [r7, #4]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	3334      	adds	r3, #52	; 0x34
 80037f6:	001a      	movs	r2, r3
 80037f8:	1cbb      	adds	r3, r7, #2
 80037fa:	881b      	ldrh	r3, [r3, #0]
 80037fc:	f7fe fd82 	bl	8002304 <HAL_DMA_Start_IT>
 8003800:	1e03      	subs	r3, r0, #0
 8003802:	d001      	beq.n	8003808 <HAL_TIM_PWM_Start_DMA+0x188>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e0d3      	b.n	80039b0 <HAL_TIM_PWM_Start_DMA+0x330>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68da      	ldr	r2, [r3, #12]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2180      	movs	r1, #128	; 0x80
 8003814:	0089      	lsls	r1, r1, #2
 8003816:	430a      	orrs	r2, r1
 8003818:	60da      	str	r2, [r3, #12]
      break;
 800381a:	e073      	b.n	8003904 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003820:	4a65      	ldr	r2, [pc, #404]	; (80039b8 <HAL_TIM_PWM_Start_DMA+0x338>)
 8003822:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003828:	4a64      	ldr	r2, [pc, #400]	; (80039bc <HAL_TIM_PWM_Start_DMA+0x33c>)
 800382a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003830:	4a63      	ldr	r2, [pc, #396]	; (80039c0 <HAL_TIM_PWM_Start_DMA+0x340>)
 8003832:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003838:	6879      	ldr	r1, [r7, #4]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	3338      	adds	r3, #56	; 0x38
 8003840:	001a      	movs	r2, r3
 8003842:	1cbb      	adds	r3, r7, #2
 8003844:	881b      	ldrh	r3, [r3, #0]
 8003846:	f7fe fd5d 	bl	8002304 <HAL_DMA_Start_IT>
 800384a:	1e03      	subs	r3, r0, #0
 800384c:	d001      	beq.n	8003852 <HAL_TIM_PWM_Start_DMA+0x1d2>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e0ae      	b.n	80039b0 <HAL_TIM_PWM_Start_DMA+0x330>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68da      	ldr	r2, [r3, #12]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2180      	movs	r1, #128	; 0x80
 800385e:	00c9      	lsls	r1, r1, #3
 8003860:	430a      	orrs	r2, r1
 8003862:	60da      	str	r2, [r3, #12]
      break;
 8003864:	e04e      	b.n	8003904 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386a:	4a53      	ldr	r2, [pc, #332]	; (80039b8 <HAL_TIM_PWM_Start_DMA+0x338>)
 800386c:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003872:	4a52      	ldr	r2, [pc, #328]	; (80039bc <HAL_TIM_PWM_Start_DMA+0x33c>)
 8003874:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387a:	4a51      	ldr	r2, [pc, #324]	; (80039c0 <HAL_TIM_PWM_Start_DMA+0x340>)
 800387c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003882:	6879      	ldr	r1, [r7, #4]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	333c      	adds	r3, #60	; 0x3c
 800388a:	001a      	movs	r2, r3
 800388c:	1cbb      	adds	r3, r7, #2
 800388e:	881b      	ldrh	r3, [r3, #0]
 8003890:	f7fe fd38 	bl	8002304 <HAL_DMA_Start_IT>
 8003894:	1e03      	subs	r3, r0, #0
 8003896:	d001      	beq.n	800389c <HAL_TIM_PWM_Start_DMA+0x21c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e089      	b.n	80039b0 <HAL_TIM_PWM_Start_DMA+0x330>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68da      	ldr	r2, [r3, #12]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2180      	movs	r1, #128	; 0x80
 80038a8:	0109      	lsls	r1, r1, #4
 80038aa:	430a      	orrs	r2, r1
 80038ac:	60da      	str	r2, [r3, #12]
      break;
 80038ae:	e029      	b.n	8003904 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b4:	4a40      	ldr	r2, [pc, #256]	; (80039b8 <HAL_TIM_PWM_Start_DMA+0x338>)
 80038b6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038bc:	4a3f      	ldr	r2, [pc, #252]	; (80039bc <HAL_TIM_PWM_Start_DMA+0x33c>)
 80038be:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c4:	4a3e      	ldr	r2, [pc, #248]	; (80039c0 <HAL_TIM_PWM_Start_DMA+0x340>)
 80038c6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80038cc:	6879      	ldr	r1, [r7, #4]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	3340      	adds	r3, #64	; 0x40
 80038d4:	001a      	movs	r2, r3
 80038d6:	1cbb      	adds	r3, r7, #2
 80038d8:	881b      	ldrh	r3, [r3, #0]
 80038da:	f7fe fd13 	bl	8002304 <HAL_DMA_Start_IT>
 80038de:	1e03      	subs	r3, r0, #0
 80038e0:	d001      	beq.n	80038e6 <HAL_TIM_PWM_Start_DMA+0x266>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e064      	b.n	80039b0 <HAL_TIM_PWM_Start_DMA+0x330>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68da      	ldr	r2, [r3, #12]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2180      	movs	r1, #128	; 0x80
 80038f2:	0149      	lsls	r1, r1, #5
 80038f4:	430a      	orrs	r2, r1
 80038f6:	60da      	str	r2, [r3, #12]
      break;
 80038f8:	e004      	b.n	8003904 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    default:
      status = HAL_ERROR;
 80038fa:	2317      	movs	r3, #23
 80038fc:	18fb      	adds	r3, r7, r3
 80038fe:	2201      	movs	r2, #1
 8003900:	701a      	strb	r2, [r3, #0]
      break;
 8003902:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8003904:	2317      	movs	r3, #23
 8003906:	18fb      	adds	r3, r7, r3
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d14d      	bne.n	80039aa <HAL_TIM_PWM_Start_DMA+0x32a>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68b9      	ldr	r1, [r7, #8]
 8003914:	2201      	movs	r2, #1
 8003916:	0018      	movs	r0, r3
 8003918:	f000 fdd2 	bl	80044c0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a28      	ldr	r2, [pc, #160]	; (80039c4 <HAL_TIM_PWM_Start_DMA+0x344>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d009      	beq.n	800393a <HAL_TIM_PWM_Start_DMA+0x2ba>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a27      	ldr	r2, [pc, #156]	; (80039c8 <HAL_TIM_PWM_Start_DMA+0x348>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d004      	beq.n	800393a <HAL_TIM_PWM_Start_DMA+0x2ba>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a25      	ldr	r2, [pc, #148]	; (80039cc <HAL_TIM_PWM_Start_DMA+0x34c>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d101      	bne.n	800393e <HAL_TIM_PWM_Start_DMA+0x2be>
 800393a:	2301      	movs	r3, #1
 800393c:	e000      	b.n	8003940 <HAL_TIM_PWM_Start_DMA+0x2c0>
 800393e:	2300      	movs	r3, #0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d008      	beq.n	8003956 <HAL_TIM_PWM_Start_DMA+0x2d6>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2180      	movs	r1, #128	; 0x80
 8003950:	0209      	lsls	r1, r1, #8
 8003952:	430a      	orrs	r2, r1
 8003954:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a1a      	ldr	r2, [pc, #104]	; (80039c4 <HAL_TIM_PWM_Start_DMA+0x344>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d00a      	beq.n	8003976 <HAL_TIM_PWM_Start_DMA+0x2f6>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	2380      	movs	r3, #128	; 0x80
 8003966:	05db      	lsls	r3, r3, #23
 8003968:	429a      	cmp	r2, r3
 800396a:	d004      	beq.n	8003976 <HAL_TIM_PWM_Start_DMA+0x2f6>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a17      	ldr	r2, [pc, #92]	; (80039d0 <HAL_TIM_PWM_Start_DMA+0x350>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d111      	bne.n	800399a <HAL_TIM_PWM_Start_DMA+0x31a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	2207      	movs	r2, #7
 800397e:	4013      	ands	r3, r2
 8003980:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	2b06      	cmp	r3, #6
 8003986:	d010      	beq.n	80039aa <HAL_TIM_PWM_Start_DMA+0x32a>
      {
        __HAL_TIM_ENABLE(htim);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2101      	movs	r1, #1
 8003994:	430a      	orrs	r2, r1
 8003996:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003998:	e007      	b.n	80039aa <HAL_TIM_PWM_Start_DMA+0x32a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2101      	movs	r1, #1
 80039a6:	430a      	orrs	r2, r1
 80039a8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80039aa:	2317      	movs	r3, #23
 80039ac:	18fb      	adds	r3, r7, r3
 80039ae:	781b      	ldrb	r3, [r3, #0]
}
 80039b0:	0018      	movs	r0, r3
 80039b2:	46bd      	mov	sp, r7
 80039b4:	b006      	add	sp, #24
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	08003dcd 	.word	0x08003dcd
 80039bc:	08003e77 	.word	0x08003e77
 80039c0:	08003d39 	.word	0x08003d39
 80039c4:	40012c00 	.word	0x40012c00
 80039c8:	40014400 	.word	0x40014400
 80039cc:	40014800 	.word	0x40014800
 80039d0:	40000400 	.word	0x40000400

080039d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039e0:	2317      	movs	r3, #23
 80039e2:	18fb      	adds	r3, r7, r3
 80039e4:	2200      	movs	r2, #0
 80039e6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	223c      	movs	r2, #60	; 0x3c
 80039ec:	5c9b      	ldrb	r3, [r3, r2]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d101      	bne.n	80039f6 <HAL_TIM_PWM_ConfigChannel+0x22>
 80039f2:	2302      	movs	r3, #2
 80039f4:	e0ad      	b.n	8003b52 <HAL_TIM_PWM_ConfigChannel+0x17e>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	223c      	movs	r2, #60	; 0x3c
 80039fa:	2101      	movs	r1, #1
 80039fc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2b0c      	cmp	r3, #12
 8003a02:	d100      	bne.n	8003a06 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003a04:	e076      	b.n	8003af4 <HAL_TIM_PWM_ConfigChannel+0x120>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2b0c      	cmp	r3, #12
 8003a0a:	d900      	bls.n	8003a0e <HAL_TIM_PWM_ConfigChannel+0x3a>
 8003a0c:	e095      	b.n	8003b3a <HAL_TIM_PWM_ConfigChannel+0x166>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2b08      	cmp	r3, #8
 8003a12:	d04e      	beq.n	8003ab2 <HAL_TIM_PWM_ConfigChannel+0xde>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b08      	cmp	r3, #8
 8003a18:	d900      	bls.n	8003a1c <HAL_TIM_PWM_ConfigChannel+0x48>
 8003a1a:	e08e      	b.n	8003b3a <HAL_TIM_PWM_ConfigChannel+0x166>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d003      	beq.n	8003a2a <HAL_TIM_PWM_ConfigChannel+0x56>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2b04      	cmp	r3, #4
 8003a26:	d021      	beq.n	8003a6c <HAL_TIM_PWM_ConfigChannel+0x98>
 8003a28:	e087      	b.n	8003b3a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68ba      	ldr	r2, [r7, #8]
 8003a30:	0011      	movs	r1, r2
 8003a32:	0018      	movs	r0, r3
 8003a34:	f000 faca 	bl	8003fcc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	699a      	ldr	r2, [r3, #24]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2108      	movs	r1, #8
 8003a44:	430a      	orrs	r2, r1
 8003a46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	699a      	ldr	r2, [r3, #24]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2104      	movs	r1, #4
 8003a54:	438a      	bics	r2, r1
 8003a56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	6999      	ldr	r1, [r3, #24]
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	691a      	ldr	r2, [r3, #16]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	430a      	orrs	r2, r1
 8003a68:	619a      	str	r2, [r3, #24]
      break;
 8003a6a:	e06b      	b.n	8003b44 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68ba      	ldr	r2, [r7, #8]
 8003a72:	0011      	movs	r1, r2
 8003a74:	0018      	movs	r0, r3
 8003a76:	f000 fb27 	bl	80040c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	699a      	ldr	r2, [r3, #24]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2180      	movs	r1, #128	; 0x80
 8003a86:	0109      	lsls	r1, r1, #4
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	699a      	ldr	r2, [r3, #24]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4931      	ldr	r1, [pc, #196]	; (8003b5c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003a98:	400a      	ands	r2, r1
 8003a9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6999      	ldr	r1, [r3, #24]
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	021a      	lsls	r2, r3, #8
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	430a      	orrs	r2, r1
 8003aae:	619a      	str	r2, [r3, #24]
      break;
 8003ab0:	e048      	b.n	8003b44 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	68ba      	ldr	r2, [r7, #8]
 8003ab8:	0011      	movs	r1, r2
 8003aba:	0018      	movs	r0, r3
 8003abc:	f000 fb82 	bl	80041c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	69da      	ldr	r2, [r3, #28]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2108      	movs	r1, #8
 8003acc:	430a      	orrs	r2, r1
 8003ace:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	69da      	ldr	r2, [r3, #28]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2104      	movs	r1, #4
 8003adc:	438a      	bics	r2, r1
 8003ade:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	69d9      	ldr	r1, [r3, #28]
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	691a      	ldr	r2, [r3, #16]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	430a      	orrs	r2, r1
 8003af0:	61da      	str	r2, [r3, #28]
      break;
 8003af2:	e027      	b.n	8003b44 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68ba      	ldr	r2, [r7, #8]
 8003afa:	0011      	movs	r1, r2
 8003afc:	0018      	movs	r0, r3
 8003afe:	f000 fbe1 	bl	80042c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	69da      	ldr	r2, [r3, #28]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2180      	movs	r1, #128	; 0x80
 8003b0e:	0109      	lsls	r1, r1, #4
 8003b10:	430a      	orrs	r2, r1
 8003b12:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	69da      	ldr	r2, [r3, #28]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	490f      	ldr	r1, [pc, #60]	; (8003b5c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003b20:	400a      	ands	r2, r1
 8003b22:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	69d9      	ldr	r1, [r3, #28]
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	021a      	lsls	r2, r3, #8
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	430a      	orrs	r2, r1
 8003b36:	61da      	str	r2, [r3, #28]
      break;
 8003b38:	e004      	b.n	8003b44 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8003b3a:	2317      	movs	r3, #23
 8003b3c:	18fb      	adds	r3, r7, r3
 8003b3e:	2201      	movs	r2, #1
 8003b40:	701a      	strb	r2, [r3, #0]
      break;
 8003b42:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	223c      	movs	r2, #60	; 0x3c
 8003b48:	2100      	movs	r1, #0
 8003b4a:	5499      	strb	r1, [r3, r2]

  return status;
 8003b4c:	2317      	movs	r3, #23
 8003b4e:	18fb      	adds	r3, r7, r3
 8003b50:	781b      	ldrb	r3, [r3, #0]
}
 8003b52:	0018      	movs	r0, r3
 8003b54:	46bd      	mov	sp, r7
 8003b56:	b006      	add	sp, #24
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	46c0      	nop			; (mov r8, r8)
 8003b5c:	fffffbff 	.word	0xfffffbff

08003b60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b6a:	230f      	movs	r3, #15
 8003b6c:	18fb      	adds	r3, r7, r3
 8003b6e:	2200      	movs	r2, #0
 8003b70:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	223c      	movs	r2, #60	; 0x3c
 8003b76:	5c9b      	ldrb	r3, [r3, r2]
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d101      	bne.n	8003b80 <HAL_TIM_ConfigClockSource+0x20>
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	e0bc      	b.n	8003cfa <HAL_TIM_ConfigClockSource+0x19a>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	223c      	movs	r2, #60	; 0x3c
 8003b84:	2101      	movs	r1, #1
 8003b86:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	223d      	movs	r2, #61	; 0x3d
 8003b8c:	2102      	movs	r1, #2
 8003b8e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	2277      	movs	r2, #119	; 0x77
 8003b9c:	4393      	bics	r3, r2
 8003b9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	4a58      	ldr	r2, [pc, #352]	; (8003d04 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68ba      	ldr	r2, [r7, #8]
 8003bae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2280      	movs	r2, #128	; 0x80
 8003bb6:	0192      	lsls	r2, r2, #6
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d040      	beq.n	8003c3e <HAL_TIM_ConfigClockSource+0xde>
 8003bbc:	2280      	movs	r2, #128	; 0x80
 8003bbe:	0192      	lsls	r2, r2, #6
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d900      	bls.n	8003bc6 <HAL_TIM_ConfigClockSource+0x66>
 8003bc4:	e088      	b.n	8003cd8 <HAL_TIM_ConfigClockSource+0x178>
 8003bc6:	2280      	movs	r2, #128	; 0x80
 8003bc8:	0152      	lsls	r2, r2, #5
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d100      	bne.n	8003bd0 <HAL_TIM_ConfigClockSource+0x70>
 8003bce:	e088      	b.n	8003ce2 <HAL_TIM_ConfigClockSource+0x182>
 8003bd0:	2280      	movs	r2, #128	; 0x80
 8003bd2:	0152      	lsls	r2, r2, #5
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d900      	bls.n	8003bda <HAL_TIM_ConfigClockSource+0x7a>
 8003bd8:	e07e      	b.n	8003cd8 <HAL_TIM_ConfigClockSource+0x178>
 8003bda:	2b70      	cmp	r3, #112	; 0x70
 8003bdc:	d018      	beq.n	8003c10 <HAL_TIM_ConfigClockSource+0xb0>
 8003bde:	d900      	bls.n	8003be2 <HAL_TIM_ConfigClockSource+0x82>
 8003be0:	e07a      	b.n	8003cd8 <HAL_TIM_ConfigClockSource+0x178>
 8003be2:	2b60      	cmp	r3, #96	; 0x60
 8003be4:	d04f      	beq.n	8003c86 <HAL_TIM_ConfigClockSource+0x126>
 8003be6:	d900      	bls.n	8003bea <HAL_TIM_ConfigClockSource+0x8a>
 8003be8:	e076      	b.n	8003cd8 <HAL_TIM_ConfigClockSource+0x178>
 8003bea:	2b50      	cmp	r3, #80	; 0x50
 8003bec:	d03b      	beq.n	8003c66 <HAL_TIM_ConfigClockSource+0x106>
 8003bee:	d900      	bls.n	8003bf2 <HAL_TIM_ConfigClockSource+0x92>
 8003bf0:	e072      	b.n	8003cd8 <HAL_TIM_ConfigClockSource+0x178>
 8003bf2:	2b40      	cmp	r3, #64	; 0x40
 8003bf4:	d057      	beq.n	8003ca6 <HAL_TIM_ConfigClockSource+0x146>
 8003bf6:	d900      	bls.n	8003bfa <HAL_TIM_ConfigClockSource+0x9a>
 8003bf8:	e06e      	b.n	8003cd8 <HAL_TIM_ConfigClockSource+0x178>
 8003bfa:	2b30      	cmp	r3, #48	; 0x30
 8003bfc:	d063      	beq.n	8003cc6 <HAL_TIM_ConfigClockSource+0x166>
 8003bfe:	d86b      	bhi.n	8003cd8 <HAL_TIM_ConfigClockSource+0x178>
 8003c00:	2b20      	cmp	r3, #32
 8003c02:	d060      	beq.n	8003cc6 <HAL_TIM_ConfigClockSource+0x166>
 8003c04:	d868      	bhi.n	8003cd8 <HAL_TIM_ConfigClockSource+0x178>
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d05d      	beq.n	8003cc6 <HAL_TIM_ConfigClockSource+0x166>
 8003c0a:	2b10      	cmp	r3, #16
 8003c0c:	d05b      	beq.n	8003cc6 <HAL_TIM_ConfigClockSource+0x166>
 8003c0e:	e063      	b.n	8003cd8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6818      	ldr	r0, [r3, #0]
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	6899      	ldr	r1, [r3, #8]
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685a      	ldr	r2, [r3, #4]
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	f000 fc2e 	bl	8004480 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	2277      	movs	r2, #119	; 0x77
 8003c30:	4313      	orrs	r3, r2
 8003c32:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68ba      	ldr	r2, [r7, #8]
 8003c3a:	609a      	str	r2, [r3, #8]
      break;
 8003c3c:	e052      	b.n	8003ce4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6818      	ldr	r0, [r3, #0]
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	6899      	ldr	r1, [r3, #8]
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	685a      	ldr	r2, [r3, #4]
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	f000 fc17 	bl	8004480 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	689a      	ldr	r2, [r3, #8]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2180      	movs	r1, #128	; 0x80
 8003c5e:	01c9      	lsls	r1, r1, #7
 8003c60:	430a      	orrs	r2, r1
 8003c62:	609a      	str	r2, [r3, #8]
      break;
 8003c64:	e03e      	b.n	8003ce4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6818      	ldr	r0, [r3, #0]
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	6859      	ldr	r1, [r3, #4]
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	001a      	movs	r2, r3
 8003c74:	f000 fb8a 	bl	800438c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2150      	movs	r1, #80	; 0x50
 8003c7e:	0018      	movs	r0, r3
 8003c80:	f000 fbe4 	bl	800444c <TIM_ITRx_SetConfig>
      break;
 8003c84:	e02e      	b.n	8003ce4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6818      	ldr	r0, [r3, #0]
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	6859      	ldr	r1, [r3, #4]
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	001a      	movs	r2, r3
 8003c94:	f000 fba8 	bl	80043e8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2160      	movs	r1, #96	; 0x60
 8003c9e:	0018      	movs	r0, r3
 8003ca0:	f000 fbd4 	bl	800444c <TIM_ITRx_SetConfig>
      break;
 8003ca4:	e01e      	b.n	8003ce4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6818      	ldr	r0, [r3, #0]
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	6859      	ldr	r1, [r3, #4]
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	001a      	movs	r2, r3
 8003cb4:	f000 fb6a 	bl	800438c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2140      	movs	r1, #64	; 0x40
 8003cbe:	0018      	movs	r0, r3
 8003cc0:	f000 fbc4 	bl	800444c <TIM_ITRx_SetConfig>
      break;
 8003cc4:	e00e      	b.n	8003ce4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	0019      	movs	r1, r3
 8003cd0:	0010      	movs	r0, r2
 8003cd2:	f000 fbbb 	bl	800444c <TIM_ITRx_SetConfig>
      break;
 8003cd6:	e005      	b.n	8003ce4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003cd8:	230f      	movs	r3, #15
 8003cda:	18fb      	adds	r3, r7, r3
 8003cdc:	2201      	movs	r2, #1
 8003cde:	701a      	strb	r2, [r3, #0]
      break;
 8003ce0:	e000      	b.n	8003ce4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003ce2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	223d      	movs	r2, #61	; 0x3d
 8003ce8:	2101      	movs	r1, #1
 8003cea:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	223c      	movs	r2, #60	; 0x3c
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	5499      	strb	r1, [r3, r2]

  return status;
 8003cf4:	230f      	movs	r3, #15
 8003cf6:	18fb      	adds	r3, r7, r3
 8003cf8:	781b      	ldrb	r3, [r3, #0]
}
 8003cfa:	0018      	movs	r0, r3
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	b004      	add	sp, #16
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	46c0      	nop			; (mov r8, r8)
 8003d04:	ffff00ff 	.word	0xffff00ff

08003d08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d10:	46c0      	nop			; (mov r8, r8)
 8003d12:	46bd      	mov	sp, r7
 8003d14:	b002      	add	sp, #8
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003d20:	46c0      	nop			; (mov r8, r8)
 8003d22:	46bd      	mov	sp, r7
 8003d24:	b002      	add	sp, #8
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003d30:	46c0      	nop			; (mov r8, r8)
 8003d32:	46bd      	mov	sp, r7
 8003d34:	b002      	add	sp, #8
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d44:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d107      	bne.n	8003d60 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2201      	movs	r2, #1
 8003d54:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	223e      	movs	r2, #62	; 0x3e
 8003d5a:	2101      	movs	r1, #1
 8003d5c:	5499      	strb	r1, [r3, r2]
 8003d5e:	e02a      	b.n	8003db6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d107      	bne.n	8003d7a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2202      	movs	r2, #2
 8003d6e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	223f      	movs	r2, #63	; 0x3f
 8003d74:	2101      	movs	r1, #1
 8003d76:	5499      	strb	r1, [r3, r2]
 8003d78:	e01d      	b.n	8003db6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d107      	bne.n	8003d94 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2204      	movs	r2, #4
 8003d88:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2240      	movs	r2, #64	; 0x40
 8003d8e:	2101      	movs	r1, #1
 8003d90:	5499      	strb	r1, [r3, r2]
 8003d92:	e010      	b.n	8003db6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d107      	bne.n	8003dae <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2208      	movs	r2, #8
 8003da2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2241      	movs	r2, #65	; 0x41
 8003da8:	2101      	movs	r1, #1
 8003daa:	5499      	strb	r1, [r3, r2]
 8003dac:	e003      	b.n	8003db6 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	223d      	movs	r2, #61	; 0x3d
 8003db2:	2101      	movs	r1, #1
 8003db4:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	0018      	movs	r0, r3
 8003dba:	f7ff ffb5 	bl	8003d28 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	771a      	strb	r2, [r3, #28]
}
 8003dc4:	46c0      	nop			; (mov r8, r8)
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	b004      	add	sp, #16
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d10b      	bne.n	8003dfc <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2201      	movs	r2, #1
 8003de8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d136      	bne.n	8003e60 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	223e      	movs	r2, #62	; 0x3e
 8003df6:	2101      	movs	r1, #1
 8003df8:	5499      	strb	r1, [r3, r2]
 8003dfa:	e031      	b.n	8003e60 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d10b      	bne.n	8003e1e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2202      	movs	r2, #2
 8003e0a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d125      	bne.n	8003e60 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	223f      	movs	r2, #63	; 0x3f
 8003e18:	2101      	movs	r1, #1
 8003e1a:	5499      	strb	r1, [r3, r2]
 8003e1c:	e020      	b.n	8003e60 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d10b      	bne.n	8003e40 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2204      	movs	r2, #4
 8003e2c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d114      	bne.n	8003e60 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2240      	movs	r2, #64	; 0x40
 8003e3a:	2101      	movs	r1, #1
 8003e3c:	5499      	strb	r1, [r3, r2]
 8003e3e:	e00f      	b.n	8003e60 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d10a      	bne.n	8003e60 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2208      	movs	r2, #8
 8003e4e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d103      	bne.n	8003e60 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2241      	movs	r2, #65	; 0x41
 8003e5c:	2101      	movs	r1, #1
 8003e5e:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	0018      	movs	r0, r3
 8003e64:	f7ff ff50 	bl	8003d08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	771a      	strb	r2, [r3, #28]
}
 8003e6e:	46c0      	nop			; (mov r8, r8)
 8003e70:	46bd      	mov	sp, r7
 8003e72:	b004      	add	sp, #16
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b084      	sub	sp, #16
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e82:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d103      	bne.n	8003e96 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2201      	movs	r2, #1
 8003e92:	771a      	strb	r2, [r3, #28]
 8003e94:	e019      	b.n	8003eca <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d103      	bne.n	8003ea8 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	771a      	strb	r2, [r3, #28]
 8003ea6:	e010      	b.n	8003eca <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d103      	bne.n	8003eba <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2204      	movs	r2, #4
 8003eb6:	771a      	strb	r2, [r3, #28]
 8003eb8:	e007      	b.n	8003eca <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d102      	bne.n	8003eca <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2208      	movs	r2, #8
 8003ec8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	0018      	movs	r0, r3
 8003ece:	f7ff ff23 	bl	8003d18 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	771a      	strb	r2, [r3, #28]
}
 8003ed8:	46c0      	nop			; (mov r8, r8)
 8003eda:	46bd      	mov	sp, r7
 8003edc:	b004      	add	sp, #16
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a30      	ldr	r2, [pc, #192]	; (8003fb4 <TIM_Base_SetConfig+0xd4>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d008      	beq.n	8003f0a <TIM_Base_SetConfig+0x2a>
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	2380      	movs	r3, #128	; 0x80
 8003efc:	05db      	lsls	r3, r3, #23
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d003      	beq.n	8003f0a <TIM_Base_SetConfig+0x2a>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a2c      	ldr	r2, [pc, #176]	; (8003fb8 <TIM_Base_SetConfig+0xd8>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d108      	bne.n	8003f1c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2270      	movs	r2, #112	; 0x70
 8003f0e:	4393      	bics	r3, r2
 8003f10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a25      	ldr	r2, [pc, #148]	; (8003fb4 <TIM_Base_SetConfig+0xd4>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d014      	beq.n	8003f4e <TIM_Base_SetConfig+0x6e>
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	2380      	movs	r3, #128	; 0x80
 8003f28:	05db      	lsls	r3, r3, #23
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d00f      	beq.n	8003f4e <TIM_Base_SetConfig+0x6e>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a21      	ldr	r2, [pc, #132]	; (8003fb8 <TIM_Base_SetConfig+0xd8>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d00b      	beq.n	8003f4e <TIM_Base_SetConfig+0x6e>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a20      	ldr	r2, [pc, #128]	; (8003fbc <TIM_Base_SetConfig+0xdc>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d007      	beq.n	8003f4e <TIM_Base_SetConfig+0x6e>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a1f      	ldr	r2, [pc, #124]	; (8003fc0 <TIM_Base_SetConfig+0xe0>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d003      	beq.n	8003f4e <TIM_Base_SetConfig+0x6e>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a1e      	ldr	r2, [pc, #120]	; (8003fc4 <TIM_Base_SetConfig+0xe4>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d108      	bne.n	8003f60 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	4a1d      	ldr	r2, [pc, #116]	; (8003fc8 <TIM_Base_SetConfig+0xe8>)
 8003f52:	4013      	ands	r3, r2
 8003f54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2280      	movs	r2, #128	; 0x80
 8003f64:	4393      	bics	r3, r2
 8003f66:	001a      	movs	r2, r3
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	695b      	ldr	r3, [r3, #20]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	689a      	ldr	r2, [r3, #8]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a0a      	ldr	r2, [pc, #40]	; (8003fb4 <TIM_Base_SetConfig+0xd4>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d007      	beq.n	8003f9e <TIM_Base_SetConfig+0xbe>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a0b      	ldr	r2, [pc, #44]	; (8003fc0 <TIM_Base_SetConfig+0xe0>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d003      	beq.n	8003f9e <TIM_Base_SetConfig+0xbe>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a0a      	ldr	r2, [pc, #40]	; (8003fc4 <TIM_Base_SetConfig+0xe4>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d103      	bne.n	8003fa6 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	691a      	ldr	r2, [r3, #16]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	615a      	str	r2, [r3, #20]
}
 8003fac:	46c0      	nop			; (mov r8, r8)
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	b004      	add	sp, #16
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	40012c00 	.word	0x40012c00
 8003fb8:	40000400 	.word	0x40000400
 8003fbc:	40002000 	.word	0x40002000
 8003fc0:	40014400 	.word	0x40014400
 8003fc4:	40014800 	.word	0x40014800
 8003fc8:	fffffcff 	.word	0xfffffcff

08003fcc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	4393      	bics	r3, r2
 8003fde:	001a      	movs	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a1b      	ldr	r3, [r3, #32]
 8003fe8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2270      	movs	r2, #112	; 0x70
 8003ffa:	4393      	bics	r3, r2
 8003ffc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2203      	movs	r2, #3
 8004002:	4393      	bics	r3, r2
 8004004:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	4313      	orrs	r3, r2
 800400e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	2202      	movs	r2, #2
 8004014:	4393      	bics	r3, r2
 8004016:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	697a      	ldr	r2, [r7, #20]
 800401e:	4313      	orrs	r3, r2
 8004020:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a23      	ldr	r2, [pc, #140]	; (80040b4 <TIM_OC1_SetConfig+0xe8>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d007      	beq.n	800403a <TIM_OC1_SetConfig+0x6e>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a22      	ldr	r2, [pc, #136]	; (80040b8 <TIM_OC1_SetConfig+0xec>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d003      	beq.n	800403a <TIM_OC1_SetConfig+0x6e>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a21      	ldr	r2, [pc, #132]	; (80040bc <TIM_OC1_SetConfig+0xf0>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d10c      	bne.n	8004054 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	2208      	movs	r2, #8
 800403e:	4393      	bics	r3, r2
 8004040:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	4313      	orrs	r3, r2
 800404a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	2204      	movs	r2, #4
 8004050:	4393      	bics	r3, r2
 8004052:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a17      	ldr	r2, [pc, #92]	; (80040b4 <TIM_OC1_SetConfig+0xe8>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d007      	beq.n	800406c <TIM_OC1_SetConfig+0xa0>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a16      	ldr	r2, [pc, #88]	; (80040b8 <TIM_OC1_SetConfig+0xec>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d003      	beq.n	800406c <TIM_OC1_SetConfig+0xa0>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a15      	ldr	r2, [pc, #84]	; (80040bc <TIM_OC1_SetConfig+0xf0>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d111      	bne.n	8004090 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	4a14      	ldr	r2, [pc, #80]	; (80040c0 <TIM_OC1_SetConfig+0xf4>)
 8004070:	4013      	ands	r3, r2
 8004072:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	4a13      	ldr	r2, [pc, #76]	; (80040c4 <TIM_OC1_SetConfig+0xf8>)
 8004078:	4013      	ands	r3, r2
 800407a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	695b      	ldr	r3, [r3, #20]
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	4313      	orrs	r3, r2
 8004084:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	4313      	orrs	r3, r2
 800408e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	685a      	ldr	r2, [r3, #4]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	621a      	str	r2, [r3, #32]
}
 80040aa:	46c0      	nop			; (mov r8, r8)
 80040ac:	46bd      	mov	sp, r7
 80040ae:	b006      	add	sp, #24
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	46c0      	nop			; (mov r8, r8)
 80040b4:	40012c00 	.word	0x40012c00
 80040b8:	40014400 	.word	0x40014400
 80040bc:	40014800 	.word	0x40014800
 80040c0:	fffffeff 	.word	0xfffffeff
 80040c4:	fffffdff 	.word	0xfffffdff

080040c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b086      	sub	sp, #24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	2210      	movs	r2, #16
 80040d8:	4393      	bics	r3, r2
 80040da:	001a      	movs	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a1b      	ldr	r3, [r3, #32]
 80040e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	4a2c      	ldr	r2, [pc, #176]	; (80041a8 <TIM_OC2_SetConfig+0xe0>)
 80040f6:	4013      	ands	r3, r2
 80040f8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	4a2b      	ldr	r2, [pc, #172]	; (80041ac <TIM_OC2_SetConfig+0xe4>)
 80040fe:	4013      	ands	r3, r2
 8004100:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	021b      	lsls	r3, r3, #8
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	4313      	orrs	r3, r2
 800410c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	2220      	movs	r2, #32
 8004112:	4393      	bics	r3, r2
 8004114:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	011b      	lsls	r3, r3, #4
 800411c:	697a      	ldr	r2, [r7, #20]
 800411e:	4313      	orrs	r3, r2
 8004120:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a22      	ldr	r2, [pc, #136]	; (80041b0 <TIM_OC2_SetConfig+0xe8>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d10d      	bne.n	8004146 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	2280      	movs	r2, #128	; 0x80
 800412e:	4393      	bics	r3, r2
 8004130:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	011b      	lsls	r3, r3, #4
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	4313      	orrs	r3, r2
 800413c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	2240      	movs	r2, #64	; 0x40
 8004142:	4393      	bics	r3, r2
 8004144:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a19      	ldr	r2, [pc, #100]	; (80041b0 <TIM_OC2_SetConfig+0xe8>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d007      	beq.n	800415e <TIM_OC2_SetConfig+0x96>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a18      	ldr	r2, [pc, #96]	; (80041b4 <TIM_OC2_SetConfig+0xec>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d003      	beq.n	800415e <TIM_OC2_SetConfig+0x96>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a17      	ldr	r2, [pc, #92]	; (80041b8 <TIM_OC2_SetConfig+0xf0>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d113      	bne.n	8004186 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	4a16      	ldr	r2, [pc, #88]	; (80041bc <TIM_OC2_SetConfig+0xf4>)
 8004162:	4013      	ands	r3, r2
 8004164:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	4a15      	ldr	r2, [pc, #84]	; (80041c0 <TIM_OC2_SetConfig+0xf8>)
 800416a:	4013      	ands	r3, r2
 800416c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	4313      	orrs	r3, r2
 8004178:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	4313      	orrs	r3, r2
 8004184:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	685a      	ldr	r2, [r3, #4]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	697a      	ldr	r2, [r7, #20]
 800419e:	621a      	str	r2, [r3, #32]
}
 80041a0:	46c0      	nop			; (mov r8, r8)
 80041a2:	46bd      	mov	sp, r7
 80041a4:	b006      	add	sp, #24
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	ffff8fff 	.word	0xffff8fff
 80041ac:	fffffcff 	.word	0xfffffcff
 80041b0:	40012c00 	.word	0x40012c00
 80041b4:	40014400 	.word	0x40014400
 80041b8:	40014800 	.word	0x40014800
 80041bc:	fffffbff 	.word	0xfffffbff
 80041c0:	fffff7ff 	.word	0xfffff7ff

080041c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	4a33      	ldr	r2, [pc, #204]	; (80042a0 <TIM_OC3_SetConfig+0xdc>)
 80041d4:	401a      	ands	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	69db      	ldr	r3, [r3, #28]
 80041ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2270      	movs	r2, #112	; 0x70
 80041f0:	4393      	bics	r3, r2
 80041f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2203      	movs	r2, #3
 80041f8:	4393      	bics	r3, r2
 80041fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	4313      	orrs	r3, r2
 8004204:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	4a26      	ldr	r2, [pc, #152]	; (80042a4 <TIM_OC3_SetConfig+0xe0>)
 800420a:	4013      	ands	r3, r2
 800420c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	021b      	lsls	r3, r3, #8
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	4313      	orrs	r3, r2
 8004218:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a22      	ldr	r2, [pc, #136]	; (80042a8 <TIM_OC3_SetConfig+0xe4>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d10d      	bne.n	800423e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	4a21      	ldr	r2, [pc, #132]	; (80042ac <TIM_OC3_SetConfig+0xe8>)
 8004226:	4013      	ands	r3, r2
 8004228:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	021b      	lsls	r3, r3, #8
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	4313      	orrs	r3, r2
 8004234:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	4a1d      	ldr	r2, [pc, #116]	; (80042b0 <TIM_OC3_SetConfig+0xec>)
 800423a:	4013      	ands	r3, r2
 800423c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a19      	ldr	r2, [pc, #100]	; (80042a8 <TIM_OC3_SetConfig+0xe4>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d007      	beq.n	8004256 <TIM_OC3_SetConfig+0x92>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a1a      	ldr	r2, [pc, #104]	; (80042b4 <TIM_OC3_SetConfig+0xf0>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d003      	beq.n	8004256 <TIM_OC3_SetConfig+0x92>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a19      	ldr	r2, [pc, #100]	; (80042b8 <TIM_OC3_SetConfig+0xf4>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d113      	bne.n	800427e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	4a18      	ldr	r2, [pc, #96]	; (80042bc <TIM_OC3_SetConfig+0xf8>)
 800425a:	4013      	ands	r3, r2
 800425c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	4a17      	ldr	r2, [pc, #92]	; (80042c0 <TIM_OC3_SetConfig+0xfc>)
 8004262:	4013      	ands	r3, r2
 8004264:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	011b      	lsls	r3, r3, #4
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	4313      	orrs	r3, r2
 8004270:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	011b      	lsls	r3, r3, #4
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	4313      	orrs	r3, r2
 800427c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	693a      	ldr	r2, [r7, #16]
 8004282:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	685a      	ldr	r2, [r3, #4]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	697a      	ldr	r2, [r7, #20]
 8004296:	621a      	str	r2, [r3, #32]
}
 8004298:	46c0      	nop			; (mov r8, r8)
 800429a:	46bd      	mov	sp, r7
 800429c:	b006      	add	sp, #24
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	fffffeff 	.word	0xfffffeff
 80042a4:	fffffdff 	.word	0xfffffdff
 80042a8:	40012c00 	.word	0x40012c00
 80042ac:	fffff7ff 	.word	0xfffff7ff
 80042b0:	fffffbff 	.word	0xfffffbff
 80042b4:	40014400 	.word	0x40014400
 80042b8:	40014800 	.word	0x40014800
 80042bc:	ffffefff 	.word	0xffffefff
 80042c0:	ffffdfff 	.word	0xffffdfff

080042c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a1b      	ldr	r3, [r3, #32]
 80042d2:	4a26      	ldr	r2, [pc, #152]	; (800436c <TIM_OC4_SetConfig+0xa8>)
 80042d4:	401a      	ands	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a1b      	ldr	r3, [r3, #32]
 80042de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	4a20      	ldr	r2, [pc, #128]	; (8004370 <TIM_OC4_SetConfig+0xac>)
 80042f0:	4013      	ands	r3, r2
 80042f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	4a1f      	ldr	r2, [pc, #124]	; (8004374 <TIM_OC4_SetConfig+0xb0>)
 80042f8:	4013      	ands	r3, r2
 80042fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	021b      	lsls	r3, r3, #8
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	4313      	orrs	r3, r2
 8004306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	4a1b      	ldr	r2, [pc, #108]	; (8004378 <TIM_OC4_SetConfig+0xb4>)
 800430c:	4013      	ands	r3, r2
 800430e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	031b      	lsls	r3, r3, #12
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	4313      	orrs	r3, r2
 800431a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a17      	ldr	r2, [pc, #92]	; (800437c <TIM_OC4_SetConfig+0xb8>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d007      	beq.n	8004334 <TIM_OC4_SetConfig+0x70>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	4a16      	ldr	r2, [pc, #88]	; (8004380 <TIM_OC4_SetConfig+0xbc>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d003      	beq.n	8004334 <TIM_OC4_SetConfig+0x70>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a15      	ldr	r2, [pc, #84]	; (8004384 <TIM_OC4_SetConfig+0xc0>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d109      	bne.n	8004348 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	4a14      	ldr	r2, [pc, #80]	; (8004388 <TIM_OC4_SetConfig+0xc4>)
 8004338:	4013      	ands	r3, r2
 800433a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	695b      	ldr	r3, [r3, #20]
 8004340:	019b      	lsls	r3, r3, #6
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	4313      	orrs	r3, r2
 8004346:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685a      	ldr	r2, [r3, #4]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	621a      	str	r2, [r3, #32]
}
 8004362:	46c0      	nop			; (mov r8, r8)
 8004364:	46bd      	mov	sp, r7
 8004366:	b006      	add	sp, #24
 8004368:	bd80      	pop	{r7, pc}
 800436a:	46c0      	nop			; (mov r8, r8)
 800436c:	ffffefff 	.word	0xffffefff
 8004370:	ffff8fff 	.word	0xffff8fff
 8004374:	fffffcff 	.word	0xfffffcff
 8004378:	ffffdfff 	.word	0xffffdfff
 800437c:	40012c00 	.word	0x40012c00
 8004380:	40014400 	.word	0x40014400
 8004384:	40014800 	.word	0x40014800
 8004388:	ffffbfff 	.word	0xffffbfff

0800438c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b086      	sub	sp, #24
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6a1b      	ldr	r3, [r3, #32]
 800439c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	2201      	movs	r2, #1
 80043a4:	4393      	bics	r3, r2
 80043a6:	001a      	movs	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	22f0      	movs	r2, #240	; 0xf0
 80043b6:	4393      	bics	r3, r2
 80043b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	011b      	lsls	r3, r3, #4
 80043be:	693a      	ldr	r2, [r7, #16]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	220a      	movs	r2, #10
 80043c8:	4393      	bics	r3, r2
 80043ca:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	693a      	ldr	r2, [r7, #16]
 80043d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	621a      	str	r2, [r3, #32]
}
 80043e0:	46c0      	nop			; (mov r8, r8)
 80043e2:	46bd      	mov	sp, r7
 80043e4:	b006      	add	sp, #24
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b086      	sub	sp, #24
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6a1b      	ldr	r3, [r3, #32]
 80043f8:	2210      	movs	r2, #16
 80043fa:	4393      	bics	r3, r2
 80043fc:	001a      	movs	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6a1b      	ldr	r3, [r3, #32]
 800440c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	4a0d      	ldr	r2, [pc, #52]	; (8004448 <TIM_TI2_ConfigInputStage+0x60>)
 8004412:	4013      	ands	r3, r2
 8004414:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	031b      	lsls	r3, r3, #12
 800441a:	697a      	ldr	r2, [r7, #20]
 800441c:	4313      	orrs	r3, r2
 800441e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	22a0      	movs	r2, #160	; 0xa0
 8004424:	4393      	bics	r3, r2
 8004426:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	011b      	lsls	r3, r3, #4
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	4313      	orrs	r3, r2
 8004430:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	693a      	ldr	r2, [r7, #16]
 800443c:	621a      	str	r2, [r3, #32]
}
 800443e:	46c0      	nop			; (mov r8, r8)
 8004440:	46bd      	mov	sp, r7
 8004442:	b006      	add	sp, #24
 8004444:	bd80      	pop	{r7, pc}
 8004446:	46c0      	nop			; (mov r8, r8)
 8004448:	ffff0fff 	.word	0xffff0fff

0800444c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2270      	movs	r2, #112	; 0x70
 8004460:	4393      	bics	r3, r2
 8004462:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004464:	683a      	ldr	r2, [r7, #0]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	4313      	orrs	r3, r2
 800446a:	2207      	movs	r2, #7
 800446c:	4313      	orrs	r3, r2
 800446e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	609a      	str	r2, [r3, #8]
}
 8004476:	46c0      	nop			; (mov r8, r8)
 8004478:	46bd      	mov	sp, r7
 800447a:	b004      	add	sp, #16
 800447c:	bd80      	pop	{r7, pc}
	...

08004480 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b086      	sub	sp, #24
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]
 800448c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	4a09      	ldr	r2, [pc, #36]	; (80044bc <TIM_ETR_SetConfig+0x3c>)
 8004498:	4013      	ands	r3, r2
 800449a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	021a      	lsls	r2, r3, #8
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	431a      	orrs	r2, r3
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	697a      	ldr	r2, [r7, #20]
 80044b2:	609a      	str	r2, [r3, #8]
}
 80044b4:	46c0      	nop			; (mov r8, r8)
 80044b6:	46bd      	mov	sp, r7
 80044b8:	b006      	add	sp, #24
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	ffff00ff 	.word	0xffff00ff

080044c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	221f      	movs	r2, #31
 80044d0:	4013      	ands	r3, r2
 80044d2:	2201      	movs	r2, #1
 80044d4:	409a      	lsls	r2, r3
 80044d6:	0013      	movs	r3, r2
 80044d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	43d2      	mvns	r2, r2
 80044e2:	401a      	ands	r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6a1a      	ldr	r2, [r3, #32]
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	211f      	movs	r1, #31
 80044f0:	400b      	ands	r3, r1
 80044f2:	6879      	ldr	r1, [r7, #4]
 80044f4:	4099      	lsls	r1, r3
 80044f6:	000b      	movs	r3, r1
 80044f8:	431a      	orrs	r2, r3
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	621a      	str	r2, [r3, #32]
}
 80044fe:	46c0      	nop			; (mov r8, r8)
 8004500:	46bd      	mov	sp, r7
 8004502:	b006      	add	sp, #24
 8004504:	bd80      	pop	{r7, pc}
	...

08004508 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	223c      	movs	r2, #60	; 0x3c
 8004516:	5c9b      	ldrb	r3, [r3, r2]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d101      	bne.n	8004520 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800451c:	2302      	movs	r3, #2
 800451e:	e042      	b.n	80045a6 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	223c      	movs	r2, #60	; 0x3c
 8004524:	2101      	movs	r1, #1
 8004526:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	223d      	movs	r2, #61	; 0x3d
 800452c:	2102      	movs	r1, #2
 800452e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2270      	movs	r2, #112	; 0x70
 8004544:	4393      	bics	r3, r2
 8004546:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68fa      	ldr	r2, [r7, #12]
 800454e:	4313      	orrs	r3, r2
 8004550:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a14      	ldr	r2, [pc, #80]	; (80045b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d00a      	beq.n	800457a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	2380      	movs	r3, #128	; 0x80
 800456a:	05db      	lsls	r3, r3, #23
 800456c:	429a      	cmp	r2, r3
 800456e:	d004      	beq.n	800457a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a0f      	ldr	r2, [pc, #60]	; (80045b4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d10c      	bne.n	8004594 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	2280      	movs	r2, #128	; 0x80
 800457e:	4393      	bics	r3, r2
 8004580:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	68ba      	ldr	r2, [r7, #8]
 8004588:	4313      	orrs	r3, r2
 800458a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68ba      	ldr	r2, [r7, #8]
 8004592:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	223d      	movs	r2, #61	; 0x3d
 8004598:	2101      	movs	r1, #1
 800459a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	223c      	movs	r2, #60	; 0x3c
 80045a0:	2100      	movs	r1, #0
 80045a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	0018      	movs	r0, r3
 80045a8:	46bd      	mov	sp, r7
 80045aa:	b004      	add	sp, #16
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	46c0      	nop			; (mov r8, r8)
 80045b0:	40012c00 	.word	0x40012c00
 80045b4:	40000400 	.word	0x40000400

080045b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d101      	bne.n	80045ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e044      	b.n	8004654 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d107      	bne.n	80045e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2278      	movs	r2, #120	; 0x78
 80045d6:	2100      	movs	r1, #0
 80045d8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	0018      	movs	r0, r3
 80045de:	f7fc ffd3 	bl	8001588 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2224      	movs	r2, #36	; 0x24
 80045e6:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2101      	movs	r1, #1
 80045f4:	438a      	bics	r2, r1
 80045f6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	0018      	movs	r0, r3
 80045fc:	f000 fb7c 	bl	8004cf8 <UART_SetConfig>
 8004600:	0003      	movs	r3, r0
 8004602:	2b01      	cmp	r3, #1
 8004604:	d101      	bne.n	800460a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e024      	b.n	8004654 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460e:	2b00      	cmp	r3, #0
 8004610:	d003      	beq.n	800461a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	0018      	movs	r0, r3
 8004616:	f000 fcaf 	bl	8004f78 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	685a      	ldr	r2, [r3, #4]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	490d      	ldr	r1, [pc, #52]	; (800465c <HAL_UART_Init+0xa4>)
 8004626:	400a      	ands	r2, r1
 8004628:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	689a      	ldr	r2, [r3, #8]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	212a      	movs	r1, #42	; 0x2a
 8004636:	438a      	bics	r2, r1
 8004638:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2101      	movs	r1, #1
 8004646:	430a      	orrs	r2, r1
 8004648:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	0018      	movs	r0, r3
 800464e:	f000 fd47 	bl	80050e0 <UART_CheckIdleState>
 8004652:	0003      	movs	r3, r0
}
 8004654:	0018      	movs	r0, r3
 8004656:	46bd      	mov	sp, r7
 8004658:	b002      	add	sp, #8
 800465a:	bd80      	pop	{r7, pc}
 800465c:	ffffb7ff 	.word	0xffffb7ff

08004660 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b088      	sub	sp, #32
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	1dbb      	adds	r3, r7, #6
 800466c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2280      	movs	r2, #128	; 0x80
 8004672:	589b      	ldr	r3, [r3, r2]
 8004674:	2b20      	cmp	r3, #32
 8004676:	d145      	bne.n	8004704 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d003      	beq.n	8004686 <HAL_UART_Receive_IT+0x26>
 800467e:	1dbb      	adds	r3, r7, #6
 8004680:	881b      	ldrh	r3, [r3, #0]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d101      	bne.n	800468a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e03d      	b.n	8004706 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	689a      	ldr	r2, [r3, #8]
 800468e:	2380      	movs	r3, #128	; 0x80
 8004690:	015b      	lsls	r3, r3, #5
 8004692:	429a      	cmp	r2, r3
 8004694:	d109      	bne.n	80046aa <HAL_UART_Receive_IT+0x4a>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d105      	bne.n	80046aa <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	2201      	movs	r2, #1
 80046a2:	4013      	ands	r3, r2
 80046a4:	d001      	beq.n	80046aa <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e02d      	b.n	8004706 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	685a      	ldr	r2, [r3, #4]
 80046b6:	2380      	movs	r3, #128	; 0x80
 80046b8:	041b      	lsls	r3, r3, #16
 80046ba:	4013      	ands	r3, r2
 80046bc:	d019      	beq.n	80046f2 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046be:	f3ef 8310 	mrs	r3, PRIMASK
 80046c2:	613b      	str	r3, [r7, #16]
  return(result);
 80046c4:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80046c6:	61fb      	str	r3, [r7, #28]
 80046c8:	2301      	movs	r3, #1
 80046ca:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	f383 8810 	msr	PRIMASK, r3
}
 80046d2:	46c0      	nop			; (mov r8, r8)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2180      	movs	r1, #128	; 0x80
 80046e0:	04c9      	lsls	r1, r1, #19
 80046e2:	430a      	orrs	r2, r1
 80046e4:	601a      	str	r2, [r3, #0]
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	f383 8810 	msr	PRIMASK, r3
}
 80046f0:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80046f2:	1dbb      	adds	r3, r7, #6
 80046f4:	881a      	ldrh	r2, [r3, #0]
 80046f6:	68b9      	ldr	r1, [r7, #8]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	0018      	movs	r0, r3
 80046fc:	f000 fe02 	bl	8005304 <UART_Start_Receive_IT>
 8004700:	0003      	movs	r3, r0
 8004702:	e000      	b.n	8004706 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8004704:	2302      	movs	r3, #2
  }
}
 8004706:	0018      	movs	r0, r3
 8004708:	46bd      	mov	sp, r7
 800470a:	b008      	add	sp, #32
 800470c:	bd80      	pop	{r7, pc}
	...

08004710 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004710:	b590      	push	{r4, r7, lr}
 8004712:	b0ab      	sub	sp, #172	; 0xac
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	69db      	ldr	r3, [r3, #28]
 800471e:	22a4      	movs	r2, #164	; 0xa4
 8004720:	18b9      	adds	r1, r7, r2
 8004722:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	20a0      	movs	r0, #160	; 0xa0
 800472c:	1839      	adds	r1, r7, r0
 800472e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	219c      	movs	r1, #156	; 0x9c
 8004738:	1879      	adds	r1, r7, r1
 800473a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800473c:	0011      	movs	r1, r2
 800473e:	18bb      	adds	r3, r7, r2
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a99      	ldr	r2, [pc, #612]	; (80049a8 <HAL_UART_IRQHandler+0x298>)
 8004744:	4013      	ands	r3, r2
 8004746:	2298      	movs	r2, #152	; 0x98
 8004748:	18bc      	adds	r4, r7, r2
 800474a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800474c:	18bb      	adds	r3, r7, r2
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d114      	bne.n	800477e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004754:	187b      	adds	r3, r7, r1
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2220      	movs	r2, #32
 800475a:	4013      	ands	r3, r2
 800475c:	d00f      	beq.n	800477e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800475e:	183b      	adds	r3, r7, r0
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2220      	movs	r2, #32
 8004764:	4013      	ands	r3, r2
 8004766:	d00a      	beq.n	800477e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800476c:	2b00      	cmp	r3, #0
 800476e:	d100      	bne.n	8004772 <HAL_UART_IRQHandler+0x62>
 8004770:	e29e      	b.n	8004cb0 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	0010      	movs	r0, r2
 800477a:	4798      	blx	r3
      }
      return;
 800477c:	e298      	b.n	8004cb0 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800477e:	2398      	movs	r3, #152	; 0x98
 8004780:	18fb      	adds	r3, r7, r3
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d100      	bne.n	800478a <HAL_UART_IRQHandler+0x7a>
 8004788:	e114      	b.n	80049b4 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800478a:	239c      	movs	r3, #156	; 0x9c
 800478c:	18fb      	adds	r3, r7, r3
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2201      	movs	r2, #1
 8004792:	4013      	ands	r3, r2
 8004794:	d106      	bne.n	80047a4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004796:	23a0      	movs	r3, #160	; 0xa0
 8004798:	18fb      	adds	r3, r7, r3
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a83      	ldr	r2, [pc, #524]	; (80049ac <HAL_UART_IRQHandler+0x29c>)
 800479e:	4013      	ands	r3, r2
 80047a0:	d100      	bne.n	80047a4 <HAL_UART_IRQHandler+0x94>
 80047a2:	e107      	b.n	80049b4 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80047a4:	23a4      	movs	r3, #164	; 0xa4
 80047a6:	18fb      	adds	r3, r7, r3
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2201      	movs	r2, #1
 80047ac:	4013      	ands	r3, r2
 80047ae:	d012      	beq.n	80047d6 <HAL_UART_IRQHandler+0xc6>
 80047b0:	23a0      	movs	r3, #160	; 0xa0
 80047b2:	18fb      	adds	r3, r7, r3
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	2380      	movs	r3, #128	; 0x80
 80047b8:	005b      	lsls	r3, r3, #1
 80047ba:	4013      	ands	r3, r2
 80047bc:	d00b      	beq.n	80047d6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2201      	movs	r2, #1
 80047c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2284      	movs	r2, #132	; 0x84
 80047ca:	589b      	ldr	r3, [r3, r2]
 80047cc:	2201      	movs	r2, #1
 80047ce:	431a      	orrs	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2184      	movs	r1, #132	; 0x84
 80047d4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80047d6:	23a4      	movs	r3, #164	; 0xa4
 80047d8:	18fb      	adds	r3, r7, r3
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2202      	movs	r2, #2
 80047de:	4013      	ands	r3, r2
 80047e0:	d011      	beq.n	8004806 <HAL_UART_IRQHandler+0xf6>
 80047e2:	239c      	movs	r3, #156	; 0x9c
 80047e4:	18fb      	adds	r3, r7, r3
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2201      	movs	r2, #1
 80047ea:	4013      	ands	r3, r2
 80047ec:	d00b      	beq.n	8004806 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2202      	movs	r2, #2
 80047f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2284      	movs	r2, #132	; 0x84
 80047fa:	589b      	ldr	r3, [r3, r2]
 80047fc:	2204      	movs	r2, #4
 80047fe:	431a      	orrs	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2184      	movs	r1, #132	; 0x84
 8004804:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004806:	23a4      	movs	r3, #164	; 0xa4
 8004808:	18fb      	adds	r3, r7, r3
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2204      	movs	r2, #4
 800480e:	4013      	ands	r3, r2
 8004810:	d011      	beq.n	8004836 <HAL_UART_IRQHandler+0x126>
 8004812:	239c      	movs	r3, #156	; 0x9c
 8004814:	18fb      	adds	r3, r7, r3
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2201      	movs	r2, #1
 800481a:	4013      	ands	r3, r2
 800481c:	d00b      	beq.n	8004836 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2204      	movs	r2, #4
 8004824:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2284      	movs	r2, #132	; 0x84
 800482a:	589b      	ldr	r3, [r3, r2]
 800482c:	2202      	movs	r2, #2
 800482e:	431a      	orrs	r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2184      	movs	r1, #132	; 0x84
 8004834:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004836:	23a4      	movs	r3, #164	; 0xa4
 8004838:	18fb      	adds	r3, r7, r3
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2208      	movs	r2, #8
 800483e:	4013      	ands	r3, r2
 8004840:	d017      	beq.n	8004872 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004842:	23a0      	movs	r3, #160	; 0xa0
 8004844:	18fb      	adds	r3, r7, r3
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2220      	movs	r2, #32
 800484a:	4013      	ands	r3, r2
 800484c:	d105      	bne.n	800485a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800484e:	239c      	movs	r3, #156	; 0x9c
 8004850:	18fb      	adds	r3, r7, r3
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2201      	movs	r2, #1
 8004856:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004858:	d00b      	beq.n	8004872 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2208      	movs	r2, #8
 8004860:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2284      	movs	r2, #132	; 0x84
 8004866:	589b      	ldr	r3, [r3, r2]
 8004868:	2208      	movs	r2, #8
 800486a:	431a      	orrs	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2184      	movs	r1, #132	; 0x84
 8004870:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004872:	23a4      	movs	r3, #164	; 0xa4
 8004874:	18fb      	adds	r3, r7, r3
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	2380      	movs	r3, #128	; 0x80
 800487a:	011b      	lsls	r3, r3, #4
 800487c:	4013      	ands	r3, r2
 800487e:	d013      	beq.n	80048a8 <HAL_UART_IRQHandler+0x198>
 8004880:	23a0      	movs	r3, #160	; 0xa0
 8004882:	18fb      	adds	r3, r7, r3
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	2380      	movs	r3, #128	; 0x80
 8004888:	04db      	lsls	r3, r3, #19
 800488a:	4013      	ands	r3, r2
 800488c:	d00c      	beq.n	80048a8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2280      	movs	r2, #128	; 0x80
 8004894:	0112      	lsls	r2, r2, #4
 8004896:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2284      	movs	r2, #132	; 0x84
 800489c:	589b      	ldr	r3, [r3, r2]
 800489e:	2220      	movs	r2, #32
 80048a0:	431a      	orrs	r2, r3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2184      	movs	r1, #132	; 0x84
 80048a6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2284      	movs	r2, #132	; 0x84
 80048ac:	589b      	ldr	r3, [r3, r2]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d100      	bne.n	80048b4 <HAL_UART_IRQHandler+0x1a4>
 80048b2:	e1ff      	b.n	8004cb4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80048b4:	23a4      	movs	r3, #164	; 0xa4
 80048b6:	18fb      	adds	r3, r7, r3
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2220      	movs	r2, #32
 80048bc:	4013      	ands	r3, r2
 80048be:	d00e      	beq.n	80048de <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80048c0:	23a0      	movs	r3, #160	; 0xa0
 80048c2:	18fb      	adds	r3, r7, r3
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2220      	movs	r2, #32
 80048c8:	4013      	ands	r3, r2
 80048ca:	d008      	beq.n	80048de <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d004      	beq.n	80048de <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	0010      	movs	r0, r2
 80048dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2284      	movs	r2, #132	; 0x84
 80048e2:	589b      	ldr	r3, [r3, r2]
 80048e4:	2194      	movs	r1, #148	; 0x94
 80048e6:	187a      	adds	r2, r7, r1
 80048e8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	2240      	movs	r2, #64	; 0x40
 80048f2:	4013      	ands	r3, r2
 80048f4:	2b40      	cmp	r3, #64	; 0x40
 80048f6:	d004      	beq.n	8004902 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80048f8:	187b      	adds	r3, r7, r1
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2228      	movs	r2, #40	; 0x28
 80048fe:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004900:	d047      	beq.n	8004992 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	0018      	movs	r0, r3
 8004906:	f000 fdc7 	bl	8005498 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	2240      	movs	r2, #64	; 0x40
 8004912:	4013      	ands	r3, r2
 8004914:	2b40      	cmp	r3, #64	; 0x40
 8004916:	d137      	bne.n	8004988 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004918:	f3ef 8310 	mrs	r3, PRIMASK
 800491c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800491e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004920:	2090      	movs	r0, #144	; 0x90
 8004922:	183a      	adds	r2, r7, r0
 8004924:	6013      	str	r3, [r2, #0]
 8004926:	2301      	movs	r3, #1
 8004928:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800492a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800492c:	f383 8810 	msr	PRIMASK, r3
}
 8004930:	46c0      	nop			; (mov r8, r8)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	689a      	ldr	r2, [r3, #8]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2140      	movs	r1, #64	; 0x40
 800493e:	438a      	bics	r2, r1
 8004940:	609a      	str	r2, [r3, #8]
 8004942:	183b      	adds	r3, r7, r0
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004948:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800494a:	f383 8810 	msr	PRIMASK, r3
}
 800494e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004954:	2b00      	cmp	r3, #0
 8004956:	d012      	beq.n	800497e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800495c:	4a14      	ldr	r2, [pc, #80]	; (80049b0 <HAL_UART_IRQHandler+0x2a0>)
 800495e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004964:	0018      	movs	r0, r3
 8004966:	f7fd fd6b 	bl	8002440 <HAL_DMA_Abort_IT>
 800496a:	1e03      	subs	r3, r0, #0
 800496c:	d01a      	beq.n	80049a4 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004972:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004978:	0018      	movs	r0, r3
 800497a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800497c:	e012      	b.n	80049a4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	0018      	movs	r0, r3
 8004982:	f7fc fcc1 	bl	8001308 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004986:	e00d      	b.n	80049a4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	0018      	movs	r0, r3
 800498c:	f7fc fcbc 	bl	8001308 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004990:	e008      	b.n	80049a4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	0018      	movs	r0, r3
 8004996:	f7fc fcb7 	bl	8001308 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2284      	movs	r2, #132	; 0x84
 800499e:	2100      	movs	r1, #0
 80049a0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80049a2:	e187      	b.n	8004cb4 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049a4:	46c0      	nop			; (mov r8, r8)
    return;
 80049a6:	e185      	b.n	8004cb4 <HAL_UART_IRQHandler+0x5a4>
 80049a8:	0000080f 	.word	0x0000080f
 80049ac:	04000120 	.word	0x04000120
 80049b0:	08005561 	.word	0x08005561

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d000      	beq.n	80049be <HAL_UART_IRQHandler+0x2ae>
 80049bc:	e139      	b.n	8004c32 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80049be:	23a4      	movs	r3, #164	; 0xa4
 80049c0:	18fb      	adds	r3, r7, r3
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2210      	movs	r2, #16
 80049c6:	4013      	ands	r3, r2
 80049c8:	d100      	bne.n	80049cc <HAL_UART_IRQHandler+0x2bc>
 80049ca:	e132      	b.n	8004c32 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80049cc:	23a0      	movs	r3, #160	; 0xa0
 80049ce:	18fb      	adds	r3, r7, r3
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2210      	movs	r2, #16
 80049d4:	4013      	ands	r3, r2
 80049d6:	d100      	bne.n	80049da <HAL_UART_IRQHandler+0x2ca>
 80049d8:	e12b      	b.n	8004c32 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2210      	movs	r2, #16
 80049e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	2240      	movs	r2, #64	; 0x40
 80049ea:	4013      	ands	r3, r2
 80049ec:	2b40      	cmp	r3, #64	; 0x40
 80049ee:	d000      	beq.n	80049f2 <HAL_UART_IRQHandler+0x2e2>
 80049f0:	e09f      	b.n	8004b32 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	685a      	ldr	r2, [r3, #4]
 80049fa:	217e      	movs	r1, #126	; 0x7e
 80049fc:	187b      	adds	r3, r7, r1
 80049fe:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004a00:	187b      	adds	r3, r7, r1
 8004a02:	881b      	ldrh	r3, [r3, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d100      	bne.n	8004a0a <HAL_UART_IRQHandler+0x2fa>
 8004a08:	e156      	b.n	8004cb8 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2258      	movs	r2, #88	; 0x58
 8004a0e:	5a9b      	ldrh	r3, [r3, r2]
 8004a10:	187a      	adds	r2, r7, r1
 8004a12:	8812      	ldrh	r2, [r2, #0]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d300      	bcc.n	8004a1a <HAL_UART_IRQHandler+0x30a>
 8004a18:	e14e      	b.n	8004cb8 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	187a      	adds	r2, r7, r1
 8004a1e:	215a      	movs	r1, #90	; 0x5a
 8004a20:	8812      	ldrh	r2, [r2, #0]
 8004a22:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	2b20      	cmp	r3, #32
 8004a2c:	d06f      	beq.n	8004b0e <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a2e:	f3ef 8310 	mrs	r3, PRIMASK
 8004a32:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a36:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a38:	2301      	movs	r3, #1
 8004a3a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a3e:	f383 8810 	msr	PRIMASK, r3
}
 8004a42:	46c0      	nop			; (mov r8, r8)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	499e      	ldr	r1, [pc, #632]	; (8004cc8 <HAL_UART_IRQHandler+0x5b8>)
 8004a50:	400a      	ands	r2, r1
 8004a52:	601a      	str	r2, [r3, #0]
 8004a54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a56:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a5a:	f383 8810 	msr	PRIMASK, r3
}
 8004a5e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a60:	f3ef 8310 	mrs	r3, PRIMASK
 8004a64:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a68:	677b      	str	r3, [r7, #116]	; 0x74
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a70:	f383 8810 	msr	PRIMASK, r3
}
 8004a74:	46c0      	nop			; (mov r8, r8)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	689a      	ldr	r2, [r3, #8]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2101      	movs	r1, #1
 8004a82:	438a      	bics	r2, r1
 8004a84:	609a      	str	r2, [r3, #8]
 8004a86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a88:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a8c:	f383 8810 	msr	PRIMASK, r3
}
 8004a90:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a92:	f3ef 8310 	mrs	r3, PRIMASK
 8004a96:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004a98:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a9a:	673b      	str	r3, [r7, #112]	; 0x70
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004aa2:	f383 8810 	msr	PRIMASK, r3
}
 8004aa6:	46c0      	nop			; (mov r8, r8)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	689a      	ldr	r2, [r3, #8]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2140      	movs	r1, #64	; 0x40
 8004ab4:	438a      	bics	r2, r1
 8004ab6:	609a      	str	r2, [r3, #8]
 8004ab8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004aba:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004abc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004abe:	f383 8810 	msr	PRIMASK, r3
}
 8004ac2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2280      	movs	r2, #128	; 0x80
 8004ac8:	2120      	movs	r1, #32
 8004aca:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ad2:	f3ef 8310 	mrs	r3, PRIMASK
 8004ad6:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004ad8:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ada:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004adc:	2301      	movs	r3, #1
 8004ade:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ae0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ae2:	f383 8810 	msr	PRIMASK, r3
}
 8004ae6:	46c0      	nop			; (mov r8, r8)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2110      	movs	r1, #16
 8004af4:	438a      	bics	r2, r1
 8004af6:	601a      	str	r2, [r3, #0]
 8004af8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004afa:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004afc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004afe:	f383 8810 	msr	PRIMASK, r3
}
 8004b02:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b08:	0018      	movs	r0, r3
 8004b0a:	f7fd fc61 	bl	80023d0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2202      	movs	r2, #2
 8004b12:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2258      	movs	r2, #88	; 0x58
 8004b18:	5a9a      	ldrh	r2, [r3, r2]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	215a      	movs	r1, #90	; 0x5a
 8004b1e:	5a5b      	ldrh	r3, [r3, r1]
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	b29a      	uxth	r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	0011      	movs	r1, r2
 8004b2a:	0018      	movs	r0, r3
 8004b2c:	f000 f8d8 	bl	8004ce0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004b30:	e0c2      	b.n	8004cb8 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2258      	movs	r2, #88	; 0x58
 8004b36:	5a99      	ldrh	r1, [r3, r2]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	225a      	movs	r2, #90	; 0x5a
 8004b3c:	5a9b      	ldrh	r3, [r3, r2]
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	208e      	movs	r0, #142	; 0x8e
 8004b42:	183b      	adds	r3, r7, r0
 8004b44:	1a8a      	subs	r2, r1, r2
 8004b46:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	225a      	movs	r2, #90	; 0x5a
 8004b4c:	5a9b      	ldrh	r3, [r3, r2]
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d100      	bne.n	8004b56 <HAL_UART_IRQHandler+0x446>
 8004b54:	e0b2      	b.n	8004cbc <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8004b56:	183b      	adds	r3, r7, r0
 8004b58:	881b      	ldrh	r3, [r3, #0]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d100      	bne.n	8004b60 <HAL_UART_IRQHandler+0x450>
 8004b5e:	e0ad      	b.n	8004cbc <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b60:	f3ef 8310 	mrs	r3, PRIMASK
 8004b64:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b66:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b68:	2488      	movs	r4, #136	; 0x88
 8004b6a:	193a      	adds	r2, r7, r4
 8004b6c:	6013      	str	r3, [r2, #0]
 8004b6e:	2301      	movs	r3, #1
 8004b70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	f383 8810 	msr	PRIMASK, r3
}
 8004b78:	46c0      	nop			; (mov r8, r8)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4951      	ldr	r1, [pc, #324]	; (8004ccc <HAL_UART_IRQHandler+0x5bc>)
 8004b86:	400a      	ands	r2, r1
 8004b88:	601a      	str	r2, [r3, #0]
 8004b8a:	193b      	adds	r3, r7, r4
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	f383 8810 	msr	PRIMASK, r3
}
 8004b96:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b98:	f3ef 8310 	mrs	r3, PRIMASK
 8004b9c:	61bb      	str	r3, [r7, #24]
  return(result);
 8004b9e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ba0:	2484      	movs	r4, #132	; 0x84
 8004ba2:	193a      	adds	r2, r7, r4
 8004ba4:	6013      	str	r3, [r2, #0]
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	f383 8810 	msr	PRIMASK, r3
}
 8004bb0:	46c0      	nop			; (mov r8, r8)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	689a      	ldr	r2, [r3, #8]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2101      	movs	r1, #1
 8004bbe:	438a      	bics	r2, r1
 8004bc0:	609a      	str	r2, [r3, #8]
 8004bc2:	193b      	adds	r3, r7, r4
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bc8:	6a3b      	ldr	r3, [r7, #32]
 8004bca:	f383 8810 	msr	PRIMASK, r3
}
 8004bce:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2280      	movs	r2, #128	; 0x80
 8004bd4:	2120      	movs	r1, #32
 8004bd6:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004be4:	f3ef 8310 	mrs	r3, PRIMASK
 8004be8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bec:	2480      	movs	r4, #128	; 0x80
 8004bee:	193a      	adds	r2, r7, r4
 8004bf0:	6013      	str	r3, [r2, #0]
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf8:	f383 8810 	msr	PRIMASK, r3
}
 8004bfc:	46c0      	nop			; (mov r8, r8)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2110      	movs	r1, #16
 8004c0a:	438a      	bics	r2, r1
 8004c0c:	601a      	str	r2, [r3, #0]
 8004c0e:	193b      	adds	r3, r7, r4
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c16:	f383 8810 	msr	PRIMASK, r3
}
 8004c1a:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2202      	movs	r2, #2
 8004c20:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c22:	183b      	adds	r3, r7, r0
 8004c24:	881a      	ldrh	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	0011      	movs	r1, r2
 8004c2a:	0018      	movs	r0, r3
 8004c2c:	f000 f858 	bl	8004ce0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004c30:	e044      	b.n	8004cbc <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004c32:	23a4      	movs	r3, #164	; 0xa4
 8004c34:	18fb      	adds	r3, r7, r3
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	2380      	movs	r3, #128	; 0x80
 8004c3a:	035b      	lsls	r3, r3, #13
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	d010      	beq.n	8004c62 <HAL_UART_IRQHandler+0x552>
 8004c40:	239c      	movs	r3, #156	; 0x9c
 8004c42:	18fb      	adds	r3, r7, r3
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	2380      	movs	r3, #128	; 0x80
 8004c48:	03db      	lsls	r3, r3, #15
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	d009      	beq.n	8004c62 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	2280      	movs	r2, #128	; 0x80
 8004c54:	0352      	lsls	r2, r2, #13
 8004c56:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	0018      	movs	r0, r3
 8004c5c:	f000 fe7a 	bl	8005954 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004c60:	e02f      	b.n	8004cc2 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004c62:	23a4      	movs	r3, #164	; 0xa4
 8004c64:	18fb      	adds	r3, r7, r3
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2280      	movs	r2, #128	; 0x80
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	d00f      	beq.n	8004c8e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004c6e:	23a0      	movs	r3, #160	; 0xa0
 8004c70:	18fb      	adds	r3, r7, r3
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2280      	movs	r2, #128	; 0x80
 8004c76:	4013      	ands	r3, r2
 8004c78:	d009      	beq.n	8004c8e <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d01e      	beq.n	8004cc0 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	0010      	movs	r0, r2
 8004c8a:	4798      	blx	r3
    }
    return;
 8004c8c:	e018      	b.n	8004cc0 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004c8e:	23a4      	movs	r3, #164	; 0xa4
 8004c90:	18fb      	adds	r3, r7, r3
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2240      	movs	r2, #64	; 0x40
 8004c96:	4013      	ands	r3, r2
 8004c98:	d013      	beq.n	8004cc2 <HAL_UART_IRQHandler+0x5b2>
 8004c9a:	23a0      	movs	r3, #160	; 0xa0
 8004c9c:	18fb      	adds	r3, r7, r3
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2240      	movs	r2, #64	; 0x40
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	d00d      	beq.n	8004cc2 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	0018      	movs	r0, r3
 8004caa:	f000 fc70 	bl	800558e <UART_EndTransmit_IT>
    return;
 8004cae:	e008      	b.n	8004cc2 <HAL_UART_IRQHandler+0x5b2>
      return;
 8004cb0:	46c0      	nop			; (mov r8, r8)
 8004cb2:	e006      	b.n	8004cc2 <HAL_UART_IRQHandler+0x5b2>
    return;
 8004cb4:	46c0      	nop			; (mov r8, r8)
 8004cb6:	e004      	b.n	8004cc2 <HAL_UART_IRQHandler+0x5b2>
      return;
 8004cb8:	46c0      	nop			; (mov r8, r8)
 8004cba:	e002      	b.n	8004cc2 <HAL_UART_IRQHandler+0x5b2>
      return;
 8004cbc:	46c0      	nop			; (mov r8, r8)
 8004cbe:	e000      	b.n	8004cc2 <HAL_UART_IRQHandler+0x5b2>
    return;
 8004cc0:	46c0      	nop			; (mov r8, r8)
  }

}
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	b02b      	add	sp, #172	; 0xac
 8004cc6:	bd90      	pop	{r4, r7, pc}
 8004cc8:	fffffeff 	.word	0xfffffeff
 8004ccc:	fffffedf 	.word	0xfffffedf

08004cd0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004cd8:	46c0      	nop			; (mov r8, r8)
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	b002      	add	sp, #8
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	000a      	movs	r2, r1
 8004cea:	1cbb      	adds	r3, r7, #2
 8004cec:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004cee:	46c0      	nop			; (mov r8, r8)
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	b002      	add	sp, #8
 8004cf4:	bd80      	pop	{r7, pc}
	...

08004cf8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b088      	sub	sp, #32
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d00:	231e      	movs	r3, #30
 8004d02:	18fb      	adds	r3, r7, r3
 8004d04:	2200      	movs	r2, #0
 8004d06:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	689a      	ldr	r2, [r3, #8]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	431a      	orrs	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	431a      	orrs	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	69db      	ldr	r3, [r3, #28]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a8d      	ldr	r2, [pc, #564]	; (8004f5c <UART_SetConfig+0x264>)
 8004d28:	4013      	ands	r3, r2
 8004d2a:	0019      	movs	r1, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	697a      	ldr	r2, [r7, #20]
 8004d32:	430a      	orrs	r2, r1
 8004d34:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	4a88      	ldr	r2, [pc, #544]	; (8004f60 <UART_SetConfig+0x268>)
 8004d3e:	4013      	ands	r3, r2
 8004d40:	0019      	movs	r1, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	68da      	ldr	r2, [r3, #12]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a1b      	ldr	r3, [r3, #32]
 8004d58:	697a      	ldr	r2, [r7, #20]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	4a7f      	ldr	r2, [pc, #508]	; (8004f64 <UART_SetConfig+0x26c>)
 8004d66:	4013      	ands	r3, r2
 8004d68:	0019      	movs	r1, r3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	430a      	orrs	r2, r1
 8004d72:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a7b      	ldr	r2, [pc, #492]	; (8004f68 <UART_SetConfig+0x270>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d127      	bne.n	8004dce <UART_SetConfig+0xd6>
 8004d7e:	4b7b      	ldr	r3, [pc, #492]	; (8004f6c <UART_SetConfig+0x274>)
 8004d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d82:	2203      	movs	r2, #3
 8004d84:	4013      	ands	r3, r2
 8004d86:	2b03      	cmp	r3, #3
 8004d88:	d00d      	beq.n	8004da6 <UART_SetConfig+0xae>
 8004d8a:	d81b      	bhi.n	8004dc4 <UART_SetConfig+0xcc>
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d014      	beq.n	8004dba <UART_SetConfig+0xc2>
 8004d90:	d818      	bhi.n	8004dc4 <UART_SetConfig+0xcc>
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d002      	beq.n	8004d9c <UART_SetConfig+0xa4>
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d00a      	beq.n	8004db0 <UART_SetConfig+0xb8>
 8004d9a:	e013      	b.n	8004dc4 <UART_SetConfig+0xcc>
 8004d9c:	231f      	movs	r3, #31
 8004d9e:	18fb      	adds	r3, r7, r3
 8004da0:	2200      	movs	r2, #0
 8004da2:	701a      	strb	r2, [r3, #0]
 8004da4:	e021      	b.n	8004dea <UART_SetConfig+0xf2>
 8004da6:	231f      	movs	r3, #31
 8004da8:	18fb      	adds	r3, r7, r3
 8004daa:	2202      	movs	r2, #2
 8004dac:	701a      	strb	r2, [r3, #0]
 8004dae:	e01c      	b.n	8004dea <UART_SetConfig+0xf2>
 8004db0:	231f      	movs	r3, #31
 8004db2:	18fb      	adds	r3, r7, r3
 8004db4:	2204      	movs	r2, #4
 8004db6:	701a      	strb	r2, [r3, #0]
 8004db8:	e017      	b.n	8004dea <UART_SetConfig+0xf2>
 8004dba:	231f      	movs	r3, #31
 8004dbc:	18fb      	adds	r3, r7, r3
 8004dbe:	2208      	movs	r2, #8
 8004dc0:	701a      	strb	r2, [r3, #0]
 8004dc2:	e012      	b.n	8004dea <UART_SetConfig+0xf2>
 8004dc4:	231f      	movs	r3, #31
 8004dc6:	18fb      	adds	r3, r7, r3
 8004dc8:	2210      	movs	r2, #16
 8004dca:	701a      	strb	r2, [r3, #0]
 8004dcc:	e00d      	b.n	8004dea <UART_SetConfig+0xf2>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a67      	ldr	r2, [pc, #412]	; (8004f70 <UART_SetConfig+0x278>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d104      	bne.n	8004de2 <UART_SetConfig+0xea>
 8004dd8:	231f      	movs	r3, #31
 8004dda:	18fb      	adds	r3, r7, r3
 8004ddc:	2200      	movs	r2, #0
 8004dde:	701a      	strb	r2, [r3, #0]
 8004de0:	e003      	b.n	8004dea <UART_SetConfig+0xf2>
 8004de2:	231f      	movs	r3, #31
 8004de4:	18fb      	adds	r3, r7, r3
 8004de6:	2210      	movs	r2, #16
 8004de8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	69da      	ldr	r2, [r3, #28]
 8004dee:	2380      	movs	r3, #128	; 0x80
 8004df0:	021b      	lsls	r3, r3, #8
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d15c      	bne.n	8004eb0 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8004df6:	231f      	movs	r3, #31
 8004df8:	18fb      	adds	r3, r7, r3
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	2b08      	cmp	r3, #8
 8004dfe:	d015      	beq.n	8004e2c <UART_SetConfig+0x134>
 8004e00:	dc18      	bgt.n	8004e34 <UART_SetConfig+0x13c>
 8004e02:	2b04      	cmp	r3, #4
 8004e04:	d00d      	beq.n	8004e22 <UART_SetConfig+0x12a>
 8004e06:	dc15      	bgt.n	8004e34 <UART_SetConfig+0x13c>
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d002      	beq.n	8004e12 <UART_SetConfig+0x11a>
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	d005      	beq.n	8004e1c <UART_SetConfig+0x124>
 8004e10:	e010      	b.n	8004e34 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e12:	f7fe fa89 	bl	8003328 <HAL_RCC_GetPCLK1Freq>
 8004e16:	0003      	movs	r3, r0
 8004e18:	61bb      	str	r3, [r7, #24]
        break;
 8004e1a:	e012      	b.n	8004e42 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e1c:	4b55      	ldr	r3, [pc, #340]	; (8004f74 <UART_SetConfig+0x27c>)
 8004e1e:	61bb      	str	r3, [r7, #24]
        break;
 8004e20:	e00f      	b.n	8004e42 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e22:	f7fe fa05 	bl	8003230 <HAL_RCC_GetSysClockFreq>
 8004e26:	0003      	movs	r3, r0
 8004e28:	61bb      	str	r3, [r7, #24]
        break;
 8004e2a:	e00a      	b.n	8004e42 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e2c:	2380      	movs	r3, #128	; 0x80
 8004e2e:	021b      	lsls	r3, r3, #8
 8004e30:	61bb      	str	r3, [r7, #24]
        break;
 8004e32:	e006      	b.n	8004e42 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8004e34:	2300      	movs	r3, #0
 8004e36:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e38:	231e      	movs	r3, #30
 8004e3a:	18fb      	adds	r3, r7, r3
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	701a      	strb	r2, [r3, #0]
        break;
 8004e40:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d100      	bne.n	8004e4a <UART_SetConfig+0x152>
 8004e48:	e07a      	b.n	8004f40 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	005a      	lsls	r2, r3, #1
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	085b      	lsrs	r3, r3, #1
 8004e54:	18d2      	adds	r2, r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	0019      	movs	r1, r3
 8004e5c:	0010      	movs	r0, r2
 8004e5e:	f7fb f953 	bl	8000108 <__udivsi3>
 8004e62:	0003      	movs	r3, r0
 8004e64:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	2b0f      	cmp	r3, #15
 8004e6a:	d91c      	bls.n	8004ea6 <UART_SetConfig+0x1ae>
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	2380      	movs	r3, #128	; 0x80
 8004e70:	025b      	lsls	r3, r3, #9
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d217      	bcs.n	8004ea6 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	b29a      	uxth	r2, r3
 8004e7a:	200e      	movs	r0, #14
 8004e7c:	183b      	adds	r3, r7, r0
 8004e7e:	210f      	movs	r1, #15
 8004e80:	438a      	bics	r2, r1
 8004e82:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	085b      	lsrs	r3, r3, #1
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	2207      	movs	r2, #7
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	b299      	uxth	r1, r3
 8004e90:	183b      	adds	r3, r7, r0
 8004e92:	183a      	adds	r2, r7, r0
 8004e94:	8812      	ldrh	r2, [r2, #0]
 8004e96:	430a      	orrs	r2, r1
 8004e98:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	183a      	adds	r2, r7, r0
 8004ea0:	8812      	ldrh	r2, [r2, #0]
 8004ea2:	60da      	str	r2, [r3, #12]
 8004ea4:	e04c      	b.n	8004f40 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004ea6:	231e      	movs	r3, #30
 8004ea8:	18fb      	adds	r3, r7, r3
 8004eaa:	2201      	movs	r2, #1
 8004eac:	701a      	strb	r2, [r3, #0]
 8004eae:	e047      	b.n	8004f40 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004eb0:	231f      	movs	r3, #31
 8004eb2:	18fb      	adds	r3, r7, r3
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	2b08      	cmp	r3, #8
 8004eb8:	d015      	beq.n	8004ee6 <UART_SetConfig+0x1ee>
 8004eba:	dc18      	bgt.n	8004eee <UART_SetConfig+0x1f6>
 8004ebc:	2b04      	cmp	r3, #4
 8004ebe:	d00d      	beq.n	8004edc <UART_SetConfig+0x1e4>
 8004ec0:	dc15      	bgt.n	8004eee <UART_SetConfig+0x1f6>
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d002      	beq.n	8004ecc <UART_SetConfig+0x1d4>
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d005      	beq.n	8004ed6 <UART_SetConfig+0x1de>
 8004eca:	e010      	b.n	8004eee <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ecc:	f7fe fa2c 	bl	8003328 <HAL_RCC_GetPCLK1Freq>
 8004ed0:	0003      	movs	r3, r0
 8004ed2:	61bb      	str	r3, [r7, #24]
        break;
 8004ed4:	e012      	b.n	8004efc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ed6:	4b27      	ldr	r3, [pc, #156]	; (8004f74 <UART_SetConfig+0x27c>)
 8004ed8:	61bb      	str	r3, [r7, #24]
        break;
 8004eda:	e00f      	b.n	8004efc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004edc:	f7fe f9a8 	bl	8003230 <HAL_RCC_GetSysClockFreq>
 8004ee0:	0003      	movs	r3, r0
 8004ee2:	61bb      	str	r3, [r7, #24]
        break;
 8004ee4:	e00a      	b.n	8004efc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ee6:	2380      	movs	r3, #128	; 0x80
 8004ee8:	021b      	lsls	r3, r3, #8
 8004eea:	61bb      	str	r3, [r7, #24]
        break;
 8004eec:	e006      	b.n	8004efc <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ef2:	231e      	movs	r3, #30
 8004ef4:	18fb      	adds	r3, r7, r3
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	701a      	strb	r2, [r3, #0]
        break;
 8004efa:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d01e      	beq.n	8004f40 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	085a      	lsrs	r2, r3, #1
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	18d2      	adds	r2, r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	0019      	movs	r1, r3
 8004f12:	0010      	movs	r0, r2
 8004f14:	f7fb f8f8 	bl	8000108 <__udivsi3>
 8004f18:	0003      	movs	r3, r0
 8004f1a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	2b0f      	cmp	r3, #15
 8004f20:	d90a      	bls.n	8004f38 <UART_SetConfig+0x240>
 8004f22:	693a      	ldr	r2, [r7, #16]
 8004f24:	2380      	movs	r3, #128	; 0x80
 8004f26:	025b      	lsls	r3, r3, #9
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d205      	bcs.n	8004f38 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	60da      	str	r2, [r3, #12]
 8004f36:	e003      	b.n	8004f40 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004f38:	231e      	movs	r3, #30
 8004f3a:	18fb      	adds	r3, r7, r3
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004f4c:	231e      	movs	r3, #30
 8004f4e:	18fb      	adds	r3, r7, r3
 8004f50:	781b      	ldrb	r3, [r3, #0]
}
 8004f52:	0018      	movs	r0, r3
 8004f54:	46bd      	mov	sp, r7
 8004f56:	b008      	add	sp, #32
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	46c0      	nop			; (mov r8, r8)
 8004f5c:	efff69f3 	.word	0xefff69f3
 8004f60:	ffffcfff 	.word	0xffffcfff
 8004f64:	fffff4ff 	.word	0xfffff4ff
 8004f68:	40013800 	.word	0x40013800
 8004f6c:	40021000 	.word	0x40021000
 8004f70:	40004400 	.word	0x40004400
 8004f74:	007a1200 	.word	0x007a1200

08004f78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f84:	2201      	movs	r2, #1
 8004f86:	4013      	ands	r3, r2
 8004f88:	d00b      	beq.n	8004fa2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	4a4a      	ldr	r2, [pc, #296]	; (80050bc <UART_AdvFeatureConfig+0x144>)
 8004f92:	4013      	ands	r3, r2
 8004f94:	0019      	movs	r1, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa6:	2202      	movs	r2, #2
 8004fa8:	4013      	ands	r3, r2
 8004faa:	d00b      	beq.n	8004fc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	4a43      	ldr	r2, [pc, #268]	; (80050c0 <UART_AdvFeatureConfig+0x148>)
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	0019      	movs	r1, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc8:	2204      	movs	r2, #4
 8004fca:	4013      	ands	r3, r2
 8004fcc:	d00b      	beq.n	8004fe6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	4a3b      	ldr	r2, [pc, #236]	; (80050c4 <UART_AdvFeatureConfig+0x14c>)
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	0019      	movs	r1, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fea:	2208      	movs	r2, #8
 8004fec:	4013      	ands	r3, r2
 8004fee:	d00b      	beq.n	8005008 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	4a34      	ldr	r2, [pc, #208]	; (80050c8 <UART_AdvFeatureConfig+0x150>)
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	0019      	movs	r1, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	430a      	orrs	r2, r1
 8005006:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500c:	2210      	movs	r2, #16
 800500e:	4013      	ands	r3, r2
 8005010:	d00b      	beq.n	800502a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	4a2c      	ldr	r2, [pc, #176]	; (80050cc <UART_AdvFeatureConfig+0x154>)
 800501a:	4013      	ands	r3, r2
 800501c:	0019      	movs	r1, r3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	430a      	orrs	r2, r1
 8005028:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502e:	2220      	movs	r2, #32
 8005030:	4013      	ands	r3, r2
 8005032:	d00b      	beq.n	800504c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	4a25      	ldr	r2, [pc, #148]	; (80050d0 <UART_AdvFeatureConfig+0x158>)
 800503c:	4013      	ands	r3, r2
 800503e:	0019      	movs	r1, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	430a      	orrs	r2, r1
 800504a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005050:	2240      	movs	r2, #64	; 0x40
 8005052:	4013      	ands	r3, r2
 8005054:	d01d      	beq.n	8005092 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	4a1d      	ldr	r2, [pc, #116]	; (80050d4 <UART_AdvFeatureConfig+0x15c>)
 800505e:	4013      	ands	r3, r2
 8005060:	0019      	movs	r1, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	430a      	orrs	r2, r1
 800506c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005072:	2380      	movs	r3, #128	; 0x80
 8005074:	035b      	lsls	r3, r3, #13
 8005076:	429a      	cmp	r2, r3
 8005078:	d10b      	bne.n	8005092 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	4a15      	ldr	r2, [pc, #84]	; (80050d8 <UART_AdvFeatureConfig+0x160>)
 8005082:	4013      	ands	r3, r2
 8005084:	0019      	movs	r1, r3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	430a      	orrs	r2, r1
 8005090:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005096:	2280      	movs	r2, #128	; 0x80
 8005098:	4013      	ands	r3, r2
 800509a:	d00b      	beq.n	80050b4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	4a0e      	ldr	r2, [pc, #56]	; (80050dc <UART_AdvFeatureConfig+0x164>)
 80050a4:	4013      	ands	r3, r2
 80050a6:	0019      	movs	r1, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	430a      	orrs	r2, r1
 80050b2:	605a      	str	r2, [r3, #4]
  }
}
 80050b4:	46c0      	nop			; (mov r8, r8)
 80050b6:	46bd      	mov	sp, r7
 80050b8:	b002      	add	sp, #8
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	fffdffff 	.word	0xfffdffff
 80050c0:	fffeffff 	.word	0xfffeffff
 80050c4:	fffbffff 	.word	0xfffbffff
 80050c8:	ffff7fff 	.word	0xffff7fff
 80050cc:	ffffefff 	.word	0xffffefff
 80050d0:	ffffdfff 	.word	0xffffdfff
 80050d4:	ffefffff 	.word	0xffefffff
 80050d8:	ff9fffff 	.word	0xff9fffff
 80050dc:	fff7ffff 	.word	0xfff7ffff

080050e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b092      	sub	sp, #72	; 0x48
 80050e4:	af02      	add	r7, sp, #8
 80050e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2284      	movs	r2, #132	; 0x84
 80050ec:	2100      	movs	r1, #0
 80050ee:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050f0:	f7fc fbf6 	bl	80018e0 <HAL_GetTick>
 80050f4:	0003      	movs	r3, r0
 80050f6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2208      	movs	r2, #8
 8005100:	4013      	ands	r3, r2
 8005102:	2b08      	cmp	r3, #8
 8005104:	d12c      	bne.n	8005160 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005108:	2280      	movs	r2, #128	; 0x80
 800510a:	0391      	lsls	r1, r2, #14
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	4a46      	ldr	r2, [pc, #280]	; (8005228 <UART_CheckIdleState+0x148>)
 8005110:	9200      	str	r2, [sp, #0]
 8005112:	2200      	movs	r2, #0
 8005114:	f000 f88c 	bl	8005230 <UART_WaitOnFlagUntilTimeout>
 8005118:	1e03      	subs	r3, r0, #0
 800511a:	d021      	beq.n	8005160 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800511c:	f3ef 8310 	mrs	r3, PRIMASK
 8005120:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005124:	63bb      	str	r3, [r7, #56]	; 0x38
 8005126:	2301      	movs	r3, #1
 8005128:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800512a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800512c:	f383 8810 	msr	PRIMASK, r3
}
 8005130:	46c0      	nop			; (mov r8, r8)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2180      	movs	r1, #128	; 0x80
 800513e:	438a      	bics	r2, r1
 8005140:	601a      	str	r2, [r3, #0]
 8005142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005144:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005148:	f383 8810 	msr	PRIMASK, r3
}
 800514c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2220      	movs	r2, #32
 8005152:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2278      	movs	r2, #120	; 0x78
 8005158:	2100      	movs	r1, #0
 800515a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e05f      	b.n	8005220 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2204      	movs	r2, #4
 8005168:	4013      	ands	r3, r2
 800516a:	2b04      	cmp	r3, #4
 800516c:	d146      	bne.n	80051fc <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800516e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005170:	2280      	movs	r2, #128	; 0x80
 8005172:	03d1      	lsls	r1, r2, #15
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	4a2c      	ldr	r2, [pc, #176]	; (8005228 <UART_CheckIdleState+0x148>)
 8005178:	9200      	str	r2, [sp, #0]
 800517a:	2200      	movs	r2, #0
 800517c:	f000 f858 	bl	8005230 <UART_WaitOnFlagUntilTimeout>
 8005180:	1e03      	subs	r3, r0, #0
 8005182:	d03b      	beq.n	80051fc <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005184:	f3ef 8310 	mrs	r3, PRIMASK
 8005188:	60fb      	str	r3, [r7, #12]
  return(result);
 800518a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800518c:	637b      	str	r3, [r7, #52]	; 0x34
 800518e:	2301      	movs	r3, #1
 8005190:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	f383 8810 	msr	PRIMASK, r3
}
 8005198:	46c0      	nop			; (mov r8, r8)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4921      	ldr	r1, [pc, #132]	; (800522c <UART_CheckIdleState+0x14c>)
 80051a6:	400a      	ands	r2, r1
 80051a8:	601a      	str	r2, [r3, #0]
 80051aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	f383 8810 	msr	PRIMASK, r3
}
 80051b4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051b6:	f3ef 8310 	mrs	r3, PRIMASK
 80051ba:	61bb      	str	r3, [r7, #24]
  return(result);
 80051bc:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051be:	633b      	str	r3, [r7, #48]	; 0x30
 80051c0:	2301      	movs	r3, #1
 80051c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	f383 8810 	msr	PRIMASK, r3
}
 80051ca:	46c0      	nop			; (mov r8, r8)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	689a      	ldr	r2, [r3, #8]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2101      	movs	r1, #1
 80051d8:	438a      	bics	r2, r1
 80051da:	609a      	str	r2, [r3, #8]
 80051dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051de:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051e0:	6a3b      	ldr	r3, [r7, #32]
 80051e2:	f383 8810 	msr	PRIMASK, r3
}
 80051e6:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2280      	movs	r2, #128	; 0x80
 80051ec:	2120      	movs	r1, #32
 80051ee:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2278      	movs	r2, #120	; 0x78
 80051f4:	2100      	movs	r1, #0
 80051f6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051f8:	2303      	movs	r3, #3
 80051fa:	e011      	b.n	8005220 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2220      	movs	r2, #32
 8005200:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2280      	movs	r2, #128	; 0x80
 8005206:	2120      	movs	r1, #32
 8005208:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2278      	movs	r2, #120	; 0x78
 800521a:	2100      	movs	r1, #0
 800521c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800521e:	2300      	movs	r3, #0
}
 8005220:	0018      	movs	r0, r3
 8005222:	46bd      	mov	sp, r7
 8005224:	b010      	add	sp, #64	; 0x40
 8005226:	bd80      	pop	{r7, pc}
 8005228:	01ffffff 	.word	0x01ffffff
 800522c:	fffffedf 	.word	0xfffffedf

08005230 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	603b      	str	r3, [r7, #0]
 800523c:	1dfb      	adds	r3, r7, #7
 800523e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005240:	e04b      	b.n	80052da <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	3301      	adds	r3, #1
 8005246:	d048      	beq.n	80052da <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005248:	f7fc fb4a 	bl	80018e0 <HAL_GetTick>
 800524c:	0002      	movs	r2, r0
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	69ba      	ldr	r2, [r7, #24]
 8005254:	429a      	cmp	r2, r3
 8005256:	d302      	bcc.n	800525e <UART_WaitOnFlagUntilTimeout+0x2e>
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d101      	bne.n	8005262 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e04b      	b.n	80052fa <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2204      	movs	r2, #4
 800526a:	4013      	ands	r3, r2
 800526c:	d035      	beq.n	80052da <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	69db      	ldr	r3, [r3, #28]
 8005274:	2208      	movs	r2, #8
 8005276:	4013      	ands	r3, r2
 8005278:	2b08      	cmp	r3, #8
 800527a:	d111      	bne.n	80052a0 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2208      	movs	r2, #8
 8005282:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	0018      	movs	r0, r3
 8005288:	f000 f906 	bl	8005498 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2284      	movs	r2, #132	; 0x84
 8005290:	2108      	movs	r1, #8
 8005292:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2278      	movs	r2, #120	; 0x78
 8005298:	2100      	movs	r1, #0
 800529a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e02c      	b.n	80052fa <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	69da      	ldr	r2, [r3, #28]
 80052a6:	2380      	movs	r3, #128	; 0x80
 80052a8:	011b      	lsls	r3, r3, #4
 80052aa:	401a      	ands	r2, r3
 80052ac:	2380      	movs	r3, #128	; 0x80
 80052ae:	011b      	lsls	r3, r3, #4
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d112      	bne.n	80052da <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2280      	movs	r2, #128	; 0x80
 80052ba:	0112      	lsls	r2, r2, #4
 80052bc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	0018      	movs	r0, r3
 80052c2:	f000 f8e9 	bl	8005498 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2284      	movs	r2, #132	; 0x84
 80052ca:	2120      	movs	r1, #32
 80052cc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2278      	movs	r2, #120	; 0x78
 80052d2:	2100      	movs	r1, #0
 80052d4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e00f      	b.n	80052fa <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	69db      	ldr	r3, [r3, #28]
 80052e0:	68ba      	ldr	r2, [r7, #8]
 80052e2:	4013      	ands	r3, r2
 80052e4:	68ba      	ldr	r2, [r7, #8]
 80052e6:	1ad3      	subs	r3, r2, r3
 80052e8:	425a      	negs	r2, r3
 80052ea:	4153      	adcs	r3, r2
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	001a      	movs	r2, r3
 80052f0:	1dfb      	adds	r3, r7, #7
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d0a4      	beq.n	8005242 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	0018      	movs	r0, r3
 80052fc:	46bd      	mov	sp, r7
 80052fe:	b004      	add	sp, #16
 8005300:	bd80      	pop	{r7, pc}
	...

08005304 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b090      	sub	sp, #64	; 0x40
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	1dbb      	adds	r3, r7, #6
 8005310:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	68ba      	ldr	r2, [r7, #8]
 8005316:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	1dba      	adds	r2, r7, #6
 800531c:	2158      	movs	r1, #88	; 0x58
 800531e:	8812      	ldrh	r2, [r2, #0]
 8005320:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	1dba      	adds	r2, r7, #6
 8005326:	215a      	movs	r1, #90	; 0x5a
 8005328:	8812      	ldrh	r2, [r2, #0]
 800532a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2200      	movs	r2, #0
 8005330:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	689a      	ldr	r2, [r3, #8]
 8005336:	2380      	movs	r3, #128	; 0x80
 8005338:	015b      	lsls	r3, r3, #5
 800533a:	429a      	cmp	r2, r3
 800533c:	d10d      	bne.n	800535a <UART_Start_Receive_IT+0x56>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d104      	bne.n	8005350 <UART_Start_Receive_IT+0x4c>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	225c      	movs	r2, #92	; 0x5c
 800534a:	4950      	ldr	r1, [pc, #320]	; (800548c <UART_Start_Receive_IT+0x188>)
 800534c:	5299      	strh	r1, [r3, r2]
 800534e:	e02e      	b.n	80053ae <UART_Start_Receive_IT+0xaa>
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	225c      	movs	r2, #92	; 0x5c
 8005354:	21ff      	movs	r1, #255	; 0xff
 8005356:	5299      	strh	r1, [r3, r2]
 8005358:	e029      	b.n	80053ae <UART_Start_Receive_IT+0xaa>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d10d      	bne.n	800537e <UART_Start_Receive_IT+0x7a>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d104      	bne.n	8005374 <UART_Start_Receive_IT+0x70>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	225c      	movs	r2, #92	; 0x5c
 800536e:	21ff      	movs	r1, #255	; 0xff
 8005370:	5299      	strh	r1, [r3, r2]
 8005372:	e01c      	b.n	80053ae <UART_Start_Receive_IT+0xaa>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	225c      	movs	r2, #92	; 0x5c
 8005378:	217f      	movs	r1, #127	; 0x7f
 800537a:	5299      	strh	r1, [r3, r2]
 800537c:	e017      	b.n	80053ae <UART_Start_Receive_IT+0xaa>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	689a      	ldr	r2, [r3, #8]
 8005382:	2380      	movs	r3, #128	; 0x80
 8005384:	055b      	lsls	r3, r3, #21
 8005386:	429a      	cmp	r2, r3
 8005388:	d10d      	bne.n	80053a6 <UART_Start_Receive_IT+0xa2>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d104      	bne.n	800539c <UART_Start_Receive_IT+0x98>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	225c      	movs	r2, #92	; 0x5c
 8005396:	217f      	movs	r1, #127	; 0x7f
 8005398:	5299      	strh	r1, [r3, r2]
 800539a:	e008      	b.n	80053ae <UART_Start_Receive_IT+0xaa>
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	225c      	movs	r2, #92	; 0x5c
 80053a0:	213f      	movs	r1, #63	; 0x3f
 80053a2:	5299      	strh	r1, [r3, r2]
 80053a4:	e003      	b.n	80053ae <UART_Start_Receive_IT+0xaa>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	225c      	movs	r2, #92	; 0x5c
 80053aa:	2100      	movs	r1, #0
 80053ac:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2284      	movs	r2, #132	; 0x84
 80053b2:	2100      	movs	r1, #0
 80053b4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2280      	movs	r2, #128	; 0x80
 80053ba:	2122      	movs	r1, #34	; 0x22
 80053bc:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053be:	f3ef 8310 	mrs	r3, PRIMASK
 80053c2:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80053c4:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053c8:	2301      	movs	r3, #1
 80053ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ce:	f383 8810 	msr	PRIMASK, r3
}
 80053d2:	46c0      	nop			; (mov r8, r8)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	689a      	ldr	r2, [r3, #8]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2101      	movs	r1, #1
 80053e0:	430a      	orrs	r2, r1
 80053e2:	609a      	str	r2, [r3, #8]
 80053e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053e6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ea:	f383 8810 	msr	PRIMASK, r3
}
 80053ee:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	689a      	ldr	r2, [r3, #8]
 80053f4:	2380      	movs	r3, #128	; 0x80
 80053f6:	015b      	lsls	r3, r3, #5
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d107      	bne.n	800540c <UART_Start_Receive_IT+0x108>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d103      	bne.n	800540c <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	4a22      	ldr	r2, [pc, #136]	; (8005490 <UART_Start_Receive_IT+0x18c>)
 8005408:	669a      	str	r2, [r3, #104]	; 0x68
 800540a:	e002      	b.n	8005412 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	4a21      	ldr	r2, [pc, #132]	; (8005494 <UART_Start_Receive_IT+0x190>)
 8005410:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d019      	beq.n	800544e <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800541a:	f3ef 8310 	mrs	r3, PRIMASK
 800541e:	61fb      	str	r3, [r7, #28]
  return(result);
 8005420:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005422:	637b      	str	r3, [r7, #52]	; 0x34
 8005424:	2301      	movs	r3, #1
 8005426:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005428:	6a3b      	ldr	r3, [r7, #32]
 800542a:	f383 8810 	msr	PRIMASK, r3
}
 800542e:	46c0      	nop			; (mov r8, r8)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2190      	movs	r1, #144	; 0x90
 800543c:	0049      	lsls	r1, r1, #1
 800543e:	430a      	orrs	r2, r1
 8005440:	601a      	str	r2, [r3, #0]
 8005442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005444:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005448:	f383 8810 	msr	PRIMASK, r3
}
 800544c:	e018      	b.n	8005480 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800544e:	f3ef 8310 	mrs	r3, PRIMASK
 8005452:	613b      	str	r3, [r7, #16]
  return(result);
 8005454:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005456:	63bb      	str	r3, [r7, #56]	; 0x38
 8005458:	2301      	movs	r3, #1
 800545a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	f383 8810 	msr	PRIMASK, r3
}
 8005462:	46c0      	nop			; (mov r8, r8)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2120      	movs	r1, #32
 8005470:	430a      	orrs	r2, r1
 8005472:	601a      	str	r2, [r3, #0]
 8005474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005476:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	f383 8810 	msr	PRIMASK, r3
}
 800547e:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	0018      	movs	r0, r3
 8005484:	46bd      	mov	sp, r7
 8005486:	b010      	add	sp, #64	; 0x40
 8005488:	bd80      	pop	{r7, pc}
 800548a:	46c0      	nop			; (mov r8, r8)
 800548c:	000001ff 	.word	0x000001ff
 8005490:	0800579d 	.word	0x0800579d
 8005494:	080055e5 	.word	0x080055e5

08005498 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b08e      	sub	sp, #56	; 0x38
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054a0:	f3ef 8310 	mrs	r3, PRIMASK
 80054a4:	617b      	str	r3, [r7, #20]
  return(result);
 80054a6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054a8:	637b      	str	r3, [r7, #52]	; 0x34
 80054aa:	2301      	movs	r3, #1
 80054ac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	f383 8810 	msr	PRIMASK, r3
}
 80054b4:	46c0      	nop			; (mov r8, r8)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4926      	ldr	r1, [pc, #152]	; (800555c <UART_EndRxTransfer+0xc4>)
 80054c2:	400a      	ands	r2, r1
 80054c4:	601a      	str	r2, [r3, #0]
 80054c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	f383 8810 	msr	PRIMASK, r3
}
 80054d0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054d2:	f3ef 8310 	mrs	r3, PRIMASK
 80054d6:	623b      	str	r3, [r7, #32]
  return(result);
 80054d8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054da:	633b      	str	r3, [r7, #48]	; 0x30
 80054dc:	2301      	movs	r3, #1
 80054de:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e2:	f383 8810 	msr	PRIMASK, r3
}
 80054e6:	46c0      	nop			; (mov r8, r8)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	689a      	ldr	r2, [r3, #8]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2101      	movs	r1, #1
 80054f4:	438a      	bics	r2, r1
 80054f6:	609a      	str	r2, [r3, #8]
 80054f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fe:	f383 8810 	msr	PRIMASK, r3
}
 8005502:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005508:	2b01      	cmp	r3, #1
 800550a:	d118      	bne.n	800553e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800550c:	f3ef 8310 	mrs	r3, PRIMASK
 8005510:	60bb      	str	r3, [r7, #8]
  return(result);
 8005512:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005514:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005516:	2301      	movs	r3, #1
 8005518:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f383 8810 	msr	PRIMASK, r3
}
 8005520:	46c0      	nop			; (mov r8, r8)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2110      	movs	r1, #16
 800552e:	438a      	bics	r2, r1
 8005530:	601a      	str	r2, [r3, #0]
 8005532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005534:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	f383 8810 	msr	PRIMASK, r3
}
 800553c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2280      	movs	r2, #128	; 0x80
 8005542:	2120      	movs	r1, #32
 8005544:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005552:	46c0      	nop			; (mov r8, r8)
 8005554:	46bd      	mov	sp, r7
 8005556:	b00e      	add	sp, #56	; 0x38
 8005558:	bd80      	pop	{r7, pc}
 800555a:	46c0      	nop			; (mov r8, r8)
 800555c:	fffffedf 	.word	0xfffffedf

08005560 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	225a      	movs	r2, #90	; 0x5a
 8005572:	2100      	movs	r1, #0
 8005574:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2252      	movs	r2, #82	; 0x52
 800557a:	2100      	movs	r1, #0
 800557c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	0018      	movs	r0, r3
 8005582:	f7fb fec1 	bl	8001308 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005586:	46c0      	nop			; (mov r8, r8)
 8005588:	46bd      	mov	sp, r7
 800558a:	b004      	add	sp, #16
 800558c:	bd80      	pop	{r7, pc}

0800558e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800558e:	b580      	push	{r7, lr}
 8005590:	b086      	sub	sp, #24
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005596:	f3ef 8310 	mrs	r3, PRIMASK
 800559a:	60bb      	str	r3, [r7, #8]
  return(result);
 800559c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800559e:	617b      	str	r3, [r7, #20]
 80055a0:	2301      	movs	r3, #1
 80055a2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f383 8810 	msr	PRIMASK, r3
}
 80055aa:	46c0      	nop			; (mov r8, r8)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	2140      	movs	r1, #64	; 0x40
 80055b8:	438a      	bics	r2, r1
 80055ba:	601a      	str	r2, [r3, #0]
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	f383 8810 	msr	PRIMASK, r3
}
 80055c6:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2220      	movs	r2, #32
 80055cc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	0018      	movs	r0, r3
 80055d8:	f7ff fb7a 	bl	8004cd0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055dc:	46c0      	nop			; (mov r8, r8)
 80055de:	46bd      	mov	sp, r7
 80055e0:	b006      	add	sp, #24
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b094      	sub	sp, #80	; 0x50
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80055ec:	204e      	movs	r0, #78	; 0x4e
 80055ee:	183b      	adds	r3, r7, r0
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	215c      	movs	r1, #92	; 0x5c
 80055f4:	5a52      	ldrh	r2, [r2, r1]
 80055f6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2280      	movs	r2, #128	; 0x80
 80055fc:	589b      	ldr	r3, [r3, r2]
 80055fe:	2b22      	cmp	r3, #34	; 0x22
 8005600:	d000      	beq.n	8005604 <UART_RxISR_8BIT+0x20>
 8005602:	e0ba      	b.n	800577a <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	214c      	movs	r1, #76	; 0x4c
 800560a:	187b      	adds	r3, r7, r1
 800560c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800560e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005610:	187b      	adds	r3, r7, r1
 8005612:	881b      	ldrh	r3, [r3, #0]
 8005614:	b2da      	uxtb	r2, r3
 8005616:	183b      	adds	r3, r7, r0
 8005618:	881b      	ldrh	r3, [r3, #0]
 800561a:	b2d9      	uxtb	r1, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005620:	400a      	ands	r2, r1
 8005622:	b2d2      	uxtb	r2, r2
 8005624:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800562a:	1c5a      	adds	r2, r3, #1
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	225a      	movs	r2, #90	; 0x5a
 8005634:	5a9b      	ldrh	r3, [r3, r2]
 8005636:	b29b      	uxth	r3, r3
 8005638:	3b01      	subs	r3, #1
 800563a:	b299      	uxth	r1, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	225a      	movs	r2, #90	; 0x5a
 8005640:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	225a      	movs	r2, #90	; 0x5a
 8005646:	5a9b      	ldrh	r3, [r3, r2]
 8005648:	b29b      	uxth	r3, r3
 800564a:	2b00      	cmp	r3, #0
 800564c:	d000      	beq.n	8005650 <UART_RxISR_8BIT+0x6c>
 800564e:	e09c      	b.n	800578a <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005650:	f3ef 8310 	mrs	r3, PRIMASK
 8005654:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005658:	64bb      	str	r3, [r7, #72]	; 0x48
 800565a:	2301      	movs	r3, #1
 800565c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800565e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005660:	f383 8810 	msr	PRIMASK, r3
}
 8005664:	46c0      	nop			; (mov r8, r8)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4948      	ldr	r1, [pc, #288]	; (8005794 <UART_RxISR_8BIT+0x1b0>)
 8005672:	400a      	ands	r2, r1
 8005674:	601a      	str	r2, [r3, #0]
 8005676:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005678:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800567a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800567c:	f383 8810 	msr	PRIMASK, r3
}
 8005680:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005682:	f3ef 8310 	mrs	r3, PRIMASK
 8005686:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005688:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800568a:	647b      	str	r3, [r7, #68]	; 0x44
 800568c:	2301      	movs	r3, #1
 800568e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005692:	f383 8810 	msr	PRIMASK, r3
}
 8005696:	46c0      	nop			; (mov r8, r8)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	689a      	ldr	r2, [r3, #8]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2101      	movs	r1, #1
 80056a4:	438a      	bics	r2, r1
 80056a6:	609a      	str	r2, [r3, #8]
 80056a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056aa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ae:	f383 8810 	msr	PRIMASK, r3
}
 80056b2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2280      	movs	r2, #128	; 0x80
 80056b8:	2120      	movs	r1, #32
 80056ba:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	685a      	ldr	r2, [r3, #4]
 80056ce:	2380      	movs	r3, #128	; 0x80
 80056d0:	041b      	lsls	r3, r3, #16
 80056d2:	4013      	ands	r3, r2
 80056d4:	d018      	beq.n	8005708 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056d6:	f3ef 8310 	mrs	r3, PRIMASK
 80056da:	61bb      	str	r3, [r7, #24]
  return(result);
 80056dc:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80056de:	643b      	str	r3, [r7, #64]	; 0x40
 80056e0:	2301      	movs	r3, #1
 80056e2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	f383 8810 	msr	PRIMASK, r3
}
 80056ea:	46c0      	nop			; (mov r8, r8)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4928      	ldr	r1, [pc, #160]	; (8005798 <UART_RxISR_8BIT+0x1b4>)
 80056f8:	400a      	ands	r2, r1
 80056fa:	601a      	str	r2, [r3, #0]
 80056fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056fe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005700:	6a3b      	ldr	r3, [r7, #32]
 8005702:	f383 8810 	msr	PRIMASK, r3
}
 8005706:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800570c:	2b01      	cmp	r3, #1
 800570e:	d12f      	bne.n	8005770 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005716:	f3ef 8310 	mrs	r3, PRIMASK
 800571a:	60fb      	str	r3, [r7, #12]
  return(result);
 800571c:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800571e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005720:	2301      	movs	r3, #1
 8005722:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	f383 8810 	msr	PRIMASK, r3
}
 800572a:	46c0      	nop			; (mov r8, r8)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2110      	movs	r1, #16
 8005738:	438a      	bics	r2, r1
 800573a:	601a      	str	r2, [r3, #0]
 800573c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800573e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	f383 8810 	msr	PRIMASK, r3
}
 8005746:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	69db      	ldr	r3, [r3, #28]
 800574e:	2210      	movs	r2, #16
 8005750:	4013      	ands	r3, r2
 8005752:	2b10      	cmp	r3, #16
 8005754:	d103      	bne.n	800575e <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2210      	movs	r2, #16
 800575c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2258      	movs	r2, #88	; 0x58
 8005762:	5a9a      	ldrh	r2, [r3, r2]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	0011      	movs	r1, r2
 8005768:	0018      	movs	r0, r3
 800576a:	f7ff fab9 	bl	8004ce0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800576e:	e00c      	b.n	800578a <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	0018      	movs	r0, r3
 8005774:	f7fb fd7a 	bl	800126c <HAL_UART_RxCpltCallback>
}
 8005778:	e007      	b.n	800578a <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	699a      	ldr	r2, [r3, #24]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2108      	movs	r1, #8
 8005786:	430a      	orrs	r2, r1
 8005788:	619a      	str	r2, [r3, #24]
}
 800578a:	46c0      	nop			; (mov r8, r8)
 800578c:	46bd      	mov	sp, r7
 800578e:	b014      	add	sp, #80	; 0x50
 8005790:	bd80      	pop	{r7, pc}
 8005792:	46c0      	nop			; (mov r8, r8)
 8005794:	fffffedf 	.word	0xfffffedf
 8005798:	fbffffff 	.word	0xfbffffff

0800579c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b094      	sub	sp, #80	; 0x50
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80057a4:	204e      	movs	r0, #78	; 0x4e
 80057a6:	183b      	adds	r3, r7, r0
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	215c      	movs	r1, #92	; 0x5c
 80057ac:	5a52      	ldrh	r2, [r2, r1]
 80057ae:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2280      	movs	r2, #128	; 0x80
 80057b4:	589b      	ldr	r3, [r3, r2]
 80057b6:	2b22      	cmp	r3, #34	; 0x22
 80057b8:	d000      	beq.n	80057bc <UART_RxISR_16BIT+0x20>
 80057ba:	e0ba      	b.n	8005932 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	214c      	movs	r1, #76	; 0x4c
 80057c2:	187b      	adds	r3, r7, r1
 80057c4:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80057c6:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057cc:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 80057ce:	187b      	adds	r3, r7, r1
 80057d0:	183a      	adds	r2, r7, r0
 80057d2:	881b      	ldrh	r3, [r3, #0]
 80057d4:	8812      	ldrh	r2, [r2, #0]
 80057d6:	4013      	ands	r3, r2
 80057d8:	b29a      	uxth	r2, r3
 80057da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057dc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057e2:	1c9a      	adds	r2, r3, #2
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	225a      	movs	r2, #90	; 0x5a
 80057ec:	5a9b      	ldrh	r3, [r3, r2]
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	3b01      	subs	r3, #1
 80057f2:	b299      	uxth	r1, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	225a      	movs	r2, #90	; 0x5a
 80057f8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	225a      	movs	r2, #90	; 0x5a
 80057fe:	5a9b      	ldrh	r3, [r3, r2]
 8005800:	b29b      	uxth	r3, r3
 8005802:	2b00      	cmp	r3, #0
 8005804:	d000      	beq.n	8005808 <UART_RxISR_16BIT+0x6c>
 8005806:	e09c      	b.n	8005942 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005808:	f3ef 8310 	mrs	r3, PRIMASK
 800580c:	623b      	str	r3, [r7, #32]
  return(result);
 800580e:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005810:	647b      	str	r3, [r7, #68]	; 0x44
 8005812:	2301      	movs	r3, #1
 8005814:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005818:	f383 8810 	msr	PRIMASK, r3
}
 800581c:	46c0      	nop			; (mov r8, r8)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4948      	ldr	r1, [pc, #288]	; (800594c <UART_RxISR_16BIT+0x1b0>)
 800582a:	400a      	ands	r2, r1
 800582c:	601a      	str	r2, [r3, #0]
 800582e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005830:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005834:	f383 8810 	msr	PRIMASK, r3
}
 8005838:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800583a:	f3ef 8310 	mrs	r3, PRIMASK
 800583e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8005840:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005842:	643b      	str	r3, [r7, #64]	; 0x40
 8005844:	2301      	movs	r3, #1
 8005846:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584a:	f383 8810 	msr	PRIMASK, r3
}
 800584e:	46c0      	nop			; (mov r8, r8)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	689a      	ldr	r2, [r3, #8]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2101      	movs	r1, #1
 800585c:	438a      	bics	r2, r1
 800585e:	609a      	str	r2, [r3, #8]
 8005860:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005862:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005866:	f383 8810 	msr	PRIMASK, r3
}
 800586a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2280      	movs	r2, #128	; 0x80
 8005870:	2120      	movs	r1, #32
 8005872:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	685a      	ldr	r2, [r3, #4]
 8005886:	2380      	movs	r3, #128	; 0x80
 8005888:	041b      	lsls	r3, r3, #16
 800588a:	4013      	ands	r3, r2
 800588c:	d018      	beq.n	80058c0 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800588e:	f3ef 8310 	mrs	r3, PRIMASK
 8005892:	617b      	str	r3, [r7, #20]
  return(result);
 8005894:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005896:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005898:	2301      	movs	r3, #1
 800589a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	f383 8810 	msr	PRIMASK, r3
}
 80058a2:	46c0      	nop			; (mov r8, r8)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4928      	ldr	r1, [pc, #160]	; (8005950 <UART_RxISR_16BIT+0x1b4>)
 80058b0:	400a      	ands	r2, r1
 80058b2:	601a      	str	r2, [r3, #0]
 80058b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058b6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	f383 8810 	msr	PRIMASK, r3
}
 80058be:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d12f      	bne.n	8005928 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058ce:	f3ef 8310 	mrs	r3, PRIMASK
 80058d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80058d4:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80058d8:	2301      	movs	r3, #1
 80058da:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f383 8810 	msr	PRIMASK, r3
}
 80058e2:	46c0      	nop			; (mov r8, r8)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2110      	movs	r1, #16
 80058f0:	438a      	bics	r2, r1
 80058f2:	601a      	str	r2, [r3, #0]
 80058f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	f383 8810 	msr	PRIMASK, r3
}
 80058fe:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	69db      	ldr	r3, [r3, #28]
 8005906:	2210      	movs	r2, #16
 8005908:	4013      	ands	r3, r2
 800590a:	2b10      	cmp	r3, #16
 800590c:	d103      	bne.n	8005916 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2210      	movs	r2, #16
 8005914:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2258      	movs	r2, #88	; 0x58
 800591a:	5a9a      	ldrh	r2, [r3, r2]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	0011      	movs	r1, r2
 8005920:	0018      	movs	r0, r3
 8005922:	f7ff f9dd 	bl	8004ce0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005926:	e00c      	b.n	8005942 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	0018      	movs	r0, r3
 800592c:	f7fb fc9e 	bl	800126c <HAL_UART_RxCpltCallback>
}
 8005930:	e007      	b.n	8005942 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	699a      	ldr	r2, [r3, #24]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2108      	movs	r1, #8
 800593e:	430a      	orrs	r2, r1
 8005940:	619a      	str	r2, [r3, #24]
}
 8005942:	46c0      	nop			; (mov r8, r8)
 8005944:	46bd      	mov	sp, r7
 8005946:	b014      	add	sp, #80	; 0x50
 8005948:	bd80      	pop	{r7, pc}
 800594a:	46c0      	nop			; (mov r8, r8)
 800594c:	fffffedf 	.word	0xfffffedf
 8005950:	fbffffff 	.word	0xfbffffff

08005954 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800595c:	46c0      	nop			; (mov r8, r8)
 800595e:	46bd      	mov	sp, r7
 8005960:	b002      	add	sp, #8
 8005962:	bd80      	pop	{r7, pc}

08005964 <__errno>:
 8005964:	4b01      	ldr	r3, [pc, #4]	; (800596c <__errno+0x8>)
 8005966:	6818      	ldr	r0, [r3, #0]
 8005968:	4770      	bx	lr
 800596a:	46c0      	nop			; (mov r8, r8)
 800596c:	200001bc 	.word	0x200001bc

08005970 <__libc_init_array>:
 8005970:	b570      	push	{r4, r5, r6, lr}
 8005972:	2600      	movs	r6, #0
 8005974:	4d0c      	ldr	r5, [pc, #48]	; (80059a8 <__libc_init_array+0x38>)
 8005976:	4c0d      	ldr	r4, [pc, #52]	; (80059ac <__libc_init_array+0x3c>)
 8005978:	1b64      	subs	r4, r4, r5
 800597a:	10a4      	asrs	r4, r4, #2
 800597c:	42a6      	cmp	r6, r4
 800597e:	d109      	bne.n	8005994 <__libc_init_array+0x24>
 8005980:	2600      	movs	r6, #0
 8005982:	f000 f8f1 	bl	8005b68 <_init>
 8005986:	4d0a      	ldr	r5, [pc, #40]	; (80059b0 <__libc_init_array+0x40>)
 8005988:	4c0a      	ldr	r4, [pc, #40]	; (80059b4 <__libc_init_array+0x44>)
 800598a:	1b64      	subs	r4, r4, r5
 800598c:	10a4      	asrs	r4, r4, #2
 800598e:	42a6      	cmp	r6, r4
 8005990:	d105      	bne.n	800599e <__libc_init_array+0x2e>
 8005992:	bd70      	pop	{r4, r5, r6, pc}
 8005994:	00b3      	lsls	r3, r6, #2
 8005996:	58eb      	ldr	r3, [r5, r3]
 8005998:	4798      	blx	r3
 800599a:	3601      	adds	r6, #1
 800599c:	e7ee      	b.n	800597c <__libc_init_array+0xc>
 800599e:	00b3      	lsls	r3, r6, #2
 80059a0:	58eb      	ldr	r3, [r5, r3]
 80059a2:	4798      	blx	r3
 80059a4:	3601      	adds	r6, #1
 80059a6:	e7f2      	b.n	800598e <__libc_init_array+0x1e>
 80059a8:	08005be4 	.word	0x08005be4
 80059ac:	08005be4 	.word	0x08005be4
 80059b0:	08005be4 	.word	0x08005be4
 80059b4:	08005be8 	.word	0x08005be8

080059b8 <malloc>:
 80059b8:	b510      	push	{r4, lr}
 80059ba:	4b03      	ldr	r3, [pc, #12]	; (80059c8 <malloc+0x10>)
 80059bc:	0001      	movs	r1, r0
 80059be:	6818      	ldr	r0, [r3, #0]
 80059c0:	f000 f838 	bl	8005a34 <_malloc_r>
 80059c4:	bd10      	pop	{r4, pc}
 80059c6:	46c0      	nop			; (mov r8, r8)
 80059c8:	200001bc 	.word	0x200001bc

080059cc <memcpy>:
 80059cc:	2300      	movs	r3, #0
 80059ce:	b510      	push	{r4, lr}
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d100      	bne.n	80059d6 <memcpy+0xa>
 80059d4:	bd10      	pop	{r4, pc}
 80059d6:	5ccc      	ldrb	r4, [r1, r3]
 80059d8:	54c4      	strb	r4, [r0, r3]
 80059da:	3301      	adds	r3, #1
 80059dc:	e7f8      	b.n	80059d0 <memcpy+0x4>

080059de <memset>:
 80059de:	0003      	movs	r3, r0
 80059e0:	1882      	adds	r2, r0, r2
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d100      	bne.n	80059e8 <memset+0xa>
 80059e6:	4770      	bx	lr
 80059e8:	7019      	strb	r1, [r3, #0]
 80059ea:	3301      	adds	r3, #1
 80059ec:	e7f9      	b.n	80059e2 <memset+0x4>
	...

080059f0 <sbrk_aligned>:
 80059f0:	b570      	push	{r4, r5, r6, lr}
 80059f2:	4e0f      	ldr	r6, [pc, #60]	; (8005a30 <sbrk_aligned+0x40>)
 80059f4:	000d      	movs	r5, r1
 80059f6:	6831      	ldr	r1, [r6, #0]
 80059f8:	0004      	movs	r4, r0
 80059fa:	2900      	cmp	r1, #0
 80059fc:	d102      	bne.n	8005a04 <sbrk_aligned+0x14>
 80059fe:	f000 f88f 	bl	8005b20 <_sbrk_r>
 8005a02:	6030      	str	r0, [r6, #0]
 8005a04:	0029      	movs	r1, r5
 8005a06:	0020      	movs	r0, r4
 8005a08:	f000 f88a 	bl	8005b20 <_sbrk_r>
 8005a0c:	1c43      	adds	r3, r0, #1
 8005a0e:	d00a      	beq.n	8005a26 <sbrk_aligned+0x36>
 8005a10:	2303      	movs	r3, #3
 8005a12:	1cc5      	adds	r5, r0, #3
 8005a14:	439d      	bics	r5, r3
 8005a16:	42a8      	cmp	r0, r5
 8005a18:	d007      	beq.n	8005a2a <sbrk_aligned+0x3a>
 8005a1a:	1a29      	subs	r1, r5, r0
 8005a1c:	0020      	movs	r0, r4
 8005a1e:	f000 f87f 	bl	8005b20 <_sbrk_r>
 8005a22:	1c43      	adds	r3, r0, #1
 8005a24:	d101      	bne.n	8005a2a <sbrk_aligned+0x3a>
 8005a26:	2501      	movs	r5, #1
 8005a28:	426d      	negs	r5, r5
 8005a2a:	0028      	movs	r0, r5
 8005a2c:	bd70      	pop	{r4, r5, r6, pc}
 8005a2e:	46c0      	nop			; (mov r8, r8)
 8005a30:	20000ea4 	.word	0x20000ea4

08005a34 <_malloc_r>:
 8005a34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a36:	2203      	movs	r2, #3
 8005a38:	1ccb      	adds	r3, r1, #3
 8005a3a:	4393      	bics	r3, r2
 8005a3c:	3308      	adds	r3, #8
 8005a3e:	0006      	movs	r6, r0
 8005a40:	001f      	movs	r7, r3
 8005a42:	2b0c      	cmp	r3, #12
 8005a44:	d232      	bcs.n	8005aac <_malloc_r+0x78>
 8005a46:	270c      	movs	r7, #12
 8005a48:	42b9      	cmp	r1, r7
 8005a4a:	d831      	bhi.n	8005ab0 <_malloc_r+0x7c>
 8005a4c:	0030      	movs	r0, r6
 8005a4e:	f000 f879 	bl	8005b44 <__malloc_lock>
 8005a52:	4d32      	ldr	r5, [pc, #200]	; (8005b1c <_malloc_r+0xe8>)
 8005a54:	682b      	ldr	r3, [r5, #0]
 8005a56:	001c      	movs	r4, r3
 8005a58:	2c00      	cmp	r4, #0
 8005a5a:	d12e      	bne.n	8005aba <_malloc_r+0x86>
 8005a5c:	0039      	movs	r1, r7
 8005a5e:	0030      	movs	r0, r6
 8005a60:	f7ff ffc6 	bl	80059f0 <sbrk_aligned>
 8005a64:	0004      	movs	r4, r0
 8005a66:	1c43      	adds	r3, r0, #1
 8005a68:	d11e      	bne.n	8005aa8 <_malloc_r+0x74>
 8005a6a:	682c      	ldr	r4, [r5, #0]
 8005a6c:	0025      	movs	r5, r4
 8005a6e:	2d00      	cmp	r5, #0
 8005a70:	d14a      	bne.n	8005b08 <_malloc_r+0xd4>
 8005a72:	6823      	ldr	r3, [r4, #0]
 8005a74:	0029      	movs	r1, r5
 8005a76:	18e3      	adds	r3, r4, r3
 8005a78:	0030      	movs	r0, r6
 8005a7a:	9301      	str	r3, [sp, #4]
 8005a7c:	f000 f850 	bl	8005b20 <_sbrk_r>
 8005a80:	9b01      	ldr	r3, [sp, #4]
 8005a82:	4283      	cmp	r3, r0
 8005a84:	d143      	bne.n	8005b0e <_malloc_r+0xda>
 8005a86:	6823      	ldr	r3, [r4, #0]
 8005a88:	3703      	adds	r7, #3
 8005a8a:	1aff      	subs	r7, r7, r3
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	439f      	bics	r7, r3
 8005a90:	3708      	adds	r7, #8
 8005a92:	2f0c      	cmp	r7, #12
 8005a94:	d200      	bcs.n	8005a98 <_malloc_r+0x64>
 8005a96:	270c      	movs	r7, #12
 8005a98:	0039      	movs	r1, r7
 8005a9a:	0030      	movs	r0, r6
 8005a9c:	f7ff ffa8 	bl	80059f0 <sbrk_aligned>
 8005aa0:	1c43      	adds	r3, r0, #1
 8005aa2:	d034      	beq.n	8005b0e <_malloc_r+0xda>
 8005aa4:	6823      	ldr	r3, [r4, #0]
 8005aa6:	19df      	adds	r7, r3, r7
 8005aa8:	6027      	str	r7, [r4, #0]
 8005aaa:	e013      	b.n	8005ad4 <_malloc_r+0xa0>
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	dacb      	bge.n	8005a48 <_malloc_r+0x14>
 8005ab0:	230c      	movs	r3, #12
 8005ab2:	2500      	movs	r5, #0
 8005ab4:	6033      	str	r3, [r6, #0]
 8005ab6:	0028      	movs	r0, r5
 8005ab8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005aba:	6822      	ldr	r2, [r4, #0]
 8005abc:	1bd1      	subs	r1, r2, r7
 8005abe:	d420      	bmi.n	8005b02 <_malloc_r+0xce>
 8005ac0:	290b      	cmp	r1, #11
 8005ac2:	d917      	bls.n	8005af4 <_malloc_r+0xc0>
 8005ac4:	19e2      	adds	r2, r4, r7
 8005ac6:	6027      	str	r7, [r4, #0]
 8005ac8:	42a3      	cmp	r3, r4
 8005aca:	d111      	bne.n	8005af0 <_malloc_r+0xbc>
 8005acc:	602a      	str	r2, [r5, #0]
 8005ace:	6863      	ldr	r3, [r4, #4]
 8005ad0:	6011      	str	r1, [r2, #0]
 8005ad2:	6053      	str	r3, [r2, #4]
 8005ad4:	0030      	movs	r0, r6
 8005ad6:	0025      	movs	r5, r4
 8005ad8:	f000 f83c 	bl	8005b54 <__malloc_unlock>
 8005adc:	2207      	movs	r2, #7
 8005ade:	350b      	adds	r5, #11
 8005ae0:	1d23      	adds	r3, r4, #4
 8005ae2:	4395      	bics	r5, r2
 8005ae4:	1aea      	subs	r2, r5, r3
 8005ae6:	429d      	cmp	r5, r3
 8005ae8:	d0e5      	beq.n	8005ab6 <_malloc_r+0x82>
 8005aea:	1b5b      	subs	r3, r3, r5
 8005aec:	50a3      	str	r3, [r4, r2]
 8005aee:	e7e2      	b.n	8005ab6 <_malloc_r+0x82>
 8005af0:	605a      	str	r2, [r3, #4]
 8005af2:	e7ec      	b.n	8005ace <_malloc_r+0x9a>
 8005af4:	6862      	ldr	r2, [r4, #4]
 8005af6:	42a3      	cmp	r3, r4
 8005af8:	d101      	bne.n	8005afe <_malloc_r+0xca>
 8005afa:	602a      	str	r2, [r5, #0]
 8005afc:	e7ea      	b.n	8005ad4 <_malloc_r+0xa0>
 8005afe:	605a      	str	r2, [r3, #4]
 8005b00:	e7e8      	b.n	8005ad4 <_malloc_r+0xa0>
 8005b02:	0023      	movs	r3, r4
 8005b04:	6864      	ldr	r4, [r4, #4]
 8005b06:	e7a7      	b.n	8005a58 <_malloc_r+0x24>
 8005b08:	002c      	movs	r4, r5
 8005b0a:	686d      	ldr	r5, [r5, #4]
 8005b0c:	e7af      	b.n	8005a6e <_malloc_r+0x3a>
 8005b0e:	230c      	movs	r3, #12
 8005b10:	0030      	movs	r0, r6
 8005b12:	6033      	str	r3, [r6, #0]
 8005b14:	f000 f81e 	bl	8005b54 <__malloc_unlock>
 8005b18:	e7cd      	b.n	8005ab6 <_malloc_r+0x82>
 8005b1a:	46c0      	nop			; (mov r8, r8)
 8005b1c:	20000ea0 	.word	0x20000ea0

08005b20 <_sbrk_r>:
 8005b20:	2300      	movs	r3, #0
 8005b22:	b570      	push	{r4, r5, r6, lr}
 8005b24:	4d06      	ldr	r5, [pc, #24]	; (8005b40 <_sbrk_r+0x20>)
 8005b26:	0004      	movs	r4, r0
 8005b28:	0008      	movs	r0, r1
 8005b2a:	602b      	str	r3, [r5, #0]
 8005b2c:	f7fb fe00 	bl	8001730 <_sbrk>
 8005b30:	1c43      	adds	r3, r0, #1
 8005b32:	d103      	bne.n	8005b3c <_sbrk_r+0x1c>
 8005b34:	682b      	ldr	r3, [r5, #0]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d000      	beq.n	8005b3c <_sbrk_r+0x1c>
 8005b3a:	6023      	str	r3, [r4, #0]
 8005b3c:	bd70      	pop	{r4, r5, r6, pc}
 8005b3e:	46c0      	nop			; (mov r8, r8)
 8005b40:	20000ea8 	.word	0x20000ea8

08005b44 <__malloc_lock>:
 8005b44:	b510      	push	{r4, lr}
 8005b46:	4802      	ldr	r0, [pc, #8]	; (8005b50 <__malloc_lock+0xc>)
 8005b48:	f000 f80c 	bl	8005b64 <__retarget_lock_acquire_recursive>
 8005b4c:	bd10      	pop	{r4, pc}
 8005b4e:	46c0      	nop			; (mov r8, r8)
 8005b50:	20000eac 	.word	0x20000eac

08005b54 <__malloc_unlock>:
 8005b54:	b510      	push	{r4, lr}
 8005b56:	4802      	ldr	r0, [pc, #8]	; (8005b60 <__malloc_unlock+0xc>)
 8005b58:	f000 f805 	bl	8005b66 <__retarget_lock_release_recursive>
 8005b5c:	bd10      	pop	{r4, pc}
 8005b5e:	46c0      	nop			; (mov r8, r8)
 8005b60:	20000eac 	.word	0x20000eac

08005b64 <__retarget_lock_acquire_recursive>:
 8005b64:	4770      	bx	lr

08005b66 <__retarget_lock_release_recursive>:
 8005b66:	4770      	bx	lr

08005b68 <_init>:
 8005b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b6a:	46c0      	nop			; (mov r8, r8)
 8005b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b6e:	bc08      	pop	{r3}
 8005b70:	469e      	mov	lr, r3
 8005b72:	4770      	bx	lr

08005b74 <_fini>:
 8005b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b76:	46c0      	nop			; (mov r8, r8)
 8005b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b7a:	bc08      	pop	{r3}
 8005b7c:	469e      	mov	lr, r3
 8005b7e:	4770      	bx	lr
