
1404-Reveil_Matrice_STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005688  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08005748  08005748  00015748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005794  08005794  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005794  08005794  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005794  08005794  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005794  08005794  00015794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005798  08005798  00015798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800579c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c90  20000070  0800580c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d00  0800580c  00020d00  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b13  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025c7  00000000  00000000  00030bab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec8  00000000  00000000  00033178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dc0  00000000  00000000  00034040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019554  00000000  00000000  00034e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012668  00000000  00000000  0004e354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009304e  00000000  00000000  000609bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f3a0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036e0  00000000  00000000  000f3a5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005730 	.word	0x08005730

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08005730 	.word	0x08005730

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <ws2812_start>:
/* Variables -----------------------------------------------*/
static uint8_t LEDbuffer[LED_BUFFER_SIZE];
extern TIM_HandleTypeDef htim2;

/* Functions -----------------------------------------------*/
void ws2812_start(void) {
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
	fillBufferBlack();
 80003f8:	f000 f89a 	bl	8000530 <fillBufferBlack>
	htim2.Init.Period = TIMER_PERIOD - 1;
 80003fc:	4b07      	ldr	r3, [pc, #28]	; (800041c <ws2812_start+0x28>)
 80003fe:	2209      	movs	r2, #9
 8000400:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Init(&htim2);
 8000402:	4b06      	ldr	r3, [pc, #24]	; (800041c <ws2812_start+0x28>)
 8000404:	0018      	movs	r0, r3
 8000406:	f002 fe77 	bl	80030f8 <HAL_TIM_Base_Init>
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *) LEDbuffer,
 800040a:	4b05      	ldr	r3, [pc, #20]	; (8000420 <ws2812_start+0x2c>)
 800040c:	4a05      	ldr	r2, [pc, #20]	; (8000424 <ws2812_start+0x30>)
 800040e:	4803      	ldr	r0, [pc, #12]	; (800041c <ws2812_start+0x28>)
 8000410:	2100      	movs	r1, #0
 8000412:	f002 ff19 	bl	8003248 <HAL_TIM_PWM_Start_DMA>
				LED_BUFFER_SIZE);
	//HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	20000b74 	.word	0x20000b74
 8000420:	00000a61 	.word	0x00000a61
 8000424:	2000008c 	.word	0x2000008c

08000428 <setLEDcolor>:
void ws2812_update(void) {
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *) LEDbuffer,
			LED_BUFFER_SIZE);
}

void setLEDcolor(uint32_t LEDnumber, uint8_t RED, uint8_t GREEN, uint8_t BLUE) {
 8000428:	b590      	push	{r4, r7, lr}
 800042a:	b08b      	sub	sp, #44	; 0x2c
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
 8000430:	000c      	movs	r4, r1
 8000432:	0010      	movs	r0, r2
 8000434:	0019      	movs	r1, r3
 8000436:	1cfb      	adds	r3, r7, #3
 8000438:	1c22      	adds	r2, r4, #0
 800043a:	701a      	strb	r2, [r3, #0]
 800043c:	1cbb      	adds	r3, r7, #2
 800043e:	1c02      	adds	r2, r0, #0
 8000440:	701a      	strb	r2, [r3, #0]
 8000442:	1c7b      	adds	r3, r7, #1
 8000444:	1c0a      	adds	r2, r1, #0
 8000446:	701a      	strb	r2, [r3, #0]
	uint8_t tempBuffer[24];
	uint32_t i;
	uint32_t LEDindex;
	LEDindex = LEDnumber % LED_NUMBER;
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	215e      	movs	r1, #94	; 0x5e
 800044c:	0018      	movs	r0, r3
 800044e:	f7ff fee1 	bl	8000214 <__aeabi_uidivmod>
 8000452:	000b      	movs	r3, r1
 8000454:	623b      	str	r3, [r7, #32]

	for (i = 0; i < 8; i++) // GREEN data
 8000456:	2300      	movs	r3, #0
 8000458:	627b      	str	r3, [r7, #36]	; 0x24
 800045a:	e013      	b.n	8000484 <setLEDcolor+0x5c>
		tempBuffer[i] = ((GREEN << i) & 0x80) ? WS2812_1 : WS2812_0;
 800045c:	1cbb      	adds	r3, r7, #2
 800045e:	781a      	ldrb	r2, [r3, #0]
 8000460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000462:	409a      	lsls	r2, r3
 8000464:	0013      	movs	r3, r2
 8000466:	2280      	movs	r2, #128	; 0x80
 8000468:	4013      	ands	r3, r2
 800046a:	d001      	beq.n	8000470 <setLEDcolor+0x48>
 800046c:	2106      	movs	r1, #6
 800046e:	e000      	b.n	8000472 <setLEDcolor+0x4a>
 8000470:	2103      	movs	r1, #3
 8000472:	2308      	movs	r3, #8
 8000474:	18fa      	adds	r2, r7, r3
 8000476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000478:	18d3      	adds	r3, r2, r3
 800047a:	1c0a      	adds	r2, r1, #0
 800047c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) // GREEN data
 800047e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000480:	3301      	adds	r3, #1
 8000482:	627b      	str	r3, [r7, #36]	; 0x24
 8000484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000486:	2b07      	cmp	r3, #7
 8000488:	d9e8      	bls.n	800045c <setLEDcolor+0x34>
	for (i = 0; i < 8; i++) // RED
 800048a:	2300      	movs	r3, #0
 800048c:	627b      	str	r3, [r7, #36]	; 0x24
 800048e:	e012      	b.n	80004b6 <setLEDcolor+0x8e>
		tempBuffer[8 + i] = ((RED << i) & 0x80) ? WS2812_1 : WS2812_0;
 8000490:	1cfb      	adds	r3, r7, #3
 8000492:	781a      	ldrb	r2, [r3, #0]
 8000494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000496:	409a      	lsls	r2, r3
 8000498:	0013      	movs	r3, r2
 800049a:	2280      	movs	r2, #128	; 0x80
 800049c:	4013      	ands	r3, r2
 800049e:	d001      	beq.n	80004a4 <setLEDcolor+0x7c>
 80004a0:	2106      	movs	r1, #6
 80004a2:	e000      	b.n	80004a6 <setLEDcolor+0x7e>
 80004a4:	2103      	movs	r1, #3
 80004a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004a8:	3308      	adds	r3, #8
 80004aa:	2208      	movs	r2, #8
 80004ac:	18ba      	adds	r2, r7, r2
 80004ae:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < 8; i++) // RED
 80004b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004b2:	3301      	adds	r3, #1
 80004b4:	627b      	str	r3, [r7, #36]	; 0x24
 80004b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004b8:	2b07      	cmp	r3, #7
 80004ba:	d9e9      	bls.n	8000490 <setLEDcolor+0x68>
	for (i = 0; i < 8; i++) // BLUE
 80004bc:	2300      	movs	r3, #0
 80004be:	627b      	str	r3, [r7, #36]	; 0x24
 80004c0:	e012      	b.n	80004e8 <setLEDcolor+0xc0>
		tempBuffer[16 + i] = ((BLUE << i) & 0x80) ? WS2812_1 : WS2812_0;
 80004c2:	1c7b      	adds	r3, r7, #1
 80004c4:	781a      	ldrb	r2, [r3, #0]
 80004c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004c8:	409a      	lsls	r2, r3
 80004ca:	0013      	movs	r3, r2
 80004cc:	2280      	movs	r2, #128	; 0x80
 80004ce:	4013      	ands	r3, r2
 80004d0:	d001      	beq.n	80004d6 <setLEDcolor+0xae>
 80004d2:	2106      	movs	r1, #6
 80004d4:	e000      	b.n	80004d8 <setLEDcolor+0xb0>
 80004d6:	2103      	movs	r1, #3
 80004d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004da:	3310      	adds	r3, #16
 80004dc:	2208      	movs	r2, #8
 80004de:	18ba      	adds	r2, r7, r2
 80004e0:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < 8; i++) // BLUE
 80004e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004e4:	3301      	adds	r3, #1
 80004e6:	627b      	str	r3, [r7, #36]	; 0x24
 80004e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004ea:	2b07      	cmp	r3, #7
 80004ec:	d9e9      	bls.n	80004c2 <setLEDcolor+0x9a>

	for (i = 0; i < 24; i++)
 80004ee:	2300      	movs	r3, #0
 80004f0:	627b      	str	r3, [r7, #36]	; 0x24
 80004f2:	e012      	b.n	800051a <setLEDcolor+0xf2>
		LEDbuffer[RESET_SLOTS_BEGIN + LEDindex * 24 + i] = tempBuffer[i];
 80004f4:	6a3a      	ldr	r2, [r7, #32]
 80004f6:	0013      	movs	r3, r2
 80004f8:	005b      	lsls	r3, r3, #1
 80004fa:	189b      	adds	r3, r3, r2
 80004fc:	00db      	lsls	r3, r3, #3
 80004fe:	001a      	movs	r2, r3
 8000500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000502:	18d3      	adds	r3, r2, r3
 8000504:	33c8      	adds	r3, #200	; 0xc8
 8000506:	2208      	movs	r2, #8
 8000508:	18b9      	adds	r1, r7, r2
 800050a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800050c:	188a      	adds	r2, r1, r2
 800050e:	7811      	ldrb	r1, [r2, #0]
 8000510:	4a06      	ldr	r2, [pc, #24]	; (800052c <setLEDcolor+0x104>)
 8000512:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < 24; i++)
 8000514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000516:	3301      	adds	r3, #1
 8000518:	627b      	str	r3, [r7, #36]	; 0x24
 800051a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800051c:	2b17      	cmp	r3, #23
 800051e:	d9e9      	bls.n	80004f4 <setLEDcolor+0xcc>
}
 8000520:	46c0      	nop			; (mov r8, r8)
 8000522:	46c0      	nop			; (mov r8, r8)
 8000524:	46bd      	mov	sp, r7
 8000526:	b00b      	add	sp, #44	; 0x2c
 8000528:	bd90      	pop	{r4, r7, pc}
 800052a:	46c0      	nop			; (mov r8, r8)
 800052c:	2000008c 	.word	0x2000008c

08000530 <fillBufferBlack>:

	for (index = 0; index < LED_NUMBER; index++)
		setLEDcolor(index, RED, GREEN, BLUE);
}

void fillBufferBlack(void) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
	/*Fill LED buffer - ALL OFF*/
	uint32_t index, buffIndex;
	buffIndex = 0;
 8000536:	2300      	movs	r3, #0
 8000538:	603b      	str	r3, [r7, #0]

	for (index = 0; index < RESET_SLOTS_BEGIN; index++) {
 800053a:	2300      	movs	r3, #0
 800053c:	607b      	str	r3, [r7, #4]
 800053e:	e00a      	b.n	8000556 <fillBufferBlack+0x26>
		LEDbuffer[buffIndex] = WS2812_RESET;
 8000540:	4a1f      	ldr	r2, [pc, #124]	; (80005c0 <fillBufferBlack+0x90>)
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	18d3      	adds	r3, r2, r3
 8000546:	2200      	movs	r2, #0
 8000548:	701a      	strb	r2, [r3, #0]
		buffIndex++;
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	3301      	adds	r3, #1
 800054e:	603b      	str	r3, [r7, #0]
	for (index = 0; index < RESET_SLOTS_BEGIN; index++) {
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	3301      	adds	r3, #1
 8000554:	607b      	str	r3, [r7, #4]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	2bc7      	cmp	r3, #199	; 0xc7
 800055a:	d9f1      	bls.n	8000540 <fillBufferBlack+0x10>
	}
	for (index = 0; index < LED_DATA_SIZE; index++) {
 800055c:	2300      	movs	r3, #0
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	e00a      	b.n	8000578 <fillBufferBlack+0x48>
		LEDbuffer[buffIndex] = WS2812_0;
 8000562:	4a17      	ldr	r2, [pc, #92]	; (80005c0 <fillBufferBlack+0x90>)
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	18d3      	adds	r3, r2, r3
 8000568:	2203      	movs	r2, #3
 800056a:	701a      	strb	r2, [r3, #0]
		buffIndex++;
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	3301      	adds	r3, #1
 8000570:	603b      	str	r3, [r7, #0]
	for (index = 0; index < LED_DATA_SIZE; index++) {
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	3301      	adds	r3, #1
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	687a      	ldr	r2, [r7, #4]
 800057a:	238d      	movs	r3, #141	; 0x8d
 800057c:	011b      	lsls	r3, r3, #4
 800057e:	429a      	cmp	r2, r3
 8000580:	d3ef      	bcc.n	8000562 <fillBufferBlack+0x32>
	}
	LEDbuffer[buffIndex] = WS2812_0;
 8000582:	4a0f      	ldr	r2, [pc, #60]	; (80005c0 <fillBufferBlack+0x90>)
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	18d3      	adds	r3, r2, r3
 8000588:	2203      	movs	r2, #3
 800058a:	701a      	strb	r2, [r3, #0]
	buffIndex++;
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	3301      	adds	r3, #1
 8000590:	603b      	str	r3, [r7, #0]
	for (index = 0; index < RESET_SLOTS_END; index++) {
 8000592:	2300      	movs	r3, #0
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	e00a      	b.n	80005ae <fillBufferBlack+0x7e>
		LEDbuffer[buffIndex] = 0;
 8000598:	4a09      	ldr	r2, [pc, #36]	; (80005c0 <fillBufferBlack+0x90>)
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	18d3      	adds	r3, r2, r3
 800059e:	2200      	movs	r2, #0
 80005a0:	701a      	strb	r2, [r3, #0]
		buffIndex++;
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	3301      	adds	r3, #1
 80005a6:	603b      	str	r3, [r7, #0]
	for (index = 0; index < RESET_SLOTS_END; index++) {
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	3301      	adds	r3, #1
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	2bc7      	cmp	r3, #199	; 0xc7
 80005b2:	d9f1      	bls.n	8000598 <fillBufferBlack+0x68>
	}
}
 80005b4:	46c0      	nop			; (mov r8, r8)
 80005b6:	46c0      	nop			; (mov r8, r8)
 80005b8:	46bd      	mov	sp, r7
 80005ba:	b002      	add	sp, #8
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	2000008c 	.word	0x2000008c

080005c4 <sendCanvas>:
}



// Fonction pour mettre à jour l'affichage LED
void sendCanvas(Canvas* canvas) {
 80005c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
    // Copiez les pixels du canevas vers l'écran LED
    for (uint16_t i = 0; i < canvas->numCols * canvas->numRows -1; i++) {  // -1 car résolution bug affichage photodiode inexistante
 80005cc:	230e      	movs	r3, #14
 80005ce:	18fb      	adds	r3, r7, r3
 80005d0:	2200      	movs	r2, #0
 80005d2:	801a      	strh	r2, [r3, #0]
 80005d4:	e026      	b.n	8000624 <sendCanvas+0x60>
        setLEDcolor(i, canvas -> pixels[i].R, canvas -> pixels[i].G, canvas -> pixels[i].B);
 80005d6:	260e      	movs	r6, #14
 80005d8:	19bb      	adds	r3, r7, r6
 80005da:	8818      	ldrh	r0, [r3, #0]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	6899      	ldr	r1, [r3, #8]
 80005e0:	19bb      	adds	r3, r7, r6
 80005e2:	881a      	ldrh	r2, [r3, #0]
 80005e4:	0013      	movs	r3, r2
 80005e6:	005b      	lsls	r3, r3, #1
 80005e8:	189b      	adds	r3, r3, r2
 80005ea:	18cb      	adds	r3, r1, r3
 80005ec:	781c      	ldrb	r4, [r3, #0]
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	6899      	ldr	r1, [r3, #8]
 80005f2:	19bb      	adds	r3, r7, r6
 80005f4:	881a      	ldrh	r2, [r3, #0]
 80005f6:	0013      	movs	r3, r2
 80005f8:	005b      	lsls	r3, r3, #1
 80005fa:	189b      	adds	r3, r3, r2
 80005fc:	18cb      	adds	r3, r1, r3
 80005fe:	785d      	ldrb	r5, [r3, #1]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	6899      	ldr	r1, [r3, #8]
 8000604:	19bb      	adds	r3, r7, r6
 8000606:	881a      	ldrh	r2, [r3, #0]
 8000608:	0013      	movs	r3, r2
 800060a:	005b      	lsls	r3, r3, #1
 800060c:	189b      	adds	r3, r3, r2
 800060e:	18cb      	adds	r3, r1, r3
 8000610:	789b      	ldrb	r3, [r3, #2]
 8000612:	002a      	movs	r2, r5
 8000614:	0021      	movs	r1, r4
 8000616:	f7ff ff07 	bl	8000428 <setLEDcolor>
    for (uint16_t i = 0; i < canvas->numCols * canvas->numRows -1; i++) {  // -1 car résolution bug affichage photodiode inexistante
 800061a:	19bb      	adds	r3, r7, r6
 800061c:	881a      	ldrh	r2, [r3, #0]
 800061e:	19bb      	adds	r3, r7, r6
 8000620:	3201      	adds	r2, #1
 8000622:	801a      	strh	r2, [r3, #0]
 8000624:	230e      	movs	r3, #14
 8000626:	18fb      	adds	r3, r7, r3
 8000628:	881a      	ldrh	r2, [r3, #0]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	6819      	ldr	r1, [r3, #0]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	685b      	ldr	r3, [r3, #4]
 8000632:	434b      	muls	r3, r1
 8000634:	3b01      	subs	r3, #1
 8000636:	429a      	cmp	r2, r3
 8000638:	dbcd      	blt.n	80005d6 <sendCanvas+0x12>
    }
}
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	46c0      	nop			; (mov r8, r8)
 800063e:	46bd      	mov	sp, r7
 8000640:	b005      	add	sp, #20
 8000642:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000644 <getPixel>:

Pixel* getPixel(Canvas* canvas, int x, int y) {
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	60f8      	str	r0, [r7, #12]
 800064c:	60b9      	str	r1, [r7, #8]
 800064e:	607a      	str	r2, [r7, #4]
    if (x > 0 && x <= canvas->numCols && y > 0 && y <= canvas->numRows) {
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	2b00      	cmp	r3, #0
 8000654:	dd1c      	ble.n	8000690 <getPixel+0x4c>
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	68ba      	ldr	r2, [r7, #8]
 800065c:	429a      	cmp	r2, r3
 800065e:	dc17      	bgt.n	8000690 <getPixel+0x4c>
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	2b00      	cmp	r3, #0
 8000664:	dd14      	ble.n	8000690 <getPixel+0x4c>
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	685b      	ldr	r3, [r3, #4]
 800066a:	687a      	ldr	r2, [r7, #4]
 800066c:	429a      	cmp	r2, r3
 800066e:	dc0f      	bgt.n	8000690 <getPixel+0x4c>
        return &canvas->pixels[(x-1)*canvas->numRows+(y-1)];
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	689a      	ldr	r2, [r3, #8]
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	1e59      	subs	r1, r3, #1
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	685b      	ldr	r3, [r3, #4]
 800067c:	4359      	muls	r1, r3
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	3b01      	subs	r3, #1
 8000682:	18cb      	adds	r3, r1, r3
 8000684:	0019      	movs	r1, r3
 8000686:	000b      	movs	r3, r1
 8000688:	005b      	lsls	r3, r3, #1
 800068a:	185b      	adds	r3, r3, r1
 800068c:	18d3      	adds	r3, r2, r3
 800068e:	e000      	b.n	8000692 <getPixel+0x4e>
    } else {
        return NULL; // Coordonnées hors limites
 8000690:	2300      	movs	r3, #0
    }
}
 8000692:	0018      	movs	r0, r3
 8000694:	46bd      	mov	sp, r7
 8000696:	b004      	add	sp, #16
 8000698:	bd80      	pop	{r7, pc}

0800069a <colorDiagonal>:


void colorDiagonal(Canvas* canvas, Pixel encre, uint8_t diagSum) {
 800069a:	b580      	push	{r7, lr}
 800069c:	b088      	sub	sp, #32
 800069e:	af00      	add	r7, sp, #0
 80006a0:	60f8      	str	r0, [r7, #12]
 80006a2:	2308      	movs	r3, #8
 80006a4:	18fb      	adds	r3, r7, r3
 80006a6:	6019      	str	r1, [r3, #0]
 80006a8:	1dfb      	adds	r3, r7, #7
 80006aa:	701a      	strb	r2, [r3, #0]


    // Parcourir la diagonale où x + y == 7
    for (int x = 0; x <= canvas->numCols; x++) {
 80006ac:	2300      	movs	r3, #0
 80006ae:	61fb      	str	r3, [r7, #28]
 80006b0:	e023      	b.n	80006fa <colorDiagonal+0x60>
        int y = diagSum - x; // Calcul de la coordonnée y correspondante
 80006b2:	1dfb      	adds	r3, r7, #7
 80006b4:	781a      	ldrb	r2, [r3, #0]
 80006b6:	69fb      	ldr	r3, [r7, #28]
 80006b8:	1ad3      	subs	r3, r2, r3
 80006ba:	61bb      	str	r3, [r7, #24]
        if (y >= 0 && y <= canvas->numRows) {
 80006bc:	69bb      	ldr	r3, [r7, #24]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	db18      	blt.n	80006f4 <colorDiagonal+0x5a>
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	685b      	ldr	r3, [r3, #4]
 80006c6:	69ba      	ldr	r2, [r7, #24]
 80006c8:	429a      	cmp	r2, r3
 80006ca:	dc13      	bgt.n	80006f4 <colorDiagonal+0x5a>
            Pixel* pixel = getPixel(canvas, x, y);
 80006cc:	69ba      	ldr	r2, [r7, #24]
 80006ce:	69f9      	ldr	r1, [r7, #28]
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	0018      	movs	r0, r3
 80006d4:	f7ff ffb6 	bl	8000644 <getPixel>
 80006d8:	0003      	movs	r3, r0
 80006da:	617b      	str	r3, [r7, #20]
            if (pixel) {
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d008      	beq.n	80006f4 <colorDiagonal+0x5a>
                // Mettre à jour la couleur
                *pixel=encre;
 80006e2:	697a      	ldr	r2, [r7, #20]
 80006e4:	2308      	movs	r3, #8
 80006e6:	18fb      	adds	r3, r7, r3
 80006e8:	0010      	movs	r0, r2
 80006ea:	0019      	movs	r1, r3
 80006ec:	2303      	movs	r3, #3
 80006ee:	001a      	movs	r2, r3
 80006f0:	f004 ff50 	bl	8005594 <memcpy>
    for (int x = 0; x <= canvas->numCols; x++) {
 80006f4:	69fb      	ldr	r3, [r7, #28]
 80006f6:	3301      	adds	r3, #1
 80006f8:	61fb      	str	r3, [r7, #28]
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	69fa      	ldr	r2, [r7, #28]
 8000700:	429a      	cmp	r2, r3
 8000702:	ddd6      	ble.n	80006b2 <colorDiagonal+0x18>
            }
        }
    }
}
 8000704:	46c0      	nop			; (mov r8, r8)
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	46bd      	mov	sp, r7
 800070a:	b008      	add	sp, #32
 800070c:	bd80      	pop	{r7, pc}
	...

08000710 <HSVtoPixel>:
 *  Created on: Oct 11, 2023
 *      Author: alyvasseur
 */
#include "includes.h"

Pixel HSVtoPixel(uint8_t h, uint8_t v) {
 8000710:	b5b0      	push	{r4, r5, r7, lr}
 8000712:	b086      	sub	sp, #24
 8000714:	af00      	add	r7, sp, #0
 8000716:	0002      	movs	r2, r0
 8000718:	1dfb      	adds	r3, r7, #7
 800071a:	701a      	strb	r2, [r3, #0]
 800071c:	1dbb      	adds	r3, r7, #6
 800071e:	1c0a      	adds	r2, r1, #0
 8000720:	701a      	strb	r2, [r3, #0]
    Pixel pixel;
    unsigned char region, remainder, p, q, t;

    region = h / 43;
 8000722:	2517      	movs	r5, #23
 8000724:	197c      	adds	r4, r7, r5
 8000726:	1dfb      	adds	r3, r7, #7
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	212b      	movs	r1, #43	; 0x2b
 800072c:	0018      	movs	r0, r3
 800072e:	f7ff fceb 	bl	8000108 <__udivsi3>
 8000732:	0003      	movs	r3, r0
 8000734:	7023      	strb	r3, [r4, #0]
    remainder = (h - (region * 43)) * 6;
 8000736:	1dfb      	adds	r3, r7, #7
 8000738:	7819      	ldrb	r1, [r3, #0]
 800073a:	0028      	movs	r0, r5
 800073c:	183b      	adds	r3, r7, r0
 800073e:	781a      	ldrb	r2, [r3, #0]
 8000740:	0013      	movs	r3, r2
 8000742:	069b      	lsls	r3, r3, #26
 8000744:	1a9b      	subs	r3, r3, r2
 8000746:	009b      	lsls	r3, r3, #2
 8000748:	189b      	adds	r3, r3, r2
 800074a:	009b      	lsls	r3, r3, #2
 800074c:	189b      	adds	r3, r3, r2
 800074e:	009b      	lsls	r3, r3, #2
 8000750:	189b      	adds	r3, r3, r2
 8000752:	18cb      	adds	r3, r1, r3
 8000754:	b2db      	uxtb	r3, r3
 8000756:	2416      	movs	r4, #22
 8000758:	193a      	adds	r2, r7, r4
 800075a:	1c19      	adds	r1, r3, #0
 800075c:	1c0b      	adds	r3, r1, #0
 800075e:	18db      	adds	r3, r3, r3
 8000760:	185b      	adds	r3, r3, r1
 8000762:	18db      	adds	r3, r3, r3
 8000764:	7013      	strb	r3, [r2, #0]

    p = (v * (255 - 255)) >> 8;
 8000766:	2315      	movs	r3, #21
 8000768:	18fb      	adds	r3, r7, r3
 800076a:	2200      	movs	r2, #0
 800076c:	701a      	strb	r2, [r3, #0]
    q = (v * (255 - ((255 * remainder) >> 8)) >> 8);
 800076e:	1dbb      	adds	r3, r7, #6
 8000770:	7819      	ldrb	r1, [r3, #0]
 8000772:	193b      	adds	r3, r7, r4
 8000774:	781a      	ldrb	r2, [r3, #0]
 8000776:	0013      	movs	r3, r2
 8000778:	021b      	lsls	r3, r3, #8
 800077a:	1a9b      	subs	r3, r3, r2
 800077c:	121b      	asrs	r3, r3, #8
 800077e:	22ff      	movs	r2, #255	; 0xff
 8000780:	1ad3      	subs	r3, r2, r3
 8000782:	434b      	muls	r3, r1
 8000784:	121a      	asrs	r2, r3, #8
 8000786:	2314      	movs	r3, #20
 8000788:	18fb      	adds	r3, r7, r3
 800078a:	701a      	strb	r2, [r3, #0]
    t = (v * (255 - ((255 * (255 - remainder)) >> 8)) >> 8);
 800078c:	1dbb      	adds	r3, r7, #6
 800078e:	7819      	ldrb	r1, [r3, #0]
 8000790:	193b      	adds	r3, r7, r4
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	22ff      	movs	r2, #255	; 0xff
 8000796:	1ad2      	subs	r2, r2, r3
 8000798:	0013      	movs	r3, r2
 800079a:	021b      	lsls	r3, r3, #8
 800079c:	1a9b      	subs	r3, r3, r2
 800079e:	121b      	asrs	r3, r3, #8
 80007a0:	22ff      	movs	r2, #255	; 0xff
 80007a2:	1ad3      	subs	r3, r2, r3
 80007a4:	434b      	muls	r3, r1
 80007a6:	121a      	asrs	r2, r3, #8
 80007a8:	2313      	movs	r3, #19
 80007aa:	18fb      	adds	r3, r7, r3
 80007ac:	701a      	strb	r2, [r3, #0]

    switch (region) {
 80007ae:	183b      	adds	r3, r7, r0
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	2b04      	cmp	r3, #4
 80007b4:	d854      	bhi.n	8000860 <HSVtoPixel+0x150>
 80007b6:	009a      	lsls	r2, r3, #2
 80007b8:	4b4d      	ldr	r3, [pc, #308]	; (80008f0 <HSVtoPixel+0x1e0>)
 80007ba:	18d3      	adds	r3, r2, r3
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	469f      	mov	pc, r3
        case 0:
            pixel.R = v;
 80007c0:	210c      	movs	r1, #12
 80007c2:	187b      	adds	r3, r7, r1
 80007c4:	1dba      	adds	r2, r7, #6
 80007c6:	7812      	ldrb	r2, [r2, #0]
 80007c8:	701a      	strb	r2, [r3, #0]
            pixel.G = t;
 80007ca:	187b      	adds	r3, r7, r1
 80007cc:	2213      	movs	r2, #19
 80007ce:	18ba      	adds	r2, r7, r2
 80007d0:	7812      	ldrb	r2, [r2, #0]
 80007d2:	705a      	strb	r2, [r3, #1]
            pixel.B = p;
 80007d4:	187b      	adds	r3, r7, r1
 80007d6:	2215      	movs	r2, #21
 80007d8:	18ba      	adds	r2, r7, r2
 80007da:	7812      	ldrb	r2, [r2, #0]
 80007dc:	709a      	strb	r2, [r3, #2]
            break;
 80007de:	e04f      	b.n	8000880 <HSVtoPixel+0x170>
        case 1:
            pixel.R = q;
 80007e0:	210c      	movs	r1, #12
 80007e2:	187b      	adds	r3, r7, r1
 80007e4:	2214      	movs	r2, #20
 80007e6:	18ba      	adds	r2, r7, r2
 80007e8:	7812      	ldrb	r2, [r2, #0]
 80007ea:	701a      	strb	r2, [r3, #0]
            pixel.G = v;
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	1dba      	adds	r2, r7, #6
 80007f0:	7812      	ldrb	r2, [r2, #0]
 80007f2:	705a      	strb	r2, [r3, #1]
            pixel.B = p;
 80007f4:	187b      	adds	r3, r7, r1
 80007f6:	2215      	movs	r2, #21
 80007f8:	18ba      	adds	r2, r7, r2
 80007fa:	7812      	ldrb	r2, [r2, #0]
 80007fc:	709a      	strb	r2, [r3, #2]
            break;
 80007fe:	e03f      	b.n	8000880 <HSVtoPixel+0x170>
        case 2:
            pixel.R = p;
 8000800:	210c      	movs	r1, #12
 8000802:	187b      	adds	r3, r7, r1
 8000804:	2215      	movs	r2, #21
 8000806:	18ba      	adds	r2, r7, r2
 8000808:	7812      	ldrb	r2, [r2, #0]
 800080a:	701a      	strb	r2, [r3, #0]
            pixel.G = v;
 800080c:	187b      	adds	r3, r7, r1
 800080e:	1dba      	adds	r2, r7, #6
 8000810:	7812      	ldrb	r2, [r2, #0]
 8000812:	705a      	strb	r2, [r3, #1]
            pixel.B = t;
 8000814:	187b      	adds	r3, r7, r1
 8000816:	2213      	movs	r2, #19
 8000818:	18ba      	adds	r2, r7, r2
 800081a:	7812      	ldrb	r2, [r2, #0]
 800081c:	709a      	strb	r2, [r3, #2]
            break;
 800081e:	e02f      	b.n	8000880 <HSVtoPixel+0x170>
        case 3:
            pixel.R = p;
 8000820:	210c      	movs	r1, #12
 8000822:	187b      	adds	r3, r7, r1
 8000824:	2215      	movs	r2, #21
 8000826:	18ba      	adds	r2, r7, r2
 8000828:	7812      	ldrb	r2, [r2, #0]
 800082a:	701a      	strb	r2, [r3, #0]
            pixel.G = q;
 800082c:	187b      	adds	r3, r7, r1
 800082e:	2214      	movs	r2, #20
 8000830:	18ba      	adds	r2, r7, r2
 8000832:	7812      	ldrb	r2, [r2, #0]
 8000834:	705a      	strb	r2, [r3, #1]
            pixel.B = v;
 8000836:	187b      	adds	r3, r7, r1
 8000838:	1dba      	adds	r2, r7, #6
 800083a:	7812      	ldrb	r2, [r2, #0]
 800083c:	709a      	strb	r2, [r3, #2]
            break;
 800083e:	e01f      	b.n	8000880 <HSVtoPixel+0x170>
        case 4:
            pixel.R = t;
 8000840:	210c      	movs	r1, #12
 8000842:	187b      	adds	r3, r7, r1
 8000844:	2213      	movs	r2, #19
 8000846:	18ba      	adds	r2, r7, r2
 8000848:	7812      	ldrb	r2, [r2, #0]
 800084a:	701a      	strb	r2, [r3, #0]
            pixel.G = p;
 800084c:	187b      	adds	r3, r7, r1
 800084e:	2215      	movs	r2, #21
 8000850:	18ba      	adds	r2, r7, r2
 8000852:	7812      	ldrb	r2, [r2, #0]
 8000854:	705a      	strb	r2, [r3, #1]
            pixel.B = v;
 8000856:	187b      	adds	r3, r7, r1
 8000858:	1dba      	adds	r2, r7, #6
 800085a:	7812      	ldrb	r2, [r2, #0]
 800085c:	709a      	strb	r2, [r3, #2]
            break;
 800085e:	e00f      	b.n	8000880 <HSVtoPixel+0x170>
        default:
            pixel.R = v;
 8000860:	210c      	movs	r1, #12
 8000862:	187b      	adds	r3, r7, r1
 8000864:	1dba      	adds	r2, r7, #6
 8000866:	7812      	ldrb	r2, [r2, #0]
 8000868:	701a      	strb	r2, [r3, #0]
            pixel.G = p;
 800086a:	187b      	adds	r3, r7, r1
 800086c:	2215      	movs	r2, #21
 800086e:	18ba      	adds	r2, r7, r2
 8000870:	7812      	ldrb	r2, [r2, #0]
 8000872:	705a      	strb	r2, [r3, #1]
            pixel.B = q;
 8000874:	187b      	adds	r3, r7, r1
 8000876:	2214      	movs	r2, #20
 8000878:	18ba      	adds	r2, r7, r2
 800087a:	7812      	ldrb	r2, [r2, #0]
 800087c:	709a      	strb	r2, [r3, #2]
            break;
 800087e:	46c0      	nop			; (mov r8, r8)
    }

    // Appliquer le masque pour forcer les valeurs à être paires
    pixel.R &= 0xFE; // Le masque 0xFE force le dernier bit à 0.
 8000880:	210c      	movs	r1, #12
 8000882:	187b      	adds	r3, r7, r1
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	2201      	movs	r2, #1
 8000888:	4393      	bics	r3, r2
 800088a:	b2da      	uxtb	r2, r3
 800088c:	187b      	adds	r3, r7, r1
 800088e:	701a      	strb	r2, [r3, #0]
    pixel.G &= 0xFE;
 8000890:	187b      	adds	r3, r7, r1
 8000892:	785b      	ldrb	r3, [r3, #1]
 8000894:	2201      	movs	r2, #1
 8000896:	4393      	bics	r3, r2
 8000898:	b2da      	uxtb	r2, r3
 800089a:	187b      	adds	r3, r7, r1
 800089c:	705a      	strb	r2, [r3, #1]
    pixel.B &= 0xFE;
 800089e:	187b      	adds	r3, r7, r1
 80008a0:	789b      	ldrb	r3, [r3, #2]
 80008a2:	2201      	movs	r2, #1
 80008a4:	4393      	bics	r3, r2
 80008a6:	b2da      	uxtb	r2, r3
 80008a8:	187b      	adds	r3, r7, r1
 80008aa:	709a      	strb	r2, [r3, #2]

    return pixel;
 80008ac:	2010      	movs	r0, #16
 80008ae:	183b      	adds	r3, r7, r0
 80008b0:	187a      	adds	r2, r7, r1
 80008b2:	8811      	ldrh	r1, [r2, #0]
 80008b4:	8019      	strh	r1, [r3, #0]
 80008b6:	7892      	ldrb	r2, [r2, #2]
 80008b8:	709a      	strb	r2, [r3, #2]
 80008ba:	183a      	adds	r2, r7, r0
 80008bc:	2300      	movs	r3, #0
 80008be:	7811      	ldrb	r1, [r2, #0]
 80008c0:	20ff      	movs	r0, #255	; 0xff
 80008c2:	4001      	ands	r1, r0
 80008c4:	20ff      	movs	r0, #255	; 0xff
 80008c6:	4383      	bics	r3, r0
 80008c8:	430b      	orrs	r3, r1
 80008ca:	7851      	ldrb	r1, [r2, #1]
 80008cc:	20ff      	movs	r0, #255	; 0xff
 80008ce:	4001      	ands	r1, r0
 80008d0:	0209      	lsls	r1, r1, #8
 80008d2:	4808      	ldr	r0, [pc, #32]	; (80008f4 <HSVtoPixel+0x1e4>)
 80008d4:	4003      	ands	r3, r0
 80008d6:	430b      	orrs	r3, r1
 80008d8:	7892      	ldrb	r2, [r2, #2]
 80008da:	21ff      	movs	r1, #255	; 0xff
 80008dc:	400a      	ands	r2, r1
 80008de:	0412      	lsls	r2, r2, #16
 80008e0:	4905      	ldr	r1, [pc, #20]	; (80008f8 <HSVtoPixel+0x1e8>)
 80008e2:	400b      	ands	r3, r1
 80008e4:	4313      	orrs	r3, r2
}
 80008e6:	0018      	movs	r0, r3
 80008e8:	46bd      	mov	sp, r7
 80008ea:	b006      	add	sp, #24
 80008ec:	bdb0      	pop	{r4, r5, r7, pc}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	08005748 	.word	0x08005748
 80008f4:	ffff00ff 	.word	0xffff00ff
 80008f8:	ff00ffff 	.word	0xff00ffff

080008fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008fc:	b5b0      	push	{r4, r5, r7, lr}
 80008fe:	b088      	sub	sp, #32
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000902:	f000 fd77 	bl	80013f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000906:	f000 f89f 	bl	8000a48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800090a:	f000 fa35 	bl	8000d78 <MX_GPIO_Init>
  MX_DMA_Init();
 800090e:	f000 fa05 	bl	8000d1c <MX_DMA_Init>
  MX_TIM2_Init();
 8000912:	f000 f953 	bl	8000bbc <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000916:	f000 f9cf 	bl	8000cb8 <MX_USART1_UART_Init>
  MX_ADC_Init();
 800091a:	f000 f8f3 	bl	8000b04 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  ws2812_start();
 800091e:	f7ff fd69 	bl	80003f4 <ws2812_start>
  HAL_UART_Receive_IT(&huart1, Rx_data, 19);
 8000922:	4946      	ldr	r1, [pc, #280]	; (8000a3c <main+0x140>)
 8000924:	4b46      	ldr	r3, [pc, #280]	; (8000a40 <main+0x144>)
 8000926:	2213      	movs	r2, #19
 8000928:	0018      	movs	r0, r3
 800092a:	f003 fc7d 	bl	8004228 <HAL_UART_Receive_IT>
  HAL_ADC_Start(&hadc);
 800092e:	4b45      	ldr	r3, [pc, #276]	; (8000a44 <main+0x148>)
 8000930:	0018      	movs	r0, r3
 8000932:	f000 ff03 	bl	800173c <HAL_ADC_Start>

  uint8_t H =0;
 8000936:	231f      	movs	r3, #31
 8000938:	18fb      	adds	r3, r7, r3
 800093a:	2200      	movs	r2, #0
 800093c:	701a      	strb	r2, [r3, #0]
  Pixel backgroundColor=(Pixel){0,0,0};
 800093e:	2114      	movs	r1, #20
 8000940:	187b      	adds	r3, r7, r1
 8000942:	2200      	movs	r2, #0
 8000944:	701a      	strb	r2, [r3, #0]
 8000946:	187b      	adds	r3, r7, r1
 8000948:	2200      	movs	r2, #0
 800094a:	705a      	strb	r2, [r3, #1]
 800094c:	187b      	adds	r3, r7, r1
 800094e:	2200      	movs	r2, #0
 8000950:	709a      	strb	r2, [r3, #2]
  // Déclarez une instance de Canvas
  Canvas myCanvas;
  // Initialisez la structure Canvas
  myCanvas.numCols = NUM_COLS;
 8000952:	1d3b      	adds	r3, r7, #4
 8000954:	2213      	movs	r2, #19
 8000956:	601a      	str	r2, [r3, #0]
  myCanvas.numRows = NUM_ROWS;
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	2205      	movs	r2, #5
 800095c:	605a      	str	r2, [r3, #4]
  // Allouez de la mémoire pour les pixels
  myCanvas.pixels = malloc(sizeof(Pixel) * NUM_COLS * NUM_ROWS);
 800095e:	231e      	movs	r3, #30
 8000960:	33ff      	adds	r3, #255	; 0xff
 8000962:	0018      	movs	r0, r3
 8000964:	f004 fe0c 	bl	8005580 <malloc>
 8000968:	0003      	movs	r3, r0
 800096a:	001a      	movs	r2, r3
 800096c:	1d3b      	adds	r3, r7, #4
 800096e:	609a      	str	r2, [r3, #8]
  // Utilisez memset pour initialiser le tableau à zéro
  memset(myCanvas.pixels, 0, sizeof(Pixel) * NUM_COLS * NUM_ROWS);
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	689b      	ldr	r3, [r3, #8]
 8000974:	221e      	movs	r2, #30
 8000976:	32ff      	adds	r2, #255	; 0xff
 8000978:	2100      	movs	r1, #0
 800097a:	0018      	movs	r0, r3
 800097c:	f004 fe13 	bl	80055a6 <memset>
//
//	  ReadADC = HAL_ADC_GetValue(&hadc);



	  if(HAL_UART_Receive_IT(&huart1, Rx_data, 19) != HAL_BUSY)
 8000980:	492e      	ldr	r1, [pc, #184]	; (8000a3c <main+0x140>)
 8000982:	4b2f      	ldr	r3, [pc, #188]	; (8000a40 <main+0x144>)
 8000984:	2213      	movs	r2, #19
 8000986:	0018      	movs	r0, r3
 8000988:	f003 fc4e 	bl	8004228 <HAL_UART_Receive_IT>
 800098c:	0003      	movs	r3, r0
 800098e:	2b02      	cmp	r3, #2
 8000990:	d005      	beq.n	800099e <main+0xa2>
	  {
		  HAL_UART_Receive_IT(&huart1, Rx_data, 19);
 8000992:	492a      	ldr	r1, [pc, #168]	; (8000a3c <main+0x140>)
 8000994:	4b2a      	ldr	r3, [pc, #168]	; (8000a40 <main+0x144>)
 8000996:	2213      	movs	r2, #19
 8000998:	0018      	movs	r0, r3
 800099a:	f003 fc45 	bl	8004228 <HAL_UART_Receive_IT>
	  }
	  /**********Background***************/

	  for(uint8_t diag=1; diag<=23; diag++){
 800099e:	231e      	movs	r3, #30
 80009a0:	18fb      	adds	r3, r7, r3
 80009a2:	2201      	movs	r2, #1
 80009a4:	701a      	strb	r2, [r3, #0]
 80009a6:	e030      	b.n	8000a0a <main+0x10e>
		  colorDiagonal(&myCanvas, HSVtoPixel((H + (diag* 255 / 23))%255 ,255), diag);
 80009a8:	231f      	movs	r3, #31
 80009aa:	18fb      	adds	r3, r7, r3
 80009ac:	781c      	ldrb	r4, [r3, #0]
 80009ae:	251e      	movs	r5, #30
 80009b0:	197b      	adds	r3, r7, r5
 80009b2:	781a      	ldrb	r2, [r3, #0]
 80009b4:	0013      	movs	r3, r2
 80009b6:	021b      	lsls	r3, r3, #8
 80009b8:	1a9b      	subs	r3, r3, r2
 80009ba:	2117      	movs	r1, #23
 80009bc:	0018      	movs	r0, r3
 80009be:	f7ff fc2d 	bl	800021c <__divsi3>
 80009c2:	0003      	movs	r3, r0
 80009c4:	18e3      	adds	r3, r4, r3
 80009c6:	21ff      	movs	r1, #255	; 0xff
 80009c8:	0018      	movs	r0, r3
 80009ca:	f7ff fd0d 	bl	80003e8 <__aeabi_idivmod>
 80009ce:	000b      	movs	r3, r1
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	21ff      	movs	r1, #255	; 0xff
 80009d4:	0018      	movs	r0, r3
 80009d6:	f7ff fe9b 	bl	8000710 <HSVtoPixel>
 80009da:	0003      	movs	r3, r0
 80009dc:	001a      	movs	r2, r3
 80009de:	2018      	movs	r0, #24
 80009e0:	183b      	adds	r3, r7, r0
 80009e2:	1c11      	adds	r1, r2, #0
 80009e4:	7019      	strb	r1, [r3, #0]
 80009e6:	0411      	lsls	r1, r2, #16
 80009e8:	0e09      	lsrs	r1, r1, #24
 80009ea:	7059      	strb	r1, [r3, #1]
 80009ec:	0212      	lsls	r2, r2, #8
 80009ee:	0e12      	lsrs	r2, r2, #24
 80009f0:	709a      	strb	r2, [r3, #2]
 80009f2:	197b      	adds	r3, r7, r5
 80009f4:	781a      	ldrb	r2, [r3, #0]
 80009f6:	183b      	adds	r3, r7, r0
 80009f8:	1d38      	adds	r0, r7, #4
 80009fa:	6819      	ldr	r1, [r3, #0]
 80009fc:	f7ff fe4d 	bl	800069a <colorDiagonal>
	  for(uint8_t diag=1; diag<=23; diag++){
 8000a00:	197b      	adds	r3, r7, r5
 8000a02:	781a      	ldrb	r2, [r3, #0]
 8000a04:	197b      	adds	r3, r7, r5
 8000a06:	3201      	adds	r2, #1
 8000a08:	701a      	strb	r2, [r3, #0]
 8000a0a:	231e      	movs	r3, #30
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2b17      	cmp	r3, #23
 8000a12:	d9c9      	bls.n	80009a8 <main+0xac>
	  }
	  sendCanvas(&myCanvas);
 8000a14:	1d3b      	adds	r3, r7, #4
 8000a16:	0018      	movs	r0, r3
 8000a18:	f7ff fdd4 	bl	80005c4 <sendCanvas>

	  if (H >= 255){
 8000a1c:	221f      	movs	r2, #31
 8000a1e:	18bb      	adds	r3, r7, r2
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	2bff      	cmp	r3, #255	; 0xff
 8000a24:	d103      	bne.n	8000a2e <main+0x132>
		  H=0;
 8000a26:	18bb      	adds	r3, r7, r2
 8000a28:	2200      	movs	r2, #0
 8000a2a:	701a      	strb	r2, [r3, #0]
 8000a2c:	e7a8      	b.n	8000980 <main+0x84>
	  }
	  else{
		  H++;
 8000a2e:	211f      	movs	r1, #31
 8000a30:	187b      	adds	r3, r7, r1
 8000a32:	781a      	ldrb	r2, [r3, #0]
 8000a34:	187b      	adds	r3, r7, r1
 8000a36:	3201      	adds	r2, #1
 8000a38:	701a      	strb	r2, [r3, #0]
	  if(HAL_UART_Receive_IT(&huart1, Rx_data, 19) != HAL_BUSY)
 8000a3a:	e7a1      	b.n	8000980 <main+0x84>
 8000a3c:	20000cd4 	.word	0x20000cd4
 8000a40:	20000c00 	.word	0x20000c00
 8000a44:	20000af0 	.word	0x20000af0

08000a48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a48:	b590      	push	{r4, r7, lr}
 8000a4a:	b099      	sub	sp, #100	; 0x64
 8000a4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a4e:	242c      	movs	r4, #44	; 0x2c
 8000a50:	193b      	adds	r3, r7, r4
 8000a52:	0018      	movs	r0, r3
 8000a54:	2334      	movs	r3, #52	; 0x34
 8000a56:	001a      	movs	r2, r3
 8000a58:	2100      	movs	r1, #0
 8000a5a:	f004 fda4 	bl	80055a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a5e:	231c      	movs	r3, #28
 8000a60:	18fb      	adds	r3, r7, r3
 8000a62:	0018      	movs	r0, r3
 8000a64:	2310      	movs	r3, #16
 8000a66:	001a      	movs	r2, r3
 8000a68:	2100      	movs	r1, #0
 8000a6a:	f004 fd9c 	bl	80055a6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	0018      	movs	r0, r3
 8000a72:	2318      	movs	r3, #24
 8000a74:	001a      	movs	r2, r3
 8000a76:	2100      	movs	r1, #0
 8000a78:	f004 fd95 	bl	80055a6 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000a7c:	0021      	movs	r1, r4
 8000a7e:	187b      	adds	r3, r7, r1
 8000a80:	2212      	movs	r2, #18
 8000a82:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a84:	187b      	adds	r3, r7, r1
 8000a86:	2201      	movs	r2, #1
 8000a88:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000a8a:	187b      	adds	r3, r7, r1
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a90:	187b      	adds	r3, r7, r1
 8000a92:	2210      	movs	r2, #16
 8000a94:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000a96:	187b      	adds	r3, r7, r1
 8000a98:	2210      	movs	r2, #16
 8000a9a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a9c:	187b      	adds	r3, r7, r1
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa2:	187b      	adds	r3, r7, r1
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f001 fd47 	bl	8002538 <HAL_RCC_OscConfig>
 8000aaa:	1e03      	subs	r3, r0, #0
 8000aac:	d001      	beq.n	8000ab2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000aae:	f000 fa25 	bl	8000efc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab2:	211c      	movs	r1, #28
 8000ab4:	187b      	adds	r3, r7, r1
 8000ab6:	2207      	movs	r2, #7
 8000ab8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000aba:	187b      	adds	r3, r7, r1
 8000abc:	2200      	movs	r2, #0
 8000abe:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ac0:	187b      	adds	r3, r7, r1
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ac6:	187b      	adds	r3, r7, r1
 8000ac8:	2200      	movs	r2, #0
 8000aca:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000acc:	187b      	adds	r3, r7, r1
 8000ace:	2100      	movs	r1, #0
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f002 f8b7 	bl	8002c44 <HAL_RCC_ClockConfig>
 8000ad6:	1e03      	subs	r3, r0, #0
 8000ad8:	d001      	beq.n	8000ade <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000ada:	f000 fa0f 	bl	8000efc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aea:	1d3b      	adds	r3, r7, #4
 8000aec:	0018      	movs	r0, r3
 8000aee:	f002 fa15 	bl	8002f1c <HAL_RCCEx_PeriphCLKConfig>
 8000af2:	1e03      	subs	r3, r0, #0
 8000af4:	d001      	beq.n	8000afa <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000af6:	f000 fa01 	bl	8000efc <Error_Handler>
  }
}
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	46bd      	mov	sp, r7
 8000afe:	b019      	add	sp, #100	; 0x64
 8000b00:	bd90      	pop	{r4, r7, pc}
	...

08000b04 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	230c      	movs	r3, #12
 8000b10:	001a      	movs	r2, r3
 8000b12:	2100      	movs	r1, #0
 8000b14:	f004 fd47 	bl	80055a6 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000b18:	4b26      	ldr	r3, [pc, #152]	; (8000bb4 <MX_ADC_Init+0xb0>)
 8000b1a:	4a27      	ldr	r2, [pc, #156]	; (8000bb8 <MX_ADC_Init+0xb4>)
 8000b1c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b1e:	4b25      	ldr	r3, [pc, #148]	; (8000bb4 <MX_ADC_Init+0xb0>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000b24:	4b23      	ldr	r3, [pc, #140]	; (8000bb4 <MX_ADC_Init+0xb0>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b2a:	4b22      	ldr	r3, [pc, #136]	; (8000bb4 <MX_ADC_Init+0xb0>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000b30:	4b20      	ldr	r3, [pc, #128]	; (8000bb4 <MX_ADC_Init+0xb0>)
 8000b32:	2201      	movs	r2, #1
 8000b34:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b36:	4b1f      	ldr	r3, [pc, #124]	; (8000bb4 <MX_ADC_Init+0xb0>)
 8000b38:	2204      	movs	r2, #4
 8000b3a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000b3c:	4b1d      	ldr	r3, [pc, #116]	; (8000bb4 <MX_ADC_Init+0xb0>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000b42:	4b1c      	ldr	r3, [pc, #112]	; (8000bb4 <MX_ADC_Init+0xb0>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000b48:	4b1a      	ldr	r3, [pc, #104]	; (8000bb4 <MX_ADC_Init+0xb0>)
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000b4e:	4b19      	ldr	r3, [pc, #100]	; (8000bb4 <MX_ADC_Init+0xb0>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b54:	4b17      	ldr	r3, [pc, #92]	; (8000bb4 <MX_ADC_Init+0xb0>)
 8000b56:	22c2      	movs	r2, #194	; 0xc2
 8000b58:	32ff      	adds	r2, #255	; 0xff
 8000b5a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b5c:	4b15      	ldr	r3, [pc, #84]	; (8000bb4 <MX_ADC_Init+0xb0>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000b62:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <MX_ADC_Init+0xb0>)
 8000b64:	2224      	movs	r2, #36	; 0x24
 8000b66:	2100      	movs	r1, #0
 8000b68:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b6a:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <MX_ADC_Init+0xb0>)
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000b70:	4b10      	ldr	r3, [pc, #64]	; (8000bb4 <MX_ADC_Init+0xb0>)
 8000b72:	0018      	movs	r0, r3
 8000b74:	f000 fca2 	bl	80014bc <HAL_ADC_Init>
 8000b78:	1e03      	subs	r3, r0, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000b7c:	f000 f9be 	bl	8000efc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	2207      	movs	r2, #7
 8000b84:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2280      	movs	r2, #128	; 0x80
 8000b8a:	0152      	lsls	r2, r2, #5
 8000b8c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b8e:	1d3b      	adds	r3, r7, #4
 8000b90:	2280      	movs	r2, #128	; 0x80
 8000b92:	0552      	lsls	r2, r2, #21
 8000b94:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b96:	1d3a      	adds	r2, r7, #4
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <MX_ADC_Init+0xb0>)
 8000b9a:	0011      	movs	r1, r2
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	f000 fedd 	bl	800195c <HAL_ADC_ConfigChannel>
 8000ba2:	1e03      	subs	r3, r0, #0
 8000ba4:	d001      	beq.n	8000baa <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000ba6:	f000 f9a9 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000baa:	46c0      	nop			; (mov r8, r8)
 8000bac:	46bd      	mov	sp, r7
 8000bae:	b004      	add	sp, #16
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	46c0      	nop			; (mov r8, r8)
 8000bb4:	20000af0 	.word	0x20000af0
 8000bb8:	40012400 	.word	0x40012400

08000bbc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08e      	sub	sp, #56	; 0x38
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bc2:	2328      	movs	r3, #40	; 0x28
 8000bc4:	18fb      	adds	r3, r7, r3
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	2310      	movs	r3, #16
 8000bca:	001a      	movs	r2, r3
 8000bcc:	2100      	movs	r1, #0
 8000bce:	f004 fcea 	bl	80055a6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bd2:	2320      	movs	r3, #32
 8000bd4:	18fb      	adds	r3, r7, r3
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	2308      	movs	r3, #8
 8000bda:	001a      	movs	r2, r3
 8000bdc:	2100      	movs	r1, #0
 8000bde:	f004 fce2 	bl	80055a6 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	0018      	movs	r0, r3
 8000be6:	231c      	movs	r3, #28
 8000be8:	001a      	movs	r2, r3
 8000bea:	2100      	movs	r1, #0
 8000bec:	f004 fcdb 	bl	80055a6 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bf0:	4b30      	ldr	r3, [pc, #192]	; (8000cb4 <MX_TIM2_Init+0xf8>)
 8000bf2:	2280      	movs	r2, #128	; 0x80
 8000bf4:	05d2      	lsls	r2, r2, #23
 8000bf6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000bf8:	4b2e      	ldr	r3, [pc, #184]	; (8000cb4 <MX_TIM2_Init+0xf8>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bfe:	4b2d      	ldr	r3, [pc, #180]	; (8000cb4 <MX_TIM2_Init+0xf8>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 8000c04:	4b2b      	ldr	r3, [pc, #172]	; (8000cb4 <MX_TIM2_Init+0xf8>)
 8000c06:	2209      	movs	r2, #9
 8000c08:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c0a:	4b2a      	ldr	r3, [pc, #168]	; (8000cb4 <MX_TIM2_Init+0xf8>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c10:	4b28      	ldr	r3, [pc, #160]	; (8000cb4 <MX_TIM2_Init+0xf8>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c16:	4b27      	ldr	r3, [pc, #156]	; (8000cb4 <MX_TIM2_Init+0xf8>)
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f002 fa6d 	bl	80030f8 <HAL_TIM_Base_Init>
 8000c1e:	1e03      	subs	r3, r0, #0
 8000c20:	d001      	beq.n	8000c26 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000c22:	f000 f96b 	bl	8000efc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c26:	2128      	movs	r1, #40	; 0x28
 8000c28:	187b      	adds	r3, r7, r1
 8000c2a:	2280      	movs	r2, #128	; 0x80
 8000c2c:	0152      	lsls	r2, r2, #5
 8000c2e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c30:	187a      	adds	r2, r7, r1
 8000c32:	4b20      	ldr	r3, [pc, #128]	; (8000cb4 <MX_TIM2_Init+0xf8>)
 8000c34:	0011      	movs	r1, r2
 8000c36:	0018      	movs	r0, r3
 8000c38:	f002 fd76 	bl	8003728 <HAL_TIM_ConfigClockSource>
 8000c3c:	1e03      	subs	r3, r0, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000c40:	f000 f95c 	bl	8000efc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c44:	4b1b      	ldr	r3, [pc, #108]	; (8000cb4 <MX_TIM2_Init+0xf8>)
 8000c46:	0018      	movs	r0, r3
 8000c48:	f002 faa6 	bl	8003198 <HAL_TIM_PWM_Init>
 8000c4c:	1e03      	subs	r3, r0, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000c50:	f000 f954 	bl	8000efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c54:	2120      	movs	r1, #32
 8000c56:	187b      	adds	r3, r7, r1
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c5c:	187b      	adds	r3, r7, r1
 8000c5e:	2200      	movs	r2, #0
 8000c60:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c62:	187a      	adds	r2, r7, r1
 8000c64:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <MX_TIM2_Init+0xf8>)
 8000c66:	0011      	movs	r1, r2
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f003 fa31 	bl	80040d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c6e:	1e03      	subs	r3, r0, #0
 8000c70:	d001      	beq.n	8000c76 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000c72:	f000 f943 	bl	8000efc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c76:	1d3b      	adds	r3, r7, #4
 8000c78:	2260      	movs	r2, #96	; 0x60
 8000c7a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000c7c:	1d3b      	adds	r3, r7, #4
 8000c7e:	2200      	movs	r2, #0
 8000c80:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c88:	1d3b      	adds	r3, r7, #4
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c8e:	1d39      	adds	r1, r7, #4
 8000c90:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <MX_TIM2_Init+0xf8>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	0018      	movs	r0, r3
 8000c96:	f002 fc81 	bl	800359c <HAL_TIM_PWM_ConfigChannel>
 8000c9a:	1e03      	subs	r3, r0, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8000c9e:	f000 f92d 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ca2:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <MX_TIM2_Init+0xf8>)
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f000 fa15 	bl	80010d4 <HAL_TIM_MspPostInit>

}
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	46bd      	mov	sp, r7
 8000cae:	b00e      	add	sp, #56	; 0x38
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	20000b74 	.word	0x20000b74

08000cb8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cbc:	4b14      	ldr	r3, [pc, #80]	; (8000d10 <MX_USART1_UART_Init+0x58>)
 8000cbe:	4a15      	ldr	r2, [pc, #84]	; (8000d14 <MX_USART1_UART_Init+0x5c>)
 8000cc0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 250000;
 8000cc2:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <MX_USART1_UART_Init+0x58>)
 8000cc4:	4a14      	ldr	r2, [pc, #80]	; (8000d18 <MX_USART1_UART_Init+0x60>)
 8000cc6:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cc8:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <MX_USART1_UART_Init+0x58>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cce:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <MX_USART1_UART_Init+0x58>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cd4:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <MX_USART1_UART_Init+0x58>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cda:	4b0d      	ldr	r3, [pc, #52]	; (8000d10 <MX_USART1_UART_Init+0x58>)
 8000cdc:	220c      	movs	r2, #12
 8000cde:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ce0:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <MX_USART1_UART_Init+0x58>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ce6:	4b0a      	ldr	r3, [pc, #40]	; (8000d10 <MX_USART1_UART_Init+0x58>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cec:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <MX_USART1_UART_Init+0x58>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cf2:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <MX_USART1_UART_Init+0x58>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cf8:	4b05      	ldr	r3, [pc, #20]	; (8000d10 <MX_USART1_UART_Init+0x58>)
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f003 fa40 	bl	8004180 <HAL_UART_Init>
 8000d00:	1e03      	subs	r3, r0, #0
 8000d02:	d001      	beq.n	8000d08 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 8000d04:	f000 f8fa 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d08:	46c0      	nop			; (mov r8, r8)
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	20000c00 	.word	0x20000c00
 8000d14:	40013800 	.word	0x40013800
 8000d18:	0003d090 	.word	0x0003d090

08000d1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d22:	4b14      	ldr	r3, [pc, #80]	; (8000d74 <MX_DMA_Init+0x58>)
 8000d24:	695a      	ldr	r2, [r3, #20]
 8000d26:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <MX_DMA_Init+0x58>)
 8000d28:	2101      	movs	r1, #1
 8000d2a:	430a      	orrs	r2, r1
 8000d2c:	615a      	str	r2, [r3, #20]
 8000d2e:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <MX_DMA_Init+0x58>)
 8000d30:	695b      	ldr	r3, [r3, #20]
 8000d32:	2201      	movs	r2, #1
 8000d34:	4013      	ands	r3, r2
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	2009      	movs	r0, #9
 8000d40:	f001 f84a 	bl	8001dd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d44:	2009      	movs	r0, #9
 8000d46:	f001 f85c 	bl	8001e02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	200a      	movs	r0, #10
 8000d50:	f001 f842 	bl	8001dd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000d54:	200a      	movs	r0, #10
 8000d56:	f001 f854 	bl	8001e02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	200b      	movs	r0, #11
 8000d60:	f001 f83a 	bl	8001dd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8000d64:	200b      	movs	r0, #11
 8000d66:	f001 f84c 	bl	8001e02 <HAL_NVIC_EnableIRQ>

}
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	b002      	add	sp, #8
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	40021000 	.word	0x40021000

08000d78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d78:	b590      	push	{r4, r7, lr}
 8000d7a:	b089      	sub	sp, #36	; 0x24
 8000d7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7e:	240c      	movs	r4, #12
 8000d80:	193b      	adds	r3, r7, r4
 8000d82:	0018      	movs	r0, r3
 8000d84:	2314      	movs	r3, #20
 8000d86:	001a      	movs	r2, r3
 8000d88:	2100      	movs	r1, #0
 8000d8a:	f004 fc0c 	bl	80055a6 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d8e:	4b27      	ldr	r3, [pc, #156]	; (8000e2c <MX_GPIO_Init+0xb4>)
 8000d90:	695a      	ldr	r2, [r3, #20]
 8000d92:	4b26      	ldr	r3, [pc, #152]	; (8000e2c <MX_GPIO_Init+0xb4>)
 8000d94:	2180      	movs	r1, #128	; 0x80
 8000d96:	03c9      	lsls	r1, r1, #15
 8000d98:	430a      	orrs	r2, r1
 8000d9a:	615a      	str	r2, [r3, #20]
 8000d9c:	4b23      	ldr	r3, [pc, #140]	; (8000e2c <MX_GPIO_Init+0xb4>)
 8000d9e:	695a      	ldr	r2, [r3, #20]
 8000da0:	2380      	movs	r3, #128	; 0x80
 8000da2:	03db      	lsls	r3, r3, #15
 8000da4:	4013      	ands	r3, r2
 8000da6:	60bb      	str	r3, [r7, #8]
 8000da8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000daa:	4b20      	ldr	r3, [pc, #128]	; (8000e2c <MX_GPIO_Init+0xb4>)
 8000dac:	695a      	ldr	r2, [r3, #20]
 8000dae:	4b1f      	ldr	r3, [pc, #124]	; (8000e2c <MX_GPIO_Init+0xb4>)
 8000db0:	2180      	movs	r1, #128	; 0x80
 8000db2:	0289      	lsls	r1, r1, #10
 8000db4:	430a      	orrs	r2, r1
 8000db6:	615a      	str	r2, [r3, #20]
 8000db8:	4b1c      	ldr	r3, [pc, #112]	; (8000e2c <MX_GPIO_Init+0xb4>)
 8000dba:	695a      	ldr	r2, [r3, #20]
 8000dbc:	2380      	movs	r3, #128	; 0x80
 8000dbe:	029b      	lsls	r3, r3, #10
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	607b      	str	r3, [r7, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc6:	4b19      	ldr	r3, [pc, #100]	; (8000e2c <MX_GPIO_Init+0xb4>)
 8000dc8:	695a      	ldr	r2, [r3, #20]
 8000dca:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <MX_GPIO_Init+0xb4>)
 8000dcc:	2180      	movs	r1, #128	; 0x80
 8000dce:	02c9      	lsls	r1, r1, #11
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	615a      	str	r2, [r3, #20]
 8000dd4:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <MX_GPIO_Init+0xb4>)
 8000dd6:	695a      	ldr	r2, [r3, #20]
 8000dd8:	2380      	movs	r3, #128	; 0x80
 8000dda:	02db      	lsls	r3, r3, #11
 8000ddc:	4013      	ands	r3, r2
 8000dde:	603b      	str	r3, [r7, #0]
 8000de0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : SW4_Pin SW3_Pin */
  GPIO_InitStruct.Pin = SW4_Pin|SW3_Pin;
 8000de2:	193b      	adds	r3, r7, r4
 8000de4:	2290      	movs	r2, #144	; 0x90
 8000de6:	0112      	lsls	r2, r2, #4
 8000de8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dea:	193b      	adds	r3, r7, r4
 8000dec:	2200      	movs	r2, #0
 8000dee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	193b      	adds	r3, r7, r4
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df6:	193a      	adds	r2, r7, r4
 8000df8:	2390      	movs	r3, #144	; 0x90
 8000dfa:	05db      	lsls	r3, r3, #23
 8000dfc:	0011      	movs	r1, r2
 8000dfe:	0018      	movs	r0, r3
 8000e00:	f001 fa32 	bl	8002268 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 8000e04:	193b      	adds	r3, r7, r4
 8000e06:	2230      	movs	r2, #48	; 0x30
 8000e08:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e0a:	193b      	adds	r3, r7, r4
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	193b      	adds	r3, r7, r4
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e16:	193b      	adds	r3, r7, r4
 8000e18:	4a05      	ldr	r2, [pc, #20]	; (8000e30 <MX_GPIO_Init+0xb8>)
 8000e1a:	0019      	movs	r1, r3
 8000e1c:	0010      	movs	r0, r2
 8000e1e:	f001 fa23 	bl	8002268 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e22:	46c0      	nop			; (mov r8, r8)
 8000e24:	46bd      	mov	sp, r7
 8000e26:	b009      	add	sp, #36	; 0x24
 8000e28:	bd90      	pop	{r4, r7, pc}
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	48000400 	.word	0x48000400

08000e34 <HAL_UART_RxCpltCallback>:
* Interruption qui va mettre dans des variables la réception UART comme le	  *
* temps										 								  *
******************************************************************************/

void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]

	if(&huart1 == huart)
 8000e3c:	687a      	ldr	r2, [r7, #4]
 8000e3e:	4b1c      	ldr	r3, [pc, #112]	; (8000eb0 <HAL_UART_RxCpltCallback+0x7c>)
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d130      	bne.n	8000ea6 <HAL_UART_RxCpltCallback+0x72>
	{
		Heures_brt = Rx_data[4];	//Stock le data des heures, "brt" = brute
 8000e44:	4b1b      	ldr	r3, [pc, #108]	; (8000eb4 <HAL_UART_RxCpltCallback+0x80>)
 8000e46:	791a      	ldrb	r2, [r3, #4]
 8000e48:	4b1b      	ldr	r3, [pc, #108]	; (8000eb8 <HAL_UART_RxCpltCallback+0x84>)
 8000e4a:	701a      	strb	r2, [r3, #0]
		Minutes_brt = Rx_data[5];	//Stock le data des minutes
 8000e4c:	4b19      	ldr	r3, [pc, #100]	; (8000eb4 <HAL_UART_RxCpltCallback+0x80>)
 8000e4e:	795a      	ldrb	r2, [r3, #5]
 8000e50:	4b1a      	ldr	r3, [pc, #104]	; (8000ebc <HAL_UART_RxCpltCallback+0x88>)
 8000e52:	701a      	strb	r2, [r3, #0]

		Heures_U = Heures_brt & 0x0F;	//Traite le data pour avoir l'Unité des Heures
 8000e54:	4b18      	ldr	r3, [pc, #96]	; (8000eb8 <HAL_UART_RxCpltCallback+0x84>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	220f      	movs	r2, #15
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	b2da      	uxtb	r2, r3
 8000e5e:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <HAL_UART_RxCpltCallback+0x8c>)
 8000e60:	701a      	strb	r2, [r3, #0]

		Heures_D = (Heures_brt & 0xF0) >> 4;	//Traite le data pour avoir la Dizaine des Heures
 8000e62:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <HAL_UART_RxCpltCallback+0x84>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	091b      	lsrs	r3, r3, #4
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	4b16      	ldr	r3, [pc, #88]	; (8000ec4 <HAL_UART_RxCpltCallback+0x90>)
 8000e6c:	701a      	strb	r2, [r3, #0]

		Minutes_U = Minutes_brt & 0x0F;	//Traite le data pour avoir l'Unité des Minutes
 8000e6e:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <HAL_UART_RxCpltCallback+0x88>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	220f      	movs	r2, #15
 8000e74:	4013      	ands	r3, r2
 8000e76:	b2da      	uxtb	r2, r3
 8000e78:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <HAL_UART_RxCpltCallback+0x94>)
 8000e7a:	701a      	strb	r2, [r3, #0]

		Minutes_D = (Minutes_brt & 0xF0) >> 4;	//Traite le data pour avoir la Dizaine des Minutes
 8000e7c:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <HAL_UART_RxCpltCallback+0x88>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	091b      	lsrs	r3, r3, #4
 8000e82:	b2da      	uxtb	r2, r3
 8000e84:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <HAL_UART_RxCpltCallback+0x98>)
 8000e86:	701a      	strb	r2, [r3, #0]

		if(HAL_UART_Receive_IT(&huart1, Rx_data, 19) == HAL_ERROR)	//Réception d'UART lors d'une erreur
 8000e88:	490a      	ldr	r1, [pc, #40]	; (8000eb4 <HAL_UART_RxCpltCallback+0x80>)
 8000e8a:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <HAL_UART_RxCpltCallback+0x7c>)
 8000e8c:	2213      	movs	r2, #19
 8000e8e:	0018      	movs	r0, r3
 8000e90:	f003 f9ca 	bl	8004228 <HAL_UART_Receive_IT>
 8000e94:	0003      	movs	r3, r0
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d105      	bne.n	8000ea6 <HAL_UART_RxCpltCallback+0x72>
		{
			HAL_UART_Receive_IT(&huart1, Rx_data, 19);
 8000e9a:	4906      	ldr	r1, [pc, #24]	; (8000eb4 <HAL_UART_RxCpltCallback+0x80>)
 8000e9c:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <HAL_UART_RxCpltCallback+0x7c>)
 8000e9e:	2213      	movs	r2, #19
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	f003 f9c1 	bl	8004228 <HAL_UART_Receive_IT>
		}
	}
}
 8000ea6:	46c0      	nop			; (mov r8, r8)
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	b002      	add	sp, #8
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	46c0      	nop			; (mov r8, r8)
 8000eb0:	20000c00 	.word	0x20000c00
 8000eb4:	20000cd4 	.word	0x20000cd4
 8000eb8:	20000ccc 	.word	0x20000ccc
 8000ebc:	20000ccf 	.word	0x20000ccf
 8000ec0:	20000ccd 	.word	0x20000ccd
 8000ec4:	20000cce 	.word	0x20000cce
 8000ec8:	20000cd0 	.word	0x20000cd0
 8000ecc:	20000cd1 	.word	0x20000cd1

08000ed0 <HAL_UART_ErrorCallback>:
* Interruption lorsqu'il y a un problème dans la transmission UART qui permet *
* de refaire une réception									 				  *
******************************************************************************/

void HAL_UART_ErrorCallback (UART_HandleTypeDef * huart)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
	if(&huart1 == huart)
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <HAL_UART_ErrorCallback+0x24>)
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d105      	bne.n	8000eec <HAL_UART_ErrorCallback+0x1c>
	{
		HAL_UART_Receive_IT(&huart1, Rx_data, 19);
 8000ee0:	4905      	ldr	r1, [pc, #20]	; (8000ef8 <HAL_UART_ErrorCallback+0x28>)
 8000ee2:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <HAL_UART_ErrorCallback+0x24>)
 8000ee4:	2213      	movs	r2, #19
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	f003 f99e 	bl	8004228 <HAL_UART_Receive_IT>
	}
}
 8000eec:	46c0      	nop			; (mov r8, r8)
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	b002      	add	sp, #8
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20000c00 	.word	0x20000c00
 8000ef8:	20000cd4 	.word	0x20000cd4

08000efc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f00:	b672      	cpsid	i
}
 8000f02:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <Error_Handler+0x8>
	...

08000f08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0e:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <HAL_MspInit+0x44>)
 8000f10:	699a      	ldr	r2, [r3, #24]
 8000f12:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <HAL_MspInit+0x44>)
 8000f14:	2101      	movs	r1, #1
 8000f16:	430a      	orrs	r2, r1
 8000f18:	619a      	str	r2, [r3, #24]
 8000f1a:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <HAL_MspInit+0x44>)
 8000f1c:	699b      	ldr	r3, [r3, #24]
 8000f1e:	2201      	movs	r2, #1
 8000f20:	4013      	ands	r3, r2
 8000f22:	607b      	str	r3, [r7, #4]
 8000f24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f26:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <HAL_MspInit+0x44>)
 8000f28:	69da      	ldr	r2, [r3, #28]
 8000f2a:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <HAL_MspInit+0x44>)
 8000f2c:	2180      	movs	r1, #128	; 0x80
 8000f2e:	0549      	lsls	r1, r1, #21
 8000f30:	430a      	orrs	r2, r1
 8000f32:	61da      	str	r2, [r3, #28]
 8000f34:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <HAL_MspInit+0x44>)
 8000f36:	69da      	ldr	r2, [r3, #28]
 8000f38:	2380      	movs	r3, #128	; 0x80
 8000f3a:	055b      	lsls	r3, r3, #21
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	603b      	str	r3, [r7, #0]
 8000f40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	46bd      	mov	sp, r7
 8000f46:	b002      	add	sp, #8
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	40021000 	.word	0x40021000

08000f50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f50:	b590      	push	{r4, r7, lr}
 8000f52:	b08b      	sub	sp, #44	; 0x2c
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f58:	2414      	movs	r4, #20
 8000f5a:	193b      	adds	r3, r7, r4
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	2314      	movs	r3, #20
 8000f60:	001a      	movs	r2, r3
 8000f62:	2100      	movs	r1, #0
 8000f64:	f004 fb1f 	bl	80055a6 <memset>
  if(hadc->Instance==ADC1)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a31      	ldr	r2, [pc, #196]	; (8001034 <HAL_ADC_MspInit+0xe4>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d15b      	bne.n	800102a <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f72:	4b31      	ldr	r3, [pc, #196]	; (8001038 <HAL_ADC_MspInit+0xe8>)
 8000f74:	699a      	ldr	r2, [r3, #24]
 8000f76:	4b30      	ldr	r3, [pc, #192]	; (8001038 <HAL_ADC_MspInit+0xe8>)
 8000f78:	2180      	movs	r1, #128	; 0x80
 8000f7a:	0089      	lsls	r1, r1, #2
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	619a      	str	r2, [r3, #24]
 8000f80:	4b2d      	ldr	r3, [pc, #180]	; (8001038 <HAL_ADC_MspInit+0xe8>)
 8000f82:	699a      	ldr	r2, [r3, #24]
 8000f84:	2380      	movs	r3, #128	; 0x80
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	4013      	ands	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
 8000f8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8e:	4b2a      	ldr	r3, [pc, #168]	; (8001038 <HAL_ADC_MspInit+0xe8>)
 8000f90:	695a      	ldr	r2, [r3, #20]
 8000f92:	4b29      	ldr	r3, [pc, #164]	; (8001038 <HAL_ADC_MspInit+0xe8>)
 8000f94:	2180      	movs	r1, #128	; 0x80
 8000f96:	0289      	lsls	r1, r1, #10
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	615a      	str	r2, [r3, #20]
 8000f9c:	4b26      	ldr	r3, [pc, #152]	; (8001038 <HAL_ADC_MspInit+0xe8>)
 8000f9e:	695a      	ldr	r2, [r3, #20]
 8000fa0:	2380      	movs	r3, #128	; 0x80
 8000fa2:	029b      	lsls	r3, r3, #10
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA7     ------> ADC_IN7
    */
    GPIO_InitStruct.Pin = ADC_BRIGHTNESS_Pin;
 8000faa:	193b      	adds	r3, r7, r4
 8000fac:	2280      	movs	r2, #128	; 0x80
 8000fae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fb0:	193b      	adds	r3, r7, r4
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	193b      	adds	r3, r7, r4
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(ADC_BRIGHTNESS_GPIO_Port, &GPIO_InitStruct);
 8000fbc:	193a      	adds	r2, r7, r4
 8000fbe:	2390      	movs	r3, #144	; 0x90
 8000fc0:	05db      	lsls	r3, r3, #23
 8000fc2:	0011      	movs	r1, r2
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	f001 f94f 	bl	8002268 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000fca:	4b1c      	ldr	r3, [pc, #112]	; (800103c <HAL_ADC_MspInit+0xec>)
 8000fcc:	4a1c      	ldr	r2, [pc, #112]	; (8001040 <HAL_ADC_MspInit+0xf0>)
 8000fce:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fd0:	4b1a      	ldr	r3, [pc, #104]	; (800103c <HAL_ADC_MspInit+0xec>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fd6:	4b19      	ldr	r3, [pc, #100]	; (800103c <HAL_ADC_MspInit+0xec>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000fdc:	4b17      	ldr	r3, [pc, #92]	; (800103c <HAL_ADC_MspInit+0xec>)
 8000fde:	2280      	movs	r2, #128	; 0x80
 8000fe0:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fe2:	4b16      	ldr	r3, [pc, #88]	; (800103c <HAL_ADC_MspInit+0xec>)
 8000fe4:	2280      	movs	r2, #128	; 0x80
 8000fe6:	0052      	lsls	r2, r2, #1
 8000fe8:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fea:	4b14      	ldr	r3, [pc, #80]	; (800103c <HAL_ADC_MspInit+0xec>)
 8000fec:	2280      	movs	r2, #128	; 0x80
 8000fee:	00d2      	lsls	r2, r2, #3
 8000ff0:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000ff2:	4b12      	ldr	r3, [pc, #72]	; (800103c <HAL_ADC_MspInit+0xec>)
 8000ff4:	2220      	movs	r2, #32
 8000ff6:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000ff8:	4b10      	ldr	r3, [pc, #64]	; (800103c <HAL_ADC_MspInit+0xec>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000ffe:	4b0f      	ldr	r3, [pc, #60]	; (800103c <HAL_ADC_MspInit+0xec>)
 8001000:	0018      	movs	r0, r3
 8001002:	f000 ff1b 	bl	8001e3c <HAL_DMA_Init>
 8001006:	1e03      	subs	r3, r0, #0
 8001008:	d001      	beq.n	800100e <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 800100a:	f7ff ff77 	bl	8000efc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a0a      	ldr	r2, [pc, #40]	; (800103c <HAL_ADC_MspInit+0xec>)
 8001012:	631a      	str	r2, [r3, #48]	; 0x30
 8001014:	4b09      	ldr	r3, [pc, #36]	; (800103c <HAL_ADC_MspInit+0xec>)
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	625a      	str	r2, [r3, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800101a:	2200      	movs	r2, #0
 800101c:	2100      	movs	r1, #0
 800101e:	200c      	movs	r0, #12
 8001020:	f000 feda 	bl	8001dd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001024:	200c      	movs	r0, #12
 8001026:	f000 feec 	bl	8001e02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800102a:	46c0      	nop			; (mov r8, r8)
 800102c:	46bd      	mov	sp, r7
 800102e:	b00b      	add	sp, #44	; 0x2c
 8001030:	bd90      	pop	{r4, r7, pc}
 8001032:	46c0      	nop			; (mov r8, r8)
 8001034:	40012400 	.word	0x40012400
 8001038:	40021000 	.word	0x40021000
 800103c:	20000b30 	.word	0x20000b30
 8001040:	40020008 	.word	0x40020008

08001044 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	2380      	movs	r3, #128	; 0x80
 8001052:	05db      	lsls	r3, r3, #23
 8001054:	429a      	cmp	r2, r3
 8001056:	d133      	bne.n	80010c0 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001058:	4b1b      	ldr	r3, [pc, #108]	; (80010c8 <HAL_TIM_Base_MspInit+0x84>)
 800105a:	69da      	ldr	r2, [r3, #28]
 800105c:	4b1a      	ldr	r3, [pc, #104]	; (80010c8 <HAL_TIM_Base_MspInit+0x84>)
 800105e:	2101      	movs	r1, #1
 8001060:	430a      	orrs	r2, r1
 8001062:	61da      	str	r2, [r3, #28]
 8001064:	4b18      	ldr	r3, [pc, #96]	; (80010c8 <HAL_TIM_Base_MspInit+0x84>)
 8001066:	69db      	ldr	r3, [r3, #28]
 8001068:	2201      	movs	r2, #1
 800106a:	4013      	ands	r3, r2
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8001070:	4b16      	ldr	r3, [pc, #88]	; (80010cc <HAL_TIM_Base_MspInit+0x88>)
 8001072:	4a17      	ldr	r2, [pc, #92]	; (80010d0 <HAL_TIM_Base_MspInit+0x8c>)
 8001074:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001076:	4b15      	ldr	r3, [pc, #84]	; (80010cc <HAL_TIM_Base_MspInit+0x88>)
 8001078:	2210      	movs	r2, #16
 800107a:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800107c:	4b13      	ldr	r3, [pc, #76]	; (80010cc <HAL_TIM_Base_MspInit+0x88>)
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001082:	4b12      	ldr	r3, [pc, #72]	; (80010cc <HAL_TIM_Base_MspInit+0x88>)
 8001084:	2280      	movs	r2, #128	; 0x80
 8001086:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001088:	4b10      	ldr	r3, [pc, #64]	; (80010cc <HAL_TIM_Base_MspInit+0x88>)
 800108a:	2280      	movs	r2, #128	; 0x80
 800108c:	0092      	lsls	r2, r2, #2
 800108e:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001090:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <HAL_TIM_Base_MspInit+0x88>)
 8001092:	2200      	movs	r2, #0
 8001094:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8001096:	4b0d      	ldr	r3, [pc, #52]	; (80010cc <HAL_TIM_Base_MspInit+0x88>)
 8001098:	2220      	movs	r2, #32
 800109a:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800109c:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <HAL_TIM_Base_MspInit+0x88>)
 800109e:	2280      	movs	r2, #128	; 0x80
 80010a0:	0192      	lsls	r2, r2, #6
 80010a2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80010a4:	4b09      	ldr	r3, [pc, #36]	; (80010cc <HAL_TIM_Base_MspInit+0x88>)
 80010a6:	0018      	movs	r0, r3
 80010a8:	f000 fec8 	bl	8001e3c <HAL_DMA_Init>
 80010ac:	1e03      	subs	r3, r0, #0
 80010ae:	d001      	beq.n	80010b4 <HAL_TIM_Base_MspInit+0x70>
    {
      Error_Handler();
 80010b0:	f7ff ff24 	bl	8000efc <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a05      	ldr	r2, [pc, #20]	; (80010cc <HAL_TIM_Base_MspInit+0x88>)
 80010b8:	625a      	str	r2, [r3, #36]	; 0x24
 80010ba:	4b04      	ldr	r3, [pc, #16]	; (80010cc <HAL_TIM_Base_MspInit+0x88>)
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80010c0:	46c0      	nop			; (mov r8, r8)
 80010c2:	46bd      	mov	sp, r7
 80010c4:	b004      	add	sp, #16
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40021000 	.word	0x40021000
 80010cc:	20000bbc 	.word	0x20000bbc
 80010d0:	40020058 	.word	0x40020058

080010d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010d4:	b590      	push	{r4, r7, lr}
 80010d6:	b089      	sub	sp, #36	; 0x24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	240c      	movs	r4, #12
 80010de:	193b      	adds	r3, r7, r4
 80010e0:	0018      	movs	r0, r3
 80010e2:	2314      	movs	r3, #20
 80010e4:	001a      	movs	r2, r3
 80010e6:	2100      	movs	r1, #0
 80010e8:	f004 fa5d 	bl	80055a6 <memset>
  if(htim->Instance==TIM2)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	2380      	movs	r3, #128	; 0x80
 80010f2:	05db      	lsls	r3, r3, #23
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d124      	bne.n	8001142 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f8:	4b14      	ldr	r3, [pc, #80]	; (800114c <HAL_TIM_MspPostInit+0x78>)
 80010fa:	695a      	ldr	r2, [r3, #20]
 80010fc:	4b13      	ldr	r3, [pc, #76]	; (800114c <HAL_TIM_MspPostInit+0x78>)
 80010fe:	2180      	movs	r1, #128	; 0x80
 8001100:	0289      	lsls	r1, r1, #10
 8001102:	430a      	orrs	r2, r1
 8001104:	615a      	str	r2, [r3, #20]
 8001106:	4b11      	ldr	r3, [pc, #68]	; (800114c <HAL_TIM_MspPostInit+0x78>)
 8001108:	695a      	ldr	r2, [r3, #20]
 800110a:	2380      	movs	r3, #128	; 0x80
 800110c:	029b      	lsls	r3, r3, #10
 800110e:	4013      	ands	r3, r2
 8001110:	60bb      	str	r3, [r7, #8]
 8001112:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001114:	0021      	movs	r1, r4
 8001116:	187b      	adds	r3, r7, r1
 8001118:	2201      	movs	r2, #1
 800111a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111c:	187b      	adds	r3, r7, r1
 800111e:	2202      	movs	r2, #2
 8001120:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	187b      	adds	r3, r7, r1
 8001124:	2200      	movs	r2, #0
 8001126:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001128:	187b      	adds	r3, r7, r1
 800112a:	2200      	movs	r2, #0
 800112c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800112e:	187b      	adds	r3, r7, r1
 8001130:	2202      	movs	r2, #2
 8001132:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001134:	187a      	adds	r2, r7, r1
 8001136:	2390      	movs	r3, #144	; 0x90
 8001138:	05db      	lsls	r3, r3, #23
 800113a:	0011      	movs	r1, r2
 800113c:	0018      	movs	r0, r3
 800113e:	f001 f893 	bl	8002268 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	46bd      	mov	sp, r7
 8001146:	b009      	add	sp, #36	; 0x24
 8001148:	bd90      	pop	{r4, r7, pc}
 800114a:	46c0      	nop			; (mov r8, r8)
 800114c:	40021000 	.word	0x40021000

08001150 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001150:	b590      	push	{r4, r7, lr}
 8001152:	b08b      	sub	sp, #44	; 0x2c
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	2414      	movs	r4, #20
 800115a:	193b      	adds	r3, r7, r4
 800115c:	0018      	movs	r0, r3
 800115e:	2314      	movs	r3, #20
 8001160:	001a      	movs	r2, r3
 8001162:	2100      	movs	r1, #0
 8001164:	f004 fa1f 	bl	80055a6 <memset>
  if(huart->Instance==USART1)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a34      	ldr	r2, [pc, #208]	; (8001240 <HAL_UART_MspInit+0xf0>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d162      	bne.n	8001238 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001172:	4b34      	ldr	r3, [pc, #208]	; (8001244 <HAL_UART_MspInit+0xf4>)
 8001174:	699a      	ldr	r2, [r3, #24]
 8001176:	4b33      	ldr	r3, [pc, #204]	; (8001244 <HAL_UART_MspInit+0xf4>)
 8001178:	2180      	movs	r1, #128	; 0x80
 800117a:	01c9      	lsls	r1, r1, #7
 800117c:	430a      	orrs	r2, r1
 800117e:	619a      	str	r2, [r3, #24]
 8001180:	4b30      	ldr	r3, [pc, #192]	; (8001244 <HAL_UART_MspInit+0xf4>)
 8001182:	699a      	ldr	r2, [r3, #24]
 8001184:	2380      	movs	r3, #128	; 0x80
 8001186:	01db      	lsls	r3, r3, #7
 8001188:	4013      	ands	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
 800118c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118e:	4b2d      	ldr	r3, [pc, #180]	; (8001244 <HAL_UART_MspInit+0xf4>)
 8001190:	695a      	ldr	r2, [r3, #20]
 8001192:	4b2c      	ldr	r3, [pc, #176]	; (8001244 <HAL_UART_MspInit+0xf4>)
 8001194:	2180      	movs	r1, #128	; 0x80
 8001196:	0289      	lsls	r1, r1, #10
 8001198:	430a      	orrs	r2, r1
 800119a:	615a      	str	r2, [r3, #20]
 800119c:	4b29      	ldr	r3, [pc, #164]	; (8001244 <HAL_UART_MspInit+0xf4>)
 800119e:	695a      	ldr	r2, [r3, #20]
 80011a0:	2380      	movs	r3, #128	; 0x80
 80011a2:	029b      	lsls	r3, r3, #10
 80011a4:	4013      	ands	r3, r2
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80011aa:	193b      	adds	r3, r7, r4
 80011ac:	22c0      	movs	r2, #192	; 0xc0
 80011ae:	00d2      	lsls	r2, r2, #3
 80011b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b2:	0021      	movs	r1, r4
 80011b4:	187b      	adds	r3, r7, r1
 80011b6:	2202      	movs	r2, #2
 80011b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	187b      	adds	r3, r7, r1
 80011bc:	2200      	movs	r2, #0
 80011be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011c0:	187b      	adds	r3, r7, r1
 80011c2:	2203      	movs	r2, #3
 80011c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80011c6:	187b      	adds	r3, r7, r1
 80011c8:	2201      	movs	r2, #1
 80011ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011cc:	187a      	adds	r2, r7, r1
 80011ce:	2390      	movs	r3, #144	; 0x90
 80011d0:	05db      	lsls	r3, r3, #23
 80011d2:	0011      	movs	r1, r2
 80011d4:	0018      	movs	r0, r3
 80011d6:	f001 f847 	bl	8002268 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 80011da:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <HAL_UART_MspInit+0xf8>)
 80011dc:	4a1b      	ldr	r2, [pc, #108]	; (800124c <HAL_UART_MspInit+0xfc>)
 80011de:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011e0:	4b19      	ldr	r3, [pc, #100]	; (8001248 <HAL_UART_MspInit+0xf8>)
 80011e2:	2210      	movs	r2, #16
 80011e4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011e6:	4b18      	ldr	r3, [pc, #96]	; (8001248 <HAL_UART_MspInit+0xf8>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011ec:	4b16      	ldr	r3, [pc, #88]	; (8001248 <HAL_UART_MspInit+0xf8>)
 80011ee:	2280      	movs	r2, #128	; 0x80
 80011f0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011f2:	4b15      	ldr	r3, [pc, #84]	; (8001248 <HAL_UART_MspInit+0xf8>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011f8:	4b13      	ldr	r3, [pc, #76]	; (8001248 <HAL_UART_MspInit+0xf8>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80011fe:	4b12      	ldr	r3, [pc, #72]	; (8001248 <HAL_UART_MspInit+0xf8>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001204:	4b10      	ldr	r3, [pc, #64]	; (8001248 <HAL_UART_MspInit+0xf8>)
 8001206:	22c0      	movs	r2, #192	; 0xc0
 8001208:	0192      	lsls	r2, r2, #6
 800120a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800120c:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <HAL_UART_MspInit+0xf8>)
 800120e:	0018      	movs	r0, r3
 8001210:	f000 fe14 	bl	8001e3c <HAL_DMA_Init>
 8001214:	1e03      	subs	r3, r0, #0
 8001216:	d001      	beq.n	800121c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001218:	f7ff fe70 	bl	8000efc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4a0a      	ldr	r2, [pc, #40]	; (8001248 <HAL_UART_MspInit+0xf8>)
 8001220:	671a      	str	r2, [r3, #112]	; 0x70
 8001222:	4b09      	ldr	r3, [pc, #36]	; (8001248 <HAL_UART_MspInit+0xf8>)
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001228:	2200      	movs	r2, #0
 800122a:	2100      	movs	r1, #0
 800122c:	201b      	movs	r0, #27
 800122e:	f000 fdd3 	bl	8001dd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001232:	201b      	movs	r0, #27
 8001234:	f000 fde5 	bl	8001e02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001238:	46c0      	nop			; (mov r8, r8)
 800123a:	46bd      	mov	sp, r7
 800123c:	b00b      	add	sp, #44	; 0x2c
 800123e:	bd90      	pop	{r4, r7, pc}
 8001240:	40013800 	.word	0x40013800
 8001244:	40021000 	.word	0x40021000
 8001248:	20000c88 	.word	0x20000c88
 800124c:	4002001c 	.word	0x4002001c

08001250 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001254:	e7fe      	b.n	8001254 <NMI_Handler+0x4>

08001256 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800125a:	e7fe      	b.n	800125a <HardFault_Handler+0x4>

0800125c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001260:	46c0      	nop			; (mov r8, r8)
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001274:	f000 f906 	bl	8001484 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001278:	46c0      	nop			; (mov r8, r8)
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001284:	4b03      	ldr	r3, [pc, #12]	; (8001294 <DMA1_Channel1_IRQHandler+0x14>)
 8001286:	0018      	movs	r0, r3
 8001288:	f000 ff03 	bl	8002092 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800128c:	46c0      	nop			; (mov r8, r8)
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	46c0      	nop			; (mov r8, r8)
 8001294:	20000b30 	.word	0x20000b30

08001298 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800129c:	4b03      	ldr	r3, [pc, #12]	; (80012ac <DMA1_Channel2_3_IRQHandler+0x14>)
 800129e:	0018      	movs	r0, r3
 80012a0:	f000 fef7 	bl	8002092 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80012a4:	46c0      	nop			; (mov r8, r8)
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	46c0      	nop			; (mov r8, r8)
 80012ac:	20000c88 	.word	0x20000c88

080012b0 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80012b4:	4b03      	ldr	r3, [pc, #12]	; (80012c4 <DMA1_Channel4_5_IRQHandler+0x14>)
 80012b6:	0018      	movs	r0, r3
 80012b8:	f000 feeb 	bl	8002092 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 80012bc:	46c0      	nop			; (mov r8, r8)
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	46c0      	nop			; (mov r8, r8)
 80012c4:	20000bbc 	.word	0x20000bbc

080012c8 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC interrupt.
  */
void ADC1_IRQHandler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 80012cc:	4b03      	ldr	r3, [pc, #12]	; (80012dc <ADC1_IRQHandler+0x14>)
 80012ce:	0018      	movs	r0, r3
 80012d0:	f000 fa88 	bl	80017e4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80012d4:	46c0      	nop			; (mov r8, r8)
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	46c0      	nop			; (mov r8, r8)
 80012dc:	20000af0 	.word	0x20000af0

080012e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80012e4:	4b03      	ldr	r3, [pc, #12]	; (80012f4 <USART1_IRQHandler+0x14>)
 80012e6:	0018      	movs	r0, r3
 80012e8:	f002 fff6 	bl	80042d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80012ec:	46c0      	nop			; (mov r8, r8)
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	46c0      	nop			; (mov r8, r8)
 80012f4:	20000c00 	.word	0x20000c00

080012f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001300:	4a14      	ldr	r2, [pc, #80]	; (8001354 <_sbrk+0x5c>)
 8001302:	4b15      	ldr	r3, [pc, #84]	; (8001358 <_sbrk+0x60>)
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800130c:	4b13      	ldr	r3, [pc, #76]	; (800135c <_sbrk+0x64>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d102      	bne.n	800131a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001314:	4b11      	ldr	r3, [pc, #68]	; (800135c <_sbrk+0x64>)
 8001316:	4a12      	ldr	r2, [pc, #72]	; (8001360 <_sbrk+0x68>)
 8001318:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800131a:	4b10      	ldr	r3, [pc, #64]	; (800135c <_sbrk+0x64>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	18d3      	adds	r3, r2, r3
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	429a      	cmp	r2, r3
 8001326:	d207      	bcs.n	8001338 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001328:	f004 f900 	bl	800552c <__errno>
 800132c:	0003      	movs	r3, r0
 800132e:	220c      	movs	r2, #12
 8001330:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001332:	2301      	movs	r3, #1
 8001334:	425b      	negs	r3, r3
 8001336:	e009      	b.n	800134c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001338:	4b08      	ldr	r3, [pc, #32]	; (800135c <_sbrk+0x64>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800133e:	4b07      	ldr	r3, [pc, #28]	; (800135c <_sbrk+0x64>)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	18d2      	adds	r2, r2, r3
 8001346:	4b05      	ldr	r3, [pc, #20]	; (800135c <_sbrk+0x64>)
 8001348:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800134a:	68fb      	ldr	r3, [r7, #12]
}
 800134c:	0018      	movs	r0, r3
 800134e:	46bd      	mov	sp, r7
 8001350:	b006      	add	sp, #24
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20001800 	.word	0x20001800
 8001358:	00000400 	.word	0x00000400
 800135c:	20000ce8 	.word	0x20000ce8
 8001360:	20000d00 	.word	0x20000d00

08001364 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001368:	46c0      	nop			; (mov r8, r8)
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
	...

08001370 <Reset_Handler>:
 8001370:	4813      	ldr	r0, [pc, #76]	; (80013c0 <LoopForever+0x2>)
 8001372:	4685      	mov	sp, r0
 8001374:	f7ff fff6 	bl	8001364 <SystemInit>
 8001378:	4812      	ldr	r0, [pc, #72]	; (80013c4 <LoopForever+0x6>)
 800137a:	6801      	ldr	r1, [r0, #0]
 800137c:	0e09      	lsrs	r1, r1, #24
 800137e:	4a12      	ldr	r2, [pc, #72]	; (80013c8 <LoopForever+0xa>)
 8001380:	4291      	cmp	r1, r2
 8001382:	d105      	bne.n	8001390 <ApplicationStart>
 8001384:	4811      	ldr	r0, [pc, #68]	; (80013cc <LoopForever+0xe>)
 8001386:	4912      	ldr	r1, [pc, #72]	; (80013d0 <LoopForever+0x12>)
 8001388:	6001      	str	r1, [r0, #0]
 800138a:	4812      	ldr	r0, [pc, #72]	; (80013d4 <LoopForever+0x16>)
 800138c:	4912      	ldr	r1, [pc, #72]	; (80013d8 <LoopForever+0x1a>)
 800138e:	6001      	str	r1, [r0, #0]

08001390 <ApplicationStart>:
 8001390:	4812      	ldr	r0, [pc, #72]	; (80013dc <LoopForever+0x1e>)
 8001392:	4913      	ldr	r1, [pc, #76]	; (80013e0 <LoopForever+0x22>)
 8001394:	4a13      	ldr	r2, [pc, #76]	; (80013e4 <LoopForever+0x26>)
 8001396:	2300      	movs	r3, #0
 8001398:	e002      	b.n	80013a0 <LoopCopyDataInit>

0800139a <CopyDataInit>:
 800139a:	58d4      	ldr	r4, [r2, r3]
 800139c:	50c4      	str	r4, [r0, r3]
 800139e:	3304      	adds	r3, #4

080013a0 <LoopCopyDataInit>:
 80013a0:	18c4      	adds	r4, r0, r3
 80013a2:	428c      	cmp	r4, r1
 80013a4:	d3f9      	bcc.n	800139a <CopyDataInit>
 80013a6:	4a10      	ldr	r2, [pc, #64]	; (80013e8 <LoopForever+0x2a>)
 80013a8:	4c10      	ldr	r4, [pc, #64]	; (80013ec <LoopForever+0x2e>)
 80013aa:	2300      	movs	r3, #0
 80013ac:	e001      	b.n	80013b2 <LoopFillZerobss>

080013ae <FillZerobss>:
 80013ae:	6013      	str	r3, [r2, #0]
 80013b0:	3204      	adds	r2, #4

080013b2 <LoopFillZerobss>:
 80013b2:	42a2      	cmp	r2, r4
 80013b4:	d3fb      	bcc.n	80013ae <FillZerobss>
 80013b6:	f004 f8bf 	bl	8005538 <__libc_init_array>
 80013ba:	f7ff fa9f 	bl	80008fc <main>

080013be <LoopForever>:
 80013be:	e7fe      	b.n	80013be <LoopForever>
 80013c0:	20001800 	.word	0x20001800
 80013c4:	00000004 	.word	0x00000004
 80013c8:	0000001f 	.word	0x0000001f
 80013cc:	40021018 	.word	0x40021018
 80013d0:	00000001 	.word	0x00000001
 80013d4:	40010000 	.word	0x40010000
 80013d8:	00000000 	.word	0x00000000
 80013dc:	20000000 	.word	0x20000000
 80013e0:	20000070 	.word	0x20000070
 80013e4:	0800579c 	.word	0x0800579c
 80013e8:	20000070 	.word	0x20000070
 80013ec:	20000d00 	.word	0x20000d00

080013f0 <CEC_CAN_IRQHandler>:
 80013f0:	e7fe      	b.n	80013f0 <CEC_CAN_IRQHandler>
	...

080013f4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013f8:	4b07      	ldr	r3, [pc, #28]	; (8001418 <HAL_Init+0x24>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	4b06      	ldr	r3, [pc, #24]	; (8001418 <HAL_Init+0x24>)
 80013fe:	2110      	movs	r1, #16
 8001400:	430a      	orrs	r2, r1
 8001402:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001404:	2000      	movs	r0, #0
 8001406:	f000 f809 	bl	800141c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800140a:	f7ff fd7d 	bl	8000f08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800140e:	2300      	movs	r3, #0
}
 8001410:	0018      	movs	r0, r3
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	46c0      	nop			; (mov r8, r8)
 8001418:	40022000 	.word	0x40022000

0800141c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800141c:	b590      	push	{r4, r7, lr}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001424:	4b14      	ldr	r3, [pc, #80]	; (8001478 <HAL_InitTick+0x5c>)
 8001426:	681c      	ldr	r4, [r3, #0]
 8001428:	4b14      	ldr	r3, [pc, #80]	; (800147c <HAL_InitTick+0x60>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	0019      	movs	r1, r3
 800142e:	23fa      	movs	r3, #250	; 0xfa
 8001430:	0098      	lsls	r0, r3, #2
 8001432:	f7fe fe69 	bl	8000108 <__udivsi3>
 8001436:	0003      	movs	r3, r0
 8001438:	0019      	movs	r1, r3
 800143a:	0020      	movs	r0, r4
 800143c:	f7fe fe64 	bl	8000108 <__udivsi3>
 8001440:	0003      	movs	r3, r0
 8001442:	0018      	movs	r0, r3
 8001444:	f000 fced 	bl	8001e22 <HAL_SYSTICK_Config>
 8001448:	1e03      	subs	r3, r0, #0
 800144a:	d001      	beq.n	8001450 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e00f      	b.n	8001470 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2b03      	cmp	r3, #3
 8001454:	d80b      	bhi.n	800146e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001456:	6879      	ldr	r1, [r7, #4]
 8001458:	2301      	movs	r3, #1
 800145a:	425b      	negs	r3, r3
 800145c:	2200      	movs	r2, #0
 800145e:	0018      	movs	r0, r3
 8001460:	f000 fcba 	bl	8001dd8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001464:	4b06      	ldr	r3, [pc, #24]	; (8001480 <HAL_InitTick+0x64>)
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800146a:	2300      	movs	r3, #0
 800146c:	e000      	b.n	8001470 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
}
 8001470:	0018      	movs	r0, r3
 8001472:	46bd      	mov	sp, r7
 8001474:	b003      	add	sp, #12
 8001476:	bd90      	pop	{r4, r7, pc}
 8001478:	20000000 	.word	0x20000000
 800147c:	20000008 	.word	0x20000008
 8001480:	20000004 	.word	0x20000004

08001484 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001488:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <HAL_IncTick+0x1c>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	001a      	movs	r2, r3
 800148e:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <HAL_IncTick+0x20>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	18d2      	adds	r2, r2, r3
 8001494:	4b03      	ldr	r3, [pc, #12]	; (80014a4 <HAL_IncTick+0x20>)
 8001496:	601a      	str	r2, [r3, #0]
}
 8001498:	46c0      	nop			; (mov r8, r8)
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	46c0      	nop			; (mov r8, r8)
 80014a0:	20000008 	.word	0x20000008
 80014a4:	20000cec 	.word	0x20000cec

080014a8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  return uwTick;
 80014ac:	4b02      	ldr	r3, [pc, #8]	; (80014b8 <HAL_GetTick+0x10>)
 80014ae:	681b      	ldr	r3, [r3, #0]
}
 80014b0:	0018      	movs	r0, r3
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	46c0      	nop			; (mov r8, r8)
 80014b8:	20000cec 	.word	0x20000cec

080014bc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014c4:	230f      	movs	r3, #15
 80014c6:	18fb      	adds	r3, r7, r3
 80014c8:	2200      	movs	r2, #0
 80014ca:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80014cc:	2300      	movs	r3, #0
 80014ce:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d101      	bne.n	80014da <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e125      	b.n	8001726 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d10a      	bne.n	80014f8 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2234      	movs	r2, #52	; 0x34
 80014ec:	2100      	movs	r1, #0
 80014ee:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	0018      	movs	r0, r3
 80014f4:	f7ff fd2c 	bl	8000f50 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014fc:	2210      	movs	r2, #16
 80014fe:	4013      	ands	r3, r2
 8001500:	d000      	beq.n	8001504 <HAL_ADC_Init+0x48>
 8001502:	e103      	b.n	800170c <HAL_ADC_Init+0x250>
 8001504:	230f      	movs	r3, #15
 8001506:	18fb      	adds	r3, r7, r3
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d000      	beq.n	8001510 <HAL_ADC_Init+0x54>
 800150e:	e0fd      	b.n	800170c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	2204      	movs	r2, #4
 8001518:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800151a:	d000      	beq.n	800151e <HAL_ADC_Init+0x62>
 800151c:	e0f6      	b.n	800170c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001522:	4a83      	ldr	r2, [pc, #524]	; (8001730 <HAL_ADC_Init+0x274>)
 8001524:	4013      	ands	r3, r2
 8001526:	2202      	movs	r2, #2
 8001528:	431a      	orrs	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	2203      	movs	r2, #3
 8001536:	4013      	ands	r3, r2
 8001538:	2b01      	cmp	r3, #1
 800153a:	d112      	bne.n	8001562 <HAL_ADC_Init+0xa6>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2201      	movs	r2, #1
 8001544:	4013      	ands	r3, r2
 8001546:	2b01      	cmp	r3, #1
 8001548:	d009      	beq.n	800155e <HAL_ADC_Init+0xa2>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	68da      	ldr	r2, [r3, #12]
 8001550:	2380      	movs	r3, #128	; 0x80
 8001552:	021b      	lsls	r3, r3, #8
 8001554:	401a      	ands	r2, r3
 8001556:	2380      	movs	r3, #128	; 0x80
 8001558:	021b      	lsls	r3, r3, #8
 800155a:	429a      	cmp	r2, r3
 800155c:	d101      	bne.n	8001562 <HAL_ADC_Init+0xa6>
 800155e:	2301      	movs	r3, #1
 8001560:	e000      	b.n	8001564 <HAL_ADC_Init+0xa8>
 8001562:	2300      	movs	r3, #0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d116      	bne.n	8001596 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	2218      	movs	r2, #24
 8001570:	4393      	bics	r3, r2
 8001572:	0019      	movs	r1, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689a      	ldr	r2, [r3, #8]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	430a      	orrs	r2, r1
 800157e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	691b      	ldr	r3, [r3, #16]
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	0899      	lsrs	r1, r3, #2
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685a      	ldr	r2, [r3, #4]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	430a      	orrs	r2, r1
 8001594:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	68da      	ldr	r2, [r3, #12]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4964      	ldr	r1, [pc, #400]	; (8001734 <HAL_ADC_Init+0x278>)
 80015a2:	400a      	ands	r2, r1
 80015a4:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	7e1b      	ldrb	r3, [r3, #24]
 80015aa:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	7e5b      	ldrb	r3, [r3, #25]
 80015b0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80015b2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	7e9b      	ldrb	r3, [r3, #26]
 80015b8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80015ba:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d002      	beq.n	80015ca <HAL_ADC_Init+0x10e>
 80015c4:	2380      	movs	r3, #128	; 0x80
 80015c6:	015b      	lsls	r3, r3, #5
 80015c8:	e000      	b.n	80015cc <HAL_ADC_Init+0x110>
 80015ca:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80015cc:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80015d2:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	691b      	ldr	r3, [r3, #16]
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d101      	bne.n	80015e0 <HAL_ADC_Init+0x124>
 80015dc:	2304      	movs	r3, #4
 80015de:	e000      	b.n	80015e2 <HAL_ADC_Init+0x126>
 80015e0:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80015e2:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2124      	movs	r1, #36	; 0x24
 80015e8:	5c5b      	ldrb	r3, [r3, r1]
 80015ea:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80015ec:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80015ee:	68ba      	ldr	r2, [r7, #8]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	7edb      	ldrb	r3, [r3, #27]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d115      	bne.n	8001628 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	7e9b      	ldrb	r3, [r3, #26]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d105      	bne.n	8001610 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	2280      	movs	r2, #128	; 0x80
 8001608:	0252      	lsls	r2, r2, #9
 800160a:	4313      	orrs	r3, r2
 800160c:	60bb      	str	r3, [r7, #8]
 800160e:	e00b      	b.n	8001628 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001614:	2220      	movs	r2, #32
 8001616:	431a      	orrs	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001620:	2201      	movs	r2, #1
 8001622:	431a      	orrs	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	69da      	ldr	r2, [r3, #28]
 800162c:	23c2      	movs	r3, #194	; 0xc2
 800162e:	33ff      	adds	r3, #255	; 0xff
 8001630:	429a      	cmp	r2, r3
 8001632:	d007      	beq.n	8001644 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800163c:	4313      	orrs	r3, r2
 800163e:	68ba      	ldr	r2, [r7, #8]
 8001640:	4313      	orrs	r3, r2
 8001642:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	68d9      	ldr	r1, [r3, #12]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	68ba      	ldr	r2, [r7, #8]
 8001650:	430a      	orrs	r2, r1
 8001652:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001658:	2380      	movs	r3, #128	; 0x80
 800165a:	055b      	lsls	r3, r3, #21
 800165c:	429a      	cmp	r2, r3
 800165e:	d01b      	beq.n	8001698 <HAL_ADC_Init+0x1dc>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001664:	2b01      	cmp	r3, #1
 8001666:	d017      	beq.n	8001698 <HAL_ADC_Init+0x1dc>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166c:	2b02      	cmp	r3, #2
 800166e:	d013      	beq.n	8001698 <HAL_ADC_Init+0x1dc>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001674:	2b03      	cmp	r3, #3
 8001676:	d00f      	beq.n	8001698 <HAL_ADC_Init+0x1dc>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800167c:	2b04      	cmp	r3, #4
 800167e:	d00b      	beq.n	8001698 <HAL_ADC_Init+0x1dc>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001684:	2b05      	cmp	r3, #5
 8001686:	d007      	beq.n	8001698 <HAL_ADC_Init+0x1dc>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168c:	2b06      	cmp	r3, #6
 800168e:	d003      	beq.n	8001698 <HAL_ADC_Init+0x1dc>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001694:	2b07      	cmp	r3, #7
 8001696:	d112      	bne.n	80016be <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	695a      	ldr	r2, [r3, #20]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2107      	movs	r1, #7
 80016a4:	438a      	bics	r2, r1
 80016a6:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6959      	ldr	r1, [r3, #20]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b2:	2207      	movs	r2, #7
 80016b4:	401a      	ands	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	430a      	orrs	r2, r1
 80016bc:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	4a1c      	ldr	r2, [pc, #112]	; (8001738 <HAL_ADC_Init+0x27c>)
 80016c6:	4013      	ands	r3, r2
 80016c8:	68ba      	ldr	r2, [r7, #8]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d10b      	bne.n	80016e6 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016d8:	2203      	movs	r2, #3
 80016da:	4393      	bics	r3, r2
 80016dc:	2201      	movs	r2, #1
 80016de:	431a      	orrs	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80016e4:	e01c      	b.n	8001720 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ea:	2212      	movs	r2, #18
 80016ec:	4393      	bics	r3, r2
 80016ee:	2210      	movs	r2, #16
 80016f0:	431a      	orrs	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016fa:	2201      	movs	r2, #1
 80016fc:	431a      	orrs	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001702:	230f      	movs	r3, #15
 8001704:	18fb      	adds	r3, r7, r3
 8001706:	2201      	movs	r2, #1
 8001708:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800170a:	e009      	b.n	8001720 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001710:	2210      	movs	r2, #16
 8001712:	431a      	orrs	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001718:	230f      	movs	r3, #15
 800171a:	18fb      	adds	r3, r7, r3
 800171c:	2201      	movs	r2, #1
 800171e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001720:	230f      	movs	r3, #15
 8001722:	18fb      	adds	r3, r7, r3
 8001724:	781b      	ldrb	r3, [r3, #0]
}
 8001726:	0018      	movs	r0, r3
 8001728:	46bd      	mov	sp, r7
 800172a:	b004      	add	sp, #16
 800172c:	bd80      	pop	{r7, pc}
 800172e:	46c0      	nop			; (mov r8, r8)
 8001730:	fffffefd 	.word	0xfffffefd
 8001734:	fffe0219 	.word	0xfffe0219
 8001738:	833fffe7 	.word	0x833fffe7

0800173c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800173c:	b590      	push	{r4, r7, lr}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001744:	230f      	movs	r3, #15
 8001746:	18fb      	adds	r3, r7, r3
 8001748:	2200      	movs	r2, #0
 800174a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	2204      	movs	r2, #4
 8001754:	4013      	ands	r3, r2
 8001756:	d138      	bne.n	80017ca <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2234      	movs	r2, #52	; 0x34
 800175c:	5c9b      	ldrb	r3, [r3, r2]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d101      	bne.n	8001766 <HAL_ADC_Start+0x2a>
 8001762:	2302      	movs	r3, #2
 8001764:	e038      	b.n	80017d8 <HAL_ADC_Start+0x9c>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2234      	movs	r2, #52	; 0x34
 800176a:	2101      	movs	r1, #1
 800176c:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	7e5b      	ldrb	r3, [r3, #25]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d007      	beq.n	8001786 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001776:	230f      	movs	r3, #15
 8001778:	18fc      	adds	r4, r7, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	0018      	movs	r0, r3
 800177e:	f000 f9fb 	bl	8001b78 <ADC_Enable>
 8001782:	0003      	movs	r3, r0
 8001784:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001786:	230f      	movs	r3, #15
 8001788:	18fb      	adds	r3, r7, r3
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d120      	bne.n	80017d2 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001794:	4a12      	ldr	r2, [pc, #72]	; (80017e0 <HAL_ADC_Start+0xa4>)
 8001796:	4013      	ands	r3, r2
 8001798:	2280      	movs	r2, #128	; 0x80
 800179a:	0052      	lsls	r2, r2, #1
 800179c:	431a      	orrs	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2234      	movs	r2, #52	; 0x34
 80017ac:	2100      	movs	r1, #0
 80017ae:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	221c      	movs	r2, #28
 80017b6:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	689a      	ldr	r2, [r3, #8]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2104      	movs	r1, #4
 80017c4:	430a      	orrs	r2, r1
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	e003      	b.n	80017d2 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80017ca:	230f      	movs	r3, #15
 80017cc:	18fb      	adds	r3, r7, r3
 80017ce:	2202      	movs	r2, #2
 80017d0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80017d2:	230f      	movs	r3, #15
 80017d4:	18fb      	adds	r3, r7, r3
 80017d6:	781b      	ldrb	r3, [r3, #0]
}
 80017d8:	0018      	movs	r0, r3
 80017da:	46bd      	mov	sp, r7
 80017dc:	b005      	add	sp, #20
 80017de:	bd90      	pop	{r4, r7, pc}
 80017e0:	fffff0fe 	.word	0xfffff0fe

080017e4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_ier = hadc->Instance->IER;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2204      	movs	r2, #4
 8001800:	4013      	ands	r3, r2
 8001802:	d003      	beq.n	800180c <HAL_ADC_IRQHandler+0x28>
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	2204      	movs	r2, #4
 8001808:	4013      	ands	r3, r2
 800180a:	d107      	bne.n	800181c <HAL_ADC_IRQHandler+0x38>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2208      	movs	r2, #8
 8001810:	4013      	ands	r3, r2
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001812:	d049      	beq.n	80018a8 <HAL_ADC_IRQHandler+0xc4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	2208      	movs	r2, #8
 8001818:	4013      	ands	r3, r2
 800181a:	d045      	beq.n	80018a8 <HAL_ADC_IRQHandler+0xc4>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001820:	2210      	movs	r2, #16
 8001822:	4013      	ands	r3, r2
 8001824:	d106      	bne.n	8001834 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800182a:	2280      	movs	r2, #128	; 0x80
 800182c:	0092      	lsls	r2, r2, #2
 800182e:	431a      	orrs	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	68da      	ldr	r2, [r3, #12]
 800183a:	23c0      	movs	r3, #192	; 0xc0
 800183c:	011b      	lsls	r3, r3, #4
 800183e:	4013      	ands	r3, r2
 8001840:	d12a      	bne.n	8001898 <HAL_ADC_IRQHandler+0xb4>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001846:	2b00      	cmp	r3, #0
 8001848:	d126      	bne.n	8001898 <HAL_ADC_IRQHandler+0xb4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2208      	movs	r2, #8
 800184e:	4013      	ands	r3, r2
 8001850:	d022      	beq.n	8001898 <HAL_ADC_IRQHandler+0xb4>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	2204      	movs	r2, #4
 800185a:	4013      	ands	r3, r2
 800185c:	d110      	bne.n	8001880 <HAL_ADC_IRQHandler+0x9c>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	685a      	ldr	r2, [r3, #4]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	210c      	movs	r1, #12
 800186a:	438a      	bics	r2, r1
 800186c:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001872:	4a2d      	ldr	r2, [pc, #180]	; (8001928 <HAL_ADC_IRQHandler+0x144>)
 8001874:	4013      	ands	r3, r2
 8001876:	2201      	movs	r2, #1
 8001878:	431a      	orrs	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	639a      	str	r2, [r3, #56]	; 0x38
 800187e:	e00b      	b.n	8001898 <HAL_ADC_IRQHandler+0xb4>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001884:	2220      	movs	r2, #32
 8001886:	431a      	orrs	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001890:	2201      	movs	r2, #1
 8001892:	431a      	orrs	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	0018      	movs	r0, r3
 800189c:	f000 f846 	bl	800192c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	220c      	movs	r2, #12
 80018a6:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(((tmp_isr & ADC_FLAG_AWD) == ADC_FLAG_AWD) && ((tmp_ier & ADC_IT_AWD) == ADC_IT_AWD))
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2280      	movs	r2, #128	; 0x80
 80018ac:	4013      	ands	r3, r2
 80018ae:	d012      	beq.n	80018d6 <HAL_ADC_IRQHandler+0xf2>
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	2280      	movs	r2, #128	; 0x80
 80018b4:	4013      	ands	r3, r2
 80018b6:	d00e      	beq.n	80018d6 <HAL_ADC_IRQHandler+0xf2>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018bc:	2280      	movs	r2, #128	; 0x80
 80018be:	0252      	lsls	r2, r2, #9
 80018c0:	431a      	orrs	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	0018      	movs	r0, r3
 80018ca:	f000 f837 	bl	800193c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2280      	movs	r2, #128	; 0x80
 80018d4:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2210      	movs	r2, #16
 80018da:	4013      	ands	r3, r2
 80018dc:	d020      	beq.n	8001920 <HAL_ADC_IRQHandler+0x13c>
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	2210      	movs	r2, #16
 80018e2:	4013      	ands	r3, r2
 80018e4:	d01c      	beq.n	8001920 <HAL_ADC_IRQHandler+0x13c>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d006      	beq.n	80018fc <HAL_ADC_IRQHandler+0x118>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	2201      	movs	r2, #1
 80018f6:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d10d      	bne.n	8001918 <HAL_ADC_IRQHandler+0x134>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001900:	2202      	movs	r2, #2
 8001902:	431a      	orrs	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2210      	movs	r2, #16
 800190e:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	0018      	movs	r0, r3
 8001914:	f000 f81a 	bl	800194c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2210      	movs	r2, #16
 800191e:	601a      	str	r2, [r3, #0]
  }

}
 8001920:	46c0      	nop			; (mov r8, r8)
 8001922:	46bd      	mov	sp, r7
 8001924:	b004      	add	sp, #16
 8001926:	bd80      	pop	{r7, pc}
 8001928:	fffffefe 	.word	0xfffffefe

0800192c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001934:	46c0      	nop			; (mov r8, r8)
 8001936:	46bd      	mov	sp, r7
 8001938:	b002      	add	sp, #8
 800193a:	bd80      	pop	{r7, pc}

0800193c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001944:	46c0      	nop			; (mov r8, r8)
 8001946:	46bd      	mov	sp, r7
 8001948:	b002      	add	sp, #8
 800194a:	bd80      	pop	{r7, pc}

0800194c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001954:	46c0      	nop			; (mov r8, r8)
 8001956:	46bd      	mov	sp, r7
 8001958:	b002      	add	sp, #8
 800195a:	bd80      	pop	{r7, pc}

0800195c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001966:	230f      	movs	r3, #15
 8001968:	18fb      	adds	r3, r7, r3
 800196a:	2200      	movs	r2, #0
 800196c:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800196e:	2300      	movs	r3, #0
 8001970:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001976:	2380      	movs	r3, #128	; 0x80
 8001978:	055b      	lsls	r3, r3, #21
 800197a:	429a      	cmp	r2, r3
 800197c:	d011      	beq.n	80019a2 <HAL_ADC_ConfigChannel+0x46>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001982:	2b01      	cmp	r3, #1
 8001984:	d00d      	beq.n	80019a2 <HAL_ADC_ConfigChannel+0x46>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198a:	2b02      	cmp	r3, #2
 800198c:	d009      	beq.n	80019a2 <HAL_ADC_ConfigChannel+0x46>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001992:	2b03      	cmp	r3, #3
 8001994:	d005      	beq.n	80019a2 <HAL_ADC_ConfigChannel+0x46>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199a:	2b04      	cmp	r3, #4
 800199c:	d001      	beq.n	80019a2 <HAL_ADC_ConfigChannel+0x46>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2234      	movs	r2, #52	; 0x34
 80019a6:	5c9b      	ldrb	r3, [r3, r2]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d101      	bne.n	80019b0 <HAL_ADC_ConfigChannel+0x54>
 80019ac:	2302      	movs	r3, #2
 80019ae:	e0d0      	b.n	8001b52 <HAL_ADC_ConfigChannel+0x1f6>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2234      	movs	r2, #52	; 0x34
 80019b4:	2101      	movs	r1, #1
 80019b6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	2204      	movs	r2, #4
 80019c0:	4013      	ands	r3, r2
 80019c2:	d000      	beq.n	80019c6 <HAL_ADC_ConfigChannel+0x6a>
 80019c4:	e0b4      	b.n	8001b30 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	4a64      	ldr	r2, [pc, #400]	; (8001b5c <HAL_ADC_ConfigChannel+0x200>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d100      	bne.n	80019d2 <HAL_ADC_ConfigChannel+0x76>
 80019d0:	e082      	b.n	8001ad8 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2201      	movs	r2, #1
 80019de:	409a      	lsls	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	430a      	orrs	r2, r1
 80019e6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019ec:	2380      	movs	r3, #128	; 0x80
 80019ee:	055b      	lsls	r3, r3, #21
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d037      	beq.n	8001a64 <HAL_ADC_ConfigChannel+0x108>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d033      	beq.n	8001a64 <HAL_ADC_ConfigChannel+0x108>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d02f      	beq.n	8001a64 <HAL_ADC_ConfigChannel+0x108>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a08:	2b03      	cmp	r3, #3
 8001a0a:	d02b      	beq.n	8001a64 <HAL_ADC_ConfigChannel+0x108>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a10:	2b04      	cmp	r3, #4
 8001a12:	d027      	beq.n	8001a64 <HAL_ADC_ConfigChannel+0x108>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a18:	2b05      	cmp	r3, #5
 8001a1a:	d023      	beq.n	8001a64 <HAL_ADC_ConfigChannel+0x108>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a20:	2b06      	cmp	r3, #6
 8001a22:	d01f      	beq.n	8001a64 <HAL_ADC_ConfigChannel+0x108>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a28:	2b07      	cmp	r3, #7
 8001a2a:	d01b      	beq.n	8001a64 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	689a      	ldr	r2, [r3, #8]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	695b      	ldr	r3, [r3, #20]
 8001a36:	2107      	movs	r1, #7
 8001a38:	400b      	ands	r3, r1
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d012      	beq.n	8001a64 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	695a      	ldr	r2, [r3, #20]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2107      	movs	r1, #7
 8001a4a:	438a      	bics	r2, r1
 8001a4c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	6959      	ldr	r1, [r3, #20]
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	2207      	movs	r2, #7
 8001a5a:	401a      	ands	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	430a      	orrs	r2, r1
 8001a62:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2b10      	cmp	r3, #16
 8001a6a:	d007      	beq.n	8001a7c <HAL_ADC_ConfigChannel+0x120>
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2b11      	cmp	r3, #17
 8001a72:	d003      	beq.n	8001a7c <HAL_ADC_ConfigChannel+0x120>
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2b12      	cmp	r3, #18
 8001a7a:	d163      	bne.n	8001b44 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001a7c:	4b38      	ldr	r3, [pc, #224]	; (8001b60 <HAL_ADC_ConfigChannel+0x204>)
 8001a7e:	6819      	ldr	r1, [r3, #0]
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2b10      	cmp	r3, #16
 8001a86:	d009      	beq.n	8001a9c <HAL_ADC_ConfigChannel+0x140>
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2b11      	cmp	r3, #17
 8001a8e:	d102      	bne.n	8001a96 <HAL_ADC_ConfigChannel+0x13a>
 8001a90:	2380      	movs	r3, #128	; 0x80
 8001a92:	03db      	lsls	r3, r3, #15
 8001a94:	e004      	b.n	8001aa0 <HAL_ADC_ConfigChannel+0x144>
 8001a96:	2380      	movs	r3, #128	; 0x80
 8001a98:	045b      	lsls	r3, r3, #17
 8001a9a:	e001      	b.n	8001aa0 <HAL_ADC_ConfigChannel+0x144>
 8001a9c:	2380      	movs	r3, #128	; 0x80
 8001a9e:	041b      	lsls	r3, r3, #16
 8001aa0:	4a2f      	ldr	r2, [pc, #188]	; (8001b60 <HAL_ADC_ConfigChannel+0x204>)
 8001aa2:	430b      	orrs	r3, r1
 8001aa4:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2b10      	cmp	r3, #16
 8001aac:	d14a      	bne.n	8001b44 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001aae:	4b2d      	ldr	r3, [pc, #180]	; (8001b64 <HAL_ADC_ConfigChannel+0x208>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	492d      	ldr	r1, [pc, #180]	; (8001b68 <HAL_ADC_ConfigChannel+0x20c>)
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	f7fe fb27 	bl	8000108 <__udivsi3>
 8001aba:	0003      	movs	r3, r0
 8001abc:	001a      	movs	r2, r3
 8001abe:	0013      	movs	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	189b      	adds	r3, r3, r2
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ac8:	e002      	b.n	8001ad0 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	3b01      	subs	r3, #1
 8001ace:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1f9      	bne.n	8001aca <HAL_ADC_ConfigChannel+0x16e>
 8001ad6:	e035      	b.n	8001b44 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2101      	movs	r1, #1
 8001ae4:	4099      	lsls	r1, r3
 8001ae6:	000b      	movs	r3, r1
 8001ae8:	43d9      	mvns	r1, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	400a      	ands	r2, r1
 8001af0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2b10      	cmp	r3, #16
 8001af8:	d007      	beq.n	8001b0a <HAL_ADC_ConfigChannel+0x1ae>
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2b11      	cmp	r3, #17
 8001b00:	d003      	beq.n	8001b0a <HAL_ADC_ConfigChannel+0x1ae>
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2b12      	cmp	r3, #18
 8001b08:	d11c      	bne.n	8001b44 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001b0a:	4b15      	ldr	r3, [pc, #84]	; (8001b60 <HAL_ADC_ConfigChannel+0x204>)
 8001b0c:	6819      	ldr	r1, [r3, #0]
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2b10      	cmp	r3, #16
 8001b14:	d007      	beq.n	8001b26 <HAL_ADC_ConfigChannel+0x1ca>
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2b11      	cmp	r3, #17
 8001b1c:	d101      	bne.n	8001b22 <HAL_ADC_ConfigChannel+0x1c6>
 8001b1e:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <HAL_ADC_ConfigChannel+0x210>)
 8001b20:	e002      	b.n	8001b28 <HAL_ADC_ConfigChannel+0x1cc>
 8001b22:	4b13      	ldr	r3, [pc, #76]	; (8001b70 <HAL_ADC_ConfigChannel+0x214>)
 8001b24:	e000      	b.n	8001b28 <HAL_ADC_ConfigChannel+0x1cc>
 8001b26:	4b13      	ldr	r3, [pc, #76]	; (8001b74 <HAL_ADC_ConfigChannel+0x218>)
 8001b28:	4a0d      	ldr	r2, [pc, #52]	; (8001b60 <HAL_ADC_ConfigChannel+0x204>)
 8001b2a:	400b      	ands	r3, r1
 8001b2c:	6013      	str	r3, [r2, #0]
 8001b2e:	e009      	b.n	8001b44 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b34:	2220      	movs	r2, #32
 8001b36:	431a      	orrs	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001b3c:	230f      	movs	r3, #15
 8001b3e:	18fb      	adds	r3, r7, r3
 8001b40:	2201      	movs	r2, #1
 8001b42:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2234      	movs	r2, #52	; 0x34
 8001b48:	2100      	movs	r1, #0
 8001b4a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001b4c:	230f      	movs	r3, #15
 8001b4e:	18fb      	adds	r3, r7, r3
 8001b50:	781b      	ldrb	r3, [r3, #0]
}
 8001b52:	0018      	movs	r0, r3
 8001b54:	46bd      	mov	sp, r7
 8001b56:	b004      	add	sp, #16
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	46c0      	nop			; (mov r8, r8)
 8001b5c:	00001001 	.word	0x00001001
 8001b60:	40012708 	.word	0x40012708
 8001b64:	20000000 	.word	0x20000000
 8001b68:	000f4240 	.word	0x000f4240
 8001b6c:	ffbfffff 	.word	0xffbfffff
 8001b70:	feffffff 	.word	0xfeffffff
 8001b74:	ff7fffff 	.word	0xff7fffff

08001b78 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b80:	2300      	movs	r3, #0
 8001b82:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001b84:	2300      	movs	r3, #0
 8001b86:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	2203      	movs	r2, #3
 8001b90:	4013      	ands	r3, r2
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d112      	bne.n	8001bbc <ADC_Enable+0x44>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d009      	beq.n	8001bb8 <ADC_Enable+0x40>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	68da      	ldr	r2, [r3, #12]
 8001baa:	2380      	movs	r3, #128	; 0x80
 8001bac:	021b      	lsls	r3, r3, #8
 8001bae:	401a      	ands	r2, r3
 8001bb0:	2380      	movs	r3, #128	; 0x80
 8001bb2:	021b      	lsls	r3, r3, #8
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d101      	bne.n	8001bbc <ADC_Enable+0x44>
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e000      	b.n	8001bbe <ADC_Enable+0x46>
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d152      	bne.n	8001c68 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	4a2a      	ldr	r2, [pc, #168]	; (8001c74 <ADC_Enable+0xfc>)
 8001bca:	4013      	ands	r3, r2
 8001bcc:	d00d      	beq.n	8001bea <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd2:	2210      	movs	r2, #16
 8001bd4:	431a      	orrs	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bde:	2201      	movs	r2, #1
 8001be0:	431a      	orrs	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e03f      	b.n	8001c6a <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001bfa:	4b1f      	ldr	r3, [pc, #124]	; (8001c78 <ADC_Enable+0x100>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	491f      	ldr	r1, [pc, #124]	; (8001c7c <ADC_Enable+0x104>)
 8001c00:	0018      	movs	r0, r3
 8001c02:	f7fe fa81 	bl	8000108 <__udivsi3>
 8001c06:	0003      	movs	r3, r0
 8001c08:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001c0a:	e002      	b.n	8001c12 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1f9      	bne.n	8001c0c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c18:	f7ff fc46 	bl	80014a8 <HAL_GetTick>
 8001c1c:	0003      	movs	r3, r0
 8001c1e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001c20:	e01b      	b.n	8001c5a <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c22:	f7ff fc41 	bl	80014a8 <HAL_GetTick>
 8001c26:	0002      	movs	r2, r0
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d914      	bls.n	8001c5a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2201      	movs	r2, #1
 8001c38:	4013      	ands	r3, r2
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d00d      	beq.n	8001c5a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c42:	2210      	movs	r2, #16
 8001c44:	431a      	orrs	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c4e:	2201      	movs	r2, #1
 8001c50:	431a      	orrs	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e007      	b.n	8001c6a <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2201      	movs	r2, #1
 8001c62:	4013      	ands	r3, r2
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d1dc      	bne.n	8001c22 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	0018      	movs	r0, r3
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	b004      	add	sp, #16
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	46c0      	nop			; (mov r8, r8)
 8001c74:	80000017 	.word	0x80000017
 8001c78:	20000000 	.word	0x20000000
 8001c7c:	000f4240 	.word	0x000f4240

08001c80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	0002      	movs	r2, r0
 8001c88:	1dfb      	adds	r3, r7, #7
 8001c8a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c8c:	1dfb      	adds	r3, r7, #7
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b7f      	cmp	r3, #127	; 0x7f
 8001c92:	d809      	bhi.n	8001ca8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c94:	1dfb      	adds	r3, r7, #7
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	001a      	movs	r2, r3
 8001c9a:	231f      	movs	r3, #31
 8001c9c:	401a      	ands	r2, r3
 8001c9e:	4b04      	ldr	r3, [pc, #16]	; (8001cb0 <__NVIC_EnableIRQ+0x30>)
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	4091      	lsls	r1, r2
 8001ca4:	000a      	movs	r2, r1
 8001ca6:	601a      	str	r2, [r3, #0]
  }
}
 8001ca8:	46c0      	nop			; (mov r8, r8)
 8001caa:	46bd      	mov	sp, r7
 8001cac:	b002      	add	sp, #8
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	e000e100 	.word	0xe000e100

08001cb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cb4:	b590      	push	{r4, r7, lr}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	0002      	movs	r2, r0
 8001cbc:	6039      	str	r1, [r7, #0]
 8001cbe:	1dfb      	adds	r3, r7, #7
 8001cc0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001cc2:	1dfb      	adds	r3, r7, #7
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	2b7f      	cmp	r3, #127	; 0x7f
 8001cc8:	d828      	bhi.n	8001d1c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cca:	4a2f      	ldr	r2, [pc, #188]	; (8001d88 <__NVIC_SetPriority+0xd4>)
 8001ccc:	1dfb      	adds	r3, r7, #7
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	b25b      	sxtb	r3, r3
 8001cd2:	089b      	lsrs	r3, r3, #2
 8001cd4:	33c0      	adds	r3, #192	; 0xc0
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	589b      	ldr	r3, [r3, r2]
 8001cda:	1dfa      	adds	r2, r7, #7
 8001cdc:	7812      	ldrb	r2, [r2, #0]
 8001cde:	0011      	movs	r1, r2
 8001ce0:	2203      	movs	r2, #3
 8001ce2:	400a      	ands	r2, r1
 8001ce4:	00d2      	lsls	r2, r2, #3
 8001ce6:	21ff      	movs	r1, #255	; 0xff
 8001ce8:	4091      	lsls	r1, r2
 8001cea:	000a      	movs	r2, r1
 8001cec:	43d2      	mvns	r2, r2
 8001cee:	401a      	ands	r2, r3
 8001cf0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	019b      	lsls	r3, r3, #6
 8001cf6:	22ff      	movs	r2, #255	; 0xff
 8001cf8:	401a      	ands	r2, r3
 8001cfa:	1dfb      	adds	r3, r7, #7
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	0018      	movs	r0, r3
 8001d00:	2303      	movs	r3, #3
 8001d02:	4003      	ands	r3, r0
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d08:	481f      	ldr	r0, [pc, #124]	; (8001d88 <__NVIC_SetPriority+0xd4>)
 8001d0a:	1dfb      	adds	r3, r7, #7
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	b25b      	sxtb	r3, r3
 8001d10:	089b      	lsrs	r3, r3, #2
 8001d12:	430a      	orrs	r2, r1
 8001d14:	33c0      	adds	r3, #192	; 0xc0
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001d1a:	e031      	b.n	8001d80 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d1c:	4a1b      	ldr	r2, [pc, #108]	; (8001d8c <__NVIC_SetPriority+0xd8>)
 8001d1e:	1dfb      	adds	r3, r7, #7
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	0019      	movs	r1, r3
 8001d24:	230f      	movs	r3, #15
 8001d26:	400b      	ands	r3, r1
 8001d28:	3b08      	subs	r3, #8
 8001d2a:	089b      	lsrs	r3, r3, #2
 8001d2c:	3306      	adds	r3, #6
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	18d3      	adds	r3, r2, r3
 8001d32:	3304      	adds	r3, #4
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	1dfa      	adds	r2, r7, #7
 8001d38:	7812      	ldrb	r2, [r2, #0]
 8001d3a:	0011      	movs	r1, r2
 8001d3c:	2203      	movs	r2, #3
 8001d3e:	400a      	ands	r2, r1
 8001d40:	00d2      	lsls	r2, r2, #3
 8001d42:	21ff      	movs	r1, #255	; 0xff
 8001d44:	4091      	lsls	r1, r2
 8001d46:	000a      	movs	r2, r1
 8001d48:	43d2      	mvns	r2, r2
 8001d4a:	401a      	ands	r2, r3
 8001d4c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	019b      	lsls	r3, r3, #6
 8001d52:	22ff      	movs	r2, #255	; 0xff
 8001d54:	401a      	ands	r2, r3
 8001d56:	1dfb      	adds	r3, r7, #7
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	0018      	movs	r0, r3
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	4003      	ands	r3, r0
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d64:	4809      	ldr	r0, [pc, #36]	; (8001d8c <__NVIC_SetPriority+0xd8>)
 8001d66:	1dfb      	adds	r3, r7, #7
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	001c      	movs	r4, r3
 8001d6c:	230f      	movs	r3, #15
 8001d6e:	4023      	ands	r3, r4
 8001d70:	3b08      	subs	r3, #8
 8001d72:	089b      	lsrs	r3, r3, #2
 8001d74:	430a      	orrs	r2, r1
 8001d76:	3306      	adds	r3, #6
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	18c3      	adds	r3, r0, r3
 8001d7c:	3304      	adds	r3, #4
 8001d7e:	601a      	str	r2, [r3, #0]
}
 8001d80:	46c0      	nop			; (mov r8, r8)
 8001d82:	46bd      	mov	sp, r7
 8001d84:	b003      	add	sp, #12
 8001d86:	bd90      	pop	{r4, r7, pc}
 8001d88:	e000e100 	.word	0xe000e100
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	1e5a      	subs	r2, r3, #1
 8001d9c:	2380      	movs	r3, #128	; 0x80
 8001d9e:	045b      	lsls	r3, r3, #17
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d301      	bcc.n	8001da8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001da4:	2301      	movs	r3, #1
 8001da6:	e010      	b.n	8001dca <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001da8:	4b0a      	ldr	r3, [pc, #40]	; (8001dd4 <SysTick_Config+0x44>)
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	3a01      	subs	r2, #1
 8001dae:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001db0:	2301      	movs	r3, #1
 8001db2:	425b      	negs	r3, r3
 8001db4:	2103      	movs	r1, #3
 8001db6:	0018      	movs	r0, r3
 8001db8:	f7ff ff7c 	bl	8001cb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dbc:	4b05      	ldr	r3, [pc, #20]	; (8001dd4 <SysTick_Config+0x44>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dc2:	4b04      	ldr	r3, [pc, #16]	; (8001dd4 <SysTick_Config+0x44>)
 8001dc4:	2207      	movs	r2, #7
 8001dc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	0018      	movs	r0, r3
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	b002      	add	sp, #8
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	46c0      	nop			; (mov r8, r8)
 8001dd4:	e000e010 	.word	0xe000e010

08001dd8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60b9      	str	r1, [r7, #8]
 8001de0:	607a      	str	r2, [r7, #4]
 8001de2:	210f      	movs	r1, #15
 8001de4:	187b      	adds	r3, r7, r1
 8001de6:	1c02      	adds	r2, r0, #0
 8001de8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001dea:	68ba      	ldr	r2, [r7, #8]
 8001dec:	187b      	adds	r3, r7, r1
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	b25b      	sxtb	r3, r3
 8001df2:	0011      	movs	r1, r2
 8001df4:	0018      	movs	r0, r3
 8001df6:	f7ff ff5d 	bl	8001cb4 <__NVIC_SetPriority>
}
 8001dfa:	46c0      	nop			; (mov r8, r8)
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	b004      	add	sp, #16
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b082      	sub	sp, #8
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	0002      	movs	r2, r0
 8001e0a:	1dfb      	adds	r3, r7, #7
 8001e0c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e0e:	1dfb      	adds	r3, r7, #7
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	b25b      	sxtb	r3, r3
 8001e14:	0018      	movs	r0, r3
 8001e16:	f7ff ff33 	bl	8001c80 <__NVIC_EnableIRQ>
}
 8001e1a:	46c0      	nop			; (mov r8, r8)
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	b002      	add	sp, #8
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	f7ff ffaf 	bl	8001d90 <SysTick_Config>
 8001e32:	0003      	movs	r3, r0
}
 8001e34:	0018      	movs	r0, r3
 8001e36:	46bd      	mov	sp, r7
 8001e38:	b002      	add	sp, #8
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e44:	2300      	movs	r3, #0
 8001e46:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e036      	b.n	8001ec0 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2221      	movs	r2, #33	; 0x21
 8001e56:	2102      	movs	r1, #2
 8001e58:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	4a18      	ldr	r2, [pc, #96]	; (8001ec8 <HAL_DMA_Init+0x8c>)
 8001e66:	4013      	ands	r3, r2
 8001e68:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001e72:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	695b      	ldr	r3, [r3, #20]
 8001e84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	69db      	ldr	r3, [r3, #28]
 8001e90:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	f000 f9c4 	bl	8002230 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2221      	movs	r2, #33	; 0x21
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2220      	movs	r2, #32
 8001eba:	2100      	movs	r1, #0
 8001ebc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	0018      	movs	r0, r3
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	b004      	add	sp, #16
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	ffffc00f 	.word	0xffffc00f

08001ecc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
 8001ed8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001eda:	2317      	movs	r3, #23
 8001edc:	18fb      	adds	r3, r7, r3
 8001ede:	2200      	movs	r2, #0
 8001ee0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2220      	movs	r2, #32
 8001ee6:	5c9b      	ldrb	r3, [r3, r2]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d101      	bne.n	8001ef0 <HAL_DMA_Start_IT+0x24>
 8001eec:	2302      	movs	r3, #2
 8001eee:	e04f      	b.n	8001f90 <HAL_DMA_Start_IT+0xc4>
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2220      	movs	r2, #32
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2221      	movs	r2, #33	; 0x21
 8001efc:	5c9b      	ldrb	r3, [r3, r2]
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d13a      	bne.n	8001f7a <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2221      	movs	r2, #33	; 0x21
 8001f08:	2102      	movs	r1, #2
 8001f0a:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2101      	movs	r1, #1
 8001f1e:	438a      	bics	r2, r1
 8001f20:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	68b9      	ldr	r1, [r7, #8]
 8001f28:	68f8      	ldr	r0, [r7, #12]
 8001f2a:	f000 f954 	bl	80021d6 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d008      	beq.n	8001f48 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	210e      	movs	r1, #14
 8001f42:	430a      	orrs	r2, r1
 8001f44:	601a      	str	r2, [r3, #0]
 8001f46:	e00f      	b.n	8001f68 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	210a      	movs	r1, #10
 8001f54:	430a      	orrs	r2, r1
 8001f56:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2104      	movs	r1, #4
 8001f64:	438a      	bics	r2, r1
 8001f66:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2101      	movs	r1, #1
 8001f74:	430a      	orrs	r2, r1
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	e007      	b.n	8001f8a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2220      	movs	r2, #32
 8001f7e:	2100      	movs	r1, #0
 8001f80:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001f82:	2317      	movs	r3, #23
 8001f84:	18fb      	adds	r3, r7, r3
 8001f86:	2202      	movs	r2, #2
 8001f88:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001f8a:	2317      	movs	r3, #23
 8001f8c:	18fb      	adds	r3, r7, r3
 8001f8e:	781b      	ldrb	r3, [r3, #0]
}
 8001f90:	0018      	movs	r0, r3
 8001f92:	46bd      	mov	sp, r7
 8001f94:	b006      	add	sp, #24
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2221      	movs	r2, #33	; 0x21
 8001fa4:	5c9b      	ldrb	r3, [r3, r2]
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d008      	beq.n	8001fbe <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2204      	movs	r2, #4
 8001fb0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2220      	movs	r2, #32
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e020      	b.n	8002000 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	210e      	movs	r1, #14
 8001fca:	438a      	bics	r2, r1
 8001fcc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2101      	movs	r1, #1
 8001fda:	438a      	bics	r2, r1
 8001fdc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe6:	2101      	movs	r1, #1
 8001fe8:	4091      	lsls	r1, r2
 8001fea:	000a      	movs	r2, r1
 8001fec:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2221      	movs	r2, #33	; 0x21
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2220      	movs	r2, #32
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	0018      	movs	r0, r3
 8002002:	46bd      	mov	sp, r7
 8002004:	b002      	add	sp, #8
 8002006:	bd80      	pop	{r7, pc}

08002008 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002010:	210f      	movs	r1, #15
 8002012:	187b      	adds	r3, r7, r1
 8002014:	2200      	movs	r2, #0
 8002016:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2221      	movs	r2, #33	; 0x21
 800201c:	5c9b      	ldrb	r3, [r3, r2]
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d006      	beq.n	8002032 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2204      	movs	r2, #4
 8002028:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 800202a:	187b      	adds	r3, r7, r1
 800202c:	2201      	movs	r2, #1
 800202e:	701a      	strb	r2, [r3, #0]
 8002030:	e028      	b.n	8002084 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	210e      	movs	r1, #14
 800203e:	438a      	bics	r2, r1
 8002040:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2101      	movs	r1, #1
 800204e:	438a      	bics	r2, r1
 8002050:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800205a:	2101      	movs	r1, #1
 800205c:	4091      	lsls	r1, r2
 800205e:	000a      	movs	r2, r1
 8002060:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2221      	movs	r2, #33	; 0x21
 8002066:	2101      	movs	r1, #1
 8002068:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2220      	movs	r2, #32
 800206e:	2100      	movs	r1, #0
 8002070:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002076:	2b00      	cmp	r3, #0
 8002078:	d004      	beq.n	8002084 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	0010      	movs	r0, r2
 8002082:	4798      	blx	r3
    }
  }
  return status;
 8002084:	230f      	movs	r3, #15
 8002086:	18fb      	adds	r3, r7, r3
 8002088:	781b      	ldrb	r3, [r3, #0]
}
 800208a:	0018      	movs	r0, r3
 800208c:	46bd      	mov	sp, r7
 800208e:	b004      	add	sp, #16
 8002090:	bd80      	pop	{r7, pc}

08002092 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b084      	sub	sp, #16
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	2204      	movs	r2, #4
 80020b0:	409a      	lsls	r2, r3
 80020b2:	0013      	movs	r3, r2
 80020b4:	68fa      	ldr	r2, [r7, #12]
 80020b6:	4013      	ands	r3, r2
 80020b8:	d024      	beq.n	8002104 <HAL_DMA_IRQHandler+0x72>
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	2204      	movs	r2, #4
 80020be:	4013      	ands	r3, r2
 80020c0:	d020      	beq.n	8002104 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2220      	movs	r2, #32
 80020ca:	4013      	ands	r3, r2
 80020cc:	d107      	bne.n	80020de <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2104      	movs	r1, #4
 80020da:	438a      	bics	r2, r1
 80020dc:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020e6:	2104      	movs	r1, #4
 80020e8:	4091      	lsls	r1, r2
 80020ea:	000a      	movs	r2, r1
 80020ec:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d100      	bne.n	80020f8 <HAL_DMA_IRQHandler+0x66>
 80020f6:	e06a      	b.n	80021ce <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	0010      	movs	r0, r2
 8002100:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002102:	e064      	b.n	80021ce <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002108:	2202      	movs	r2, #2
 800210a:	409a      	lsls	r2, r3
 800210c:	0013      	movs	r3, r2
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	4013      	ands	r3, r2
 8002112:	d02b      	beq.n	800216c <HAL_DMA_IRQHandler+0xda>
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	2202      	movs	r2, #2
 8002118:	4013      	ands	r3, r2
 800211a:	d027      	beq.n	800216c <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2220      	movs	r2, #32
 8002124:	4013      	ands	r3, r2
 8002126:	d10b      	bne.n	8002140 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	210a      	movs	r1, #10
 8002134:	438a      	bics	r2, r1
 8002136:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2221      	movs	r2, #33	; 0x21
 800213c:	2101      	movs	r1, #1
 800213e:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002148:	2102      	movs	r1, #2
 800214a:	4091      	lsls	r1, r2
 800214c:	000a      	movs	r2, r1
 800214e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2220      	movs	r2, #32
 8002154:	2100      	movs	r1, #0
 8002156:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215c:	2b00      	cmp	r3, #0
 800215e:	d036      	beq.n	80021ce <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	0010      	movs	r0, r2
 8002168:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800216a:	e030      	b.n	80021ce <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002170:	2208      	movs	r2, #8
 8002172:	409a      	lsls	r2, r3
 8002174:	0013      	movs	r3, r2
 8002176:	68fa      	ldr	r2, [r7, #12]
 8002178:	4013      	ands	r3, r2
 800217a:	d028      	beq.n	80021ce <HAL_DMA_IRQHandler+0x13c>
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	2208      	movs	r2, #8
 8002180:	4013      	ands	r3, r2
 8002182:	d024      	beq.n	80021ce <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	210e      	movs	r1, #14
 8002190:	438a      	bics	r2, r1
 8002192:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800219c:	2101      	movs	r1, #1
 800219e:	4091      	lsls	r1, r2
 80021a0:	000a      	movs	r2, r1
 80021a2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2221      	movs	r2, #33	; 0x21
 80021ae:	2101      	movs	r1, #1
 80021b0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2220      	movs	r2, #32
 80021b6:	2100      	movs	r1, #0
 80021b8:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d005      	beq.n	80021ce <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	0010      	movs	r0, r2
 80021ca:	4798      	blx	r3
    }
  }
}
 80021cc:	e7ff      	b.n	80021ce <HAL_DMA_IRQHandler+0x13c>
 80021ce:	46c0      	nop			; (mov r8, r8)
 80021d0:	46bd      	mov	sp, r7
 80021d2:	b004      	add	sp, #16
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b084      	sub	sp, #16
 80021da:	af00      	add	r7, sp, #0
 80021dc:	60f8      	str	r0, [r7, #12]
 80021de:	60b9      	str	r1, [r7, #8]
 80021e0:	607a      	str	r2, [r7, #4]
 80021e2:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ec:	2101      	movs	r1, #1
 80021ee:	4091      	lsls	r1, r2
 80021f0:	000a      	movs	r2, r1
 80021f2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	2b10      	cmp	r3, #16
 8002202:	d108      	bne.n	8002216 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	68ba      	ldr	r2, [r7, #8]
 8002212:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002214:	e007      	b.n	8002226 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	60da      	str	r2, [r3, #12]
}
 8002226:	46c0      	nop			; (mov r8, r8)
 8002228:	46bd      	mov	sp, r7
 800222a:	b004      	add	sp, #16
 800222c:	bd80      	pop	{r7, pc}
	...

08002230 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a08      	ldr	r2, [pc, #32]	; (8002260 <DMA_CalcBaseAndBitshift+0x30>)
 800223e:	4694      	mov	ip, r2
 8002240:	4463      	add	r3, ip
 8002242:	2114      	movs	r1, #20
 8002244:	0018      	movs	r0, r3
 8002246:	f7fd ff5f 	bl	8000108 <__udivsi3>
 800224a:	0003      	movs	r3, r0
 800224c:	009a      	lsls	r2, r3, #2
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a03      	ldr	r2, [pc, #12]	; (8002264 <DMA_CalcBaseAndBitshift+0x34>)
 8002256:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002258:	46c0      	nop			; (mov r8, r8)
 800225a:	46bd      	mov	sp, r7
 800225c:	b002      	add	sp, #8
 800225e:	bd80      	pop	{r7, pc}
 8002260:	bffdfff8 	.word	0xbffdfff8
 8002264:	40020000 	.word	0x40020000

08002268 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002272:	2300      	movs	r3, #0
 8002274:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002276:	e149      	b.n	800250c <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2101      	movs	r1, #1
 800227e:	697a      	ldr	r2, [r7, #20]
 8002280:	4091      	lsls	r1, r2
 8002282:	000a      	movs	r2, r1
 8002284:	4013      	ands	r3, r2
 8002286:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d100      	bne.n	8002290 <HAL_GPIO_Init+0x28>
 800228e:	e13a      	b.n	8002506 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	2203      	movs	r2, #3
 8002296:	4013      	ands	r3, r2
 8002298:	2b01      	cmp	r3, #1
 800229a:	d005      	beq.n	80022a8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	2203      	movs	r2, #3
 80022a2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d130      	bne.n	800230a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	2203      	movs	r2, #3
 80022b4:	409a      	lsls	r2, r3
 80022b6:	0013      	movs	r3, r2
 80022b8:	43da      	mvns	r2, r3
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	4013      	ands	r3, r2
 80022be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	68da      	ldr	r2, [r3, #12]
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	409a      	lsls	r2, r3
 80022ca:	0013      	movs	r3, r2
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022de:	2201      	movs	r2, #1
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	409a      	lsls	r2, r3
 80022e4:	0013      	movs	r3, r2
 80022e6:	43da      	mvns	r2, r3
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	4013      	ands	r3, r2
 80022ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	091b      	lsrs	r3, r3, #4
 80022f4:	2201      	movs	r2, #1
 80022f6:	401a      	ands	r2, r3
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	409a      	lsls	r2, r3
 80022fc:	0013      	movs	r3, r2
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	4313      	orrs	r3, r2
 8002302:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	2203      	movs	r2, #3
 8002310:	4013      	ands	r3, r2
 8002312:	2b03      	cmp	r3, #3
 8002314:	d017      	beq.n	8002346 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	2203      	movs	r2, #3
 8002322:	409a      	lsls	r2, r3
 8002324:	0013      	movs	r3, r2
 8002326:	43da      	mvns	r2, r3
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	4013      	ands	r3, r2
 800232c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	689a      	ldr	r2, [r3, #8]
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	409a      	lsls	r2, r3
 8002338:	0013      	movs	r3, r2
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	4313      	orrs	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	2203      	movs	r2, #3
 800234c:	4013      	ands	r3, r2
 800234e:	2b02      	cmp	r3, #2
 8002350:	d123      	bne.n	800239a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	08da      	lsrs	r2, r3, #3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	3208      	adds	r2, #8
 800235a:	0092      	lsls	r2, r2, #2
 800235c:	58d3      	ldr	r3, [r2, r3]
 800235e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	2207      	movs	r2, #7
 8002364:	4013      	ands	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	220f      	movs	r2, #15
 800236a:	409a      	lsls	r2, r3
 800236c:	0013      	movs	r3, r2
 800236e:	43da      	mvns	r2, r3
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	4013      	ands	r3, r2
 8002374:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	691a      	ldr	r2, [r3, #16]
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	2107      	movs	r1, #7
 800237e:	400b      	ands	r3, r1
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	409a      	lsls	r2, r3
 8002384:	0013      	movs	r3, r2
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	4313      	orrs	r3, r2
 800238a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	08da      	lsrs	r2, r3, #3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3208      	adds	r2, #8
 8002394:	0092      	lsls	r2, r2, #2
 8002396:	6939      	ldr	r1, [r7, #16]
 8002398:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	2203      	movs	r2, #3
 80023a6:	409a      	lsls	r2, r3
 80023a8:	0013      	movs	r3, r2
 80023aa:	43da      	mvns	r2, r3
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	4013      	ands	r3, r2
 80023b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2203      	movs	r2, #3
 80023b8:	401a      	ands	r2, r3
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	409a      	lsls	r2, r3
 80023c0:	0013      	movs	r3, r2
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	23c0      	movs	r3, #192	; 0xc0
 80023d4:	029b      	lsls	r3, r3, #10
 80023d6:	4013      	ands	r3, r2
 80023d8:	d100      	bne.n	80023dc <HAL_GPIO_Init+0x174>
 80023da:	e094      	b.n	8002506 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023dc:	4b51      	ldr	r3, [pc, #324]	; (8002524 <HAL_GPIO_Init+0x2bc>)
 80023de:	699a      	ldr	r2, [r3, #24]
 80023e0:	4b50      	ldr	r3, [pc, #320]	; (8002524 <HAL_GPIO_Init+0x2bc>)
 80023e2:	2101      	movs	r1, #1
 80023e4:	430a      	orrs	r2, r1
 80023e6:	619a      	str	r2, [r3, #24]
 80023e8:	4b4e      	ldr	r3, [pc, #312]	; (8002524 <HAL_GPIO_Init+0x2bc>)
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	2201      	movs	r2, #1
 80023ee:	4013      	ands	r3, r2
 80023f0:	60bb      	str	r3, [r7, #8]
 80023f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023f4:	4a4c      	ldr	r2, [pc, #304]	; (8002528 <HAL_GPIO_Init+0x2c0>)
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	089b      	lsrs	r3, r3, #2
 80023fa:	3302      	adds	r3, #2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	589b      	ldr	r3, [r3, r2]
 8002400:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	2203      	movs	r2, #3
 8002406:	4013      	ands	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	220f      	movs	r2, #15
 800240c:	409a      	lsls	r2, r3
 800240e:	0013      	movs	r3, r2
 8002410:	43da      	mvns	r2, r3
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	4013      	ands	r3, r2
 8002416:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	2390      	movs	r3, #144	; 0x90
 800241c:	05db      	lsls	r3, r3, #23
 800241e:	429a      	cmp	r2, r3
 8002420:	d00d      	beq.n	800243e <HAL_GPIO_Init+0x1d6>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a41      	ldr	r2, [pc, #260]	; (800252c <HAL_GPIO_Init+0x2c4>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d007      	beq.n	800243a <HAL_GPIO_Init+0x1d2>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a40      	ldr	r2, [pc, #256]	; (8002530 <HAL_GPIO_Init+0x2c8>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d101      	bne.n	8002436 <HAL_GPIO_Init+0x1ce>
 8002432:	2302      	movs	r3, #2
 8002434:	e004      	b.n	8002440 <HAL_GPIO_Init+0x1d8>
 8002436:	2305      	movs	r3, #5
 8002438:	e002      	b.n	8002440 <HAL_GPIO_Init+0x1d8>
 800243a:	2301      	movs	r3, #1
 800243c:	e000      	b.n	8002440 <HAL_GPIO_Init+0x1d8>
 800243e:	2300      	movs	r3, #0
 8002440:	697a      	ldr	r2, [r7, #20]
 8002442:	2103      	movs	r1, #3
 8002444:	400a      	ands	r2, r1
 8002446:	0092      	lsls	r2, r2, #2
 8002448:	4093      	lsls	r3, r2
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	4313      	orrs	r3, r2
 800244e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002450:	4935      	ldr	r1, [pc, #212]	; (8002528 <HAL_GPIO_Init+0x2c0>)
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	089b      	lsrs	r3, r3, #2
 8002456:	3302      	adds	r3, #2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800245e:	4b35      	ldr	r3, [pc, #212]	; (8002534 <HAL_GPIO_Init+0x2cc>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	43da      	mvns	r2, r3
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	4013      	ands	r3, r2
 800246c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685a      	ldr	r2, [r3, #4]
 8002472:	2380      	movs	r3, #128	; 0x80
 8002474:	035b      	lsls	r3, r3, #13
 8002476:	4013      	ands	r3, r2
 8002478:	d003      	beq.n	8002482 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	4313      	orrs	r3, r2
 8002480:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002482:	4b2c      	ldr	r3, [pc, #176]	; (8002534 <HAL_GPIO_Init+0x2cc>)
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002488:	4b2a      	ldr	r3, [pc, #168]	; (8002534 <HAL_GPIO_Init+0x2cc>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	43da      	mvns	r2, r3
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	4013      	ands	r3, r2
 8002496:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	2380      	movs	r3, #128	; 0x80
 800249e:	039b      	lsls	r3, r3, #14
 80024a0:	4013      	ands	r3, r2
 80024a2:	d003      	beq.n	80024ac <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80024ac:	4b21      	ldr	r3, [pc, #132]	; (8002534 <HAL_GPIO_Init+0x2cc>)
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80024b2:	4b20      	ldr	r3, [pc, #128]	; (8002534 <HAL_GPIO_Init+0x2cc>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	43da      	mvns	r2, r3
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	4013      	ands	r3, r2
 80024c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	2380      	movs	r3, #128	; 0x80
 80024c8:	029b      	lsls	r3, r3, #10
 80024ca:	4013      	ands	r3, r2
 80024cc:	d003      	beq.n	80024d6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80024d6:	4b17      	ldr	r3, [pc, #92]	; (8002534 <HAL_GPIO_Init+0x2cc>)
 80024d8:	693a      	ldr	r2, [r7, #16]
 80024da:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80024dc:	4b15      	ldr	r3, [pc, #84]	; (8002534 <HAL_GPIO_Init+0x2cc>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	43da      	mvns	r2, r3
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	4013      	ands	r3, r2
 80024ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	2380      	movs	r3, #128	; 0x80
 80024f2:	025b      	lsls	r3, r3, #9
 80024f4:	4013      	ands	r3, r2
 80024f6:	d003      	beq.n	8002500 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002500:	4b0c      	ldr	r3, [pc, #48]	; (8002534 <HAL_GPIO_Init+0x2cc>)
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	3301      	adds	r3, #1
 800250a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	40da      	lsrs	r2, r3
 8002514:	1e13      	subs	r3, r2, #0
 8002516:	d000      	beq.n	800251a <HAL_GPIO_Init+0x2b2>
 8002518:	e6ae      	b.n	8002278 <HAL_GPIO_Init+0x10>
  } 
}
 800251a:	46c0      	nop			; (mov r8, r8)
 800251c:	46c0      	nop			; (mov r8, r8)
 800251e:	46bd      	mov	sp, r7
 8002520:	b006      	add	sp, #24
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40021000 	.word	0x40021000
 8002528:	40010000 	.word	0x40010000
 800252c:	48000400 	.word	0x48000400
 8002530:	48000800 	.word	0x48000800
 8002534:	40010400 	.word	0x40010400

08002538 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b088      	sub	sp, #32
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d102      	bne.n	800254c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	f000 fb76 	bl	8002c38 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2201      	movs	r2, #1
 8002552:	4013      	ands	r3, r2
 8002554:	d100      	bne.n	8002558 <HAL_RCC_OscConfig+0x20>
 8002556:	e08e      	b.n	8002676 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002558:	4bc5      	ldr	r3, [pc, #788]	; (8002870 <HAL_RCC_OscConfig+0x338>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	220c      	movs	r2, #12
 800255e:	4013      	ands	r3, r2
 8002560:	2b04      	cmp	r3, #4
 8002562:	d00e      	beq.n	8002582 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002564:	4bc2      	ldr	r3, [pc, #776]	; (8002870 <HAL_RCC_OscConfig+0x338>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	220c      	movs	r2, #12
 800256a:	4013      	ands	r3, r2
 800256c:	2b08      	cmp	r3, #8
 800256e:	d117      	bne.n	80025a0 <HAL_RCC_OscConfig+0x68>
 8002570:	4bbf      	ldr	r3, [pc, #764]	; (8002870 <HAL_RCC_OscConfig+0x338>)
 8002572:	685a      	ldr	r2, [r3, #4]
 8002574:	23c0      	movs	r3, #192	; 0xc0
 8002576:	025b      	lsls	r3, r3, #9
 8002578:	401a      	ands	r2, r3
 800257a:	2380      	movs	r3, #128	; 0x80
 800257c:	025b      	lsls	r3, r3, #9
 800257e:	429a      	cmp	r2, r3
 8002580:	d10e      	bne.n	80025a0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002582:	4bbb      	ldr	r3, [pc, #748]	; (8002870 <HAL_RCC_OscConfig+0x338>)
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	2380      	movs	r3, #128	; 0x80
 8002588:	029b      	lsls	r3, r3, #10
 800258a:	4013      	ands	r3, r2
 800258c:	d100      	bne.n	8002590 <HAL_RCC_OscConfig+0x58>
 800258e:	e071      	b.n	8002674 <HAL_RCC_OscConfig+0x13c>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d000      	beq.n	800259a <HAL_RCC_OscConfig+0x62>
 8002598:	e06c      	b.n	8002674 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	f000 fb4c 	bl	8002c38 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d107      	bne.n	80025b8 <HAL_RCC_OscConfig+0x80>
 80025a8:	4bb1      	ldr	r3, [pc, #708]	; (8002870 <HAL_RCC_OscConfig+0x338>)
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	4bb0      	ldr	r3, [pc, #704]	; (8002870 <HAL_RCC_OscConfig+0x338>)
 80025ae:	2180      	movs	r1, #128	; 0x80
 80025b0:	0249      	lsls	r1, r1, #9
 80025b2:	430a      	orrs	r2, r1
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	e02f      	b.n	8002618 <HAL_RCC_OscConfig+0xe0>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d10c      	bne.n	80025da <HAL_RCC_OscConfig+0xa2>
 80025c0:	4bab      	ldr	r3, [pc, #684]	; (8002870 <HAL_RCC_OscConfig+0x338>)
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	4baa      	ldr	r3, [pc, #680]	; (8002870 <HAL_RCC_OscConfig+0x338>)
 80025c6:	49ab      	ldr	r1, [pc, #684]	; (8002874 <HAL_RCC_OscConfig+0x33c>)
 80025c8:	400a      	ands	r2, r1
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	4ba8      	ldr	r3, [pc, #672]	; (8002870 <HAL_RCC_OscConfig+0x338>)
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	4ba7      	ldr	r3, [pc, #668]	; (8002870 <HAL_RCC_OscConfig+0x338>)
 80025d2:	49a9      	ldr	r1, [pc, #676]	; (8002878 <HAL_RCC_OscConfig+0x340>)
 80025d4:	400a      	ands	r2, r1
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	e01e      	b.n	8002618 <HAL_RCC_OscConfig+0xe0>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2b05      	cmp	r3, #5
 80025e0:	d10e      	bne.n	8002600 <HAL_RCC_OscConfig+0xc8>
 80025e2:	4ba3      	ldr	r3, [pc, #652]	; (8002870 <HAL_RCC_OscConfig+0x338>)
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	4ba2      	ldr	r3, [pc, #648]	; (8002870 <HAL_RCC_OscConfig+0x338>)
 80025e8:	2180      	movs	r1, #128	; 0x80
 80025ea:	02c9      	lsls	r1, r1, #11
 80025ec:	430a      	orrs	r2, r1
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	4b9f      	ldr	r3, [pc, #636]	; (8002870 <HAL_RCC_OscConfig+0x338>)
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	4b9e      	ldr	r3, [pc, #632]	; (8002870 <HAL_RCC_OscConfig+0x338>)
 80025f6:	2180      	movs	r1, #128	; 0x80
 80025f8:	0249      	lsls	r1, r1, #9
 80025fa:	430a      	orrs	r2, r1
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	e00b      	b.n	8002618 <HAL_RCC_OscConfig+0xe0>
 8002600:	4b9b      	ldr	r3, [pc, #620]	; (8002870 <HAL_RCC_OscConfig+0x338>)
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	4b9a      	ldr	r3, [pc, #616]	; (8002870 <HAL_RCC_OscConfig+0x338>)
 8002606:	499b      	ldr	r1, [pc, #620]	; (8002874 <HAL_RCC_OscConfig+0x33c>)
 8002608:	400a      	ands	r2, r1
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	4b98      	ldr	r3, [pc, #608]	; (8002870 <HAL_RCC_OscConfig+0x338>)
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	4b97      	ldr	r3, [pc, #604]	; (8002870 <HAL_RCC_OscConfig+0x338>)
 8002612:	4999      	ldr	r1, [pc, #612]	; (8002878 <HAL_RCC_OscConfig+0x340>)
 8002614:	400a      	ands	r2, r1
 8002616:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d014      	beq.n	800264a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002620:	f7fe ff42 	bl	80014a8 <HAL_GetTick>
 8002624:	0003      	movs	r3, r0
 8002626:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002628:	e008      	b.n	800263c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800262a:	f7fe ff3d 	bl	80014a8 <HAL_GetTick>
 800262e:	0002      	movs	r2, r0
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b64      	cmp	r3, #100	; 0x64
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e2fd      	b.n	8002c38 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800263c:	4b8c      	ldr	r3, [pc, #560]	; (8002870 <HAL_RCC_OscConfig+0x338>)
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	2380      	movs	r3, #128	; 0x80
 8002642:	029b      	lsls	r3, r3, #10
 8002644:	4013      	ands	r3, r2
 8002646:	d0f0      	beq.n	800262a <HAL_RCC_OscConfig+0xf2>
 8002648:	e015      	b.n	8002676 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800264a:	f7fe ff2d 	bl	80014a8 <HAL_GetTick>
 800264e:	0003      	movs	r3, r0
 8002650:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002654:	f7fe ff28 	bl	80014a8 <HAL_GetTick>
 8002658:	0002      	movs	r2, r0
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b64      	cmp	r3, #100	; 0x64
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e2e8      	b.n	8002c38 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002666:	4b82      	ldr	r3, [pc, #520]	; (8002870 <HAL_RCC_OscConfig+0x338>)
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	2380      	movs	r3, #128	; 0x80
 800266c:	029b      	lsls	r3, r3, #10
 800266e:	4013      	ands	r3, r2
 8002670:	d1f0      	bne.n	8002654 <HAL_RCC_OscConfig+0x11c>
 8002672:	e000      	b.n	8002676 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002674:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2202      	movs	r2, #2
 800267c:	4013      	ands	r3, r2
 800267e:	d100      	bne.n	8002682 <HAL_RCC_OscConfig+0x14a>
 8002680:	e06c      	b.n	800275c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002682:	4b7b      	ldr	r3, [pc, #492]	; (8002870 <HAL_RCC_OscConfig+0x338>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	220c      	movs	r2, #12
 8002688:	4013      	ands	r3, r2
 800268a:	d00e      	beq.n	80026aa <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800268c:	4b78      	ldr	r3, [pc, #480]	; (8002870 <HAL_RCC_OscConfig+0x338>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	220c      	movs	r2, #12
 8002692:	4013      	ands	r3, r2
 8002694:	2b08      	cmp	r3, #8
 8002696:	d11f      	bne.n	80026d8 <HAL_RCC_OscConfig+0x1a0>
 8002698:	4b75      	ldr	r3, [pc, #468]	; (8002870 <HAL_RCC_OscConfig+0x338>)
 800269a:	685a      	ldr	r2, [r3, #4]
 800269c:	23c0      	movs	r3, #192	; 0xc0
 800269e:	025b      	lsls	r3, r3, #9
 80026a0:	401a      	ands	r2, r3
 80026a2:	2380      	movs	r3, #128	; 0x80
 80026a4:	021b      	lsls	r3, r3, #8
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d116      	bne.n	80026d8 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026aa:	4b71      	ldr	r3, [pc, #452]	; (8002870 <HAL_RCC_OscConfig+0x338>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2202      	movs	r2, #2
 80026b0:	4013      	ands	r3, r2
 80026b2:	d005      	beq.n	80026c0 <HAL_RCC_OscConfig+0x188>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d001      	beq.n	80026c0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e2bb      	b.n	8002c38 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c0:	4b6b      	ldr	r3, [pc, #428]	; (8002870 <HAL_RCC_OscConfig+0x338>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	22f8      	movs	r2, #248	; 0xf8
 80026c6:	4393      	bics	r3, r2
 80026c8:	0019      	movs	r1, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	00da      	lsls	r2, r3, #3
 80026d0:	4b67      	ldr	r3, [pc, #412]	; (8002870 <HAL_RCC_OscConfig+0x338>)
 80026d2:	430a      	orrs	r2, r1
 80026d4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026d6:	e041      	b.n	800275c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d024      	beq.n	800272a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026e0:	4b63      	ldr	r3, [pc, #396]	; (8002870 <HAL_RCC_OscConfig+0x338>)
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	4b62      	ldr	r3, [pc, #392]	; (8002870 <HAL_RCC_OscConfig+0x338>)
 80026e6:	2101      	movs	r1, #1
 80026e8:	430a      	orrs	r2, r1
 80026ea:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ec:	f7fe fedc 	bl	80014a8 <HAL_GetTick>
 80026f0:	0003      	movs	r3, r0
 80026f2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f4:	e008      	b.n	8002708 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026f6:	f7fe fed7 	bl	80014a8 <HAL_GetTick>
 80026fa:	0002      	movs	r2, r0
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e297      	b.n	8002c38 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002708:	4b59      	ldr	r3, [pc, #356]	; (8002870 <HAL_RCC_OscConfig+0x338>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2202      	movs	r2, #2
 800270e:	4013      	ands	r3, r2
 8002710:	d0f1      	beq.n	80026f6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002712:	4b57      	ldr	r3, [pc, #348]	; (8002870 <HAL_RCC_OscConfig+0x338>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	22f8      	movs	r2, #248	; 0xf8
 8002718:	4393      	bics	r3, r2
 800271a:	0019      	movs	r1, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	00da      	lsls	r2, r3, #3
 8002722:	4b53      	ldr	r3, [pc, #332]	; (8002870 <HAL_RCC_OscConfig+0x338>)
 8002724:	430a      	orrs	r2, r1
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	e018      	b.n	800275c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800272a:	4b51      	ldr	r3, [pc, #324]	; (8002870 <HAL_RCC_OscConfig+0x338>)
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	4b50      	ldr	r3, [pc, #320]	; (8002870 <HAL_RCC_OscConfig+0x338>)
 8002730:	2101      	movs	r1, #1
 8002732:	438a      	bics	r2, r1
 8002734:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002736:	f7fe feb7 	bl	80014a8 <HAL_GetTick>
 800273a:	0003      	movs	r3, r0
 800273c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002740:	f7fe feb2 	bl	80014a8 <HAL_GetTick>
 8002744:	0002      	movs	r2, r0
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e272      	b.n	8002c38 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002752:	4b47      	ldr	r3, [pc, #284]	; (8002870 <HAL_RCC_OscConfig+0x338>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2202      	movs	r2, #2
 8002758:	4013      	ands	r3, r2
 800275a:	d1f1      	bne.n	8002740 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2208      	movs	r2, #8
 8002762:	4013      	ands	r3, r2
 8002764:	d036      	beq.n	80027d4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	69db      	ldr	r3, [r3, #28]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d019      	beq.n	80027a2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800276e:	4b40      	ldr	r3, [pc, #256]	; (8002870 <HAL_RCC_OscConfig+0x338>)
 8002770:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002772:	4b3f      	ldr	r3, [pc, #252]	; (8002870 <HAL_RCC_OscConfig+0x338>)
 8002774:	2101      	movs	r1, #1
 8002776:	430a      	orrs	r2, r1
 8002778:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800277a:	f7fe fe95 	bl	80014a8 <HAL_GetTick>
 800277e:	0003      	movs	r3, r0
 8002780:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002784:	f7fe fe90 	bl	80014a8 <HAL_GetTick>
 8002788:	0002      	movs	r2, r0
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e250      	b.n	8002c38 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002796:	4b36      	ldr	r3, [pc, #216]	; (8002870 <HAL_RCC_OscConfig+0x338>)
 8002798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279a:	2202      	movs	r2, #2
 800279c:	4013      	ands	r3, r2
 800279e:	d0f1      	beq.n	8002784 <HAL_RCC_OscConfig+0x24c>
 80027a0:	e018      	b.n	80027d4 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027a2:	4b33      	ldr	r3, [pc, #204]	; (8002870 <HAL_RCC_OscConfig+0x338>)
 80027a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027a6:	4b32      	ldr	r3, [pc, #200]	; (8002870 <HAL_RCC_OscConfig+0x338>)
 80027a8:	2101      	movs	r1, #1
 80027aa:	438a      	bics	r2, r1
 80027ac:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ae:	f7fe fe7b 	bl	80014a8 <HAL_GetTick>
 80027b2:	0003      	movs	r3, r0
 80027b4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027b8:	f7fe fe76 	bl	80014a8 <HAL_GetTick>
 80027bc:	0002      	movs	r2, r0
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e236      	b.n	8002c38 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027ca:	4b29      	ldr	r3, [pc, #164]	; (8002870 <HAL_RCC_OscConfig+0x338>)
 80027cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ce:	2202      	movs	r2, #2
 80027d0:	4013      	ands	r3, r2
 80027d2:	d1f1      	bne.n	80027b8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2204      	movs	r2, #4
 80027da:	4013      	ands	r3, r2
 80027dc:	d100      	bne.n	80027e0 <HAL_RCC_OscConfig+0x2a8>
 80027de:	e0b5      	b.n	800294c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027e0:	201f      	movs	r0, #31
 80027e2:	183b      	adds	r3, r7, r0
 80027e4:	2200      	movs	r2, #0
 80027e6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027e8:	4b21      	ldr	r3, [pc, #132]	; (8002870 <HAL_RCC_OscConfig+0x338>)
 80027ea:	69da      	ldr	r2, [r3, #28]
 80027ec:	2380      	movs	r3, #128	; 0x80
 80027ee:	055b      	lsls	r3, r3, #21
 80027f0:	4013      	ands	r3, r2
 80027f2:	d110      	bne.n	8002816 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027f4:	4b1e      	ldr	r3, [pc, #120]	; (8002870 <HAL_RCC_OscConfig+0x338>)
 80027f6:	69da      	ldr	r2, [r3, #28]
 80027f8:	4b1d      	ldr	r3, [pc, #116]	; (8002870 <HAL_RCC_OscConfig+0x338>)
 80027fa:	2180      	movs	r1, #128	; 0x80
 80027fc:	0549      	lsls	r1, r1, #21
 80027fe:	430a      	orrs	r2, r1
 8002800:	61da      	str	r2, [r3, #28]
 8002802:	4b1b      	ldr	r3, [pc, #108]	; (8002870 <HAL_RCC_OscConfig+0x338>)
 8002804:	69da      	ldr	r2, [r3, #28]
 8002806:	2380      	movs	r3, #128	; 0x80
 8002808:	055b      	lsls	r3, r3, #21
 800280a:	4013      	ands	r3, r2
 800280c:	60fb      	str	r3, [r7, #12]
 800280e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002810:	183b      	adds	r3, r7, r0
 8002812:	2201      	movs	r2, #1
 8002814:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002816:	4b19      	ldr	r3, [pc, #100]	; (800287c <HAL_RCC_OscConfig+0x344>)
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	2380      	movs	r3, #128	; 0x80
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	4013      	ands	r3, r2
 8002820:	d11a      	bne.n	8002858 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002822:	4b16      	ldr	r3, [pc, #88]	; (800287c <HAL_RCC_OscConfig+0x344>)
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	4b15      	ldr	r3, [pc, #84]	; (800287c <HAL_RCC_OscConfig+0x344>)
 8002828:	2180      	movs	r1, #128	; 0x80
 800282a:	0049      	lsls	r1, r1, #1
 800282c:	430a      	orrs	r2, r1
 800282e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002830:	f7fe fe3a 	bl	80014a8 <HAL_GetTick>
 8002834:	0003      	movs	r3, r0
 8002836:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002838:	e008      	b.n	800284c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800283a:	f7fe fe35 	bl	80014a8 <HAL_GetTick>
 800283e:	0002      	movs	r2, r0
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b64      	cmp	r3, #100	; 0x64
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e1f5      	b.n	8002c38 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800284c:	4b0b      	ldr	r3, [pc, #44]	; (800287c <HAL_RCC_OscConfig+0x344>)
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	2380      	movs	r3, #128	; 0x80
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	4013      	ands	r3, r2
 8002856:	d0f0      	beq.n	800283a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d10f      	bne.n	8002880 <HAL_RCC_OscConfig+0x348>
 8002860:	4b03      	ldr	r3, [pc, #12]	; (8002870 <HAL_RCC_OscConfig+0x338>)
 8002862:	6a1a      	ldr	r2, [r3, #32]
 8002864:	4b02      	ldr	r3, [pc, #8]	; (8002870 <HAL_RCC_OscConfig+0x338>)
 8002866:	2101      	movs	r1, #1
 8002868:	430a      	orrs	r2, r1
 800286a:	621a      	str	r2, [r3, #32]
 800286c:	e036      	b.n	80028dc <HAL_RCC_OscConfig+0x3a4>
 800286e:	46c0      	nop			; (mov r8, r8)
 8002870:	40021000 	.word	0x40021000
 8002874:	fffeffff 	.word	0xfffeffff
 8002878:	fffbffff 	.word	0xfffbffff
 800287c:	40007000 	.word	0x40007000
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d10c      	bne.n	80028a2 <HAL_RCC_OscConfig+0x36a>
 8002888:	4bca      	ldr	r3, [pc, #808]	; (8002bb4 <HAL_RCC_OscConfig+0x67c>)
 800288a:	6a1a      	ldr	r2, [r3, #32]
 800288c:	4bc9      	ldr	r3, [pc, #804]	; (8002bb4 <HAL_RCC_OscConfig+0x67c>)
 800288e:	2101      	movs	r1, #1
 8002890:	438a      	bics	r2, r1
 8002892:	621a      	str	r2, [r3, #32]
 8002894:	4bc7      	ldr	r3, [pc, #796]	; (8002bb4 <HAL_RCC_OscConfig+0x67c>)
 8002896:	6a1a      	ldr	r2, [r3, #32]
 8002898:	4bc6      	ldr	r3, [pc, #792]	; (8002bb4 <HAL_RCC_OscConfig+0x67c>)
 800289a:	2104      	movs	r1, #4
 800289c:	438a      	bics	r2, r1
 800289e:	621a      	str	r2, [r3, #32]
 80028a0:	e01c      	b.n	80028dc <HAL_RCC_OscConfig+0x3a4>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	2b05      	cmp	r3, #5
 80028a8:	d10c      	bne.n	80028c4 <HAL_RCC_OscConfig+0x38c>
 80028aa:	4bc2      	ldr	r3, [pc, #776]	; (8002bb4 <HAL_RCC_OscConfig+0x67c>)
 80028ac:	6a1a      	ldr	r2, [r3, #32]
 80028ae:	4bc1      	ldr	r3, [pc, #772]	; (8002bb4 <HAL_RCC_OscConfig+0x67c>)
 80028b0:	2104      	movs	r1, #4
 80028b2:	430a      	orrs	r2, r1
 80028b4:	621a      	str	r2, [r3, #32]
 80028b6:	4bbf      	ldr	r3, [pc, #764]	; (8002bb4 <HAL_RCC_OscConfig+0x67c>)
 80028b8:	6a1a      	ldr	r2, [r3, #32]
 80028ba:	4bbe      	ldr	r3, [pc, #760]	; (8002bb4 <HAL_RCC_OscConfig+0x67c>)
 80028bc:	2101      	movs	r1, #1
 80028be:	430a      	orrs	r2, r1
 80028c0:	621a      	str	r2, [r3, #32]
 80028c2:	e00b      	b.n	80028dc <HAL_RCC_OscConfig+0x3a4>
 80028c4:	4bbb      	ldr	r3, [pc, #748]	; (8002bb4 <HAL_RCC_OscConfig+0x67c>)
 80028c6:	6a1a      	ldr	r2, [r3, #32]
 80028c8:	4bba      	ldr	r3, [pc, #744]	; (8002bb4 <HAL_RCC_OscConfig+0x67c>)
 80028ca:	2101      	movs	r1, #1
 80028cc:	438a      	bics	r2, r1
 80028ce:	621a      	str	r2, [r3, #32]
 80028d0:	4bb8      	ldr	r3, [pc, #736]	; (8002bb4 <HAL_RCC_OscConfig+0x67c>)
 80028d2:	6a1a      	ldr	r2, [r3, #32]
 80028d4:	4bb7      	ldr	r3, [pc, #732]	; (8002bb4 <HAL_RCC_OscConfig+0x67c>)
 80028d6:	2104      	movs	r1, #4
 80028d8:	438a      	bics	r2, r1
 80028da:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d014      	beq.n	800290e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028e4:	f7fe fde0 	bl	80014a8 <HAL_GetTick>
 80028e8:	0003      	movs	r3, r0
 80028ea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ec:	e009      	b.n	8002902 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028ee:	f7fe fddb 	bl	80014a8 <HAL_GetTick>
 80028f2:	0002      	movs	r2, r0
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	4aaf      	ldr	r2, [pc, #700]	; (8002bb8 <HAL_RCC_OscConfig+0x680>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e19a      	b.n	8002c38 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002902:	4bac      	ldr	r3, [pc, #688]	; (8002bb4 <HAL_RCC_OscConfig+0x67c>)
 8002904:	6a1b      	ldr	r3, [r3, #32]
 8002906:	2202      	movs	r2, #2
 8002908:	4013      	ands	r3, r2
 800290a:	d0f0      	beq.n	80028ee <HAL_RCC_OscConfig+0x3b6>
 800290c:	e013      	b.n	8002936 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800290e:	f7fe fdcb 	bl	80014a8 <HAL_GetTick>
 8002912:	0003      	movs	r3, r0
 8002914:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002916:	e009      	b.n	800292c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002918:	f7fe fdc6 	bl	80014a8 <HAL_GetTick>
 800291c:	0002      	movs	r2, r0
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	4aa5      	ldr	r2, [pc, #660]	; (8002bb8 <HAL_RCC_OscConfig+0x680>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d901      	bls.n	800292c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e185      	b.n	8002c38 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800292c:	4ba1      	ldr	r3, [pc, #644]	; (8002bb4 <HAL_RCC_OscConfig+0x67c>)
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	2202      	movs	r2, #2
 8002932:	4013      	ands	r3, r2
 8002934:	d1f0      	bne.n	8002918 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002936:	231f      	movs	r3, #31
 8002938:	18fb      	adds	r3, r7, r3
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d105      	bne.n	800294c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002940:	4b9c      	ldr	r3, [pc, #624]	; (8002bb4 <HAL_RCC_OscConfig+0x67c>)
 8002942:	69da      	ldr	r2, [r3, #28]
 8002944:	4b9b      	ldr	r3, [pc, #620]	; (8002bb4 <HAL_RCC_OscConfig+0x67c>)
 8002946:	499d      	ldr	r1, [pc, #628]	; (8002bbc <HAL_RCC_OscConfig+0x684>)
 8002948:	400a      	ands	r2, r1
 800294a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2210      	movs	r2, #16
 8002952:	4013      	ands	r3, r2
 8002954:	d063      	beq.n	8002a1e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d12a      	bne.n	80029b4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800295e:	4b95      	ldr	r3, [pc, #596]	; (8002bb4 <HAL_RCC_OscConfig+0x67c>)
 8002960:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002962:	4b94      	ldr	r3, [pc, #592]	; (8002bb4 <HAL_RCC_OscConfig+0x67c>)
 8002964:	2104      	movs	r1, #4
 8002966:	430a      	orrs	r2, r1
 8002968:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800296a:	4b92      	ldr	r3, [pc, #584]	; (8002bb4 <HAL_RCC_OscConfig+0x67c>)
 800296c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800296e:	4b91      	ldr	r3, [pc, #580]	; (8002bb4 <HAL_RCC_OscConfig+0x67c>)
 8002970:	2101      	movs	r1, #1
 8002972:	430a      	orrs	r2, r1
 8002974:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002976:	f7fe fd97 	bl	80014a8 <HAL_GetTick>
 800297a:	0003      	movs	r3, r0
 800297c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002980:	f7fe fd92 	bl	80014a8 <HAL_GetTick>
 8002984:	0002      	movs	r2, r0
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b02      	cmp	r3, #2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e152      	b.n	8002c38 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002992:	4b88      	ldr	r3, [pc, #544]	; (8002bb4 <HAL_RCC_OscConfig+0x67c>)
 8002994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002996:	2202      	movs	r2, #2
 8002998:	4013      	ands	r3, r2
 800299a:	d0f1      	beq.n	8002980 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800299c:	4b85      	ldr	r3, [pc, #532]	; (8002bb4 <HAL_RCC_OscConfig+0x67c>)
 800299e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a0:	22f8      	movs	r2, #248	; 0xf8
 80029a2:	4393      	bics	r3, r2
 80029a4:	0019      	movs	r1, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	00da      	lsls	r2, r3, #3
 80029ac:	4b81      	ldr	r3, [pc, #516]	; (8002bb4 <HAL_RCC_OscConfig+0x67c>)
 80029ae:	430a      	orrs	r2, r1
 80029b0:	635a      	str	r2, [r3, #52]	; 0x34
 80029b2:	e034      	b.n	8002a1e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	3305      	adds	r3, #5
 80029ba:	d111      	bne.n	80029e0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80029bc:	4b7d      	ldr	r3, [pc, #500]	; (8002bb4 <HAL_RCC_OscConfig+0x67c>)
 80029be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029c0:	4b7c      	ldr	r3, [pc, #496]	; (8002bb4 <HAL_RCC_OscConfig+0x67c>)
 80029c2:	2104      	movs	r1, #4
 80029c4:	438a      	bics	r2, r1
 80029c6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80029c8:	4b7a      	ldr	r3, [pc, #488]	; (8002bb4 <HAL_RCC_OscConfig+0x67c>)
 80029ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029cc:	22f8      	movs	r2, #248	; 0xf8
 80029ce:	4393      	bics	r3, r2
 80029d0:	0019      	movs	r1, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	00da      	lsls	r2, r3, #3
 80029d8:	4b76      	ldr	r3, [pc, #472]	; (8002bb4 <HAL_RCC_OscConfig+0x67c>)
 80029da:	430a      	orrs	r2, r1
 80029dc:	635a      	str	r2, [r3, #52]	; 0x34
 80029de:	e01e      	b.n	8002a1e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80029e0:	4b74      	ldr	r3, [pc, #464]	; (8002bb4 <HAL_RCC_OscConfig+0x67c>)
 80029e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029e4:	4b73      	ldr	r3, [pc, #460]	; (8002bb4 <HAL_RCC_OscConfig+0x67c>)
 80029e6:	2104      	movs	r1, #4
 80029e8:	430a      	orrs	r2, r1
 80029ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80029ec:	4b71      	ldr	r3, [pc, #452]	; (8002bb4 <HAL_RCC_OscConfig+0x67c>)
 80029ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029f0:	4b70      	ldr	r3, [pc, #448]	; (8002bb4 <HAL_RCC_OscConfig+0x67c>)
 80029f2:	2101      	movs	r1, #1
 80029f4:	438a      	bics	r2, r1
 80029f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029f8:	f7fe fd56 	bl	80014a8 <HAL_GetTick>
 80029fc:	0003      	movs	r3, r0
 80029fe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002a00:	e008      	b.n	8002a14 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002a02:	f7fe fd51 	bl	80014a8 <HAL_GetTick>
 8002a06:	0002      	movs	r2, r0
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e111      	b.n	8002c38 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002a14:	4b67      	ldr	r3, [pc, #412]	; (8002bb4 <HAL_RCC_OscConfig+0x67c>)
 8002a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a18:	2202      	movs	r2, #2
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	d1f1      	bne.n	8002a02 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2220      	movs	r2, #32
 8002a24:	4013      	ands	r3, r2
 8002a26:	d05c      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002a28:	4b62      	ldr	r3, [pc, #392]	; (8002bb4 <HAL_RCC_OscConfig+0x67c>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	220c      	movs	r2, #12
 8002a2e:	4013      	ands	r3, r2
 8002a30:	2b0c      	cmp	r3, #12
 8002a32:	d00e      	beq.n	8002a52 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002a34:	4b5f      	ldr	r3, [pc, #380]	; (8002bb4 <HAL_RCC_OscConfig+0x67c>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	220c      	movs	r2, #12
 8002a3a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002a3c:	2b08      	cmp	r3, #8
 8002a3e:	d114      	bne.n	8002a6a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002a40:	4b5c      	ldr	r3, [pc, #368]	; (8002bb4 <HAL_RCC_OscConfig+0x67c>)
 8002a42:	685a      	ldr	r2, [r3, #4]
 8002a44:	23c0      	movs	r3, #192	; 0xc0
 8002a46:	025b      	lsls	r3, r3, #9
 8002a48:	401a      	ands	r2, r3
 8002a4a:	23c0      	movs	r3, #192	; 0xc0
 8002a4c:	025b      	lsls	r3, r3, #9
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d10b      	bne.n	8002a6a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002a52:	4b58      	ldr	r3, [pc, #352]	; (8002bb4 <HAL_RCC_OscConfig+0x67c>)
 8002a54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a56:	2380      	movs	r3, #128	; 0x80
 8002a58:	029b      	lsls	r3, r3, #10
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	d040      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x5a8>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d03c      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e0e6      	b.n	8002c38 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d01b      	beq.n	8002aaa <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002a72:	4b50      	ldr	r3, [pc, #320]	; (8002bb4 <HAL_RCC_OscConfig+0x67c>)
 8002a74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a76:	4b4f      	ldr	r3, [pc, #316]	; (8002bb4 <HAL_RCC_OscConfig+0x67c>)
 8002a78:	2180      	movs	r1, #128	; 0x80
 8002a7a:	0249      	lsls	r1, r1, #9
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a80:	f7fe fd12 	bl	80014a8 <HAL_GetTick>
 8002a84:	0003      	movs	r3, r0
 8002a86:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002a88:	e008      	b.n	8002a9c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a8a:	f7fe fd0d 	bl	80014a8 <HAL_GetTick>
 8002a8e:	0002      	movs	r2, r0
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d901      	bls.n	8002a9c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e0cd      	b.n	8002c38 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002a9c:	4b45      	ldr	r3, [pc, #276]	; (8002bb4 <HAL_RCC_OscConfig+0x67c>)
 8002a9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002aa0:	2380      	movs	r3, #128	; 0x80
 8002aa2:	029b      	lsls	r3, r3, #10
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	d0f0      	beq.n	8002a8a <HAL_RCC_OscConfig+0x552>
 8002aa8:	e01b      	b.n	8002ae2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002aaa:	4b42      	ldr	r3, [pc, #264]	; (8002bb4 <HAL_RCC_OscConfig+0x67c>)
 8002aac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002aae:	4b41      	ldr	r3, [pc, #260]	; (8002bb4 <HAL_RCC_OscConfig+0x67c>)
 8002ab0:	4943      	ldr	r1, [pc, #268]	; (8002bc0 <HAL_RCC_OscConfig+0x688>)
 8002ab2:	400a      	ands	r2, r1
 8002ab4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab6:	f7fe fcf7 	bl	80014a8 <HAL_GetTick>
 8002aba:	0003      	movs	r3, r0
 8002abc:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ac0:	f7fe fcf2 	bl	80014a8 <HAL_GetTick>
 8002ac4:	0002      	movs	r2, r0
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e0b2      	b.n	8002c38 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002ad2:	4b38      	ldr	r3, [pc, #224]	; (8002bb4 <HAL_RCC_OscConfig+0x67c>)
 8002ad4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ad6:	2380      	movs	r3, #128	; 0x80
 8002ad8:	029b      	lsls	r3, r3, #10
 8002ada:	4013      	ands	r3, r2
 8002adc:	d1f0      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x588>
 8002ade:	e000      	b.n	8002ae2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002ae0:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d100      	bne.n	8002aec <HAL_RCC_OscConfig+0x5b4>
 8002aea:	e0a4      	b.n	8002c36 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002aec:	4b31      	ldr	r3, [pc, #196]	; (8002bb4 <HAL_RCC_OscConfig+0x67c>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	220c      	movs	r2, #12
 8002af2:	4013      	ands	r3, r2
 8002af4:	2b08      	cmp	r3, #8
 8002af6:	d100      	bne.n	8002afa <HAL_RCC_OscConfig+0x5c2>
 8002af8:	e078      	b.n	8002bec <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d14c      	bne.n	8002b9c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b02:	4b2c      	ldr	r3, [pc, #176]	; (8002bb4 <HAL_RCC_OscConfig+0x67c>)
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	4b2b      	ldr	r3, [pc, #172]	; (8002bb4 <HAL_RCC_OscConfig+0x67c>)
 8002b08:	492e      	ldr	r1, [pc, #184]	; (8002bc4 <HAL_RCC_OscConfig+0x68c>)
 8002b0a:	400a      	ands	r2, r1
 8002b0c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0e:	f7fe fccb 	bl	80014a8 <HAL_GetTick>
 8002b12:	0003      	movs	r3, r0
 8002b14:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b18:	f7fe fcc6 	bl	80014a8 <HAL_GetTick>
 8002b1c:	0002      	movs	r2, r0
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e086      	b.n	8002c38 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b2a:	4b22      	ldr	r3, [pc, #136]	; (8002bb4 <HAL_RCC_OscConfig+0x67c>)
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	2380      	movs	r3, #128	; 0x80
 8002b30:	049b      	lsls	r3, r3, #18
 8002b32:	4013      	ands	r3, r2
 8002b34:	d1f0      	bne.n	8002b18 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b36:	4b1f      	ldr	r3, [pc, #124]	; (8002bb4 <HAL_RCC_OscConfig+0x67c>)
 8002b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3a:	220f      	movs	r2, #15
 8002b3c:	4393      	bics	r3, r2
 8002b3e:	0019      	movs	r1, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b44:	4b1b      	ldr	r3, [pc, #108]	; (8002bb4 <HAL_RCC_OscConfig+0x67c>)
 8002b46:	430a      	orrs	r2, r1
 8002b48:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b4a:	4b1a      	ldr	r3, [pc, #104]	; (8002bb4 <HAL_RCC_OscConfig+0x67c>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	4a1e      	ldr	r2, [pc, #120]	; (8002bc8 <HAL_RCC_OscConfig+0x690>)
 8002b50:	4013      	ands	r3, r2
 8002b52:	0019      	movs	r1, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5c:	431a      	orrs	r2, r3
 8002b5e:	4b15      	ldr	r3, [pc, #84]	; (8002bb4 <HAL_RCC_OscConfig+0x67c>)
 8002b60:	430a      	orrs	r2, r1
 8002b62:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b64:	4b13      	ldr	r3, [pc, #76]	; (8002bb4 <HAL_RCC_OscConfig+0x67c>)
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	4b12      	ldr	r3, [pc, #72]	; (8002bb4 <HAL_RCC_OscConfig+0x67c>)
 8002b6a:	2180      	movs	r1, #128	; 0x80
 8002b6c:	0449      	lsls	r1, r1, #17
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b72:	f7fe fc99 	bl	80014a8 <HAL_GetTick>
 8002b76:	0003      	movs	r3, r0
 8002b78:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b7c:	f7fe fc94 	bl	80014a8 <HAL_GetTick>
 8002b80:	0002      	movs	r2, r0
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e054      	b.n	8002c38 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b8e:	4b09      	ldr	r3, [pc, #36]	; (8002bb4 <HAL_RCC_OscConfig+0x67c>)
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	2380      	movs	r3, #128	; 0x80
 8002b94:	049b      	lsls	r3, r3, #18
 8002b96:	4013      	ands	r3, r2
 8002b98:	d0f0      	beq.n	8002b7c <HAL_RCC_OscConfig+0x644>
 8002b9a:	e04c      	b.n	8002c36 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b9c:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <HAL_RCC_OscConfig+0x67c>)
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	4b04      	ldr	r3, [pc, #16]	; (8002bb4 <HAL_RCC_OscConfig+0x67c>)
 8002ba2:	4908      	ldr	r1, [pc, #32]	; (8002bc4 <HAL_RCC_OscConfig+0x68c>)
 8002ba4:	400a      	ands	r2, r1
 8002ba6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba8:	f7fe fc7e 	bl	80014a8 <HAL_GetTick>
 8002bac:	0003      	movs	r3, r0
 8002bae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bb0:	e015      	b.n	8002bde <HAL_RCC_OscConfig+0x6a6>
 8002bb2:	46c0      	nop			; (mov r8, r8)
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	00001388 	.word	0x00001388
 8002bbc:	efffffff 	.word	0xefffffff
 8002bc0:	fffeffff 	.word	0xfffeffff
 8002bc4:	feffffff 	.word	0xfeffffff
 8002bc8:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bcc:	f7fe fc6c 	bl	80014a8 <HAL_GetTick>
 8002bd0:	0002      	movs	r2, r0
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e02c      	b.n	8002c38 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bde:	4b18      	ldr	r3, [pc, #96]	; (8002c40 <HAL_RCC_OscConfig+0x708>)
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	2380      	movs	r3, #128	; 0x80
 8002be4:	049b      	lsls	r3, r3, #18
 8002be6:	4013      	ands	r3, r2
 8002be8:	d1f0      	bne.n	8002bcc <HAL_RCC_OscConfig+0x694>
 8002bea:	e024      	b.n	8002c36 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d101      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e01f      	b.n	8002c38 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002bf8:	4b11      	ldr	r3, [pc, #68]	; (8002c40 <HAL_RCC_OscConfig+0x708>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002bfe:	4b10      	ldr	r3, [pc, #64]	; (8002c40 <HAL_RCC_OscConfig+0x708>)
 8002c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c02:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c04:	697a      	ldr	r2, [r7, #20]
 8002c06:	23c0      	movs	r3, #192	; 0xc0
 8002c08:	025b      	lsls	r3, r3, #9
 8002c0a:	401a      	ands	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d10e      	bne.n	8002c32 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	220f      	movs	r2, #15
 8002c18:	401a      	ands	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d107      	bne.n	8002c32 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002c22:	697a      	ldr	r2, [r7, #20]
 8002c24:	23f0      	movs	r3, #240	; 0xf0
 8002c26:	039b      	lsls	r3, r3, #14
 8002c28:	401a      	ands	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d001      	beq.n	8002c36 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e000      	b.n	8002c38 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	0018      	movs	r0, r3
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	b008      	add	sp, #32
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40021000 	.word	0x40021000

08002c44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d101      	bne.n	8002c58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e0bf      	b.n	8002dd8 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c58:	4b61      	ldr	r3, [pc, #388]	; (8002de0 <HAL_RCC_ClockConfig+0x19c>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	4013      	ands	r3, r2
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d911      	bls.n	8002c8a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c66:	4b5e      	ldr	r3, [pc, #376]	; (8002de0 <HAL_RCC_ClockConfig+0x19c>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	4393      	bics	r3, r2
 8002c6e:	0019      	movs	r1, r3
 8002c70:	4b5b      	ldr	r3, [pc, #364]	; (8002de0 <HAL_RCC_ClockConfig+0x19c>)
 8002c72:	683a      	ldr	r2, [r7, #0]
 8002c74:	430a      	orrs	r2, r1
 8002c76:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c78:	4b59      	ldr	r3, [pc, #356]	; (8002de0 <HAL_RCC_ClockConfig+0x19c>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	4013      	ands	r3, r2
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d001      	beq.n	8002c8a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e0a6      	b.n	8002dd8 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2202      	movs	r2, #2
 8002c90:	4013      	ands	r3, r2
 8002c92:	d015      	beq.n	8002cc0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2204      	movs	r2, #4
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	d006      	beq.n	8002cac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002c9e:	4b51      	ldr	r3, [pc, #324]	; (8002de4 <HAL_RCC_ClockConfig+0x1a0>)
 8002ca0:	685a      	ldr	r2, [r3, #4]
 8002ca2:	4b50      	ldr	r3, [pc, #320]	; (8002de4 <HAL_RCC_ClockConfig+0x1a0>)
 8002ca4:	21e0      	movs	r1, #224	; 0xe0
 8002ca6:	00c9      	lsls	r1, r1, #3
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cac:	4b4d      	ldr	r3, [pc, #308]	; (8002de4 <HAL_RCC_ClockConfig+0x1a0>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	22f0      	movs	r2, #240	; 0xf0
 8002cb2:	4393      	bics	r3, r2
 8002cb4:	0019      	movs	r1, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	689a      	ldr	r2, [r3, #8]
 8002cba:	4b4a      	ldr	r3, [pc, #296]	; (8002de4 <HAL_RCC_ClockConfig+0x1a0>)
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	d04c      	beq.n	8002d64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d107      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cd2:	4b44      	ldr	r3, [pc, #272]	; (8002de4 <HAL_RCC_ClockConfig+0x1a0>)
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	2380      	movs	r3, #128	; 0x80
 8002cd8:	029b      	lsls	r3, r3, #10
 8002cda:	4013      	ands	r3, r2
 8002cdc:	d120      	bne.n	8002d20 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e07a      	b.n	8002dd8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d107      	bne.n	8002cfa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cea:	4b3e      	ldr	r3, [pc, #248]	; (8002de4 <HAL_RCC_ClockConfig+0x1a0>)
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	2380      	movs	r3, #128	; 0x80
 8002cf0:	049b      	lsls	r3, r3, #18
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	d114      	bne.n	8002d20 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e06e      	b.n	8002dd8 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	2b03      	cmp	r3, #3
 8002d00:	d107      	bne.n	8002d12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002d02:	4b38      	ldr	r3, [pc, #224]	; (8002de4 <HAL_RCC_ClockConfig+0x1a0>)
 8002d04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d06:	2380      	movs	r3, #128	; 0x80
 8002d08:	029b      	lsls	r3, r3, #10
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	d108      	bne.n	8002d20 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e062      	b.n	8002dd8 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d12:	4b34      	ldr	r3, [pc, #208]	; (8002de4 <HAL_RCC_ClockConfig+0x1a0>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2202      	movs	r2, #2
 8002d18:	4013      	ands	r3, r2
 8002d1a:	d101      	bne.n	8002d20 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e05b      	b.n	8002dd8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d20:	4b30      	ldr	r3, [pc, #192]	; (8002de4 <HAL_RCC_ClockConfig+0x1a0>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	2203      	movs	r2, #3
 8002d26:	4393      	bics	r3, r2
 8002d28:	0019      	movs	r1, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685a      	ldr	r2, [r3, #4]
 8002d2e:	4b2d      	ldr	r3, [pc, #180]	; (8002de4 <HAL_RCC_ClockConfig+0x1a0>)
 8002d30:	430a      	orrs	r2, r1
 8002d32:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d34:	f7fe fbb8 	bl	80014a8 <HAL_GetTick>
 8002d38:	0003      	movs	r3, r0
 8002d3a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d3c:	e009      	b.n	8002d52 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d3e:	f7fe fbb3 	bl	80014a8 <HAL_GetTick>
 8002d42:	0002      	movs	r2, r0
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	4a27      	ldr	r2, [pc, #156]	; (8002de8 <HAL_RCC_ClockConfig+0x1a4>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e042      	b.n	8002dd8 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d52:	4b24      	ldr	r3, [pc, #144]	; (8002de4 <HAL_RCC_ClockConfig+0x1a0>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	220c      	movs	r2, #12
 8002d58:	401a      	ands	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d1ec      	bne.n	8002d3e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d64:	4b1e      	ldr	r3, [pc, #120]	; (8002de0 <HAL_RCC_ClockConfig+0x19c>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d211      	bcs.n	8002d96 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d72:	4b1b      	ldr	r3, [pc, #108]	; (8002de0 <HAL_RCC_ClockConfig+0x19c>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2201      	movs	r2, #1
 8002d78:	4393      	bics	r3, r2
 8002d7a:	0019      	movs	r1, r3
 8002d7c:	4b18      	ldr	r3, [pc, #96]	; (8002de0 <HAL_RCC_ClockConfig+0x19c>)
 8002d7e:	683a      	ldr	r2, [r7, #0]
 8002d80:	430a      	orrs	r2, r1
 8002d82:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d84:	4b16      	ldr	r3, [pc, #88]	; (8002de0 <HAL_RCC_ClockConfig+0x19c>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d001      	beq.n	8002d96 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e020      	b.n	8002dd8 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2204      	movs	r2, #4
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	d009      	beq.n	8002db4 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002da0:	4b10      	ldr	r3, [pc, #64]	; (8002de4 <HAL_RCC_ClockConfig+0x1a0>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	4a11      	ldr	r2, [pc, #68]	; (8002dec <HAL_RCC_ClockConfig+0x1a8>)
 8002da6:	4013      	ands	r3, r2
 8002da8:	0019      	movs	r1, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68da      	ldr	r2, [r3, #12]
 8002dae:	4b0d      	ldr	r3, [pc, #52]	; (8002de4 <HAL_RCC_ClockConfig+0x1a0>)
 8002db0:	430a      	orrs	r2, r1
 8002db2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002db4:	f000 f820 	bl	8002df8 <HAL_RCC_GetSysClockFreq>
 8002db8:	0001      	movs	r1, r0
 8002dba:	4b0a      	ldr	r3, [pc, #40]	; (8002de4 <HAL_RCC_ClockConfig+0x1a0>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	091b      	lsrs	r3, r3, #4
 8002dc0:	220f      	movs	r2, #15
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	4a0a      	ldr	r2, [pc, #40]	; (8002df0 <HAL_RCC_ClockConfig+0x1ac>)
 8002dc6:	5cd3      	ldrb	r3, [r2, r3]
 8002dc8:	000a      	movs	r2, r1
 8002dca:	40da      	lsrs	r2, r3
 8002dcc:	4b09      	ldr	r3, [pc, #36]	; (8002df4 <HAL_RCC_ClockConfig+0x1b0>)
 8002dce:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002dd0:	2000      	movs	r0, #0
 8002dd2:	f7fe fb23 	bl	800141c <HAL_InitTick>
  
  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	0018      	movs	r0, r3
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	b004      	add	sp, #16
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	40022000 	.word	0x40022000
 8002de4:	40021000 	.word	0x40021000
 8002de8:	00001388 	.word	0x00001388
 8002dec:	fffff8ff 	.word	0xfffff8ff
 8002df0:	0800575c 	.word	0x0800575c
 8002df4:	20000000 	.word	0x20000000

08002df8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60fb      	str	r3, [r7, #12]
 8002e02:	2300      	movs	r3, #0
 8002e04:	60bb      	str	r3, [r7, #8]
 8002e06:	2300      	movs	r3, #0
 8002e08:	617b      	str	r3, [r7, #20]
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002e12:	4b2d      	ldr	r3, [pc, #180]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	220c      	movs	r2, #12
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	2b0c      	cmp	r3, #12
 8002e20:	d046      	beq.n	8002eb0 <HAL_RCC_GetSysClockFreq+0xb8>
 8002e22:	d848      	bhi.n	8002eb6 <HAL_RCC_GetSysClockFreq+0xbe>
 8002e24:	2b04      	cmp	r3, #4
 8002e26:	d002      	beq.n	8002e2e <HAL_RCC_GetSysClockFreq+0x36>
 8002e28:	2b08      	cmp	r3, #8
 8002e2a:	d003      	beq.n	8002e34 <HAL_RCC_GetSysClockFreq+0x3c>
 8002e2c:	e043      	b.n	8002eb6 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e2e:	4b27      	ldr	r3, [pc, #156]	; (8002ecc <HAL_RCC_GetSysClockFreq+0xd4>)
 8002e30:	613b      	str	r3, [r7, #16]
      break;
 8002e32:	e043      	b.n	8002ebc <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	0c9b      	lsrs	r3, r3, #18
 8002e38:	220f      	movs	r2, #15
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	4a24      	ldr	r2, [pc, #144]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0xd8>)
 8002e3e:	5cd3      	ldrb	r3, [r2, r3]
 8002e40:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002e42:	4b21      	ldr	r3, [pc, #132]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e46:	220f      	movs	r2, #15
 8002e48:	4013      	ands	r3, r2
 8002e4a:	4a22      	ldr	r2, [pc, #136]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0xdc>)
 8002e4c:	5cd3      	ldrb	r3, [r2, r3]
 8002e4e:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	23c0      	movs	r3, #192	; 0xc0
 8002e54:	025b      	lsls	r3, r3, #9
 8002e56:	401a      	ands	r2, r3
 8002e58:	2380      	movs	r3, #128	; 0x80
 8002e5a:	025b      	lsls	r3, r3, #9
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d109      	bne.n	8002e74 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e60:	68b9      	ldr	r1, [r7, #8]
 8002e62:	481a      	ldr	r0, [pc, #104]	; (8002ecc <HAL_RCC_GetSysClockFreq+0xd4>)
 8002e64:	f7fd f950 	bl	8000108 <__udivsi3>
 8002e68:	0003      	movs	r3, r0
 8002e6a:	001a      	movs	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4353      	muls	r3, r2
 8002e70:	617b      	str	r3, [r7, #20]
 8002e72:	e01a      	b.n	8002eaa <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	23c0      	movs	r3, #192	; 0xc0
 8002e78:	025b      	lsls	r3, r3, #9
 8002e7a:	401a      	ands	r2, r3
 8002e7c:	23c0      	movs	r3, #192	; 0xc0
 8002e7e:	025b      	lsls	r3, r3, #9
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d109      	bne.n	8002e98 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e84:	68b9      	ldr	r1, [r7, #8]
 8002e86:	4814      	ldr	r0, [pc, #80]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002e88:	f7fd f93e 	bl	8000108 <__udivsi3>
 8002e8c:	0003      	movs	r3, r0
 8002e8e:	001a      	movs	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4353      	muls	r3, r2
 8002e94:	617b      	str	r3, [r7, #20]
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e98:	68b9      	ldr	r1, [r7, #8]
 8002e9a:	480c      	ldr	r0, [pc, #48]	; (8002ecc <HAL_RCC_GetSysClockFreq+0xd4>)
 8002e9c:	f7fd f934 	bl	8000108 <__udivsi3>
 8002ea0:	0003      	movs	r3, r0
 8002ea2:	001a      	movs	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4353      	muls	r3, r2
 8002ea8:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	613b      	str	r3, [r7, #16]
      break;
 8002eae:	e005      	b.n	8002ebc <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002eb0:	4b09      	ldr	r3, [pc, #36]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002eb2:	613b      	str	r3, [r7, #16]
      break;
 8002eb4:	e002      	b.n	8002ebc <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002eb6:	4b05      	ldr	r3, [pc, #20]	; (8002ecc <HAL_RCC_GetSysClockFreq+0xd4>)
 8002eb8:	613b      	str	r3, [r7, #16]
      break;
 8002eba:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002ebc:	693b      	ldr	r3, [r7, #16]
}
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	b006      	add	sp, #24
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	46c0      	nop			; (mov r8, r8)
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	007a1200 	.word	0x007a1200
 8002ed0:	08005774 	.word	0x08005774
 8002ed4:	08005784 	.word	0x08005784
 8002ed8:	02dc6c00 	.word	0x02dc6c00

08002edc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ee0:	4b02      	ldr	r3, [pc, #8]	; (8002eec <HAL_RCC_GetHCLKFreq+0x10>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
}
 8002ee4:	0018      	movs	r0, r3
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	46c0      	nop			; (mov r8, r8)
 8002eec:	20000000 	.word	0x20000000

08002ef0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002ef4:	f7ff fff2 	bl	8002edc <HAL_RCC_GetHCLKFreq>
 8002ef8:	0001      	movs	r1, r0
 8002efa:	4b06      	ldr	r3, [pc, #24]	; (8002f14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	0a1b      	lsrs	r3, r3, #8
 8002f00:	2207      	movs	r2, #7
 8002f02:	4013      	ands	r3, r2
 8002f04:	4a04      	ldr	r2, [pc, #16]	; (8002f18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f06:	5cd3      	ldrb	r3, [r2, r3]
 8002f08:	40d9      	lsrs	r1, r3
 8002f0a:	000b      	movs	r3, r1
}    
 8002f0c:	0018      	movs	r0, r3
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	46c0      	nop			; (mov r8, r8)
 8002f14:	40021000 	.word	0x40021000
 8002f18:	0800576c 	.word	0x0800576c

08002f1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f24:	2300      	movs	r3, #0
 8002f26:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	2380      	movs	r3, #128	; 0x80
 8002f32:	025b      	lsls	r3, r3, #9
 8002f34:	4013      	ands	r3, r2
 8002f36:	d100      	bne.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002f38:	e08e      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002f3a:	2017      	movs	r0, #23
 8002f3c:	183b      	adds	r3, r7, r0
 8002f3e:	2200      	movs	r2, #0
 8002f40:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f42:	4b67      	ldr	r3, [pc, #412]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002f44:	69da      	ldr	r2, [r3, #28]
 8002f46:	2380      	movs	r3, #128	; 0x80
 8002f48:	055b      	lsls	r3, r3, #21
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	d110      	bne.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f4e:	4b64      	ldr	r3, [pc, #400]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002f50:	69da      	ldr	r2, [r3, #28]
 8002f52:	4b63      	ldr	r3, [pc, #396]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002f54:	2180      	movs	r1, #128	; 0x80
 8002f56:	0549      	lsls	r1, r1, #21
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	61da      	str	r2, [r3, #28]
 8002f5c:	4b60      	ldr	r3, [pc, #384]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002f5e:	69da      	ldr	r2, [r3, #28]
 8002f60:	2380      	movs	r3, #128	; 0x80
 8002f62:	055b      	lsls	r3, r3, #21
 8002f64:	4013      	ands	r3, r2
 8002f66:	60bb      	str	r3, [r7, #8]
 8002f68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f6a:	183b      	adds	r3, r7, r0
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f70:	4b5c      	ldr	r3, [pc, #368]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	2380      	movs	r3, #128	; 0x80
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	4013      	ands	r3, r2
 8002f7a:	d11a      	bne.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f7c:	4b59      	ldr	r3, [pc, #356]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	4b58      	ldr	r3, [pc, #352]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002f82:	2180      	movs	r1, #128	; 0x80
 8002f84:	0049      	lsls	r1, r1, #1
 8002f86:	430a      	orrs	r2, r1
 8002f88:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f8a:	f7fe fa8d 	bl	80014a8 <HAL_GetTick>
 8002f8e:	0003      	movs	r3, r0
 8002f90:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f92:	e008      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f94:	f7fe fa88 	bl	80014a8 <HAL_GetTick>
 8002f98:	0002      	movs	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b64      	cmp	r3, #100	; 0x64
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e097      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa6:	4b4f      	ldr	r3, [pc, #316]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	2380      	movs	r3, #128	; 0x80
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	4013      	ands	r3, r2
 8002fb0:	d0f0      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fb2:	4b4b      	ldr	r3, [pc, #300]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002fb4:	6a1a      	ldr	r2, [r3, #32]
 8002fb6:	23c0      	movs	r3, #192	; 0xc0
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	4013      	ands	r3, r2
 8002fbc:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d034      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685a      	ldr	r2, [r3, #4]
 8002fc8:	23c0      	movs	r3, #192	; 0xc0
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	4013      	ands	r3, r2
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d02c      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fd4:	4b42      	ldr	r3, [pc, #264]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
 8002fd8:	4a43      	ldr	r2, [pc, #268]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002fda:	4013      	ands	r3, r2
 8002fdc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fde:	4b40      	ldr	r3, [pc, #256]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002fe0:	6a1a      	ldr	r2, [r3, #32]
 8002fe2:	4b3f      	ldr	r3, [pc, #252]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002fe4:	2180      	movs	r1, #128	; 0x80
 8002fe6:	0249      	lsls	r1, r1, #9
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fec:	4b3c      	ldr	r3, [pc, #240]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002fee:	6a1a      	ldr	r2, [r3, #32]
 8002ff0:	4b3b      	ldr	r3, [pc, #236]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002ff2:	493e      	ldr	r1, [pc, #248]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ff4:	400a      	ands	r2, r1
 8002ff6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ff8:	4b39      	ldr	r3, [pc, #228]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2201      	movs	r2, #1
 8003002:	4013      	ands	r3, r2
 8003004:	d013      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003006:	f7fe fa4f 	bl	80014a8 <HAL_GetTick>
 800300a:	0003      	movs	r3, r0
 800300c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800300e:	e009      	b.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003010:	f7fe fa4a 	bl	80014a8 <HAL_GetTick>
 8003014:	0002      	movs	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	4a35      	ldr	r2, [pc, #212]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d901      	bls.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e058      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003024:	4b2e      	ldr	r3, [pc, #184]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	2202      	movs	r2, #2
 800302a:	4013      	ands	r3, r2
 800302c:	d0f0      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800302e:	4b2c      	ldr	r3, [pc, #176]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	4a2d      	ldr	r2, [pc, #180]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003034:	4013      	ands	r3, r2
 8003036:	0019      	movs	r1, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685a      	ldr	r2, [r3, #4]
 800303c:	4b28      	ldr	r3, [pc, #160]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800303e:	430a      	orrs	r2, r1
 8003040:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003042:	2317      	movs	r3, #23
 8003044:	18fb      	adds	r3, r7, r3
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d105      	bne.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800304c:	4b24      	ldr	r3, [pc, #144]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800304e:	69da      	ldr	r2, [r3, #28]
 8003050:	4b23      	ldr	r3, [pc, #140]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003052:	4928      	ldr	r1, [pc, #160]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003054:	400a      	ands	r2, r1
 8003056:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2201      	movs	r2, #1
 800305e:	4013      	ands	r3, r2
 8003060:	d009      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003062:	4b1f      	ldr	r3, [pc, #124]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003066:	2203      	movs	r2, #3
 8003068:	4393      	bics	r3, r2
 800306a:	0019      	movs	r1, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	4b1b      	ldr	r3, [pc, #108]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003072:	430a      	orrs	r2, r1
 8003074:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2220      	movs	r2, #32
 800307c:	4013      	ands	r3, r2
 800307e:	d009      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003080:	4b17      	ldr	r3, [pc, #92]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003084:	2210      	movs	r2, #16
 8003086:	4393      	bics	r3, r2
 8003088:	0019      	movs	r1, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68da      	ldr	r2, [r3, #12]
 800308e:	4b14      	ldr	r3, [pc, #80]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003090:	430a      	orrs	r2, r1
 8003092:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	2380      	movs	r3, #128	; 0x80
 800309a:	029b      	lsls	r3, r3, #10
 800309c:	4013      	ands	r3, r2
 800309e:	d009      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030a0:	4b0f      	ldr	r3, [pc, #60]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80030a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a4:	2280      	movs	r2, #128	; 0x80
 80030a6:	4393      	bics	r3, r2
 80030a8:	0019      	movs	r1, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	695a      	ldr	r2, [r3, #20]
 80030ae:	4b0c      	ldr	r3, [pc, #48]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80030b0:	430a      	orrs	r2, r1
 80030b2:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	2380      	movs	r3, #128	; 0x80
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	4013      	ands	r3, r2
 80030be:	d009      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80030c0:	4b07      	ldr	r3, [pc, #28]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80030c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c4:	2240      	movs	r2, #64	; 0x40
 80030c6:	4393      	bics	r3, r2
 80030c8:	0019      	movs	r1, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691a      	ldr	r2, [r3, #16]
 80030ce:	4b04      	ldr	r3, [pc, #16]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80030d0:	430a      	orrs	r2, r1
 80030d2:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	0018      	movs	r0, r3
 80030d8:	46bd      	mov	sp, r7
 80030da:	b006      	add	sp, #24
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	46c0      	nop			; (mov r8, r8)
 80030e0:	40021000 	.word	0x40021000
 80030e4:	40007000 	.word	0x40007000
 80030e8:	fffffcff 	.word	0xfffffcff
 80030ec:	fffeffff 	.word	0xfffeffff
 80030f0:	00001388 	.word	0x00001388
 80030f4:	efffffff 	.word	0xefffffff

080030f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e042      	b.n	8003190 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	223d      	movs	r2, #61	; 0x3d
 800310e:	5c9b      	ldrb	r3, [r3, r2]
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d107      	bne.n	8003126 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	223c      	movs	r2, #60	; 0x3c
 800311a:	2100      	movs	r1, #0
 800311c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	0018      	movs	r0, r3
 8003122:	f7fd ff8f 	bl	8001044 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	223d      	movs	r2, #61	; 0x3d
 800312a:	2102      	movs	r1, #2
 800312c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	3304      	adds	r3, #4
 8003136:	0019      	movs	r1, r3
 8003138:	0010      	movs	r0, r2
 800313a:	f000 fcb5 	bl	8003aa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2246      	movs	r2, #70	; 0x46
 8003142:	2101      	movs	r1, #1
 8003144:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	223e      	movs	r2, #62	; 0x3e
 800314a:	2101      	movs	r1, #1
 800314c:	5499      	strb	r1, [r3, r2]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	223f      	movs	r2, #63	; 0x3f
 8003152:	2101      	movs	r1, #1
 8003154:	5499      	strb	r1, [r3, r2]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2240      	movs	r2, #64	; 0x40
 800315a:	2101      	movs	r1, #1
 800315c:	5499      	strb	r1, [r3, r2]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2241      	movs	r2, #65	; 0x41
 8003162:	2101      	movs	r1, #1
 8003164:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2242      	movs	r2, #66	; 0x42
 800316a:	2101      	movs	r1, #1
 800316c:	5499      	strb	r1, [r3, r2]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2243      	movs	r2, #67	; 0x43
 8003172:	2101      	movs	r1, #1
 8003174:	5499      	strb	r1, [r3, r2]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2244      	movs	r2, #68	; 0x44
 800317a:	2101      	movs	r1, #1
 800317c:	5499      	strb	r1, [r3, r2]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2245      	movs	r2, #69	; 0x45
 8003182:	2101      	movs	r1, #1
 8003184:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	223d      	movs	r2, #61	; 0x3d
 800318a:	2101      	movs	r1, #1
 800318c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	0018      	movs	r0, r3
 8003192:	46bd      	mov	sp, r7
 8003194:	b002      	add	sp, #8
 8003196:	bd80      	pop	{r7, pc}

08003198 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e042      	b.n	8003230 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	223d      	movs	r2, #61	; 0x3d
 80031ae:	5c9b      	ldrb	r3, [r3, r2]
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d107      	bne.n	80031c6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	223c      	movs	r2, #60	; 0x3c
 80031ba:	2100      	movs	r1, #0
 80031bc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	0018      	movs	r0, r3
 80031c2:	f000 f839 	bl	8003238 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	223d      	movs	r2, #61	; 0x3d
 80031ca:	2102      	movs	r1, #2
 80031cc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	3304      	adds	r3, #4
 80031d6:	0019      	movs	r1, r3
 80031d8:	0010      	movs	r0, r2
 80031da:	f000 fc65 	bl	8003aa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2246      	movs	r2, #70	; 0x46
 80031e2:	2101      	movs	r1, #1
 80031e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	223e      	movs	r2, #62	; 0x3e
 80031ea:	2101      	movs	r1, #1
 80031ec:	5499      	strb	r1, [r3, r2]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	223f      	movs	r2, #63	; 0x3f
 80031f2:	2101      	movs	r1, #1
 80031f4:	5499      	strb	r1, [r3, r2]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2240      	movs	r2, #64	; 0x40
 80031fa:	2101      	movs	r1, #1
 80031fc:	5499      	strb	r1, [r3, r2]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2241      	movs	r2, #65	; 0x41
 8003202:	2101      	movs	r1, #1
 8003204:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2242      	movs	r2, #66	; 0x42
 800320a:	2101      	movs	r1, #1
 800320c:	5499      	strb	r1, [r3, r2]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2243      	movs	r2, #67	; 0x43
 8003212:	2101      	movs	r1, #1
 8003214:	5499      	strb	r1, [r3, r2]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2244      	movs	r2, #68	; 0x44
 800321a:	2101      	movs	r1, #1
 800321c:	5499      	strb	r1, [r3, r2]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2245      	movs	r2, #69	; 0x45
 8003222:	2101      	movs	r1, #1
 8003224:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	223d      	movs	r2, #61	; 0x3d
 800322a:	2101      	movs	r1, #1
 800322c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800322e:	2300      	movs	r3, #0
}
 8003230:	0018      	movs	r0, r3
 8003232:	46bd      	mov	sp, r7
 8003234:	b002      	add	sp, #8
 8003236:	bd80      	pop	{r7, pc}

08003238 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003240:	46c0      	nop			; (mov r8, r8)
 8003242:	46bd      	mov	sp, r7
 8003244:	b002      	add	sp, #8
 8003246:	bd80      	pop	{r7, pc}

08003248 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
 8003254:	001a      	movs	r2, r3
 8003256:	1cbb      	adds	r3, r7, #2
 8003258:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800325a:	2317      	movs	r3, #23
 800325c:	18fb      	adds	r3, r7, r3
 800325e:	2200      	movs	r2, #0
 8003260:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d108      	bne.n	800327a <HAL_TIM_PWM_Start_DMA+0x32>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	223e      	movs	r2, #62	; 0x3e
 800326c:	5c9b      	ldrb	r3, [r3, r2]
 800326e:	b2db      	uxtb	r3, r3
 8003270:	3b02      	subs	r3, #2
 8003272:	425a      	negs	r2, r3
 8003274:	4153      	adcs	r3, r2
 8003276:	b2db      	uxtb	r3, r3
 8003278:	e01f      	b.n	80032ba <HAL_TIM_PWM_Start_DMA+0x72>
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	2b04      	cmp	r3, #4
 800327e:	d108      	bne.n	8003292 <HAL_TIM_PWM_Start_DMA+0x4a>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	223f      	movs	r2, #63	; 0x3f
 8003284:	5c9b      	ldrb	r3, [r3, r2]
 8003286:	b2db      	uxtb	r3, r3
 8003288:	3b02      	subs	r3, #2
 800328a:	425a      	negs	r2, r3
 800328c:	4153      	adcs	r3, r2
 800328e:	b2db      	uxtb	r3, r3
 8003290:	e013      	b.n	80032ba <HAL_TIM_PWM_Start_DMA+0x72>
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	2b08      	cmp	r3, #8
 8003296:	d108      	bne.n	80032aa <HAL_TIM_PWM_Start_DMA+0x62>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2240      	movs	r2, #64	; 0x40
 800329c:	5c9b      	ldrb	r3, [r3, r2]
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	3b02      	subs	r3, #2
 80032a2:	425a      	negs	r2, r3
 80032a4:	4153      	adcs	r3, r2
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	e007      	b.n	80032ba <HAL_TIM_PWM_Start_DMA+0x72>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2241      	movs	r2, #65	; 0x41
 80032ae:	5c9b      	ldrb	r3, [r3, r2]
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	3b02      	subs	r3, #2
 80032b4:	425a      	negs	r2, r3
 80032b6:	4153      	adcs	r3, r2
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80032be:	2302      	movs	r3, #2
 80032c0:	e15a      	b.n	8003578 <HAL_TIM_PWM_Start_DMA+0x330>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d108      	bne.n	80032da <HAL_TIM_PWM_Start_DMA+0x92>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	223e      	movs	r2, #62	; 0x3e
 80032cc:	5c9b      	ldrb	r3, [r3, r2]
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	3b01      	subs	r3, #1
 80032d2:	425a      	negs	r2, r3
 80032d4:	4153      	adcs	r3, r2
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	e01f      	b.n	800331a <HAL_TIM_PWM_Start_DMA+0xd2>
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	2b04      	cmp	r3, #4
 80032de:	d108      	bne.n	80032f2 <HAL_TIM_PWM_Start_DMA+0xaa>
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	223f      	movs	r2, #63	; 0x3f
 80032e4:	5c9b      	ldrb	r3, [r3, r2]
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	3b01      	subs	r3, #1
 80032ea:	425a      	negs	r2, r3
 80032ec:	4153      	adcs	r3, r2
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	e013      	b.n	800331a <HAL_TIM_PWM_Start_DMA+0xd2>
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	2b08      	cmp	r3, #8
 80032f6:	d108      	bne.n	800330a <HAL_TIM_PWM_Start_DMA+0xc2>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2240      	movs	r2, #64	; 0x40
 80032fc:	5c9b      	ldrb	r3, [r3, r2]
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	3b01      	subs	r3, #1
 8003302:	425a      	negs	r2, r3
 8003304:	4153      	adcs	r3, r2
 8003306:	b2db      	uxtb	r3, r3
 8003308:	e007      	b.n	800331a <HAL_TIM_PWM_Start_DMA+0xd2>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2241      	movs	r2, #65	; 0x41
 800330e:	5c9b      	ldrb	r3, [r3, r2]
 8003310:	b2db      	uxtb	r3, r3
 8003312:	3b01      	subs	r3, #1
 8003314:	425a      	negs	r2, r3
 8003316:	4153      	adcs	r3, r2
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d025      	beq.n	800336a <HAL_TIM_PWM_Start_DMA+0x122>
  {
    if ((pData == NULL) || (Length == 0U))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d003      	beq.n	800332c <HAL_TIM_PWM_Start_DMA+0xe4>
 8003324:	1cbb      	adds	r3, r7, #2
 8003326:	881b      	ldrh	r3, [r3, #0]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d101      	bne.n	8003330 <HAL_TIM_PWM_Start_DMA+0xe8>
    {
      return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e123      	b.n	8003578 <HAL_TIM_PWM_Start_DMA+0x330>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d104      	bne.n	8003340 <HAL_TIM_PWM_Start_DMA+0xf8>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	223e      	movs	r2, #62	; 0x3e
 800333a:	2102      	movs	r1, #2
 800333c:	5499      	strb	r1, [r3, r2]
 800333e:	e016      	b.n	800336e <HAL_TIM_PWM_Start_DMA+0x126>
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	2b04      	cmp	r3, #4
 8003344:	d104      	bne.n	8003350 <HAL_TIM_PWM_Start_DMA+0x108>
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	223f      	movs	r2, #63	; 0x3f
 800334a:	2102      	movs	r1, #2
 800334c:	5499      	strb	r1, [r3, r2]
 800334e:	e00e      	b.n	800336e <HAL_TIM_PWM_Start_DMA+0x126>
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	2b08      	cmp	r3, #8
 8003354:	d104      	bne.n	8003360 <HAL_TIM_PWM_Start_DMA+0x118>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2240      	movs	r2, #64	; 0x40
 800335a:	2102      	movs	r1, #2
 800335c:	5499      	strb	r1, [r3, r2]
 800335e:	e006      	b.n	800336e <HAL_TIM_PWM_Start_DMA+0x126>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2241      	movs	r2, #65	; 0x41
 8003364:	2102      	movs	r1, #2
 8003366:	5499      	strb	r1, [r3, r2]
 8003368:	e001      	b.n	800336e <HAL_TIM_PWM_Start_DMA+0x126>
    }
  }
  else
  {
    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e104      	b.n	8003578 <HAL_TIM_PWM_Start_DMA+0x330>
  }

  switch (Channel)
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	2b0c      	cmp	r3, #12
 8003372:	d100      	bne.n	8003376 <HAL_TIM_PWM_Start_DMA+0x12e>
 8003374:	e080      	b.n	8003478 <HAL_TIM_PWM_Start_DMA+0x230>
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	2b0c      	cmp	r3, #12
 800337a:	d900      	bls.n	800337e <HAL_TIM_PWM_Start_DMA+0x136>
 800337c:	e0a1      	b.n	80034c2 <HAL_TIM_PWM_Start_DMA+0x27a>
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	2b08      	cmp	r3, #8
 8003382:	d054      	beq.n	800342e <HAL_TIM_PWM_Start_DMA+0x1e6>
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	2b08      	cmp	r3, #8
 8003388:	d900      	bls.n	800338c <HAL_TIM_PWM_Start_DMA+0x144>
 800338a:	e09a      	b.n	80034c2 <HAL_TIM_PWM_Start_DMA+0x27a>
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d003      	beq.n	800339a <HAL_TIM_PWM_Start_DMA+0x152>
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	2b04      	cmp	r3, #4
 8003396:	d025      	beq.n	80033e4 <HAL_TIM_PWM_Start_DMA+0x19c>
 8003398:	e093      	b.n	80034c2 <HAL_TIM_PWM_Start_DMA+0x27a>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339e:	4a78      	ldr	r2, [pc, #480]	; (8003580 <HAL_TIM_PWM_Start_DMA+0x338>)
 80033a0:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a6:	4a77      	ldr	r2, [pc, #476]	; (8003584 <HAL_TIM_PWM_Start_DMA+0x33c>)
 80033a8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ae:	4a76      	ldr	r2, [pc, #472]	; (8003588 <HAL_TIM_PWM_Start_DMA+0x340>)
 80033b0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80033b6:	6879      	ldr	r1, [r7, #4]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	3334      	adds	r3, #52	; 0x34
 80033be:	001a      	movs	r2, r3
 80033c0:	1cbb      	adds	r3, r7, #2
 80033c2:	881b      	ldrh	r3, [r3, #0]
 80033c4:	f7fe fd82 	bl	8001ecc <HAL_DMA_Start_IT>
 80033c8:	1e03      	subs	r3, r0, #0
 80033ca:	d001      	beq.n	80033d0 <HAL_TIM_PWM_Start_DMA+0x188>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e0d3      	b.n	8003578 <HAL_TIM_PWM_Start_DMA+0x330>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68da      	ldr	r2, [r3, #12]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2180      	movs	r1, #128	; 0x80
 80033dc:	0089      	lsls	r1, r1, #2
 80033de:	430a      	orrs	r2, r1
 80033e0:	60da      	str	r2, [r3, #12]
      break;
 80033e2:	e073      	b.n	80034cc <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e8:	4a65      	ldr	r2, [pc, #404]	; (8003580 <HAL_TIM_PWM_Start_DMA+0x338>)
 80033ea:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f0:	4a64      	ldr	r2, [pc, #400]	; (8003584 <HAL_TIM_PWM_Start_DMA+0x33c>)
 80033f2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f8:	4a63      	ldr	r2, [pc, #396]	; (8003588 <HAL_TIM_PWM_Start_DMA+0x340>)
 80033fa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003400:	6879      	ldr	r1, [r7, #4]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	3338      	adds	r3, #56	; 0x38
 8003408:	001a      	movs	r2, r3
 800340a:	1cbb      	adds	r3, r7, #2
 800340c:	881b      	ldrh	r3, [r3, #0]
 800340e:	f7fe fd5d 	bl	8001ecc <HAL_DMA_Start_IT>
 8003412:	1e03      	subs	r3, r0, #0
 8003414:	d001      	beq.n	800341a <HAL_TIM_PWM_Start_DMA+0x1d2>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e0ae      	b.n	8003578 <HAL_TIM_PWM_Start_DMA+0x330>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68da      	ldr	r2, [r3, #12]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2180      	movs	r1, #128	; 0x80
 8003426:	00c9      	lsls	r1, r1, #3
 8003428:	430a      	orrs	r2, r1
 800342a:	60da      	str	r2, [r3, #12]
      break;
 800342c:	e04e      	b.n	80034cc <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003432:	4a53      	ldr	r2, [pc, #332]	; (8003580 <HAL_TIM_PWM_Start_DMA+0x338>)
 8003434:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343a:	4a52      	ldr	r2, [pc, #328]	; (8003584 <HAL_TIM_PWM_Start_DMA+0x33c>)
 800343c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003442:	4a51      	ldr	r2, [pc, #324]	; (8003588 <HAL_TIM_PWM_Start_DMA+0x340>)
 8003444:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800344a:	6879      	ldr	r1, [r7, #4]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	333c      	adds	r3, #60	; 0x3c
 8003452:	001a      	movs	r2, r3
 8003454:	1cbb      	adds	r3, r7, #2
 8003456:	881b      	ldrh	r3, [r3, #0]
 8003458:	f7fe fd38 	bl	8001ecc <HAL_DMA_Start_IT>
 800345c:	1e03      	subs	r3, r0, #0
 800345e:	d001      	beq.n	8003464 <HAL_TIM_PWM_Start_DMA+0x21c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e089      	b.n	8003578 <HAL_TIM_PWM_Start_DMA+0x330>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68da      	ldr	r2, [r3, #12]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2180      	movs	r1, #128	; 0x80
 8003470:	0109      	lsls	r1, r1, #4
 8003472:	430a      	orrs	r2, r1
 8003474:	60da      	str	r2, [r3, #12]
      break;
 8003476:	e029      	b.n	80034cc <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347c:	4a40      	ldr	r2, [pc, #256]	; (8003580 <HAL_TIM_PWM_Start_DMA+0x338>)
 800347e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003484:	4a3f      	ldr	r2, [pc, #252]	; (8003584 <HAL_TIM_PWM_Start_DMA+0x33c>)
 8003486:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348c:	4a3e      	ldr	r2, [pc, #248]	; (8003588 <HAL_TIM_PWM_Start_DMA+0x340>)
 800348e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003494:	6879      	ldr	r1, [r7, #4]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	3340      	adds	r3, #64	; 0x40
 800349c:	001a      	movs	r2, r3
 800349e:	1cbb      	adds	r3, r7, #2
 80034a0:	881b      	ldrh	r3, [r3, #0]
 80034a2:	f7fe fd13 	bl	8001ecc <HAL_DMA_Start_IT>
 80034a6:	1e03      	subs	r3, r0, #0
 80034a8:	d001      	beq.n	80034ae <HAL_TIM_PWM_Start_DMA+0x266>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e064      	b.n	8003578 <HAL_TIM_PWM_Start_DMA+0x330>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68da      	ldr	r2, [r3, #12]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2180      	movs	r1, #128	; 0x80
 80034ba:	0149      	lsls	r1, r1, #5
 80034bc:	430a      	orrs	r2, r1
 80034be:	60da      	str	r2, [r3, #12]
      break;
 80034c0:	e004      	b.n	80034cc <HAL_TIM_PWM_Start_DMA+0x284>
    }

    default:
      status = HAL_ERROR;
 80034c2:	2317      	movs	r3, #23
 80034c4:	18fb      	adds	r3, r7, r3
 80034c6:	2201      	movs	r2, #1
 80034c8:	701a      	strb	r2, [r3, #0]
      break;
 80034ca:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 80034cc:	2317      	movs	r3, #23
 80034ce:	18fb      	adds	r3, r7, r3
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d14d      	bne.n	8003572 <HAL_TIM_PWM_Start_DMA+0x32a>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68b9      	ldr	r1, [r7, #8]
 80034dc:	2201      	movs	r2, #1
 80034de:	0018      	movs	r0, r3
 80034e0:	f000 fdd2 	bl	8004088 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a28      	ldr	r2, [pc, #160]	; (800358c <HAL_TIM_PWM_Start_DMA+0x344>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d009      	beq.n	8003502 <HAL_TIM_PWM_Start_DMA+0x2ba>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a27      	ldr	r2, [pc, #156]	; (8003590 <HAL_TIM_PWM_Start_DMA+0x348>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d004      	beq.n	8003502 <HAL_TIM_PWM_Start_DMA+0x2ba>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a25      	ldr	r2, [pc, #148]	; (8003594 <HAL_TIM_PWM_Start_DMA+0x34c>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d101      	bne.n	8003506 <HAL_TIM_PWM_Start_DMA+0x2be>
 8003502:	2301      	movs	r3, #1
 8003504:	e000      	b.n	8003508 <HAL_TIM_PWM_Start_DMA+0x2c0>
 8003506:	2300      	movs	r3, #0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d008      	beq.n	800351e <HAL_TIM_PWM_Start_DMA+0x2d6>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2180      	movs	r1, #128	; 0x80
 8003518:	0209      	lsls	r1, r1, #8
 800351a:	430a      	orrs	r2, r1
 800351c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a1a      	ldr	r2, [pc, #104]	; (800358c <HAL_TIM_PWM_Start_DMA+0x344>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d00a      	beq.n	800353e <HAL_TIM_PWM_Start_DMA+0x2f6>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	2380      	movs	r3, #128	; 0x80
 800352e:	05db      	lsls	r3, r3, #23
 8003530:	429a      	cmp	r2, r3
 8003532:	d004      	beq.n	800353e <HAL_TIM_PWM_Start_DMA+0x2f6>
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a17      	ldr	r2, [pc, #92]	; (8003598 <HAL_TIM_PWM_Start_DMA+0x350>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d111      	bne.n	8003562 <HAL_TIM_PWM_Start_DMA+0x31a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	2207      	movs	r2, #7
 8003546:	4013      	ands	r3, r2
 8003548:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	2b06      	cmp	r3, #6
 800354e:	d010      	beq.n	8003572 <HAL_TIM_PWM_Start_DMA+0x32a>
      {
        __HAL_TIM_ENABLE(htim);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2101      	movs	r1, #1
 800355c:	430a      	orrs	r2, r1
 800355e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003560:	e007      	b.n	8003572 <HAL_TIM_PWM_Start_DMA+0x32a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2101      	movs	r1, #1
 800356e:	430a      	orrs	r2, r1
 8003570:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003572:	2317      	movs	r3, #23
 8003574:	18fb      	adds	r3, r7, r3
 8003576:	781b      	ldrb	r3, [r3, #0]
}
 8003578:	0018      	movs	r0, r3
 800357a:	46bd      	mov	sp, r7
 800357c:	b006      	add	sp, #24
 800357e:	bd80      	pop	{r7, pc}
 8003580:	08003995 	.word	0x08003995
 8003584:	08003a3f 	.word	0x08003a3f
 8003588:	08003901 	.word	0x08003901
 800358c:	40012c00 	.word	0x40012c00
 8003590:	40014400 	.word	0x40014400
 8003594:	40014800 	.word	0x40014800
 8003598:	40000400 	.word	0x40000400

0800359c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035a8:	2317      	movs	r3, #23
 80035aa:	18fb      	adds	r3, r7, r3
 80035ac:	2200      	movs	r2, #0
 80035ae:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	223c      	movs	r2, #60	; 0x3c
 80035b4:	5c9b      	ldrb	r3, [r3, r2]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d101      	bne.n	80035be <HAL_TIM_PWM_ConfigChannel+0x22>
 80035ba:	2302      	movs	r3, #2
 80035bc:	e0ad      	b.n	800371a <HAL_TIM_PWM_ConfigChannel+0x17e>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	223c      	movs	r2, #60	; 0x3c
 80035c2:	2101      	movs	r1, #1
 80035c4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2b0c      	cmp	r3, #12
 80035ca:	d100      	bne.n	80035ce <HAL_TIM_PWM_ConfigChannel+0x32>
 80035cc:	e076      	b.n	80036bc <HAL_TIM_PWM_ConfigChannel+0x120>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2b0c      	cmp	r3, #12
 80035d2:	d900      	bls.n	80035d6 <HAL_TIM_PWM_ConfigChannel+0x3a>
 80035d4:	e095      	b.n	8003702 <HAL_TIM_PWM_ConfigChannel+0x166>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2b08      	cmp	r3, #8
 80035da:	d04e      	beq.n	800367a <HAL_TIM_PWM_ConfigChannel+0xde>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2b08      	cmp	r3, #8
 80035e0:	d900      	bls.n	80035e4 <HAL_TIM_PWM_ConfigChannel+0x48>
 80035e2:	e08e      	b.n	8003702 <HAL_TIM_PWM_ConfigChannel+0x166>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d003      	beq.n	80035f2 <HAL_TIM_PWM_ConfigChannel+0x56>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2b04      	cmp	r3, #4
 80035ee:	d021      	beq.n	8003634 <HAL_TIM_PWM_ConfigChannel+0x98>
 80035f0:	e087      	b.n	8003702 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68ba      	ldr	r2, [r7, #8]
 80035f8:	0011      	movs	r1, r2
 80035fa:	0018      	movs	r0, r3
 80035fc:	f000 faca 	bl	8003b94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	699a      	ldr	r2, [r3, #24]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2108      	movs	r1, #8
 800360c:	430a      	orrs	r2, r1
 800360e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	699a      	ldr	r2, [r3, #24]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2104      	movs	r1, #4
 800361c:	438a      	bics	r2, r1
 800361e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6999      	ldr	r1, [r3, #24]
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	691a      	ldr	r2, [r3, #16]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	430a      	orrs	r2, r1
 8003630:	619a      	str	r2, [r3, #24]
      break;
 8003632:	e06b      	b.n	800370c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68ba      	ldr	r2, [r7, #8]
 800363a:	0011      	movs	r1, r2
 800363c:	0018      	movs	r0, r3
 800363e:	f000 fb27 	bl	8003c90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	699a      	ldr	r2, [r3, #24]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2180      	movs	r1, #128	; 0x80
 800364e:	0109      	lsls	r1, r1, #4
 8003650:	430a      	orrs	r2, r1
 8003652:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	699a      	ldr	r2, [r3, #24]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4931      	ldr	r1, [pc, #196]	; (8003724 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003660:	400a      	ands	r2, r1
 8003662:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6999      	ldr	r1, [r3, #24]
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	021a      	lsls	r2, r3, #8
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	430a      	orrs	r2, r1
 8003676:	619a      	str	r2, [r3, #24]
      break;
 8003678:	e048      	b.n	800370c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68ba      	ldr	r2, [r7, #8]
 8003680:	0011      	movs	r1, r2
 8003682:	0018      	movs	r0, r3
 8003684:	f000 fb82 	bl	8003d8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	69da      	ldr	r2, [r3, #28]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2108      	movs	r1, #8
 8003694:	430a      	orrs	r2, r1
 8003696:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	69da      	ldr	r2, [r3, #28]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2104      	movs	r1, #4
 80036a4:	438a      	bics	r2, r1
 80036a6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	69d9      	ldr	r1, [r3, #28]
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	691a      	ldr	r2, [r3, #16]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	430a      	orrs	r2, r1
 80036b8:	61da      	str	r2, [r3, #28]
      break;
 80036ba:	e027      	b.n	800370c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68ba      	ldr	r2, [r7, #8]
 80036c2:	0011      	movs	r1, r2
 80036c4:	0018      	movs	r0, r3
 80036c6:	f000 fbe1 	bl	8003e8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	69da      	ldr	r2, [r3, #28]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2180      	movs	r1, #128	; 0x80
 80036d6:	0109      	lsls	r1, r1, #4
 80036d8:	430a      	orrs	r2, r1
 80036da:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	69da      	ldr	r2, [r3, #28]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	490f      	ldr	r1, [pc, #60]	; (8003724 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80036e8:	400a      	ands	r2, r1
 80036ea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	69d9      	ldr	r1, [r3, #28]
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	021a      	lsls	r2, r3, #8
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	430a      	orrs	r2, r1
 80036fe:	61da      	str	r2, [r3, #28]
      break;
 8003700:	e004      	b.n	800370c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8003702:	2317      	movs	r3, #23
 8003704:	18fb      	adds	r3, r7, r3
 8003706:	2201      	movs	r2, #1
 8003708:	701a      	strb	r2, [r3, #0]
      break;
 800370a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	223c      	movs	r2, #60	; 0x3c
 8003710:	2100      	movs	r1, #0
 8003712:	5499      	strb	r1, [r3, r2]

  return status;
 8003714:	2317      	movs	r3, #23
 8003716:	18fb      	adds	r3, r7, r3
 8003718:	781b      	ldrb	r3, [r3, #0]
}
 800371a:	0018      	movs	r0, r3
 800371c:	46bd      	mov	sp, r7
 800371e:	b006      	add	sp, #24
 8003720:	bd80      	pop	{r7, pc}
 8003722:	46c0      	nop			; (mov r8, r8)
 8003724:	fffffbff 	.word	0xfffffbff

08003728 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003732:	230f      	movs	r3, #15
 8003734:	18fb      	adds	r3, r7, r3
 8003736:	2200      	movs	r2, #0
 8003738:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	223c      	movs	r2, #60	; 0x3c
 800373e:	5c9b      	ldrb	r3, [r3, r2]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d101      	bne.n	8003748 <HAL_TIM_ConfigClockSource+0x20>
 8003744:	2302      	movs	r3, #2
 8003746:	e0bc      	b.n	80038c2 <HAL_TIM_ConfigClockSource+0x19a>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	223c      	movs	r2, #60	; 0x3c
 800374c:	2101      	movs	r1, #1
 800374e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	223d      	movs	r2, #61	; 0x3d
 8003754:	2102      	movs	r1, #2
 8003756:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	2277      	movs	r2, #119	; 0x77
 8003764:	4393      	bics	r3, r2
 8003766:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	4a58      	ldr	r2, [pc, #352]	; (80038cc <HAL_TIM_ConfigClockSource+0x1a4>)
 800376c:	4013      	ands	r3, r2
 800376e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68ba      	ldr	r2, [r7, #8]
 8003776:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2280      	movs	r2, #128	; 0x80
 800377e:	0192      	lsls	r2, r2, #6
 8003780:	4293      	cmp	r3, r2
 8003782:	d040      	beq.n	8003806 <HAL_TIM_ConfigClockSource+0xde>
 8003784:	2280      	movs	r2, #128	; 0x80
 8003786:	0192      	lsls	r2, r2, #6
 8003788:	4293      	cmp	r3, r2
 800378a:	d900      	bls.n	800378e <HAL_TIM_ConfigClockSource+0x66>
 800378c:	e088      	b.n	80038a0 <HAL_TIM_ConfigClockSource+0x178>
 800378e:	2280      	movs	r2, #128	; 0x80
 8003790:	0152      	lsls	r2, r2, #5
 8003792:	4293      	cmp	r3, r2
 8003794:	d100      	bne.n	8003798 <HAL_TIM_ConfigClockSource+0x70>
 8003796:	e088      	b.n	80038aa <HAL_TIM_ConfigClockSource+0x182>
 8003798:	2280      	movs	r2, #128	; 0x80
 800379a:	0152      	lsls	r2, r2, #5
 800379c:	4293      	cmp	r3, r2
 800379e:	d900      	bls.n	80037a2 <HAL_TIM_ConfigClockSource+0x7a>
 80037a0:	e07e      	b.n	80038a0 <HAL_TIM_ConfigClockSource+0x178>
 80037a2:	2b70      	cmp	r3, #112	; 0x70
 80037a4:	d018      	beq.n	80037d8 <HAL_TIM_ConfigClockSource+0xb0>
 80037a6:	d900      	bls.n	80037aa <HAL_TIM_ConfigClockSource+0x82>
 80037a8:	e07a      	b.n	80038a0 <HAL_TIM_ConfigClockSource+0x178>
 80037aa:	2b60      	cmp	r3, #96	; 0x60
 80037ac:	d04f      	beq.n	800384e <HAL_TIM_ConfigClockSource+0x126>
 80037ae:	d900      	bls.n	80037b2 <HAL_TIM_ConfigClockSource+0x8a>
 80037b0:	e076      	b.n	80038a0 <HAL_TIM_ConfigClockSource+0x178>
 80037b2:	2b50      	cmp	r3, #80	; 0x50
 80037b4:	d03b      	beq.n	800382e <HAL_TIM_ConfigClockSource+0x106>
 80037b6:	d900      	bls.n	80037ba <HAL_TIM_ConfigClockSource+0x92>
 80037b8:	e072      	b.n	80038a0 <HAL_TIM_ConfigClockSource+0x178>
 80037ba:	2b40      	cmp	r3, #64	; 0x40
 80037bc:	d057      	beq.n	800386e <HAL_TIM_ConfigClockSource+0x146>
 80037be:	d900      	bls.n	80037c2 <HAL_TIM_ConfigClockSource+0x9a>
 80037c0:	e06e      	b.n	80038a0 <HAL_TIM_ConfigClockSource+0x178>
 80037c2:	2b30      	cmp	r3, #48	; 0x30
 80037c4:	d063      	beq.n	800388e <HAL_TIM_ConfigClockSource+0x166>
 80037c6:	d86b      	bhi.n	80038a0 <HAL_TIM_ConfigClockSource+0x178>
 80037c8:	2b20      	cmp	r3, #32
 80037ca:	d060      	beq.n	800388e <HAL_TIM_ConfigClockSource+0x166>
 80037cc:	d868      	bhi.n	80038a0 <HAL_TIM_ConfigClockSource+0x178>
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d05d      	beq.n	800388e <HAL_TIM_ConfigClockSource+0x166>
 80037d2:	2b10      	cmp	r3, #16
 80037d4:	d05b      	beq.n	800388e <HAL_TIM_ConfigClockSource+0x166>
 80037d6:	e063      	b.n	80038a0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6818      	ldr	r0, [r3, #0]
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	6899      	ldr	r1, [r3, #8]
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685a      	ldr	r2, [r3, #4]
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	f000 fc2e 	bl	8004048 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	2277      	movs	r2, #119	; 0x77
 80037f8:	4313      	orrs	r3, r2
 80037fa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	609a      	str	r2, [r3, #8]
      break;
 8003804:	e052      	b.n	80038ac <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6818      	ldr	r0, [r3, #0]
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	6899      	ldr	r1, [r3, #8]
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	685a      	ldr	r2, [r3, #4]
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	f000 fc17 	bl	8004048 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	689a      	ldr	r2, [r3, #8]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2180      	movs	r1, #128	; 0x80
 8003826:	01c9      	lsls	r1, r1, #7
 8003828:	430a      	orrs	r2, r1
 800382a:	609a      	str	r2, [r3, #8]
      break;
 800382c:	e03e      	b.n	80038ac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6818      	ldr	r0, [r3, #0]
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	6859      	ldr	r1, [r3, #4]
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	001a      	movs	r2, r3
 800383c:	f000 fb8a 	bl	8003f54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2150      	movs	r1, #80	; 0x50
 8003846:	0018      	movs	r0, r3
 8003848:	f000 fbe4 	bl	8004014 <TIM_ITRx_SetConfig>
      break;
 800384c:	e02e      	b.n	80038ac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6818      	ldr	r0, [r3, #0]
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	6859      	ldr	r1, [r3, #4]
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	001a      	movs	r2, r3
 800385c:	f000 fba8 	bl	8003fb0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2160      	movs	r1, #96	; 0x60
 8003866:	0018      	movs	r0, r3
 8003868:	f000 fbd4 	bl	8004014 <TIM_ITRx_SetConfig>
      break;
 800386c:	e01e      	b.n	80038ac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6818      	ldr	r0, [r3, #0]
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	6859      	ldr	r1, [r3, #4]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	001a      	movs	r2, r3
 800387c:	f000 fb6a 	bl	8003f54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2140      	movs	r1, #64	; 0x40
 8003886:	0018      	movs	r0, r3
 8003888:	f000 fbc4 	bl	8004014 <TIM_ITRx_SetConfig>
      break;
 800388c:	e00e      	b.n	80038ac <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	0019      	movs	r1, r3
 8003898:	0010      	movs	r0, r2
 800389a:	f000 fbbb 	bl	8004014 <TIM_ITRx_SetConfig>
      break;
 800389e:	e005      	b.n	80038ac <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80038a0:	230f      	movs	r3, #15
 80038a2:	18fb      	adds	r3, r7, r3
 80038a4:	2201      	movs	r2, #1
 80038a6:	701a      	strb	r2, [r3, #0]
      break;
 80038a8:	e000      	b.n	80038ac <HAL_TIM_ConfigClockSource+0x184>
      break;
 80038aa:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	223d      	movs	r2, #61	; 0x3d
 80038b0:	2101      	movs	r1, #1
 80038b2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	223c      	movs	r2, #60	; 0x3c
 80038b8:	2100      	movs	r1, #0
 80038ba:	5499      	strb	r1, [r3, r2]

  return status;
 80038bc:	230f      	movs	r3, #15
 80038be:	18fb      	adds	r3, r7, r3
 80038c0:	781b      	ldrb	r3, [r3, #0]
}
 80038c2:	0018      	movs	r0, r3
 80038c4:	46bd      	mov	sp, r7
 80038c6:	b004      	add	sp, #16
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	46c0      	nop			; (mov r8, r8)
 80038cc:	ffff00ff 	.word	0xffff00ff

080038d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038d8:	46c0      	nop			; (mov r8, r8)
 80038da:	46bd      	mov	sp, r7
 80038dc:	b002      	add	sp, #8
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80038e8:	46c0      	nop			; (mov r8, r8)
 80038ea:	46bd      	mov	sp, r7
 80038ec:	b002      	add	sp, #8
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80038f8:	46c0      	nop			; (mov r8, r8)
 80038fa:	46bd      	mov	sp, r7
 80038fc:	b002      	add	sp, #8
 80038fe:	bd80      	pop	{r7, pc}

08003900 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	429a      	cmp	r2, r3
 8003916:	d107      	bne.n	8003928 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2201      	movs	r2, #1
 800391c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	223e      	movs	r2, #62	; 0x3e
 8003922:	2101      	movs	r1, #1
 8003924:	5499      	strb	r1, [r3, r2]
 8003926:	e02a      	b.n	800397e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	429a      	cmp	r2, r3
 8003930:	d107      	bne.n	8003942 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2202      	movs	r2, #2
 8003936:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	223f      	movs	r2, #63	; 0x3f
 800393c:	2101      	movs	r1, #1
 800393e:	5499      	strb	r1, [r3, r2]
 8003940:	e01d      	b.n	800397e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	429a      	cmp	r2, r3
 800394a:	d107      	bne.n	800395c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2204      	movs	r2, #4
 8003950:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2240      	movs	r2, #64	; 0x40
 8003956:	2101      	movs	r1, #1
 8003958:	5499      	strb	r1, [r3, r2]
 800395a:	e010      	b.n	800397e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	429a      	cmp	r2, r3
 8003964:	d107      	bne.n	8003976 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2208      	movs	r2, #8
 800396a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2241      	movs	r2, #65	; 0x41
 8003970:	2101      	movs	r1, #1
 8003972:	5499      	strb	r1, [r3, r2]
 8003974:	e003      	b.n	800397e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	223d      	movs	r2, #61	; 0x3d
 800397a:	2101      	movs	r1, #1
 800397c:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	0018      	movs	r0, r3
 8003982:	f7ff ffb5 	bl	80038f0 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	771a      	strb	r2, [r3, #28]
}
 800398c:	46c0      	nop			; (mov r8, r8)
 800398e:	46bd      	mov	sp, r7
 8003990:	b004      	add	sp, #16
 8003992:	bd80      	pop	{r7, pc}

08003994 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d10b      	bne.n	80039c4 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2201      	movs	r2, #1
 80039b0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d136      	bne.n	8003a28 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	223e      	movs	r2, #62	; 0x3e
 80039be:	2101      	movs	r1, #1
 80039c0:	5499      	strb	r1, [r3, r2]
 80039c2:	e031      	b.n	8003a28 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d10b      	bne.n	80039e6 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2202      	movs	r2, #2
 80039d2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d125      	bne.n	8003a28 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	223f      	movs	r2, #63	; 0x3f
 80039e0:	2101      	movs	r1, #1
 80039e2:	5499      	strb	r1, [r3, r2]
 80039e4:	e020      	b.n	8003a28 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d10b      	bne.n	8003a08 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2204      	movs	r2, #4
 80039f4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d114      	bne.n	8003a28 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2240      	movs	r2, #64	; 0x40
 8003a02:	2101      	movs	r1, #1
 8003a04:	5499      	strb	r1, [r3, r2]
 8003a06:	e00f      	b.n	8003a28 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d10a      	bne.n	8003a28 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2208      	movs	r2, #8
 8003a16:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d103      	bne.n	8003a28 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2241      	movs	r2, #65	; 0x41
 8003a24:	2101      	movs	r1, #1
 8003a26:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	0018      	movs	r0, r3
 8003a2c:	f7ff ff50 	bl	80038d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	771a      	strb	r2, [r3, #28]
}
 8003a36:	46c0      	nop			; (mov r8, r8)
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	b004      	add	sp, #16
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b084      	sub	sp, #16
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d103      	bne.n	8003a5e <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	771a      	strb	r2, [r3, #28]
 8003a5c:	e019      	b.n	8003a92 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d103      	bne.n	8003a70 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	771a      	strb	r2, [r3, #28]
 8003a6e:	e010      	b.n	8003a92 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d103      	bne.n	8003a82 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2204      	movs	r2, #4
 8003a7e:	771a      	strb	r2, [r3, #28]
 8003a80:	e007      	b.n	8003a92 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d102      	bne.n	8003a92 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2208      	movs	r2, #8
 8003a90:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	0018      	movs	r0, r3
 8003a96:	f7ff ff23 	bl	80038e0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	771a      	strb	r2, [r3, #28]
}
 8003aa0:	46c0      	nop			; (mov r8, r8)
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	b004      	add	sp, #16
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a30      	ldr	r2, [pc, #192]	; (8003b7c <TIM_Base_SetConfig+0xd4>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d008      	beq.n	8003ad2 <TIM_Base_SetConfig+0x2a>
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	2380      	movs	r3, #128	; 0x80
 8003ac4:	05db      	lsls	r3, r3, #23
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d003      	beq.n	8003ad2 <TIM_Base_SetConfig+0x2a>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a2c      	ldr	r2, [pc, #176]	; (8003b80 <TIM_Base_SetConfig+0xd8>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d108      	bne.n	8003ae4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2270      	movs	r2, #112	; 0x70
 8003ad6:	4393      	bics	r3, r2
 8003ad8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a25      	ldr	r2, [pc, #148]	; (8003b7c <TIM_Base_SetConfig+0xd4>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d014      	beq.n	8003b16 <TIM_Base_SetConfig+0x6e>
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	2380      	movs	r3, #128	; 0x80
 8003af0:	05db      	lsls	r3, r3, #23
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d00f      	beq.n	8003b16 <TIM_Base_SetConfig+0x6e>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a21      	ldr	r2, [pc, #132]	; (8003b80 <TIM_Base_SetConfig+0xd8>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d00b      	beq.n	8003b16 <TIM_Base_SetConfig+0x6e>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a20      	ldr	r2, [pc, #128]	; (8003b84 <TIM_Base_SetConfig+0xdc>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d007      	beq.n	8003b16 <TIM_Base_SetConfig+0x6e>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a1f      	ldr	r2, [pc, #124]	; (8003b88 <TIM_Base_SetConfig+0xe0>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d003      	beq.n	8003b16 <TIM_Base_SetConfig+0x6e>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a1e      	ldr	r2, [pc, #120]	; (8003b8c <TIM_Base_SetConfig+0xe4>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d108      	bne.n	8003b28 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	4a1d      	ldr	r2, [pc, #116]	; (8003b90 <TIM_Base_SetConfig+0xe8>)
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2280      	movs	r2, #128	; 0x80
 8003b2c:	4393      	bics	r3, r2
 8003b2e:	001a      	movs	r2, r3
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	695b      	ldr	r3, [r3, #20]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	689a      	ldr	r2, [r3, #8]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a0a      	ldr	r2, [pc, #40]	; (8003b7c <TIM_Base_SetConfig+0xd4>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d007      	beq.n	8003b66 <TIM_Base_SetConfig+0xbe>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a0b      	ldr	r2, [pc, #44]	; (8003b88 <TIM_Base_SetConfig+0xe0>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d003      	beq.n	8003b66 <TIM_Base_SetConfig+0xbe>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a0a      	ldr	r2, [pc, #40]	; (8003b8c <TIM_Base_SetConfig+0xe4>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d103      	bne.n	8003b6e <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	691a      	ldr	r2, [r3, #16]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	615a      	str	r2, [r3, #20]
}
 8003b74:	46c0      	nop			; (mov r8, r8)
 8003b76:	46bd      	mov	sp, r7
 8003b78:	b004      	add	sp, #16
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	40012c00 	.word	0x40012c00
 8003b80:	40000400 	.word	0x40000400
 8003b84:	40002000 	.word	0x40002000
 8003b88:	40014400 	.word	0x40014400
 8003b8c:	40014800 	.word	0x40014800
 8003b90:	fffffcff 	.word	0xfffffcff

08003b94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	4393      	bics	r3, r2
 8003ba6:	001a      	movs	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a1b      	ldr	r3, [r3, #32]
 8003bb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2270      	movs	r2, #112	; 0x70
 8003bc2:	4393      	bics	r3, r2
 8003bc4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2203      	movs	r2, #3
 8003bca:	4393      	bics	r3, r2
 8003bcc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	2202      	movs	r2, #2
 8003bdc:	4393      	bics	r3, r2
 8003bde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a23      	ldr	r2, [pc, #140]	; (8003c7c <TIM_OC1_SetConfig+0xe8>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d007      	beq.n	8003c02 <TIM_OC1_SetConfig+0x6e>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a22      	ldr	r2, [pc, #136]	; (8003c80 <TIM_OC1_SetConfig+0xec>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d003      	beq.n	8003c02 <TIM_OC1_SetConfig+0x6e>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a21      	ldr	r2, [pc, #132]	; (8003c84 <TIM_OC1_SetConfig+0xf0>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d10c      	bne.n	8003c1c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	2208      	movs	r2, #8
 8003c06:	4393      	bics	r3, r2
 8003c08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	2204      	movs	r2, #4
 8003c18:	4393      	bics	r3, r2
 8003c1a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a17      	ldr	r2, [pc, #92]	; (8003c7c <TIM_OC1_SetConfig+0xe8>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d007      	beq.n	8003c34 <TIM_OC1_SetConfig+0xa0>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a16      	ldr	r2, [pc, #88]	; (8003c80 <TIM_OC1_SetConfig+0xec>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d003      	beq.n	8003c34 <TIM_OC1_SetConfig+0xa0>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a15      	ldr	r2, [pc, #84]	; (8003c84 <TIM_OC1_SetConfig+0xf0>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d111      	bne.n	8003c58 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	4a14      	ldr	r2, [pc, #80]	; (8003c88 <TIM_OC1_SetConfig+0xf4>)
 8003c38:	4013      	ands	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	4a13      	ldr	r2, [pc, #76]	; (8003c8c <TIM_OC1_SetConfig+0xf8>)
 8003c40:	4013      	ands	r3, r2
 8003c42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	695b      	ldr	r3, [r3, #20]
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685a      	ldr	r2, [r3, #4]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	621a      	str	r2, [r3, #32]
}
 8003c72:	46c0      	nop			; (mov r8, r8)
 8003c74:	46bd      	mov	sp, r7
 8003c76:	b006      	add	sp, #24
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	46c0      	nop			; (mov r8, r8)
 8003c7c:	40012c00 	.word	0x40012c00
 8003c80:	40014400 	.word	0x40014400
 8003c84:	40014800 	.word	0x40014800
 8003c88:	fffffeff 	.word	0xfffffeff
 8003c8c:	fffffdff 	.word	0xfffffdff

08003c90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b086      	sub	sp, #24
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	2210      	movs	r2, #16
 8003ca0:	4393      	bics	r3, r2
 8003ca2:	001a      	movs	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a1b      	ldr	r3, [r3, #32]
 8003cac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	4a2c      	ldr	r2, [pc, #176]	; (8003d70 <TIM_OC2_SetConfig+0xe0>)
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	4a2b      	ldr	r2, [pc, #172]	; (8003d74 <TIM_OC2_SetConfig+0xe4>)
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	021b      	lsls	r3, r3, #8
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	2220      	movs	r2, #32
 8003cda:	4393      	bics	r3, r2
 8003cdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	011b      	lsls	r3, r3, #4
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a22      	ldr	r2, [pc, #136]	; (8003d78 <TIM_OC2_SetConfig+0xe8>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d10d      	bne.n	8003d0e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	2280      	movs	r2, #128	; 0x80
 8003cf6:	4393      	bics	r3, r2
 8003cf8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	011b      	lsls	r3, r3, #4
 8003d00:	697a      	ldr	r2, [r7, #20]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	2240      	movs	r2, #64	; 0x40
 8003d0a:	4393      	bics	r3, r2
 8003d0c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a19      	ldr	r2, [pc, #100]	; (8003d78 <TIM_OC2_SetConfig+0xe8>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d007      	beq.n	8003d26 <TIM_OC2_SetConfig+0x96>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a18      	ldr	r2, [pc, #96]	; (8003d7c <TIM_OC2_SetConfig+0xec>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d003      	beq.n	8003d26 <TIM_OC2_SetConfig+0x96>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a17      	ldr	r2, [pc, #92]	; (8003d80 <TIM_OC2_SetConfig+0xf0>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d113      	bne.n	8003d4e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	4a16      	ldr	r2, [pc, #88]	; (8003d84 <TIM_OC2_SetConfig+0xf4>)
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	4a15      	ldr	r2, [pc, #84]	; (8003d88 <TIM_OC2_SetConfig+0xf8>)
 8003d32:	4013      	ands	r3, r2
 8003d34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	693a      	ldr	r2, [r7, #16]
 8003d52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	685a      	ldr	r2, [r3, #4]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	621a      	str	r2, [r3, #32]
}
 8003d68:	46c0      	nop			; (mov r8, r8)
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	b006      	add	sp, #24
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	ffff8fff 	.word	0xffff8fff
 8003d74:	fffffcff 	.word	0xfffffcff
 8003d78:	40012c00 	.word	0x40012c00
 8003d7c:	40014400 	.word	0x40014400
 8003d80:	40014800 	.word	0x40014800
 8003d84:	fffffbff 	.word	0xfffffbff
 8003d88:	fffff7ff 	.word	0xfffff7ff

08003d8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b086      	sub	sp, #24
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	4a33      	ldr	r2, [pc, #204]	; (8003e68 <TIM_OC3_SetConfig+0xdc>)
 8003d9c:	401a      	ands	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	69db      	ldr	r3, [r3, #28]
 8003db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2270      	movs	r2, #112	; 0x70
 8003db8:	4393      	bics	r3, r2
 8003dba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2203      	movs	r2, #3
 8003dc0:	4393      	bics	r3, r2
 8003dc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	4a26      	ldr	r2, [pc, #152]	; (8003e6c <TIM_OC3_SetConfig+0xe0>)
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	021b      	lsls	r3, r3, #8
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a22      	ldr	r2, [pc, #136]	; (8003e70 <TIM_OC3_SetConfig+0xe4>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d10d      	bne.n	8003e06 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	4a21      	ldr	r2, [pc, #132]	; (8003e74 <TIM_OC3_SetConfig+0xe8>)
 8003dee:	4013      	ands	r3, r2
 8003df0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	021b      	lsls	r3, r3, #8
 8003df8:	697a      	ldr	r2, [r7, #20]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	4a1d      	ldr	r2, [pc, #116]	; (8003e78 <TIM_OC3_SetConfig+0xec>)
 8003e02:	4013      	ands	r3, r2
 8003e04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a19      	ldr	r2, [pc, #100]	; (8003e70 <TIM_OC3_SetConfig+0xe4>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d007      	beq.n	8003e1e <TIM_OC3_SetConfig+0x92>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a1a      	ldr	r2, [pc, #104]	; (8003e7c <TIM_OC3_SetConfig+0xf0>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d003      	beq.n	8003e1e <TIM_OC3_SetConfig+0x92>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a19      	ldr	r2, [pc, #100]	; (8003e80 <TIM_OC3_SetConfig+0xf4>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d113      	bne.n	8003e46 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	4a18      	ldr	r2, [pc, #96]	; (8003e84 <TIM_OC3_SetConfig+0xf8>)
 8003e22:	4013      	ands	r3, r2
 8003e24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	4a17      	ldr	r2, [pc, #92]	; (8003e88 <TIM_OC3_SetConfig+0xfc>)
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	011b      	lsls	r3, r3, #4
 8003e34:	693a      	ldr	r2, [r7, #16]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	011b      	lsls	r3, r3, #4
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	685a      	ldr	r2, [r3, #4]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	697a      	ldr	r2, [r7, #20]
 8003e5e:	621a      	str	r2, [r3, #32]
}
 8003e60:	46c0      	nop			; (mov r8, r8)
 8003e62:	46bd      	mov	sp, r7
 8003e64:	b006      	add	sp, #24
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	fffffeff 	.word	0xfffffeff
 8003e6c:	fffffdff 	.word	0xfffffdff
 8003e70:	40012c00 	.word	0x40012c00
 8003e74:	fffff7ff 	.word	0xfffff7ff
 8003e78:	fffffbff 	.word	0xfffffbff
 8003e7c:	40014400 	.word	0x40014400
 8003e80:	40014800 	.word	0x40014800
 8003e84:	ffffefff 	.word	0xffffefff
 8003e88:	ffffdfff 	.word	0xffffdfff

08003e8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	4a26      	ldr	r2, [pc, #152]	; (8003f34 <TIM_OC4_SetConfig+0xa8>)
 8003e9c:	401a      	ands	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	69db      	ldr	r3, [r3, #28]
 8003eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	4a20      	ldr	r2, [pc, #128]	; (8003f38 <TIM_OC4_SetConfig+0xac>)
 8003eb8:	4013      	ands	r3, r2
 8003eba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	4a1f      	ldr	r2, [pc, #124]	; (8003f3c <TIM_OC4_SetConfig+0xb0>)
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	021b      	lsls	r3, r3, #8
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	4a1b      	ldr	r2, [pc, #108]	; (8003f40 <TIM_OC4_SetConfig+0xb4>)
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	031b      	lsls	r3, r3, #12
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a17      	ldr	r2, [pc, #92]	; (8003f44 <TIM_OC4_SetConfig+0xb8>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d007      	beq.n	8003efc <TIM_OC4_SetConfig+0x70>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a16      	ldr	r2, [pc, #88]	; (8003f48 <TIM_OC4_SetConfig+0xbc>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d003      	beq.n	8003efc <TIM_OC4_SetConfig+0x70>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a15      	ldr	r2, [pc, #84]	; (8003f4c <TIM_OC4_SetConfig+0xc0>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d109      	bne.n	8003f10 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	4a14      	ldr	r2, [pc, #80]	; (8003f50 <TIM_OC4_SetConfig+0xc4>)
 8003f00:	4013      	ands	r3, r2
 8003f02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	695b      	ldr	r3, [r3, #20]
 8003f08:	019b      	lsls	r3, r3, #6
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	697a      	ldr	r2, [r7, #20]
 8003f14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685a      	ldr	r2, [r3, #4]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	621a      	str	r2, [r3, #32]
}
 8003f2a:	46c0      	nop			; (mov r8, r8)
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	b006      	add	sp, #24
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	46c0      	nop			; (mov r8, r8)
 8003f34:	ffffefff 	.word	0xffffefff
 8003f38:	ffff8fff 	.word	0xffff8fff
 8003f3c:	fffffcff 	.word	0xfffffcff
 8003f40:	ffffdfff 	.word	0xffffdfff
 8003f44:	40012c00 	.word	0x40012c00
 8003f48:	40014400 	.word	0x40014400
 8003f4c:	40014800 	.word	0x40014800
 8003f50:	ffffbfff 	.word	0xffffbfff

08003f54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b086      	sub	sp, #24
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6a1b      	ldr	r3, [r3, #32]
 8003f64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	4393      	bics	r3, r2
 8003f6e:	001a      	movs	r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	22f0      	movs	r2, #240	; 0xf0
 8003f7e:	4393      	bics	r3, r2
 8003f80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	011b      	lsls	r3, r3, #4
 8003f86:	693a      	ldr	r2, [r7, #16]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	220a      	movs	r2, #10
 8003f90:	4393      	bics	r3, r2
 8003f92:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	693a      	ldr	r2, [r7, #16]
 8003fa0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	697a      	ldr	r2, [r7, #20]
 8003fa6:	621a      	str	r2, [r3, #32]
}
 8003fa8:	46c0      	nop			; (mov r8, r8)
 8003faa:	46bd      	mov	sp, r7
 8003fac:	b006      	add	sp, #24
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b086      	sub	sp, #24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	2210      	movs	r2, #16
 8003fc2:	4393      	bics	r3, r2
 8003fc4:	001a      	movs	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
 8003fd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	4a0d      	ldr	r2, [pc, #52]	; (8004010 <TIM_TI2_ConfigInputStage+0x60>)
 8003fda:	4013      	ands	r3, r2
 8003fdc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	031b      	lsls	r3, r3, #12
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	22a0      	movs	r2, #160	; 0xa0
 8003fec:	4393      	bics	r3, r2
 8003fee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	011b      	lsls	r3, r3, #4
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	697a      	ldr	r2, [r7, #20]
 8003ffe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	621a      	str	r2, [r3, #32]
}
 8004006:	46c0      	nop			; (mov r8, r8)
 8004008:	46bd      	mov	sp, r7
 800400a:	b006      	add	sp, #24
 800400c:	bd80      	pop	{r7, pc}
 800400e:	46c0      	nop			; (mov r8, r8)
 8004010:	ffff0fff 	.word	0xffff0fff

08004014 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2270      	movs	r2, #112	; 0x70
 8004028:	4393      	bics	r3, r2
 800402a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800402c:	683a      	ldr	r2, [r7, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	4313      	orrs	r3, r2
 8004032:	2207      	movs	r2, #7
 8004034:	4313      	orrs	r3, r2
 8004036:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	609a      	str	r2, [r3, #8]
}
 800403e:	46c0      	nop			; (mov r8, r8)
 8004040:	46bd      	mov	sp, r7
 8004042:	b004      	add	sp, #16
 8004044:	bd80      	pop	{r7, pc}
	...

08004048 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b086      	sub	sp, #24
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]
 8004054:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	4a09      	ldr	r2, [pc, #36]	; (8004084 <TIM_ETR_SetConfig+0x3c>)
 8004060:	4013      	ands	r3, r2
 8004062:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	021a      	lsls	r2, r3, #8
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	431a      	orrs	r2, r3
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	4313      	orrs	r3, r2
 8004070:	697a      	ldr	r2, [r7, #20]
 8004072:	4313      	orrs	r3, r2
 8004074:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	609a      	str	r2, [r3, #8]
}
 800407c:	46c0      	nop			; (mov r8, r8)
 800407e:	46bd      	mov	sp, r7
 8004080:	b006      	add	sp, #24
 8004082:	bd80      	pop	{r7, pc}
 8004084:	ffff00ff 	.word	0xffff00ff

08004088 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	221f      	movs	r2, #31
 8004098:	4013      	ands	r3, r2
 800409a:	2201      	movs	r2, #1
 800409c:	409a      	lsls	r2, r3
 800409e:	0013      	movs	r3, r2
 80040a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	43d2      	mvns	r2, r2
 80040aa:	401a      	ands	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6a1a      	ldr	r2, [r3, #32]
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	211f      	movs	r1, #31
 80040b8:	400b      	ands	r3, r1
 80040ba:	6879      	ldr	r1, [r7, #4]
 80040bc:	4099      	lsls	r1, r3
 80040be:	000b      	movs	r3, r1
 80040c0:	431a      	orrs	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	621a      	str	r2, [r3, #32]
}
 80040c6:	46c0      	nop			; (mov r8, r8)
 80040c8:	46bd      	mov	sp, r7
 80040ca:	b006      	add	sp, #24
 80040cc:	bd80      	pop	{r7, pc}
	...

080040d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	223c      	movs	r2, #60	; 0x3c
 80040de:	5c9b      	ldrb	r3, [r3, r2]
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d101      	bne.n	80040e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040e4:	2302      	movs	r3, #2
 80040e6:	e042      	b.n	800416e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	223c      	movs	r2, #60	; 0x3c
 80040ec:	2101      	movs	r1, #1
 80040ee:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	223d      	movs	r2, #61	; 0x3d
 80040f4:	2102      	movs	r1, #2
 80040f6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2270      	movs	r2, #112	; 0x70
 800410c:	4393      	bics	r3, r2
 800410e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	4313      	orrs	r3, r2
 8004118:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a14      	ldr	r2, [pc, #80]	; (8004178 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d00a      	beq.n	8004142 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	2380      	movs	r3, #128	; 0x80
 8004132:	05db      	lsls	r3, r3, #23
 8004134:	429a      	cmp	r2, r3
 8004136:	d004      	beq.n	8004142 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a0f      	ldr	r2, [pc, #60]	; (800417c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d10c      	bne.n	800415c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	2280      	movs	r2, #128	; 0x80
 8004146:	4393      	bics	r3, r2
 8004148:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	68ba      	ldr	r2, [r7, #8]
 8004150:	4313      	orrs	r3, r2
 8004152:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68ba      	ldr	r2, [r7, #8]
 800415a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	223d      	movs	r2, #61	; 0x3d
 8004160:	2101      	movs	r1, #1
 8004162:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	223c      	movs	r2, #60	; 0x3c
 8004168:	2100      	movs	r1, #0
 800416a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	0018      	movs	r0, r3
 8004170:	46bd      	mov	sp, r7
 8004172:	b004      	add	sp, #16
 8004174:	bd80      	pop	{r7, pc}
 8004176:	46c0      	nop			; (mov r8, r8)
 8004178:	40012c00 	.word	0x40012c00
 800417c:	40000400 	.word	0x40000400

08004180 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d101      	bne.n	8004192 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e044      	b.n	800421c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004196:	2b00      	cmp	r3, #0
 8004198:	d107      	bne.n	80041aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2278      	movs	r2, #120	; 0x78
 800419e:	2100      	movs	r1, #0
 80041a0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	0018      	movs	r0, r3
 80041a6:	f7fc ffd3 	bl	8001150 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2224      	movs	r2, #36	; 0x24
 80041ae:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2101      	movs	r1, #1
 80041bc:	438a      	bics	r2, r1
 80041be:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	0018      	movs	r0, r3
 80041c4:	f000 fb7c 	bl	80048c0 <UART_SetConfig>
 80041c8:	0003      	movs	r3, r0
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d101      	bne.n	80041d2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e024      	b.n	800421c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d003      	beq.n	80041e2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	0018      	movs	r0, r3
 80041de:	f000 fcaf 	bl	8004b40 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	685a      	ldr	r2, [r3, #4]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	490d      	ldr	r1, [pc, #52]	; (8004224 <HAL_UART_Init+0xa4>)
 80041ee:	400a      	ands	r2, r1
 80041f0:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	689a      	ldr	r2, [r3, #8]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	212a      	movs	r1, #42	; 0x2a
 80041fe:	438a      	bics	r2, r1
 8004200:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2101      	movs	r1, #1
 800420e:	430a      	orrs	r2, r1
 8004210:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	0018      	movs	r0, r3
 8004216:	f000 fd47 	bl	8004ca8 <UART_CheckIdleState>
 800421a:	0003      	movs	r3, r0
}
 800421c:	0018      	movs	r0, r3
 800421e:	46bd      	mov	sp, r7
 8004220:	b002      	add	sp, #8
 8004222:	bd80      	pop	{r7, pc}
 8004224:	ffffb7ff 	.word	0xffffb7ff

08004228 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b088      	sub	sp, #32
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	1dbb      	adds	r3, r7, #6
 8004234:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2280      	movs	r2, #128	; 0x80
 800423a:	589b      	ldr	r3, [r3, r2]
 800423c:	2b20      	cmp	r3, #32
 800423e:	d145      	bne.n	80042cc <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d003      	beq.n	800424e <HAL_UART_Receive_IT+0x26>
 8004246:	1dbb      	adds	r3, r7, #6
 8004248:	881b      	ldrh	r3, [r3, #0]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d101      	bne.n	8004252 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e03d      	b.n	80042ce <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	689a      	ldr	r2, [r3, #8]
 8004256:	2380      	movs	r3, #128	; 0x80
 8004258:	015b      	lsls	r3, r3, #5
 800425a:	429a      	cmp	r2, r3
 800425c:	d109      	bne.n	8004272 <HAL_UART_Receive_IT+0x4a>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d105      	bne.n	8004272 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	2201      	movs	r2, #1
 800426a:	4013      	ands	r3, r2
 800426c:	d001      	beq.n	8004272 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e02d      	b.n	80042ce <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	685a      	ldr	r2, [r3, #4]
 800427e:	2380      	movs	r3, #128	; 0x80
 8004280:	041b      	lsls	r3, r3, #16
 8004282:	4013      	ands	r3, r2
 8004284:	d019      	beq.n	80042ba <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004286:	f3ef 8310 	mrs	r3, PRIMASK
 800428a:	613b      	str	r3, [r7, #16]
  return(result);
 800428c:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800428e:	61fb      	str	r3, [r7, #28]
 8004290:	2301      	movs	r3, #1
 8004292:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	f383 8810 	msr	PRIMASK, r3
}
 800429a:	46c0      	nop			; (mov r8, r8)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2180      	movs	r1, #128	; 0x80
 80042a8:	04c9      	lsls	r1, r1, #19
 80042aa:	430a      	orrs	r2, r1
 80042ac:	601a      	str	r2, [r3, #0]
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	f383 8810 	msr	PRIMASK, r3
}
 80042b8:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80042ba:	1dbb      	adds	r3, r7, #6
 80042bc:	881a      	ldrh	r2, [r3, #0]
 80042be:	68b9      	ldr	r1, [r7, #8]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	0018      	movs	r0, r3
 80042c4:	f000 fe02 	bl	8004ecc <UART_Start_Receive_IT>
 80042c8:	0003      	movs	r3, r0
 80042ca:	e000      	b.n	80042ce <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80042cc:	2302      	movs	r3, #2
  }
}
 80042ce:	0018      	movs	r0, r3
 80042d0:	46bd      	mov	sp, r7
 80042d2:	b008      	add	sp, #32
 80042d4:	bd80      	pop	{r7, pc}
	...

080042d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042d8:	b590      	push	{r4, r7, lr}
 80042da:	b0ab      	sub	sp, #172	; 0xac
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	69db      	ldr	r3, [r3, #28]
 80042e6:	22a4      	movs	r2, #164	; 0xa4
 80042e8:	18b9      	adds	r1, r7, r2
 80042ea:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	20a0      	movs	r0, #160	; 0xa0
 80042f4:	1839      	adds	r1, r7, r0
 80042f6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	219c      	movs	r1, #156	; 0x9c
 8004300:	1879      	adds	r1, r7, r1
 8004302:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004304:	0011      	movs	r1, r2
 8004306:	18bb      	adds	r3, r7, r2
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a99      	ldr	r2, [pc, #612]	; (8004570 <HAL_UART_IRQHandler+0x298>)
 800430c:	4013      	ands	r3, r2
 800430e:	2298      	movs	r2, #152	; 0x98
 8004310:	18bc      	adds	r4, r7, r2
 8004312:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8004314:	18bb      	adds	r3, r7, r2
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d114      	bne.n	8004346 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800431c:	187b      	adds	r3, r7, r1
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2220      	movs	r2, #32
 8004322:	4013      	ands	r3, r2
 8004324:	d00f      	beq.n	8004346 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004326:	183b      	adds	r3, r7, r0
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2220      	movs	r2, #32
 800432c:	4013      	ands	r3, r2
 800432e:	d00a      	beq.n	8004346 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004334:	2b00      	cmp	r3, #0
 8004336:	d100      	bne.n	800433a <HAL_UART_IRQHandler+0x62>
 8004338:	e29e      	b.n	8004878 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	0010      	movs	r0, r2
 8004342:	4798      	blx	r3
      }
      return;
 8004344:	e298      	b.n	8004878 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004346:	2398      	movs	r3, #152	; 0x98
 8004348:	18fb      	adds	r3, r7, r3
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d100      	bne.n	8004352 <HAL_UART_IRQHandler+0x7a>
 8004350:	e114      	b.n	800457c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004352:	239c      	movs	r3, #156	; 0x9c
 8004354:	18fb      	adds	r3, r7, r3
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2201      	movs	r2, #1
 800435a:	4013      	ands	r3, r2
 800435c:	d106      	bne.n	800436c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800435e:	23a0      	movs	r3, #160	; 0xa0
 8004360:	18fb      	adds	r3, r7, r3
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a83      	ldr	r2, [pc, #524]	; (8004574 <HAL_UART_IRQHandler+0x29c>)
 8004366:	4013      	ands	r3, r2
 8004368:	d100      	bne.n	800436c <HAL_UART_IRQHandler+0x94>
 800436a:	e107      	b.n	800457c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800436c:	23a4      	movs	r3, #164	; 0xa4
 800436e:	18fb      	adds	r3, r7, r3
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2201      	movs	r2, #1
 8004374:	4013      	ands	r3, r2
 8004376:	d012      	beq.n	800439e <HAL_UART_IRQHandler+0xc6>
 8004378:	23a0      	movs	r3, #160	; 0xa0
 800437a:	18fb      	adds	r3, r7, r3
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	2380      	movs	r3, #128	; 0x80
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	4013      	ands	r3, r2
 8004384:	d00b      	beq.n	800439e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2201      	movs	r2, #1
 800438c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2284      	movs	r2, #132	; 0x84
 8004392:	589b      	ldr	r3, [r3, r2]
 8004394:	2201      	movs	r2, #1
 8004396:	431a      	orrs	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2184      	movs	r1, #132	; 0x84
 800439c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800439e:	23a4      	movs	r3, #164	; 0xa4
 80043a0:	18fb      	adds	r3, r7, r3
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2202      	movs	r2, #2
 80043a6:	4013      	ands	r3, r2
 80043a8:	d011      	beq.n	80043ce <HAL_UART_IRQHandler+0xf6>
 80043aa:	239c      	movs	r3, #156	; 0x9c
 80043ac:	18fb      	adds	r3, r7, r3
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2201      	movs	r2, #1
 80043b2:	4013      	ands	r3, r2
 80043b4:	d00b      	beq.n	80043ce <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2202      	movs	r2, #2
 80043bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2284      	movs	r2, #132	; 0x84
 80043c2:	589b      	ldr	r3, [r3, r2]
 80043c4:	2204      	movs	r2, #4
 80043c6:	431a      	orrs	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2184      	movs	r1, #132	; 0x84
 80043cc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80043ce:	23a4      	movs	r3, #164	; 0xa4
 80043d0:	18fb      	adds	r3, r7, r3
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2204      	movs	r2, #4
 80043d6:	4013      	ands	r3, r2
 80043d8:	d011      	beq.n	80043fe <HAL_UART_IRQHandler+0x126>
 80043da:	239c      	movs	r3, #156	; 0x9c
 80043dc:	18fb      	adds	r3, r7, r3
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2201      	movs	r2, #1
 80043e2:	4013      	ands	r3, r2
 80043e4:	d00b      	beq.n	80043fe <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2204      	movs	r2, #4
 80043ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2284      	movs	r2, #132	; 0x84
 80043f2:	589b      	ldr	r3, [r3, r2]
 80043f4:	2202      	movs	r2, #2
 80043f6:	431a      	orrs	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2184      	movs	r1, #132	; 0x84
 80043fc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80043fe:	23a4      	movs	r3, #164	; 0xa4
 8004400:	18fb      	adds	r3, r7, r3
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2208      	movs	r2, #8
 8004406:	4013      	ands	r3, r2
 8004408:	d017      	beq.n	800443a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800440a:	23a0      	movs	r3, #160	; 0xa0
 800440c:	18fb      	adds	r3, r7, r3
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2220      	movs	r2, #32
 8004412:	4013      	ands	r3, r2
 8004414:	d105      	bne.n	8004422 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004416:	239c      	movs	r3, #156	; 0x9c
 8004418:	18fb      	adds	r3, r7, r3
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2201      	movs	r2, #1
 800441e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004420:	d00b      	beq.n	800443a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2208      	movs	r2, #8
 8004428:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2284      	movs	r2, #132	; 0x84
 800442e:	589b      	ldr	r3, [r3, r2]
 8004430:	2208      	movs	r2, #8
 8004432:	431a      	orrs	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2184      	movs	r1, #132	; 0x84
 8004438:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800443a:	23a4      	movs	r3, #164	; 0xa4
 800443c:	18fb      	adds	r3, r7, r3
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	2380      	movs	r3, #128	; 0x80
 8004442:	011b      	lsls	r3, r3, #4
 8004444:	4013      	ands	r3, r2
 8004446:	d013      	beq.n	8004470 <HAL_UART_IRQHandler+0x198>
 8004448:	23a0      	movs	r3, #160	; 0xa0
 800444a:	18fb      	adds	r3, r7, r3
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	2380      	movs	r3, #128	; 0x80
 8004450:	04db      	lsls	r3, r3, #19
 8004452:	4013      	ands	r3, r2
 8004454:	d00c      	beq.n	8004470 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2280      	movs	r2, #128	; 0x80
 800445c:	0112      	lsls	r2, r2, #4
 800445e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2284      	movs	r2, #132	; 0x84
 8004464:	589b      	ldr	r3, [r3, r2]
 8004466:	2220      	movs	r2, #32
 8004468:	431a      	orrs	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2184      	movs	r1, #132	; 0x84
 800446e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2284      	movs	r2, #132	; 0x84
 8004474:	589b      	ldr	r3, [r3, r2]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d100      	bne.n	800447c <HAL_UART_IRQHandler+0x1a4>
 800447a:	e1ff      	b.n	800487c <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800447c:	23a4      	movs	r3, #164	; 0xa4
 800447e:	18fb      	adds	r3, r7, r3
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2220      	movs	r2, #32
 8004484:	4013      	ands	r3, r2
 8004486:	d00e      	beq.n	80044a6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004488:	23a0      	movs	r3, #160	; 0xa0
 800448a:	18fb      	adds	r3, r7, r3
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2220      	movs	r2, #32
 8004490:	4013      	ands	r3, r2
 8004492:	d008      	beq.n	80044a6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004498:	2b00      	cmp	r3, #0
 800449a:	d004      	beq.n	80044a6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	0010      	movs	r0, r2
 80044a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2284      	movs	r2, #132	; 0x84
 80044aa:	589b      	ldr	r3, [r3, r2]
 80044ac:	2194      	movs	r1, #148	; 0x94
 80044ae:	187a      	adds	r2, r7, r1
 80044b0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	2240      	movs	r2, #64	; 0x40
 80044ba:	4013      	ands	r3, r2
 80044bc:	2b40      	cmp	r3, #64	; 0x40
 80044be:	d004      	beq.n	80044ca <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80044c0:	187b      	adds	r3, r7, r1
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2228      	movs	r2, #40	; 0x28
 80044c6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80044c8:	d047      	beq.n	800455a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	0018      	movs	r0, r3
 80044ce:	f000 fdc7 	bl	8005060 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	2240      	movs	r2, #64	; 0x40
 80044da:	4013      	ands	r3, r2
 80044dc:	2b40      	cmp	r3, #64	; 0x40
 80044de:	d137      	bne.n	8004550 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044e0:	f3ef 8310 	mrs	r3, PRIMASK
 80044e4:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80044e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044e8:	2090      	movs	r0, #144	; 0x90
 80044ea:	183a      	adds	r2, r7, r0
 80044ec:	6013      	str	r3, [r2, #0]
 80044ee:	2301      	movs	r3, #1
 80044f0:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044f4:	f383 8810 	msr	PRIMASK, r3
}
 80044f8:	46c0      	nop			; (mov r8, r8)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	689a      	ldr	r2, [r3, #8]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2140      	movs	r1, #64	; 0x40
 8004506:	438a      	bics	r2, r1
 8004508:	609a      	str	r2, [r3, #8]
 800450a:	183b      	adds	r3, r7, r0
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004510:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004512:	f383 8810 	msr	PRIMASK, r3
}
 8004516:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800451c:	2b00      	cmp	r3, #0
 800451e:	d012      	beq.n	8004546 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004524:	4a14      	ldr	r2, [pc, #80]	; (8004578 <HAL_UART_IRQHandler+0x2a0>)
 8004526:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800452c:	0018      	movs	r0, r3
 800452e:	f7fd fd6b 	bl	8002008 <HAL_DMA_Abort_IT>
 8004532:	1e03      	subs	r3, r0, #0
 8004534:	d01a      	beq.n	800456c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800453a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004540:	0018      	movs	r0, r3
 8004542:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004544:	e012      	b.n	800456c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	0018      	movs	r0, r3
 800454a:	f7fc fcc1 	bl	8000ed0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800454e:	e00d      	b.n	800456c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	0018      	movs	r0, r3
 8004554:	f7fc fcbc 	bl	8000ed0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004558:	e008      	b.n	800456c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	0018      	movs	r0, r3
 800455e:	f7fc fcb7 	bl	8000ed0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2284      	movs	r2, #132	; 0x84
 8004566:	2100      	movs	r1, #0
 8004568:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800456a:	e187      	b.n	800487c <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800456c:	46c0      	nop			; (mov r8, r8)
    return;
 800456e:	e185      	b.n	800487c <HAL_UART_IRQHandler+0x5a4>
 8004570:	0000080f 	.word	0x0000080f
 8004574:	04000120 	.word	0x04000120
 8004578:	08005129 	.word	0x08005129

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004580:	2b01      	cmp	r3, #1
 8004582:	d000      	beq.n	8004586 <HAL_UART_IRQHandler+0x2ae>
 8004584:	e139      	b.n	80047fa <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004586:	23a4      	movs	r3, #164	; 0xa4
 8004588:	18fb      	adds	r3, r7, r3
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2210      	movs	r2, #16
 800458e:	4013      	ands	r3, r2
 8004590:	d100      	bne.n	8004594 <HAL_UART_IRQHandler+0x2bc>
 8004592:	e132      	b.n	80047fa <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004594:	23a0      	movs	r3, #160	; 0xa0
 8004596:	18fb      	adds	r3, r7, r3
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2210      	movs	r2, #16
 800459c:	4013      	ands	r3, r2
 800459e:	d100      	bne.n	80045a2 <HAL_UART_IRQHandler+0x2ca>
 80045a0:	e12b      	b.n	80047fa <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2210      	movs	r2, #16
 80045a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	2240      	movs	r2, #64	; 0x40
 80045b2:	4013      	ands	r3, r2
 80045b4:	2b40      	cmp	r3, #64	; 0x40
 80045b6:	d000      	beq.n	80045ba <HAL_UART_IRQHandler+0x2e2>
 80045b8:	e09f      	b.n	80046fa <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685a      	ldr	r2, [r3, #4]
 80045c2:	217e      	movs	r1, #126	; 0x7e
 80045c4:	187b      	adds	r3, r7, r1
 80045c6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80045c8:	187b      	adds	r3, r7, r1
 80045ca:	881b      	ldrh	r3, [r3, #0]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d100      	bne.n	80045d2 <HAL_UART_IRQHandler+0x2fa>
 80045d0:	e156      	b.n	8004880 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2258      	movs	r2, #88	; 0x58
 80045d6:	5a9b      	ldrh	r3, [r3, r2]
 80045d8:	187a      	adds	r2, r7, r1
 80045da:	8812      	ldrh	r2, [r2, #0]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d300      	bcc.n	80045e2 <HAL_UART_IRQHandler+0x30a>
 80045e0:	e14e      	b.n	8004880 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	187a      	adds	r2, r7, r1
 80045e6:	215a      	movs	r1, #90	; 0x5a
 80045e8:	8812      	ldrh	r2, [r2, #0]
 80045ea:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	2b20      	cmp	r3, #32
 80045f4:	d06f      	beq.n	80046d6 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045f6:	f3ef 8310 	mrs	r3, PRIMASK
 80045fa:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80045fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045fe:	67bb      	str	r3, [r7, #120]	; 0x78
 8004600:	2301      	movs	r3, #1
 8004602:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004606:	f383 8810 	msr	PRIMASK, r3
}
 800460a:	46c0      	nop			; (mov r8, r8)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	499e      	ldr	r1, [pc, #632]	; (8004890 <HAL_UART_IRQHandler+0x5b8>)
 8004618:	400a      	ands	r2, r1
 800461a:	601a      	str	r2, [r3, #0]
 800461c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800461e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004622:	f383 8810 	msr	PRIMASK, r3
}
 8004626:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004628:	f3ef 8310 	mrs	r3, PRIMASK
 800462c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800462e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004630:	677b      	str	r3, [r7, #116]	; 0x74
 8004632:	2301      	movs	r3, #1
 8004634:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004636:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004638:	f383 8810 	msr	PRIMASK, r3
}
 800463c:	46c0      	nop			; (mov r8, r8)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	689a      	ldr	r2, [r3, #8]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2101      	movs	r1, #1
 800464a:	438a      	bics	r2, r1
 800464c:	609a      	str	r2, [r3, #8]
 800464e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004650:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004652:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004654:	f383 8810 	msr	PRIMASK, r3
}
 8004658:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800465a:	f3ef 8310 	mrs	r3, PRIMASK
 800465e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004660:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004662:	673b      	str	r3, [r7, #112]	; 0x70
 8004664:	2301      	movs	r3, #1
 8004666:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004668:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800466a:	f383 8810 	msr	PRIMASK, r3
}
 800466e:	46c0      	nop			; (mov r8, r8)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	689a      	ldr	r2, [r3, #8]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2140      	movs	r1, #64	; 0x40
 800467c:	438a      	bics	r2, r1
 800467e:	609a      	str	r2, [r3, #8]
 8004680:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004682:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004684:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004686:	f383 8810 	msr	PRIMASK, r3
}
 800468a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2280      	movs	r2, #128	; 0x80
 8004690:	2120      	movs	r1, #32
 8004692:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800469a:	f3ef 8310 	mrs	r3, PRIMASK
 800469e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80046a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046a4:	2301      	movs	r3, #1
 80046a6:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046aa:	f383 8810 	msr	PRIMASK, r3
}
 80046ae:	46c0      	nop			; (mov r8, r8)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2110      	movs	r1, #16
 80046bc:	438a      	bics	r2, r1
 80046be:	601a      	str	r2, [r3, #0]
 80046c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046c2:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046c6:	f383 8810 	msr	PRIMASK, r3
}
 80046ca:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046d0:	0018      	movs	r0, r3
 80046d2:	f7fd fc61 	bl	8001f98 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2202      	movs	r2, #2
 80046da:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2258      	movs	r2, #88	; 0x58
 80046e0:	5a9a      	ldrh	r2, [r3, r2]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	215a      	movs	r1, #90	; 0x5a
 80046e6:	5a5b      	ldrh	r3, [r3, r1]
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	b29a      	uxth	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	0011      	movs	r1, r2
 80046f2:	0018      	movs	r0, r3
 80046f4:	f000 f8d8 	bl	80048a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80046f8:	e0c2      	b.n	8004880 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2258      	movs	r2, #88	; 0x58
 80046fe:	5a99      	ldrh	r1, [r3, r2]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	225a      	movs	r2, #90	; 0x5a
 8004704:	5a9b      	ldrh	r3, [r3, r2]
 8004706:	b29a      	uxth	r2, r3
 8004708:	208e      	movs	r0, #142	; 0x8e
 800470a:	183b      	adds	r3, r7, r0
 800470c:	1a8a      	subs	r2, r1, r2
 800470e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	225a      	movs	r2, #90	; 0x5a
 8004714:	5a9b      	ldrh	r3, [r3, r2]
 8004716:	b29b      	uxth	r3, r3
 8004718:	2b00      	cmp	r3, #0
 800471a:	d100      	bne.n	800471e <HAL_UART_IRQHandler+0x446>
 800471c:	e0b2      	b.n	8004884 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 800471e:	183b      	adds	r3, r7, r0
 8004720:	881b      	ldrh	r3, [r3, #0]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d100      	bne.n	8004728 <HAL_UART_IRQHandler+0x450>
 8004726:	e0ad      	b.n	8004884 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004728:	f3ef 8310 	mrs	r3, PRIMASK
 800472c:	60fb      	str	r3, [r7, #12]
  return(result);
 800472e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004730:	2488      	movs	r4, #136	; 0x88
 8004732:	193a      	adds	r2, r7, r4
 8004734:	6013      	str	r3, [r2, #0]
 8004736:	2301      	movs	r3, #1
 8004738:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	f383 8810 	msr	PRIMASK, r3
}
 8004740:	46c0      	nop			; (mov r8, r8)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4951      	ldr	r1, [pc, #324]	; (8004894 <HAL_UART_IRQHandler+0x5bc>)
 800474e:	400a      	ands	r2, r1
 8004750:	601a      	str	r2, [r3, #0]
 8004752:	193b      	adds	r3, r7, r4
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	f383 8810 	msr	PRIMASK, r3
}
 800475e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004760:	f3ef 8310 	mrs	r3, PRIMASK
 8004764:	61bb      	str	r3, [r7, #24]
  return(result);
 8004766:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004768:	2484      	movs	r4, #132	; 0x84
 800476a:	193a      	adds	r2, r7, r4
 800476c:	6013      	str	r3, [r2, #0]
 800476e:	2301      	movs	r3, #1
 8004770:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	f383 8810 	msr	PRIMASK, r3
}
 8004778:	46c0      	nop			; (mov r8, r8)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	689a      	ldr	r2, [r3, #8]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2101      	movs	r1, #1
 8004786:	438a      	bics	r2, r1
 8004788:	609a      	str	r2, [r3, #8]
 800478a:	193b      	adds	r3, r7, r4
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004790:	6a3b      	ldr	r3, [r7, #32]
 8004792:	f383 8810 	msr	PRIMASK, r3
}
 8004796:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2280      	movs	r2, #128	; 0x80
 800479c:	2120      	movs	r1, #32
 800479e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047ac:	f3ef 8310 	mrs	r3, PRIMASK
 80047b0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80047b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047b4:	2480      	movs	r4, #128	; 0x80
 80047b6:	193a      	adds	r2, r7, r4
 80047b8:	6013      	str	r3, [r2, #0]
 80047ba:	2301      	movs	r3, #1
 80047bc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c0:	f383 8810 	msr	PRIMASK, r3
}
 80047c4:	46c0      	nop			; (mov r8, r8)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2110      	movs	r1, #16
 80047d2:	438a      	bics	r2, r1
 80047d4:	601a      	str	r2, [r3, #0]
 80047d6:	193b      	adds	r3, r7, r4
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047de:	f383 8810 	msr	PRIMASK, r3
}
 80047e2:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2202      	movs	r2, #2
 80047e8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80047ea:	183b      	adds	r3, r7, r0
 80047ec:	881a      	ldrh	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	0011      	movs	r1, r2
 80047f2:	0018      	movs	r0, r3
 80047f4:	f000 f858 	bl	80048a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80047f8:	e044      	b.n	8004884 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80047fa:	23a4      	movs	r3, #164	; 0xa4
 80047fc:	18fb      	adds	r3, r7, r3
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	2380      	movs	r3, #128	; 0x80
 8004802:	035b      	lsls	r3, r3, #13
 8004804:	4013      	ands	r3, r2
 8004806:	d010      	beq.n	800482a <HAL_UART_IRQHandler+0x552>
 8004808:	239c      	movs	r3, #156	; 0x9c
 800480a:	18fb      	adds	r3, r7, r3
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	2380      	movs	r3, #128	; 0x80
 8004810:	03db      	lsls	r3, r3, #15
 8004812:	4013      	ands	r3, r2
 8004814:	d009      	beq.n	800482a <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2280      	movs	r2, #128	; 0x80
 800481c:	0352      	lsls	r2, r2, #13
 800481e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	0018      	movs	r0, r3
 8004824:	f000 fe7a 	bl	800551c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004828:	e02f      	b.n	800488a <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800482a:	23a4      	movs	r3, #164	; 0xa4
 800482c:	18fb      	adds	r3, r7, r3
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2280      	movs	r2, #128	; 0x80
 8004832:	4013      	ands	r3, r2
 8004834:	d00f      	beq.n	8004856 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004836:	23a0      	movs	r3, #160	; 0xa0
 8004838:	18fb      	adds	r3, r7, r3
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2280      	movs	r2, #128	; 0x80
 800483e:	4013      	ands	r3, r2
 8004840:	d009      	beq.n	8004856 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004846:	2b00      	cmp	r3, #0
 8004848:	d01e      	beq.n	8004888 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	0010      	movs	r0, r2
 8004852:	4798      	blx	r3
    }
    return;
 8004854:	e018      	b.n	8004888 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004856:	23a4      	movs	r3, #164	; 0xa4
 8004858:	18fb      	adds	r3, r7, r3
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2240      	movs	r2, #64	; 0x40
 800485e:	4013      	ands	r3, r2
 8004860:	d013      	beq.n	800488a <HAL_UART_IRQHandler+0x5b2>
 8004862:	23a0      	movs	r3, #160	; 0xa0
 8004864:	18fb      	adds	r3, r7, r3
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2240      	movs	r2, #64	; 0x40
 800486a:	4013      	ands	r3, r2
 800486c:	d00d      	beq.n	800488a <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	0018      	movs	r0, r3
 8004872:	f000 fc70 	bl	8005156 <UART_EndTransmit_IT>
    return;
 8004876:	e008      	b.n	800488a <HAL_UART_IRQHandler+0x5b2>
      return;
 8004878:	46c0      	nop			; (mov r8, r8)
 800487a:	e006      	b.n	800488a <HAL_UART_IRQHandler+0x5b2>
    return;
 800487c:	46c0      	nop			; (mov r8, r8)
 800487e:	e004      	b.n	800488a <HAL_UART_IRQHandler+0x5b2>
      return;
 8004880:	46c0      	nop			; (mov r8, r8)
 8004882:	e002      	b.n	800488a <HAL_UART_IRQHandler+0x5b2>
      return;
 8004884:	46c0      	nop			; (mov r8, r8)
 8004886:	e000      	b.n	800488a <HAL_UART_IRQHandler+0x5b2>
    return;
 8004888:	46c0      	nop			; (mov r8, r8)
  }

}
 800488a:	46bd      	mov	sp, r7
 800488c:	b02b      	add	sp, #172	; 0xac
 800488e:	bd90      	pop	{r4, r7, pc}
 8004890:	fffffeff 	.word	0xfffffeff
 8004894:	fffffedf 	.word	0xfffffedf

08004898 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80048a0:	46c0      	nop			; (mov r8, r8)
 80048a2:	46bd      	mov	sp, r7
 80048a4:	b002      	add	sp, #8
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	000a      	movs	r2, r1
 80048b2:	1cbb      	adds	r3, r7, #2
 80048b4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80048b6:	46c0      	nop			; (mov r8, r8)
 80048b8:	46bd      	mov	sp, r7
 80048ba:	b002      	add	sp, #8
 80048bc:	bd80      	pop	{r7, pc}
	...

080048c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b088      	sub	sp, #32
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048c8:	231e      	movs	r3, #30
 80048ca:	18fb      	adds	r3, r7, r3
 80048cc:	2200      	movs	r2, #0
 80048ce:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689a      	ldr	r2, [r3, #8]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	431a      	orrs	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	431a      	orrs	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	69db      	ldr	r3, [r3, #28]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a8d      	ldr	r2, [pc, #564]	; (8004b24 <UART_SetConfig+0x264>)
 80048f0:	4013      	ands	r3, r2
 80048f2:	0019      	movs	r1, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	697a      	ldr	r2, [r7, #20]
 80048fa:	430a      	orrs	r2, r1
 80048fc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	4a88      	ldr	r2, [pc, #544]	; (8004b28 <UART_SetConfig+0x268>)
 8004906:	4013      	ands	r3, r2
 8004908:	0019      	movs	r1, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	68da      	ldr	r2, [r3, #12]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	430a      	orrs	r2, r1
 8004914:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a1b      	ldr	r3, [r3, #32]
 8004920:	697a      	ldr	r2, [r7, #20]
 8004922:	4313      	orrs	r3, r2
 8004924:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	4a7f      	ldr	r2, [pc, #508]	; (8004b2c <UART_SetConfig+0x26c>)
 800492e:	4013      	ands	r3, r2
 8004930:	0019      	movs	r1, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	697a      	ldr	r2, [r7, #20]
 8004938:	430a      	orrs	r2, r1
 800493a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a7b      	ldr	r2, [pc, #492]	; (8004b30 <UART_SetConfig+0x270>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d127      	bne.n	8004996 <UART_SetConfig+0xd6>
 8004946:	4b7b      	ldr	r3, [pc, #492]	; (8004b34 <UART_SetConfig+0x274>)
 8004948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494a:	2203      	movs	r2, #3
 800494c:	4013      	ands	r3, r2
 800494e:	2b03      	cmp	r3, #3
 8004950:	d00d      	beq.n	800496e <UART_SetConfig+0xae>
 8004952:	d81b      	bhi.n	800498c <UART_SetConfig+0xcc>
 8004954:	2b02      	cmp	r3, #2
 8004956:	d014      	beq.n	8004982 <UART_SetConfig+0xc2>
 8004958:	d818      	bhi.n	800498c <UART_SetConfig+0xcc>
 800495a:	2b00      	cmp	r3, #0
 800495c:	d002      	beq.n	8004964 <UART_SetConfig+0xa4>
 800495e:	2b01      	cmp	r3, #1
 8004960:	d00a      	beq.n	8004978 <UART_SetConfig+0xb8>
 8004962:	e013      	b.n	800498c <UART_SetConfig+0xcc>
 8004964:	231f      	movs	r3, #31
 8004966:	18fb      	adds	r3, r7, r3
 8004968:	2200      	movs	r2, #0
 800496a:	701a      	strb	r2, [r3, #0]
 800496c:	e021      	b.n	80049b2 <UART_SetConfig+0xf2>
 800496e:	231f      	movs	r3, #31
 8004970:	18fb      	adds	r3, r7, r3
 8004972:	2202      	movs	r2, #2
 8004974:	701a      	strb	r2, [r3, #0]
 8004976:	e01c      	b.n	80049b2 <UART_SetConfig+0xf2>
 8004978:	231f      	movs	r3, #31
 800497a:	18fb      	adds	r3, r7, r3
 800497c:	2204      	movs	r2, #4
 800497e:	701a      	strb	r2, [r3, #0]
 8004980:	e017      	b.n	80049b2 <UART_SetConfig+0xf2>
 8004982:	231f      	movs	r3, #31
 8004984:	18fb      	adds	r3, r7, r3
 8004986:	2208      	movs	r2, #8
 8004988:	701a      	strb	r2, [r3, #0]
 800498a:	e012      	b.n	80049b2 <UART_SetConfig+0xf2>
 800498c:	231f      	movs	r3, #31
 800498e:	18fb      	adds	r3, r7, r3
 8004990:	2210      	movs	r2, #16
 8004992:	701a      	strb	r2, [r3, #0]
 8004994:	e00d      	b.n	80049b2 <UART_SetConfig+0xf2>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a67      	ldr	r2, [pc, #412]	; (8004b38 <UART_SetConfig+0x278>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d104      	bne.n	80049aa <UART_SetConfig+0xea>
 80049a0:	231f      	movs	r3, #31
 80049a2:	18fb      	adds	r3, r7, r3
 80049a4:	2200      	movs	r2, #0
 80049a6:	701a      	strb	r2, [r3, #0]
 80049a8:	e003      	b.n	80049b2 <UART_SetConfig+0xf2>
 80049aa:	231f      	movs	r3, #31
 80049ac:	18fb      	adds	r3, r7, r3
 80049ae:	2210      	movs	r2, #16
 80049b0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	69da      	ldr	r2, [r3, #28]
 80049b6:	2380      	movs	r3, #128	; 0x80
 80049b8:	021b      	lsls	r3, r3, #8
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d15c      	bne.n	8004a78 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 80049be:	231f      	movs	r3, #31
 80049c0:	18fb      	adds	r3, r7, r3
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	2b08      	cmp	r3, #8
 80049c6:	d015      	beq.n	80049f4 <UART_SetConfig+0x134>
 80049c8:	dc18      	bgt.n	80049fc <UART_SetConfig+0x13c>
 80049ca:	2b04      	cmp	r3, #4
 80049cc:	d00d      	beq.n	80049ea <UART_SetConfig+0x12a>
 80049ce:	dc15      	bgt.n	80049fc <UART_SetConfig+0x13c>
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d002      	beq.n	80049da <UART_SetConfig+0x11a>
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d005      	beq.n	80049e4 <UART_SetConfig+0x124>
 80049d8:	e010      	b.n	80049fc <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049da:	f7fe fa89 	bl	8002ef0 <HAL_RCC_GetPCLK1Freq>
 80049de:	0003      	movs	r3, r0
 80049e0:	61bb      	str	r3, [r7, #24]
        break;
 80049e2:	e012      	b.n	8004a0a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049e4:	4b55      	ldr	r3, [pc, #340]	; (8004b3c <UART_SetConfig+0x27c>)
 80049e6:	61bb      	str	r3, [r7, #24]
        break;
 80049e8:	e00f      	b.n	8004a0a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049ea:	f7fe fa05 	bl	8002df8 <HAL_RCC_GetSysClockFreq>
 80049ee:	0003      	movs	r3, r0
 80049f0:	61bb      	str	r3, [r7, #24]
        break;
 80049f2:	e00a      	b.n	8004a0a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049f4:	2380      	movs	r3, #128	; 0x80
 80049f6:	021b      	lsls	r3, r3, #8
 80049f8:	61bb      	str	r3, [r7, #24]
        break;
 80049fa:	e006      	b.n	8004a0a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80049fc:	2300      	movs	r3, #0
 80049fe:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a00:	231e      	movs	r3, #30
 8004a02:	18fb      	adds	r3, r7, r3
 8004a04:	2201      	movs	r2, #1
 8004a06:	701a      	strb	r2, [r3, #0]
        break;
 8004a08:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d100      	bne.n	8004a12 <UART_SetConfig+0x152>
 8004a10:	e07a      	b.n	8004b08 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	005a      	lsls	r2, r3, #1
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	085b      	lsrs	r3, r3, #1
 8004a1c:	18d2      	adds	r2, r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	0019      	movs	r1, r3
 8004a24:	0010      	movs	r0, r2
 8004a26:	f7fb fb6f 	bl	8000108 <__udivsi3>
 8004a2a:	0003      	movs	r3, r0
 8004a2c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	2b0f      	cmp	r3, #15
 8004a32:	d91c      	bls.n	8004a6e <UART_SetConfig+0x1ae>
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	2380      	movs	r3, #128	; 0x80
 8004a38:	025b      	lsls	r3, r3, #9
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d217      	bcs.n	8004a6e <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	b29a      	uxth	r2, r3
 8004a42:	200e      	movs	r0, #14
 8004a44:	183b      	adds	r3, r7, r0
 8004a46:	210f      	movs	r1, #15
 8004a48:	438a      	bics	r2, r1
 8004a4a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	085b      	lsrs	r3, r3, #1
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	2207      	movs	r2, #7
 8004a54:	4013      	ands	r3, r2
 8004a56:	b299      	uxth	r1, r3
 8004a58:	183b      	adds	r3, r7, r0
 8004a5a:	183a      	adds	r2, r7, r0
 8004a5c:	8812      	ldrh	r2, [r2, #0]
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	183a      	adds	r2, r7, r0
 8004a68:	8812      	ldrh	r2, [r2, #0]
 8004a6a:	60da      	str	r2, [r3, #12]
 8004a6c:	e04c      	b.n	8004b08 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004a6e:	231e      	movs	r3, #30
 8004a70:	18fb      	adds	r3, r7, r3
 8004a72:	2201      	movs	r2, #1
 8004a74:	701a      	strb	r2, [r3, #0]
 8004a76:	e047      	b.n	8004b08 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a78:	231f      	movs	r3, #31
 8004a7a:	18fb      	adds	r3, r7, r3
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	2b08      	cmp	r3, #8
 8004a80:	d015      	beq.n	8004aae <UART_SetConfig+0x1ee>
 8004a82:	dc18      	bgt.n	8004ab6 <UART_SetConfig+0x1f6>
 8004a84:	2b04      	cmp	r3, #4
 8004a86:	d00d      	beq.n	8004aa4 <UART_SetConfig+0x1e4>
 8004a88:	dc15      	bgt.n	8004ab6 <UART_SetConfig+0x1f6>
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d002      	beq.n	8004a94 <UART_SetConfig+0x1d4>
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d005      	beq.n	8004a9e <UART_SetConfig+0x1de>
 8004a92:	e010      	b.n	8004ab6 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a94:	f7fe fa2c 	bl	8002ef0 <HAL_RCC_GetPCLK1Freq>
 8004a98:	0003      	movs	r3, r0
 8004a9a:	61bb      	str	r3, [r7, #24]
        break;
 8004a9c:	e012      	b.n	8004ac4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a9e:	4b27      	ldr	r3, [pc, #156]	; (8004b3c <UART_SetConfig+0x27c>)
 8004aa0:	61bb      	str	r3, [r7, #24]
        break;
 8004aa2:	e00f      	b.n	8004ac4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004aa4:	f7fe f9a8 	bl	8002df8 <HAL_RCC_GetSysClockFreq>
 8004aa8:	0003      	movs	r3, r0
 8004aaa:	61bb      	str	r3, [r7, #24]
        break;
 8004aac:	e00a      	b.n	8004ac4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004aae:	2380      	movs	r3, #128	; 0x80
 8004ab0:	021b      	lsls	r3, r3, #8
 8004ab2:	61bb      	str	r3, [r7, #24]
        break;
 8004ab4:	e006      	b.n	8004ac4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004aba:	231e      	movs	r3, #30
 8004abc:	18fb      	adds	r3, r7, r3
 8004abe:	2201      	movs	r2, #1
 8004ac0:	701a      	strb	r2, [r3, #0]
        break;
 8004ac2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d01e      	beq.n	8004b08 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	085a      	lsrs	r2, r3, #1
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	18d2      	adds	r2, r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	0019      	movs	r1, r3
 8004ada:	0010      	movs	r0, r2
 8004adc:	f7fb fb14 	bl	8000108 <__udivsi3>
 8004ae0:	0003      	movs	r3, r0
 8004ae2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	2b0f      	cmp	r3, #15
 8004ae8:	d90a      	bls.n	8004b00 <UART_SetConfig+0x240>
 8004aea:	693a      	ldr	r2, [r7, #16]
 8004aec:	2380      	movs	r3, #128	; 0x80
 8004aee:	025b      	lsls	r3, r3, #9
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d205      	bcs.n	8004b00 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	b29a      	uxth	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	60da      	str	r2, [r3, #12]
 8004afe:	e003      	b.n	8004b08 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004b00:	231e      	movs	r3, #30
 8004b02:	18fb      	adds	r3, r7, r3
 8004b04:	2201      	movs	r2, #1
 8004b06:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004b14:	231e      	movs	r3, #30
 8004b16:	18fb      	adds	r3, r7, r3
 8004b18:	781b      	ldrb	r3, [r3, #0]
}
 8004b1a:	0018      	movs	r0, r3
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	b008      	add	sp, #32
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	46c0      	nop			; (mov r8, r8)
 8004b24:	efff69f3 	.word	0xefff69f3
 8004b28:	ffffcfff 	.word	0xffffcfff
 8004b2c:	fffff4ff 	.word	0xfffff4ff
 8004b30:	40013800 	.word	0x40013800
 8004b34:	40021000 	.word	0x40021000
 8004b38:	40004400 	.word	0x40004400
 8004b3c:	007a1200 	.word	0x007a1200

08004b40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	4013      	ands	r3, r2
 8004b50:	d00b      	beq.n	8004b6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	4a4a      	ldr	r2, [pc, #296]	; (8004c84 <UART_AdvFeatureConfig+0x144>)
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	0019      	movs	r1, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	430a      	orrs	r2, r1
 8004b68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6e:	2202      	movs	r2, #2
 8004b70:	4013      	ands	r3, r2
 8004b72:	d00b      	beq.n	8004b8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	4a43      	ldr	r2, [pc, #268]	; (8004c88 <UART_AdvFeatureConfig+0x148>)
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	0019      	movs	r1, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	430a      	orrs	r2, r1
 8004b8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b90:	2204      	movs	r2, #4
 8004b92:	4013      	ands	r3, r2
 8004b94:	d00b      	beq.n	8004bae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	4a3b      	ldr	r2, [pc, #236]	; (8004c8c <UART_AdvFeatureConfig+0x14c>)
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	0019      	movs	r1, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	430a      	orrs	r2, r1
 8004bac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb2:	2208      	movs	r2, #8
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	d00b      	beq.n	8004bd0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	4a34      	ldr	r2, [pc, #208]	; (8004c90 <UART_AdvFeatureConfig+0x150>)
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	0019      	movs	r1, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd4:	2210      	movs	r2, #16
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	d00b      	beq.n	8004bf2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	4a2c      	ldr	r2, [pc, #176]	; (8004c94 <UART_AdvFeatureConfig+0x154>)
 8004be2:	4013      	ands	r3, r2
 8004be4:	0019      	movs	r1, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf6:	2220      	movs	r2, #32
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	d00b      	beq.n	8004c14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	4a25      	ldr	r2, [pc, #148]	; (8004c98 <UART_AdvFeatureConfig+0x158>)
 8004c04:	4013      	ands	r3, r2
 8004c06:	0019      	movs	r1, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	430a      	orrs	r2, r1
 8004c12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c18:	2240      	movs	r2, #64	; 0x40
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	d01d      	beq.n	8004c5a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	4a1d      	ldr	r2, [pc, #116]	; (8004c9c <UART_AdvFeatureConfig+0x15c>)
 8004c26:	4013      	ands	r3, r2
 8004c28:	0019      	movs	r1, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	430a      	orrs	r2, r1
 8004c34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c3a:	2380      	movs	r3, #128	; 0x80
 8004c3c:	035b      	lsls	r3, r3, #13
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d10b      	bne.n	8004c5a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	4a15      	ldr	r2, [pc, #84]	; (8004ca0 <UART_AdvFeatureConfig+0x160>)
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	0019      	movs	r1, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	430a      	orrs	r2, r1
 8004c58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5e:	2280      	movs	r2, #128	; 0x80
 8004c60:	4013      	ands	r3, r2
 8004c62:	d00b      	beq.n	8004c7c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	4a0e      	ldr	r2, [pc, #56]	; (8004ca4 <UART_AdvFeatureConfig+0x164>)
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	0019      	movs	r1, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	430a      	orrs	r2, r1
 8004c7a:	605a      	str	r2, [r3, #4]
  }
}
 8004c7c:	46c0      	nop			; (mov r8, r8)
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	b002      	add	sp, #8
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	fffdffff 	.word	0xfffdffff
 8004c88:	fffeffff 	.word	0xfffeffff
 8004c8c:	fffbffff 	.word	0xfffbffff
 8004c90:	ffff7fff 	.word	0xffff7fff
 8004c94:	ffffefff 	.word	0xffffefff
 8004c98:	ffffdfff 	.word	0xffffdfff
 8004c9c:	ffefffff 	.word	0xffefffff
 8004ca0:	ff9fffff 	.word	0xff9fffff
 8004ca4:	fff7ffff 	.word	0xfff7ffff

08004ca8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b092      	sub	sp, #72	; 0x48
 8004cac:	af02      	add	r7, sp, #8
 8004cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2284      	movs	r2, #132	; 0x84
 8004cb4:	2100      	movs	r1, #0
 8004cb6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004cb8:	f7fc fbf6 	bl	80014a8 <HAL_GetTick>
 8004cbc:	0003      	movs	r3, r0
 8004cbe:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2208      	movs	r2, #8
 8004cc8:	4013      	ands	r3, r2
 8004cca:	2b08      	cmp	r3, #8
 8004ccc:	d12c      	bne.n	8004d28 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cd0:	2280      	movs	r2, #128	; 0x80
 8004cd2:	0391      	lsls	r1, r2, #14
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	4a46      	ldr	r2, [pc, #280]	; (8004df0 <UART_CheckIdleState+0x148>)
 8004cd8:	9200      	str	r2, [sp, #0]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f000 f88c 	bl	8004df8 <UART_WaitOnFlagUntilTimeout>
 8004ce0:	1e03      	subs	r3, r0, #0
 8004ce2:	d021      	beq.n	8004d28 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ce4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ce8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004cec:	63bb      	str	r3, [r7, #56]	; 0x38
 8004cee:	2301      	movs	r3, #1
 8004cf0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf4:	f383 8810 	msr	PRIMASK, r3
}
 8004cf8:	46c0      	nop			; (mov r8, r8)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2180      	movs	r1, #128	; 0x80
 8004d06:	438a      	bics	r2, r1
 8004d08:	601a      	str	r2, [r3, #0]
 8004d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d10:	f383 8810 	msr	PRIMASK, r3
}
 8004d14:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2220      	movs	r2, #32
 8004d1a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2278      	movs	r2, #120	; 0x78
 8004d20:	2100      	movs	r1, #0
 8004d22:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e05f      	b.n	8004de8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2204      	movs	r2, #4
 8004d30:	4013      	ands	r3, r2
 8004d32:	2b04      	cmp	r3, #4
 8004d34:	d146      	bne.n	8004dc4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d38:	2280      	movs	r2, #128	; 0x80
 8004d3a:	03d1      	lsls	r1, r2, #15
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	4a2c      	ldr	r2, [pc, #176]	; (8004df0 <UART_CheckIdleState+0x148>)
 8004d40:	9200      	str	r2, [sp, #0]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f000 f858 	bl	8004df8 <UART_WaitOnFlagUntilTimeout>
 8004d48:	1e03      	subs	r3, r0, #0
 8004d4a:	d03b      	beq.n	8004dc4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d4c:	f3ef 8310 	mrs	r3, PRIMASK
 8004d50:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d52:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d54:	637b      	str	r3, [r7, #52]	; 0x34
 8004d56:	2301      	movs	r3, #1
 8004d58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	f383 8810 	msr	PRIMASK, r3
}
 8004d60:	46c0      	nop			; (mov r8, r8)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4921      	ldr	r1, [pc, #132]	; (8004df4 <UART_CheckIdleState+0x14c>)
 8004d6e:	400a      	ands	r2, r1
 8004d70:	601a      	str	r2, [r3, #0]
 8004d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d74:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	f383 8810 	msr	PRIMASK, r3
}
 8004d7c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d7e:	f3ef 8310 	mrs	r3, PRIMASK
 8004d82:	61bb      	str	r3, [r7, #24]
  return(result);
 8004d84:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d86:	633b      	str	r3, [r7, #48]	; 0x30
 8004d88:	2301      	movs	r3, #1
 8004d8a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	f383 8810 	msr	PRIMASK, r3
}
 8004d92:	46c0      	nop			; (mov r8, r8)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	689a      	ldr	r2, [r3, #8]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2101      	movs	r1, #1
 8004da0:	438a      	bics	r2, r1
 8004da2:	609a      	str	r2, [r3, #8]
 8004da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004da8:	6a3b      	ldr	r3, [r7, #32]
 8004daa:	f383 8810 	msr	PRIMASK, r3
}
 8004dae:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2280      	movs	r2, #128	; 0x80
 8004db4:	2120      	movs	r1, #32
 8004db6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2278      	movs	r2, #120	; 0x78
 8004dbc:	2100      	movs	r1, #0
 8004dbe:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e011      	b.n	8004de8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2220      	movs	r2, #32
 8004dc8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2280      	movs	r2, #128	; 0x80
 8004dce:	2120      	movs	r1, #32
 8004dd0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2278      	movs	r2, #120	; 0x78
 8004de2:	2100      	movs	r1, #0
 8004de4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	0018      	movs	r0, r3
 8004dea:	46bd      	mov	sp, r7
 8004dec:	b010      	add	sp, #64	; 0x40
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	01ffffff 	.word	0x01ffffff
 8004df4:	fffffedf 	.word	0xfffffedf

08004df8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	603b      	str	r3, [r7, #0]
 8004e04:	1dfb      	adds	r3, r7, #7
 8004e06:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e08:	e04b      	b.n	8004ea2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	d048      	beq.n	8004ea2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e10:	f7fc fb4a 	bl	80014a8 <HAL_GetTick>
 8004e14:	0002      	movs	r2, r0
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	69ba      	ldr	r2, [r7, #24]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d302      	bcc.n	8004e26 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d101      	bne.n	8004e2a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e04b      	b.n	8004ec2 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2204      	movs	r2, #4
 8004e32:	4013      	ands	r3, r2
 8004e34:	d035      	beq.n	8004ea2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	69db      	ldr	r3, [r3, #28]
 8004e3c:	2208      	movs	r2, #8
 8004e3e:	4013      	ands	r3, r2
 8004e40:	2b08      	cmp	r3, #8
 8004e42:	d111      	bne.n	8004e68 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2208      	movs	r2, #8
 8004e4a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	0018      	movs	r0, r3
 8004e50:	f000 f906 	bl	8005060 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2284      	movs	r2, #132	; 0x84
 8004e58:	2108      	movs	r1, #8
 8004e5a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2278      	movs	r2, #120	; 0x78
 8004e60:	2100      	movs	r1, #0
 8004e62:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e02c      	b.n	8004ec2 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	69da      	ldr	r2, [r3, #28]
 8004e6e:	2380      	movs	r3, #128	; 0x80
 8004e70:	011b      	lsls	r3, r3, #4
 8004e72:	401a      	ands	r2, r3
 8004e74:	2380      	movs	r3, #128	; 0x80
 8004e76:	011b      	lsls	r3, r3, #4
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d112      	bne.n	8004ea2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2280      	movs	r2, #128	; 0x80
 8004e82:	0112      	lsls	r2, r2, #4
 8004e84:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	0018      	movs	r0, r3
 8004e8a:	f000 f8e9 	bl	8005060 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2284      	movs	r2, #132	; 0x84
 8004e92:	2120      	movs	r1, #32
 8004e94:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2278      	movs	r2, #120	; 0x78
 8004e9a:	2100      	movs	r1, #0
 8004e9c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e00f      	b.n	8004ec2 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	69db      	ldr	r3, [r3, #28]
 8004ea8:	68ba      	ldr	r2, [r7, #8]
 8004eaa:	4013      	ands	r3, r2
 8004eac:	68ba      	ldr	r2, [r7, #8]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	425a      	negs	r2, r3
 8004eb2:	4153      	adcs	r3, r2
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	001a      	movs	r2, r3
 8004eb8:	1dfb      	adds	r3, r7, #7
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d0a4      	beq.n	8004e0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	0018      	movs	r0, r3
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	b004      	add	sp, #16
 8004ec8:	bd80      	pop	{r7, pc}
	...

08004ecc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b090      	sub	sp, #64	; 0x40
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	1dbb      	adds	r3, r7, #6
 8004ed8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	68ba      	ldr	r2, [r7, #8]
 8004ede:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	1dba      	adds	r2, r7, #6
 8004ee4:	2158      	movs	r1, #88	; 0x58
 8004ee6:	8812      	ldrh	r2, [r2, #0]
 8004ee8:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	1dba      	adds	r2, r7, #6
 8004eee:	215a      	movs	r1, #90	; 0x5a
 8004ef0:	8812      	ldrh	r2, [r2, #0]
 8004ef2:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	689a      	ldr	r2, [r3, #8]
 8004efe:	2380      	movs	r3, #128	; 0x80
 8004f00:	015b      	lsls	r3, r3, #5
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d10d      	bne.n	8004f22 <UART_Start_Receive_IT+0x56>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d104      	bne.n	8004f18 <UART_Start_Receive_IT+0x4c>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	225c      	movs	r2, #92	; 0x5c
 8004f12:	4950      	ldr	r1, [pc, #320]	; (8005054 <UART_Start_Receive_IT+0x188>)
 8004f14:	5299      	strh	r1, [r3, r2]
 8004f16:	e02e      	b.n	8004f76 <UART_Start_Receive_IT+0xaa>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	225c      	movs	r2, #92	; 0x5c
 8004f1c:	21ff      	movs	r1, #255	; 0xff
 8004f1e:	5299      	strh	r1, [r3, r2]
 8004f20:	e029      	b.n	8004f76 <UART_Start_Receive_IT+0xaa>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d10d      	bne.n	8004f46 <UART_Start_Receive_IT+0x7a>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d104      	bne.n	8004f3c <UART_Start_Receive_IT+0x70>
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	225c      	movs	r2, #92	; 0x5c
 8004f36:	21ff      	movs	r1, #255	; 0xff
 8004f38:	5299      	strh	r1, [r3, r2]
 8004f3a:	e01c      	b.n	8004f76 <UART_Start_Receive_IT+0xaa>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	225c      	movs	r2, #92	; 0x5c
 8004f40:	217f      	movs	r1, #127	; 0x7f
 8004f42:	5299      	strh	r1, [r3, r2]
 8004f44:	e017      	b.n	8004f76 <UART_Start_Receive_IT+0xaa>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	689a      	ldr	r2, [r3, #8]
 8004f4a:	2380      	movs	r3, #128	; 0x80
 8004f4c:	055b      	lsls	r3, r3, #21
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d10d      	bne.n	8004f6e <UART_Start_Receive_IT+0xa2>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d104      	bne.n	8004f64 <UART_Start_Receive_IT+0x98>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	225c      	movs	r2, #92	; 0x5c
 8004f5e:	217f      	movs	r1, #127	; 0x7f
 8004f60:	5299      	strh	r1, [r3, r2]
 8004f62:	e008      	b.n	8004f76 <UART_Start_Receive_IT+0xaa>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	225c      	movs	r2, #92	; 0x5c
 8004f68:	213f      	movs	r1, #63	; 0x3f
 8004f6a:	5299      	strh	r1, [r3, r2]
 8004f6c:	e003      	b.n	8004f76 <UART_Start_Receive_IT+0xaa>
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	225c      	movs	r2, #92	; 0x5c
 8004f72:	2100      	movs	r1, #0
 8004f74:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2284      	movs	r2, #132	; 0x84
 8004f7a:	2100      	movs	r1, #0
 8004f7c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2280      	movs	r2, #128	; 0x80
 8004f82:	2122      	movs	r1, #34	; 0x22
 8004f84:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f86:	f3ef 8310 	mrs	r3, PRIMASK
 8004f8a:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f90:	2301      	movs	r3, #1
 8004f92:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f96:	f383 8810 	msr	PRIMASK, r3
}
 8004f9a:	46c0      	nop			; (mov r8, r8)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	689a      	ldr	r2, [r3, #8]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2101      	movs	r1, #1
 8004fa8:	430a      	orrs	r2, r1
 8004faa:	609a      	str	r2, [r3, #8]
 8004fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fae:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb2:	f383 8810 	msr	PRIMASK, r3
}
 8004fb6:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	689a      	ldr	r2, [r3, #8]
 8004fbc:	2380      	movs	r3, #128	; 0x80
 8004fbe:	015b      	lsls	r3, r3, #5
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d107      	bne.n	8004fd4 <UART_Start_Receive_IT+0x108>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d103      	bne.n	8004fd4 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	4a22      	ldr	r2, [pc, #136]	; (8005058 <UART_Start_Receive_IT+0x18c>)
 8004fd0:	669a      	str	r2, [r3, #104]	; 0x68
 8004fd2:	e002      	b.n	8004fda <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	4a21      	ldr	r2, [pc, #132]	; (800505c <UART_Start_Receive_IT+0x190>)
 8004fd8:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d019      	beq.n	8005016 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fe2:	f3ef 8310 	mrs	r3, PRIMASK
 8004fe6:	61fb      	str	r3, [r7, #28]
  return(result);
 8004fe8:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004fea:	637b      	str	r3, [r7, #52]	; 0x34
 8004fec:	2301      	movs	r3, #1
 8004fee:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ff0:	6a3b      	ldr	r3, [r7, #32]
 8004ff2:	f383 8810 	msr	PRIMASK, r3
}
 8004ff6:	46c0      	nop			; (mov r8, r8)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2190      	movs	r1, #144	; 0x90
 8005004:	0049      	lsls	r1, r1, #1
 8005006:	430a      	orrs	r2, r1
 8005008:	601a      	str	r2, [r3, #0]
 800500a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800500c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800500e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005010:	f383 8810 	msr	PRIMASK, r3
}
 8005014:	e018      	b.n	8005048 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005016:	f3ef 8310 	mrs	r3, PRIMASK
 800501a:	613b      	str	r3, [r7, #16]
  return(result);
 800501c:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800501e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005020:	2301      	movs	r3, #1
 8005022:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	f383 8810 	msr	PRIMASK, r3
}
 800502a:	46c0      	nop			; (mov r8, r8)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2120      	movs	r1, #32
 8005038:	430a      	orrs	r2, r1
 800503a:	601a      	str	r2, [r3, #0]
 800503c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800503e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	f383 8810 	msr	PRIMASK, r3
}
 8005046:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	0018      	movs	r0, r3
 800504c:	46bd      	mov	sp, r7
 800504e:	b010      	add	sp, #64	; 0x40
 8005050:	bd80      	pop	{r7, pc}
 8005052:	46c0      	nop			; (mov r8, r8)
 8005054:	000001ff 	.word	0x000001ff
 8005058:	08005365 	.word	0x08005365
 800505c:	080051ad 	.word	0x080051ad

08005060 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b08e      	sub	sp, #56	; 0x38
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005068:	f3ef 8310 	mrs	r3, PRIMASK
 800506c:	617b      	str	r3, [r7, #20]
  return(result);
 800506e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005070:	637b      	str	r3, [r7, #52]	; 0x34
 8005072:	2301      	movs	r3, #1
 8005074:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	f383 8810 	msr	PRIMASK, r3
}
 800507c:	46c0      	nop			; (mov r8, r8)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4926      	ldr	r1, [pc, #152]	; (8005124 <UART_EndRxTransfer+0xc4>)
 800508a:	400a      	ands	r2, r1
 800508c:	601a      	str	r2, [r3, #0]
 800508e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005090:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	f383 8810 	msr	PRIMASK, r3
}
 8005098:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800509a:	f3ef 8310 	mrs	r3, PRIMASK
 800509e:	623b      	str	r3, [r7, #32]
  return(result);
 80050a0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050a2:	633b      	str	r3, [r7, #48]	; 0x30
 80050a4:	2301      	movs	r3, #1
 80050a6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050aa:	f383 8810 	msr	PRIMASK, r3
}
 80050ae:	46c0      	nop			; (mov r8, r8)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	689a      	ldr	r2, [r3, #8]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	2101      	movs	r1, #1
 80050bc:	438a      	bics	r2, r1
 80050be:	609a      	str	r2, [r3, #8]
 80050c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c6:	f383 8810 	msr	PRIMASK, r3
}
 80050ca:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d118      	bne.n	8005106 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050d4:	f3ef 8310 	mrs	r3, PRIMASK
 80050d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80050da:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050de:	2301      	movs	r3, #1
 80050e0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f383 8810 	msr	PRIMASK, r3
}
 80050e8:	46c0      	nop			; (mov r8, r8)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2110      	movs	r1, #16
 80050f6:	438a      	bics	r2, r1
 80050f8:	601a      	str	r2, [r3, #0]
 80050fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	f383 8810 	msr	PRIMASK, r3
}
 8005104:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2280      	movs	r2, #128	; 0x80
 800510a:	2120      	movs	r1, #32
 800510c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	669a      	str	r2, [r3, #104]	; 0x68
}
 800511a:	46c0      	nop			; (mov r8, r8)
 800511c:	46bd      	mov	sp, r7
 800511e:	b00e      	add	sp, #56	; 0x38
 8005120:	bd80      	pop	{r7, pc}
 8005122:	46c0      	nop			; (mov r8, r8)
 8005124:	fffffedf 	.word	0xfffffedf

08005128 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005134:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	225a      	movs	r2, #90	; 0x5a
 800513a:	2100      	movs	r1, #0
 800513c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2252      	movs	r2, #82	; 0x52
 8005142:	2100      	movs	r1, #0
 8005144:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	0018      	movs	r0, r3
 800514a:	f7fb fec1 	bl	8000ed0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800514e:	46c0      	nop			; (mov r8, r8)
 8005150:	46bd      	mov	sp, r7
 8005152:	b004      	add	sp, #16
 8005154:	bd80      	pop	{r7, pc}

08005156 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005156:	b580      	push	{r7, lr}
 8005158:	b086      	sub	sp, #24
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800515e:	f3ef 8310 	mrs	r3, PRIMASK
 8005162:	60bb      	str	r3, [r7, #8]
  return(result);
 8005164:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005166:	617b      	str	r3, [r7, #20]
 8005168:	2301      	movs	r3, #1
 800516a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f383 8810 	msr	PRIMASK, r3
}
 8005172:	46c0      	nop			; (mov r8, r8)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2140      	movs	r1, #64	; 0x40
 8005180:	438a      	bics	r2, r1
 8005182:	601a      	str	r2, [r3, #0]
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	f383 8810 	msr	PRIMASK, r3
}
 800518e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2220      	movs	r2, #32
 8005194:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	0018      	movs	r0, r3
 80051a0:	f7ff fb7a 	bl	8004898 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051a4:	46c0      	nop			; (mov r8, r8)
 80051a6:	46bd      	mov	sp, r7
 80051a8:	b006      	add	sp, #24
 80051aa:	bd80      	pop	{r7, pc}

080051ac <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b094      	sub	sp, #80	; 0x50
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80051b4:	204e      	movs	r0, #78	; 0x4e
 80051b6:	183b      	adds	r3, r7, r0
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	215c      	movs	r1, #92	; 0x5c
 80051bc:	5a52      	ldrh	r2, [r2, r1]
 80051be:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2280      	movs	r2, #128	; 0x80
 80051c4:	589b      	ldr	r3, [r3, r2]
 80051c6:	2b22      	cmp	r3, #34	; 0x22
 80051c8:	d000      	beq.n	80051cc <UART_RxISR_8BIT+0x20>
 80051ca:	e0ba      	b.n	8005342 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	214c      	movs	r1, #76	; 0x4c
 80051d2:	187b      	adds	r3, r7, r1
 80051d4:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80051d6:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80051d8:	187b      	adds	r3, r7, r1
 80051da:	881b      	ldrh	r3, [r3, #0]
 80051dc:	b2da      	uxtb	r2, r3
 80051de:	183b      	adds	r3, r7, r0
 80051e0:	881b      	ldrh	r3, [r3, #0]
 80051e2:	b2d9      	uxtb	r1, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051e8:	400a      	ands	r2, r1
 80051ea:	b2d2      	uxtb	r2, r2
 80051ec:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051f2:	1c5a      	adds	r2, r3, #1
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	225a      	movs	r2, #90	; 0x5a
 80051fc:	5a9b      	ldrh	r3, [r3, r2]
 80051fe:	b29b      	uxth	r3, r3
 8005200:	3b01      	subs	r3, #1
 8005202:	b299      	uxth	r1, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	225a      	movs	r2, #90	; 0x5a
 8005208:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	225a      	movs	r2, #90	; 0x5a
 800520e:	5a9b      	ldrh	r3, [r3, r2]
 8005210:	b29b      	uxth	r3, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	d000      	beq.n	8005218 <UART_RxISR_8BIT+0x6c>
 8005216:	e09c      	b.n	8005352 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005218:	f3ef 8310 	mrs	r3, PRIMASK
 800521c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800521e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005220:	64bb      	str	r3, [r7, #72]	; 0x48
 8005222:	2301      	movs	r3, #1
 8005224:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005228:	f383 8810 	msr	PRIMASK, r3
}
 800522c:	46c0      	nop			; (mov r8, r8)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4948      	ldr	r1, [pc, #288]	; (800535c <UART_RxISR_8BIT+0x1b0>)
 800523a:	400a      	ands	r2, r1
 800523c:	601a      	str	r2, [r3, #0]
 800523e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005240:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005244:	f383 8810 	msr	PRIMASK, r3
}
 8005248:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800524a:	f3ef 8310 	mrs	r3, PRIMASK
 800524e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005250:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005252:	647b      	str	r3, [r7, #68]	; 0x44
 8005254:	2301      	movs	r3, #1
 8005256:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800525a:	f383 8810 	msr	PRIMASK, r3
}
 800525e:	46c0      	nop			; (mov r8, r8)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	689a      	ldr	r2, [r3, #8]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2101      	movs	r1, #1
 800526c:	438a      	bics	r2, r1
 800526e:	609a      	str	r2, [r3, #8]
 8005270:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005272:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005276:	f383 8810 	msr	PRIMASK, r3
}
 800527a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2280      	movs	r2, #128	; 0x80
 8005280:	2120      	movs	r1, #32
 8005282:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	685a      	ldr	r2, [r3, #4]
 8005296:	2380      	movs	r3, #128	; 0x80
 8005298:	041b      	lsls	r3, r3, #16
 800529a:	4013      	ands	r3, r2
 800529c:	d018      	beq.n	80052d0 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800529e:	f3ef 8310 	mrs	r3, PRIMASK
 80052a2:	61bb      	str	r3, [r7, #24]
  return(result);
 80052a4:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80052a6:	643b      	str	r3, [r7, #64]	; 0x40
 80052a8:	2301      	movs	r3, #1
 80052aa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	f383 8810 	msr	PRIMASK, r3
}
 80052b2:	46c0      	nop			; (mov r8, r8)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4928      	ldr	r1, [pc, #160]	; (8005360 <UART_RxISR_8BIT+0x1b4>)
 80052c0:	400a      	ands	r2, r1
 80052c2:	601a      	str	r2, [r3, #0]
 80052c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052c6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052c8:	6a3b      	ldr	r3, [r7, #32]
 80052ca:	f383 8810 	msr	PRIMASK, r3
}
 80052ce:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d12f      	bne.n	8005338 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052de:	f3ef 8310 	mrs	r3, PRIMASK
 80052e2:	60fb      	str	r3, [r7, #12]
  return(result);
 80052e4:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052e8:	2301      	movs	r3, #1
 80052ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	f383 8810 	msr	PRIMASK, r3
}
 80052f2:	46c0      	nop			; (mov r8, r8)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2110      	movs	r1, #16
 8005300:	438a      	bics	r2, r1
 8005302:	601a      	str	r2, [r3, #0]
 8005304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005306:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	f383 8810 	msr	PRIMASK, r3
}
 800530e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	69db      	ldr	r3, [r3, #28]
 8005316:	2210      	movs	r2, #16
 8005318:	4013      	ands	r3, r2
 800531a:	2b10      	cmp	r3, #16
 800531c:	d103      	bne.n	8005326 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2210      	movs	r2, #16
 8005324:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2258      	movs	r2, #88	; 0x58
 800532a:	5a9a      	ldrh	r2, [r3, r2]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	0011      	movs	r1, r2
 8005330:	0018      	movs	r0, r3
 8005332:	f7ff fab9 	bl	80048a8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005336:	e00c      	b.n	8005352 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	0018      	movs	r0, r3
 800533c:	f7fb fd7a 	bl	8000e34 <HAL_UART_RxCpltCallback>
}
 8005340:	e007      	b.n	8005352 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	699a      	ldr	r2, [r3, #24]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2108      	movs	r1, #8
 800534e:	430a      	orrs	r2, r1
 8005350:	619a      	str	r2, [r3, #24]
}
 8005352:	46c0      	nop			; (mov r8, r8)
 8005354:	46bd      	mov	sp, r7
 8005356:	b014      	add	sp, #80	; 0x50
 8005358:	bd80      	pop	{r7, pc}
 800535a:	46c0      	nop			; (mov r8, r8)
 800535c:	fffffedf 	.word	0xfffffedf
 8005360:	fbffffff 	.word	0xfbffffff

08005364 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b094      	sub	sp, #80	; 0x50
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800536c:	204e      	movs	r0, #78	; 0x4e
 800536e:	183b      	adds	r3, r7, r0
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	215c      	movs	r1, #92	; 0x5c
 8005374:	5a52      	ldrh	r2, [r2, r1]
 8005376:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2280      	movs	r2, #128	; 0x80
 800537c:	589b      	ldr	r3, [r3, r2]
 800537e:	2b22      	cmp	r3, #34	; 0x22
 8005380:	d000      	beq.n	8005384 <UART_RxISR_16BIT+0x20>
 8005382:	e0ba      	b.n	80054fa <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	214c      	movs	r1, #76	; 0x4c
 800538a:	187b      	adds	r3, r7, r1
 800538c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800538e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005394:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8005396:	187b      	adds	r3, r7, r1
 8005398:	183a      	adds	r2, r7, r0
 800539a:	881b      	ldrh	r3, [r3, #0]
 800539c:	8812      	ldrh	r2, [r2, #0]
 800539e:	4013      	ands	r3, r2
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053a4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053aa:	1c9a      	adds	r2, r3, #2
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	225a      	movs	r2, #90	; 0x5a
 80053b4:	5a9b      	ldrh	r3, [r3, r2]
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	3b01      	subs	r3, #1
 80053ba:	b299      	uxth	r1, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	225a      	movs	r2, #90	; 0x5a
 80053c0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	225a      	movs	r2, #90	; 0x5a
 80053c6:	5a9b      	ldrh	r3, [r3, r2]
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d000      	beq.n	80053d0 <UART_RxISR_16BIT+0x6c>
 80053ce:	e09c      	b.n	800550a <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053d0:	f3ef 8310 	mrs	r3, PRIMASK
 80053d4:	623b      	str	r3, [r7, #32]
  return(result);
 80053d6:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053d8:	647b      	str	r3, [r7, #68]	; 0x44
 80053da:	2301      	movs	r3, #1
 80053dc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e0:	f383 8810 	msr	PRIMASK, r3
}
 80053e4:	46c0      	nop			; (mov r8, r8)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4948      	ldr	r1, [pc, #288]	; (8005514 <UART_RxISR_16BIT+0x1b0>)
 80053f2:	400a      	ands	r2, r1
 80053f4:	601a      	str	r2, [r3, #0]
 80053f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053f8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fc:	f383 8810 	msr	PRIMASK, r3
}
 8005400:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005402:	f3ef 8310 	mrs	r3, PRIMASK
 8005406:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8005408:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800540a:	643b      	str	r3, [r7, #64]	; 0x40
 800540c:	2301      	movs	r3, #1
 800540e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005412:	f383 8810 	msr	PRIMASK, r3
}
 8005416:	46c0      	nop			; (mov r8, r8)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	689a      	ldr	r2, [r3, #8]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2101      	movs	r1, #1
 8005424:	438a      	bics	r2, r1
 8005426:	609a      	str	r2, [r3, #8]
 8005428:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800542a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800542c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800542e:	f383 8810 	msr	PRIMASK, r3
}
 8005432:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2280      	movs	r2, #128	; 0x80
 8005438:	2120      	movs	r1, #32
 800543a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	685a      	ldr	r2, [r3, #4]
 800544e:	2380      	movs	r3, #128	; 0x80
 8005450:	041b      	lsls	r3, r3, #16
 8005452:	4013      	ands	r3, r2
 8005454:	d018      	beq.n	8005488 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005456:	f3ef 8310 	mrs	r3, PRIMASK
 800545a:	617b      	str	r3, [r7, #20]
  return(result);
 800545c:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800545e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005460:	2301      	movs	r3, #1
 8005462:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	f383 8810 	msr	PRIMASK, r3
}
 800546a:	46c0      	nop			; (mov r8, r8)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4928      	ldr	r1, [pc, #160]	; (8005518 <UART_RxISR_16BIT+0x1b4>)
 8005478:	400a      	ands	r2, r1
 800547a:	601a      	str	r2, [r3, #0]
 800547c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800547e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	f383 8810 	msr	PRIMASK, r3
}
 8005486:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800548c:	2b01      	cmp	r3, #1
 800548e:	d12f      	bne.n	80054f0 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005496:	f3ef 8310 	mrs	r3, PRIMASK
 800549a:	60bb      	str	r3, [r7, #8]
  return(result);
 800549c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800549e:	63bb      	str	r3, [r7, #56]	; 0x38
 80054a0:	2301      	movs	r3, #1
 80054a2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f383 8810 	msr	PRIMASK, r3
}
 80054aa:	46c0      	nop			; (mov r8, r8)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2110      	movs	r1, #16
 80054b8:	438a      	bics	r2, r1
 80054ba:	601a      	str	r2, [r3, #0]
 80054bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	f383 8810 	msr	PRIMASK, r3
}
 80054c6:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	69db      	ldr	r3, [r3, #28]
 80054ce:	2210      	movs	r2, #16
 80054d0:	4013      	ands	r3, r2
 80054d2:	2b10      	cmp	r3, #16
 80054d4:	d103      	bne.n	80054de <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	2210      	movs	r2, #16
 80054dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2258      	movs	r2, #88	; 0x58
 80054e2:	5a9a      	ldrh	r2, [r3, r2]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	0011      	movs	r1, r2
 80054e8:	0018      	movs	r0, r3
 80054ea:	f7ff f9dd 	bl	80048a8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80054ee:	e00c      	b.n	800550a <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	0018      	movs	r0, r3
 80054f4:	f7fb fc9e 	bl	8000e34 <HAL_UART_RxCpltCallback>
}
 80054f8:	e007      	b.n	800550a <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	699a      	ldr	r2, [r3, #24]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2108      	movs	r1, #8
 8005506:	430a      	orrs	r2, r1
 8005508:	619a      	str	r2, [r3, #24]
}
 800550a:	46c0      	nop			; (mov r8, r8)
 800550c:	46bd      	mov	sp, r7
 800550e:	b014      	add	sp, #80	; 0x50
 8005510:	bd80      	pop	{r7, pc}
 8005512:	46c0      	nop			; (mov r8, r8)
 8005514:	fffffedf 	.word	0xfffffedf
 8005518:	fbffffff 	.word	0xfbffffff

0800551c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005524:	46c0      	nop			; (mov r8, r8)
 8005526:	46bd      	mov	sp, r7
 8005528:	b002      	add	sp, #8
 800552a:	bd80      	pop	{r7, pc}

0800552c <__errno>:
 800552c:	4b01      	ldr	r3, [pc, #4]	; (8005534 <__errno+0x8>)
 800552e:	6818      	ldr	r0, [r3, #0]
 8005530:	4770      	bx	lr
 8005532:	46c0      	nop			; (mov r8, r8)
 8005534:	2000000c 	.word	0x2000000c

08005538 <__libc_init_array>:
 8005538:	b570      	push	{r4, r5, r6, lr}
 800553a:	2600      	movs	r6, #0
 800553c:	4d0c      	ldr	r5, [pc, #48]	; (8005570 <__libc_init_array+0x38>)
 800553e:	4c0d      	ldr	r4, [pc, #52]	; (8005574 <__libc_init_array+0x3c>)
 8005540:	1b64      	subs	r4, r4, r5
 8005542:	10a4      	asrs	r4, r4, #2
 8005544:	42a6      	cmp	r6, r4
 8005546:	d109      	bne.n	800555c <__libc_init_array+0x24>
 8005548:	2600      	movs	r6, #0
 800554a:	f000 f8f1 	bl	8005730 <_init>
 800554e:	4d0a      	ldr	r5, [pc, #40]	; (8005578 <__libc_init_array+0x40>)
 8005550:	4c0a      	ldr	r4, [pc, #40]	; (800557c <__libc_init_array+0x44>)
 8005552:	1b64      	subs	r4, r4, r5
 8005554:	10a4      	asrs	r4, r4, #2
 8005556:	42a6      	cmp	r6, r4
 8005558:	d105      	bne.n	8005566 <__libc_init_array+0x2e>
 800555a:	bd70      	pop	{r4, r5, r6, pc}
 800555c:	00b3      	lsls	r3, r6, #2
 800555e:	58eb      	ldr	r3, [r5, r3]
 8005560:	4798      	blx	r3
 8005562:	3601      	adds	r6, #1
 8005564:	e7ee      	b.n	8005544 <__libc_init_array+0xc>
 8005566:	00b3      	lsls	r3, r6, #2
 8005568:	58eb      	ldr	r3, [r5, r3]
 800556a:	4798      	blx	r3
 800556c:	3601      	adds	r6, #1
 800556e:	e7f2      	b.n	8005556 <__libc_init_array+0x1e>
 8005570:	08005794 	.word	0x08005794
 8005574:	08005794 	.word	0x08005794
 8005578:	08005794 	.word	0x08005794
 800557c:	08005798 	.word	0x08005798

08005580 <malloc>:
 8005580:	b510      	push	{r4, lr}
 8005582:	4b03      	ldr	r3, [pc, #12]	; (8005590 <malloc+0x10>)
 8005584:	0001      	movs	r1, r0
 8005586:	6818      	ldr	r0, [r3, #0]
 8005588:	f000 f838 	bl	80055fc <_malloc_r>
 800558c:	bd10      	pop	{r4, pc}
 800558e:	46c0      	nop			; (mov r8, r8)
 8005590:	2000000c 	.word	0x2000000c

08005594 <memcpy>:
 8005594:	2300      	movs	r3, #0
 8005596:	b510      	push	{r4, lr}
 8005598:	429a      	cmp	r2, r3
 800559a:	d100      	bne.n	800559e <memcpy+0xa>
 800559c:	bd10      	pop	{r4, pc}
 800559e:	5ccc      	ldrb	r4, [r1, r3]
 80055a0:	54c4      	strb	r4, [r0, r3]
 80055a2:	3301      	adds	r3, #1
 80055a4:	e7f8      	b.n	8005598 <memcpy+0x4>

080055a6 <memset>:
 80055a6:	0003      	movs	r3, r0
 80055a8:	1882      	adds	r2, r0, r2
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d100      	bne.n	80055b0 <memset+0xa>
 80055ae:	4770      	bx	lr
 80055b0:	7019      	strb	r1, [r3, #0]
 80055b2:	3301      	adds	r3, #1
 80055b4:	e7f9      	b.n	80055aa <memset+0x4>
	...

080055b8 <sbrk_aligned>:
 80055b8:	b570      	push	{r4, r5, r6, lr}
 80055ba:	4e0f      	ldr	r6, [pc, #60]	; (80055f8 <sbrk_aligned+0x40>)
 80055bc:	000d      	movs	r5, r1
 80055be:	6831      	ldr	r1, [r6, #0]
 80055c0:	0004      	movs	r4, r0
 80055c2:	2900      	cmp	r1, #0
 80055c4:	d102      	bne.n	80055cc <sbrk_aligned+0x14>
 80055c6:	f000 f88f 	bl	80056e8 <_sbrk_r>
 80055ca:	6030      	str	r0, [r6, #0]
 80055cc:	0029      	movs	r1, r5
 80055ce:	0020      	movs	r0, r4
 80055d0:	f000 f88a 	bl	80056e8 <_sbrk_r>
 80055d4:	1c43      	adds	r3, r0, #1
 80055d6:	d00a      	beq.n	80055ee <sbrk_aligned+0x36>
 80055d8:	2303      	movs	r3, #3
 80055da:	1cc5      	adds	r5, r0, #3
 80055dc:	439d      	bics	r5, r3
 80055de:	42a8      	cmp	r0, r5
 80055e0:	d007      	beq.n	80055f2 <sbrk_aligned+0x3a>
 80055e2:	1a29      	subs	r1, r5, r0
 80055e4:	0020      	movs	r0, r4
 80055e6:	f000 f87f 	bl	80056e8 <_sbrk_r>
 80055ea:	1c43      	adds	r3, r0, #1
 80055ec:	d101      	bne.n	80055f2 <sbrk_aligned+0x3a>
 80055ee:	2501      	movs	r5, #1
 80055f0:	426d      	negs	r5, r5
 80055f2:	0028      	movs	r0, r5
 80055f4:	bd70      	pop	{r4, r5, r6, pc}
 80055f6:	46c0      	nop			; (mov r8, r8)
 80055f8:	20000cf4 	.word	0x20000cf4

080055fc <_malloc_r>:
 80055fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055fe:	2203      	movs	r2, #3
 8005600:	1ccb      	adds	r3, r1, #3
 8005602:	4393      	bics	r3, r2
 8005604:	3308      	adds	r3, #8
 8005606:	0006      	movs	r6, r0
 8005608:	001f      	movs	r7, r3
 800560a:	2b0c      	cmp	r3, #12
 800560c:	d232      	bcs.n	8005674 <_malloc_r+0x78>
 800560e:	270c      	movs	r7, #12
 8005610:	42b9      	cmp	r1, r7
 8005612:	d831      	bhi.n	8005678 <_malloc_r+0x7c>
 8005614:	0030      	movs	r0, r6
 8005616:	f000 f879 	bl	800570c <__malloc_lock>
 800561a:	4d32      	ldr	r5, [pc, #200]	; (80056e4 <_malloc_r+0xe8>)
 800561c:	682b      	ldr	r3, [r5, #0]
 800561e:	001c      	movs	r4, r3
 8005620:	2c00      	cmp	r4, #0
 8005622:	d12e      	bne.n	8005682 <_malloc_r+0x86>
 8005624:	0039      	movs	r1, r7
 8005626:	0030      	movs	r0, r6
 8005628:	f7ff ffc6 	bl	80055b8 <sbrk_aligned>
 800562c:	0004      	movs	r4, r0
 800562e:	1c43      	adds	r3, r0, #1
 8005630:	d11e      	bne.n	8005670 <_malloc_r+0x74>
 8005632:	682c      	ldr	r4, [r5, #0]
 8005634:	0025      	movs	r5, r4
 8005636:	2d00      	cmp	r5, #0
 8005638:	d14a      	bne.n	80056d0 <_malloc_r+0xd4>
 800563a:	6823      	ldr	r3, [r4, #0]
 800563c:	0029      	movs	r1, r5
 800563e:	18e3      	adds	r3, r4, r3
 8005640:	0030      	movs	r0, r6
 8005642:	9301      	str	r3, [sp, #4]
 8005644:	f000 f850 	bl	80056e8 <_sbrk_r>
 8005648:	9b01      	ldr	r3, [sp, #4]
 800564a:	4283      	cmp	r3, r0
 800564c:	d143      	bne.n	80056d6 <_malloc_r+0xda>
 800564e:	6823      	ldr	r3, [r4, #0]
 8005650:	3703      	adds	r7, #3
 8005652:	1aff      	subs	r7, r7, r3
 8005654:	2303      	movs	r3, #3
 8005656:	439f      	bics	r7, r3
 8005658:	3708      	adds	r7, #8
 800565a:	2f0c      	cmp	r7, #12
 800565c:	d200      	bcs.n	8005660 <_malloc_r+0x64>
 800565e:	270c      	movs	r7, #12
 8005660:	0039      	movs	r1, r7
 8005662:	0030      	movs	r0, r6
 8005664:	f7ff ffa8 	bl	80055b8 <sbrk_aligned>
 8005668:	1c43      	adds	r3, r0, #1
 800566a:	d034      	beq.n	80056d6 <_malloc_r+0xda>
 800566c:	6823      	ldr	r3, [r4, #0]
 800566e:	19df      	adds	r7, r3, r7
 8005670:	6027      	str	r7, [r4, #0]
 8005672:	e013      	b.n	800569c <_malloc_r+0xa0>
 8005674:	2b00      	cmp	r3, #0
 8005676:	dacb      	bge.n	8005610 <_malloc_r+0x14>
 8005678:	230c      	movs	r3, #12
 800567a:	2500      	movs	r5, #0
 800567c:	6033      	str	r3, [r6, #0]
 800567e:	0028      	movs	r0, r5
 8005680:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005682:	6822      	ldr	r2, [r4, #0]
 8005684:	1bd1      	subs	r1, r2, r7
 8005686:	d420      	bmi.n	80056ca <_malloc_r+0xce>
 8005688:	290b      	cmp	r1, #11
 800568a:	d917      	bls.n	80056bc <_malloc_r+0xc0>
 800568c:	19e2      	adds	r2, r4, r7
 800568e:	6027      	str	r7, [r4, #0]
 8005690:	42a3      	cmp	r3, r4
 8005692:	d111      	bne.n	80056b8 <_malloc_r+0xbc>
 8005694:	602a      	str	r2, [r5, #0]
 8005696:	6863      	ldr	r3, [r4, #4]
 8005698:	6011      	str	r1, [r2, #0]
 800569a:	6053      	str	r3, [r2, #4]
 800569c:	0030      	movs	r0, r6
 800569e:	0025      	movs	r5, r4
 80056a0:	f000 f83c 	bl	800571c <__malloc_unlock>
 80056a4:	2207      	movs	r2, #7
 80056a6:	350b      	adds	r5, #11
 80056a8:	1d23      	adds	r3, r4, #4
 80056aa:	4395      	bics	r5, r2
 80056ac:	1aea      	subs	r2, r5, r3
 80056ae:	429d      	cmp	r5, r3
 80056b0:	d0e5      	beq.n	800567e <_malloc_r+0x82>
 80056b2:	1b5b      	subs	r3, r3, r5
 80056b4:	50a3      	str	r3, [r4, r2]
 80056b6:	e7e2      	b.n	800567e <_malloc_r+0x82>
 80056b8:	605a      	str	r2, [r3, #4]
 80056ba:	e7ec      	b.n	8005696 <_malloc_r+0x9a>
 80056bc:	6862      	ldr	r2, [r4, #4]
 80056be:	42a3      	cmp	r3, r4
 80056c0:	d101      	bne.n	80056c6 <_malloc_r+0xca>
 80056c2:	602a      	str	r2, [r5, #0]
 80056c4:	e7ea      	b.n	800569c <_malloc_r+0xa0>
 80056c6:	605a      	str	r2, [r3, #4]
 80056c8:	e7e8      	b.n	800569c <_malloc_r+0xa0>
 80056ca:	0023      	movs	r3, r4
 80056cc:	6864      	ldr	r4, [r4, #4]
 80056ce:	e7a7      	b.n	8005620 <_malloc_r+0x24>
 80056d0:	002c      	movs	r4, r5
 80056d2:	686d      	ldr	r5, [r5, #4]
 80056d4:	e7af      	b.n	8005636 <_malloc_r+0x3a>
 80056d6:	230c      	movs	r3, #12
 80056d8:	0030      	movs	r0, r6
 80056da:	6033      	str	r3, [r6, #0]
 80056dc:	f000 f81e 	bl	800571c <__malloc_unlock>
 80056e0:	e7cd      	b.n	800567e <_malloc_r+0x82>
 80056e2:	46c0      	nop			; (mov r8, r8)
 80056e4:	20000cf0 	.word	0x20000cf0

080056e8 <_sbrk_r>:
 80056e8:	2300      	movs	r3, #0
 80056ea:	b570      	push	{r4, r5, r6, lr}
 80056ec:	4d06      	ldr	r5, [pc, #24]	; (8005708 <_sbrk_r+0x20>)
 80056ee:	0004      	movs	r4, r0
 80056f0:	0008      	movs	r0, r1
 80056f2:	602b      	str	r3, [r5, #0]
 80056f4:	f7fb fe00 	bl	80012f8 <_sbrk>
 80056f8:	1c43      	adds	r3, r0, #1
 80056fa:	d103      	bne.n	8005704 <_sbrk_r+0x1c>
 80056fc:	682b      	ldr	r3, [r5, #0]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d000      	beq.n	8005704 <_sbrk_r+0x1c>
 8005702:	6023      	str	r3, [r4, #0]
 8005704:	bd70      	pop	{r4, r5, r6, pc}
 8005706:	46c0      	nop			; (mov r8, r8)
 8005708:	20000cf8 	.word	0x20000cf8

0800570c <__malloc_lock>:
 800570c:	b510      	push	{r4, lr}
 800570e:	4802      	ldr	r0, [pc, #8]	; (8005718 <__malloc_lock+0xc>)
 8005710:	f000 f80c 	bl	800572c <__retarget_lock_acquire_recursive>
 8005714:	bd10      	pop	{r4, pc}
 8005716:	46c0      	nop			; (mov r8, r8)
 8005718:	20000cfc 	.word	0x20000cfc

0800571c <__malloc_unlock>:
 800571c:	b510      	push	{r4, lr}
 800571e:	4802      	ldr	r0, [pc, #8]	; (8005728 <__malloc_unlock+0xc>)
 8005720:	f000 f805 	bl	800572e <__retarget_lock_release_recursive>
 8005724:	bd10      	pop	{r4, pc}
 8005726:	46c0      	nop			; (mov r8, r8)
 8005728:	20000cfc 	.word	0x20000cfc

0800572c <__retarget_lock_acquire_recursive>:
 800572c:	4770      	bx	lr

0800572e <__retarget_lock_release_recursive>:
 800572e:	4770      	bx	lr

08005730 <_init>:
 8005730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005732:	46c0      	nop			; (mov r8, r8)
 8005734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005736:	bc08      	pop	{r3}
 8005738:	469e      	mov	lr, r3
 800573a:	4770      	bx	lr

0800573c <_fini>:
 800573c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800573e:	46c0      	nop			; (mov r8, r8)
 8005740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005742:	bc08      	pop	{r3}
 8005744:	469e      	mov	lr, r3
 8005746:	4770      	bx	lr
