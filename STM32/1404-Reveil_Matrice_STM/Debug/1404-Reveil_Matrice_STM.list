
1404-Reveil_Matrice_STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000546c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  0800552c  0800552c  0001552c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005578  08005578  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005578  08005578  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005578  08005578  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005578  08005578  00015578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800557c  0800557c  0001557c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005580  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c4c  20000070  080055f0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000cbc  080055f0  00020cbc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b37  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002589  00000000  00000000  00030bcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed0  00000000  00000000  00033158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dc8  00000000  00000000  00034028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002ceb  00000000  00000000  00034df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015dcf  00000000  00000000  00037adb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000945c5  00000000  00000000  0004d8aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e1e6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003708  00000000  00000000  000e1ec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005514 	.word	0x08005514

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08005514 	.word	0x08005514

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <setCanvasColor>:
 *  Created on: 9 oct. 2023
 *      Author: alyvasseur
 */
#include "includes.h"

void setCanvasColor(Canvas* canvas, Pixel encre) {
 80003f4:	b590      	push	{r4, r7, lr}
 80003f6:	b085      	sub	sp, #20
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
 80003fc:	003b      	movs	r3, r7
 80003fe:	6019      	str	r1, [r3, #0]
for (uint16_t i = 0; i < canvas->numCols * canvas->numRows; i++) {
 8000400:	230e      	movs	r3, #14
 8000402:	18fb      	adds	r3, r7, r3
 8000404:	2200      	movs	r2, #0
 8000406:	801a      	strh	r2, [r3, #0]
 8000408:	e014      	b.n	8000434 <setCanvasColor+0x40>
		canvas->pixels[i]=encre;
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	6899      	ldr	r1, [r3, #8]
 800040e:	240e      	movs	r4, #14
 8000410:	193b      	adds	r3, r7, r4
 8000412:	881a      	ldrh	r2, [r3, #0]
 8000414:	0013      	movs	r3, r2
 8000416:	005b      	lsls	r3, r3, #1
 8000418:	189b      	adds	r3, r3, r2
 800041a:	18ca      	adds	r2, r1, r3
 800041c:	003b      	movs	r3, r7
 800041e:	0010      	movs	r0, r2
 8000420:	0019      	movs	r1, r3
 8000422:	2303      	movs	r3, #3
 8000424:	001a      	movs	r2, r3
 8000426:	f004 ffa7 	bl	8005378 <memcpy>
for (uint16_t i = 0; i < canvas->numCols * canvas->numRows; i++) {
 800042a:	193b      	adds	r3, r7, r4
 800042c:	881a      	ldrh	r2, [r3, #0]
 800042e:	193b      	adds	r3, r7, r4
 8000430:	3201      	adds	r2, #1
 8000432:	801a      	strh	r2, [r3, #0]
 8000434:	230e      	movs	r3, #14
 8000436:	18fb      	adds	r3, r7, r3
 8000438:	881a      	ldrh	r2, [r3, #0]
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	6819      	ldr	r1, [r3, #0]
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	685b      	ldr	r3, [r3, #4]
 8000442:	434b      	muls	r3, r1
 8000444:	429a      	cmp	r2, r3
 8000446:	dbe0      	blt.n	800040a <setCanvasColor+0x16>
    }
}
 8000448:	46c0      	nop			; (mov r8, r8)
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	46bd      	mov	sp, r7
 800044e:	b005      	add	sp, #20
 8000450:	bd90      	pop	{r4, r7, pc}

08000452 <sendCanvas>:



// Fonction pour mettre à jour l'affichage LED
void sendCanvas(Canvas* canvas) {
 8000452:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000454:	b085      	sub	sp, #20
 8000456:	af00      	add	r7, sp, #0
 8000458:	6078      	str	r0, [r7, #4]
    // Copiez les pixels du canevas vers l'écran LED
    for (uint16_t i = 0; i < canvas->numCols * canvas->numRows -1; i++) {  // -1 car résolution bug affichage photodiode inexistante
 800045a:	230e      	movs	r3, #14
 800045c:	18fb      	adds	r3, r7, r3
 800045e:	2200      	movs	r2, #0
 8000460:	801a      	strh	r2, [r3, #0]
 8000462:	e026      	b.n	80004b2 <sendCanvas+0x60>
        setLEDcolor(i, canvas -> pixels[i].R, canvas -> pixels[i].G, canvas -> pixels[i].B);
 8000464:	260e      	movs	r6, #14
 8000466:	19bb      	adds	r3, r7, r6
 8000468:	8818      	ldrh	r0, [r3, #0]
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	6899      	ldr	r1, [r3, #8]
 800046e:	19bb      	adds	r3, r7, r6
 8000470:	881a      	ldrh	r2, [r3, #0]
 8000472:	0013      	movs	r3, r2
 8000474:	005b      	lsls	r3, r3, #1
 8000476:	189b      	adds	r3, r3, r2
 8000478:	18cb      	adds	r3, r1, r3
 800047a:	781c      	ldrb	r4, [r3, #0]
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	6899      	ldr	r1, [r3, #8]
 8000480:	19bb      	adds	r3, r7, r6
 8000482:	881a      	ldrh	r2, [r3, #0]
 8000484:	0013      	movs	r3, r2
 8000486:	005b      	lsls	r3, r3, #1
 8000488:	189b      	adds	r3, r3, r2
 800048a:	18cb      	adds	r3, r1, r3
 800048c:	785d      	ldrb	r5, [r3, #1]
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	6899      	ldr	r1, [r3, #8]
 8000492:	19bb      	adds	r3, r7, r6
 8000494:	881a      	ldrh	r2, [r3, #0]
 8000496:	0013      	movs	r3, r2
 8000498:	005b      	lsls	r3, r3, #1
 800049a:	189b      	adds	r3, r3, r2
 800049c:	18cb      	adds	r3, r1, r3
 800049e:	789b      	ldrb	r3, [r3, #2]
 80004a0:	002a      	movs	r2, r5
 80004a2:	0021      	movs	r1, r4
 80004a4:	f000 f9e8 	bl	8000878 <setLEDcolor>
    for (uint16_t i = 0; i < canvas->numCols * canvas->numRows -1; i++) {  // -1 car résolution bug affichage photodiode inexistante
 80004a8:	19bb      	adds	r3, r7, r6
 80004aa:	881a      	ldrh	r2, [r3, #0]
 80004ac:	19bb      	adds	r3, r7, r6
 80004ae:	3201      	adds	r2, #1
 80004b0:	801a      	strh	r2, [r3, #0]
 80004b2:	230e      	movs	r3, #14
 80004b4:	18fb      	adds	r3, r7, r3
 80004b6:	881a      	ldrh	r2, [r3, #0]
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	6819      	ldr	r1, [r3, #0]
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	685b      	ldr	r3, [r3, #4]
 80004c0:	434b      	muls	r3, r1
 80004c2:	3b01      	subs	r3, #1
 80004c4:	429a      	cmp	r2, r3
 80004c6:	dbcd      	blt.n	8000464 <sendCanvas+0x12>
    }
}
 80004c8:	46c0      	nop			; (mov r8, r8)
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	46bd      	mov	sp, r7
 80004ce:	b005      	add	sp, #20
 80004d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080004d2 <getPixel>:

Pixel* getPixel(Canvas* canvas, int x, int y) {
 80004d2:	b580      	push	{r7, lr}
 80004d4:	b084      	sub	sp, #16
 80004d6:	af00      	add	r7, sp, #0
 80004d8:	60f8      	str	r0, [r7, #12]
 80004da:	60b9      	str	r1, [r7, #8]
 80004dc:	607a      	str	r2, [r7, #4]
    if (x > 0 && x <= canvas->numCols && y > 0 && y <= canvas->numRows) {
 80004de:	68bb      	ldr	r3, [r7, #8]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	dd1c      	ble.n	800051e <getPixel+0x4c>
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	68ba      	ldr	r2, [r7, #8]
 80004ea:	429a      	cmp	r2, r3
 80004ec:	dc17      	bgt.n	800051e <getPixel+0x4c>
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	dd14      	ble.n	800051e <getPixel+0x4c>
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	685b      	ldr	r3, [r3, #4]
 80004f8:	687a      	ldr	r2, [r7, #4]
 80004fa:	429a      	cmp	r2, r3
 80004fc:	dc0f      	bgt.n	800051e <getPixel+0x4c>
        return &canvas->pixels[(x-1)*canvas->numRows+(y-1)];
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	689a      	ldr	r2, [r3, #8]
 8000502:	68bb      	ldr	r3, [r7, #8]
 8000504:	1e59      	subs	r1, r3, #1
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	685b      	ldr	r3, [r3, #4]
 800050a:	4359      	muls	r1, r3
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	3b01      	subs	r3, #1
 8000510:	18cb      	adds	r3, r1, r3
 8000512:	0019      	movs	r1, r3
 8000514:	000b      	movs	r3, r1
 8000516:	005b      	lsls	r3, r3, #1
 8000518:	185b      	adds	r3, r3, r1
 800051a:	18d3      	adds	r3, r2, r3
 800051c:	e000      	b.n	8000520 <getPixel+0x4e>
    } else {
        return NULL; // Coordonnées hors limites
 800051e:	2300      	movs	r3, #0
    }
}
 8000520:	0018      	movs	r0, r3
 8000522:	46bd      	mov	sp, r7
 8000524:	b004      	add	sp, #16
 8000526:	bd80      	pop	{r7, pc}

08000528 <colorDiagonal>:


void colorDiagonal(Canvas* canvas, Pixel encre, uint8_t diagSum) {
 8000528:	b580      	push	{r7, lr}
 800052a:	b088      	sub	sp, #32
 800052c:	af00      	add	r7, sp, #0
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	2308      	movs	r3, #8
 8000532:	18fb      	adds	r3, r7, r3
 8000534:	6019      	str	r1, [r3, #0]
 8000536:	1dfb      	adds	r3, r7, #7
 8000538:	701a      	strb	r2, [r3, #0]


    // Parcourir la diagonale où x + y == diagSum
    for (int x = 0; x <= canvas->numCols; x++) {
 800053a:	2300      	movs	r3, #0
 800053c:	61fb      	str	r3, [r7, #28]
 800053e:	e023      	b.n	8000588 <colorDiagonal+0x60>
        int y = diagSum - x; // Calcul de la coordonnée y correspondante
 8000540:	1dfb      	adds	r3, r7, #7
 8000542:	781a      	ldrb	r2, [r3, #0]
 8000544:	69fb      	ldr	r3, [r7, #28]
 8000546:	1ad3      	subs	r3, r2, r3
 8000548:	61bb      	str	r3, [r7, #24]
        if (y >= 0 && y <= canvas->numRows) {
 800054a:	69bb      	ldr	r3, [r7, #24]
 800054c:	2b00      	cmp	r3, #0
 800054e:	db18      	blt.n	8000582 <colorDiagonal+0x5a>
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	69ba      	ldr	r2, [r7, #24]
 8000556:	429a      	cmp	r2, r3
 8000558:	dc13      	bgt.n	8000582 <colorDiagonal+0x5a>
            Pixel* pixel = getPixel(canvas, x, y);
 800055a:	69ba      	ldr	r2, [r7, #24]
 800055c:	69f9      	ldr	r1, [r7, #28]
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	0018      	movs	r0, r3
 8000562:	f7ff ffb6 	bl	80004d2 <getPixel>
 8000566:	0003      	movs	r3, r0
 8000568:	617b      	str	r3, [r7, #20]
            if (pixel) {
 800056a:	697b      	ldr	r3, [r7, #20]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d008      	beq.n	8000582 <colorDiagonal+0x5a>
                // Mettre à jour la couleur
                *pixel=encre;
 8000570:	697a      	ldr	r2, [r7, #20]
 8000572:	2308      	movs	r3, #8
 8000574:	18fb      	adds	r3, r7, r3
 8000576:	0010      	movs	r0, r2
 8000578:	0019      	movs	r1, r3
 800057a:	2303      	movs	r3, #3
 800057c:	001a      	movs	r2, r3
 800057e:	f004 fefb 	bl	8005378 <memcpy>
    for (int x = 0; x <= canvas->numCols; x++) {
 8000582:	69fb      	ldr	r3, [r7, #28]
 8000584:	3301      	adds	r3, #1
 8000586:	61fb      	str	r3, [r7, #28]
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	69fa      	ldr	r2, [r7, #28]
 800058e:	429a      	cmp	r2, r3
 8000590:	ddd6      	ble.n	8000540 <colorDiagonal+0x18>
            }
        }
    }
}
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	46c0      	nop			; (mov r8, r8)
 8000596:	46bd      	mov	sp, r7
 8000598:	b008      	add	sp, #32
 800059a:	bd80      	pop	{r7, pc}

0800059c <displayBCD>:
        }
    }
}

// Fonction pour afficher un chiffre en BCD
void displayBCD(Canvas* canvas, int X, int Y, int BCD, int NbDeBitAffiches) {
 800059c:	b580      	push	{r7, lr}
 800059e:	b088      	sub	sp, #32
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	607a      	str	r2, [r7, #4]
 80005a8:	603b      	str	r3, [r7, #0]
    if (canvas == NULL || X < 0 || Y < 0 || BCD < 0 || NbDeBitAffiches <= 0) {
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d04e      	beq.n	800064e <displayBCD+0xb2>
 80005b0:	68bb      	ldr	r3, [r7, #8]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	db4b      	blt.n	800064e <displayBCD+0xb2>
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	db48      	blt.n	800064e <displayBCD+0xb2>
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	db45      	blt.n	800064e <displayBCD+0xb2>
 80005c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	dd42      	ble.n	800064e <displayBCD+0xb2>
        // Vérifiez les paramètres d'entrée valides
        return;
    }

    int j;
    int mask = 1 << (NbDeBitAffiches - 1);  // Masque pour extraire chaque bit
 80005c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005ca:	3b01      	subs	r3, #1
 80005cc:	2201      	movs	r2, #1
 80005ce:	409a      	lsls	r2, r3
 80005d0:	0013      	movs	r3, r2
 80005d2:	61bb      	str	r3, [r7, #24]

        for (j = X; j < X + NbDeBitAffiches; j++) {
 80005d4:	68bb      	ldr	r3, [r7, #8]
 80005d6:	61fb      	str	r3, [r7, #28]
 80005d8:	e032      	b.n	8000640 <displayBCD+0xa4>
            if (BCD & mask) {
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	69ba      	ldr	r2, [r7, #24]
 80005de:	4013      	ands	r3, r2
 80005e0:	d014      	beq.n	800060c <displayBCD+0x70>
                // Afficher un 1 (blanc)
                Pixel* pixel = getPixel(canvas, j, Y);
 80005e2:	687a      	ldr	r2, [r7, #4]
 80005e4:	69f9      	ldr	r1, [r7, #28]
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	0018      	movs	r0, r3
 80005ea:	f7ff ff72 	bl	80004d2 <getPixel>
 80005ee:	0003      	movs	r3, r0
 80005f0:	613b      	str	r3, [r7, #16]
                if (pixel != NULL) {
 80005f2:	693b      	ldr	r3, [r7, #16]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d01d      	beq.n	8000634 <displayBCD+0x98>
                    pixel->R = MAX_LUX;
 80005f8:	693b      	ldr	r3, [r7, #16]
 80005fa:	22fe      	movs	r2, #254	; 0xfe
 80005fc:	701a      	strb	r2, [r3, #0]
                    pixel->G = MAX_LUX;
 80005fe:	693b      	ldr	r3, [r7, #16]
 8000600:	22fe      	movs	r2, #254	; 0xfe
 8000602:	705a      	strb	r2, [r3, #1]
                    pixel->B = MAX_LUX;
 8000604:	693b      	ldr	r3, [r7, #16]
 8000606:	22fe      	movs	r2, #254	; 0xfe
 8000608:	709a      	strb	r2, [r3, #2]
 800060a:	e013      	b.n	8000634 <displayBCD+0x98>
                }
            }
            else{
            	//afficher un 0 (noir)
            	Pixel* pixel = getPixel(canvas, j, Y);
 800060c:	687a      	ldr	r2, [r7, #4]
 800060e:	69f9      	ldr	r1, [r7, #28]
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	0018      	movs	r0, r3
 8000614:	f7ff ff5d 	bl	80004d2 <getPixel>
 8000618:	0003      	movs	r3, r0
 800061a:	617b      	str	r3, [r7, #20]
            	if (pixel != NULL) {
 800061c:	697b      	ldr	r3, [r7, #20]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d008      	beq.n	8000634 <displayBCD+0x98>
            		pixel->R = 0;
 8000622:	697b      	ldr	r3, [r7, #20]
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
                    pixel->G = 0;
 8000628:	697b      	ldr	r3, [r7, #20]
 800062a:	2200      	movs	r2, #0
 800062c:	705a      	strb	r2, [r3, #1]
                    pixel->B = 0;
 800062e:	697b      	ldr	r3, [r7, #20]
 8000630:	2200      	movs	r2, #0
 8000632:	709a      	strb	r2, [r3, #2]
            	}
            }
            mask >>= 1;
 8000634:	69bb      	ldr	r3, [r7, #24]
 8000636:	105b      	asrs	r3, r3, #1
 8000638:	61bb      	str	r3, [r7, #24]
        for (j = X; j < X + NbDeBitAffiches; j++) {
 800063a:	69fb      	ldr	r3, [r7, #28]
 800063c:	3301      	adds	r3, #1
 800063e:	61fb      	str	r3, [r7, #28]
 8000640:	68ba      	ldr	r2, [r7, #8]
 8000642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000644:	18d3      	adds	r3, r2, r3
 8000646:	69fa      	ldr	r2, [r7, #28]
 8000648:	429a      	cmp	r2, r3
 800064a:	dbc6      	blt.n	80005da <displayBCD+0x3e>
 800064c:	e000      	b.n	8000650 <displayBCD+0xb4>
        return;
 800064e:	46c0      	nop			; (mov r8, r8)
        }
}
 8000650:	46bd      	mov	sp, r7
 8000652:	b008      	add	sp, #32
 8000654:	bd80      	pop	{r7, pc}
	...

08000658 <HSVtoPixel>:
 *  Created on: Oct 11, 2023
 *      Author: alyvasseur
 */
#include "includes.h"

Pixel HSVtoPixel(uint8_t h, uint8_t v) {
 8000658:	b5b0      	push	{r4, r5, r7, lr}
 800065a:	b086      	sub	sp, #24
 800065c:	af00      	add	r7, sp, #0
 800065e:	0002      	movs	r2, r0
 8000660:	1dfb      	adds	r3, r7, #7
 8000662:	701a      	strb	r2, [r3, #0]
 8000664:	1dbb      	adds	r3, r7, #6
 8000666:	1c0a      	adds	r2, r1, #0
 8000668:	701a      	strb	r2, [r3, #0]
    Pixel pixel;
    unsigned char region, remainder, p, q, t;

    region = h / 43;
 800066a:	2517      	movs	r5, #23
 800066c:	197c      	adds	r4, r7, r5
 800066e:	1dfb      	adds	r3, r7, #7
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	212b      	movs	r1, #43	; 0x2b
 8000674:	0018      	movs	r0, r3
 8000676:	f7ff fd47 	bl	8000108 <__udivsi3>
 800067a:	0003      	movs	r3, r0
 800067c:	7023      	strb	r3, [r4, #0]
    remainder = (h - (region * 43)) * 6;
 800067e:	1dfb      	adds	r3, r7, #7
 8000680:	7819      	ldrb	r1, [r3, #0]
 8000682:	0028      	movs	r0, r5
 8000684:	183b      	adds	r3, r7, r0
 8000686:	781a      	ldrb	r2, [r3, #0]
 8000688:	0013      	movs	r3, r2
 800068a:	069b      	lsls	r3, r3, #26
 800068c:	1a9b      	subs	r3, r3, r2
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	189b      	adds	r3, r3, r2
 8000692:	009b      	lsls	r3, r3, #2
 8000694:	189b      	adds	r3, r3, r2
 8000696:	009b      	lsls	r3, r3, #2
 8000698:	189b      	adds	r3, r3, r2
 800069a:	18cb      	adds	r3, r1, r3
 800069c:	b2db      	uxtb	r3, r3
 800069e:	2416      	movs	r4, #22
 80006a0:	193a      	adds	r2, r7, r4
 80006a2:	1c19      	adds	r1, r3, #0
 80006a4:	1c0b      	adds	r3, r1, #0
 80006a6:	18db      	adds	r3, r3, r3
 80006a8:	185b      	adds	r3, r3, r1
 80006aa:	18db      	adds	r3, r3, r3
 80006ac:	7013      	strb	r3, [r2, #0]

    p = (v * (255 - 255)) >> 8;
 80006ae:	2315      	movs	r3, #21
 80006b0:	18fb      	adds	r3, r7, r3
 80006b2:	2200      	movs	r2, #0
 80006b4:	701a      	strb	r2, [r3, #0]
    q = (v * (255 - ((255 * remainder) >> 8)) >> 8);
 80006b6:	1dbb      	adds	r3, r7, #6
 80006b8:	7819      	ldrb	r1, [r3, #0]
 80006ba:	193b      	adds	r3, r7, r4
 80006bc:	781a      	ldrb	r2, [r3, #0]
 80006be:	0013      	movs	r3, r2
 80006c0:	021b      	lsls	r3, r3, #8
 80006c2:	1a9b      	subs	r3, r3, r2
 80006c4:	121b      	asrs	r3, r3, #8
 80006c6:	22ff      	movs	r2, #255	; 0xff
 80006c8:	1ad3      	subs	r3, r2, r3
 80006ca:	434b      	muls	r3, r1
 80006cc:	121a      	asrs	r2, r3, #8
 80006ce:	2314      	movs	r3, #20
 80006d0:	18fb      	adds	r3, r7, r3
 80006d2:	701a      	strb	r2, [r3, #0]
    t = (v * (255 - ((255 * (255 - remainder)) >> 8)) >> 8);
 80006d4:	1dbb      	adds	r3, r7, #6
 80006d6:	7819      	ldrb	r1, [r3, #0]
 80006d8:	193b      	adds	r3, r7, r4
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	22ff      	movs	r2, #255	; 0xff
 80006de:	1ad2      	subs	r2, r2, r3
 80006e0:	0013      	movs	r3, r2
 80006e2:	021b      	lsls	r3, r3, #8
 80006e4:	1a9b      	subs	r3, r3, r2
 80006e6:	121b      	asrs	r3, r3, #8
 80006e8:	22ff      	movs	r2, #255	; 0xff
 80006ea:	1ad3      	subs	r3, r2, r3
 80006ec:	434b      	muls	r3, r1
 80006ee:	121a      	asrs	r2, r3, #8
 80006f0:	2313      	movs	r3, #19
 80006f2:	18fb      	adds	r3, r7, r3
 80006f4:	701a      	strb	r2, [r3, #0]

    switch (region) {
 80006f6:	183b      	adds	r3, r7, r0
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	2b04      	cmp	r3, #4
 80006fc:	d854      	bhi.n	80007a8 <HSVtoPixel+0x150>
 80006fe:	009a      	lsls	r2, r3, #2
 8000700:	4b4d      	ldr	r3, [pc, #308]	; (8000838 <HSVtoPixel+0x1e0>)
 8000702:	18d3      	adds	r3, r2, r3
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	469f      	mov	pc, r3
        case 0:
            pixel.R = v;
 8000708:	210c      	movs	r1, #12
 800070a:	187b      	adds	r3, r7, r1
 800070c:	1dba      	adds	r2, r7, #6
 800070e:	7812      	ldrb	r2, [r2, #0]
 8000710:	701a      	strb	r2, [r3, #0]
            pixel.G = t;
 8000712:	187b      	adds	r3, r7, r1
 8000714:	2213      	movs	r2, #19
 8000716:	18ba      	adds	r2, r7, r2
 8000718:	7812      	ldrb	r2, [r2, #0]
 800071a:	705a      	strb	r2, [r3, #1]
            pixel.B = p;
 800071c:	187b      	adds	r3, r7, r1
 800071e:	2215      	movs	r2, #21
 8000720:	18ba      	adds	r2, r7, r2
 8000722:	7812      	ldrb	r2, [r2, #0]
 8000724:	709a      	strb	r2, [r3, #2]
            break;
 8000726:	e04f      	b.n	80007c8 <HSVtoPixel+0x170>
        case 1:
            pixel.R = q;
 8000728:	210c      	movs	r1, #12
 800072a:	187b      	adds	r3, r7, r1
 800072c:	2214      	movs	r2, #20
 800072e:	18ba      	adds	r2, r7, r2
 8000730:	7812      	ldrb	r2, [r2, #0]
 8000732:	701a      	strb	r2, [r3, #0]
            pixel.G = v;
 8000734:	187b      	adds	r3, r7, r1
 8000736:	1dba      	adds	r2, r7, #6
 8000738:	7812      	ldrb	r2, [r2, #0]
 800073a:	705a      	strb	r2, [r3, #1]
            pixel.B = p;
 800073c:	187b      	adds	r3, r7, r1
 800073e:	2215      	movs	r2, #21
 8000740:	18ba      	adds	r2, r7, r2
 8000742:	7812      	ldrb	r2, [r2, #0]
 8000744:	709a      	strb	r2, [r3, #2]
            break;
 8000746:	e03f      	b.n	80007c8 <HSVtoPixel+0x170>
        case 2:
            pixel.R = p;
 8000748:	210c      	movs	r1, #12
 800074a:	187b      	adds	r3, r7, r1
 800074c:	2215      	movs	r2, #21
 800074e:	18ba      	adds	r2, r7, r2
 8000750:	7812      	ldrb	r2, [r2, #0]
 8000752:	701a      	strb	r2, [r3, #0]
            pixel.G = v;
 8000754:	187b      	adds	r3, r7, r1
 8000756:	1dba      	adds	r2, r7, #6
 8000758:	7812      	ldrb	r2, [r2, #0]
 800075a:	705a      	strb	r2, [r3, #1]
            pixel.B = t;
 800075c:	187b      	adds	r3, r7, r1
 800075e:	2213      	movs	r2, #19
 8000760:	18ba      	adds	r2, r7, r2
 8000762:	7812      	ldrb	r2, [r2, #0]
 8000764:	709a      	strb	r2, [r3, #2]
            break;
 8000766:	e02f      	b.n	80007c8 <HSVtoPixel+0x170>
        case 3:
            pixel.R = p;
 8000768:	210c      	movs	r1, #12
 800076a:	187b      	adds	r3, r7, r1
 800076c:	2215      	movs	r2, #21
 800076e:	18ba      	adds	r2, r7, r2
 8000770:	7812      	ldrb	r2, [r2, #0]
 8000772:	701a      	strb	r2, [r3, #0]
            pixel.G = q;
 8000774:	187b      	adds	r3, r7, r1
 8000776:	2214      	movs	r2, #20
 8000778:	18ba      	adds	r2, r7, r2
 800077a:	7812      	ldrb	r2, [r2, #0]
 800077c:	705a      	strb	r2, [r3, #1]
            pixel.B = v;
 800077e:	187b      	adds	r3, r7, r1
 8000780:	1dba      	adds	r2, r7, #6
 8000782:	7812      	ldrb	r2, [r2, #0]
 8000784:	709a      	strb	r2, [r3, #2]
            break;
 8000786:	e01f      	b.n	80007c8 <HSVtoPixel+0x170>
        case 4:
            pixel.R = t;
 8000788:	210c      	movs	r1, #12
 800078a:	187b      	adds	r3, r7, r1
 800078c:	2213      	movs	r2, #19
 800078e:	18ba      	adds	r2, r7, r2
 8000790:	7812      	ldrb	r2, [r2, #0]
 8000792:	701a      	strb	r2, [r3, #0]
            pixel.G = p;
 8000794:	187b      	adds	r3, r7, r1
 8000796:	2215      	movs	r2, #21
 8000798:	18ba      	adds	r2, r7, r2
 800079a:	7812      	ldrb	r2, [r2, #0]
 800079c:	705a      	strb	r2, [r3, #1]
            pixel.B = v;
 800079e:	187b      	adds	r3, r7, r1
 80007a0:	1dba      	adds	r2, r7, #6
 80007a2:	7812      	ldrb	r2, [r2, #0]
 80007a4:	709a      	strb	r2, [r3, #2]
            break;
 80007a6:	e00f      	b.n	80007c8 <HSVtoPixel+0x170>
        default:
            pixel.R = v;
 80007a8:	210c      	movs	r1, #12
 80007aa:	187b      	adds	r3, r7, r1
 80007ac:	1dba      	adds	r2, r7, #6
 80007ae:	7812      	ldrb	r2, [r2, #0]
 80007b0:	701a      	strb	r2, [r3, #0]
            pixel.G = p;
 80007b2:	187b      	adds	r3, r7, r1
 80007b4:	2215      	movs	r2, #21
 80007b6:	18ba      	adds	r2, r7, r2
 80007b8:	7812      	ldrb	r2, [r2, #0]
 80007ba:	705a      	strb	r2, [r3, #1]
            pixel.B = q;
 80007bc:	187b      	adds	r3, r7, r1
 80007be:	2214      	movs	r2, #20
 80007c0:	18ba      	adds	r2, r7, r2
 80007c2:	7812      	ldrb	r2, [r2, #0]
 80007c4:	709a      	strb	r2, [r3, #2]
            break;
 80007c6:	46c0      	nop			; (mov r8, r8)
    }

    // Appliquer le masque pour forcer les valeurs à être paires
    pixel.R &= 0xFE; // Le masque 0xFE force le dernier bit à 0.
 80007c8:	210c      	movs	r1, #12
 80007ca:	187b      	adds	r3, r7, r1
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2201      	movs	r2, #1
 80007d0:	4393      	bics	r3, r2
 80007d2:	b2da      	uxtb	r2, r3
 80007d4:	187b      	adds	r3, r7, r1
 80007d6:	701a      	strb	r2, [r3, #0]
    pixel.G &= 0xFE;
 80007d8:	187b      	adds	r3, r7, r1
 80007da:	785b      	ldrb	r3, [r3, #1]
 80007dc:	2201      	movs	r2, #1
 80007de:	4393      	bics	r3, r2
 80007e0:	b2da      	uxtb	r2, r3
 80007e2:	187b      	adds	r3, r7, r1
 80007e4:	705a      	strb	r2, [r3, #1]
    pixel.B &= 0xFE;
 80007e6:	187b      	adds	r3, r7, r1
 80007e8:	789b      	ldrb	r3, [r3, #2]
 80007ea:	2201      	movs	r2, #1
 80007ec:	4393      	bics	r3, r2
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	709a      	strb	r2, [r3, #2]

    return pixel;
 80007f4:	2010      	movs	r0, #16
 80007f6:	183b      	adds	r3, r7, r0
 80007f8:	187a      	adds	r2, r7, r1
 80007fa:	8811      	ldrh	r1, [r2, #0]
 80007fc:	8019      	strh	r1, [r3, #0]
 80007fe:	7892      	ldrb	r2, [r2, #2]
 8000800:	709a      	strb	r2, [r3, #2]
 8000802:	183a      	adds	r2, r7, r0
 8000804:	2300      	movs	r3, #0
 8000806:	7811      	ldrb	r1, [r2, #0]
 8000808:	20ff      	movs	r0, #255	; 0xff
 800080a:	4001      	ands	r1, r0
 800080c:	20ff      	movs	r0, #255	; 0xff
 800080e:	4383      	bics	r3, r0
 8000810:	430b      	orrs	r3, r1
 8000812:	7851      	ldrb	r1, [r2, #1]
 8000814:	20ff      	movs	r0, #255	; 0xff
 8000816:	4001      	ands	r1, r0
 8000818:	0209      	lsls	r1, r1, #8
 800081a:	4808      	ldr	r0, [pc, #32]	; (800083c <HSVtoPixel+0x1e4>)
 800081c:	4003      	ands	r3, r0
 800081e:	430b      	orrs	r3, r1
 8000820:	7892      	ldrb	r2, [r2, #2]
 8000822:	21ff      	movs	r1, #255	; 0xff
 8000824:	400a      	ands	r2, r1
 8000826:	0412      	lsls	r2, r2, #16
 8000828:	4905      	ldr	r1, [pc, #20]	; (8000840 <HSVtoPixel+0x1e8>)
 800082a:	400b      	ands	r3, r1
 800082c:	4313      	orrs	r3, r2
}
 800082e:	0018      	movs	r0, r3
 8000830:	46bd      	mov	sp, r7
 8000832:	b006      	add	sp, #24
 8000834:	bdb0      	pop	{r4, r5, r7, pc}
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	0800552c 	.word	0x0800552c
 800083c:	ffff00ff 	.word	0xffff00ff
 8000840:	ff00ffff 	.word	0xff00ffff

08000844 <ws2812_start>:
/* Variables -----------------------------------------------*/
static uint8_t LEDbuffer[LED_BUFFER_SIZE];
extern TIM_HandleTypeDef htim2;

/* Functions -----------------------------------------------*/
void ws2812_start(void) {
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
	fillBufferBlack();
 8000848:	f000 f89a 	bl	8000980 <fillBufferBlack>
	htim2.Init.Period = TIMER_PERIOD - 1;
 800084c:	4b07      	ldr	r3, [pc, #28]	; (800086c <ws2812_start+0x28>)
 800084e:	2209      	movs	r2, #9
 8000850:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Init(&htim2);
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <ws2812_start+0x28>)
 8000854:	0018      	movs	r0, r3
 8000856:	f002 fb41 	bl	8002edc <HAL_TIM_Base_Init>
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *) LEDbuffer,
 800085a:	4b05      	ldr	r3, [pc, #20]	; (8000870 <ws2812_start+0x2c>)
 800085c:	4a05      	ldr	r2, [pc, #20]	; (8000874 <ws2812_start+0x30>)
 800085e:	4803      	ldr	r0, [pc, #12]	; (800086c <ws2812_start+0x28>)
 8000860:	2100      	movs	r1, #0
 8000862:	f002 fbe3 	bl	800302c <HAL_TIM_PWM_Start_DMA>
				LED_BUFFER_SIZE);
	//HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
}
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000b30 	.word	0x20000b30
 8000870:	00000a61 	.word	0x00000a61
 8000874:	2000008c 	.word	0x2000008c

08000878 <setLEDcolor>:
void ws2812_update(void) {
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *) LEDbuffer,
			LED_BUFFER_SIZE);
}

void setLEDcolor(uint32_t LEDnumber, uint8_t RED, uint8_t GREEN, uint8_t BLUE) {
 8000878:	b590      	push	{r4, r7, lr}
 800087a:	b08b      	sub	sp, #44	; 0x2c
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	000c      	movs	r4, r1
 8000882:	0010      	movs	r0, r2
 8000884:	0019      	movs	r1, r3
 8000886:	1cfb      	adds	r3, r7, #3
 8000888:	1c22      	adds	r2, r4, #0
 800088a:	701a      	strb	r2, [r3, #0]
 800088c:	1cbb      	adds	r3, r7, #2
 800088e:	1c02      	adds	r2, r0, #0
 8000890:	701a      	strb	r2, [r3, #0]
 8000892:	1c7b      	adds	r3, r7, #1
 8000894:	1c0a      	adds	r2, r1, #0
 8000896:	701a      	strb	r2, [r3, #0]
	uint8_t tempBuffer[24];
	uint32_t i;
	uint32_t LEDindex;
	LEDindex = LEDnumber % LED_NUMBER;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	215e      	movs	r1, #94	; 0x5e
 800089c:	0018      	movs	r0, r3
 800089e:	f7ff fcb9 	bl	8000214 <__aeabi_uidivmod>
 80008a2:	000b      	movs	r3, r1
 80008a4:	623b      	str	r3, [r7, #32]

	for (i = 0; i < 8; i++) // GREEN data
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
 80008aa:	e013      	b.n	80008d4 <setLEDcolor+0x5c>
		tempBuffer[i] = ((GREEN << i) & 0x80) ? WS2812_1 : WS2812_0;
 80008ac:	1cbb      	adds	r3, r7, #2
 80008ae:	781a      	ldrb	r2, [r3, #0]
 80008b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b2:	409a      	lsls	r2, r3
 80008b4:	0013      	movs	r3, r2
 80008b6:	2280      	movs	r2, #128	; 0x80
 80008b8:	4013      	ands	r3, r2
 80008ba:	d001      	beq.n	80008c0 <setLEDcolor+0x48>
 80008bc:	2106      	movs	r1, #6
 80008be:	e000      	b.n	80008c2 <setLEDcolor+0x4a>
 80008c0:	2103      	movs	r1, #3
 80008c2:	2308      	movs	r3, #8
 80008c4:	18fa      	adds	r2, r7, r3
 80008c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c8:	18d3      	adds	r3, r2, r3
 80008ca:	1c0a      	adds	r2, r1, #0
 80008cc:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) // GREEN data
 80008ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d0:	3301      	adds	r3, #1
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
 80008d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d6:	2b07      	cmp	r3, #7
 80008d8:	d9e8      	bls.n	80008ac <setLEDcolor+0x34>
	for (i = 0; i < 8; i++) // RED
 80008da:	2300      	movs	r3, #0
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
 80008de:	e012      	b.n	8000906 <setLEDcolor+0x8e>
		tempBuffer[8 + i] = ((RED << i) & 0x80) ? WS2812_1 : WS2812_0;
 80008e0:	1cfb      	adds	r3, r7, #3
 80008e2:	781a      	ldrb	r2, [r3, #0]
 80008e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e6:	409a      	lsls	r2, r3
 80008e8:	0013      	movs	r3, r2
 80008ea:	2280      	movs	r2, #128	; 0x80
 80008ec:	4013      	ands	r3, r2
 80008ee:	d001      	beq.n	80008f4 <setLEDcolor+0x7c>
 80008f0:	2106      	movs	r1, #6
 80008f2:	e000      	b.n	80008f6 <setLEDcolor+0x7e>
 80008f4:	2103      	movs	r1, #3
 80008f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f8:	3308      	adds	r3, #8
 80008fa:	2208      	movs	r2, #8
 80008fc:	18ba      	adds	r2, r7, r2
 80008fe:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < 8; i++) // RED
 8000900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000902:	3301      	adds	r3, #1
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
 8000906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000908:	2b07      	cmp	r3, #7
 800090a:	d9e9      	bls.n	80008e0 <setLEDcolor+0x68>
	for (i = 0; i < 8; i++) // BLUE
 800090c:	2300      	movs	r3, #0
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
 8000910:	e012      	b.n	8000938 <setLEDcolor+0xc0>
		tempBuffer[16 + i] = ((BLUE << i) & 0x80) ? WS2812_1 : WS2812_0;
 8000912:	1c7b      	adds	r3, r7, #1
 8000914:	781a      	ldrb	r2, [r3, #0]
 8000916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000918:	409a      	lsls	r2, r3
 800091a:	0013      	movs	r3, r2
 800091c:	2280      	movs	r2, #128	; 0x80
 800091e:	4013      	ands	r3, r2
 8000920:	d001      	beq.n	8000926 <setLEDcolor+0xae>
 8000922:	2106      	movs	r1, #6
 8000924:	e000      	b.n	8000928 <setLEDcolor+0xb0>
 8000926:	2103      	movs	r1, #3
 8000928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800092a:	3310      	adds	r3, #16
 800092c:	2208      	movs	r2, #8
 800092e:	18ba      	adds	r2, r7, r2
 8000930:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < 8; i++) // BLUE
 8000932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000934:	3301      	adds	r3, #1
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
 8000938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800093a:	2b07      	cmp	r3, #7
 800093c:	d9e9      	bls.n	8000912 <setLEDcolor+0x9a>

	for (i = 0; i < 24; i++)
 800093e:	2300      	movs	r3, #0
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
 8000942:	e012      	b.n	800096a <setLEDcolor+0xf2>
		LEDbuffer[RESET_SLOTS_BEGIN + LEDindex * 24 + i] = tempBuffer[i];
 8000944:	6a3a      	ldr	r2, [r7, #32]
 8000946:	0013      	movs	r3, r2
 8000948:	005b      	lsls	r3, r3, #1
 800094a:	189b      	adds	r3, r3, r2
 800094c:	00db      	lsls	r3, r3, #3
 800094e:	001a      	movs	r2, r3
 8000950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000952:	18d3      	adds	r3, r2, r3
 8000954:	33c8      	adds	r3, #200	; 0xc8
 8000956:	2208      	movs	r2, #8
 8000958:	18b9      	adds	r1, r7, r2
 800095a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800095c:	188a      	adds	r2, r1, r2
 800095e:	7811      	ldrb	r1, [r2, #0]
 8000960:	4a06      	ldr	r2, [pc, #24]	; (800097c <setLEDcolor+0x104>)
 8000962:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < 24; i++)
 8000964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000966:	3301      	adds	r3, #1
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
 800096a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800096c:	2b17      	cmp	r3, #23
 800096e:	d9e9      	bls.n	8000944 <setLEDcolor+0xcc>
}
 8000970:	46c0      	nop			; (mov r8, r8)
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	46bd      	mov	sp, r7
 8000976:	b00b      	add	sp, #44	; 0x2c
 8000978:	bd90      	pop	{r4, r7, pc}
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	2000008c 	.word	0x2000008c

08000980 <fillBufferBlack>:

	for (index = 0; index < LED_NUMBER; index++)
		setLEDcolor(index, RED, GREEN, BLUE);
}

void fillBufferBlack(void) {
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
	/*Fill LED buffer - ALL OFF*/
	uint32_t index, buffIndex;
	buffIndex = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	603b      	str	r3, [r7, #0]

	for (index = 0; index < RESET_SLOTS_BEGIN; index++) {
 800098a:	2300      	movs	r3, #0
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	e00a      	b.n	80009a6 <fillBufferBlack+0x26>
		LEDbuffer[buffIndex] = WS2812_RESET;
 8000990:	4a1f      	ldr	r2, [pc, #124]	; (8000a10 <fillBufferBlack+0x90>)
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	18d3      	adds	r3, r2, r3
 8000996:	2200      	movs	r2, #0
 8000998:	701a      	strb	r2, [r3, #0]
		buffIndex++;
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	3301      	adds	r3, #1
 800099e:	603b      	str	r3, [r7, #0]
	for (index = 0; index < RESET_SLOTS_BEGIN; index++) {
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	3301      	adds	r3, #1
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2bc7      	cmp	r3, #199	; 0xc7
 80009aa:	d9f1      	bls.n	8000990 <fillBufferBlack+0x10>
	}
	for (index = 0; index < LED_DATA_SIZE; index++) {
 80009ac:	2300      	movs	r3, #0
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	e00a      	b.n	80009c8 <fillBufferBlack+0x48>
		LEDbuffer[buffIndex] = WS2812_0;
 80009b2:	4a17      	ldr	r2, [pc, #92]	; (8000a10 <fillBufferBlack+0x90>)
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	18d3      	adds	r3, r2, r3
 80009b8:	2203      	movs	r2, #3
 80009ba:	701a      	strb	r2, [r3, #0]
		buffIndex++;
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	3301      	adds	r3, #1
 80009c0:	603b      	str	r3, [r7, #0]
	for (index = 0; index < LED_DATA_SIZE; index++) {
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	3301      	adds	r3, #1
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687a      	ldr	r2, [r7, #4]
 80009ca:	238d      	movs	r3, #141	; 0x8d
 80009cc:	011b      	lsls	r3, r3, #4
 80009ce:	429a      	cmp	r2, r3
 80009d0:	d3ef      	bcc.n	80009b2 <fillBufferBlack+0x32>
	}
	LEDbuffer[buffIndex] = WS2812_0;
 80009d2:	4a0f      	ldr	r2, [pc, #60]	; (8000a10 <fillBufferBlack+0x90>)
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	18d3      	adds	r3, r2, r3
 80009d8:	2203      	movs	r2, #3
 80009da:	701a      	strb	r2, [r3, #0]
	buffIndex++;
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	3301      	adds	r3, #1
 80009e0:	603b      	str	r3, [r7, #0]
	for (index = 0; index < RESET_SLOTS_END; index++) {
 80009e2:	2300      	movs	r3, #0
 80009e4:	607b      	str	r3, [r7, #4]
 80009e6:	e00a      	b.n	80009fe <fillBufferBlack+0x7e>
		LEDbuffer[buffIndex] = 0;
 80009e8:	4a09      	ldr	r2, [pc, #36]	; (8000a10 <fillBufferBlack+0x90>)
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	18d3      	adds	r3, r2, r3
 80009ee:	2200      	movs	r2, #0
 80009f0:	701a      	strb	r2, [r3, #0]
		buffIndex++;
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	3301      	adds	r3, #1
 80009f6:	603b      	str	r3, [r7, #0]
	for (index = 0; index < RESET_SLOTS_END; index++) {
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	3301      	adds	r3, #1
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2bc7      	cmp	r3, #199	; 0xc7
 8000a02:	d9f1      	bls.n	80009e8 <fillBufferBlack+0x68>
	}
}
 8000a04:	46c0      	nop			; (mov r8, r8)
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	b002      	add	sp, #8
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	2000008c 	.word	0x2000008c

08000a14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a14:	b5b0      	push	{r4, r5, r7, lr}
 8000a16:	b08c      	sub	sp, #48	; 0x30
 8000a18:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a1a:	f000 fd71 	bl	8001500 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a1e:	f000 f8ed 	bl	8000bfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a22:	f000 fa7b 	bl	8000f1c <MX_GPIO_Init>
  MX_DMA_Init();
 8000a26:	f000 fa53 	bl	8000ed0 <MX_DMA_Init>
  MX_TIM2_Init();
 8000a2a:	f000 f9a1 	bl	8000d70 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000a2e:	f000 fa1d 	bl	8000e6c <MX_USART1_UART_Init>
  MX_ADC_Init();
 8000a32:	f000 f941 	bl	8000cb8 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  ws2812_start();
 8000a36:	f7ff ff05 	bl	8000844 <ws2812_start>
  HAL_UART_Receive_IT(&huart1, Rx_data, 19);
 8000a3a:	496c      	ldr	r1, [pc, #432]	; (8000bec <main+0x1d8>)
 8000a3c:	4b6c      	ldr	r3, [pc, #432]	; (8000bf0 <main+0x1dc>)
 8000a3e:	2213      	movs	r2, #19
 8000a40:	0018      	movs	r0, r3
 8000a42:	f003 fae3 	bl	800400c <HAL_UART_Receive_IT>
  //HAL_ADC_Calibration_Start(&hadc);



  uint8_t H =0;
 8000a46:	2327      	movs	r3, #39	; 0x27
 8000a48:	18fb      	adds	r3, r7, r3
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	701a      	strb	r2, [r3, #0]



  uint8_t valADC=0;
 8000a4e:	2325      	movs	r3, #37	; 0x25
 8000a50:	18fb      	adds	r3, r7, r3
 8000a52:	2200      	movs	r2, #0
 8000a54:	701a      	strb	r2, [r3, #0]

  // Déclarez une instance de Canvas
  Canvas myCanvas;
  Canvas blackCanvas;
  // Initialisez la structure Canvas
  myCanvas.numCols = NUM_COLS;
 8000a56:	2414      	movs	r4, #20
 8000a58:	193b      	adds	r3, r7, r4
 8000a5a:	2213      	movs	r2, #19
 8000a5c:	601a      	str	r2, [r3, #0]
  myCanvas.numRows = NUM_ROWS;
 8000a5e:	193b      	adds	r3, r7, r4
 8000a60:	2205      	movs	r2, #5
 8000a62:	605a      	str	r2, [r3, #4]
  // Allouez de la mémoire pour les pixels
  myCanvas.pixels = malloc(sizeof(Pixel) * NUM_COLS * NUM_ROWS);
 8000a64:	231e      	movs	r3, #30
 8000a66:	33ff      	adds	r3, #255	; 0xff
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f004 fc7b 	bl	8005364 <malloc>
 8000a6e:	0003      	movs	r3, r0
 8000a70:	001a      	movs	r2, r3
 8000a72:	193b      	adds	r3, r7, r4
 8000a74:	609a      	str	r2, [r3, #8]
  // Utilisez memset pour initialiser le tableau à zéro
  memset(myCanvas.pixels, 0, sizeof(Pixel) * NUM_COLS * NUM_ROWS);
 8000a76:	193b      	adds	r3, r7, r4
 8000a78:	689b      	ldr	r3, [r3, #8]
 8000a7a:	221e      	movs	r2, #30
 8000a7c:	32ff      	adds	r2, #255	; 0xff
 8000a7e:	2100      	movs	r1, #0
 8000a80:	0018      	movs	r0, r3
 8000a82:	f004 fc82 	bl	800538a <memset>


  blackCanvas.numCols = NUM_COLS;
 8000a86:	2408      	movs	r4, #8
 8000a88:	193b      	adds	r3, r7, r4
 8000a8a:	2213      	movs	r2, #19
 8000a8c:	601a      	str	r2, [r3, #0]
    blackCanvas.numRows = NUM_ROWS;
 8000a8e:	193b      	adds	r3, r7, r4
 8000a90:	2205      	movs	r2, #5
 8000a92:	605a      	str	r2, [r3, #4]
    // Allouez de la mémoire pour les pixels
    blackCanvas.pixels = malloc(sizeof(Pixel) * NUM_COLS * NUM_ROWS);
 8000a94:	231e      	movs	r3, #30
 8000a96:	33ff      	adds	r3, #255	; 0xff
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f004 fc63 	bl	8005364 <malloc>
 8000a9e:	0003      	movs	r3, r0
 8000aa0:	001a      	movs	r2, r3
 8000aa2:	193b      	adds	r3, r7, r4
 8000aa4:	609a      	str	r2, [r3, #8]
    // Utilisez memset pour initialiser le tableau à zéro
    memset(blackCanvas.pixels, 0, sizeof(Pixel) * NUM_COLS * NUM_ROWS);
 8000aa6:	193b      	adds	r3, r7, r4
 8000aa8:	689b      	ldr	r3, [r3, #8]
 8000aaa:	221e      	movs	r2, #30
 8000aac:	32ff      	adds	r2, #255	; 0xff
 8000aae:	2100      	movs	r1, #0
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	f004 fc6a 	bl	800538a <memset>
  // Vous pouvez maintenant utiliser myCanvas et les pixels initialisé
  setCanvasColor(&blackCanvas, (Pixel){0,0,0});
 8000ab6:	1d3b      	adds	r3, r7, #4
 8000ab8:	2200      	movs	r2, #0
 8000aba:	701a      	strb	r2, [r3, #0]
 8000abc:	1d3b      	adds	r3, r7, #4
 8000abe:	2200      	movs	r2, #0
 8000ac0:	705a      	strb	r2, [r3, #1]
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	709a      	strb	r2, [r3, #2]
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	193a      	adds	r2, r7, r4
 8000acc:	6819      	ldr	r1, [r3, #0]
 8000ace:	0010      	movs	r0, r2
 8000ad0:	f7ff fc90 	bl	80003f4 <setCanvasColor>
//
//	  ReadADC = HAL_ADC_GetValue(&hadc);



	  if(HAL_UART_Receive_IT(&huart1, Rx_data, 19) != HAL_BUSY)
 8000ad4:	4945      	ldr	r1, [pc, #276]	; (8000bec <main+0x1d8>)
 8000ad6:	4b46      	ldr	r3, [pc, #280]	; (8000bf0 <main+0x1dc>)
 8000ad8:	2213      	movs	r2, #19
 8000ada:	0018      	movs	r0, r3
 8000adc:	f003 fa96 	bl	800400c <HAL_UART_Receive_IT>
 8000ae0:	0003      	movs	r3, r0
 8000ae2:	2b02      	cmp	r3, #2
 8000ae4:	d005      	beq.n	8000af2 <main+0xde>
	  {
		  HAL_UART_Receive_IT(&huart1, Rx_data, 19);
 8000ae6:	4941      	ldr	r1, [pc, #260]	; (8000bec <main+0x1d8>)
 8000ae8:	4b41      	ldr	r3, [pc, #260]	; (8000bf0 <main+0x1dc>)
 8000aea:	2213      	movs	r2, #19
 8000aec:	0018      	movs	r0, r3
 8000aee:	f003 fa8d 	bl	800400c <HAL_UART_Receive_IT>
	  }
	  /**********Background***************/

	  for(uint8_t diag=1; diag<=23; diag++){
 8000af2:	2326      	movs	r3, #38	; 0x26
 8000af4:	18fb      	adds	r3, r7, r3
 8000af6:	2201      	movs	r2, #1
 8000af8:	701a      	strb	r2, [r3, #0]
 8000afa:	e031      	b.n	8000b60 <main+0x14c>
		  colorDiagonal(&myCanvas, HSVtoPixel((H + (diag* 255 / 23))%255 , MAX_LUX), diag);
 8000afc:	2327      	movs	r3, #39	; 0x27
 8000afe:	18fb      	adds	r3, r7, r3
 8000b00:	781c      	ldrb	r4, [r3, #0]
 8000b02:	2526      	movs	r5, #38	; 0x26
 8000b04:	197b      	adds	r3, r7, r5
 8000b06:	781a      	ldrb	r2, [r3, #0]
 8000b08:	0013      	movs	r3, r2
 8000b0a:	021b      	lsls	r3, r3, #8
 8000b0c:	1a9b      	subs	r3, r3, r2
 8000b0e:	2117      	movs	r1, #23
 8000b10:	0018      	movs	r0, r3
 8000b12:	f7ff fb83 	bl	800021c <__divsi3>
 8000b16:	0003      	movs	r3, r0
 8000b18:	18e3      	adds	r3, r4, r3
 8000b1a:	21ff      	movs	r1, #255	; 0xff
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f7ff fc63 	bl	80003e8 <__aeabi_idivmod>
 8000b22:	000b      	movs	r3, r1
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	21fe      	movs	r1, #254	; 0xfe
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f7ff fd95 	bl	8000658 <HSVtoPixel>
 8000b2e:	0003      	movs	r3, r0
 8000b30:	001a      	movs	r2, r3
 8000b32:	2020      	movs	r0, #32
 8000b34:	183b      	adds	r3, r7, r0
 8000b36:	1c11      	adds	r1, r2, #0
 8000b38:	7019      	strb	r1, [r3, #0]
 8000b3a:	0411      	lsls	r1, r2, #16
 8000b3c:	0e09      	lsrs	r1, r1, #24
 8000b3e:	7059      	strb	r1, [r3, #1]
 8000b40:	0212      	lsls	r2, r2, #8
 8000b42:	0e12      	lsrs	r2, r2, #24
 8000b44:	709a      	strb	r2, [r3, #2]
 8000b46:	197b      	adds	r3, r7, r5
 8000b48:	781a      	ldrb	r2, [r3, #0]
 8000b4a:	183b      	adds	r3, r7, r0
 8000b4c:	2114      	movs	r1, #20
 8000b4e:	1878      	adds	r0, r7, r1
 8000b50:	6819      	ldr	r1, [r3, #0]
 8000b52:	f7ff fce9 	bl	8000528 <colorDiagonal>
	  for(uint8_t diag=1; diag<=23; diag++){
 8000b56:	197b      	adds	r3, r7, r5
 8000b58:	781a      	ldrb	r2, [r3, #0]
 8000b5a:	197b      	adds	r3, r7, r5
 8000b5c:	3201      	adds	r2, #1
 8000b5e:	701a      	strb	r2, [r3, #0]
 8000b60:	2326      	movs	r3, #38	; 0x26
 8000b62:	18fb      	adds	r3, r7, r3
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	2b17      	cmp	r3, #23
 8000b68:	d9c8      	bls.n	8000afc <main+0xe8>
	  }

	  displayBCD(&myCanvas, 2, 3, Heures_D, 2);
 8000b6a:	4b22      	ldr	r3, [pc, #136]	; (8000bf4 <main+0x1e0>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	001a      	movs	r2, r3
 8000b70:	2414      	movs	r4, #20
 8000b72:	1938      	adds	r0, r7, r4
 8000b74:	2302      	movs	r3, #2
 8000b76:	9300      	str	r3, [sp, #0]
 8000b78:	0013      	movs	r3, r2
 8000b7a:	2203      	movs	r2, #3
 8000b7c:	2102      	movs	r1, #2
 8000b7e:	f7ff fd0d 	bl	800059c <displayBCD>
	  displayBCD(&myCanvas, 5, 3, Heures_U, 4);
 8000b82:	4b1d      	ldr	r3, [pc, #116]	; (8000bf8 <main+0x1e4>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	001a      	movs	r2, r3
 8000b88:	1938      	adds	r0, r7, r4
 8000b8a:	2304      	movs	r3, #4
 8000b8c:	9300      	str	r3, [sp, #0]
 8000b8e:	0013      	movs	r3, r2
 8000b90:	2203      	movs	r2, #3
 8000b92:	2105      	movs	r1, #5
 8000b94:	f7ff fd02 	bl	800059c <displayBCD>
	  displayBCD(&myCanvas, 10, 3, Heures_D, 4);
 8000b98:	4b16      	ldr	r3, [pc, #88]	; (8000bf4 <main+0x1e0>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	001a      	movs	r2, r3
 8000b9e:	1938      	adds	r0, r7, r4
 8000ba0:	2304      	movs	r3, #4
 8000ba2:	9300      	str	r3, [sp, #0]
 8000ba4:	0013      	movs	r3, r2
 8000ba6:	2203      	movs	r2, #3
 8000ba8:	210a      	movs	r1, #10
 8000baa:	f7ff fcf7 	bl	800059c <displayBCD>
	  displayBCD(&myCanvas, 15, 3, Heures_U, 4);
 8000bae:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <main+0x1e4>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	001a      	movs	r2, r3
 8000bb4:	1938      	adds	r0, r7, r4
 8000bb6:	2304      	movs	r3, #4
 8000bb8:	9300      	str	r3, [sp, #0]
 8000bba:	0013      	movs	r3, r2
 8000bbc:	2203      	movs	r2, #3
 8000bbe:	210f      	movs	r1, #15
 8000bc0:	f7ff fcec 	bl	800059c <displayBCD>

	  sendCanvas(&myCanvas);
 8000bc4:	193b      	adds	r3, r7, r4
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	f7ff fc43 	bl	8000452 <sendCanvas>

	  if (H >= 255){
 8000bcc:	2227      	movs	r2, #39	; 0x27
 8000bce:	18bb      	adds	r3, r7, r2
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2bff      	cmp	r3, #255	; 0xff
 8000bd4:	d103      	bne.n	8000bde <main+0x1ca>
		  H=0;
 8000bd6:	18bb      	adds	r3, r7, r2
 8000bd8:	2200      	movs	r2, #0
 8000bda:	701a      	strb	r2, [r3, #0]
 8000bdc:	e77a      	b.n	8000ad4 <main+0xc0>
	  }
	  else{
		  H++;
 8000bde:	2127      	movs	r1, #39	; 0x27
 8000be0:	187b      	adds	r3, r7, r1
 8000be2:	781a      	ldrb	r2, [r3, #0]
 8000be4:	187b      	adds	r3, r7, r1
 8000be6:	3201      	adds	r2, #1
 8000be8:	701a      	strb	r2, [r3, #0]
	  if(HAL_UART_Receive_IT(&huart1, Rx_data, 19) != HAL_BUSY)
 8000bea:	e773      	b.n	8000ad4 <main+0xc0>
 8000bec:	20000c90 	.word	0x20000c90
 8000bf0:	20000bbc 	.word	0x20000bbc
 8000bf4:	20000c8a 	.word	0x20000c8a
 8000bf8:	20000c89 	.word	0x20000c89

08000bfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bfc:	b590      	push	{r4, r7, lr}
 8000bfe:	b099      	sub	sp, #100	; 0x64
 8000c00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c02:	242c      	movs	r4, #44	; 0x2c
 8000c04:	193b      	adds	r3, r7, r4
 8000c06:	0018      	movs	r0, r3
 8000c08:	2334      	movs	r3, #52	; 0x34
 8000c0a:	001a      	movs	r2, r3
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	f004 fbbc 	bl	800538a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c12:	231c      	movs	r3, #28
 8000c14:	18fb      	adds	r3, r7, r3
 8000c16:	0018      	movs	r0, r3
 8000c18:	2310      	movs	r3, #16
 8000c1a:	001a      	movs	r2, r3
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	f004 fbb4 	bl	800538a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	0018      	movs	r0, r3
 8000c26:	2318      	movs	r3, #24
 8000c28:	001a      	movs	r2, r3
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	f004 fbad 	bl	800538a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000c30:	0021      	movs	r1, r4
 8000c32:	187b      	adds	r3, r7, r1
 8000c34:	2212      	movs	r2, #18
 8000c36:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c38:	187b      	adds	r3, r7, r1
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000c3e:	187b      	adds	r3, r7, r1
 8000c40:	2201      	movs	r2, #1
 8000c42:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c44:	187b      	adds	r3, r7, r1
 8000c46:	2210      	movs	r2, #16
 8000c48:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000c4a:	187b      	adds	r3, r7, r1
 8000c4c:	2210      	movs	r2, #16
 8000c4e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c50:	187b      	adds	r3, r7, r1
 8000c52:	2200      	movs	r2, #0
 8000c54:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c56:	187b      	adds	r3, r7, r1
 8000c58:	0018      	movs	r0, r3
 8000c5a:	f001 fb5f 	bl	800231c <HAL_RCC_OscConfig>
 8000c5e:	1e03      	subs	r3, r0, #0
 8000c60:	d001      	beq.n	8000c66 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000c62:	f000 fa1d 	bl	80010a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c66:	211c      	movs	r1, #28
 8000c68:	187b      	adds	r3, r7, r1
 8000c6a:	2207      	movs	r2, #7
 8000c6c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c6e:	187b      	adds	r3, r7, r1
 8000c70:	2200      	movs	r2, #0
 8000c72:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c74:	187b      	adds	r3, r7, r1
 8000c76:	2200      	movs	r2, #0
 8000c78:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c7a:	187b      	adds	r3, r7, r1
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c80:	187b      	adds	r3, r7, r1
 8000c82:	2100      	movs	r1, #0
 8000c84:	0018      	movs	r0, r3
 8000c86:	f001 fecf 	bl	8002a28 <HAL_RCC_ClockConfig>
 8000c8a:	1e03      	subs	r3, r0, #0
 8000c8c:	d001      	beq.n	8000c92 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000c8e:	f000 fa07 	bl	80010a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c92:	1d3b      	adds	r3, r7, #4
 8000c94:	2201      	movs	r2, #1
 8000c96:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c9e:	1d3b      	adds	r3, r7, #4
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	f002 f82d 	bl	8002d00 <HAL_RCCEx_PeriphCLKConfig>
 8000ca6:	1e03      	subs	r3, r0, #0
 8000ca8:	d001      	beq.n	8000cae <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000caa:	f000 f9f9 	bl	80010a0 <Error_Handler>
  }
}
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	b019      	add	sp, #100	; 0x64
 8000cb4:	bd90      	pop	{r4, r7, pc}
	...

08000cb8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cbe:	1d3b      	adds	r3, r7, #4
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	230c      	movs	r3, #12
 8000cc4:	001a      	movs	r2, r3
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	f004 fb5f 	bl	800538a <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000ccc:	4b26      	ldr	r3, [pc, #152]	; (8000d68 <MX_ADC_Init+0xb0>)
 8000cce:	4a27      	ldr	r2, [pc, #156]	; (8000d6c <MX_ADC_Init+0xb4>)
 8000cd0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000cd2:	4b25      	ldr	r3, [pc, #148]	; (8000d68 <MX_ADC_Init+0xb0>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_8B;
 8000cd8:	4b23      	ldr	r3, [pc, #140]	; (8000d68 <MX_ADC_Init+0xb0>)
 8000cda:	2210      	movs	r2, #16
 8000cdc:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cde:	4b22      	ldr	r3, [pc, #136]	; (8000d68 <MX_ADC_Init+0xb0>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000ce4:	4b20      	ldr	r3, [pc, #128]	; (8000d68 <MX_ADC_Init+0xb0>)
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cea:	4b1f      	ldr	r3, [pc, #124]	; (8000d68 <MX_ADC_Init+0xb0>)
 8000cec:	2204      	movs	r2, #4
 8000cee:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000cf0:	4b1d      	ldr	r3, [pc, #116]	; (8000d68 <MX_ADC_Init+0xb0>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000cf6:	4b1c      	ldr	r3, [pc, #112]	; (8000d68 <MX_ADC_Init+0xb0>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000cfc:	4b1a      	ldr	r3, [pc, #104]	; (8000d68 <MX_ADC_Init+0xb0>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000d02:	4b19      	ldr	r3, [pc, #100]	; (8000d68 <MX_ADC_Init+0xb0>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d08:	4b17      	ldr	r3, [pc, #92]	; (8000d68 <MX_ADC_Init+0xb0>)
 8000d0a:	22c2      	movs	r2, #194	; 0xc2
 8000d0c:	32ff      	adds	r2, #255	; 0xff
 8000d0e:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d10:	4b15      	ldr	r3, [pc, #84]	; (8000d68 <MX_ADC_Init+0xb0>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000d16:	4b14      	ldr	r3, [pc, #80]	; (8000d68 <MX_ADC_Init+0xb0>)
 8000d18:	2224      	movs	r2, #36	; 0x24
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d1e:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <MX_ADC_Init+0xb0>)
 8000d20:	2201      	movs	r2, #1
 8000d22:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000d24:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <MX_ADC_Init+0xb0>)
 8000d26:	0018      	movs	r0, r3
 8000d28:	f000 fc4e 	bl	80015c8 <HAL_ADC_Init>
 8000d2c:	1e03      	subs	r3, r0, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000d30:	f000 f9b6 	bl	80010a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000d34:	1d3b      	adds	r3, r7, #4
 8000d36:	2207      	movs	r2, #7
 8000d38:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000d3a:	1d3b      	adds	r3, r7, #4
 8000d3c:	2280      	movs	r2, #128	; 0x80
 8000d3e:	0152      	lsls	r2, r2, #5
 8000d40:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d42:	1d3b      	adds	r3, r7, #4
 8000d44:	2280      	movs	r2, #128	; 0x80
 8000d46:	0552      	lsls	r2, r2, #21
 8000d48:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000d4a:	1d3a      	adds	r2, r7, #4
 8000d4c:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <MX_ADC_Init+0xb0>)
 8000d4e:	0011      	movs	r1, r2
 8000d50:	0018      	movs	r0, r3
 8000d52:	f000 fd79 	bl	8001848 <HAL_ADC_ConfigChannel>
 8000d56:	1e03      	subs	r3, r0, #0
 8000d58:	d001      	beq.n	8000d5e <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000d5a:	f000 f9a1 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000d5e:	46c0      	nop			; (mov r8, r8)
 8000d60:	46bd      	mov	sp, r7
 8000d62:	b004      	add	sp, #16
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	46c0      	nop			; (mov r8, r8)
 8000d68:	20000af0 	.word	0x20000af0
 8000d6c:	40012400 	.word	0x40012400

08000d70 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08e      	sub	sp, #56	; 0x38
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d76:	2328      	movs	r3, #40	; 0x28
 8000d78:	18fb      	adds	r3, r7, r3
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	2310      	movs	r3, #16
 8000d7e:	001a      	movs	r2, r3
 8000d80:	2100      	movs	r1, #0
 8000d82:	f004 fb02 	bl	800538a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d86:	2320      	movs	r3, #32
 8000d88:	18fb      	adds	r3, r7, r3
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	2308      	movs	r3, #8
 8000d8e:	001a      	movs	r2, r3
 8000d90:	2100      	movs	r1, #0
 8000d92:	f004 fafa 	bl	800538a <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d96:	1d3b      	adds	r3, r7, #4
 8000d98:	0018      	movs	r0, r3
 8000d9a:	231c      	movs	r3, #28
 8000d9c:	001a      	movs	r2, r3
 8000d9e:	2100      	movs	r1, #0
 8000da0:	f004 faf3 	bl	800538a <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000da4:	4b30      	ldr	r3, [pc, #192]	; (8000e68 <MX_TIM2_Init+0xf8>)
 8000da6:	2280      	movs	r2, #128	; 0x80
 8000da8:	05d2      	lsls	r2, r2, #23
 8000daa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000dac:	4b2e      	ldr	r3, [pc, #184]	; (8000e68 <MX_TIM2_Init+0xf8>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db2:	4b2d      	ldr	r3, [pc, #180]	; (8000e68 <MX_TIM2_Init+0xf8>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 8000db8:	4b2b      	ldr	r3, [pc, #172]	; (8000e68 <MX_TIM2_Init+0xf8>)
 8000dba:	2209      	movs	r2, #9
 8000dbc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dbe:	4b2a      	ldr	r3, [pc, #168]	; (8000e68 <MX_TIM2_Init+0xf8>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc4:	4b28      	ldr	r3, [pc, #160]	; (8000e68 <MX_TIM2_Init+0xf8>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dca:	4b27      	ldr	r3, [pc, #156]	; (8000e68 <MX_TIM2_Init+0xf8>)
 8000dcc:	0018      	movs	r0, r3
 8000dce:	f002 f885 	bl	8002edc <HAL_TIM_Base_Init>
 8000dd2:	1e03      	subs	r3, r0, #0
 8000dd4:	d001      	beq.n	8000dda <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000dd6:	f000 f963 	bl	80010a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dda:	2128      	movs	r1, #40	; 0x28
 8000ddc:	187b      	adds	r3, r7, r1
 8000dde:	2280      	movs	r2, #128	; 0x80
 8000de0:	0152      	lsls	r2, r2, #5
 8000de2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000de4:	187a      	adds	r2, r7, r1
 8000de6:	4b20      	ldr	r3, [pc, #128]	; (8000e68 <MX_TIM2_Init+0xf8>)
 8000de8:	0011      	movs	r1, r2
 8000dea:	0018      	movs	r0, r3
 8000dec:	f002 fb8e 	bl	800350c <HAL_TIM_ConfigClockSource>
 8000df0:	1e03      	subs	r3, r0, #0
 8000df2:	d001      	beq.n	8000df8 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000df4:	f000 f954 	bl	80010a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000df8:	4b1b      	ldr	r3, [pc, #108]	; (8000e68 <MX_TIM2_Init+0xf8>)
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	f002 f8be 	bl	8002f7c <HAL_TIM_PWM_Init>
 8000e00:	1e03      	subs	r3, r0, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000e04:	f000 f94c 	bl	80010a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e08:	2120      	movs	r1, #32
 8000e0a:	187b      	adds	r3, r7, r1
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e10:	187b      	adds	r3, r7, r1
 8000e12:	2200      	movs	r2, #0
 8000e14:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e16:	187a      	adds	r2, r7, r1
 8000e18:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <MX_TIM2_Init+0xf8>)
 8000e1a:	0011      	movs	r1, r2
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	f003 f849 	bl	8003eb4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e22:	1e03      	subs	r3, r0, #0
 8000e24:	d001      	beq.n	8000e2a <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000e26:	f000 f93b 	bl	80010a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	2260      	movs	r2, #96	; 0x60
 8000e2e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000e30:	1d3b      	adds	r3, r7, #4
 8000e32:	2200      	movs	r2, #0
 8000e34:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	2200      	movs	r2, #0
 8000e3a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e3c:	1d3b      	adds	r3, r7, #4
 8000e3e:	2200      	movs	r2, #0
 8000e40:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e42:	1d39      	adds	r1, r7, #4
 8000e44:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <MX_TIM2_Init+0xf8>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	0018      	movs	r0, r3
 8000e4a:	f002 fa99 	bl	8003380 <HAL_TIM_PWM_ConfigChannel>
 8000e4e:	1e03      	subs	r3, r0, #0
 8000e50:	d001      	beq.n	8000e56 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8000e52:	f000 f925 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e56:	4b04      	ldr	r3, [pc, #16]	; (8000e68 <MX_TIM2_Init+0xf8>)
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f000 f9d9 	bl	8001210 <HAL_TIM_MspPostInit>

}
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	46bd      	mov	sp, r7
 8000e62:	b00e      	add	sp, #56	; 0x38
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	46c0      	nop			; (mov r8, r8)
 8000e68:	20000b30 	.word	0x20000b30

08000e6c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e70:	4b14      	ldr	r3, [pc, #80]	; (8000ec4 <MX_USART1_UART_Init+0x58>)
 8000e72:	4a15      	ldr	r2, [pc, #84]	; (8000ec8 <MX_USART1_UART_Init+0x5c>)
 8000e74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 250000;
 8000e76:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <MX_USART1_UART_Init+0x58>)
 8000e78:	4a14      	ldr	r2, [pc, #80]	; (8000ecc <MX_USART1_UART_Init+0x60>)
 8000e7a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e7c:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <MX_USART1_UART_Init+0x58>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e82:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <MX_USART1_UART_Init+0x58>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e88:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <MX_USART1_UART_Init+0x58>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ec4 <MX_USART1_UART_Init+0x58>)
 8000e90:	220c      	movs	r2, #12
 8000e92:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e94:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <MX_USART1_UART_Init+0x58>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <MX_USART1_UART_Init+0x58>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ea0:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <MX_USART1_UART_Init+0x58>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ea6:	4b07      	ldr	r3, [pc, #28]	; (8000ec4 <MX_USART1_UART_Init+0x58>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000eac:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <MX_USART1_UART_Init+0x58>)
 8000eae:	0018      	movs	r0, r3
 8000eb0:	f003 f858 	bl	8003f64 <HAL_UART_Init>
 8000eb4:	1e03      	subs	r3, r0, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 8000eb8:	f000 f8f2 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ebc:	46c0      	nop			; (mov r8, r8)
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	46c0      	nop			; (mov r8, r8)
 8000ec4:	20000bbc 	.word	0x20000bbc
 8000ec8:	40013800 	.word	0x40013800
 8000ecc:	0003d090 	.word	0x0003d090

08000ed0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ed6:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <MX_DMA_Init+0x48>)
 8000ed8:	695a      	ldr	r2, [r3, #20]
 8000eda:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <MX_DMA_Init+0x48>)
 8000edc:	2101      	movs	r1, #1
 8000ede:	430a      	orrs	r2, r1
 8000ee0:	615a      	str	r2, [r3, #20]
 8000ee2:	4b0d      	ldr	r3, [pc, #52]	; (8000f18 <MX_DMA_Init+0x48>)
 8000ee4:	695b      	ldr	r3, [r3, #20]
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	4013      	ands	r3, r2
 8000eea:	607b      	str	r3, [r7, #4]
 8000eec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	200a      	movs	r0, #10
 8000ef4:	f000 fe62 	bl	8001bbc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000ef8:	200a      	movs	r0, #10
 8000efa:	f000 fe74 	bl	8001be6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2100      	movs	r1, #0
 8000f02:	200b      	movs	r0, #11
 8000f04:	f000 fe5a 	bl	8001bbc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8000f08:	200b      	movs	r0, #11
 8000f0a:	f000 fe6c 	bl	8001be6 <HAL_NVIC_EnableIRQ>

}
 8000f0e:	46c0      	nop			; (mov r8, r8)
 8000f10:	46bd      	mov	sp, r7
 8000f12:	b002      	add	sp, #8
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	46c0      	nop			; (mov r8, r8)
 8000f18:	40021000 	.word	0x40021000

08000f1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f1c:	b590      	push	{r4, r7, lr}
 8000f1e:	b089      	sub	sp, #36	; 0x24
 8000f20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f22:	240c      	movs	r4, #12
 8000f24:	193b      	adds	r3, r7, r4
 8000f26:	0018      	movs	r0, r3
 8000f28:	2314      	movs	r3, #20
 8000f2a:	001a      	movs	r2, r3
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	f004 fa2c 	bl	800538a <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f32:	4b27      	ldr	r3, [pc, #156]	; (8000fd0 <MX_GPIO_Init+0xb4>)
 8000f34:	695a      	ldr	r2, [r3, #20]
 8000f36:	4b26      	ldr	r3, [pc, #152]	; (8000fd0 <MX_GPIO_Init+0xb4>)
 8000f38:	2180      	movs	r1, #128	; 0x80
 8000f3a:	03c9      	lsls	r1, r1, #15
 8000f3c:	430a      	orrs	r2, r1
 8000f3e:	615a      	str	r2, [r3, #20]
 8000f40:	4b23      	ldr	r3, [pc, #140]	; (8000fd0 <MX_GPIO_Init+0xb4>)
 8000f42:	695a      	ldr	r2, [r3, #20]
 8000f44:	2380      	movs	r3, #128	; 0x80
 8000f46:	03db      	lsls	r3, r3, #15
 8000f48:	4013      	ands	r3, r2
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	4b20      	ldr	r3, [pc, #128]	; (8000fd0 <MX_GPIO_Init+0xb4>)
 8000f50:	695a      	ldr	r2, [r3, #20]
 8000f52:	4b1f      	ldr	r3, [pc, #124]	; (8000fd0 <MX_GPIO_Init+0xb4>)
 8000f54:	2180      	movs	r1, #128	; 0x80
 8000f56:	0289      	lsls	r1, r1, #10
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	615a      	str	r2, [r3, #20]
 8000f5c:	4b1c      	ldr	r3, [pc, #112]	; (8000fd0 <MX_GPIO_Init+0xb4>)
 8000f5e:	695a      	ldr	r2, [r3, #20]
 8000f60:	2380      	movs	r3, #128	; 0x80
 8000f62:	029b      	lsls	r3, r3, #10
 8000f64:	4013      	ands	r3, r2
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6a:	4b19      	ldr	r3, [pc, #100]	; (8000fd0 <MX_GPIO_Init+0xb4>)
 8000f6c:	695a      	ldr	r2, [r3, #20]
 8000f6e:	4b18      	ldr	r3, [pc, #96]	; (8000fd0 <MX_GPIO_Init+0xb4>)
 8000f70:	2180      	movs	r1, #128	; 0x80
 8000f72:	02c9      	lsls	r1, r1, #11
 8000f74:	430a      	orrs	r2, r1
 8000f76:	615a      	str	r2, [r3, #20]
 8000f78:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <MX_GPIO_Init+0xb4>)
 8000f7a:	695a      	ldr	r2, [r3, #20]
 8000f7c:	2380      	movs	r3, #128	; 0x80
 8000f7e:	02db      	lsls	r3, r3, #11
 8000f80:	4013      	ands	r3, r2
 8000f82:	603b      	str	r3, [r7, #0]
 8000f84:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : SW4_Pin SW3_Pin */
  GPIO_InitStruct.Pin = SW4_Pin|SW3_Pin;
 8000f86:	193b      	adds	r3, r7, r4
 8000f88:	2290      	movs	r2, #144	; 0x90
 8000f8a:	0112      	lsls	r2, r2, #4
 8000f8c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f8e:	193b      	adds	r3, r7, r4
 8000f90:	2200      	movs	r2, #0
 8000f92:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	193b      	adds	r3, r7, r4
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9a:	193a      	adds	r2, r7, r4
 8000f9c:	2390      	movs	r3, #144	; 0x90
 8000f9e:	05db      	lsls	r3, r3, #23
 8000fa0:	0011      	movs	r1, r2
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	f001 f852 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 8000fa8:	193b      	adds	r3, r7, r4
 8000faa:	2230      	movs	r2, #48	; 0x30
 8000fac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fae:	193b      	adds	r3, r7, r4
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	193b      	adds	r3, r7, r4
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fba:	193b      	adds	r3, r7, r4
 8000fbc:	4a05      	ldr	r2, [pc, #20]	; (8000fd4 <MX_GPIO_Init+0xb8>)
 8000fbe:	0019      	movs	r1, r3
 8000fc0:	0010      	movs	r0, r2
 8000fc2:	f001 f843 	bl	800204c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fc6:	46c0      	nop			; (mov r8, r8)
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	b009      	add	sp, #36	; 0x24
 8000fcc:	bd90      	pop	{r4, r7, pc}
 8000fce:	46c0      	nop			; (mov r8, r8)
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	48000400 	.word	0x48000400

08000fd8 <HAL_UART_RxCpltCallback>:
* Interruption qui va mettre dans des variables la réception UART comme le	  *
* temps										 								  *
******************************************************************************/

void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]

	if(&huart1 == huart)
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	4b1c      	ldr	r3, [pc, #112]	; (8001054 <HAL_UART_RxCpltCallback+0x7c>)
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d130      	bne.n	800104a <HAL_UART_RxCpltCallback+0x72>
	{
		Heures_brt = Rx_data[4];	//Stock le data des heures, "brt" = brute
 8000fe8:	4b1b      	ldr	r3, [pc, #108]	; (8001058 <HAL_UART_RxCpltCallback+0x80>)
 8000fea:	791a      	ldrb	r2, [r3, #4]
 8000fec:	4b1b      	ldr	r3, [pc, #108]	; (800105c <HAL_UART_RxCpltCallback+0x84>)
 8000fee:	701a      	strb	r2, [r3, #0]
		Minutes_brt = Rx_data[5];	//Stock le data des minutes
 8000ff0:	4b19      	ldr	r3, [pc, #100]	; (8001058 <HAL_UART_RxCpltCallback+0x80>)
 8000ff2:	795a      	ldrb	r2, [r3, #5]
 8000ff4:	4b1a      	ldr	r3, [pc, #104]	; (8001060 <HAL_UART_RxCpltCallback+0x88>)
 8000ff6:	701a      	strb	r2, [r3, #0]

		Heures_U = Heures_brt & 0x0F;	//Traite le data pour avoir l'Unité des Heures
 8000ff8:	4b18      	ldr	r3, [pc, #96]	; (800105c <HAL_UART_RxCpltCallback+0x84>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	220f      	movs	r2, #15
 8000ffe:	4013      	ands	r3, r2
 8001000:	b2da      	uxtb	r2, r3
 8001002:	4b18      	ldr	r3, [pc, #96]	; (8001064 <HAL_UART_RxCpltCallback+0x8c>)
 8001004:	701a      	strb	r2, [r3, #0]

		Heures_D = (Heures_brt & 0xF0) >> 4;	//Traite le data pour avoir la Dizaine des Heures
 8001006:	4b15      	ldr	r3, [pc, #84]	; (800105c <HAL_UART_RxCpltCallback+0x84>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	091b      	lsrs	r3, r3, #4
 800100c:	b2da      	uxtb	r2, r3
 800100e:	4b16      	ldr	r3, [pc, #88]	; (8001068 <HAL_UART_RxCpltCallback+0x90>)
 8001010:	701a      	strb	r2, [r3, #0]

		Minutes_U = Minutes_brt & 0x0F;	//Traite le data pour avoir l'Unité des Minutes
 8001012:	4b13      	ldr	r3, [pc, #76]	; (8001060 <HAL_UART_RxCpltCallback+0x88>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	220f      	movs	r2, #15
 8001018:	4013      	ands	r3, r2
 800101a:	b2da      	uxtb	r2, r3
 800101c:	4b13      	ldr	r3, [pc, #76]	; (800106c <HAL_UART_RxCpltCallback+0x94>)
 800101e:	701a      	strb	r2, [r3, #0]

		Minutes_D = (Minutes_brt & 0xF0) >> 4;	//Traite le data pour avoir la Dizaine des Minutes
 8001020:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <HAL_UART_RxCpltCallback+0x88>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	091b      	lsrs	r3, r3, #4
 8001026:	b2da      	uxtb	r2, r3
 8001028:	4b11      	ldr	r3, [pc, #68]	; (8001070 <HAL_UART_RxCpltCallback+0x98>)
 800102a:	701a      	strb	r2, [r3, #0]

		if(HAL_UART_Receive_IT(&huart1, Rx_data, 19) == HAL_ERROR)	//Réception d'UART lors d'une erreur
 800102c:	490a      	ldr	r1, [pc, #40]	; (8001058 <HAL_UART_RxCpltCallback+0x80>)
 800102e:	4b09      	ldr	r3, [pc, #36]	; (8001054 <HAL_UART_RxCpltCallback+0x7c>)
 8001030:	2213      	movs	r2, #19
 8001032:	0018      	movs	r0, r3
 8001034:	f002 ffea 	bl	800400c <HAL_UART_Receive_IT>
 8001038:	0003      	movs	r3, r0
 800103a:	2b01      	cmp	r3, #1
 800103c:	d105      	bne.n	800104a <HAL_UART_RxCpltCallback+0x72>
		{
			HAL_UART_Receive_IT(&huart1, Rx_data, 19);
 800103e:	4906      	ldr	r1, [pc, #24]	; (8001058 <HAL_UART_RxCpltCallback+0x80>)
 8001040:	4b04      	ldr	r3, [pc, #16]	; (8001054 <HAL_UART_RxCpltCallback+0x7c>)
 8001042:	2213      	movs	r2, #19
 8001044:	0018      	movs	r0, r3
 8001046:	f002 ffe1 	bl	800400c <HAL_UART_Receive_IT>
		}
	}
}
 800104a:	46c0      	nop			; (mov r8, r8)
 800104c:	46bd      	mov	sp, r7
 800104e:	b002      	add	sp, #8
 8001050:	bd80      	pop	{r7, pc}
 8001052:	46c0      	nop			; (mov r8, r8)
 8001054:	20000bbc 	.word	0x20000bbc
 8001058:	20000c90 	.word	0x20000c90
 800105c:	20000c88 	.word	0x20000c88
 8001060:	20000c8b 	.word	0x20000c8b
 8001064:	20000c89 	.word	0x20000c89
 8001068:	20000c8a 	.word	0x20000c8a
 800106c:	20000c8c 	.word	0x20000c8c
 8001070:	20000c8d 	.word	0x20000c8d

08001074 <HAL_UART_ErrorCallback>:
* Interruption lorsqu'il y a un problème dans la transmission UART qui permet *
* de refaire une réception									 				  *
******************************************************************************/

void HAL_UART_ErrorCallback (UART_HandleTypeDef * huart)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
	if(&huart1 == huart)
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <HAL_UART_ErrorCallback+0x24>)
 8001080:	429a      	cmp	r2, r3
 8001082:	d105      	bne.n	8001090 <HAL_UART_ErrorCallback+0x1c>
	{
		HAL_UART_Receive_IT(&huart1, Rx_data, 19);
 8001084:	4905      	ldr	r1, [pc, #20]	; (800109c <HAL_UART_ErrorCallback+0x28>)
 8001086:	4b04      	ldr	r3, [pc, #16]	; (8001098 <HAL_UART_ErrorCallback+0x24>)
 8001088:	2213      	movs	r2, #19
 800108a:	0018      	movs	r0, r3
 800108c:	f002 ffbe 	bl	800400c <HAL_UART_Receive_IT>
	}
}
 8001090:	46c0      	nop			; (mov r8, r8)
 8001092:	46bd      	mov	sp, r7
 8001094:	b002      	add	sp, #8
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20000bbc 	.word	0x20000bbc
 800109c:	20000c90 	.word	0x20000c90

080010a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a4:	b672      	cpsid	i
}
 80010a6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010a8:	e7fe      	b.n	80010a8 <Error_Handler+0x8>
	...

080010ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b2:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <HAL_MspInit+0x44>)
 80010b4:	699a      	ldr	r2, [r3, #24]
 80010b6:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <HAL_MspInit+0x44>)
 80010b8:	2101      	movs	r1, #1
 80010ba:	430a      	orrs	r2, r1
 80010bc:	619a      	str	r2, [r3, #24]
 80010be:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <HAL_MspInit+0x44>)
 80010c0:	699b      	ldr	r3, [r3, #24]
 80010c2:	2201      	movs	r2, #1
 80010c4:	4013      	ands	r3, r2
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ca:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <HAL_MspInit+0x44>)
 80010cc:	69da      	ldr	r2, [r3, #28]
 80010ce:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <HAL_MspInit+0x44>)
 80010d0:	2180      	movs	r1, #128	; 0x80
 80010d2:	0549      	lsls	r1, r1, #21
 80010d4:	430a      	orrs	r2, r1
 80010d6:	61da      	str	r2, [r3, #28]
 80010d8:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <HAL_MspInit+0x44>)
 80010da:	69da      	ldr	r2, [r3, #28]
 80010dc:	2380      	movs	r3, #128	; 0x80
 80010de:	055b      	lsls	r3, r3, #21
 80010e0:	4013      	ands	r3, r2
 80010e2:	603b      	str	r3, [r7, #0]
 80010e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010e6:	46c0      	nop			; (mov r8, r8)
 80010e8:	46bd      	mov	sp, r7
 80010ea:	b002      	add	sp, #8
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	46c0      	nop			; (mov r8, r8)
 80010f0:	40021000 	.word	0x40021000

080010f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010f4:	b590      	push	{r4, r7, lr}
 80010f6:	b08b      	sub	sp, #44	; 0x2c
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fc:	2414      	movs	r4, #20
 80010fe:	193b      	adds	r3, r7, r4
 8001100:	0018      	movs	r0, r3
 8001102:	2314      	movs	r3, #20
 8001104:	001a      	movs	r2, r3
 8001106:	2100      	movs	r1, #0
 8001108:	f004 f93f 	bl	800538a <memset>
  if(hadc->Instance==ADC1)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a19      	ldr	r2, [pc, #100]	; (8001178 <HAL_ADC_MspInit+0x84>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d12b      	bne.n	800116e <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001116:	4b19      	ldr	r3, [pc, #100]	; (800117c <HAL_ADC_MspInit+0x88>)
 8001118:	699a      	ldr	r2, [r3, #24]
 800111a:	4b18      	ldr	r3, [pc, #96]	; (800117c <HAL_ADC_MspInit+0x88>)
 800111c:	2180      	movs	r1, #128	; 0x80
 800111e:	0089      	lsls	r1, r1, #2
 8001120:	430a      	orrs	r2, r1
 8001122:	619a      	str	r2, [r3, #24]
 8001124:	4b15      	ldr	r3, [pc, #84]	; (800117c <HAL_ADC_MspInit+0x88>)
 8001126:	699a      	ldr	r2, [r3, #24]
 8001128:	2380      	movs	r3, #128	; 0x80
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	4013      	ands	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001132:	4b12      	ldr	r3, [pc, #72]	; (800117c <HAL_ADC_MspInit+0x88>)
 8001134:	695a      	ldr	r2, [r3, #20]
 8001136:	4b11      	ldr	r3, [pc, #68]	; (800117c <HAL_ADC_MspInit+0x88>)
 8001138:	2180      	movs	r1, #128	; 0x80
 800113a:	0289      	lsls	r1, r1, #10
 800113c:	430a      	orrs	r2, r1
 800113e:	615a      	str	r2, [r3, #20]
 8001140:	4b0e      	ldr	r3, [pc, #56]	; (800117c <HAL_ADC_MspInit+0x88>)
 8001142:	695a      	ldr	r2, [r3, #20]
 8001144:	2380      	movs	r3, #128	; 0x80
 8001146:	029b      	lsls	r3, r3, #10
 8001148:	4013      	ands	r3, r2
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA7     ------> ADC_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800114e:	193b      	adds	r3, r7, r4
 8001150:	2280      	movs	r2, #128	; 0x80
 8001152:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001154:	193b      	adds	r3, r7, r4
 8001156:	2203      	movs	r2, #3
 8001158:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	193b      	adds	r3, r7, r4
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001160:	193a      	adds	r2, r7, r4
 8001162:	2390      	movs	r3, #144	; 0x90
 8001164:	05db      	lsls	r3, r3, #23
 8001166:	0011      	movs	r1, r2
 8001168:	0018      	movs	r0, r3
 800116a:	f000 ff6f 	bl	800204c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800116e:	46c0      	nop			; (mov r8, r8)
 8001170:	46bd      	mov	sp, r7
 8001172:	b00b      	add	sp, #44	; 0x2c
 8001174:	bd90      	pop	{r4, r7, pc}
 8001176:	46c0      	nop			; (mov r8, r8)
 8001178:	40012400 	.word	0x40012400
 800117c:	40021000 	.word	0x40021000

08001180 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	2380      	movs	r3, #128	; 0x80
 800118e:	05db      	lsls	r3, r3, #23
 8001190:	429a      	cmp	r2, r3
 8001192:	d133      	bne.n	80011fc <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001194:	4b1b      	ldr	r3, [pc, #108]	; (8001204 <HAL_TIM_Base_MspInit+0x84>)
 8001196:	69da      	ldr	r2, [r3, #28]
 8001198:	4b1a      	ldr	r3, [pc, #104]	; (8001204 <HAL_TIM_Base_MspInit+0x84>)
 800119a:	2101      	movs	r1, #1
 800119c:	430a      	orrs	r2, r1
 800119e:	61da      	str	r2, [r3, #28]
 80011a0:	4b18      	ldr	r3, [pc, #96]	; (8001204 <HAL_TIM_Base_MspInit+0x84>)
 80011a2:	69db      	ldr	r3, [r3, #28]
 80011a4:	2201      	movs	r2, #1
 80011a6:	4013      	ands	r3, r2
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 80011ac:	4b16      	ldr	r3, [pc, #88]	; (8001208 <HAL_TIM_Base_MspInit+0x88>)
 80011ae:	4a17      	ldr	r2, [pc, #92]	; (800120c <HAL_TIM_Base_MspInit+0x8c>)
 80011b0:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011b2:	4b15      	ldr	r3, [pc, #84]	; (8001208 <HAL_TIM_Base_MspInit+0x88>)
 80011b4:	2210      	movs	r2, #16
 80011b6:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011b8:	4b13      	ldr	r3, [pc, #76]	; (8001208 <HAL_TIM_Base_MspInit+0x88>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80011be:	4b12      	ldr	r3, [pc, #72]	; (8001208 <HAL_TIM_Base_MspInit+0x88>)
 80011c0:	2280      	movs	r2, #128	; 0x80
 80011c2:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80011c4:	4b10      	ldr	r3, [pc, #64]	; (8001208 <HAL_TIM_Base_MspInit+0x88>)
 80011c6:	2280      	movs	r2, #128	; 0x80
 80011c8:	0092      	lsls	r2, r2, #2
 80011ca:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011cc:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <HAL_TIM_Base_MspInit+0x88>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 80011d2:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <HAL_TIM_Base_MspInit+0x88>)
 80011d4:	2220      	movs	r2, #32
 80011d6:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80011d8:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <HAL_TIM_Base_MspInit+0x88>)
 80011da:	2280      	movs	r2, #128	; 0x80
 80011dc:	0192      	lsls	r2, r2, #6
 80011de:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80011e0:	4b09      	ldr	r3, [pc, #36]	; (8001208 <HAL_TIM_Base_MspInit+0x88>)
 80011e2:	0018      	movs	r0, r3
 80011e4:	f000 fd1c 	bl	8001c20 <HAL_DMA_Init>
 80011e8:	1e03      	subs	r3, r0, #0
 80011ea:	d001      	beq.n	80011f0 <HAL_TIM_Base_MspInit+0x70>
    {
      Error_Handler();
 80011ec:	f7ff ff58 	bl	80010a0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4a05      	ldr	r2, [pc, #20]	; (8001208 <HAL_TIM_Base_MspInit+0x88>)
 80011f4:	625a      	str	r2, [r3, #36]	; 0x24
 80011f6:	4b04      	ldr	r3, [pc, #16]	; (8001208 <HAL_TIM_Base_MspInit+0x88>)
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80011fc:	46c0      	nop			; (mov r8, r8)
 80011fe:	46bd      	mov	sp, r7
 8001200:	b004      	add	sp, #16
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40021000 	.word	0x40021000
 8001208:	20000b78 	.word	0x20000b78
 800120c:	40020058 	.word	0x40020058

08001210 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001210:	b590      	push	{r4, r7, lr}
 8001212:	b089      	sub	sp, #36	; 0x24
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	240c      	movs	r4, #12
 800121a:	193b      	adds	r3, r7, r4
 800121c:	0018      	movs	r0, r3
 800121e:	2314      	movs	r3, #20
 8001220:	001a      	movs	r2, r3
 8001222:	2100      	movs	r1, #0
 8001224:	f004 f8b1 	bl	800538a <memset>
  if(htim->Instance==TIM2)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	2380      	movs	r3, #128	; 0x80
 800122e:	05db      	lsls	r3, r3, #23
 8001230:	429a      	cmp	r2, r3
 8001232:	d124      	bne.n	800127e <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001234:	4b14      	ldr	r3, [pc, #80]	; (8001288 <HAL_TIM_MspPostInit+0x78>)
 8001236:	695a      	ldr	r2, [r3, #20]
 8001238:	4b13      	ldr	r3, [pc, #76]	; (8001288 <HAL_TIM_MspPostInit+0x78>)
 800123a:	2180      	movs	r1, #128	; 0x80
 800123c:	0289      	lsls	r1, r1, #10
 800123e:	430a      	orrs	r2, r1
 8001240:	615a      	str	r2, [r3, #20]
 8001242:	4b11      	ldr	r3, [pc, #68]	; (8001288 <HAL_TIM_MspPostInit+0x78>)
 8001244:	695a      	ldr	r2, [r3, #20]
 8001246:	2380      	movs	r3, #128	; 0x80
 8001248:	029b      	lsls	r3, r3, #10
 800124a:	4013      	ands	r3, r2
 800124c:	60bb      	str	r3, [r7, #8]
 800124e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001250:	0021      	movs	r1, r4
 8001252:	187b      	adds	r3, r7, r1
 8001254:	2201      	movs	r2, #1
 8001256:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001258:	187b      	adds	r3, r7, r1
 800125a:	2202      	movs	r2, #2
 800125c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	187b      	adds	r3, r7, r1
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001264:	187b      	adds	r3, r7, r1
 8001266:	2200      	movs	r2, #0
 8001268:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800126a:	187b      	adds	r3, r7, r1
 800126c:	2202      	movs	r2, #2
 800126e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001270:	187a      	adds	r2, r7, r1
 8001272:	2390      	movs	r3, #144	; 0x90
 8001274:	05db      	lsls	r3, r3, #23
 8001276:	0011      	movs	r1, r2
 8001278:	0018      	movs	r0, r3
 800127a:	f000 fee7 	bl	800204c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800127e:	46c0      	nop			; (mov r8, r8)
 8001280:	46bd      	mov	sp, r7
 8001282:	b009      	add	sp, #36	; 0x24
 8001284:	bd90      	pop	{r4, r7, pc}
 8001286:	46c0      	nop			; (mov r8, r8)
 8001288:	40021000 	.word	0x40021000

0800128c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800128c:	b590      	push	{r4, r7, lr}
 800128e:	b08b      	sub	sp, #44	; 0x2c
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	2414      	movs	r4, #20
 8001296:	193b      	adds	r3, r7, r4
 8001298:	0018      	movs	r0, r3
 800129a:	2314      	movs	r3, #20
 800129c:	001a      	movs	r2, r3
 800129e:	2100      	movs	r1, #0
 80012a0:	f004 f873 	bl	800538a <memset>
  if(huart->Instance==USART1)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a34      	ldr	r2, [pc, #208]	; (800137c <HAL_UART_MspInit+0xf0>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d162      	bne.n	8001374 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012ae:	4b34      	ldr	r3, [pc, #208]	; (8001380 <HAL_UART_MspInit+0xf4>)
 80012b0:	699a      	ldr	r2, [r3, #24]
 80012b2:	4b33      	ldr	r3, [pc, #204]	; (8001380 <HAL_UART_MspInit+0xf4>)
 80012b4:	2180      	movs	r1, #128	; 0x80
 80012b6:	01c9      	lsls	r1, r1, #7
 80012b8:	430a      	orrs	r2, r1
 80012ba:	619a      	str	r2, [r3, #24]
 80012bc:	4b30      	ldr	r3, [pc, #192]	; (8001380 <HAL_UART_MspInit+0xf4>)
 80012be:	699a      	ldr	r2, [r3, #24]
 80012c0:	2380      	movs	r3, #128	; 0x80
 80012c2:	01db      	lsls	r3, r3, #7
 80012c4:	4013      	ands	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ca:	4b2d      	ldr	r3, [pc, #180]	; (8001380 <HAL_UART_MspInit+0xf4>)
 80012cc:	695a      	ldr	r2, [r3, #20]
 80012ce:	4b2c      	ldr	r3, [pc, #176]	; (8001380 <HAL_UART_MspInit+0xf4>)
 80012d0:	2180      	movs	r1, #128	; 0x80
 80012d2:	0289      	lsls	r1, r1, #10
 80012d4:	430a      	orrs	r2, r1
 80012d6:	615a      	str	r2, [r3, #20]
 80012d8:	4b29      	ldr	r3, [pc, #164]	; (8001380 <HAL_UART_MspInit+0xf4>)
 80012da:	695a      	ldr	r2, [r3, #20]
 80012dc:	2380      	movs	r3, #128	; 0x80
 80012de:	029b      	lsls	r3, r3, #10
 80012e0:	4013      	ands	r3, r2
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80012e6:	193b      	adds	r3, r7, r4
 80012e8:	22c0      	movs	r2, #192	; 0xc0
 80012ea:	00d2      	lsls	r2, r2, #3
 80012ec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ee:	0021      	movs	r1, r4
 80012f0:	187b      	adds	r3, r7, r1
 80012f2:	2202      	movs	r2, #2
 80012f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	187b      	adds	r3, r7, r1
 80012f8:	2200      	movs	r2, #0
 80012fa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012fc:	187b      	adds	r3, r7, r1
 80012fe:	2203      	movs	r2, #3
 8001300:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001302:	187b      	adds	r3, r7, r1
 8001304:	2201      	movs	r2, #1
 8001306:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001308:	187a      	adds	r2, r7, r1
 800130a:	2390      	movs	r3, #144	; 0x90
 800130c:	05db      	lsls	r3, r3, #23
 800130e:	0011      	movs	r1, r2
 8001310:	0018      	movs	r0, r3
 8001312:	f000 fe9b 	bl	800204c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8001316:	4b1b      	ldr	r3, [pc, #108]	; (8001384 <HAL_UART_MspInit+0xf8>)
 8001318:	4a1b      	ldr	r2, [pc, #108]	; (8001388 <HAL_UART_MspInit+0xfc>)
 800131a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800131c:	4b19      	ldr	r3, [pc, #100]	; (8001384 <HAL_UART_MspInit+0xf8>)
 800131e:	2210      	movs	r2, #16
 8001320:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001322:	4b18      	ldr	r3, [pc, #96]	; (8001384 <HAL_UART_MspInit+0xf8>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001328:	4b16      	ldr	r3, [pc, #88]	; (8001384 <HAL_UART_MspInit+0xf8>)
 800132a:	2280      	movs	r2, #128	; 0x80
 800132c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800132e:	4b15      	ldr	r3, [pc, #84]	; (8001384 <HAL_UART_MspInit+0xf8>)
 8001330:	2200      	movs	r2, #0
 8001332:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001334:	4b13      	ldr	r3, [pc, #76]	; (8001384 <HAL_UART_MspInit+0xf8>)
 8001336:	2200      	movs	r2, #0
 8001338:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800133a:	4b12      	ldr	r3, [pc, #72]	; (8001384 <HAL_UART_MspInit+0xf8>)
 800133c:	2200      	movs	r2, #0
 800133e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001340:	4b10      	ldr	r3, [pc, #64]	; (8001384 <HAL_UART_MspInit+0xf8>)
 8001342:	22c0      	movs	r2, #192	; 0xc0
 8001344:	0192      	lsls	r2, r2, #6
 8001346:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001348:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <HAL_UART_MspInit+0xf8>)
 800134a:	0018      	movs	r0, r3
 800134c:	f000 fc68 	bl	8001c20 <HAL_DMA_Init>
 8001350:	1e03      	subs	r3, r0, #0
 8001352:	d001      	beq.n	8001358 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001354:	f7ff fea4 	bl	80010a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4a0a      	ldr	r2, [pc, #40]	; (8001384 <HAL_UART_MspInit+0xf8>)
 800135c:	671a      	str	r2, [r3, #112]	; 0x70
 800135e:	4b09      	ldr	r3, [pc, #36]	; (8001384 <HAL_UART_MspInit+0xf8>)
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001364:	2200      	movs	r2, #0
 8001366:	2100      	movs	r1, #0
 8001368:	201b      	movs	r0, #27
 800136a:	f000 fc27 	bl	8001bbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800136e:	201b      	movs	r0, #27
 8001370:	f000 fc39 	bl	8001be6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001374:	46c0      	nop			; (mov r8, r8)
 8001376:	46bd      	mov	sp, r7
 8001378:	b00b      	add	sp, #44	; 0x2c
 800137a:	bd90      	pop	{r4, r7, pc}
 800137c:	40013800 	.word	0x40013800
 8001380:	40021000 	.word	0x40021000
 8001384:	20000c44 	.word	0x20000c44
 8001388:	4002001c 	.word	0x4002001c

0800138c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001390:	e7fe      	b.n	8001390 <NMI_Handler+0x4>

08001392 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001396:	e7fe      	b.n	8001396 <HardFault_Handler+0x4>

08001398 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800139c:	46c0      	nop			; (mov r8, r8)
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013a6:	46c0      	nop			; (mov r8, r8)
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013b0:	f000 f8ee 	bl	8001590 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013b4:	46c0      	nop			; (mov r8, r8)
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
	...

080013bc <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80013c0:	4b03      	ldr	r3, [pc, #12]	; (80013d0 <DMA1_Channel2_3_IRQHandler+0x14>)
 80013c2:	0018      	movs	r0, r3
 80013c4:	f000 fd57 	bl	8001e76 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80013c8:	46c0      	nop			; (mov r8, r8)
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	46c0      	nop			; (mov r8, r8)
 80013d0:	20000c44 	.word	0x20000c44

080013d4 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80013d8:	4b03      	ldr	r3, [pc, #12]	; (80013e8 <DMA1_Channel4_5_IRQHandler+0x14>)
 80013da:	0018      	movs	r0, r3
 80013dc:	f000 fd4b 	bl	8001e76 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 80013e0:	46c0      	nop			; (mov r8, r8)
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	46c0      	nop			; (mov r8, r8)
 80013e8:	20000b78 	.word	0x20000b78

080013ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80013f0:	4b03      	ldr	r3, [pc, #12]	; (8001400 <USART1_IRQHandler+0x14>)
 80013f2:	0018      	movs	r0, r3
 80013f4:	f002 fe62 	bl	80040bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80013f8:	46c0      	nop			; (mov r8, r8)
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	46c0      	nop			; (mov r8, r8)
 8001400:	20000bbc 	.word	0x20000bbc

08001404 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800140c:	4a14      	ldr	r2, [pc, #80]	; (8001460 <_sbrk+0x5c>)
 800140e:	4b15      	ldr	r3, [pc, #84]	; (8001464 <_sbrk+0x60>)
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001418:	4b13      	ldr	r3, [pc, #76]	; (8001468 <_sbrk+0x64>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d102      	bne.n	8001426 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001420:	4b11      	ldr	r3, [pc, #68]	; (8001468 <_sbrk+0x64>)
 8001422:	4a12      	ldr	r2, [pc, #72]	; (800146c <_sbrk+0x68>)
 8001424:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001426:	4b10      	ldr	r3, [pc, #64]	; (8001468 <_sbrk+0x64>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	18d3      	adds	r3, r2, r3
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	429a      	cmp	r2, r3
 8001432:	d207      	bcs.n	8001444 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001434:	f003 ff6c 	bl	8005310 <__errno>
 8001438:	0003      	movs	r3, r0
 800143a:	220c      	movs	r2, #12
 800143c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800143e:	2301      	movs	r3, #1
 8001440:	425b      	negs	r3, r3
 8001442:	e009      	b.n	8001458 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001444:	4b08      	ldr	r3, [pc, #32]	; (8001468 <_sbrk+0x64>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800144a:	4b07      	ldr	r3, [pc, #28]	; (8001468 <_sbrk+0x64>)
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	18d2      	adds	r2, r2, r3
 8001452:	4b05      	ldr	r3, [pc, #20]	; (8001468 <_sbrk+0x64>)
 8001454:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001456:	68fb      	ldr	r3, [r7, #12]
}
 8001458:	0018      	movs	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	b006      	add	sp, #24
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20001800 	.word	0x20001800
 8001464:	00000400 	.word	0x00000400
 8001468:	20000ca4 	.word	0x20000ca4
 800146c:	20000cc0 	.word	0x20000cc0

08001470 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001474:	46c0      	nop			; (mov r8, r8)
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
	...

0800147c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800147c:	4813      	ldr	r0, [pc, #76]	; (80014cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800147e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001480:	f7ff fff6 	bl	8001470 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8001484:	4812      	ldr	r0, [pc, #72]	; (80014d0 <LoopForever+0x6>)
    LDR R1, [R0]
 8001486:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001488:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800148a:	4a12      	ldr	r2, [pc, #72]	; (80014d4 <LoopForever+0xa>)
    CMP R1, R2
 800148c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800148e:	d105      	bne.n	800149c <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8001490:	4811      	ldr	r0, [pc, #68]	; (80014d8 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8001492:	4912      	ldr	r1, [pc, #72]	; (80014dc <LoopForever+0x12>)
    STR R1, [R0]
 8001494:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001496:	4812      	ldr	r0, [pc, #72]	; (80014e0 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001498:	4912      	ldr	r1, [pc, #72]	; (80014e4 <LoopForever+0x1a>)
    STR R1, [R0]
 800149a:	6001      	str	r1, [r0, #0]

0800149c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800149c:	4812      	ldr	r0, [pc, #72]	; (80014e8 <LoopForever+0x1e>)
  ldr r1, =_edata
 800149e:	4913      	ldr	r1, [pc, #76]	; (80014ec <LoopForever+0x22>)
  ldr r2, =_sidata
 80014a0:	4a13      	ldr	r2, [pc, #76]	; (80014f0 <LoopForever+0x26>)
  movs r3, #0
 80014a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014a4:	e002      	b.n	80014ac <LoopCopyDataInit>

080014a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014aa:	3304      	adds	r3, #4

080014ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014b0:	d3f9      	bcc.n	80014a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014b2:	4a10      	ldr	r2, [pc, #64]	; (80014f4 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80014b4:	4c10      	ldr	r4, [pc, #64]	; (80014f8 <LoopForever+0x2e>)
  movs r3, #0
 80014b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014b8:	e001      	b.n	80014be <LoopFillZerobss>

080014ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014bc:	3204      	adds	r2, #4

080014be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014c0:	d3fb      	bcc.n	80014ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80014c2:	f003 ff2b 	bl	800531c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014c6:	f7ff faa5 	bl	8000a14 <main>

080014ca <LoopForever>:

LoopForever:
    b LoopForever
 80014ca:	e7fe      	b.n	80014ca <LoopForever>
  ldr   r0, =_estack
 80014cc:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 80014d0:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80014d4:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 80014d8:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 80014dc:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80014e0:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80014e4:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80014e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014ec:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80014f0:	08005580 	.word	0x08005580
  ldr r2, =_sbss
 80014f4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80014f8:	20000cbc 	.word	0x20000cbc

080014fc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014fc:	e7fe      	b.n	80014fc <ADC1_IRQHandler>
	...

08001500 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001504:	4b07      	ldr	r3, [pc, #28]	; (8001524 <HAL_Init+0x24>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <HAL_Init+0x24>)
 800150a:	2110      	movs	r1, #16
 800150c:	430a      	orrs	r2, r1
 800150e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001510:	2000      	movs	r0, #0
 8001512:	f000 f809 	bl	8001528 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001516:	f7ff fdc9 	bl	80010ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800151a:	2300      	movs	r3, #0
}
 800151c:	0018      	movs	r0, r3
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	46c0      	nop			; (mov r8, r8)
 8001524:	40022000 	.word	0x40022000

08001528 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001528:	b590      	push	{r4, r7, lr}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001530:	4b14      	ldr	r3, [pc, #80]	; (8001584 <HAL_InitTick+0x5c>)
 8001532:	681c      	ldr	r4, [r3, #0]
 8001534:	4b14      	ldr	r3, [pc, #80]	; (8001588 <HAL_InitTick+0x60>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	0019      	movs	r1, r3
 800153a:	23fa      	movs	r3, #250	; 0xfa
 800153c:	0098      	lsls	r0, r3, #2
 800153e:	f7fe fde3 	bl	8000108 <__udivsi3>
 8001542:	0003      	movs	r3, r0
 8001544:	0019      	movs	r1, r3
 8001546:	0020      	movs	r0, r4
 8001548:	f7fe fdde 	bl	8000108 <__udivsi3>
 800154c:	0003      	movs	r3, r0
 800154e:	0018      	movs	r0, r3
 8001550:	f000 fb59 	bl	8001c06 <HAL_SYSTICK_Config>
 8001554:	1e03      	subs	r3, r0, #0
 8001556:	d001      	beq.n	800155c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e00f      	b.n	800157c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2b03      	cmp	r3, #3
 8001560:	d80b      	bhi.n	800157a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001562:	6879      	ldr	r1, [r7, #4]
 8001564:	2301      	movs	r3, #1
 8001566:	425b      	negs	r3, r3
 8001568:	2200      	movs	r2, #0
 800156a:	0018      	movs	r0, r3
 800156c:	f000 fb26 	bl	8001bbc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <HAL_InitTick+0x64>)
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001576:	2300      	movs	r3, #0
 8001578:	e000      	b.n	800157c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
}
 800157c:	0018      	movs	r0, r3
 800157e:	46bd      	mov	sp, r7
 8001580:	b003      	add	sp, #12
 8001582:	bd90      	pop	{r4, r7, pc}
 8001584:	20000000 	.word	0x20000000
 8001588:	20000008 	.word	0x20000008
 800158c:	20000004 	.word	0x20000004

08001590 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001594:	4b05      	ldr	r3, [pc, #20]	; (80015ac <HAL_IncTick+0x1c>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	001a      	movs	r2, r3
 800159a:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <HAL_IncTick+0x20>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	18d2      	adds	r2, r2, r3
 80015a0:	4b03      	ldr	r3, [pc, #12]	; (80015b0 <HAL_IncTick+0x20>)
 80015a2:	601a      	str	r2, [r3, #0]
}
 80015a4:	46c0      	nop			; (mov r8, r8)
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	46c0      	nop			; (mov r8, r8)
 80015ac:	20000008 	.word	0x20000008
 80015b0:	20000ca8 	.word	0x20000ca8

080015b4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  return uwTick;
 80015b8:	4b02      	ldr	r3, [pc, #8]	; (80015c4 <HAL_GetTick+0x10>)
 80015ba:	681b      	ldr	r3, [r3, #0]
}
 80015bc:	0018      	movs	r0, r3
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	46c0      	nop			; (mov r8, r8)
 80015c4:	20000ca8 	.word	0x20000ca8

080015c8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015d0:	230f      	movs	r3, #15
 80015d2:	18fb      	adds	r3, r7, r3
 80015d4:	2200      	movs	r2, #0
 80015d6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80015d8:	2300      	movs	r3, #0
 80015da:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d101      	bne.n	80015e6 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e125      	b.n	8001832 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d10a      	bne.n	8001604 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2234      	movs	r2, #52	; 0x34
 80015f8:	2100      	movs	r1, #0
 80015fa:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	0018      	movs	r0, r3
 8001600:	f7ff fd78 	bl	80010f4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001608:	2210      	movs	r2, #16
 800160a:	4013      	ands	r3, r2
 800160c:	d000      	beq.n	8001610 <HAL_ADC_Init+0x48>
 800160e:	e103      	b.n	8001818 <HAL_ADC_Init+0x250>
 8001610:	230f      	movs	r3, #15
 8001612:	18fb      	adds	r3, r7, r3
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d000      	beq.n	800161c <HAL_ADC_Init+0x54>
 800161a:	e0fd      	b.n	8001818 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	2204      	movs	r2, #4
 8001624:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001626:	d000      	beq.n	800162a <HAL_ADC_Init+0x62>
 8001628:	e0f6      	b.n	8001818 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800162e:	4a83      	ldr	r2, [pc, #524]	; (800183c <HAL_ADC_Init+0x274>)
 8001630:	4013      	ands	r3, r2
 8001632:	2202      	movs	r2, #2
 8001634:	431a      	orrs	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	2203      	movs	r2, #3
 8001642:	4013      	ands	r3, r2
 8001644:	2b01      	cmp	r3, #1
 8001646:	d112      	bne.n	800166e <HAL_ADC_Init+0xa6>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2201      	movs	r2, #1
 8001650:	4013      	ands	r3, r2
 8001652:	2b01      	cmp	r3, #1
 8001654:	d009      	beq.n	800166a <HAL_ADC_Init+0xa2>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	68da      	ldr	r2, [r3, #12]
 800165c:	2380      	movs	r3, #128	; 0x80
 800165e:	021b      	lsls	r3, r3, #8
 8001660:	401a      	ands	r2, r3
 8001662:	2380      	movs	r3, #128	; 0x80
 8001664:	021b      	lsls	r3, r3, #8
 8001666:	429a      	cmp	r2, r3
 8001668:	d101      	bne.n	800166e <HAL_ADC_Init+0xa6>
 800166a:	2301      	movs	r3, #1
 800166c:	e000      	b.n	8001670 <HAL_ADC_Init+0xa8>
 800166e:	2300      	movs	r3, #0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d116      	bne.n	80016a2 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	2218      	movs	r2, #24
 800167c:	4393      	bics	r3, r2
 800167e:	0019      	movs	r1, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689a      	ldr	r2, [r3, #8]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	430a      	orrs	r2, r1
 800168a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	691b      	ldr	r3, [r3, #16]
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	0899      	lsrs	r1, r3, #2
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685a      	ldr	r2, [r3, #4]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	430a      	orrs	r2, r1
 80016a0:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	68da      	ldr	r2, [r3, #12]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4964      	ldr	r1, [pc, #400]	; (8001840 <HAL_ADC_Init+0x278>)
 80016ae:	400a      	ands	r2, r1
 80016b0:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	7e1b      	ldrb	r3, [r3, #24]
 80016b6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	7e5b      	ldrb	r3, [r3, #25]
 80016bc:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80016be:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	7e9b      	ldrb	r3, [r3, #26]
 80016c4:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80016c6:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d002      	beq.n	80016d6 <HAL_ADC_Init+0x10e>
 80016d0:	2380      	movs	r3, #128	; 0x80
 80016d2:	015b      	lsls	r3, r3, #5
 80016d4:	e000      	b.n	80016d8 <HAL_ADC_Init+0x110>
 80016d6:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80016d8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80016de:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	691b      	ldr	r3, [r3, #16]
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d101      	bne.n	80016ec <HAL_ADC_Init+0x124>
 80016e8:	2304      	movs	r3, #4
 80016ea:	e000      	b.n	80016ee <HAL_ADC_Init+0x126>
 80016ec:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80016ee:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2124      	movs	r1, #36	; 0x24
 80016f4:	5c5b      	ldrb	r3, [r3, r1]
 80016f6:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80016f8:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80016fa:	68ba      	ldr	r2, [r7, #8]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	7edb      	ldrb	r3, [r3, #27]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d115      	bne.n	8001734 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	7e9b      	ldrb	r3, [r3, #26]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d105      	bne.n	800171c <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	2280      	movs	r2, #128	; 0x80
 8001714:	0252      	lsls	r2, r2, #9
 8001716:	4313      	orrs	r3, r2
 8001718:	60bb      	str	r3, [r7, #8]
 800171a:	e00b      	b.n	8001734 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001720:	2220      	movs	r2, #32
 8001722:	431a      	orrs	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800172c:	2201      	movs	r2, #1
 800172e:	431a      	orrs	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	69da      	ldr	r2, [r3, #28]
 8001738:	23c2      	movs	r3, #194	; 0xc2
 800173a:	33ff      	adds	r3, #255	; 0xff
 800173c:	429a      	cmp	r2, r3
 800173e:	d007      	beq.n	8001750 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001748:	4313      	orrs	r3, r2
 800174a:	68ba      	ldr	r2, [r7, #8]
 800174c:	4313      	orrs	r3, r2
 800174e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	68d9      	ldr	r1, [r3, #12]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	68ba      	ldr	r2, [r7, #8]
 800175c:	430a      	orrs	r2, r1
 800175e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001764:	2380      	movs	r3, #128	; 0x80
 8001766:	055b      	lsls	r3, r3, #21
 8001768:	429a      	cmp	r2, r3
 800176a:	d01b      	beq.n	80017a4 <HAL_ADC_Init+0x1dc>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001770:	2b01      	cmp	r3, #1
 8001772:	d017      	beq.n	80017a4 <HAL_ADC_Init+0x1dc>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001778:	2b02      	cmp	r3, #2
 800177a:	d013      	beq.n	80017a4 <HAL_ADC_Init+0x1dc>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001780:	2b03      	cmp	r3, #3
 8001782:	d00f      	beq.n	80017a4 <HAL_ADC_Init+0x1dc>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001788:	2b04      	cmp	r3, #4
 800178a:	d00b      	beq.n	80017a4 <HAL_ADC_Init+0x1dc>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001790:	2b05      	cmp	r3, #5
 8001792:	d007      	beq.n	80017a4 <HAL_ADC_Init+0x1dc>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001798:	2b06      	cmp	r3, #6
 800179a:	d003      	beq.n	80017a4 <HAL_ADC_Init+0x1dc>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a0:	2b07      	cmp	r3, #7
 80017a2:	d112      	bne.n	80017ca <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	695a      	ldr	r2, [r3, #20]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2107      	movs	r1, #7
 80017b0:	438a      	bics	r2, r1
 80017b2:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6959      	ldr	r1, [r3, #20]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017be:	2207      	movs	r2, #7
 80017c0:	401a      	ands	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	430a      	orrs	r2, r1
 80017c8:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	4a1c      	ldr	r2, [pc, #112]	; (8001844 <HAL_ADC_Init+0x27c>)
 80017d2:	4013      	ands	r3, r2
 80017d4:	68ba      	ldr	r2, [r7, #8]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d10b      	bne.n	80017f2 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017e4:	2203      	movs	r2, #3
 80017e6:	4393      	bics	r3, r2
 80017e8:	2201      	movs	r2, #1
 80017ea:	431a      	orrs	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80017f0:	e01c      	b.n	800182c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017f6:	2212      	movs	r2, #18
 80017f8:	4393      	bics	r3, r2
 80017fa:	2210      	movs	r2, #16
 80017fc:	431a      	orrs	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001806:	2201      	movs	r2, #1
 8001808:	431a      	orrs	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800180e:	230f      	movs	r3, #15
 8001810:	18fb      	adds	r3, r7, r3
 8001812:	2201      	movs	r2, #1
 8001814:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001816:	e009      	b.n	800182c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800181c:	2210      	movs	r2, #16
 800181e:	431a      	orrs	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001824:	230f      	movs	r3, #15
 8001826:	18fb      	adds	r3, r7, r3
 8001828:	2201      	movs	r2, #1
 800182a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800182c:	230f      	movs	r3, #15
 800182e:	18fb      	adds	r3, r7, r3
 8001830:	781b      	ldrb	r3, [r3, #0]
}
 8001832:	0018      	movs	r0, r3
 8001834:	46bd      	mov	sp, r7
 8001836:	b004      	add	sp, #16
 8001838:	bd80      	pop	{r7, pc}
 800183a:	46c0      	nop			; (mov r8, r8)
 800183c:	fffffefd 	.word	0xfffffefd
 8001840:	fffe0219 	.word	0xfffe0219
 8001844:	833fffe7 	.word	0x833fffe7

08001848 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001852:	230f      	movs	r3, #15
 8001854:	18fb      	adds	r3, r7, r3
 8001856:	2200      	movs	r2, #0
 8001858:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800185a:	2300      	movs	r3, #0
 800185c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001862:	2380      	movs	r3, #128	; 0x80
 8001864:	055b      	lsls	r3, r3, #21
 8001866:	429a      	cmp	r2, r3
 8001868:	d011      	beq.n	800188e <HAL_ADC_ConfigChannel+0x46>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186e:	2b01      	cmp	r3, #1
 8001870:	d00d      	beq.n	800188e <HAL_ADC_ConfigChannel+0x46>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001876:	2b02      	cmp	r3, #2
 8001878:	d009      	beq.n	800188e <HAL_ADC_ConfigChannel+0x46>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187e:	2b03      	cmp	r3, #3
 8001880:	d005      	beq.n	800188e <HAL_ADC_ConfigChannel+0x46>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001886:	2b04      	cmp	r3, #4
 8001888:	d001      	beq.n	800188e <HAL_ADC_ConfigChannel+0x46>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2234      	movs	r2, #52	; 0x34
 8001892:	5c9b      	ldrb	r3, [r3, r2]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d101      	bne.n	800189c <HAL_ADC_ConfigChannel+0x54>
 8001898:	2302      	movs	r3, #2
 800189a:	e0d0      	b.n	8001a3e <HAL_ADC_ConfigChannel+0x1f6>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2234      	movs	r2, #52	; 0x34
 80018a0:	2101      	movs	r1, #1
 80018a2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	2204      	movs	r2, #4
 80018ac:	4013      	ands	r3, r2
 80018ae:	d000      	beq.n	80018b2 <HAL_ADC_ConfigChannel+0x6a>
 80018b0:	e0b4      	b.n	8001a1c <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	4a64      	ldr	r2, [pc, #400]	; (8001a48 <HAL_ADC_ConfigChannel+0x200>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d100      	bne.n	80018be <HAL_ADC_ConfigChannel+0x76>
 80018bc:	e082      	b.n	80019c4 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2201      	movs	r2, #1
 80018ca:	409a      	lsls	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	430a      	orrs	r2, r1
 80018d2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018d8:	2380      	movs	r3, #128	; 0x80
 80018da:	055b      	lsls	r3, r3, #21
 80018dc:	429a      	cmp	r2, r3
 80018de:	d037      	beq.n	8001950 <HAL_ADC_ConfigChannel+0x108>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d033      	beq.n	8001950 <HAL_ADC_ConfigChannel+0x108>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d02f      	beq.n	8001950 <HAL_ADC_ConfigChannel+0x108>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f4:	2b03      	cmp	r3, #3
 80018f6:	d02b      	beq.n	8001950 <HAL_ADC_ConfigChannel+0x108>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fc:	2b04      	cmp	r3, #4
 80018fe:	d027      	beq.n	8001950 <HAL_ADC_ConfigChannel+0x108>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001904:	2b05      	cmp	r3, #5
 8001906:	d023      	beq.n	8001950 <HAL_ADC_ConfigChannel+0x108>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190c:	2b06      	cmp	r3, #6
 800190e:	d01f      	beq.n	8001950 <HAL_ADC_ConfigChannel+0x108>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001914:	2b07      	cmp	r3, #7
 8001916:	d01b      	beq.n	8001950 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	689a      	ldr	r2, [r3, #8]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	2107      	movs	r1, #7
 8001924:	400b      	ands	r3, r1
 8001926:	429a      	cmp	r2, r3
 8001928:	d012      	beq.n	8001950 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	695a      	ldr	r2, [r3, #20]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2107      	movs	r1, #7
 8001936:	438a      	bics	r2, r1
 8001938:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6959      	ldr	r1, [r3, #20]
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	2207      	movs	r2, #7
 8001946:	401a      	ands	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	430a      	orrs	r2, r1
 800194e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2b10      	cmp	r3, #16
 8001956:	d007      	beq.n	8001968 <HAL_ADC_ConfigChannel+0x120>
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2b11      	cmp	r3, #17
 800195e:	d003      	beq.n	8001968 <HAL_ADC_ConfigChannel+0x120>
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2b12      	cmp	r3, #18
 8001966:	d163      	bne.n	8001a30 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001968:	4b38      	ldr	r3, [pc, #224]	; (8001a4c <HAL_ADC_ConfigChannel+0x204>)
 800196a:	6819      	ldr	r1, [r3, #0]
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2b10      	cmp	r3, #16
 8001972:	d009      	beq.n	8001988 <HAL_ADC_ConfigChannel+0x140>
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2b11      	cmp	r3, #17
 800197a:	d102      	bne.n	8001982 <HAL_ADC_ConfigChannel+0x13a>
 800197c:	2380      	movs	r3, #128	; 0x80
 800197e:	03db      	lsls	r3, r3, #15
 8001980:	e004      	b.n	800198c <HAL_ADC_ConfigChannel+0x144>
 8001982:	2380      	movs	r3, #128	; 0x80
 8001984:	045b      	lsls	r3, r3, #17
 8001986:	e001      	b.n	800198c <HAL_ADC_ConfigChannel+0x144>
 8001988:	2380      	movs	r3, #128	; 0x80
 800198a:	041b      	lsls	r3, r3, #16
 800198c:	4a2f      	ldr	r2, [pc, #188]	; (8001a4c <HAL_ADC_ConfigChannel+0x204>)
 800198e:	430b      	orrs	r3, r1
 8001990:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2b10      	cmp	r3, #16
 8001998:	d14a      	bne.n	8001a30 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800199a:	4b2d      	ldr	r3, [pc, #180]	; (8001a50 <HAL_ADC_ConfigChannel+0x208>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	492d      	ldr	r1, [pc, #180]	; (8001a54 <HAL_ADC_ConfigChannel+0x20c>)
 80019a0:	0018      	movs	r0, r3
 80019a2:	f7fe fbb1 	bl	8000108 <__udivsi3>
 80019a6:	0003      	movs	r3, r0
 80019a8:	001a      	movs	r2, r3
 80019aa:	0013      	movs	r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	189b      	adds	r3, r3, r2
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019b4:	e002      	b.n	80019bc <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	3b01      	subs	r3, #1
 80019ba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1f9      	bne.n	80019b6 <HAL_ADC_ConfigChannel+0x16e>
 80019c2:	e035      	b.n	8001a30 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2101      	movs	r1, #1
 80019d0:	4099      	lsls	r1, r3
 80019d2:	000b      	movs	r3, r1
 80019d4:	43d9      	mvns	r1, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	400a      	ands	r2, r1
 80019dc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2b10      	cmp	r3, #16
 80019e4:	d007      	beq.n	80019f6 <HAL_ADC_ConfigChannel+0x1ae>
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2b11      	cmp	r3, #17
 80019ec:	d003      	beq.n	80019f6 <HAL_ADC_ConfigChannel+0x1ae>
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2b12      	cmp	r3, #18
 80019f4:	d11c      	bne.n	8001a30 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80019f6:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <HAL_ADC_ConfigChannel+0x204>)
 80019f8:	6819      	ldr	r1, [r3, #0]
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2b10      	cmp	r3, #16
 8001a00:	d007      	beq.n	8001a12 <HAL_ADC_ConfigChannel+0x1ca>
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2b11      	cmp	r3, #17
 8001a08:	d101      	bne.n	8001a0e <HAL_ADC_ConfigChannel+0x1c6>
 8001a0a:	4b13      	ldr	r3, [pc, #76]	; (8001a58 <HAL_ADC_ConfigChannel+0x210>)
 8001a0c:	e002      	b.n	8001a14 <HAL_ADC_ConfigChannel+0x1cc>
 8001a0e:	4b13      	ldr	r3, [pc, #76]	; (8001a5c <HAL_ADC_ConfigChannel+0x214>)
 8001a10:	e000      	b.n	8001a14 <HAL_ADC_ConfigChannel+0x1cc>
 8001a12:	4b13      	ldr	r3, [pc, #76]	; (8001a60 <HAL_ADC_ConfigChannel+0x218>)
 8001a14:	4a0d      	ldr	r2, [pc, #52]	; (8001a4c <HAL_ADC_ConfigChannel+0x204>)
 8001a16:	400b      	ands	r3, r1
 8001a18:	6013      	str	r3, [r2, #0]
 8001a1a:	e009      	b.n	8001a30 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a20:	2220      	movs	r2, #32
 8001a22:	431a      	orrs	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001a28:	230f      	movs	r3, #15
 8001a2a:	18fb      	adds	r3, r7, r3
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2234      	movs	r2, #52	; 0x34
 8001a34:	2100      	movs	r1, #0
 8001a36:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001a38:	230f      	movs	r3, #15
 8001a3a:	18fb      	adds	r3, r7, r3
 8001a3c:	781b      	ldrb	r3, [r3, #0]
}
 8001a3e:	0018      	movs	r0, r3
 8001a40:	46bd      	mov	sp, r7
 8001a42:	b004      	add	sp, #16
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	46c0      	nop			; (mov r8, r8)
 8001a48:	00001001 	.word	0x00001001
 8001a4c:	40012708 	.word	0x40012708
 8001a50:	20000000 	.word	0x20000000
 8001a54:	000f4240 	.word	0x000f4240
 8001a58:	ffbfffff 	.word	0xffbfffff
 8001a5c:	feffffff 	.word	0xfeffffff
 8001a60:	ff7fffff 	.word	0xff7fffff

08001a64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	0002      	movs	r2, r0
 8001a6c:	1dfb      	adds	r3, r7, #7
 8001a6e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001a70:	1dfb      	adds	r3, r7, #7
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b7f      	cmp	r3, #127	; 0x7f
 8001a76:	d809      	bhi.n	8001a8c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a78:	1dfb      	adds	r3, r7, #7
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	001a      	movs	r2, r3
 8001a7e:	231f      	movs	r3, #31
 8001a80:	401a      	ands	r2, r3
 8001a82:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <__NVIC_EnableIRQ+0x30>)
 8001a84:	2101      	movs	r1, #1
 8001a86:	4091      	lsls	r1, r2
 8001a88:	000a      	movs	r2, r1
 8001a8a:	601a      	str	r2, [r3, #0]
  }
}
 8001a8c:	46c0      	nop			; (mov r8, r8)
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	b002      	add	sp, #8
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	e000e100 	.word	0xe000e100

08001a98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a98:	b590      	push	{r4, r7, lr}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	0002      	movs	r2, r0
 8001aa0:	6039      	str	r1, [r7, #0]
 8001aa2:	1dfb      	adds	r3, r7, #7
 8001aa4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001aa6:	1dfb      	adds	r3, r7, #7
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	2b7f      	cmp	r3, #127	; 0x7f
 8001aac:	d828      	bhi.n	8001b00 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001aae:	4a2f      	ldr	r2, [pc, #188]	; (8001b6c <__NVIC_SetPriority+0xd4>)
 8001ab0:	1dfb      	adds	r3, r7, #7
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	b25b      	sxtb	r3, r3
 8001ab6:	089b      	lsrs	r3, r3, #2
 8001ab8:	33c0      	adds	r3, #192	; 0xc0
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	589b      	ldr	r3, [r3, r2]
 8001abe:	1dfa      	adds	r2, r7, #7
 8001ac0:	7812      	ldrb	r2, [r2, #0]
 8001ac2:	0011      	movs	r1, r2
 8001ac4:	2203      	movs	r2, #3
 8001ac6:	400a      	ands	r2, r1
 8001ac8:	00d2      	lsls	r2, r2, #3
 8001aca:	21ff      	movs	r1, #255	; 0xff
 8001acc:	4091      	lsls	r1, r2
 8001ace:	000a      	movs	r2, r1
 8001ad0:	43d2      	mvns	r2, r2
 8001ad2:	401a      	ands	r2, r3
 8001ad4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	019b      	lsls	r3, r3, #6
 8001ada:	22ff      	movs	r2, #255	; 0xff
 8001adc:	401a      	ands	r2, r3
 8001ade:	1dfb      	adds	r3, r7, #7
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	4003      	ands	r3, r0
 8001ae8:	00db      	lsls	r3, r3, #3
 8001aea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001aec:	481f      	ldr	r0, [pc, #124]	; (8001b6c <__NVIC_SetPriority+0xd4>)
 8001aee:	1dfb      	adds	r3, r7, #7
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	b25b      	sxtb	r3, r3
 8001af4:	089b      	lsrs	r3, r3, #2
 8001af6:	430a      	orrs	r2, r1
 8001af8:	33c0      	adds	r3, #192	; 0xc0
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001afe:	e031      	b.n	8001b64 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b00:	4a1b      	ldr	r2, [pc, #108]	; (8001b70 <__NVIC_SetPriority+0xd8>)
 8001b02:	1dfb      	adds	r3, r7, #7
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	0019      	movs	r1, r3
 8001b08:	230f      	movs	r3, #15
 8001b0a:	400b      	ands	r3, r1
 8001b0c:	3b08      	subs	r3, #8
 8001b0e:	089b      	lsrs	r3, r3, #2
 8001b10:	3306      	adds	r3, #6
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	18d3      	adds	r3, r2, r3
 8001b16:	3304      	adds	r3, #4
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	1dfa      	adds	r2, r7, #7
 8001b1c:	7812      	ldrb	r2, [r2, #0]
 8001b1e:	0011      	movs	r1, r2
 8001b20:	2203      	movs	r2, #3
 8001b22:	400a      	ands	r2, r1
 8001b24:	00d2      	lsls	r2, r2, #3
 8001b26:	21ff      	movs	r1, #255	; 0xff
 8001b28:	4091      	lsls	r1, r2
 8001b2a:	000a      	movs	r2, r1
 8001b2c:	43d2      	mvns	r2, r2
 8001b2e:	401a      	ands	r2, r3
 8001b30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	019b      	lsls	r3, r3, #6
 8001b36:	22ff      	movs	r2, #255	; 0xff
 8001b38:	401a      	ands	r2, r3
 8001b3a:	1dfb      	adds	r3, r7, #7
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	0018      	movs	r0, r3
 8001b40:	2303      	movs	r3, #3
 8001b42:	4003      	ands	r3, r0
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b48:	4809      	ldr	r0, [pc, #36]	; (8001b70 <__NVIC_SetPriority+0xd8>)
 8001b4a:	1dfb      	adds	r3, r7, #7
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	001c      	movs	r4, r3
 8001b50:	230f      	movs	r3, #15
 8001b52:	4023      	ands	r3, r4
 8001b54:	3b08      	subs	r3, #8
 8001b56:	089b      	lsrs	r3, r3, #2
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	3306      	adds	r3, #6
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	18c3      	adds	r3, r0, r3
 8001b60:	3304      	adds	r3, #4
 8001b62:	601a      	str	r2, [r3, #0]
}
 8001b64:	46c0      	nop			; (mov r8, r8)
 8001b66:	46bd      	mov	sp, r7
 8001b68:	b003      	add	sp, #12
 8001b6a:	bd90      	pop	{r4, r7, pc}
 8001b6c:	e000e100 	.word	0xe000e100
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	1e5a      	subs	r2, r3, #1
 8001b80:	2380      	movs	r3, #128	; 0x80
 8001b82:	045b      	lsls	r3, r3, #17
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d301      	bcc.n	8001b8c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e010      	b.n	8001bae <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b8c:	4b0a      	ldr	r3, [pc, #40]	; (8001bb8 <SysTick_Config+0x44>)
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	3a01      	subs	r2, #1
 8001b92:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b94:	2301      	movs	r3, #1
 8001b96:	425b      	negs	r3, r3
 8001b98:	2103      	movs	r1, #3
 8001b9a:	0018      	movs	r0, r3
 8001b9c:	f7ff ff7c 	bl	8001a98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ba0:	4b05      	ldr	r3, [pc, #20]	; (8001bb8 <SysTick_Config+0x44>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ba6:	4b04      	ldr	r3, [pc, #16]	; (8001bb8 <SysTick_Config+0x44>)
 8001ba8:	2207      	movs	r2, #7
 8001baa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	0018      	movs	r0, r3
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	b002      	add	sp, #8
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	46c0      	nop			; (mov r8, r8)
 8001bb8:	e000e010 	.word	0xe000e010

08001bbc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60b9      	str	r1, [r7, #8]
 8001bc4:	607a      	str	r2, [r7, #4]
 8001bc6:	210f      	movs	r1, #15
 8001bc8:	187b      	adds	r3, r7, r1
 8001bca:	1c02      	adds	r2, r0, #0
 8001bcc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001bce:	68ba      	ldr	r2, [r7, #8]
 8001bd0:	187b      	adds	r3, r7, r1
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	b25b      	sxtb	r3, r3
 8001bd6:	0011      	movs	r1, r2
 8001bd8:	0018      	movs	r0, r3
 8001bda:	f7ff ff5d 	bl	8001a98 <__NVIC_SetPriority>
}
 8001bde:	46c0      	nop			; (mov r8, r8)
 8001be0:	46bd      	mov	sp, r7
 8001be2:	b004      	add	sp, #16
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b082      	sub	sp, #8
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	0002      	movs	r2, r0
 8001bee:	1dfb      	adds	r3, r7, #7
 8001bf0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bf2:	1dfb      	adds	r3, r7, #7
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	b25b      	sxtb	r3, r3
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	f7ff ff33 	bl	8001a64 <__NVIC_EnableIRQ>
}
 8001bfe:	46c0      	nop			; (mov r8, r8)
 8001c00:	46bd      	mov	sp, r7
 8001c02:	b002      	add	sp, #8
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b082      	sub	sp, #8
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	0018      	movs	r0, r3
 8001c12:	f7ff ffaf 	bl	8001b74 <SysTick_Config>
 8001c16:	0003      	movs	r3, r0
}
 8001c18:	0018      	movs	r0, r3
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	b002      	add	sp, #8
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d101      	bne.n	8001c36 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e036      	b.n	8001ca4 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2221      	movs	r2, #33	; 0x21
 8001c3a:	2102      	movs	r1, #2
 8001c3c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	4a18      	ldr	r2, [pc, #96]	; (8001cac <HAL_DMA_Init+0x8c>)
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001c56:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	695b      	ldr	r3, [r3, #20]
 8001c68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	69db      	ldr	r3, [r3, #28]
 8001c74:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	0018      	movs	r0, r3
 8001c88:	f000 f9c4 	bl	8002014 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2221      	movs	r2, #33	; 0x21
 8001c96:	2101      	movs	r1, #1
 8001c98:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2220      	movs	r2, #32
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	b004      	add	sp, #16
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	ffffc00f 	.word	0xffffc00f

08001cb0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
 8001cbc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cbe:	2317      	movs	r3, #23
 8001cc0:	18fb      	adds	r3, r7, r3
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2220      	movs	r2, #32
 8001cca:	5c9b      	ldrb	r3, [r3, r2]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d101      	bne.n	8001cd4 <HAL_DMA_Start_IT+0x24>
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	e04f      	b.n	8001d74 <HAL_DMA_Start_IT+0xc4>
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2220      	movs	r2, #32
 8001cd8:	2101      	movs	r1, #1
 8001cda:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2221      	movs	r2, #33	; 0x21
 8001ce0:	5c9b      	ldrb	r3, [r3, r2]
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d13a      	bne.n	8001d5e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2221      	movs	r2, #33	; 0x21
 8001cec:	2102      	movs	r1, #2
 8001cee:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2101      	movs	r1, #1
 8001d02:	438a      	bics	r2, r1
 8001d04:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	68b9      	ldr	r1, [r7, #8]
 8001d0c:	68f8      	ldr	r0, [r7, #12]
 8001d0e:	f000 f954 	bl	8001fba <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d008      	beq.n	8001d2c <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	210e      	movs	r1, #14
 8001d26:	430a      	orrs	r2, r1
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	e00f      	b.n	8001d4c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	210a      	movs	r1, #10
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2104      	movs	r1, #4
 8001d48:	438a      	bics	r2, r1
 8001d4a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2101      	movs	r1, #1
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	e007      	b.n	8001d6e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2220      	movs	r2, #32
 8001d62:	2100      	movs	r1, #0
 8001d64:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001d66:	2317      	movs	r3, #23
 8001d68:	18fb      	adds	r3, r7, r3
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001d6e:	2317      	movs	r3, #23
 8001d70:	18fb      	adds	r3, r7, r3
 8001d72:	781b      	ldrb	r3, [r3, #0]
}
 8001d74:	0018      	movs	r0, r3
 8001d76:	46bd      	mov	sp, r7
 8001d78:	b006      	add	sp, #24
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2221      	movs	r2, #33	; 0x21
 8001d88:	5c9b      	ldrb	r3, [r3, r2]
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d008      	beq.n	8001da2 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2204      	movs	r2, #4
 8001d94:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2220      	movs	r2, #32
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e020      	b.n	8001de4 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	210e      	movs	r1, #14
 8001dae:	438a      	bics	r2, r1
 8001db0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	438a      	bics	r2, r1
 8001dc0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dca:	2101      	movs	r1, #1
 8001dcc:	4091      	lsls	r1, r2
 8001dce:	000a      	movs	r2, r1
 8001dd0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2221      	movs	r2, #33	; 0x21
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2220      	movs	r2, #32
 8001dde:	2100      	movs	r1, #0
 8001de0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	0018      	movs	r0, r3
 8001de6:	46bd      	mov	sp, r7
 8001de8:	b002      	add	sp, #8
 8001dea:	bd80      	pop	{r7, pc}

08001dec <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001df4:	210f      	movs	r1, #15
 8001df6:	187b      	adds	r3, r7, r1
 8001df8:	2200      	movs	r2, #0
 8001dfa:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2221      	movs	r2, #33	; 0x21
 8001e00:	5c9b      	ldrb	r3, [r3, r2]
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d006      	beq.n	8001e16 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2204      	movs	r2, #4
 8001e0c:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001e0e:	187b      	adds	r3, r7, r1
 8001e10:	2201      	movs	r2, #1
 8001e12:	701a      	strb	r2, [r3, #0]
 8001e14:	e028      	b.n	8001e68 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	210e      	movs	r1, #14
 8001e22:	438a      	bics	r2, r1
 8001e24:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2101      	movs	r1, #1
 8001e32:	438a      	bics	r2, r1
 8001e34:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e3e:	2101      	movs	r1, #1
 8001e40:	4091      	lsls	r1, r2
 8001e42:	000a      	movs	r2, r1
 8001e44:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2221      	movs	r2, #33	; 0x21
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2220      	movs	r2, #32
 8001e52:	2100      	movs	r1, #0
 8001e54:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d004      	beq.n	8001e68 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	0010      	movs	r0, r2
 8001e66:	4798      	blx	r3
    }
  }
  return status;
 8001e68:	230f      	movs	r3, #15
 8001e6a:	18fb      	adds	r3, r7, r3
 8001e6c:	781b      	ldrb	r3, [r3, #0]
}
 8001e6e:	0018      	movs	r0, r3
 8001e70:	46bd      	mov	sp, r7
 8001e72:	b004      	add	sp, #16
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b084      	sub	sp, #16
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	2204      	movs	r2, #4
 8001e94:	409a      	lsls	r2, r3
 8001e96:	0013      	movs	r3, r2
 8001e98:	68fa      	ldr	r2, [r7, #12]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	d024      	beq.n	8001ee8 <HAL_DMA_IRQHandler+0x72>
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	2204      	movs	r2, #4
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	d020      	beq.n	8001ee8 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2220      	movs	r2, #32
 8001eae:	4013      	ands	r3, r2
 8001eb0:	d107      	bne.n	8001ec2 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2104      	movs	r1, #4
 8001ebe:	438a      	bics	r2, r1
 8001ec0:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eca:	2104      	movs	r1, #4
 8001ecc:	4091      	lsls	r1, r2
 8001ece:	000a      	movs	r2, r1
 8001ed0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d100      	bne.n	8001edc <HAL_DMA_IRQHandler+0x66>
 8001eda:	e06a      	b.n	8001fb2 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	0010      	movs	r0, r2
 8001ee4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001ee6:	e064      	b.n	8001fb2 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eec:	2202      	movs	r2, #2
 8001eee:	409a      	lsls	r2, r3
 8001ef0:	0013      	movs	r3, r2
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	d02b      	beq.n	8001f50 <HAL_DMA_IRQHandler+0xda>
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	2202      	movs	r2, #2
 8001efc:	4013      	ands	r3, r2
 8001efe:	d027      	beq.n	8001f50 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2220      	movs	r2, #32
 8001f08:	4013      	ands	r3, r2
 8001f0a:	d10b      	bne.n	8001f24 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	210a      	movs	r1, #10
 8001f18:	438a      	bics	r2, r1
 8001f1a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2221      	movs	r2, #33	; 0x21
 8001f20:	2101      	movs	r1, #1
 8001f22:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f2c:	2102      	movs	r1, #2
 8001f2e:	4091      	lsls	r1, r2
 8001f30:	000a      	movs	r2, r1
 8001f32:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2220      	movs	r2, #32
 8001f38:	2100      	movs	r1, #0
 8001f3a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d036      	beq.n	8001fb2 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	0010      	movs	r0, r2
 8001f4c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001f4e:	e030      	b.n	8001fb2 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f54:	2208      	movs	r2, #8
 8001f56:	409a      	lsls	r2, r3
 8001f58:	0013      	movs	r3, r2
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	d028      	beq.n	8001fb2 <HAL_DMA_IRQHandler+0x13c>
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	2208      	movs	r2, #8
 8001f64:	4013      	ands	r3, r2
 8001f66:	d024      	beq.n	8001fb2 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	210e      	movs	r1, #14
 8001f74:	438a      	bics	r2, r1
 8001f76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f80:	2101      	movs	r1, #1
 8001f82:	4091      	lsls	r1, r2
 8001f84:	000a      	movs	r2, r1
 8001f86:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2221      	movs	r2, #33	; 0x21
 8001f92:	2101      	movs	r1, #1
 8001f94:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2220      	movs	r2, #32
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d005      	beq.n	8001fb2 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	0010      	movs	r0, r2
 8001fae:	4798      	blx	r3
    }
  }
}
 8001fb0:	e7ff      	b.n	8001fb2 <HAL_DMA_IRQHandler+0x13c>
 8001fb2:	46c0      	nop			; (mov r8, r8)
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	b004      	add	sp, #16
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b084      	sub	sp, #16
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	60f8      	str	r0, [r7, #12]
 8001fc2:	60b9      	str	r1, [r7, #8]
 8001fc4:	607a      	str	r2, [r7, #4]
 8001fc6:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	4091      	lsls	r1, r2
 8001fd4:	000a      	movs	r2, r1
 8001fd6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	2b10      	cmp	r3, #16
 8001fe6:	d108      	bne.n	8001ffa <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68ba      	ldr	r2, [r7, #8]
 8001ff6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001ff8:	e007      	b.n	800200a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68ba      	ldr	r2, [r7, #8]
 8002000:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	60da      	str	r2, [r3, #12]
}
 800200a:	46c0      	nop			; (mov r8, r8)
 800200c:	46bd      	mov	sp, r7
 800200e:	b004      	add	sp, #16
 8002010:	bd80      	pop	{r7, pc}
	...

08002014 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a08      	ldr	r2, [pc, #32]	; (8002044 <DMA_CalcBaseAndBitshift+0x30>)
 8002022:	4694      	mov	ip, r2
 8002024:	4463      	add	r3, ip
 8002026:	2114      	movs	r1, #20
 8002028:	0018      	movs	r0, r3
 800202a:	f7fe f86d 	bl	8000108 <__udivsi3>
 800202e:	0003      	movs	r3, r0
 8002030:	009a      	lsls	r2, r3, #2
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a03      	ldr	r2, [pc, #12]	; (8002048 <DMA_CalcBaseAndBitshift+0x34>)
 800203a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800203c:	46c0      	nop			; (mov r8, r8)
 800203e:	46bd      	mov	sp, r7
 8002040:	b002      	add	sp, #8
 8002042:	bd80      	pop	{r7, pc}
 8002044:	bffdfff8 	.word	0xbffdfff8
 8002048:	40020000 	.word	0x40020000

0800204c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002056:	2300      	movs	r3, #0
 8002058:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800205a:	e149      	b.n	80022f0 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2101      	movs	r1, #1
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	4091      	lsls	r1, r2
 8002066:	000a      	movs	r2, r1
 8002068:	4013      	ands	r3, r2
 800206a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d100      	bne.n	8002074 <HAL_GPIO_Init+0x28>
 8002072:	e13a      	b.n	80022ea <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	2203      	movs	r2, #3
 800207a:	4013      	ands	r3, r2
 800207c:	2b01      	cmp	r3, #1
 800207e:	d005      	beq.n	800208c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	2203      	movs	r2, #3
 8002086:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002088:	2b02      	cmp	r3, #2
 800208a:	d130      	bne.n	80020ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	2203      	movs	r2, #3
 8002098:	409a      	lsls	r2, r3
 800209a:	0013      	movs	r3, r2
 800209c:	43da      	mvns	r2, r3
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	4013      	ands	r3, r2
 80020a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	68da      	ldr	r2, [r3, #12]
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	409a      	lsls	r2, r3
 80020ae:	0013      	movs	r3, r2
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020c2:	2201      	movs	r2, #1
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	409a      	lsls	r2, r3
 80020c8:	0013      	movs	r3, r2
 80020ca:	43da      	mvns	r2, r3
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	4013      	ands	r3, r2
 80020d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	091b      	lsrs	r3, r3, #4
 80020d8:	2201      	movs	r2, #1
 80020da:	401a      	ands	r2, r3
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	409a      	lsls	r2, r3
 80020e0:	0013      	movs	r3, r2
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2203      	movs	r2, #3
 80020f4:	4013      	ands	r3, r2
 80020f6:	2b03      	cmp	r3, #3
 80020f8:	d017      	beq.n	800212a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	2203      	movs	r2, #3
 8002106:	409a      	lsls	r2, r3
 8002108:	0013      	movs	r3, r2
 800210a:	43da      	mvns	r2, r3
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	4013      	ands	r3, r2
 8002110:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	689a      	ldr	r2, [r3, #8]
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	409a      	lsls	r2, r3
 800211c:	0013      	movs	r3, r2
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	4313      	orrs	r3, r2
 8002122:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	2203      	movs	r2, #3
 8002130:	4013      	ands	r3, r2
 8002132:	2b02      	cmp	r3, #2
 8002134:	d123      	bne.n	800217e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	08da      	lsrs	r2, r3, #3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	3208      	adds	r2, #8
 800213e:	0092      	lsls	r2, r2, #2
 8002140:	58d3      	ldr	r3, [r2, r3]
 8002142:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	2207      	movs	r2, #7
 8002148:	4013      	ands	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	220f      	movs	r2, #15
 800214e:	409a      	lsls	r2, r3
 8002150:	0013      	movs	r3, r2
 8002152:	43da      	mvns	r2, r3
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	4013      	ands	r3, r2
 8002158:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	691a      	ldr	r2, [r3, #16]
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	2107      	movs	r1, #7
 8002162:	400b      	ands	r3, r1
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	409a      	lsls	r2, r3
 8002168:	0013      	movs	r3, r2
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	4313      	orrs	r3, r2
 800216e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	08da      	lsrs	r2, r3, #3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3208      	adds	r2, #8
 8002178:	0092      	lsls	r2, r2, #2
 800217a:	6939      	ldr	r1, [r7, #16]
 800217c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	2203      	movs	r2, #3
 800218a:	409a      	lsls	r2, r3
 800218c:	0013      	movs	r3, r2
 800218e:	43da      	mvns	r2, r3
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	4013      	ands	r3, r2
 8002194:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	2203      	movs	r2, #3
 800219c:	401a      	ands	r2, r3
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	409a      	lsls	r2, r3
 80021a4:	0013      	movs	r3, r2
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	693a      	ldr	r2, [r7, #16]
 80021b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685a      	ldr	r2, [r3, #4]
 80021b6:	23c0      	movs	r3, #192	; 0xc0
 80021b8:	029b      	lsls	r3, r3, #10
 80021ba:	4013      	ands	r3, r2
 80021bc:	d100      	bne.n	80021c0 <HAL_GPIO_Init+0x174>
 80021be:	e094      	b.n	80022ea <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021c0:	4b51      	ldr	r3, [pc, #324]	; (8002308 <HAL_GPIO_Init+0x2bc>)
 80021c2:	699a      	ldr	r2, [r3, #24]
 80021c4:	4b50      	ldr	r3, [pc, #320]	; (8002308 <HAL_GPIO_Init+0x2bc>)
 80021c6:	2101      	movs	r1, #1
 80021c8:	430a      	orrs	r2, r1
 80021ca:	619a      	str	r2, [r3, #24]
 80021cc:	4b4e      	ldr	r3, [pc, #312]	; (8002308 <HAL_GPIO_Init+0x2bc>)
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	2201      	movs	r2, #1
 80021d2:	4013      	ands	r3, r2
 80021d4:	60bb      	str	r3, [r7, #8]
 80021d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80021d8:	4a4c      	ldr	r2, [pc, #304]	; (800230c <HAL_GPIO_Init+0x2c0>)
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	089b      	lsrs	r3, r3, #2
 80021de:	3302      	adds	r3, #2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	589b      	ldr	r3, [r3, r2]
 80021e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	2203      	movs	r2, #3
 80021ea:	4013      	ands	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	220f      	movs	r2, #15
 80021f0:	409a      	lsls	r2, r3
 80021f2:	0013      	movs	r3, r2
 80021f4:	43da      	mvns	r2, r3
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	4013      	ands	r3, r2
 80021fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	2390      	movs	r3, #144	; 0x90
 8002200:	05db      	lsls	r3, r3, #23
 8002202:	429a      	cmp	r2, r3
 8002204:	d00d      	beq.n	8002222 <HAL_GPIO_Init+0x1d6>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a41      	ldr	r2, [pc, #260]	; (8002310 <HAL_GPIO_Init+0x2c4>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d007      	beq.n	800221e <HAL_GPIO_Init+0x1d2>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a40      	ldr	r2, [pc, #256]	; (8002314 <HAL_GPIO_Init+0x2c8>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d101      	bne.n	800221a <HAL_GPIO_Init+0x1ce>
 8002216:	2302      	movs	r3, #2
 8002218:	e004      	b.n	8002224 <HAL_GPIO_Init+0x1d8>
 800221a:	2305      	movs	r3, #5
 800221c:	e002      	b.n	8002224 <HAL_GPIO_Init+0x1d8>
 800221e:	2301      	movs	r3, #1
 8002220:	e000      	b.n	8002224 <HAL_GPIO_Init+0x1d8>
 8002222:	2300      	movs	r3, #0
 8002224:	697a      	ldr	r2, [r7, #20]
 8002226:	2103      	movs	r1, #3
 8002228:	400a      	ands	r2, r1
 800222a:	0092      	lsls	r2, r2, #2
 800222c:	4093      	lsls	r3, r2
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	4313      	orrs	r3, r2
 8002232:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002234:	4935      	ldr	r1, [pc, #212]	; (800230c <HAL_GPIO_Init+0x2c0>)
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	089b      	lsrs	r3, r3, #2
 800223a:	3302      	adds	r3, #2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002242:	4b35      	ldr	r3, [pc, #212]	; (8002318 <HAL_GPIO_Init+0x2cc>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	43da      	mvns	r2, r3
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	4013      	ands	r3, r2
 8002250:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685a      	ldr	r2, [r3, #4]
 8002256:	2380      	movs	r3, #128	; 0x80
 8002258:	035b      	lsls	r3, r3, #13
 800225a:	4013      	ands	r3, r2
 800225c:	d003      	beq.n	8002266 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	4313      	orrs	r3, r2
 8002264:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002266:	4b2c      	ldr	r3, [pc, #176]	; (8002318 <HAL_GPIO_Init+0x2cc>)
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800226c:	4b2a      	ldr	r3, [pc, #168]	; (8002318 <HAL_GPIO_Init+0x2cc>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	43da      	mvns	r2, r3
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	4013      	ands	r3, r2
 800227a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685a      	ldr	r2, [r3, #4]
 8002280:	2380      	movs	r3, #128	; 0x80
 8002282:	039b      	lsls	r3, r3, #14
 8002284:	4013      	ands	r3, r2
 8002286:	d003      	beq.n	8002290 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	4313      	orrs	r3, r2
 800228e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002290:	4b21      	ldr	r3, [pc, #132]	; (8002318 <HAL_GPIO_Init+0x2cc>)
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8002296:	4b20      	ldr	r3, [pc, #128]	; (8002318 <HAL_GPIO_Init+0x2cc>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	43da      	mvns	r2, r3
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	4013      	ands	r3, r2
 80022a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	2380      	movs	r3, #128	; 0x80
 80022ac:	029b      	lsls	r3, r3, #10
 80022ae:	4013      	ands	r3, r2
 80022b0:	d003      	beq.n	80022ba <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80022ba:	4b17      	ldr	r3, [pc, #92]	; (8002318 <HAL_GPIO_Init+0x2cc>)
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80022c0:	4b15      	ldr	r3, [pc, #84]	; (8002318 <HAL_GPIO_Init+0x2cc>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	43da      	mvns	r2, r3
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	4013      	ands	r3, r2
 80022ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685a      	ldr	r2, [r3, #4]
 80022d4:	2380      	movs	r3, #128	; 0x80
 80022d6:	025b      	lsls	r3, r3, #9
 80022d8:	4013      	ands	r3, r2
 80022da:	d003      	beq.n	80022e4 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80022e4:	4b0c      	ldr	r3, [pc, #48]	; (8002318 <HAL_GPIO_Init+0x2cc>)
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	3301      	adds	r3, #1
 80022ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	40da      	lsrs	r2, r3
 80022f8:	1e13      	subs	r3, r2, #0
 80022fa:	d000      	beq.n	80022fe <HAL_GPIO_Init+0x2b2>
 80022fc:	e6ae      	b.n	800205c <HAL_GPIO_Init+0x10>
  } 
}
 80022fe:	46c0      	nop			; (mov r8, r8)
 8002300:	46c0      	nop			; (mov r8, r8)
 8002302:	46bd      	mov	sp, r7
 8002304:	b006      	add	sp, #24
 8002306:	bd80      	pop	{r7, pc}
 8002308:	40021000 	.word	0x40021000
 800230c:	40010000 	.word	0x40010000
 8002310:	48000400 	.word	0x48000400
 8002314:	48000800 	.word	0x48000800
 8002318:	40010400 	.word	0x40010400

0800231c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b088      	sub	sp, #32
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d102      	bne.n	8002330 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	f000 fb76 	bl	8002a1c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2201      	movs	r2, #1
 8002336:	4013      	ands	r3, r2
 8002338:	d100      	bne.n	800233c <HAL_RCC_OscConfig+0x20>
 800233a:	e08e      	b.n	800245a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800233c:	4bc5      	ldr	r3, [pc, #788]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	220c      	movs	r2, #12
 8002342:	4013      	ands	r3, r2
 8002344:	2b04      	cmp	r3, #4
 8002346:	d00e      	beq.n	8002366 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002348:	4bc2      	ldr	r3, [pc, #776]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	220c      	movs	r2, #12
 800234e:	4013      	ands	r3, r2
 8002350:	2b08      	cmp	r3, #8
 8002352:	d117      	bne.n	8002384 <HAL_RCC_OscConfig+0x68>
 8002354:	4bbf      	ldr	r3, [pc, #764]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 8002356:	685a      	ldr	r2, [r3, #4]
 8002358:	23c0      	movs	r3, #192	; 0xc0
 800235a:	025b      	lsls	r3, r3, #9
 800235c:	401a      	ands	r2, r3
 800235e:	2380      	movs	r3, #128	; 0x80
 8002360:	025b      	lsls	r3, r3, #9
 8002362:	429a      	cmp	r2, r3
 8002364:	d10e      	bne.n	8002384 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002366:	4bbb      	ldr	r3, [pc, #748]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	2380      	movs	r3, #128	; 0x80
 800236c:	029b      	lsls	r3, r3, #10
 800236e:	4013      	ands	r3, r2
 8002370:	d100      	bne.n	8002374 <HAL_RCC_OscConfig+0x58>
 8002372:	e071      	b.n	8002458 <HAL_RCC_OscConfig+0x13c>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d000      	beq.n	800237e <HAL_RCC_OscConfig+0x62>
 800237c:	e06c      	b.n	8002458 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	f000 fb4c 	bl	8002a1c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d107      	bne.n	800239c <HAL_RCC_OscConfig+0x80>
 800238c:	4bb1      	ldr	r3, [pc, #708]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	4bb0      	ldr	r3, [pc, #704]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 8002392:	2180      	movs	r1, #128	; 0x80
 8002394:	0249      	lsls	r1, r1, #9
 8002396:	430a      	orrs	r2, r1
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	e02f      	b.n	80023fc <HAL_RCC_OscConfig+0xe0>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d10c      	bne.n	80023be <HAL_RCC_OscConfig+0xa2>
 80023a4:	4bab      	ldr	r3, [pc, #684]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	4baa      	ldr	r3, [pc, #680]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 80023aa:	49ab      	ldr	r1, [pc, #684]	; (8002658 <HAL_RCC_OscConfig+0x33c>)
 80023ac:	400a      	ands	r2, r1
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	4ba8      	ldr	r3, [pc, #672]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	4ba7      	ldr	r3, [pc, #668]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 80023b6:	49a9      	ldr	r1, [pc, #676]	; (800265c <HAL_RCC_OscConfig+0x340>)
 80023b8:	400a      	ands	r2, r1
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	e01e      	b.n	80023fc <HAL_RCC_OscConfig+0xe0>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	2b05      	cmp	r3, #5
 80023c4:	d10e      	bne.n	80023e4 <HAL_RCC_OscConfig+0xc8>
 80023c6:	4ba3      	ldr	r3, [pc, #652]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	4ba2      	ldr	r3, [pc, #648]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 80023cc:	2180      	movs	r1, #128	; 0x80
 80023ce:	02c9      	lsls	r1, r1, #11
 80023d0:	430a      	orrs	r2, r1
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	4b9f      	ldr	r3, [pc, #636]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	4b9e      	ldr	r3, [pc, #632]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 80023da:	2180      	movs	r1, #128	; 0x80
 80023dc:	0249      	lsls	r1, r1, #9
 80023de:	430a      	orrs	r2, r1
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	e00b      	b.n	80023fc <HAL_RCC_OscConfig+0xe0>
 80023e4:	4b9b      	ldr	r3, [pc, #620]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	4b9a      	ldr	r3, [pc, #616]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 80023ea:	499b      	ldr	r1, [pc, #620]	; (8002658 <HAL_RCC_OscConfig+0x33c>)
 80023ec:	400a      	ands	r2, r1
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	4b98      	ldr	r3, [pc, #608]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	4b97      	ldr	r3, [pc, #604]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 80023f6:	4999      	ldr	r1, [pc, #612]	; (800265c <HAL_RCC_OscConfig+0x340>)
 80023f8:	400a      	ands	r2, r1
 80023fa:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d014      	beq.n	800242e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002404:	f7ff f8d6 	bl	80015b4 <HAL_GetTick>
 8002408:	0003      	movs	r3, r0
 800240a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240c:	e008      	b.n	8002420 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800240e:	f7ff f8d1 	bl	80015b4 <HAL_GetTick>
 8002412:	0002      	movs	r2, r0
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b64      	cmp	r3, #100	; 0x64
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e2fd      	b.n	8002a1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002420:	4b8c      	ldr	r3, [pc, #560]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	2380      	movs	r3, #128	; 0x80
 8002426:	029b      	lsls	r3, r3, #10
 8002428:	4013      	ands	r3, r2
 800242a:	d0f0      	beq.n	800240e <HAL_RCC_OscConfig+0xf2>
 800242c:	e015      	b.n	800245a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242e:	f7ff f8c1 	bl	80015b4 <HAL_GetTick>
 8002432:	0003      	movs	r3, r0
 8002434:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002438:	f7ff f8bc 	bl	80015b4 <HAL_GetTick>
 800243c:	0002      	movs	r2, r0
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b64      	cmp	r3, #100	; 0x64
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e2e8      	b.n	8002a1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800244a:	4b82      	ldr	r3, [pc, #520]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	2380      	movs	r3, #128	; 0x80
 8002450:	029b      	lsls	r3, r3, #10
 8002452:	4013      	ands	r3, r2
 8002454:	d1f0      	bne.n	8002438 <HAL_RCC_OscConfig+0x11c>
 8002456:	e000      	b.n	800245a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002458:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2202      	movs	r2, #2
 8002460:	4013      	ands	r3, r2
 8002462:	d100      	bne.n	8002466 <HAL_RCC_OscConfig+0x14a>
 8002464:	e06c      	b.n	8002540 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002466:	4b7b      	ldr	r3, [pc, #492]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	220c      	movs	r2, #12
 800246c:	4013      	ands	r3, r2
 800246e:	d00e      	beq.n	800248e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002470:	4b78      	ldr	r3, [pc, #480]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	220c      	movs	r2, #12
 8002476:	4013      	ands	r3, r2
 8002478:	2b08      	cmp	r3, #8
 800247a:	d11f      	bne.n	80024bc <HAL_RCC_OscConfig+0x1a0>
 800247c:	4b75      	ldr	r3, [pc, #468]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 800247e:	685a      	ldr	r2, [r3, #4]
 8002480:	23c0      	movs	r3, #192	; 0xc0
 8002482:	025b      	lsls	r3, r3, #9
 8002484:	401a      	ands	r2, r3
 8002486:	2380      	movs	r3, #128	; 0x80
 8002488:	021b      	lsls	r3, r3, #8
 800248a:	429a      	cmp	r2, r3
 800248c:	d116      	bne.n	80024bc <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800248e:	4b71      	ldr	r3, [pc, #452]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2202      	movs	r2, #2
 8002494:	4013      	ands	r3, r2
 8002496:	d005      	beq.n	80024a4 <HAL_RCC_OscConfig+0x188>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d001      	beq.n	80024a4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e2bb      	b.n	8002a1c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024a4:	4b6b      	ldr	r3, [pc, #428]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	22f8      	movs	r2, #248	; 0xf8
 80024aa:	4393      	bics	r3, r2
 80024ac:	0019      	movs	r1, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	00da      	lsls	r2, r3, #3
 80024b4:	4b67      	ldr	r3, [pc, #412]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 80024b6:	430a      	orrs	r2, r1
 80024b8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ba:	e041      	b.n	8002540 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d024      	beq.n	800250e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024c4:	4b63      	ldr	r3, [pc, #396]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	4b62      	ldr	r3, [pc, #392]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 80024ca:	2101      	movs	r1, #1
 80024cc:	430a      	orrs	r2, r1
 80024ce:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d0:	f7ff f870 	bl	80015b4 <HAL_GetTick>
 80024d4:	0003      	movs	r3, r0
 80024d6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024da:	f7ff f86b 	bl	80015b4 <HAL_GetTick>
 80024de:	0002      	movs	r2, r0
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e297      	b.n	8002a1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ec:	4b59      	ldr	r3, [pc, #356]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2202      	movs	r2, #2
 80024f2:	4013      	ands	r3, r2
 80024f4:	d0f1      	beq.n	80024da <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f6:	4b57      	ldr	r3, [pc, #348]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	22f8      	movs	r2, #248	; 0xf8
 80024fc:	4393      	bics	r3, r2
 80024fe:	0019      	movs	r1, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	00da      	lsls	r2, r3, #3
 8002506:	4b53      	ldr	r3, [pc, #332]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 8002508:	430a      	orrs	r2, r1
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	e018      	b.n	8002540 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800250e:	4b51      	ldr	r3, [pc, #324]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	4b50      	ldr	r3, [pc, #320]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 8002514:	2101      	movs	r1, #1
 8002516:	438a      	bics	r2, r1
 8002518:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251a:	f7ff f84b 	bl	80015b4 <HAL_GetTick>
 800251e:	0003      	movs	r3, r0
 8002520:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002524:	f7ff f846 	bl	80015b4 <HAL_GetTick>
 8002528:	0002      	movs	r2, r0
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e272      	b.n	8002a1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002536:	4b47      	ldr	r3, [pc, #284]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2202      	movs	r2, #2
 800253c:	4013      	ands	r3, r2
 800253e:	d1f1      	bne.n	8002524 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2208      	movs	r2, #8
 8002546:	4013      	ands	r3, r2
 8002548:	d036      	beq.n	80025b8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	69db      	ldr	r3, [r3, #28]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d019      	beq.n	8002586 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002552:	4b40      	ldr	r3, [pc, #256]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 8002554:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002556:	4b3f      	ldr	r3, [pc, #252]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 8002558:	2101      	movs	r1, #1
 800255a:	430a      	orrs	r2, r1
 800255c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800255e:	f7ff f829 	bl	80015b4 <HAL_GetTick>
 8002562:	0003      	movs	r3, r0
 8002564:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002568:	f7ff f824 	bl	80015b4 <HAL_GetTick>
 800256c:	0002      	movs	r2, r0
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e250      	b.n	8002a1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800257a:	4b36      	ldr	r3, [pc, #216]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 800257c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257e:	2202      	movs	r2, #2
 8002580:	4013      	ands	r3, r2
 8002582:	d0f1      	beq.n	8002568 <HAL_RCC_OscConfig+0x24c>
 8002584:	e018      	b.n	80025b8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002586:	4b33      	ldr	r3, [pc, #204]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 8002588:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800258a:	4b32      	ldr	r3, [pc, #200]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 800258c:	2101      	movs	r1, #1
 800258e:	438a      	bics	r2, r1
 8002590:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002592:	f7ff f80f 	bl	80015b4 <HAL_GetTick>
 8002596:	0003      	movs	r3, r0
 8002598:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800259c:	f7ff f80a 	bl	80015b4 <HAL_GetTick>
 80025a0:	0002      	movs	r2, r0
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e236      	b.n	8002a1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025ae:	4b29      	ldr	r3, [pc, #164]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 80025b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b2:	2202      	movs	r2, #2
 80025b4:	4013      	ands	r3, r2
 80025b6:	d1f1      	bne.n	800259c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2204      	movs	r2, #4
 80025be:	4013      	ands	r3, r2
 80025c0:	d100      	bne.n	80025c4 <HAL_RCC_OscConfig+0x2a8>
 80025c2:	e0b5      	b.n	8002730 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025c4:	201f      	movs	r0, #31
 80025c6:	183b      	adds	r3, r7, r0
 80025c8:	2200      	movs	r2, #0
 80025ca:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025cc:	4b21      	ldr	r3, [pc, #132]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 80025ce:	69da      	ldr	r2, [r3, #28]
 80025d0:	2380      	movs	r3, #128	; 0x80
 80025d2:	055b      	lsls	r3, r3, #21
 80025d4:	4013      	ands	r3, r2
 80025d6:	d110      	bne.n	80025fa <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025d8:	4b1e      	ldr	r3, [pc, #120]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 80025da:	69da      	ldr	r2, [r3, #28]
 80025dc:	4b1d      	ldr	r3, [pc, #116]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 80025de:	2180      	movs	r1, #128	; 0x80
 80025e0:	0549      	lsls	r1, r1, #21
 80025e2:	430a      	orrs	r2, r1
 80025e4:	61da      	str	r2, [r3, #28]
 80025e6:	4b1b      	ldr	r3, [pc, #108]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 80025e8:	69da      	ldr	r2, [r3, #28]
 80025ea:	2380      	movs	r3, #128	; 0x80
 80025ec:	055b      	lsls	r3, r3, #21
 80025ee:	4013      	ands	r3, r2
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80025f4:	183b      	adds	r3, r7, r0
 80025f6:	2201      	movs	r2, #1
 80025f8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025fa:	4b19      	ldr	r3, [pc, #100]	; (8002660 <HAL_RCC_OscConfig+0x344>)
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	2380      	movs	r3, #128	; 0x80
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	4013      	ands	r3, r2
 8002604:	d11a      	bne.n	800263c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002606:	4b16      	ldr	r3, [pc, #88]	; (8002660 <HAL_RCC_OscConfig+0x344>)
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	4b15      	ldr	r3, [pc, #84]	; (8002660 <HAL_RCC_OscConfig+0x344>)
 800260c:	2180      	movs	r1, #128	; 0x80
 800260e:	0049      	lsls	r1, r1, #1
 8002610:	430a      	orrs	r2, r1
 8002612:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002614:	f7fe ffce 	bl	80015b4 <HAL_GetTick>
 8002618:	0003      	movs	r3, r0
 800261a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800261c:	e008      	b.n	8002630 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800261e:	f7fe ffc9 	bl	80015b4 <HAL_GetTick>
 8002622:	0002      	movs	r2, r0
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b64      	cmp	r3, #100	; 0x64
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e1f5      	b.n	8002a1c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002630:	4b0b      	ldr	r3, [pc, #44]	; (8002660 <HAL_RCC_OscConfig+0x344>)
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	2380      	movs	r3, #128	; 0x80
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	4013      	ands	r3, r2
 800263a:	d0f0      	beq.n	800261e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d10f      	bne.n	8002664 <HAL_RCC_OscConfig+0x348>
 8002644:	4b03      	ldr	r3, [pc, #12]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 8002646:	6a1a      	ldr	r2, [r3, #32]
 8002648:	4b02      	ldr	r3, [pc, #8]	; (8002654 <HAL_RCC_OscConfig+0x338>)
 800264a:	2101      	movs	r1, #1
 800264c:	430a      	orrs	r2, r1
 800264e:	621a      	str	r2, [r3, #32]
 8002650:	e036      	b.n	80026c0 <HAL_RCC_OscConfig+0x3a4>
 8002652:	46c0      	nop			; (mov r8, r8)
 8002654:	40021000 	.word	0x40021000
 8002658:	fffeffff 	.word	0xfffeffff
 800265c:	fffbffff 	.word	0xfffbffff
 8002660:	40007000 	.word	0x40007000
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10c      	bne.n	8002686 <HAL_RCC_OscConfig+0x36a>
 800266c:	4bca      	ldr	r3, [pc, #808]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 800266e:	6a1a      	ldr	r2, [r3, #32]
 8002670:	4bc9      	ldr	r3, [pc, #804]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 8002672:	2101      	movs	r1, #1
 8002674:	438a      	bics	r2, r1
 8002676:	621a      	str	r2, [r3, #32]
 8002678:	4bc7      	ldr	r3, [pc, #796]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 800267a:	6a1a      	ldr	r2, [r3, #32]
 800267c:	4bc6      	ldr	r3, [pc, #792]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 800267e:	2104      	movs	r1, #4
 8002680:	438a      	bics	r2, r1
 8002682:	621a      	str	r2, [r3, #32]
 8002684:	e01c      	b.n	80026c0 <HAL_RCC_OscConfig+0x3a4>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	2b05      	cmp	r3, #5
 800268c:	d10c      	bne.n	80026a8 <HAL_RCC_OscConfig+0x38c>
 800268e:	4bc2      	ldr	r3, [pc, #776]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 8002690:	6a1a      	ldr	r2, [r3, #32]
 8002692:	4bc1      	ldr	r3, [pc, #772]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 8002694:	2104      	movs	r1, #4
 8002696:	430a      	orrs	r2, r1
 8002698:	621a      	str	r2, [r3, #32]
 800269a:	4bbf      	ldr	r3, [pc, #764]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 800269c:	6a1a      	ldr	r2, [r3, #32]
 800269e:	4bbe      	ldr	r3, [pc, #760]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 80026a0:	2101      	movs	r1, #1
 80026a2:	430a      	orrs	r2, r1
 80026a4:	621a      	str	r2, [r3, #32]
 80026a6:	e00b      	b.n	80026c0 <HAL_RCC_OscConfig+0x3a4>
 80026a8:	4bbb      	ldr	r3, [pc, #748]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 80026aa:	6a1a      	ldr	r2, [r3, #32]
 80026ac:	4bba      	ldr	r3, [pc, #744]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 80026ae:	2101      	movs	r1, #1
 80026b0:	438a      	bics	r2, r1
 80026b2:	621a      	str	r2, [r3, #32]
 80026b4:	4bb8      	ldr	r3, [pc, #736]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 80026b6:	6a1a      	ldr	r2, [r3, #32]
 80026b8:	4bb7      	ldr	r3, [pc, #732]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 80026ba:	2104      	movs	r1, #4
 80026bc:	438a      	bics	r2, r1
 80026be:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d014      	beq.n	80026f2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026c8:	f7fe ff74 	bl	80015b4 <HAL_GetTick>
 80026cc:	0003      	movs	r3, r0
 80026ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d0:	e009      	b.n	80026e6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026d2:	f7fe ff6f 	bl	80015b4 <HAL_GetTick>
 80026d6:	0002      	movs	r2, r0
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	4aaf      	ldr	r2, [pc, #700]	; (800299c <HAL_RCC_OscConfig+0x680>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e19a      	b.n	8002a1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026e6:	4bac      	ldr	r3, [pc, #688]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 80026e8:	6a1b      	ldr	r3, [r3, #32]
 80026ea:	2202      	movs	r2, #2
 80026ec:	4013      	ands	r3, r2
 80026ee:	d0f0      	beq.n	80026d2 <HAL_RCC_OscConfig+0x3b6>
 80026f0:	e013      	b.n	800271a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f2:	f7fe ff5f 	bl	80015b4 <HAL_GetTick>
 80026f6:	0003      	movs	r3, r0
 80026f8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026fa:	e009      	b.n	8002710 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026fc:	f7fe ff5a 	bl	80015b4 <HAL_GetTick>
 8002700:	0002      	movs	r2, r0
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	4aa5      	ldr	r2, [pc, #660]	; (800299c <HAL_RCC_OscConfig+0x680>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e185      	b.n	8002a1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002710:	4ba1      	ldr	r3, [pc, #644]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	2202      	movs	r2, #2
 8002716:	4013      	ands	r3, r2
 8002718:	d1f0      	bne.n	80026fc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800271a:	231f      	movs	r3, #31
 800271c:	18fb      	adds	r3, r7, r3
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d105      	bne.n	8002730 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002724:	4b9c      	ldr	r3, [pc, #624]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 8002726:	69da      	ldr	r2, [r3, #28]
 8002728:	4b9b      	ldr	r3, [pc, #620]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 800272a:	499d      	ldr	r1, [pc, #628]	; (80029a0 <HAL_RCC_OscConfig+0x684>)
 800272c:	400a      	ands	r2, r1
 800272e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2210      	movs	r2, #16
 8002736:	4013      	ands	r3, r2
 8002738:	d063      	beq.n	8002802 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d12a      	bne.n	8002798 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002742:	4b95      	ldr	r3, [pc, #596]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 8002744:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002746:	4b94      	ldr	r3, [pc, #592]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 8002748:	2104      	movs	r1, #4
 800274a:	430a      	orrs	r2, r1
 800274c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800274e:	4b92      	ldr	r3, [pc, #584]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 8002750:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002752:	4b91      	ldr	r3, [pc, #580]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 8002754:	2101      	movs	r1, #1
 8002756:	430a      	orrs	r2, r1
 8002758:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800275a:	f7fe ff2b 	bl	80015b4 <HAL_GetTick>
 800275e:	0003      	movs	r3, r0
 8002760:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002764:	f7fe ff26 	bl	80015b4 <HAL_GetTick>
 8002768:	0002      	movs	r2, r0
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e152      	b.n	8002a1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002776:	4b88      	ldr	r3, [pc, #544]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 8002778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800277a:	2202      	movs	r2, #2
 800277c:	4013      	ands	r3, r2
 800277e:	d0f1      	beq.n	8002764 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002780:	4b85      	ldr	r3, [pc, #532]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 8002782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002784:	22f8      	movs	r2, #248	; 0xf8
 8002786:	4393      	bics	r3, r2
 8002788:	0019      	movs	r1, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	00da      	lsls	r2, r3, #3
 8002790:	4b81      	ldr	r3, [pc, #516]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 8002792:	430a      	orrs	r2, r1
 8002794:	635a      	str	r2, [r3, #52]	; 0x34
 8002796:	e034      	b.n	8002802 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	695b      	ldr	r3, [r3, #20]
 800279c:	3305      	adds	r3, #5
 800279e:	d111      	bne.n	80027c4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80027a0:	4b7d      	ldr	r3, [pc, #500]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 80027a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027a4:	4b7c      	ldr	r3, [pc, #496]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 80027a6:	2104      	movs	r1, #4
 80027a8:	438a      	bics	r2, r1
 80027aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80027ac:	4b7a      	ldr	r3, [pc, #488]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 80027ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b0:	22f8      	movs	r2, #248	; 0xf8
 80027b2:	4393      	bics	r3, r2
 80027b4:	0019      	movs	r1, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	00da      	lsls	r2, r3, #3
 80027bc:	4b76      	ldr	r3, [pc, #472]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 80027be:	430a      	orrs	r2, r1
 80027c0:	635a      	str	r2, [r3, #52]	; 0x34
 80027c2:	e01e      	b.n	8002802 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80027c4:	4b74      	ldr	r3, [pc, #464]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 80027c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027c8:	4b73      	ldr	r3, [pc, #460]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 80027ca:	2104      	movs	r1, #4
 80027cc:	430a      	orrs	r2, r1
 80027ce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80027d0:	4b71      	ldr	r3, [pc, #452]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 80027d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027d4:	4b70      	ldr	r3, [pc, #448]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 80027d6:	2101      	movs	r1, #1
 80027d8:	438a      	bics	r2, r1
 80027da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027dc:	f7fe feea 	bl	80015b4 <HAL_GetTick>
 80027e0:	0003      	movs	r3, r0
 80027e2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80027e6:	f7fe fee5 	bl	80015b4 <HAL_GetTick>
 80027ea:	0002      	movs	r2, r0
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e111      	b.n	8002a1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80027f8:	4b67      	ldr	r3, [pc, #412]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 80027fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027fc:	2202      	movs	r2, #2
 80027fe:	4013      	ands	r3, r2
 8002800:	d1f1      	bne.n	80027e6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2220      	movs	r2, #32
 8002808:	4013      	ands	r3, r2
 800280a:	d05c      	beq.n	80028c6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800280c:	4b62      	ldr	r3, [pc, #392]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	220c      	movs	r2, #12
 8002812:	4013      	ands	r3, r2
 8002814:	2b0c      	cmp	r3, #12
 8002816:	d00e      	beq.n	8002836 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002818:	4b5f      	ldr	r3, [pc, #380]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	220c      	movs	r2, #12
 800281e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002820:	2b08      	cmp	r3, #8
 8002822:	d114      	bne.n	800284e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002824:	4b5c      	ldr	r3, [pc, #368]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 8002826:	685a      	ldr	r2, [r3, #4]
 8002828:	23c0      	movs	r3, #192	; 0xc0
 800282a:	025b      	lsls	r3, r3, #9
 800282c:	401a      	ands	r2, r3
 800282e:	23c0      	movs	r3, #192	; 0xc0
 8002830:	025b      	lsls	r3, r3, #9
 8002832:	429a      	cmp	r2, r3
 8002834:	d10b      	bne.n	800284e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002836:	4b58      	ldr	r3, [pc, #352]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 8002838:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800283a:	2380      	movs	r3, #128	; 0x80
 800283c:	029b      	lsls	r3, r3, #10
 800283e:	4013      	ands	r3, r2
 8002840:	d040      	beq.n	80028c4 <HAL_RCC_OscConfig+0x5a8>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d03c      	beq.n	80028c4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e0e6      	b.n	8002a1c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a1b      	ldr	r3, [r3, #32]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d01b      	beq.n	800288e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002856:	4b50      	ldr	r3, [pc, #320]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 8002858:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800285a:	4b4f      	ldr	r3, [pc, #316]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 800285c:	2180      	movs	r1, #128	; 0x80
 800285e:	0249      	lsls	r1, r1, #9
 8002860:	430a      	orrs	r2, r1
 8002862:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002864:	f7fe fea6 	bl	80015b4 <HAL_GetTick>
 8002868:	0003      	movs	r3, r0
 800286a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800286c:	e008      	b.n	8002880 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800286e:	f7fe fea1 	bl	80015b4 <HAL_GetTick>
 8002872:	0002      	movs	r2, r0
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e0cd      	b.n	8002a1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002880:	4b45      	ldr	r3, [pc, #276]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 8002882:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002884:	2380      	movs	r3, #128	; 0x80
 8002886:	029b      	lsls	r3, r3, #10
 8002888:	4013      	ands	r3, r2
 800288a:	d0f0      	beq.n	800286e <HAL_RCC_OscConfig+0x552>
 800288c:	e01b      	b.n	80028c6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800288e:	4b42      	ldr	r3, [pc, #264]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 8002890:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002892:	4b41      	ldr	r3, [pc, #260]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 8002894:	4943      	ldr	r1, [pc, #268]	; (80029a4 <HAL_RCC_OscConfig+0x688>)
 8002896:	400a      	ands	r2, r1
 8002898:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289a:	f7fe fe8b 	bl	80015b4 <HAL_GetTick>
 800289e:	0003      	movs	r3, r0
 80028a0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028a4:	f7fe fe86 	bl	80015b4 <HAL_GetTick>
 80028a8:	0002      	movs	r2, r0
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e0b2      	b.n	8002a1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80028b6:	4b38      	ldr	r3, [pc, #224]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 80028b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028ba:	2380      	movs	r3, #128	; 0x80
 80028bc:	029b      	lsls	r3, r3, #10
 80028be:	4013      	ands	r3, r2
 80028c0:	d1f0      	bne.n	80028a4 <HAL_RCC_OscConfig+0x588>
 80028c2:	e000      	b.n	80028c6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80028c4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d100      	bne.n	80028d0 <HAL_RCC_OscConfig+0x5b4>
 80028ce:	e0a4      	b.n	8002a1a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028d0:	4b31      	ldr	r3, [pc, #196]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	220c      	movs	r2, #12
 80028d6:	4013      	ands	r3, r2
 80028d8:	2b08      	cmp	r3, #8
 80028da:	d100      	bne.n	80028de <HAL_RCC_OscConfig+0x5c2>
 80028dc:	e078      	b.n	80029d0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d14c      	bne.n	8002980 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028e6:	4b2c      	ldr	r3, [pc, #176]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	4b2b      	ldr	r3, [pc, #172]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 80028ec:	492e      	ldr	r1, [pc, #184]	; (80029a8 <HAL_RCC_OscConfig+0x68c>)
 80028ee:	400a      	ands	r2, r1
 80028f0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f2:	f7fe fe5f 	bl	80015b4 <HAL_GetTick>
 80028f6:	0003      	movs	r3, r0
 80028f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028fc:	f7fe fe5a 	bl	80015b4 <HAL_GetTick>
 8002900:	0002      	movs	r2, r0
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e086      	b.n	8002a1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800290e:	4b22      	ldr	r3, [pc, #136]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	2380      	movs	r3, #128	; 0x80
 8002914:	049b      	lsls	r3, r3, #18
 8002916:	4013      	ands	r3, r2
 8002918:	d1f0      	bne.n	80028fc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800291a:	4b1f      	ldr	r3, [pc, #124]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 800291c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291e:	220f      	movs	r2, #15
 8002920:	4393      	bics	r3, r2
 8002922:	0019      	movs	r1, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002928:	4b1b      	ldr	r3, [pc, #108]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 800292a:	430a      	orrs	r2, r1
 800292c:	62da      	str	r2, [r3, #44]	; 0x2c
 800292e:	4b1a      	ldr	r3, [pc, #104]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	4a1e      	ldr	r2, [pc, #120]	; (80029ac <HAL_RCC_OscConfig+0x690>)
 8002934:	4013      	ands	r3, r2
 8002936:	0019      	movs	r1, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002940:	431a      	orrs	r2, r3
 8002942:	4b15      	ldr	r3, [pc, #84]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 8002944:	430a      	orrs	r2, r1
 8002946:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002948:	4b13      	ldr	r3, [pc, #76]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	4b12      	ldr	r3, [pc, #72]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 800294e:	2180      	movs	r1, #128	; 0x80
 8002950:	0449      	lsls	r1, r1, #17
 8002952:	430a      	orrs	r2, r1
 8002954:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002956:	f7fe fe2d 	bl	80015b4 <HAL_GetTick>
 800295a:	0003      	movs	r3, r0
 800295c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002960:	f7fe fe28 	bl	80015b4 <HAL_GetTick>
 8002964:	0002      	movs	r2, r0
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e054      	b.n	8002a1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002972:	4b09      	ldr	r3, [pc, #36]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	2380      	movs	r3, #128	; 0x80
 8002978:	049b      	lsls	r3, r3, #18
 800297a:	4013      	ands	r3, r2
 800297c:	d0f0      	beq.n	8002960 <HAL_RCC_OscConfig+0x644>
 800297e:	e04c      	b.n	8002a1a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002980:	4b05      	ldr	r3, [pc, #20]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	4b04      	ldr	r3, [pc, #16]	; (8002998 <HAL_RCC_OscConfig+0x67c>)
 8002986:	4908      	ldr	r1, [pc, #32]	; (80029a8 <HAL_RCC_OscConfig+0x68c>)
 8002988:	400a      	ands	r2, r1
 800298a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298c:	f7fe fe12 	bl	80015b4 <HAL_GetTick>
 8002990:	0003      	movs	r3, r0
 8002992:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002994:	e015      	b.n	80029c2 <HAL_RCC_OscConfig+0x6a6>
 8002996:	46c0      	nop			; (mov r8, r8)
 8002998:	40021000 	.word	0x40021000
 800299c:	00001388 	.word	0x00001388
 80029a0:	efffffff 	.word	0xefffffff
 80029a4:	fffeffff 	.word	0xfffeffff
 80029a8:	feffffff 	.word	0xfeffffff
 80029ac:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029b0:	f7fe fe00 	bl	80015b4 <HAL_GetTick>
 80029b4:	0002      	movs	r2, r0
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e02c      	b.n	8002a1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029c2:	4b18      	ldr	r3, [pc, #96]	; (8002a24 <HAL_RCC_OscConfig+0x708>)
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	2380      	movs	r3, #128	; 0x80
 80029c8:	049b      	lsls	r3, r3, #18
 80029ca:	4013      	ands	r3, r2
 80029cc:	d1f0      	bne.n	80029b0 <HAL_RCC_OscConfig+0x694>
 80029ce:	e024      	b.n	8002a1a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d101      	bne.n	80029dc <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e01f      	b.n	8002a1c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80029dc:	4b11      	ldr	r3, [pc, #68]	; (8002a24 <HAL_RCC_OscConfig+0x708>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80029e2:	4b10      	ldr	r3, [pc, #64]	; (8002a24 <HAL_RCC_OscConfig+0x708>)
 80029e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e8:	697a      	ldr	r2, [r7, #20]
 80029ea:	23c0      	movs	r3, #192	; 0xc0
 80029ec:	025b      	lsls	r3, r3, #9
 80029ee:	401a      	ands	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d10e      	bne.n	8002a16 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	220f      	movs	r2, #15
 80029fc:	401a      	ands	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d107      	bne.n	8002a16 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	23f0      	movs	r3, #240	; 0xf0
 8002a0a:	039b      	lsls	r3, r3, #14
 8002a0c:	401a      	ands	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d001      	beq.n	8002a1a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e000      	b.n	8002a1c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	b008      	add	sp, #32
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40021000 	.word	0x40021000

08002a28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d101      	bne.n	8002a3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e0bf      	b.n	8002bbc <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a3c:	4b61      	ldr	r3, [pc, #388]	; (8002bc4 <HAL_RCC_ClockConfig+0x19c>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2201      	movs	r2, #1
 8002a42:	4013      	ands	r3, r2
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d911      	bls.n	8002a6e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a4a:	4b5e      	ldr	r3, [pc, #376]	; (8002bc4 <HAL_RCC_ClockConfig+0x19c>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	4393      	bics	r3, r2
 8002a52:	0019      	movs	r1, r3
 8002a54:	4b5b      	ldr	r3, [pc, #364]	; (8002bc4 <HAL_RCC_ClockConfig+0x19c>)
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a5c:	4b59      	ldr	r3, [pc, #356]	; (8002bc4 <HAL_RCC_ClockConfig+0x19c>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2201      	movs	r2, #1
 8002a62:	4013      	ands	r3, r2
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d001      	beq.n	8002a6e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e0a6      	b.n	8002bbc <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2202      	movs	r2, #2
 8002a74:	4013      	ands	r3, r2
 8002a76:	d015      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2204      	movs	r2, #4
 8002a7e:	4013      	ands	r3, r2
 8002a80:	d006      	beq.n	8002a90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002a82:	4b51      	ldr	r3, [pc, #324]	; (8002bc8 <HAL_RCC_ClockConfig+0x1a0>)
 8002a84:	685a      	ldr	r2, [r3, #4]
 8002a86:	4b50      	ldr	r3, [pc, #320]	; (8002bc8 <HAL_RCC_ClockConfig+0x1a0>)
 8002a88:	21e0      	movs	r1, #224	; 0xe0
 8002a8a:	00c9      	lsls	r1, r1, #3
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a90:	4b4d      	ldr	r3, [pc, #308]	; (8002bc8 <HAL_RCC_ClockConfig+0x1a0>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	22f0      	movs	r2, #240	; 0xf0
 8002a96:	4393      	bics	r3, r2
 8002a98:	0019      	movs	r1, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	689a      	ldr	r2, [r3, #8]
 8002a9e:	4b4a      	ldr	r3, [pc, #296]	; (8002bc8 <HAL_RCC_ClockConfig+0x1a0>)
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	4013      	ands	r3, r2
 8002aac:	d04c      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d107      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ab6:	4b44      	ldr	r3, [pc, #272]	; (8002bc8 <HAL_RCC_ClockConfig+0x1a0>)
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	2380      	movs	r3, #128	; 0x80
 8002abc:	029b      	lsls	r3, r3, #10
 8002abe:	4013      	ands	r3, r2
 8002ac0:	d120      	bne.n	8002b04 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e07a      	b.n	8002bbc <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d107      	bne.n	8002ade <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ace:	4b3e      	ldr	r3, [pc, #248]	; (8002bc8 <HAL_RCC_ClockConfig+0x1a0>)
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	2380      	movs	r3, #128	; 0x80
 8002ad4:	049b      	lsls	r3, r3, #18
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	d114      	bne.n	8002b04 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e06e      	b.n	8002bbc <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2b03      	cmp	r3, #3
 8002ae4:	d107      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002ae6:	4b38      	ldr	r3, [pc, #224]	; (8002bc8 <HAL_RCC_ClockConfig+0x1a0>)
 8002ae8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002aea:	2380      	movs	r3, #128	; 0x80
 8002aec:	029b      	lsls	r3, r3, #10
 8002aee:	4013      	ands	r3, r2
 8002af0:	d108      	bne.n	8002b04 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e062      	b.n	8002bbc <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002af6:	4b34      	ldr	r3, [pc, #208]	; (8002bc8 <HAL_RCC_ClockConfig+0x1a0>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2202      	movs	r2, #2
 8002afc:	4013      	ands	r3, r2
 8002afe:	d101      	bne.n	8002b04 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e05b      	b.n	8002bbc <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b04:	4b30      	ldr	r3, [pc, #192]	; (8002bc8 <HAL_RCC_ClockConfig+0x1a0>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	2203      	movs	r2, #3
 8002b0a:	4393      	bics	r3, r2
 8002b0c:	0019      	movs	r1, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685a      	ldr	r2, [r3, #4]
 8002b12:	4b2d      	ldr	r3, [pc, #180]	; (8002bc8 <HAL_RCC_ClockConfig+0x1a0>)
 8002b14:	430a      	orrs	r2, r1
 8002b16:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b18:	f7fe fd4c 	bl	80015b4 <HAL_GetTick>
 8002b1c:	0003      	movs	r3, r0
 8002b1e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b20:	e009      	b.n	8002b36 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b22:	f7fe fd47 	bl	80015b4 <HAL_GetTick>
 8002b26:	0002      	movs	r2, r0
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	4a27      	ldr	r2, [pc, #156]	; (8002bcc <HAL_RCC_ClockConfig+0x1a4>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e042      	b.n	8002bbc <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b36:	4b24      	ldr	r3, [pc, #144]	; (8002bc8 <HAL_RCC_ClockConfig+0x1a0>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	220c      	movs	r2, #12
 8002b3c:	401a      	ands	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d1ec      	bne.n	8002b22 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b48:	4b1e      	ldr	r3, [pc, #120]	; (8002bc4 <HAL_RCC_ClockConfig+0x19c>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	4013      	ands	r3, r2
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d211      	bcs.n	8002b7a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b56:	4b1b      	ldr	r3, [pc, #108]	; (8002bc4 <HAL_RCC_ClockConfig+0x19c>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	4393      	bics	r3, r2
 8002b5e:	0019      	movs	r1, r3
 8002b60:	4b18      	ldr	r3, [pc, #96]	; (8002bc4 <HAL_RCC_ClockConfig+0x19c>)
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	430a      	orrs	r2, r1
 8002b66:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b68:	4b16      	ldr	r3, [pc, #88]	; (8002bc4 <HAL_RCC_ClockConfig+0x19c>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	4013      	ands	r3, r2
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d001      	beq.n	8002b7a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e020      	b.n	8002bbc <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2204      	movs	r2, #4
 8002b80:	4013      	ands	r3, r2
 8002b82:	d009      	beq.n	8002b98 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002b84:	4b10      	ldr	r3, [pc, #64]	; (8002bc8 <HAL_RCC_ClockConfig+0x1a0>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	4a11      	ldr	r2, [pc, #68]	; (8002bd0 <HAL_RCC_ClockConfig+0x1a8>)
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	0019      	movs	r1, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68da      	ldr	r2, [r3, #12]
 8002b92:	4b0d      	ldr	r3, [pc, #52]	; (8002bc8 <HAL_RCC_ClockConfig+0x1a0>)
 8002b94:	430a      	orrs	r2, r1
 8002b96:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002b98:	f000 f820 	bl	8002bdc <HAL_RCC_GetSysClockFreq>
 8002b9c:	0001      	movs	r1, r0
 8002b9e:	4b0a      	ldr	r3, [pc, #40]	; (8002bc8 <HAL_RCC_ClockConfig+0x1a0>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	091b      	lsrs	r3, r3, #4
 8002ba4:	220f      	movs	r2, #15
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	4a0a      	ldr	r2, [pc, #40]	; (8002bd4 <HAL_RCC_ClockConfig+0x1ac>)
 8002baa:	5cd3      	ldrb	r3, [r2, r3]
 8002bac:	000a      	movs	r2, r1
 8002bae:	40da      	lsrs	r2, r3
 8002bb0:	4b09      	ldr	r3, [pc, #36]	; (8002bd8 <HAL_RCC_ClockConfig+0x1b0>)
 8002bb2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002bb4:	2000      	movs	r0, #0
 8002bb6:	f7fe fcb7 	bl	8001528 <HAL_InitTick>
  
  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	b004      	add	sp, #16
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	40022000 	.word	0x40022000
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	00001388 	.word	0x00001388
 8002bd0:	fffff8ff 	.word	0xfffff8ff
 8002bd4:	08005540 	.word	0x08005540
 8002bd8:	20000000 	.word	0x20000000

08002bdc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002be2:	2300      	movs	r3, #0
 8002be4:	60fb      	str	r3, [r7, #12]
 8002be6:	2300      	movs	r3, #0
 8002be8:	60bb      	str	r3, [r7, #8]
 8002bea:	2300      	movs	r3, #0
 8002bec:	617b      	str	r3, [r7, #20]
 8002bee:	2300      	movs	r3, #0
 8002bf0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002bf6:	4b2d      	ldr	r3, [pc, #180]	; (8002cac <HAL_RCC_GetSysClockFreq+0xd0>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	220c      	movs	r2, #12
 8002c00:	4013      	ands	r3, r2
 8002c02:	2b0c      	cmp	r3, #12
 8002c04:	d046      	beq.n	8002c94 <HAL_RCC_GetSysClockFreq+0xb8>
 8002c06:	d848      	bhi.n	8002c9a <HAL_RCC_GetSysClockFreq+0xbe>
 8002c08:	2b04      	cmp	r3, #4
 8002c0a:	d002      	beq.n	8002c12 <HAL_RCC_GetSysClockFreq+0x36>
 8002c0c:	2b08      	cmp	r3, #8
 8002c0e:	d003      	beq.n	8002c18 <HAL_RCC_GetSysClockFreq+0x3c>
 8002c10:	e043      	b.n	8002c9a <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c12:	4b27      	ldr	r3, [pc, #156]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002c14:	613b      	str	r3, [r7, #16]
      break;
 8002c16:	e043      	b.n	8002ca0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	0c9b      	lsrs	r3, r3, #18
 8002c1c:	220f      	movs	r2, #15
 8002c1e:	4013      	ands	r3, r2
 8002c20:	4a24      	ldr	r2, [pc, #144]	; (8002cb4 <HAL_RCC_GetSysClockFreq+0xd8>)
 8002c22:	5cd3      	ldrb	r3, [r2, r3]
 8002c24:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002c26:	4b21      	ldr	r3, [pc, #132]	; (8002cac <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2a:	220f      	movs	r2, #15
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	4a22      	ldr	r2, [pc, #136]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0xdc>)
 8002c30:	5cd3      	ldrb	r3, [r2, r3]
 8002c32:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	23c0      	movs	r3, #192	; 0xc0
 8002c38:	025b      	lsls	r3, r3, #9
 8002c3a:	401a      	ands	r2, r3
 8002c3c:	2380      	movs	r3, #128	; 0x80
 8002c3e:	025b      	lsls	r3, r3, #9
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d109      	bne.n	8002c58 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c44:	68b9      	ldr	r1, [r7, #8]
 8002c46:	481a      	ldr	r0, [pc, #104]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002c48:	f7fd fa5e 	bl	8000108 <__udivsi3>
 8002c4c:	0003      	movs	r3, r0
 8002c4e:	001a      	movs	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4353      	muls	r3, r2
 8002c54:	617b      	str	r3, [r7, #20]
 8002c56:	e01a      	b.n	8002c8e <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	23c0      	movs	r3, #192	; 0xc0
 8002c5c:	025b      	lsls	r3, r3, #9
 8002c5e:	401a      	ands	r2, r3
 8002c60:	23c0      	movs	r3, #192	; 0xc0
 8002c62:	025b      	lsls	r3, r3, #9
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d109      	bne.n	8002c7c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c68:	68b9      	ldr	r1, [r7, #8]
 8002c6a:	4814      	ldr	r0, [pc, #80]	; (8002cbc <HAL_RCC_GetSysClockFreq+0xe0>)
 8002c6c:	f7fd fa4c 	bl	8000108 <__udivsi3>
 8002c70:	0003      	movs	r3, r0
 8002c72:	001a      	movs	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4353      	muls	r3, r2
 8002c78:	617b      	str	r3, [r7, #20]
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c7c:	68b9      	ldr	r1, [r7, #8]
 8002c7e:	480c      	ldr	r0, [pc, #48]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002c80:	f7fd fa42 	bl	8000108 <__udivsi3>
 8002c84:	0003      	movs	r3, r0
 8002c86:	001a      	movs	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4353      	muls	r3, r2
 8002c8c:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	613b      	str	r3, [r7, #16]
      break;
 8002c92:	e005      	b.n	8002ca0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002c94:	4b09      	ldr	r3, [pc, #36]	; (8002cbc <HAL_RCC_GetSysClockFreq+0xe0>)
 8002c96:	613b      	str	r3, [r7, #16]
      break;
 8002c98:	e002      	b.n	8002ca0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c9a:	4b05      	ldr	r3, [pc, #20]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002c9c:	613b      	str	r3, [r7, #16]
      break;
 8002c9e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002ca0:	693b      	ldr	r3, [r7, #16]
}
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	b006      	add	sp, #24
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	46c0      	nop			; (mov r8, r8)
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	007a1200 	.word	0x007a1200
 8002cb4:	08005558 	.word	0x08005558
 8002cb8:	08005568 	.word	0x08005568
 8002cbc:	02dc6c00 	.word	0x02dc6c00

08002cc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cc4:	4b02      	ldr	r3, [pc, #8]	; (8002cd0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
}
 8002cc8:	0018      	movs	r0, r3
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	46c0      	nop			; (mov r8, r8)
 8002cd0:	20000000 	.word	0x20000000

08002cd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002cd8:	f7ff fff2 	bl	8002cc0 <HAL_RCC_GetHCLKFreq>
 8002cdc:	0001      	movs	r1, r0
 8002cde:	4b06      	ldr	r3, [pc, #24]	; (8002cf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	0a1b      	lsrs	r3, r3, #8
 8002ce4:	2207      	movs	r2, #7
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	4a04      	ldr	r2, [pc, #16]	; (8002cfc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002cea:	5cd3      	ldrb	r3, [r2, r3]
 8002cec:	40d9      	lsrs	r1, r3
 8002cee:	000b      	movs	r3, r1
}    
 8002cf0:	0018      	movs	r0, r3
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	46c0      	nop			; (mov r8, r8)
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	08005550 	.word	0x08005550

08002d00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	2380      	movs	r3, #128	; 0x80
 8002d16:	025b      	lsls	r3, r3, #9
 8002d18:	4013      	ands	r3, r2
 8002d1a:	d100      	bne.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002d1c:	e08e      	b.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002d1e:	2017      	movs	r0, #23
 8002d20:	183b      	adds	r3, r7, r0
 8002d22:	2200      	movs	r2, #0
 8002d24:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d26:	4b67      	ldr	r3, [pc, #412]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d28:	69da      	ldr	r2, [r3, #28]
 8002d2a:	2380      	movs	r3, #128	; 0x80
 8002d2c:	055b      	lsls	r3, r3, #21
 8002d2e:	4013      	ands	r3, r2
 8002d30:	d110      	bne.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d32:	4b64      	ldr	r3, [pc, #400]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d34:	69da      	ldr	r2, [r3, #28]
 8002d36:	4b63      	ldr	r3, [pc, #396]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d38:	2180      	movs	r1, #128	; 0x80
 8002d3a:	0549      	lsls	r1, r1, #21
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	61da      	str	r2, [r3, #28]
 8002d40:	4b60      	ldr	r3, [pc, #384]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d42:	69da      	ldr	r2, [r3, #28]
 8002d44:	2380      	movs	r3, #128	; 0x80
 8002d46:	055b      	lsls	r3, r3, #21
 8002d48:	4013      	ands	r3, r2
 8002d4a:	60bb      	str	r3, [r7, #8]
 8002d4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d4e:	183b      	adds	r3, r7, r0
 8002d50:	2201      	movs	r2, #1
 8002d52:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d54:	4b5c      	ldr	r3, [pc, #368]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	2380      	movs	r3, #128	; 0x80
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	d11a      	bne.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d60:	4b59      	ldr	r3, [pc, #356]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	4b58      	ldr	r3, [pc, #352]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002d66:	2180      	movs	r1, #128	; 0x80
 8002d68:	0049      	lsls	r1, r1, #1
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d6e:	f7fe fc21 	bl	80015b4 <HAL_GetTick>
 8002d72:	0003      	movs	r3, r0
 8002d74:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d76:	e008      	b.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d78:	f7fe fc1c 	bl	80015b4 <HAL_GetTick>
 8002d7c:	0002      	movs	r2, r0
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b64      	cmp	r3, #100	; 0x64
 8002d84:	d901      	bls.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e097      	b.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d8a:	4b4f      	ldr	r3, [pc, #316]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	2380      	movs	r3, #128	; 0x80
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	4013      	ands	r3, r2
 8002d94:	d0f0      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d96:	4b4b      	ldr	r3, [pc, #300]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d98:	6a1a      	ldr	r2, [r3, #32]
 8002d9a:	23c0      	movs	r3, #192	; 0xc0
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4013      	ands	r3, r2
 8002da0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d034      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685a      	ldr	r2, [r3, #4]
 8002dac:	23c0      	movs	r3, #192	; 0xc0
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	4013      	ands	r3, r2
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d02c      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002db8:	4b42      	ldr	r3, [pc, #264]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	4a43      	ldr	r2, [pc, #268]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002dc2:	4b40      	ldr	r3, [pc, #256]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002dc4:	6a1a      	ldr	r2, [r3, #32]
 8002dc6:	4b3f      	ldr	r3, [pc, #252]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002dc8:	2180      	movs	r1, #128	; 0x80
 8002dca:	0249      	lsls	r1, r1, #9
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002dd0:	4b3c      	ldr	r3, [pc, #240]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002dd2:	6a1a      	ldr	r2, [r3, #32]
 8002dd4:	4b3b      	ldr	r3, [pc, #236]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002dd6:	493e      	ldr	r1, [pc, #248]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dd8:	400a      	ands	r2, r1
 8002dda:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ddc:	4b39      	ldr	r3, [pc, #228]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2201      	movs	r2, #1
 8002de6:	4013      	ands	r3, r2
 8002de8:	d013      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dea:	f7fe fbe3 	bl	80015b4 <HAL_GetTick>
 8002dee:	0003      	movs	r3, r0
 8002df0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002df2:	e009      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002df4:	f7fe fbde 	bl	80015b4 <HAL_GetTick>
 8002df8:	0002      	movs	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	4a35      	ldr	r2, [pc, #212]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d901      	bls.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e058      	b.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e08:	4b2e      	ldr	r3, [pc, #184]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	2202      	movs	r2, #2
 8002e0e:	4013      	ands	r3, r2
 8002e10:	d0f0      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e12:	4b2c      	ldr	r3, [pc, #176]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e14:	6a1b      	ldr	r3, [r3, #32]
 8002e16:	4a2d      	ldr	r2, [pc, #180]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e18:	4013      	ands	r3, r2
 8002e1a:	0019      	movs	r1, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685a      	ldr	r2, [r3, #4]
 8002e20:	4b28      	ldr	r3, [pc, #160]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e22:	430a      	orrs	r2, r1
 8002e24:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e26:	2317      	movs	r3, #23
 8002e28:	18fb      	adds	r3, r7, r3
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d105      	bne.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e30:	4b24      	ldr	r3, [pc, #144]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e32:	69da      	ldr	r2, [r3, #28]
 8002e34:	4b23      	ldr	r3, [pc, #140]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e36:	4928      	ldr	r1, [pc, #160]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002e38:	400a      	ands	r2, r1
 8002e3a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2201      	movs	r2, #1
 8002e42:	4013      	ands	r3, r2
 8002e44:	d009      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e46:	4b1f      	ldr	r3, [pc, #124]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4a:	2203      	movs	r2, #3
 8002e4c:	4393      	bics	r3, r2
 8002e4e:	0019      	movs	r1, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	4b1b      	ldr	r3, [pc, #108]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e56:	430a      	orrs	r2, r1
 8002e58:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2220      	movs	r2, #32
 8002e60:	4013      	ands	r3, r2
 8002e62:	d009      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e64:	4b17      	ldr	r3, [pc, #92]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e68:	2210      	movs	r2, #16
 8002e6a:	4393      	bics	r3, r2
 8002e6c:	0019      	movs	r1, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68da      	ldr	r2, [r3, #12]
 8002e72:	4b14      	ldr	r3, [pc, #80]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e74:	430a      	orrs	r2, r1
 8002e76:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	2380      	movs	r3, #128	; 0x80
 8002e7e:	029b      	lsls	r3, r3, #10
 8002e80:	4013      	ands	r3, r2
 8002e82:	d009      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e84:	4b0f      	ldr	r3, [pc, #60]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e88:	2280      	movs	r2, #128	; 0x80
 8002e8a:	4393      	bics	r3, r2
 8002e8c:	0019      	movs	r1, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	695a      	ldr	r2, [r3, #20]
 8002e92:	4b0c      	ldr	r3, [pc, #48]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e94:	430a      	orrs	r2, r1
 8002e96:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	2380      	movs	r3, #128	; 0x80
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	d009      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002ea4:	4b07      	ldr	r3, [pc, #28]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea8:	2240      	movs	r2, #64	; 0x40
 8002eaa:	4393      	bics	r3, r2
 8002eac:	0019      	movs	r1, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	691a      	ldr	r2, [r3, #16]
 8002eb2:	4b04      	ldr	r3, [pc, #16]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	0018      	movs	r0, r3
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	b006      	add	sp, #24
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	46c0      	nop			; (mov r8, r8)
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	40007000 	.word	0x40007000
 8002ecc:	fffffcff 	.word	0xfffffcff
 8002ed0:	fffeffff 	.word	0xfffeffff
 8002ed4:	00001388 	.word	0x00001388
 8002ed8:	efffffff 	.word	0xefffffff

08002edc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e042      	b.n	8002f74 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	223d      	movs	r2, #61	; 0x3d
 8002ef2:	5c9b      	ldrb	r3, [r3, r2]
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d107      	bne.n	8002f0a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	223c      	movs	r2, #60	; 0x3c
 8002efe:	2100      	movs	r1, #0
 8002f00:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	0018      	movs	r0, r3
 8002f06:	f7fe f93b 	bl	8001180 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	223d      	movs	r2, #61	; 0x3d
 8002f0e:	2102      	movs	r1, #2
 8002f10:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	3304      	adds	r3, #4
 8002f1a:	0019      	movs	r1, r3
 8002f1c:	0010      	movs	r0, r2
 8002f1e:	f000 fcb5 	bl	800388c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2246      	movs	r2, #70	; 0x46
 8002f26:	2101      	movs	r1, #1
 8002f28:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	223e      	movs	r2, #62	; 0x3e
 8002f2e:	2101      	movs	r1, #1
 8002f30:	5499      	strb	r1, [r3, r2]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	223f      	movs	r2, #63	; 0x3f
 8002f36:	2101      	movs	r1, #1
 8002f38:	5499      	strb	r1, [r3, r2]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2240      	movs	r2, #64	; 0x40
 8002f3e:	2101      	movs	r1, #1
 8002f40:	5499      	strb	r1, [r3, r2]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2241      	movs	r2, #65	; 0x41
 8002f46:	2101      	movs	r1, #1
 8002f48:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2242      	movs	r2, #66	; 0x42
 8002f4e:	2101      	movs	r1, #1
 8002f50:	5499      	strb	r1, [r3, r2]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2243      	movs	r2, #67	; 0x43
 8002f56:	2101      	movs	r1, #1
 8002f58:	5499      	strb	r1, [r3, r2]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2244      	movs	r2, #68	; 0x44
 8002f5e:	2101      	movs	r1, #1
 8002f60:	5499      	strb	r1, [r3, r2]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2245      	movs	r2, #69	; 0x45
 8002f66:	2101      	movs	r1, #1
 8002f68:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	223d      	movs	r2, #61	; 0x3d
 8002f6e:	2101      	movs	r1, #1
 8002f70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	0018      	movs	r0, r3
 8002f76:	46bd      	mov	sp, r7
 8002f78:	b002      	add	sp, #8
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e042      	b.n	8003014 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	223d      	movs	r2, #61	; 0x3d
 8002f92:	5c9b      	ldrb	r3, [r3, r2]
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d107      	bne.n	8002faa <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	223c      	movs	r2, #60	; 0x3c
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	f000 f839 	bl	800301c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	223d      	movs	r2, #61	; 0x3d
 8002fae:	2102      	movs	r1, #2
 8002fb0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	3304      	adds	r3, #4
 8002fba:	0019      	movs	r1, r3
 8002fbc:	0010      	movs	r0, r2
 8002fbe:	f000 fc65 	bl	800388c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2246      	movs	r2, #70	; 0x46
 8002fc6:	2101      	movs	r1, #1
 8002fc8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	223e      	movs	r2, #62	; 0x3e
 8002fce:	2101      	movs	r1, #1
 8002fd0:	5499      	strb	r1, [r3, r2]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	223f      	movs	r2, #63	; 0x3f
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	5499      	strb	r1, [r3, r2]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2240      	movs	r2, #64	; 0x40
 8002fde:	2101      	movs	r1, #1
 8002fe0:	5499      	strb	r1, [r3, r2]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2241      	movs	r2, #65	; 0x41
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2242      	movs	r2, #66	; 0x42
 8002fee:	2101      	movs	r1, #1
 8002ff0:	5499      	strb	r1, [r3, r2]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2243      	movs	r2, #67	; 0x43
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	5499      	strb	r1, [r3, r2]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2244      	movs	r2, #68	; 0x44
 8002ffe:	2101      	movs	r1, #1
 8003000:	5499      	strb	r1, [r3, r2]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2245      	movs	r2, #69	; 0x45
 8003006:	2101      	movs	r1, #1
 8003008:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	223d      	movs	r2, #61	; 0x3d
 800300e:	2101      	movs	r1, #1
 8003010:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	0018      	movs	r0, r3
 8003016:	46bd      	mov	sp, r7
 8003018:	b002      	add	sp, #8
 800301a:	bd80      	pop	{r7, pc}

0800301c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003024:	46c0      	nop			; (mov r8, r8)
 8003026:	46bd      	mov	sp, r7
 8003028:	b002      	add	sp, #8
 800302a:	bd80      	pop	{r7, pc}

0800302c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
 8003038:	001a      	movs	r2, r3
 800303a:	1cbb      	adds	r3, r7, #2
 800303c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800303e:	2317      	movs	r3, #23
 8003040:	18fb      	adds	r3, r7, r3
 8003042:	2200      	movs	r2, #0
 8003044:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d108      	bne.n	800305e <HAL_TIM_PWM_Start_DMA+0x32>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	223e      	movs	r2, #62	; 0x3e
 8003050:	5c9b      	ldrb	r3, [r3, r2]
 8003052:	b2db      	uxtb	r3, r3
 8003054:	3b02      	subs	r3, #2
 8003056:	425a      	negs	r2, r3
 8003058:	4153      	adcs	r3, r2
 800305a:	b2db      	uxtb	r3, r3
 800305c:	e01f      	b.n	800309e <HAL_TIM_PWM_Start_DMA+0x72>
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	2b04      	cmp	r3, #4
 8003062:	d108      	bne.n	8003076 <HAL_TIM_PWM_Start_DMA+0x4a>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	223f      	movs	r2, #63	; 0x3f
 8003068:	5c9b      	ldrb	r3, [r3, r2]
 800306a:	b2db      	uxtb	r3, r3
 800306c:	3b02      	subs	r3, #2
 800306e:	425a      	negs	r2, r3
 8003070:	4153      	adcs	r3, r2
 8003072:	b2db      	uxtb	r3, r3
 8003074:	e013      	b.n	800309e <HAL_TIM_PWM_Start_DMA+0x72>
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	2b08      	cmp	r3, #8
 800307a:	d108      	bne.n	800308e <HAL_TIM_PWM_Start_DMA+0x62>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2240      	movs	r2, #64	; 0x40
 8003080:	5c9b      	ldrb	r3, [r3, r2]
 8003082:	b2db      	uxtb	r3, r3
 8003084:	3b02      	subs	r3, #2
 8003086:	425a      	negs	r2, r3
 8003088:	4153      	adcs	r3, r2
 800308a:	b2db      	uxtb	r3, r3
 800308c:	e007      	b.n	800309e <HAL_TIM_PWM_Start_DMA+0x72>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2241      	movs	r2, #65	; 0x41
 8003092:	5c9b      	ldrb	r3, [r3, r2]
 8003094:	b2db      	uxtb	r3, r3
 8003096:	3b02      	subs	r3, #2
 8003098:	425a      	negs	r2, r3
 800309a:	4153      	adcs	r3, r2
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80030a2:	2302      	movs	r3, #2
 80030a4:	e15a      	b.n	800335c <HAL_TIM_PWM_Start_DMA+0x330>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d108      	bne.n	80030be <HAL_TIM_PWM_Start_DMA+0x92>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	223e      	movs	r2, #62	; 0x3e
 80030b0:	5c9b      	ldrb	r3, [r3, r2]
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	3b01      	subs	r3, #1
 80030b6:	425a      	negs	r2, r3
 80030b8:	4153      	adcs	r3, r2
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	e01f      	b.n	80030fe <HAL_TIM_PWM_Start_DMA+0xd2>
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	2b04      	cmp	r3, #4
 80030c2:	d108      	bne.n	80030d6 <HAL_TIM_PWM_Start_DMA+0xaa>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	223f      	movs	r2, #63	; 0x3f
 80030c8:	5c9b      	ldrb	r3, [r3, r2]
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	3b01      	subs	r3, #1
 80030ce:	425a      	negs	r2, r3
 80030d0:	4153      	adcs	r3, r2
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	e013      	b.n	80030fe <HAL_TIM_PWM_Start_DMA+0xd2>
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	2b08      	cmp	r3, #8
 80030da:	d108      	bne.n	80030ee <HAL_TIM_PWM_Start_DMA+0xc2>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2240      	movs	r2, #64	; 0x40
 80030e0:	5c9b      	ldrb	r3, [r3, r2]
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	3b01      	subs	r3, #1
 80030e6:	425a      	negs	r2, r3
 80030e8:	4153      	adcs	r3, r2
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	e007      	b.n	80030fe <HAL_TIM_PWM_Start_DMA+0xd2>
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2241      	movs	r2, #65	; 0x41
 80030f2:	5c9b      	ldrb	r3, [r3, r2]
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	3b01      	subs	r3, #1
 80030f8:	425a      	negs	r2, r3
 80030fa:	4153      	adcs	r3, r2
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d025      	beq.n	800314e <HAL_TIM_PWM_Start_DMA+0x122>
  {
    if ((pData == NULL) || (Length == 0U))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d003      	beq.n	8003110 <HAL_TIM_PWM_Start_DMA+0xe4>
 8003108:	1cbb      	adds	r3, r7, #2
 800310a:	881b      	ldrh	r3, [r3, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d101      	bne.n	8003114 <HAL_TIM_PWM_Start_DMA+0xe8>
    {
      return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e123      	b.n	800335c <HAL_TIM_PWM_Start_DMA+0x330>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d104      	bne.n	8003124 <HAL_TIM_PWM_Start_DMA+0xf8>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	223e      	movs	r2, #62	; 0x3e
 800311e:	2102      	movs	r1, #2
 8003120:	5499      	strb	r1, [r3, r2]
 8003122:	e016      	b.n	8003152 <HAL_TIM_PWM_Start_DMA+0x126>
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	2b04      	cmp	r3, #4
 8003128:	d104      	bne.n	8003134 <HAL_TIM_PWM_Start_DMA+0x108>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	223f      	movs	r2, #63	; 0x3f
 800312e:	2102      	movs	r1, #2
 8003130:	5499      	strb	r1, [r3, r2]
 8003132:	e00e      	b.n	8003152 <HAL_TIM_PWM_Start_DMA+0x126>
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	2b08      	cmp	r3, #8
 8003138:	d104      	bne.n	8003144 <HAL_TIM_PWM_Start_DMA+0x118>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2240      	movs	r2, #64	; 0x40
 800313e:	2102      	movs	r1, #2
 8003140:	5499      	strb	r1, [r3, r2]
 8003142:	e006      	b.n	8003152 <HAL_TIM_PWM_Start_DMA+0x126>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2241      	movs	r2, #65	; 0x41
 8003148:	2102      	movs	r1, #2
 800314a:	5499      	strb	r1, [r3, r2]
 800314c:	e001      	b.n	8003152 <HAL_TIM_PWM_Start_DMA+0x126>
    }
  }
  else
  {
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e104      	b.n	800335c <HAL_TIM_PWM_Start_DMA+0x330>
  }

  switch (Channel)
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	2b0c      	cmp	r3, #12
 8003156:	d100      	bne.n	800315a <HAL_TIM_PWM_Start_DMA+0x12e>
 8003158:	e080      	b.n	800325c <HAL_TIM_PWM_Start_DMA+0x230>
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	2b0c      	cmp	r3, #12
 800315e:	d900      	bls.n	8003162 <HAL_TIM_PWM_Start_DMA+0x136>
 8003160:	e0a1      	b.n	80032a6 <HAL_TIM_PWM_Start_DMA+0x27a>
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	2b08      	cmp	r3, #8
 8003166:	d054      	beq.n	8003212 <HAL_TIM_PWM_Start_DMA+0x1e6>
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	2b08      	cmp	r3, #8
 800316c:	d900      	bls.n	8003170 <HAL_TIM_PWM_Start_DMA+0x144>
 800316e:	e09a      	b.n	80032a6 <HAL_TIM_PWM_Start_DMA+0x27a>
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d003      	beq.n	800317e <HAL_TIM_PWM_Start_DMA+0x152>
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	2b04      	cmp	r3, #4
 800317a:	d025      	beq.n	80031c8 <HAL_TIM_PWM_Start_DMA+0x19c>
 800317c:	e093      	b.n	80032a6 <HAL_TIM_PWM_Start_DMA+0x27a>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003182:	4a78      	ldr	r2, [pc, #480]	; (8003364 <HAL_TIM_PWM_Start_DMA+0x338>)
 8003184:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318a:	4a77      	ldr	r2, [pc, #476]	; (8003368 <HAL_TIM_PWM_Start_DMA+0x33c>)
 800318c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003192:	4a76      	ldr	r2, [pc, #472]	; (800336c <HAL_TIM_PWM_Start_DMA+0x340>)
 8003194:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800319a:	6879      	ldr	r1, [r7, #4]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	3334      	adds	r3, #52	; 0x34
 80031a2:	001a      	movs	r2, r3
 80031a4:	1cbb      	adds	r3, r7, #2
 80031a6:	881b      	ldrh	r3, [r3, #0]
 80031a8:	f7fe fd82 	bl	8001cb0 <HAL_DMA_Start_IT>
 80031ac:	1e03      	subs	r3, r0, #0
 80031ae:	d001      	beq.n	80031b4 <HAL_TIM_PWM_Start_DMA+0x188>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e0d3      	b.n	800335c <HAL_TIM_PWM_Start_DMA+0x330>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68da      	ldr	r2, [r3, #12]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2180      	movs	r1, #128	; 0x80
 80031c0:	0089      	lsls	r1, r1, #2
 80031c2:	430a      	orrs	r2, r1
 80031c4:	60da      	str	r2, [r3, #12]
      break;
 80031c6:	e073      	b.n	80032b0 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031cc:	4a65      	ldr	r2, [pc, #404]	; (8003364 <HAL_TIM_PWM_Start_DMA+0x338>)
 80031ce:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d4:	4a64      	ldr	r2, [pc, #400]	; (8003368 <HAL_TIM_PWM_Start_DMA+0x33c>)
 80031d6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031dc:	4a63      	ldr	r2, [pc, #396]	; (800336c <HAL_TIM_PWM_Start_DMA+0x340>)
 80031de:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80031e4:	6879      	ldr	r1, [r7, #4]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	3338      	adds	r3, #56	; 0x38
 80031ec:	001a      	movs	r2, r3
 80031ee:	1cbb      	adds	r3, r7, #2
 80031f0:	881b      	ldrh	r3, [r3, #0]
 80031f2:	f7fe fd5d 	bl	8001cb0 <HAL_DMA_Start_IT>
 80031f6:	1e03      	subs	r3, r0, #0
 80031f8:	d001      	beq.n	80031fe <HAL_TIM_PWM_Start_DMA+0x1d2>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e0ae      	b.n	800335c <HAL_TIM_PWM_Start_DMA+0x330>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68da      	ldr	r2, [r3, #12]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2180      	movs	r1, #128	; 0x80
 800320a:	00c9      	lsls	r1, r1, #3
 800320c:	430a      	orrs	r2, r1
 800320e:	60da      	str	r2, [r3, #12]
      break;
 8003210:	e04e      	b.n	80032b0 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003216:	4a53      	ldr	r2, [pc, #332]	; (8003364 <HAL_TIM_PWM_Start_DMA+0x338>)
 8003218:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321e:	4a52      	ldr	r2, [pc, #328]	; (8003368 <HAL_TIM_PWM_Start_DMA+0x33c>)
 8003220:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003226:	4a51      	ldr	r2, [pc, #324]	; (800336c <HAL_TIM_PWM_Start_DMA+0x340>)
 8003228:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800322e:	6879      	ldr	r1, [r7, #4]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	333c      	adds	r3, #60	; 0x3c
 8003236:	001a      	movs	r2, r3
 8003238:	1cbb      	adds	r3, r7, #2
 800323a:	881b      	ldrh	r3, [r3, #0]
 800323c:	f7fe fd38 	bl	8001cb0 <HAL_DMA_Start_IT>
 8003240:	1e03      	subs	r3, r0, #0
 8003242:	d001      	beq.n	8003248 <HAL_TIM_PWM_Start_DMA+0x21c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e089      	b.n	800335c <HAL_TIM_PWM_Start_DMA+0x330>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68da      	ldr	r2, [r3, #12]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2180      	movs	r1, #128	; 0x80
 8003254:	0109      	lsls	r1, r1, #4
 8003256:	430a      	orrs	r2, r1
 8003258:	60da      	str	r2, [r3, #12]
      break;
 800325a:	e029      	b.n	80032b0 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003260:	4a40      	ldr	r2, [pc, #256]	; (8003364 <HAL_TIM_PWM_Start_DMA+0x338>)
 8003262:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003268:	4a3f      	ldr	r2, [pc, #252]	; (8003368 <HAL_TIM_PWM_Start_DMA+0x33c>)
 800326a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003270:	4a3e      	ldr	r2, [pc, #248]	; (800336c <HAL_TIM_PWM_Start_DMA+0x340>)
 8003272:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003278:	6879      	ldr	r1, [r7, #4]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	3340      	adds	r3, #64	; 0x40
 8003280:	001a      	movs	r2, r3
 8003282:	1cbb      	adds	r3, r7, #2
 8003284:	881b      	ldrh	r3, [r3, #0]
 8003286:	f7fe fd13 	bl	8001cb0 <HAL_DMA_Start_IT>
 800328a:	1e03      	subs	r3, r0, #0
 800328c:	d001      	beq.n	8003292 <HAL_TIM_PWM_Start_DMA+0x266>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e064      	b.n	800335c <HAL_TIM_PWM_Start_DMA+0x330>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68da      	ldr	r2, [r3, #12]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2180      	movs	r1, #128	; 0x80
 800329e:	0149      	lsls	r1, r1, #5
 80032a0:	430a      	orrs	r2, r1
 80032a2:	60da      	str	r2, [r3, #12]
      break;
 80032a4:	e004      	b.n	80032b0 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    default:
      status = HAL_ERROR;
 80032a6:	2317      	movs	r3, #23
 80032a8:	18fb      	adds	r3, r7, r3
 80032aa:	2201      	movs	r2, #1
 80032ac:	701a      	strb	r2, [r3, #0]
      break;
 80032ae:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 80032b0:	2317      	movs	r3, #23
 80032b2:	18fb      	adds	r3, r7, r3
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d14d      	bne.n	8003356 <HAL_TIM_PWM_Start_DMA+0x32a>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68b9      	ldr	r1, [r7, #8]
 80032c0:	2201      	movs	r2, #1
 80032c2:	0018      	movs	r0, r3
 80032c4:	f000 fdd2 	bl	8003e6c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a28      	ldr	r2, [pc, #160]	; (8003370 <HAL_TIM_PWM_Start_DMA+0x344>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d009      	beq.n	80032e6 <HAL_TIM_PWM_Start_DMA+0x2ba>
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a27      	ldr	r2, [pc, #156]	; (8003374 <HAL_TIM_PWM_Start_DMA+0x348>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d004      	beq.n	80032e6 <HAL_TIM_PWM_Start_DMA+0x2ba>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a25      	ldr	r2, [pc, #148]	; (8003378 <HAL_TIM_PWM_Start_DMA+0x34c>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d101      	bne.n	80032ea <HAL_TIM_PWM_Start_DMA+0x2be>
 80032e6:	2301      	movs	r3, #1
 80032e8:	e000      	b.n	80032ec <HAL_TIM_PWM_Start_DMA+0x2c0>
 80032ea:	2300      	movs	r3, #0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d008      	beq.n	8003302 <HAL_TIM_PWM_Start_DMA+0x2d6>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2180      	movs	r1, #128	; 0x80
 80032fc:	0209      	lsls	r1, r1, #8
 80032fe:	430a      	orrs	r2, r1
 8003300:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a1a      	ldr	r2, [pc, #104]	; (8003370 <HAL_TIM_PWM_Start_DMA+0x344>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d00a      	beq.n	8003322 <HAL_TIM_PWM_Start_DMA+0x2f6>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	2380      	movs	r3, #128	; 0x80
 8003312:	05db      	lsls	r3, r3, #23
 8003314:	429a      	cmp	r2, r3
 8003316:	d004      	beq.n	8003322 <HAL_TIM_PWM_Start_DMA+0x2f6>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a17      	ldr	r2, [pc, #92]	; (800337c <HAL_TIM_PWM_Start_DMA+0x350>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d111      	bne.n	8003346 <HAL_TIM_PWM_Start_DMA+0x31a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	2207      	movs	r2, #7
 800332a:	4013      	ands	r3, r2
 800332c:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	2b06      	cmp	r3, #6
 8003332:	d010      	beq.n	8003356 <HAL_TIM_PWM_Start_DMA+0x32a>
      {
        __HAL_TIM_ENABLE(htim);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2101      	movs	r1, #1
 8003340:	430a      	orrs	r2, r1
 8003342:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003344:	e007      	b.n	8003356 <HAL_TIM_PWM_Start_DMA+0x32a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2101      	movs	r1, #1
 8003352:	430a      	orrs	r2, r1
 8003354:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003356:	2317      	movs	r3, #23
 8003358:	18fb      	adds	r3, r7, r3
 800335a:	781b      	ldrb	r3, [r3, #0]
}
 800335c:	0018      	movs	r0, r3
 800335e:	46bd      	mov	sp, r7
 8003360:	b006      	add	sp, #24
 8003362:	bd80      	pop	{r7, pc}
 8003364:	08003779 	.word	0x08003779
 8003368:	08003823 	.word	0x08003823
 800336c:	080036e5 	.word	0x080036e5
 8003370:	40012c00 	.word	0x40012c00
 8003374:	40014400 	.word	0x40014400
 8003378:	40014800 	.word	0x40014800
 800337c:	40000400 	.word	0x40000400

08003380 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800338c:	2317      	movs	r3, #23
 800338e:	18fb      	adds	r3, r7, r3
 8003390:	2200      	movs	r2, #0
 8003392:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	223c      	movs	r2, #60	; 0x3c
 8003398:	5c9b      	ldrb	r3, [r3, r2]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d101      	bne.n	80033a2 <HAL_TIM_PWM_ConfigChannel+0x22>
 800339e:	2302      	movs	r3, #2
 80033a0:	e0ad      	b.n	80034fe <HAL_TIM_PWM_ConfigChannel+0x17e>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	223c      	movs	r2, #60	; 0x3c
 80033a6:	2101      	movs	r1, #1
 80033a8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2b0c      	cmp	r3, #12
 80033ae:	d100      	bne.n	80033b2 <HAL_TIM_PWM_ConfigChannel+0x32>
 80033b0:	e076      	b.n	80034a0 <HAL_TIM_PWM_ConfigChannel+0x120>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2b0c      	cmp	r3, #12
 80033b6:	d900      	bls.n	80033ba <HAL_TIM_PWM_ConfigChannel+0x3a>
 80033b8:	e095      	b.n	80034e6 <HAL_TIM_PWM_ConfigChannel+0x166>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2b08      	cmp	r3, #8
 80033be:	d04e      	beq.n	800345e <HAL_TIM_PWM_ConfigChannel+0xde>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b08      	cmp	r3, #8
 80033c4:	d900      	bls.n	80033c8 <HAL_TIM_PWM_ConfigChannel+0x48>
 80033c6:	e08e      	b.n	80034e6 <HAL_TIM_PWM_ConfigChannel+0x166>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d003      	beq.n	80033d6 <HAL_TIM_PWM_ConfigChannel+0x56>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2b04      	cmp	r3, #4
 80033d2:	d021      	beq.n	8003418 <HAL_TIM_PWM_ConfigChannel+0x98>
 80033d4:	e087      	b.n	80034e6 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68ba      	ldr	r2, [r7, #8]
 80033dc:	0011      	movs	r1, r2
 80033de:	0018      	movs	r0, r3
 80033e0:	f000 faca 	bl	8003978 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	699a      	ldr	r2, [r3, #24]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2108      	movs	r1, #8
 80033f0:	430a      	orrs	r2, r1
 80033f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	699a      	ldr	r2, [r3, #24]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2104      	movs	r1, #4
 8003400:	438a      	bics	r2, r1
 8003402:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6999      	ldr	r1, [r3, #24]
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	691a      	ldr	r2, [r3, #16]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	619a      	str	r2, [r3, #24]
      break;
 8003416:	e06b      	b.n	80034f0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68ba      	ldr	r2, [r7, #8]
 800341e:	0011      	movs	r1, r2
 8003420:	0018      	movs	r0, r3
 8003422:	f000 fb27 	bl	8003a74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	699a      	ldr	r2, [r3, #24]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2180      	movs	r1, #128	; 0x80
 8003432:	0109      	lsls	r1, r1, #4
 8003434:	430a      	orrs	r2, r1
 8003436:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	699a      	ldr	r2, [r3, #24]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4931      	ldr	r1, [pc, #196]	; (8003508 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003444:	400a      	ands	r2, r1
 8003446:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	6999      	ldr	r1, [r3, #24]
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	021a      	lsls	r2, r3, #8
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	430a      	orrs	r2, r1
 800345a:	619a      	str	r2, [r3, #24]
      break;
 800345c:	e048      	b.n	80034f0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68ba      	ldr	r2, [r7, #8]
 8003464:	0011      	movs	r1, r2
 8003466:	0018      	movs	r0, r3
 8003468:	f000 fb82 	bl	8003b70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	69da      	ldr	r2, [r3, #28]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2108      	movs	r1, #8
 8003478:	430a      	orrs	r2, r1
 800347a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	69da      	ldr	r2, [r3, #28]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2104      	movs	r1, #4
 8003488:	438a      	bics	r2, r1
 800348a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	69d9      	ldr	r1, [r3, #28]
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	691a      	ldr	r2, [r3, #16]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	430a      	orrs	r2, r1
 800349c:	61da      	str	r2, [r3, #28]
      break;
 800349e:	e027      	b.n	80034f0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68ba      	ldr	r2, [r7, #8]
 80034a6:	0011      	movs	r1, r2
 80034a8:	0018      	movs	r0, r3
 80034aa:	f000 fbe1 	bl	8003c70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	69da      	ldr	r2, [r3, #28]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2180      	movs	r1, #128	; 0x80
 80034ba:	0109      	lsls	r1, r1, #4
 80034bc:	430a      	orrs	r2, r1
 80034be:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	69da      	ldr	r2, [r3, #28]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	490f      	ldr	r1, [pc, #60]	; (8003508 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80034cc:	400a      	ands	r2, r1
 80034ce:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	69d9      	ldr	r1, [r3, #28]
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	021a      	lsls	r2, r3, #8
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	430a      	orrs	r2, r1
 80034e2:	61da      	str	r2, [r3, #28]
      break;
 80034e4:	e004      	b.n	80034f0 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80034e6:	2317      	movs	r3, #23
 80034e8:	18fb      	adds	r3, r7, r3
 80034ea:	2201      	movs	r2, #1
 80034ec:	701a      	strb	r2, [r3, #0]
      break;
 80034ee:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	223c      	movs	r2, #60	; 0x3c
 80034f4:	2100      	movs	r1, #0
 80034f6:	5499      	strb	r1, [r3, r2]

  return status;
 80034f8:	2317      	movs	r3, #23
 80034fa:	18fb      	adds	r3, r7, r3
 80034fc:	781b      	ldrb	r3, [r3, #0]
}
 80034fe:	0018      	movs	r0, r3
 8003500:	46bd      	mov	sp, r7
 8003502:	b006      	add	sp, #24
 8003504:	bd80      	pop	{r7, pc}
 8003506:	46c0      	nop			; (mov r8, r8)
 8003508:	fffffbff 	.word	0xfffffbff

0800350c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003516:	230f      	movs	r3, #15
 8003518:	18fb      	adds	r3, r7, r3
 800351a:	2200      	movs	r2, #0
 800351c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	223c      	movs	r2, #60	; 0x3c
 8003522:	5c9b      	ldrb	r3, [r3, r2]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d101      	bne.n	800352c <HAL_TIM_ConfigClockSource+0x20>
 8003528:	2302      	movs	r3, #2
 800352a:	e0bc      	b.n	80036a6 <HAL_TIM_ConfigClockSource+0x19a>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	223c      	movs	r2, #60	; 0x3c
 8003530:	2101      	movs	r1, #1
 8003532:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	223d      	movs	r2, #61	; 0x3d
 8003538:	2102      	movs	r1, #2
 800353a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	2277      	movs	r2, #119	; 0x77
 8003548:	4393      	bics	r3, r2
 800354a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	4a58      	ldr	r2, [pc, #352]	; (80036b0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003550:	4013      	ands	r3, r2
 8003552:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68ba      	ldr	r2, [r7, #8]
 800355a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2280      	movs	r2, #128	; 0x80
 8003562:	0192      	lsls	r2, r2, #6
 8003564:	4293      	cmp	r3, r2
 8003566:	d040      	beq.n	80035ea <HAL_TIM_ConfigClockSource+0xde>
 8003568:	2280      	movs	r2, #128	; 0x80
 800356a:	0192      	lsls	r2, r2, #6
 800356c:	4293      	cmp	r3, r2
 800356e:	d900      	bls.n	8003572 <HAL_TIM_ConfigClockSource+0x66>
 8003570:	e088      	b.n	8003684 <HAL_TIM_ConfigClockSource+0x178>
 8003572:	2280      	movs	r2, #128	; 0x80
 8003574:	0152      	lsls	r2, r2, #5
 8003576:	4293      	cmp	r3, r2
 8003578:	d100      	bne.n	800357c <HAL_TIM_ConfigClockSource+0x70>
 800357a:	e088      	b.n	800368e <HAL_TIM_ConfigClockSource+0x182>
 800357c:	2280      	movs	r2, #128	; 0x80
 800357e:	0152      	lsls	r2, r2, #5
 8003580:	4293      	cmp	r3, r2
 8003582:	d900      	bls.n	8003586 <HAL_TIM_ConfigClockSource+0x7a>
 8003584:	e07e      	b.n	8003684 <HAL_TIM_ConfigClockSource+0x178>
 8003586:	2b70      	cmp	r3, #112	; 0x70
 8003588:	d018      	beq.n	80035bc <HAL_TIM_ConfigClockSource+0xb0>
 800358a:	d900      	bls.n	800358e <HAL_TIM_ConfigClockSource+0x82>
 800358c:	e07a      	b.n	8003684 <HAL_TIM_ConfigClockSource+0x178>
 800358e:	2b60      	cmp	r3, #96	; 0x60
 8003590:	d04f      	beq.n	8003632 <HAL_TIM_ConfigClockSource+0x126>
 8003592:	d900      	bls.n	8003596 <HAL_TIM_ConfigClockSource+0x8a>
 8003594:	e076      	b.n	8003684 <HAL_TIM_ConfigClockSource+0x178>
 8003596:	2b50      	cmp	r3, #80	; 0x50
 8003598:	d03b      	beq.n	8003612 <HAL_TIM_ConfigClockSource+0x106>
 800359a:	d900      	bls.n	800359e <HAL_TIM_ConfigClockSource+0x92>
 800359c:	e072      	b.n	8003684 <HAL_TIM_ConfigClockSource+0x178>
 800359e:	2b40      	cmp	r3, #64	; 0x40
 80035a0:	d057      	beq.n	8003652 <HAL_TIM_ConfigClockSource+0x146>
 80035a2:	d900      	bls.n	80035a6 <HAL_TIM_ConfigClockSource+0x9a>
 80035a4:	e06e      	b.n	8003684 <HAL_TIM_ConfigClockSource+0x178>
 80035a6:	2b30      	cmp	r3, #48	; 0x30
 80035a8:	d063      	beq.n	8003672 <HAL_TIM_ConfigClockSource+0x166>
 80035aa:	d86b      	bhi.n	8003684 <HAL_TIM_ConfigClockSource+0x178>
 80035ac:	2b20      	cmp	r3, #32
 80035ae:	d060      	beq.n	8003672 <HAL_TIM_ConfigClockSource+0x166>
 80035b0:	d868      	bhi.n	8003684 <HAL_TIM_ConfigClockSource+0x178>
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d05d      	beq.n	8003672 <HAL_TIM_ConfigClockSource+0x166>
 80035b6:	2b10      	cmp	r3, #16
 80035b8:	d05b      	beq.n	8003672 <HAL_TIM_ConfigClockSource+0x166>
 80035ba:	e063      	b.n	8003684 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6818      	ldr	r0, [r3, #0]
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	6899      	ldr	r1, [r3, #8]
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685a      	ldr	r2, [r3, #4]
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	f000 fc2e 	bl	8003e2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	2277      	movs	r2, #119	; 0x77
 80035dc:	4313      	orrs	r3, r2
 80035de:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	609a      	str	r2, [r3, #8]
      break;
 80035e8:	e052      	b.n	8003690 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6818      	ldr	r0, [r3, #0]
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	6899      	ldr	r1, [r3, #8]
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685a      	ldr	r2, [r3, #4]
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	f000 fc17 	bl	8003e2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2180      	movs	r1, #128	; 0x80
 800360a:	01c9      	lsls	r1, r1, #7
 800360c:	430a      	orrs	r2, r1
 800360e:	609a      	str	r2, [r3, #8]
      break;
 8003610:	e03e      	b.n	8003690 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6818      	ldr	r0, [r3, #0]
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	6859      	ldr	r1, [r3, #4]
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	001a      	movs	r2, r3
 8003620:	f000 fb8a 	bl	8003d38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2150      	movs	r1, #80	; 0x50
 800362a:	0018      	movs	r0, r3
 800362c:	f000 fbe4 	bl	8003df8 <TIM_ITRx_SetConfig>
      break;
 8003630:	e02e      	b.n	8003690 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6818      	ldr	r0, [r3, #0]
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	6859      	ldr	r1, [r3, #4]
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	001a      	movs	r2, r3
 8003640:	f000 fba8 	bl	8003d94 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2160      	movs	r1, #96	; 0x60
 800364a:	0018      	movs	r0, r3
 800364c:	f000 fbd4 	bl	8003df8 <TIM_ITRx_SetConfig>
      break;
 8003650:	e01e      	b.n	8003690 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6818      	ldr	r0, [r3, #0]
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	6859      	ldr	r1, [r3, #4]
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	001a      	movs	r2, r3
 8003660:	f000 fb6a 	bl	8003d38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2140      	movs	r1, #64	; 0x40
 800366a:	0018      	movs	r0, r3
 800366c:	f000 fbc4 	bl	8003df8 <TIM_ITRx_SetConfig>
      break;
 8003670:	e00e      	b.n	8003690 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	0019      	movs	r1, r3
 800367c:	0010      	movs	r0, r2
 800367e:	f000 fbbb 	bl	8003df8 <TIM_ITRx_SetConfig>
      break;
 8003682:	e005      	b.n	8003690 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003684:	230f      	movs	r3, #15
 8003686:	18fb      	adds	r3, r7, r3
 8003688:	2201      	movs	r2, #1
 800368a:	701a      	strb	r2, [r3, #0]
      break;
 800368c:	e000      	b.n	8003690 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800368e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	223d      	movs	r2, #61	; 0x3d
 8003694:	2101      	movs	r1, #1
 8003696:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	223c      	movs	r2, #60	; 0x3c
 800369c:	2100      	movs	r1, #0
 800369e:	5499      	strb	r1, [r3, r2]

  return status;
 80036a0:	230f      	movs	r3, #15
 80036a2:	18fb      	adds	r3, r7, r3
 80036a4:	781b      	ldrb	r3, [r3, #0]
}
 80036a6:	0018      	movs	r0, r3
 80036a8:	46bd      	mov	sp, r7
 80036aa:	b004      	add	sp, #16
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	46c0      	nop			; (mov r8, r8)
 80036b0:	ffff00ff 	.word	0xffff00ff

080036b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036bc:	46c0      	nop			; (mov r8, r8)
 80036be:	46bd      	mov	sp, r7
 80036c0:	b002      	add	sp, #8
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80036cc:	46c0      	nop			; (mov r8, r8)
 80036ce:	46bd      	mov	sp, r7
 80036d0:	b002      	add	sp, #8
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80036dc:	46c0      	nop			; (mov r8, r8)
 80036de:	46bd      	mov	sp, r7
 80036e0:	b002      	add	sp, #8
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d107      	bne.n	800370c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2201      	movs	r2, #1
 8003700:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	223e      	movs	r2, #62	; 0x3e
 8003706:	2101      	movs	r1, #1
 8003708:	5499      	strb	r1, [r3, r2]
 800370a:	e02a      	b.n	8003762 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	429a      	cmp	r2, r3
 8003714:	d107      	bne.n	8003726 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2202      	movs	r2, #2
 800371a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	223f      	movs	r2, #63	; 0x3f
 8003720:	2101      	movs	r1, #1
 8003722:	5499      	strb	r1, [r3, r2]
 8003724:	e01d      	b.n	8003762 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	429a      	cmp	r2, r3
 800372e:	d107      	bne.n	8003740 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2204      	movs	r2, #4
 8003734:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2240      	movs	r2, #64	; 0x40
 800373a:	2101      	movs	r1, #1
 800373c:	5499      	strb	r1, [r3, r2]
 800373e:	e010      	b.n	8003762 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	429a      	cmp	r2, r3
 8003748:	d107      	bne.n	800375a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2208      	movs	r2, #8
 800374e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2241      	movs	r2, #65	; 0x41
 8003754:	2101      	movs	r1, #1
 8003756:	5499      	strb	r1, [r3, r2]
 8003758:	e003      	b.n	8003762 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	223d      	movs	r2, #61	; 0x3d
 800375e:	2101      	movs	r1, #1
 8003760:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	0018      	movs	r0, r3
 8003766:	f7ff ffb5 	bl	80036d4 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	771a      	strb	r2, [r3, #28]
}
 8003770:	46c0      	nop			; (mov r8, r8)
 8003772:	46bd      	mov	sp, r7
 8003774:	b004      	add	sp, #16
 8003776:	bd80      	pop	{r7, pc}

08003778 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003784:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	429a      	cmp	r2, r3
 800378e:	d10b      	bne.n	80037a8 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2201      	movs	r2, #1
 8003794:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d136      	bne.n	800380c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	223e      	movs	r2, #62	; 0x3e
 80037a2:	2101      	movs	r1, #1
 80037a4:	5499      	strb	r1, [r3, r2]
 80037a6:	e031      	b.n	800380c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d10b      	bne.n	80037ca <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2202      	movs	r2, #2
 80037b6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d125      	bne.n	800380c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	223f      	movs	r2, #63	; 0x3f
 80037c4:	2101      	movs	r1, #1
 80037c6:	5499      	strb	r1, [r3, r2]
 80037c8:	e020      	b.n	800380c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d10b      	bne.n	80037ec <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2204      	movs	r2, #4
 80037d8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d114      	bne.n	800380c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2240      	movs	r2, #64	; 0x40
 80037e6:	2101      	movs	r1, #1
 80037e8:	5499      	strb	r1, [r3, r2]
 80037ea:	e00f      	b.n	800380c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d10a      	bne.n	800380c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2208      	movs	r2, #8
 80037fa:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d103      	bne.n	800380c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2241      	movs	r2, #65	; 0x41
 8003808:	2101      	movs	r1, #1
 800380a:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	0018      	movs	r0, r3
 8003810:	f7ff ff50 	bl	80036b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	771a      	strb	r2, [r3, #28]
}
 800381a:	46c0      	nop			; (mov r8, r8)
 800381c:	46bd      	mov	sp, r7
 800381e:	b004      	add	sp, #16
 8003820:	bd80      	pop	{r7, pc}

08003822 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003822:	b580      	push	{r7, lr}
 8003824:	b084      	sub	sp, #16
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	429a      	cmp	r2, r3
 8003838:	d103      	bne.n	8003842 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2201      	movs	r2, #1
 800383e:	771a      	strb	r2, [r3, #28]
 8003840:	e019      	b.n	8003876 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	429a      	cmp	r2, r3
 800384a:	d103      	bne.n	8003854 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2202      	movs	r2, #2
 8003850:	771a      	strb	r2, [r3, #28]
 8003852:	e010      	b.n	8003876 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	429a      	cmp	r2, r3
 800385c:	d103      	bne.n	8003866 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2204      	movs	r2, #4
 8003862:	771a      	strb	r2, [r3, #28]
 8003864:	e007      	b.n	8003876 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	429a      	cmp	r2, r3
 800386e:	d102      	bne.n	8003876 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2208      	movs	r2, #8
 8003874:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	0018      	movs	r0, r3
 800387a:	f7ff ff23 	bl	80036c4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	771a      	strb	r2, [r3, #28]
}
 8003884:	46c0      	nop			; (mov r8, r8)
 8003886:	46bd      	mov	sp, r7
 8003888:	b004      	add	sp, #16
 800388a:	bd80      	pop	{r7, pc}

0800388c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a30      	ldr	r2, [pc, #192]	; (8003960 <TIM_Base_SetConfig+0xd4>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d008      	beq.n	80038b6 <TIM_Base_SetConfig+0x2a>
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	2380      	movs	r3, #128	; 0x80
 80038a8:	05db      	lsls	r3, r3, #23
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d003      	beq.n	80038b6 <TIM_Base_SetConfig+0x2a>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a2c      	ldr	r2, [pc, #176]	; (8003964 <TIM_Base_SetConfig+0xd8>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d108      	bne.n	80038c8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2270      	movs	r2, #112	; 0x70
 80038ba:	4393      	bics	r3, r2
 80038bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a25      	ldr	r2, [pc, #148]	; (8003960 <TIM_Base_SetConfig+0xd4>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d014      	beq.n	80038fa <TIM_Base_SetConfig+0x6e>
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	2380      	movs	r3, #128	; 0x80
 80038d4:	05db      	lsls	r3, r3, #23
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d00f      	beq.n	80038fa <TIM_Base_SetConfig+0x6e>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a21      	ldr	r2, [pc, #132]	; (8003964 <TIM_Base_SetConfig+0xd8>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d00b      	beq.n	80038fa <TIM_Base_SetConfig+0x6e>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a20      	ldr	r2, [pc, #128]	; (8003968 <TIM_Base_SetConfig+0xdc>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d007      	beq.n	80038fa <TIM_Base_SetConfig+0x6e>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a1f      	ldr	r2, [pc, #124]	; (800396c <TIM_Base_SetConfig+0xe0>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d003      	beq.n	80038fa <TIM_Base_SetConfig+0x6e>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a1e      	ldr	r2, [pc, #120]	; (8003970 <TIM_Base_SetConfig+0xe4>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d108      	bne.n	800390c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	4a1d      	ldr	r2, [pc, #116]	; (8003974 <TIM_Base_SetConfig+0xe8>)
 80038fe:	4013      	ands	r3, r2
 8003900:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	4313      	orrs	r3, r2
 800390a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2280      	movs	r2, #128	; 0x80
 8003910:	4393      	bics	r3, r2
 8003912:	001a      	movs	r2, r3
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	4313      	orrs	r3, r2
 800391a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	689a      	ldr	r2, [r3, #8]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a0a      	ldr	r2, [pc, #40]	; (8003960 <TIM_Base_SetConfig+0xd4>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d007      	beq.n	800394a <TIM_Base_SetConfig+0xbe>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a0b      	ldr	r2, [pc, #44]	; (800396c <TIM_Base_SetConfig+0xe0>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d003      	beq.n	800394a <TIM_Base_SetConfig+0xbe>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a0a      	ldr	r2, [pc, #40]	; (8003970 <TIM_Base_SetConfig+0xe4>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d103      	bne.n	8003952 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	691a      	ldr	r2, [r3, #16]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	615a      	str	r2, [r3, #20]
}
 8003958:	46c0      	nop			; (mov r8, r8)
 800395a:	46bd      	mov	sp, r7
 800395c:	b004      	add	sp, #16
 800395e:	bd80      	pop	{r7, pc}
 8003960:	40012c00 	.word	0x40012c00
 8003964:	40000400 	.word	0x40000400
 8003968:	40002000 	.word	0x40002000
 800396c:	40014400 	.word	0x40014400
 8003970:	40014800 	.word	0x40014800
 8003974:	fffffcff 	.word	0xfffffcff

08003978 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	2201      	movs	r2, #1
 8003988:	4393      	bics	r3, r2
 800398a:	001a      	movs	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2270      	movs	r2, #112	; 0x70
 80039a6:	4393      	bics	r3, r2
 80039a8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2203      	movs	r2, #3
 80039ae:	4393      	bics	r3, r2
 80039b0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	2202      	movs	r2, #2
 80039c0:	4393      	bics	r3, r2
 80039c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	697a      	ldr	r2, [r7, #20]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a23      	ldr	r2, [pc, #140]	; (8003a60 <TIM_OC1_SetConfig+0xe8>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d007      	beq.n	80039e6 <TIM_OC1_SetConfig+0x6e>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a22      	ldr	r2, [pc, #136]	; (8003a64 <TIM_OC1_SetConfig+0xec>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d003      	beq.n	80039e6 <TIM_OC1_SetConfig+0x6e>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a21      	ldr	r2, [pc, #132]	; (8003a68 <TIM_OC1_SetConfig+0xf0>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d10c      	bne.n	8003a00 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	2208      	movs	r2, #8
 80039ea:	4393      	bics	r3, r2
 80039ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	2204      	movs	r2, #4
 80039fc:	4393      	bics	r3, r2
 80039fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a17      	ldr	r2, [pc, #92]	; (8003a60 <TIM_OC1_SetConfig+0xe8>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d007      	beq.n	8003a18 <TIM_OC1_SetConfig+0xa0>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a16      	ldr	r2, [pc, #88]	; (8003a64 <TIM_OC1_SetConfig+0xec>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d003      	beq.n	8003a18 <TIM_OC1_SetConfig+0xa0>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a15      	ldr	r2, [pc, #84]	; (8003a68 <TIM_OC1_SetConfig+0xf0>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d111      	bne.n	8003a3c <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	4a14      	ldr	r2, [pc, #80]	; (8003a6c <TIM_OC1_SetConfig+0xf4>)
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	4a13      	ldr	r2, [pc, #76]	; (8003a70 <TIM_OC1_SetConfig+0xf8>)
 8003a24:	4013      	ands	r3, r2
 8003a26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	693a      	ldr	r2, [r7, #16]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	685a      	ldr	r2, [r3, #4]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	697a      	ldr	r2, [r7, #20]
 8003a54:	621a      	str	r2, [r3, #32]
}
 8003a56:	46c0      	nop			; (mov r8, r8)
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	b006      	add	sp, #24
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	46c0      	nop			; (mov r8, r8)
 8003a60:	40012c00 	.word	0x40012c00
 8003a64:	40014400 	.word	0x40014400
 8003a68:	40014800 	.word	0x40014800
 8003a6c:	fffffeff 	.word	0xfffffeff
 8003a70:	fffffdff 	.word	0xfffffdff

08003a74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b086      	sub	sp, #24
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a1b      	ldr	r3, [r3, #32]
 8003a82:	2210      	movs	r2, #16
 8003a84:	4393      	bics	r3, r2
 8003a86:	001a      	movs	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	4a2c      	ldr	r2, [pc, #176]	; (8003b54 <TIM_OC2_SetConfig+0xe0>)
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	4a2b      	ldr	r2, [pc, #172]	; (8003b58 <TIM_OC2_SetConfig+0xe4>)
 8003aaa:	4013      	ands	r3, r2
 8003aac:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	021b      	lsls	r3, r3, #8
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	2220      	movs	r2, #32
 8003abe:	4393      	bics	r3, r2
 8003ac0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	011b      	lsls	r3, r3, #4
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a22      	ldr	r2, [pc, #136]	; (8003b5c <TIM_OC2_SetConfig+0xe8>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d10d      	bne.n	8003af2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	2280      	movs	r2, #128	; 0x80
 8003ada:	4393      	bics	r3, r2
 8003adc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	011b      	lsls	r3, r3, #4
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	2240      	movs	r2, #64	; 0x40
 8003aee:	4393      	bics	r3, r2
 8003af0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a19      	ldr	r2, [pc, #100]	; (8003b5c <TIM_OC2_SetConfig+0xe8>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d007      	beq.n	8003b0a <TIM_OC2_SetConfig+0x96>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a18      	ldr	r2, [pc, #96]	; (8003b60 <TIM_OC2_SetConfig+0xec>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d003      	beq.n	8003b0a <TIM_OC2_SetConfig+0x96>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a17      	ldr	r2, [pc, #92]	; (8003b64 <TIM_OC2_SetConfig+0xf0>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d113      	bne.n	8003b32 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	4a16      	ldr	r2, [pc, #88]	; (8003b68 <TIM_OC2_SetConfig+0xf4>)
 8003b0e:	4013      	ands	r3, r2
 8003b10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	4a15      	ldr	r2, [pc, #84]	; (8003b6c <TIM_OC2_SetConfig+0xf8>)
 8003b16:	4013      	ands	r3, r2
 8003b18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	685a      	ldr	r2, [r3, #4]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	621a      	str	r2, [r3, #32]
}
 8003b4c:	46c0      	nop			; (mov r8, r8)
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	b006      	add	sp, #24
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	ffff8fff 	.word	0xffff8fff
 8003b58:	fffffcff 	.word	0xfffffcff
 8003b5c:	40012c00 	.word	0x40012c00
 8003b60:	40014400 	.word	0x40014400
 8003b64:	40014800 	.word	0x40014800
 8003b68:	fffffbff 	.word	0xfffffbff
 8003b6c:	fffff7ff 	.word	0xfffff7ff

08003b70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
 8003b7e:	4a33      	ldr	r2, [pc, #204]	; (8003c4c <TIM_OC3_SetConfig+0xdc>)
 8003b80:	401a      	ands	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	69db      	ldr	r3, [r3, #28]
 8003b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2270      	movs	r2, #112	; 0x70
 8003b9c:	4393      	bics	r3, r2
 8003b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2203      	movs	r2, #3
 8003ba4:	4393      	bics	r3, r2
 8003ba6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	4a26      	ldr	r2, [pc, #152]	; (8003c50 <TIM_OC3_SetConfig+0xe0>)
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	021b      	lsls	r3, r3, #8
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a22      	ldr	r2, [pc, #136]	; (8003c54 <TIM_OC3_SetConfig+0xe4>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d10d      	bne.n	8003bea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	4a21      	ldr	r2, [pc, #132]	; (8003c58 <TIM_OC3_SetConfig+0xe8>)
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	021b      	lsls	r3, r3, #8
 8003bdc:	697a      	ldr	r2, [r7, #20]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	4a1d      	ldr	r2, [pc, #116]	; (8003c5c <TIM_OC3_SetConfig+0xec>)
 8003be6:	4013      	ands	r3, r2
 8003be8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a19      	ldr	r2, [pc, #100]	; (8003c54 <TIM_OC3_SetConfig+0xe4>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d007      	beq.n	8003c02 <TIM_OC3_SetConfig+0x92>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a1a      	ldr	r2, [pc, #104]	; (8003c60 <TIM_OC3_SetConfig+0xf0>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d003      	beq.n	8003c02 <TIM_OC3_SetConfig+0x92>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a19      	ldr	r2, [pc, #100]	; (8003c64 <TIM_OC3_SetConfig+0xf4>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d113      	bne.n	8003c2a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	4a18      	ldr	r2, [pc, #96]	; (8003c68 <TIM_OC3_SetConfig+0xf8>)
 8003c06:	4013      	ands	r3, r2
 8003c08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	4a17      	ldr	r2, [pc, #92]	; (8003c6c <TIM_OC3_SetConfig+0xfc>)
 8003c0e:	4013      	ands	r3, r2
 8003c10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	011b      	lsls	r3, r3, #4
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	011b      	lsls	r3, r3, #4
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685a      	ldr	r2, [r3, #4]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	697a      	ldr	r2, [r7, #20]
 8003c42:	621a      	str	r2, [r3, #32]
}
 8003c44:	46c0      	nop			; (mov r8, r8)
 8003c46:	46bd      	mov	sp, r7
 8003c48:	b006      	add	sp, #24
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	fffffeff 	.word	0xfffffeff
 8003c50:	fffffdff 	.word	0xfffffdff
 8003c54:	40012c00 	.word	0x40012c00
 8003c58:	fffff7ff 	.word	0xfffff7ff
 8003c5c:	fffffbff 	.word	0xfffffbff
 8003c60:	40014400 	.word	0x40014400
 8003c64:	40014800 	.word	0x40014800
 8003c68:	ffffefff 	.word	0xffffefff
 8003c6c:	ffffdfff 	.word	0xffffdfff

08003c70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	4a26      	ldr	r2, [pc, #152]	; (8003d18 <TIM_OC4_SetConfig+0xa8>)
 8003c80:	401a      	ands	r2, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	69db      	ldr	r3, [r3, #28]
 8003c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	4a20      	ldr	r2, [pc, #128]	; (8003d1c <TIM_OC4_SetConfig+0xac>)
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	4a1f      	ldr	r2, [pc, #124]	; (8003d20 <TIM_OC4_SetConfig+0xb0>)
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	021b      	lsls	r3, r3, #8
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	4a1b      	ldr	r2, [pc, #108]	; (8003d24 <TIM_OC4_SetConfig+0xb4>)
 8003cb8:	4013      	ands	r3, r2
 8003cba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	031b      	lsls	r3, r3, #12
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a17      	ldr	r2, [pc, #92]	; (8003d28 <TIM_OC4_SetConfig+0xb8>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d007      	beq.n	8003ce0 <TIM_OC4_SetConfig+0x70>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a16      	ldr	r2, [pc, #88]	; (8003d2c <TIM_OC4_SetConfig+0xbc>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d003      	beq.n	8003ce0 <TIM_OC4_SetConfig+0x70>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a15      	ldr	r2, [pc, #84]	; (8003d30 <TIM_OC4_SetConfig+0xc0>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d109      	bne.n	8003cf4 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	4a14      	ldr	r2, [pc, #80]	; (8003d34 <TIM_OC4_SetConfig+0xc4>)
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	695b      	ldr	r3, [r3, #20]
 8003cec:	019b      	lsls	r3, r3, #6
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	685a      	ldr	r2, [r3, #4]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	621a      	str	r2, [r3, #32]
}
 8003d0e:	46c0      	nop			; (mov r8, r8)
 8003d10:	46bd      	mov	sp, r7
 8003d12:	b006      	add	sp, #24
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	46c0      	nop			; (mov r8, r8)
 8003d18:	ffffefff 	.word	0xffffefff
 8003d1c:	ffff8fff 	.word	0xffff8fff
 8003d20:	fffffcff 	.word	0xfffffcff
 8003d24:	ffffdfff 	.word	0xffffdfff
 8003d28:	40012c00 	.word	0x40012c00
 8003d2c:	40014400 	.word	0x40014400
 8003d30:	40014800 	.word	0x40014800
 8003d34:	ffffbfff 	.word	0xffffbfff

08003d38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6a1b      	ldr	r3, [r3, #32]
 8003d48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	4393      	bics	r3, r2
 8003d52:	001a      	movs	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	22f0      	movs	r2, #240	; 0xf0
 8003d62:	4393      	bics	r3, r2
 8003d64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	011b      	lsls	r3, r3, #4
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	220a      	movs	r2, #10
 8003d74:	4393      	bics	r3, r2
 8003d76:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d78:	697a      	ldr	r2, [r7, #20]
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	621a      	str	r2, [r3, #32]
}
 8003d8c:	46c0      	nop			; (mov r8, r8)
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	b006      	add	sp, #24
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b086      	sub	sp, #24
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6a1b      	ldr	r3, [r3, #32]
 8003da4:	2210      	movs	r2, #16
 8003da6:	4393      	bics	r3, r2
 8003da8:	001a      	movs	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6a1b      	ldr	r3, [r3, #32]
 8003db8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	4a0d      	ldr	r2, [pc, #52]	; (8003df4 <TIM_TI2_ConfigInputStage+0x60>)
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	031b      	lsls	r3, r3, #12
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	22a0      	movs	r2, #160	; 0xa0
 8003dd0:	4393      	bics	r3, r2
 8003dd2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	011b      	lsls	r3, r3, #4
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	697a      	ldr	r2, [r7, #20]
 8003de2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	621a      	str	r2, [r3, #32]
}
 8003dea:	46c0      	nop			; (mov r8, r8)
 8003dec:	46bd      	mov	sp, r7
 8003dee:	b006      	add	sp, #24
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	46c0      	nop			; (mov r8, r8)
 8003df4:	ffff0fff 	.word	0xffff0fff

08003df8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2270      	movs	r2, #112	; 0x70
 8003e0c:	4393      	bics	r3, r2
 8003e0e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e10:	683a      	ldr	r2, [r7, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	2207      	movs	r2, #7
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	609a      	str	r2, [r3, #8]
}
 8003e22:	46c0      	nop			; (mov r8, r8)
 8003e24:	46bd      	mov	sp, r7
 8003e26:	b004      	add	sp, #16
 8003e28:	bd80      	pop	{r7, pc}
	...

08003e2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b086      	sub	sp, #24
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]
 8003e38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	4a09      	ldr	r2, [pc, #36]	; (8003e68 <TIM_ETR_SetConfig+0x3c>)
 8003e44:	4013      	ands	r3, r2
 8003e46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	021a      	lsls	r2, r3, #8
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	697a      	ldr	r2, [r7, #20]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	697a      	ldr	r2, [r7, #20]
 8003e5e:	609a      	str	r2, [r3, #8]
}
 8003e60:	46c0      	nop			; (mov r8, r8)
 8003e62:	46bd      	mov	sp, r7
 8003e64:	b006      	add	sp, #24
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	ffff00ff 	.word	0xffff00ff

08003e6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	221f      	movs	r2, #31
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	2201      	movs	r2, #1
 8003e80:	409a      	lsls	r2, r3
 8003e82:	0013      	movs	r3, r2
 8003e84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	43d2      	mvns	r2, r2
 8003e8e:	401a      	ands	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6a1a      	ldr	r2, [r3, #32]
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	211f      	movs	r1, #31
 8003e9c:	400b      	ands	r3, r1
 8003e9e:	6879      	ldr	r1, [r7, #4]
 8003ea0:	4099      	lsls	r1, r3
 8003ea2:	000b      	movs	r3, r1
 8003ea4:	431a      	orrs	r2, r3
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	621a      	str	r2, [r3, #32]
}
 8003eaa:	46c0      	nop			; (mov r8, r8)
 8003eac:	46bd      	mov	sp, r7
 8003eae:	b006      	add	sp, #24
 8003eb0:	bd80      	pop	{r7, pc}
	...

08003eb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	223c      	movs	r2, #60	; 0x3c
 8003ec2:	5c9b      	ldrb	r3, [r3, r2]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d101      	bne.n	8003ecc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ec8:	2302      	movs	r3, #2
 8003eca:	e042      	b.n	8003f52 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	223c      	movs	r2, #60	; 0x3c
 8003ed0:	2101      	movs	r1, #1
 8003ed2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	223d      	movs	r2, #61	; 0x3d
 8003ed8:	2102      	movs	r1, #2
 8003eda:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2270      	movs	r2, #112	; 0x70
 8003ef0:	4393      	bics	r3, r2
 8003ef2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a14      	ldr	r2, [pc, #80]	; (8003f5c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d00a      	beq.n	8003f26 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	2380      	movs	r3, #128	; 0x80
 8003f16:	05db      	lsls	r3, r3, #23
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d004      	beq.n	8003f26 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a0f      	ldr	r2, [pc, #60]	; (8003f60 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d10c      	bne.n	8003f40 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	2280      	movs	r2, #128	; 0x80
 8003f2a:	4393      	bics	r3, r2
 8003f2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	68ba      	ldr	r2, [r7, #8]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68ba      	ldr	r2, [r7, #8]
 8003f3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	223d      	movs	r2, #61	; 0x3d
 8003f44:	2101      	movs	r1, #1
 8003f46:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	223c      	movs	r2, #60	; 0x3c
 8003f4c:	2100      	movs	r1, #0
 8003f4e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	0018      	movs	r0, r3
 8003f54:	46bd      	mov	sp, r7
 8003f56:	b004      	add	sp, #16
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	46c0      	nop			; (mov r8, r8)
 8003f5c:	40012c00 	.word	0x40012c00
 8003f60:	40000400 	.word	0x40000400

08003f64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e044      	b.n	8004000 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d107      	bne.n	8003f8e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2278      	movs	r2, #120	; 0x78
 8003f82:	2100      	movs	r1, #0
 8003f84:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	0018      	movs	r0, r3
 8003f8a:	f7fd f97f 	bl	800128c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2224      	movs	r2, #36	; 0x24
 8003f92:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2101      	movs	r1, #1
 8003fa0:	438a      	bics	r2, r1
 8003fa2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	0018      	movs	r0, r3
 8003fa8:	f000 fb7c 	bl	80046a4 <UART_SetConfig>
 8003fac:	0003      	movs	r3, r0
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d101      	bne.n	8003fb6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e024      	b.n	8004000 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d003      	beq.n	8003fc6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	0018      	movs	r0, r3
 8003fc2:	f000 fcaf 	bl	8004924 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	685a      	ldr	r2, [r3, #4]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	490d      	ldr	r1, [pc, #52]	; (8004008 <HAL_UART_Init+0xa4>)
 8003fd2:	400a      	ands	r2, r1
 8003fd4:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	689a      	ldr	r2, [r3, #8]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	212a      	movs	r1, #42	; 0x2a
 8003fe2:	438a      	bics	r2, r1
 8003fe4:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2101      	movs	r1, #1
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	0018      	movs	r0, r3
 8003ffa:	f000 fd47 	bl	8004a8c <UART_CheckIdleState>
 8003ffe:	0003      	movs	r3, r0
}
 8004000:	0018      	movs	r0, r3
 8004002:	46bd      	mov	sp, r7
 8004004:	b002      	add	sp, #8
 8004006:	bd80      	pop	{r7, pc}
 8004008:	ffffb7ff 	.word	0xffffb7ff

0800400c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b088      	sub	sp, #32
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	1dbb      	adds	r3, r7, #6
 8004018:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2280      	movs	r2, #128	; 0x80
 800401e:	589b      	ldr	r3, [r3, r2]
 8004020:	2b20      	cmp	r3, #32
 8004022:	d145      	bne.n	80040b0 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d003      	beq.n	8004032 <HAL_UART_Receive_IT+0x26>
 800402a:	1dbb      	adds	r3, r7, #6
 800402c:	881b      	ldrh	r3, [r3, #0]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e03d      	b.n	80040b2 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	689a      	ldr	r2, [r3, #8]
 800403a:	2380      	movs	r3, #128	; 0x80
 800403c:	015b      	lsls	r3, r3, #5
 800403e:	429a      	cmp	r2, r3
 8004040:	d109      	bne.n	8004056 <HAL_UART_Receive_IT+0x4a>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d105      	bne.n	8004056 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	2201      	movs	r2, #1
 800404e:	4013      	ands	r3, r2
 8004050:	d001      	beq.n	8004056 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e02d      	b.n	80040b2 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	2380      	movs	r3, #128	; 0x80
 8004064:	041b      	lsls	r3, r3, #16
 8004066:	4013      	ands	r3, r2
 8004068:	d019      	beq.n	800409e <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800406a:	f3ef 8310 	mrs	r3, PRIMASK
 800406e:	613b      	str	r3, [r7, #16]
  return(result);
 8004070:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004072:	61fb      	str	r3, [r7, #28]
 8004074:	2301      	movs	r3, #1
 8004076:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	f383 8810 	msr	PRIMASK, r3
}
 800407e:	46c0      	nop			; (mov r8, r8)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2180      	movs	r1, #128	; 0x80
 800408c:	04c9      	lsls	r1, r1, #19
 800408e:	430a      	orrs	r2, r1
 8004090:	601a      	str	r2, [r3, #0]
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	f383 8810 	msr	PRIMASK, r3
}
 800409c:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800409e:	1dbb      	adds	r3, r7, #6
 80040a0:	881a      	ldrh	r2, [r3, #0]
 80040a2:	68b9      	ldr	r1, [r7, #8]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	0018      	movs	r0, r3
 80040a8:	f000 fe02 	bl	8004cb0 <UART_Start_Receive_IT>
 80040ac:	0003      	movs	r3, r0
 80040ae:	e000      	b.n	80040b2 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80040b0:	2302      	movs	r3, #2
  }
}
 80040b2:	0018      	movs	r0, r3
 80040b4:	46bd      	mov	sp, r7
 80040b6:	b008      	add	sp, #32
 80040b8:	bd80      	pop	{r7, pc}
	...

080040bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80040bc:	b590      	push	{r4, r7, lr}
 80040be:	b0ab      	sub	sp, #172	; 0xac
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	22a4      	movs	r2, #164	; 0xa4
 80040cc:	18b9      	adds	r1, r7, r2
 80040ce:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	20a0      	movs	r0, #160	; 0xa0
 80040d8:	1839      	adds	r1, r7, r0
 80040da:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	219c      	movs	r1, #156	; 0x9c
 80040e4:	1879      	adds	r1, r7, r1
 80040e6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80040e8:	0011      	movs	r1, r2
 80040ea:	18bb      	adds	r3, r7, r2
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a99      	ldr	r2, [pc, #612]	; (8004354 <HAL_UART_IRQHandler+0x298>)
 80040f0:	4013      	ands	r3, r2
 80040f2:	2298      	movs	r2, #152	; 0x98
 80040f4:	18bc      	adds	r4, r7, r2
 80040f6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80040f8:	18bb      	adds	r3, r7, r2
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d114      	bne.n	800412a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004100:	187b      	adds	r3, r7, r1
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2220      	movs	r2, #32
 8004106:	4013      	ands	r3, r2
 8004108:	d00f      	beq.n	800412a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800410a:	183b      	adds	r3, r7, r0
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2220      	movs	r2, #32
 8004110:	4013      	ands	r3, r2
 8004112:	d00a      	beq.n	800412a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004118:	2b00      	cmp	r3, #0
 800411a:	d100      	bne.n	800411e <HAL_UART_IRQHandler+0x62>
 800411c:	e29e      	b.n	800465c <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	0010      	movs	r0, r2
 8004126:	4798      	blx	r3
      }
      return;
 8004128:	e298      	b.n	800465c <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800412a:	2398      	movs	r3, #152	; 0x98
 800412c:	18fb      	adds	r3, r7, r3
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d100      	bne.n	8004136 <HAL_UART_IRQHandler+0x7a>
 8004134:	e114      	b.n	8004360 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004136:	239c      	movs	r3, #156	; 0x9c
 8004138:	18fb      	adds	r3, r7, r3
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2201      	movs	r2, #1
 800413e:	4013      	ands	r3, r2
 8004140:	d106      	bne.n	8004150 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004142:	23a0      	movs	r3, #160	; 0xa0
 8004144:	18fb      	adds	r3, r7, r3
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a83      	ldr	r2, [pc, #524]	; (8004358 <HAL_UART_IRQHandler+0x29c>)
 800414a:	4013      	ands	r3, r2
 800414c:	d100      	bne.n	8004150 <HAL_UART_IRQHandler+0x94>
 800414e:	e107      	b.n	8004360 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004150:	23a4      	movs	r3, #164	; 0xa4
 8004152:	18fb      	adds	r3, r7, r3
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2201      	movs	r2, #1
 8004158:	4013      	ands	r3, r2
 800415a:	d012      	beq.n	8004182 <HAL_UART_IRQHandler+0xc6>
 800415c:	23a0      	movs	r3, #160	; 0xa0
 800415e:	18fb      	adds	r3, r7, r3
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	2380      	movs	r3, #128	; 0x80
 8004164:	005b      	lsls	r3, r3, #1
 8004166:	4013      	ands	r3, r2
 8004168:	d00b      	beq.n	8004182 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2201      	movs	r2, #1
 8004170:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2284      	movs	r2, #132	; 0x84
 8004176:	589b      	ldr	r3, [r3, r2]
 8004178:	2201      	movs	r2, #1
 800417a:	431a      	orrs	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2184      	movs	r1, #132	; 0x84
 8004180:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004182:	23a4      	movs	r3, #164	; 0xa4
 8004184:	18fb      	adds	r3, r7, r3
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2202      	movs	r2, #2
 800418a:	4013      	ands	r3, r2
 800418c:	d011      	beq.n	80041b2 <HAL_UART_IRQHandler+0xf6>
 800418e:	239c      	movs	r3, #156	; 0x9c
 8004190:	18fb      	adds	r3, r7, r3
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2201      	movs	r2, #1
 8004196:	4013      	ands	r3, r2
 8004198:	d00b      	beq.n	80041b2 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2202      	movs	r2, #2
 80041a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2284      	movs	r2, #132	; 0x84
 80041a6:	589b      	ldr	r3, [r3, r2]
 80041a8:	2204      	movs	r2, #4
 80041aa:	431a      	orrs	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2184      	movs	r1, #132	; 0x84
 80041b0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041b2:	23a4      	movs	r3, #164	; 0xa4
 80041b4:	18fb      	adds	r3, r7, r3
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2204      	movs	r2, #4
 80041ba:	4013      	ands	r3, r2
 80041bc:	d011      	beq.n	80041e2 <HAL_UART_IRQHandler+0x126>
 80041be:	239c      	movs	r3, #156	; 0x9c
 80041c0:	18fb      	adds	r3, r7, r3
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2201      	movs	r2, #1
 80041c6:	4013      	ands	r3, r2
 80041c8:	d00b      	beq.n	80041e2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2204      	movs	r2, #4
 80041d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2284      	movs	r2, #132	; 0x84
 80041d6:	589b      	ldr	r3, [r3, r2]
 80041d8:	2202      	movs	r2, #2
 80041da:	431a      	orrs	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2184      	movs	r1, #132	; 0x84
 80041e0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80041e2:	23a4      	movs	r3, #164	; 0xa4
 80041e4:	18fb      	adds	r3, r7, r3
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2208      	movs	r2, #8
 80041ea:	4013      	ands	r3, r2
 80041ec:	d017      	beq.n	800421e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80041ee:	23a0      	movs	r3, #160	; 0xa0
 80041f0:	18fb      	adds	r3, r7, r3
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2220      	movs	r2, #32
 80041f6:	4013      	ands	r3, r2
 80041f8:	d105      	bne.n	8004206 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80041fa:	239c      	movs	r3, #156	; 0x9c
 80041fc:	18fb      	adds	r3, r7, r3
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2201      	movs	r2, #1
 8004202:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004204:	d00b      	beq.n	800421e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2208      	movs	r2, #8
 800420c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2284      	movs	r2, #132	; 0x84
 8004212:	589b      	ldr	r3, [r3, r2]
 8004214:	2208      	movs	r2, #8
 8004216:	431a      	orrs	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2184      	movs	r1, #132	; 0x84
 800421c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800421e:	23a4      	movs	r3, #164	; 0xa4
 8004220:	18fb      	adds	r3, r7, r3
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	2380      	movs	r3, #128	; 0x80
 8004226:	011b      	lsls	r3, r3, #4
 8004228:	4013      	ands	r3, r2
 800422a:	d013      	beq.n	8004254 <HAL_UART_IRQHandler+0x198>
 800422c:	23a0      	movs	r3, #160	; 0xa0
 800422e:	18fb      	adds	r3, r7, r3
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	2380      	movs	r3, #128	; 0x80
 8004234:	04db      	lsls	r3, r3, #19
 8004236:	4013      	ands	r3, r2
 8004238:	d00c      	beq.n	8004254 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2280      	movs	r2, #128	; 0x80
 8004240:	0112      	lsls	r2, r2, #4
 8004242:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2284      	movs	r2, #132	; 0x84
 8004248:	589b      	ldr	r3, [r3, r2]
 800424a:	2220      	movs	r2, #32
 800424c:	431a      	orrs	r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2184      	movs	r1, #132	; 0x84
 8004252:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2284      	movs	r2, #132	; 0x84
 8004258:	589b      	ldr	r3, [r3, r2]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d100      	bne.n	8004260 <HAL_UART_IRQHandler+0x1a4>
 800425e:	e1ff      	b.n	8004660 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004260:	23a4      	movs	r3, #164	; 0xa4
 8004262:	18fb      	adds	r3, r7, r3
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2220      	movs	r2, #32
 8004268:	4013      	ands	r3, r2
 800426a:	d00e      	beq.n	800428a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800426c:	23a0      	movs	r3, #160	; 0xa0
 800426e:	18fb      	adds	r3, r7, r3
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2220      	movs	r2, #32
 8004274:	4013      	ands	r3, r2
 8004276:	d008      	beq.n	800428a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800427c:	2b00      	cmp	r3, #0
 800427e:	d004      	beq.n	800428a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	0010      	movs	r0, r2
 8004288:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2284      	movs	r2, #132	; 0x84
 800428e:	589b      	ldr	r3, [r3, r2]
 8004290:	2194      	movs	r1, #148	; 0x94
 8004292:	187a      	adds	r2, r7, r1
 8004294:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	2240      	movs	r2, #64	; 0x40
 800429e:	4013      	ands	r3, r2
 80042a0:	2b40      	cmp	r3, #64	; 0x40
 80042a2:	d004      	beq.n	80042ae <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80042a4:	187b      	adds	r3, r7, r1
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2228      	movs	r2, #40	; 0x28
 80042aa:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80042ac:	d047      	beq.n	800433e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	0018      	movs	r0, r3
 80042b2:	f000 fdc7 	bl	8004e44 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	2240      	movs	r2, #64	; 0x40
 80042be:	4013      	ands	r3, r2
 80042c0:	2b40      	cmp	r3, #64	; 0x40
 80042c2:	d137      	bne.n	8004334 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042c4:	f3ef 8310 	mrs	r3, PRIMASK
 80042c8:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80042ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042cc:	2090      	movs	r0, #144	; 0x90
 80042ce:	183a      	adds	r2, r7, r0
 80042d0:	6013      	str	r3, [r2, #0]
 80042d2:	2301      	movs	r3, #1
 80042d4:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042d8:	f383 8810 	msr	PRIMASK, r3
}
 80042dc:	46c0      	nop			; (mov r8, r8)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	689a      	ldr	r2, [r3, #8]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2140      	movs	r1, #64	; 0x40
 80042ea:	438a      	bics	r2, r1
 80042ec:	609a      	str	r2, [r3, #8]
 80042ee:	183b      	adds	r3, r7, r0
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042f6:	f383 8810 	msr	PRIMASK, r3
}
 80042fa:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004300:	2b00      	cmp	r3, #0
 8004302:	d012      	beq.n	800432a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004308:	4a14      	ldr	r2, [pc, #80]	; (800435c <HAL_UART_IRQHandler+0x2a0>)
 800430a:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004310:	0018      	movs	r0, r3
 8004312:	f7fd fd6b 	bl	8001dec <HAL_DMA_Abort_IT>
 8004316:	1e03      	subs	r3, r0, #0
 8004318:	d01a      	beq.n	8004350 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800431e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004324:	0018      	movs	r0, r3
 8004326:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004328:	e012      	b.n	8004350 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	0018      	movs	r0, r3
 800432e:	f7fc fea1 	bl	8001074 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004332:	e00d      	b.n	8004350 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	0018      	movs	r0, r3
 8004338:	f7fc fe9c 	bl	8001074 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800433c:	e008      	b.n	8004350 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	0018      	movs	r0, r3
 8004342:	f7fc fe97 	bl	8001074 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2284      	movs	r2, #132	; 0x84
 800434a:	2100      	movs	r1, #0
 800434c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800434e:	e187      	b.n	8004660 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004350:	46c0      	nop			; (mov r8, r8)
    return;
 8004352:	e185      	b.n	8004660 <HAL_UART_IRQHandler+0x5a4>
 8004354:	0000080f 	.word	0x0000080f
 8004358:	04000120 	.word	0x04000120
 800435c:	08004f0d 	.word	0x08004f0d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004364:	2b01      	cmp	r3, #1
 8004366:	d000      	beq.n	800436a <HAL_UART_IRQHandler+0x2ae>
 8004368:	e139      	b.n	80045de <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800436a:	23a4      	movs	r3, #164	; 0xa4
 800436c:	18fb      	adds	r3, r7, r3
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2210      	movs	r2, #16
 8004372:	4013      	ands	r3, r2
 8004374:	d100      	bne.n	8004378 <HAL_UART_IRQHandler+0x2bc>
 8004376:	e132      	b.n	80045de <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004378:	23a0      	movs	r3, #160	; 0xa0
 800437a:	18fb      	adds	r3, r7, r3
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2210      	movs	r2, #16
 8004380:	4013      	ands	r3, r2
 8004382:	d100      	bne.n	8004386 <HAL_UART_IRQHandler+0x2ca>
 8004384:	e12b      	b.n	80045de <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2210      	movs	r2, #16
 800438c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	2240      	movs	r2, #64	; 0x40
 8004396:	4013      	ands	r3, r2
 8004398:	2b40      	cmp	r3, #64	; 0x40
 800439a:	d000      	beq.n	800439e <HAL_UART_IRQHandler+0x2e2>
 800439c:	e09f      	b.n	80044de <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	685a      	ldr	r2, [r3, #4]
 80043a6:	217e      	movs	r1, #126	; 0x7e
 80043a8:	187b      	adds	r3, r7, r1
 80043aa:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80043ac:	187b      	adds	r3, r7, r1
 80043ae:	881b      	ldrh	r3, [r3, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d100      	bne.n	80043b6 <HAL_UART_IRQHandler+0x2fa>
 80043b4:	e156      	b.n	8004664 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2258      	movs	r2, #88	; 0x58
 80043ba:	5a9b      	ldrh	r3, [r3, r2]
 80043bc:	187a      	adds	r2, r7, r1
 80043be:	8812      	ldrh	r2, [r2, #0]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d300      	bcc.n	80043c6 <HAL_UART_IRQHandler+0x30a>
 80043c4:	e14e      	b.n	8004664 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	187a      	adds	r2, r7, r1
 80043ca:	215a      	movs	r1, #90	; 0x5a
 80043cc:	8812      	ldrh	r2, [r2, #0]
 80043ce:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	2b20      	cmp	r3, #32
 80043d8:	d06f      	beq.n	80044ba <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043da:	f3ef 8310 	mrs	r3, PRIMASK
 80043de:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80043e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043e2:	67bb      	str	r3, [r7, #120]	; 0x78
 80043e4:	2301      	movs	r3, #1
 80043e6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ea:	f383 8810 	msr	PRIMASK, r3
}
 80043ee:	46c0      	nop			; (mov r8, r8)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	499e      	ldr	r1, [pc, #632]	; (8004674 <HAL_UART_IRQHandler+0x5b8>)
 80043fc:	400a      	ands	r2, r1
 80043fe:	601a      	str	r2, [r3, #0]
 8004400:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004402:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004406:	f383 8810 	msr	PRIMASK, r3
}
 800440a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800440c:	f3ef 8310 	mrs	r3, PRIMASK
 8004410:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004414:	677b      	str	r3, [r7, #116]	; 0x74
 8004416:	2301      	movs	r3, #1
 8004418:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800441a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800441c:	f383 8810 	msr	PRIMASK, r3
}
 8004420:	46c0      	nop			; (mov r8, r8)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	689a      	ldr	r2, [r3, #8]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2101      	movs	r1, #1
 800442e:	438a      	bics	r2, r1
 8004430:	609a      	str	r2, [r3, #8]
 8004432:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004434:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004436:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004438:	f383 8810 	msr	PRIMASK, r3
}
 800443c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800443e:	f3ef 8310 	mrs	r3, PRIMASK
 8004442:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004444:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004446:	673b      	str	r3, [r7, #112]	; 0x70
 8004448:	2301      	movs	r3, #1
 800444a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800444c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800444e:	f383 8810 	msr	PRIMASK, r3
}
 8004452:	46c0      	nop			; (mov r8, r8)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	689a      	ldr	r2, [r3, #8]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2140      	movs	r1, #64	; 0x40
 8004460:	438a      	bics	r2, r1
 8004462:	609a      	str	r2, [r3, #8]
 8004464:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004466:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004468:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800446a:	f383 8810 	msr	PRIMASK, r3
}
 800446e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2280      	movs	r2, #128	; 0x80
 8004474:	2120      	movs	r1, #32
 8004476:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800447e:	f3ef 8310 	mrs	r3, PRIMASK
 8004482:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004484:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004486:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004488:	2301      	movs	r3, #1
 800448a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800448c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800448e:	f383 8810 	msr	PRIMASK, r3
}
 8004492:	46c0      	nop			; (mov r8, r8)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2110      	movs	r1, #16
 80044a0:	438a      	bics	r2, r1
 80044a2:	601a      	str	r2, [r3, #0]
 80044a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044a6:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044aa:	f383 8810 	msr	PRIMASK, r3
}
 80044ae:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044b4:	0018      	movs	r0, r3
 80044b6:	f7fd fc61 	bl	8001d7c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2202      	movs	r2, #2
 80044be:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2258      	movs	r2, #88	; 0x58
 80044c4:	5a9a      	ldrh	r2, [r3, r2]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	215a      	movs	r1, #90	; 0x5a
 80044ca:	5a5b      	ldrh	r3, [r3, r1]
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	b29a      	uxth	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	0011      	movs	r1, r2
 80044d6:	0018      	movs	r0, r3
 80044d8:	f000 f8d8 	bl	800468c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80044dc:	e0c2      	b.n	8004664 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2258      	movs	r2, #88	; 0x58
 80044e2:	5a99      	ldrh	r1, [r3, r2]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	225a      	movs	r2, #90	; 0x5a
 80044e8:	5a9b      	ldrh	r3, [r3, r2]
 80044ea:	b29a      	uxth	r2, r3
 80044ec:	208e      	movs	r0, #142	; 0x8e
 80044ee:	183b      	adds	r3, r7, r0
 80044f0:	1a8a      	subs	r2, r1, r2
 80044f2:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	225a      	movs	r2, #90	; 0x5a
 80044f8:	5a9b      	ldrh	r3, [r3, r2]
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d100      	bne.n	8004502 <HAL_UART_IRQHandler+0x446>
 8004500:	e0b2      	b.n	8004668 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8004502:	183b      	adds	r3, r7, r0
 8004504:	881b      	ldrh	r3, [r3, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d100      	bne.n	800450c <HAL_UART_IRQHandler+0x450>
 800450a:	e0ad      	b.n	8004668 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800450c:	f3ef 8310 	mrs	r3, PRIMASK
 8004510:	60fb      	str	r3, [r7, #12]
  return(result);
 8004512:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004514:	2488      	movs	r4, #136	; 0x88
 8004516:	193a      	adds	r2, r7, r4
 8004518:	6013      	str	r3, [r2, #0]
 800451a:	2301      	movs	r3, #1
 800451c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	f383 8810 	msr	PRIMASK, r3
}
 8004524:	46c0      	nop			; (mov r8, r8)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4951      	ldr	r1, [pc, #324]	; (8004678 <HAL_UART_IRQHandler+0x5bc>)
 8004532:	400a      	ands	r2, r1
 8004534:	601a      	str	r2, [r3, #0]
 8004536:	193b      	adds	r3, r7, r4
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	f383 8810 	msr	PRIMASK, r3
}
 8004542:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004544:	f3ef 8310 	mrs	r3, PRIMASK
 8004548:	61bb      	str	r3, [r7, #24]
  return(result);
 800454a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800454c:	2484      	movs	r4, #132	; 0x84
 800454e:	193a      	adds	r2, r7, r4
 8004550:	6013      	str	r3, [r2, #0]
 8004552:	2301      	movs	r3, #1
 8004554:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	f383 8810 	msr	PRIMASK, r3
}
 800455c:	46c0      	nop			; (mov r8, r8)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	689a      	ldr	r2, [r3, #8]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2101      	movs	r1, #1
 800456a:	438a      	bics	r2, r1
 800456c:	609a      	str	r2, [r3, #8]
 800456e:	193b      	adds	r3, r7, r4
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004574:	6a3b      	ldr	r3, [r7, #32]
 8004576:	f383 8810 	msr	PRIMASK, r3
}
 800457a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2280      	movs	r2, #128	; 0x80
 8004580:	2120      	movs	r1, #32
 8004582:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004590:	f3ef 8310 	mrs	r3, PRIMASK
 8004594:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004596:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004598:	2480      	movs	r4, #128	; 0x80
 800459a:	193a      	adds	r2, r7, r4
 800459c:	6013      	str	r3, [r2, #0]
 800459e:	2301      	movs	r3, #1
 80045a0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a4:	f383 8810 	msr	PRIMASK, r3
}
 80045a8:	46c0      	nop			; (mov r8, r8)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2110      	movs	r1, #16
 80045b6:	438a      	bics	r2, r1
 80045b8:	601a      	str	r2, [r3, #0]
 80045ba:	193b      	adds	r3, r7, r4
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c2:	f383 8810 	msr	PRIMASK, r3
}
 80045c6:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2202      	movs	r2, #2
 80045cc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80045ce:	183b      	adds	r3, r7, r0
 80045d0:	881a      	ldrh	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	0011      	movs	r1, r2
 80045d6:	0018      	movs	r0, r3
 80045d8:	f000 f858 	bl	800468c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80045dc:	e044      	b.n	8004668 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80045de:	23a4      	movs	r3, #164	; 0xa4
 80045e0:	18fb      	adds	r3, r7, r3
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	2380      	movs	r3, #128	; 0x80
 80045e6:	035b      	lsls	r3, r3, #13
 80045e8:	4013      	ands	r3, r2
 80045ea:	d010      	beq.n	800460e <HAL_UART_IRQHandler+0x552>
 80045ec:	239c      	movs	r3, #156	; 0x9c
 80045ee:	18fb      	adds	r3, r7, r3
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	2380      	movs	r3, #128	; 0x80
 80045f4:	03db      	lsls	r3, r3, #15
 80045f6:	4013      	ands	r3, r2
 80045f8:	d009      	beq.n	800460e <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2280      	movs	r2, #128	; 0x80
 8004600:	0352      	lsls	r2, r2, #13
 8004602:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	0018      	movs	r0, r3
 8004608:	f000 fe7a 	bl	8005300 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800460c:	e02f      	b.n	800466e <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800460e:	23a4      	movs	r3, #164	; 0xa4
 8004610:	18fb      	adds	r3, r7, r3
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2280      	movs	r2, #128	; 0x80
 8004616:	4013      	ands	r3, r2
 8004618:	d00f      	beq.n	800463a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800461a:	23a0      	movs	r3, #160	; 0xa0
 800461c:	18fb      	adds	r3, r7, r3
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2280      	movs	r2, #128	; 0x80
 8004622:	4013      	ands	r3, r2
 8004624:	d009      	beq.n	800463a <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800462a:	2b00      	cmp	r3, #0
 800462c:	d01e      	beq.n	800466c <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	0010      	movs	r0, r2
 8004636:	4798      	blx	r3
    }
    return;
 8004638:	e018      	b.n	800466c <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800463a:	23a4      	movs	r3, #164	; 0xa4
 800463c:	18fb      	adds	r3, r7, r3
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2240      	movs	r2, #64	; 0x40
 8004642:	4013      	ands	r3, r2
 8004644:	d013      	beq.n	800466e <HAL_UART_IRQHandler+0x5b2>
 8004646:	23a0      	movs	r3, #160	; 0xa0
 8004648:	18fb      	adds	r3, r7, r3
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2240      	movs	r2, #64	; 0x40
 800464e:	4013      	ands	r3, r2
 8004650:	d00d      	beq.n	800466e <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	0018      	movs	r0, r3
 8004656:	f000 fc70 	bl	8004f3a <UART_EndTransmit_IT>
    return;
 800465a:	e008      	b.n	800466e <HAL_UART_IRQHandler+0x5b2>
      return;
 800465c:	46c0      	nop			; (mov r8, r8)
 800465e:	e006      	b.n	800466e <HAL_UART_IRQHandler+0x5b2>
    return;
 8004660:	46c0      	nop			; (mov r8, r8)
 8004662:	e004      	b.n	800466e <HAL_UART_IRQHandler+0x5b2>
      return;
 8004664:	46c0      	nop			; (mov r8, r8)
 8004666:	e002      	b.n	800466e <HAL_UART_IRQHandler+0x5b2>
      return;
 8004668:	46c0      	nop			; (mov r8, r8)
 800466a:	e000      	b.n	800466e <HAL_UART_IRQHandler+0x5b2>
    return;
 800466c:	46c0      	nop			; (mov r8, r8)
  }

}
 800466e:	46bd      	mov	sp, r7
 8004670:	b02b      	add	sp, #172	; 0xac
 8004672:	bd90      	pop	{r4, r7, pc}
 8004674:	fffffeff 	.word	0xfffffeff
 8004678:	fffffedf 	.word	0xfffffedf

0800467c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004684:	46c0      	nop			; (mov r8, r8)
 8004686:	46bd      	mov	sp, r7
 8004688:	b002      	add	sp, #8
 800468a:	bd80      	pop	{r7, pc}

0800468c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	000a      	movs	r2, r1
 8004696:	1cbb      	adds	r3, r7, #2
 8004698:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800469a:	46c0      	nop			; (mov r8, r8)
 800469c:	46bd      	mov	sp, r7
 800469e:	b002      	add	sp, #8
 80046a0:	bd80      	pop	{r7, pc}
	...

080046a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b088      	sub	sp, #32
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046ac:	231e      	movs	r3, #30
 80046ae:	18fb      	adds	r3, r7, r3
 80046b0:	2200      	movs	r2, #0
 80046b2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689a      	ldr	r2, [r3, #8]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	431a      	orrs	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	431a      	orrs	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	69db      	ldr	r3, [r3, #28]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a8d      	ldr	r2, [pc, #564]	; (8004908 <UART_SetConfig+0x264>)
 80046d4:	4013      	ands	r3, r2
 80046d6:	0019      	movs	r1, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	697a      	ldr	r2, [r7, #20]
 80046de:	430a      	orrs	r2, r1
 80046e0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	4a88      	ldr	r2, [pc, #544]	; (800490c <UART_SetConfig+0x268>)
 80046ea:	4013      	ands	r3, r2
 80046ec:	0019      	movs	r1, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	68da      	ldr	r2, [r3, #12]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a1b      	ldr	r3, [r3, #32]
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	4313      	orrs	r3, r2
 8004708:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	4a7f      	ldr	r2, [pc, #508]	; (8004910 <UART_SetConfig+0x26c>)
 8004712:	4013      	ands	r3, r2
 8004714:	0019      	movs	r1, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	697a      	ldr	r2, [r7, #20]
 800471c:	430a      	orrs	r2, r1
 800471e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a7b      	ldr	r2, [pc, #492]	; (8004914 <UART_SetConfig+0x270>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d127      	bne.n	800477a <UART_SetConfig+0xd6>
 800472a:	4b7b      	ldr	r3, [pc, #492]	; (8004918 <UART_SetConfig+0x274>)
 800472c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472e:	2203      	movs	r2, #3
 8004730:	4013      	ands	r3, r2
 8004732:	2b03      	cmp	r3, #3
 8004734:	d00d      	beq.n	8004752 <UART_SetConfig+0xae>
 8004736:	d81b      	bhi.n	8004770 <UART_SetConfig+0xcc>
 8004738:	2b02      	cmp	r3, #2
 800473a:	d014      	beq.n	8004766 <UART_SetConfig+0xc2>
 800473c:	d818      	bhi.n	8004770 <UART_SetConfig+0xcc>
 800473e:	2b00      	cmp	r3, #0
 8004740:	d002      	beq.n	8004748 <UART_SetConfig+0xa4>
 8004742:	2b01      	cmp	r3, #1
 8004744:	d00a      	beq.n	800475c <UART_SetConfig+0xb8>
 8004746:	e013      	b.n	8004770 <UART_SetConfig+0xcc>
 8004748:	231f      	movs	r3, #31
 800474a:	18fb      	adds	r3, r7, r3
 800474c:	2200      	movs	r2, #0
 800474e:	701a      	strb	r2, [r3, #0]
 8004750:	e021      	b.n	8004796 <UART_SetConfig+0xf2>
 8004752:	231f      	movs	r3, #31
 8004754:	18fb      	adds	r3, r7, r3
 8004756:	2202      	movs	r2, #2
 8004758:	701a      	strb	r2, [r3, #0]
 800475a:	e01c      	b.n	8004796 <UART_SetConfig+0xf2>
 800475c:	231f      	movs	r3, #31
 800475e:	18fb      	adds	r3, r7, r3
 8004760:	2204      	movs	r2, #4
 8004762:	701a      	strb	r2, [r3, #0]
 8004764:	e017      	b.n	8004796 <UART_SetConfig+0xf2>
 8004766:	231f      	movs	r3, #31
 8004768:	18fb      	adds	r3, r7, r3
 800476a:	2208      	movs	r2, #8
 800476c:	701a      	strb	r2, [r3, #0]
 800476e:	e012      	b.n	8004796 <UART_SetConfig+0xf2>
 8004770:	231f      	movs	r3, #31
 8004772:	18fb      	adds	r3, r7, r3
 8004774:	2210      	movs	r2, #16
 8004776:	701a      	strb	r2, [r3, #0]
 8004778:	e00d      	b.n	8004796 <UART_SetConfig+0xf2>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a67      	ldr	r2, [pc, #412]	; (800491c <UART_SetConfig+0x278>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d104      	bne.n	800478e <UART_SetConfig+0xea>
 8004784:	231f      	movs	r3, #31
 8004786:	18fb      	adds	r3, r7, r3
 8004788:	2200      	movs	r2, #0
 800478a:	701a      	strb	r2, [r3, #0]
 800478c:	e003      	b.n	8004796 <UART_SetConfig+0xf2>
 800478e:	231f      	movs	r3, #31
 8004790:	18fb      	adds	r3, r7, r3
 8004792:	2210      	movs	r2, #16
 8004794:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	69da      	ldr	r2, [r3, #28]
 800479a:	2380      	movs	r3, #128	; 0x80
 800479c:	021b      	lsls	r3, r3, #8
 800479e:	429a      	cmp	r2, r3
 80047a0:	d15c      	bne.n	800485c <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 80047a2:	231f      	movs	r3, #31
 80047a4:	18fb      	adds	r3, r7, r3
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	2b08      	cmp	r3, #8
 80047aa:	d015      	beq.n	80047d8 <UART_SetConfig+0x134>
 80047ac:	dc18      	bgt.n	80047e0 <UART_SetConfig+0x13c>
 80047ae:	2b04      	cmp	r3, #4
 80047b0:	d00d      	beq.n	80047ce <UART_SetConfig+0x12a>
 80047b2:	dc15      	bgt.n	80047e0 <UART_SetConfig+0x13c>
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d002      	beq.n	80047be <UART_SetConfig+0x11a>
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d005      	beq.n	80047c8 <UART_SetConfig+0x124>
 80047bc:	e010      	b.n	80047e0 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047be:	f7fe fa89 	bl	8002cd4 <HAL_RCC_GetPCLK1Freq>
 80047c2:	0003      	movs	r3, r0
 80047c4:	61bb      	str	r3, [r7, #24]
        break;
 80047c6:	e012      	b.n	80047ee <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047c8:	4b55      	ldr	r3, [pc, #340]	; (8004920 <UART_SetConfig+0x27c>)
 80047ca:	61bb      	str	r3, [r7, #24]
        break;
 80047cc:	e00f      	b.n	80047ee <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047ce:	f7fe fa05 	bl	8002bdc <HAL_RCC_GetSysClockFreq>
 80047d2:	0003      	movs	r3, r0
 80047d4:	61bb      	str	r3, [r7, #24]
        break;
 80047d6:	e00a      	b.n	80047ee <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047d8:	2380      	movs	r3, #128	; 0x80
 80047da:	021b      	lsls	r3, r3, #8
 80047dc:	61bb      	str	r3, [r7, #24]
        break;
 80047de:	e006      	b.n	80047ee <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80047e0:	2300      	movs	r3, #0
 80047e2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80047e4:	231e      	movs	r3, #30
 80047e6:	18fb      	adds	r3, r7, r3
 80047e8:	2201      	movs	r2, #1
 80047ea:	701a      	strb	r2, [r3, #0]
        break;
 80047ec:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d100      	bne.n	80047f6 <UART_SetConfig+0x152>
 80047f4:	e07a      	b.n	80048ec <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	005a      	lsls	r2, r3, #1
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	085b      	lsrs	r3, r3, #1
 8004800:	18d2      	adds	r2, r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	0019      	movs	r1, r3
 8004808:	0010      	movs	r0, r2
 800480a:	f7fb fc7d 	bl	8000108 <__udivsi3>
 800480e:	0003      	movs	r3, r0
 8004810:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	2b0f      	cmp	r3, #15
 8004816:	d91c      	bls.n	8004852 <UART_SetConfig+0x1ae>
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	2380      	movs	r3, #128	; 0x80
 800481c:	025b      	lsls	r3, r3, #9
 800481e:	429a      	cmp	r2, r3
 8004820:	d217      	bcs.n	8004852 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	b29a      	uxth	r2, r3
 8004826:	200e      	movs	r0, #14
 8004828:	183b      	adds	r3, r7, r0
 800482a:	210f      	movs	r1, #15
 800482c:	438a      	bics	r2, r1
 800482e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	085b      	lsrs	r3, r3, #1
 8004834:	b29b      	uxth	r3, r3
 8004836:	2207      	movs	r2, #7
 8004838:	4013      	ands	r3, r2
 800483a:	b299      	uxth	r1, r3
 800483c:	183b      	adds	r3, r7, r0
 800483e:	183a      	adds	r2, r7, r0
 8004840:	8812      	ldrh	r2, [r2, #0]
 8004842:	430a      	orrs	r2, r1
 8004844:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	183a      	adds	r2, r7, r0
 800484c:	8812      	ldrh	r2, [r2, #0]
 800484e:	60da      	str	r2, [r3, #12]
 8004850:	e04c      	b.n	80048ec <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004852:	231e      	movs	r3, #30
 8004854:	18fb      	adds	r3, r7, r3
 8004856:	2201      	movs	r2, #1
 8004858:	701a      	strb	r2, [r3, #0]
 800485a:	e047      	b.n	80048ec <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 800485c:	231f      	movs	r3, #31
 800485e:	18fb      	adds	r3, r7, r3
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	2b08      	cmp	r3, #8
 8004864:	d015      	beq.n	8004892 <UART_SetConfig+0x1ee>
 8004866:	dc18      	bgt.n	800489a <UART_SetConfig+0x1f6>
 8004868:	2b04      	cmp	r3, #4
 800486a:	d00d      	beq.n	8004888 <UART_SetConfig+0x1e4>
 800486c:	dc15      	bgt.n	800489a <UART_SetConfig+0x1f6>
 800486e:	2b00      	cmp	r3, #0
 8004870:	d002      	beq.n	8004878 <UART_SetConfig+0x1d4>
 8004872:	2b02      	cmp	r3, #2
 8004874:	d005      	beq.n	8004882 <UART_SetConfig+0x1de>
 8004876:	e010      	b.n	800489a <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004878:	f7fe fa2c 	bl	8002cd4 <HAL_RCC_GetPCLK1Freq>
 800487c:	0003      	movs	r3, r0
 800487e:	61bb      	str	r3, [r7, #24]
        break;
 8004880:	e012      	b.n	80048a8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004882:	4b27      	ldr	r3, [pc, #156]	; (8004920 <UART_SetConfig+0x27c>)
 8004884:	61bb      	str	r3, [r7, #24]
        break;
 8004886:	e00f      	b.n	80048a8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004888:	f7fe f9a8 	bl	8002bdc <HAL_RCC_GetSysClockFreq>
 800488c:	0003      	movs	r3, r0
 800488e:	61bb      	str	r3, [r7, #24]
        break;
 8004890:	e00a      	b.n	80048a8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004892:	2380      	movs	r3, #128	; 0x80
 8004894:	021b      	lsls	r3, r3, #8
 8004896:	61bb      	str	r3, [r7, #24]
        break;
 8004898:	e006      	b.n	80048a8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800489a:	2300      	movs	r3, #0
 800489c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800489e:	231e      	movs	r3, #30
 80048a0:	18fb      	adds	r3, r7, r3
 80048a2:	2201      	movs	r2, #1
 80048a4:	701a      	strb	r2, [r3, #0]
        break;
 80048a6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d01e      	beq.n	80048ec <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	085a      	lsrs	r2, r3, #1
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	18d2      	adds	r2, r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	0019      	movs	r1, r3
 80048be:	0010      	movs	r0, r2
 80048c0:	f7fb fc22 	bl	8000108 <__udivsi3>
 80048c4:	0003      	movs	r3, r0
 80048c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	2b0f      	cmp	r3, #15
 80048cc:	d90a      	bls.n	80048e4 <UART_SetConfig+0x240>
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	2380      	movs	r3, #128	; 0x80
 80048d2:	025b      	lsls	r3, r3, #9
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d205      	bcs.n	80048e4 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	b29a      	uxth	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	60da      	str	r2, [r3, #12]
 80048e2:	e003      	b.n	80048ec <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80048e4:	231e      	movs	r3, #30
 80048e6:	18fb      	adds	r3, r7, r3
 80048e8:	2201      	movs	r2, #1
 80048ea:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80048f8:	231e      	movs	r3, #30
 80048fa:	18fb      	adds	r3, r7, r3
 80048fc:	781b      	ldrb	r3, [r3, #0]
}
 80048fe:	0018      	movs	r0, r3
 8004900:	46bd      	mov	sp, r7
 8004902:	b008      	add	sp, #32
 8004904:	bd80      	pop	{r7, pc}
 8004906:	46c0      	nop			; (mov r8, r8)
 8004908:	efff69f3 	.word	0xefff69f3
 800490c:	ffffcfff 	.word	0xffffcfff
 8004910:	fffff4ff 	.word	0xfffff4ff
 8004914:	40013800 	.word	0x40013800
 8004918:	40021000 	.word	0x40021000
 800491c:	40004400 	.word	0x40004400
 8004920:	007a1200 	.word	0x007a1200

08004924 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004930:	2201      	movs	r2, #1
 8004932:	4013      	ands	r3, r2
 8004934:	d00b      	beq.n	800494e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	4a4a      	ldr	r2, [pc, #296]	; (8004a68 <UART_AdvFeatureConfig+0x144>)
 800493e:	4013      	ands	r3, r2
 8004940:	0019      	movs	r1, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	430a      	orrs	r2, r1
 800494c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004952:	2202      	movs	r2, #2
 8004954:	4013      	ands	r3, r2
 8004956:	d00b      	beq.n	8004970 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	4a43      	ldr	r2, [pc, #268]	; (8004a6c <UART_AdvFeatureConfig+0x148>)
 8004960:	4013      	ands	r3, r2
 8004962:	0019      	movs	r1, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	430a      	orrs	r2, r1
 800496e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004974:	2204      	movs	r2, #4
 8004976:	4013      	ands	r3, r2
 8004978:	d00b      	beq.n	8004992 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	4a3b      	ldr	r2, [pc, #236]	; (8004a70 <UART_AdvFeatureConfig+0x14c>)
 8004982:	4013      	ands	r3, r2
 8004984:	0019      	movs	r1, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	430a      	orrs	r2, r1
 8004990:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004996:	2208      	movs	r2, #8
 8004998:	4013      	ands	r3, r2
 800499a:	d00b      	beq.n	80049b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	4a34      	ldr	r2, [pc, #208]	; (8004a74 <UART_AdvFeatureConfig+0x150>)
 80049a4:	4013      	ands	r3, r2
 80049a6:	0019      	movs	r1, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	430a      	orrs	r2, r1
 80049b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b8:	2210      	movs	r2, #16
 80049ba:	4013      	ands	r3, r2
 80049bc:	d00b      	beq.n	80049d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	4a2c      	ldr	r2, [pc, #176]	; (8004a78 <UART_AdvFeatureConfig+0x154>)
 80049c6:	4013      	ands	r3, r2
 80049c8:	0019      	movs	r1, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	430a      	orrs	r2, r1
 80049d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049da:	2220      	movs	r2, #32
 80049dc:	4013      	ands	r3, r2
 80049de:	d00b      	beq.n	80049f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	4a25      	ldr	r2, [pc, #148]	; (8004a7c <UART_AdvFeatureConfig+0x158>)
 80049e8:	4013      	ands	r3, r2
 80049ea:	0019      	movs	r1, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	430a      	orrs	r2, r1
 80049f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fc:	2240      	movs	r2, #64	; 0x40
 80049fe:	4013      	ands	r3, r2
 8004a00:	d01d      	beq.n	8004a3e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	4a1d      	ldr	r2, [pc, #116]	; (8004a80 <UART_AdvFeatureConfig+0x15c>)
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	0019      	movs	r1, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	430a      	orrs	r2, r1
 8004a18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a1e:	2380      	movs	r3, #128	; 0x80
 8004a20:	035b      	lsls	r3, r3, #13
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d10b      	bne.n	8004a3e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	4a15      	ldr	r2, [pc, #84]	; (8004a84 <UART_AdvFeatureConfig+0x160>)
 8004a2e:	4013      	ands	r3, r2
 8004a30:	0019      	movs	r1, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a42:	2280      	movs	r2, #128	; 0x80
 8004a44:	4013      	ands	r3, r2
 8004a46:	d00b      	beq.n	8004a60 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	4a0e      	ldr	r2, [pc, #56]	; (8004a88 <UART_AdvFeatureConfig+0x164>)
 8004a50:	4013      	ands	r3, r2
 8004a52:	0019      	movs	r1, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	430a      	orrs	r2, r1
 8004a5e:	605a      	str	r2, [r3, #4]
  }
}
 8004a60:	46c0      	nop			; (mov r8, r8)
 8004a62:	46bd      	mov	sp, r7
 8004a64:	b002      	add	sp, #8
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	fffdffff 	.word	0xfffdffff
 8004a6c:	fffeffff 	.word	0xfffeffff
 8004a70:	fffbffff 	.word	0xfffbffff
 8004a74:	ffff7fff 	.word	0xffff7fff
 8004a78:	ffffefff 	.word	0xffffefff
 8004a7c:	ffffdfff 	.word	0xffffdfff
 8004a80:	ffefffff 	.word	0xffefffff
 8004a84:	ff9fffff 	.word	0xff9fffff
 8004a88:	fff7ffff 	.word	0xfff7ffff

08004a8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b092      	sub	sp, #72	; 0x48
 8004a90:	af02      	add	r7, sp, #8
 8004a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2284      	movs	r2, #132	; 0x84
 8004a98:	2100      	movs	r1, #0
 8004a9a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a9c:	f7fc fd8a 	bl	80015b4 <HAL_GetTick>
 8004aa0:	0003      	movs	r3, r0
 8004aa2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2208      	movs	r2, #8
 8004aac:	4013      	ands	r3, r2
 8004aae:	2b08      	cmp	r3, #8
 8004ab0:	d12c      	bne.n	8004b0c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ab2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ab4:	2280      	movs	r2, #128	; 0x80
 8004ab6:	0391      	lsls	r1, r2, #14
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	4a46      	ldr	r2, [pc, #280]	; (8004bd4 <UART_CheckIdleState+0x148>)
 8004abc:	9200      	str	r2, [sp, #0]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f000 f88c 	bl	8004bdc <UART_WaitOnFlagUntilTimeout>
 8004ac4:	1e03      	subs	r3, r0, #0
 8004ac6:	d021      	beq.n	8004b0c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ac8:	f3ef 8310 	mrs	r3, PRIMASK
 8004acc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004ad0:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad8:	f383 8810 	msr	PRIMASK, r3
}
 8004adc:	46c0      	nop			; (mov r8, r8)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2180      	movs	r1, #128	; 0x80
 8004aea:	438a      	bics	r2, r1
 8004aec:	601a      	str	r2, [r3, #0]
 8004aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af4:	f383 8810 	msr	PRIMASK, r3
}
 8004af8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2220      	movs	r2, #32
 8004afe:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2278      	movs	r2, #120	; 0x78
 8004b04:	2100      	movs	r1, #0
 8004b06:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e05f      	b.n	8004bcc <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2204      	movs	r2, #4
 8004b14:	4013      	ands	r3, r2
 8004b16:	2b04      	cmp	r3, #4
 8004b18:	d146      	bne.n	8004ba8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b1c:	2280      	movs	r2, #128	; 0x80
 8004b1e:	03d1      	lsls	r1, r2, #15
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	4a2c      	ldr	r2, [pc, #176]	; (8004bd4 <UART_CheckIdleState+0x148>)
 8004b24:	9200      	str	r2, [sp, #0]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f000 f858 	bl	8004bdc <UART_WaitOnFlagUntilTimeout>
 8004b2c:	1e03      	subs	r3, r0, #0
 8004b2e:	d03b      	beq.n	8004ba8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b30:	f3ef 8310 	mrs	r3, PRIMASK
 8004b34:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b36:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b38:	637b      	str	r3, [r7, #52]	; 0x34
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	f383 8810 	msr	PRIMASK, r3
}
 8004b44:	46c0      	nop			; (mov r8, r8)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4921      	ldr	r1, [pc, #132]	; (8004bd8 <UART_CheckIdleState+0x14c>)
 8004b52:	400a      	ands	r2, r1
 8004b54:	601a      	str	r2, [r3, #0]
 8004b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b58:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	f383 8810 	msr	PRIMASK, r3
}
 8004b60:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b62:	f3ef 8310 	mrs	r3, PRIMASK
 8004b66:	61bb      	str	r3, [r7, #24]
  return(result);
 8004b68:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b6a:	633b      	str	r3, [r7, #48]	; 0x30
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	f383 8810 	msr	PRIMASK, r3
}
 8004b76:	46c0      	nop			; (mov r8, r8)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	689a      	ldr	r2, [r3, #8]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2101      	movs	r1, #1
 8004b84:	438a      	bics	r2, r1
 8004b86:	609a      	str	r2, [r3, #8]
 8004b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b8a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b8c:	6a3b      	ldr	r3, [r7, #32]
 8004b8e:	f383 8810 	msr	PRIMASK, r3
}
 8004b92:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2280      	movs	r2, #128	; 0x80
 8004b98:	2120      	movs	r1, #32
 8004b9a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2278      	movs	r2, #120	; 0x78
 8004ba0:	2100      	movs	r1, #0
 8004ba2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e011      	b.n	8004bcc <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2220      	movs	r2, #32
 8004bac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2280      	movs	r2, #128	; 0x80
 8004bb2:	2120      	movs	r1, #32
 8004bb4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2278      	movs	r2, #120	; 0x78
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	0018      	movs	r0, r3
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	b010      	add	sp, #64	; 0x40
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	01ffffff 	.word	0x01ffffff
 8004bd8:	fffffedf 	.word	0xfffffedf

08004bdc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	603b      	str	r3, [r7, #0]
 8004be8:	1dfb      	adds	r3, r7, #7
 8004bea:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bec:	e04b      	b.n	8004c86 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bee:	69bb      	ldr	r3, [r7, #24]
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	d048      	beq.n	8004c86 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bf4:	f7fc fcde 	bl	80015b4 <HAL_GetTick>
 8004bf8:	0002      	movs	r2, r0
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	69ba      	ldr	r2, [r7, #24]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d302      	bcc.n	8004c0a <UART_WaitOnFlagUntilTimeout+0x2e>
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d101      	bne.n	8004c0e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e04b      	b.n	8004ca6 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2204      	movs	r2, #4
 8004c16:	4013      	ands	r3, r2
 8004c18:	d035      	beq.n	8004c86 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	69db      	ldr	r3, [r3, #28]
 8004c20:	2208      	movs	r2, #8
 8004c22:	4013      	ands	r3, r2
 8004c24:	2b08      	cmp	r3, #8
 8004c26:	d111      	bne.n	8004c4c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2208      	movs	r2, #8
 8004c2e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	0018      	movs	r0, r3
 8004c34:	f000 f906 	bl	8004e44 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2284      	movs	r2, #132	; 0x84
 8004c3c:	2108      	movs	r1, #8
 8004c3e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2278      	movs	r2, #120	; 0x78
 8004c44:	2100      	movs	r1, #0
 8004c46:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e02c      	b.n	8004ca6 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	69da      	ldr	r2, [r3, #28]
 8004c52:	2380      	movs	r3, #128	; 0x80
 8004c54:	011b      	lsls	r3, r3, #4
 8004c56:	401a      	ands	r2, r3
 8004c58:	2380      	movs	r3, #128	; 0x80
 8004c5a:	011b      	lsls	r3, r3, #4
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d112      	bne.n	8004c86 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2280      	movs	r2, #128	; 0x80
 8004c66:	0112      	lsls	r2, r2, #4
 8004c68:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	0018      	movs	r0, r3
 8004c6e:	f000 f8e9 	bl	8004e44 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2284      	movs	r2, #132	; 0x84
 8004c76:	2120      	movs	r1, #32
 8004c78:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2278      	movs	r2, #120	; 0x78
 8004c7e:	2100      	movs	r1, #0
 8004c80:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e00f      	b.n	8004ca6 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	69db      	ldr	r3, [r3, #28]
 8004c8c:	68ba      	ldr	r2, [r7, #8]
 8004c8e:	4013      	ands	r3, r2
 8004c90:	68ba      	ldr	r2, [r7, #8]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	425a      	negs	r2, r3
 8004c96:	4153      	adcs	r3, r2
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	001a      	movs	r2, r3
 8004c9c:	1dfb      	adds	r3, r7, #7
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d0a4      	beq.n	8004bee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	0018      	movs	r0, r3
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	b004      	add	sp, #16
 8004cac:	bd80      	pop	{r7, pc}
	...

08004cb0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b090      	sub	sp, #64	; 0x40
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	1dbb      	adds	r3, r7, #6
 8004cbc:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	1dba      	adds	r2, r7, #6
 8004cc8:	2158      	movs	r1, #88	; 0x58
 8004cca:	8812      	ldrh	r2, [r2, #0]
 8004ccc:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	1dba      	adds	r2, r7, #6
 8004cd2:	215a      	movs	r1, #90	; 0x5a
 8004cd4:	8812      	ldrh	r2, [r2, #0]
 8004cd6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	689a      	ldr	r2, [r3, #8]
 8004ce2:	2380      	movs	r3, #128	; 0x80
 8004ce4:	015b      	lsls	r3, r3, #5
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d10d      	bne.n	8004d06 <UART_Start_Receive_IT+0x56>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d104      	bne.n	8004cfc <UART_Start_Receive_IT+0x4c>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	225c      	movs	r2, #92	; 0x5c
 8004cf6:	4950      	ldr	r1, [pc, #320]	; (8004e38 <UART_Start_Receive_IT+0x188>)
 8004cf8:	5299      	strh	r1, [r3, r2]
 8004cfa:	e02e      	b.n	8004d5a <UART_Start_Receive_IT+0xaa>
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	225c      	movs	r2, #92	; 0x5c
 8004d00:	21ff      	movs	r1, #255	; 0xff
 8004d02:	5299      	strh	r1, [r3, r2]
 8004d04:	e029      	b.n	8004d5a <UART_Start_Receive_IT+0xaa>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d10d      	bne.n	8004d2a <UART_Start_Receive_IT+0x7a>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d104      	bne.n	8004d20 <UART_Start_Receive_IT+0x70>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	225c      	movs	r2, #92	; 0x5c
 8004d1a:	21ff      	movs	r1, #255	; 0xff
 8004d1c:	5299      	strh	r1, [r3, r2]
 8004d1e:	e01c      	b.n	8004d5a <UART_Start_Receive_IT+0xaa>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	225c      	movs	r2, #92	; 0x5c
 8004d24:	217f      	movs	r1, #127	; 0x7f
 8004d26:	5299      	strh	r1, [r3, r2]
 8004d28:	e017      	b.n	8004d5a <UART_Start_Receive_IT+0xaa>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	689a      	ldr	r2, [r3, #8]
 8004d2e:	2380      	movs	r3, #128	; 0x80
 8004d30:	055b      	lsls	r3, r3, #21
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d10d      	bne.n	8004d52 <UART_Start_Receive_IT+0xa2>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d104      	bne.n	8004d48 <UART_Start_Receive_IT+0x98>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	225c      	movs	r2, #92	; 0x5c
 8004d42:	217f      	movs	r1, #127	; 0x7f
 8004d44:	5299      	strh	r1, [r3, r2]
 8004d46:	e008      	b.n	8004d5a <UART_Start_Receive_IT+0xaa>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	225c      	movs	r2, #92	; 0x5c
 8004d4c:	213f      	movs	r1, #63	; 0x3f
 8004d4e:	5299      	strh	r1, [r3, r2]
 8004d50:	e003      	b.n	8004d5a <UART_Start_Receive_IT+0xaa>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	225c      	movs	r2, #92	; 0x5c
 8004d56:	2100      	movs	r1, #0
 8004d58:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2284      	movs	r2, #132	; 0x84
 8004d5e:	2100      	movs	r1, #0
 8004d60:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2280      	movs	r2, #128	; 0x80
 8004d66:	2122      	movs	r1, #34	; 0x22
 8004d68:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d6a:	f3ef 8310 	mrs	r3, PRIMASK
 8004d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004d70:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d74:	2301      	movs	r3, #1
 8004d76:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d7a:	f383 8810 	msr	PRIMASK, r3
}
 8004d7e:	46c0      	nop			; (mov r8, r8)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	689a      	ldr	r2, [r3, #8]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2101      	movs	r1, #1
 8004d8c:	430a      	orrs	r2, r1
 8004d8e:	609a      	str	r2, [r3, #8]
 8004d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d92:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d96:	f383 8810 	msr	PRIMASK, r3
}
 8004d9a:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	689a      	ldr	r2, [r3, #8]
 8004da0:	2380      	movs	r3, #128	; 0x80
 8004da2:	015b      	lsls	r3, r3, #5
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d107      	bne.n	8004db8 <UART_Start_Receive_IT+0x108>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d103      	bne.n	8004db8 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	4a22      	ldr	r2, [pc, #136]	; (8004e3c <UART_Start_Receive_IT+0x18c>)
 8004db4:	669a      	str	r2, [r3, #104]	; 0x68
 8004db6:	e002      	b.n	8004dbe <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	4a21      	ldr	r2, [pc, #132]	; (8004e40 <UART_Start_Receive_IT+0x190>)
 8004dbc:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d019      	beq.n	8004dfa <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dc6:	f3ef 8310 	mrs	r3, PRIMASK
 8004dca:	61fb      	str	r3, [r7, #28]
  return(result);
 8004dcc:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004dce:	637b      	str	r3, [r7, #52]	; 0x34
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dd4:	6a3b      	ldr	r3, [r7, #32]
 8004dd6:	f383 8810 	msr	PRIMASK, r3
}
 8004dda:	46c0      	nop			; (mov r8, r8)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2190      	movs	r1, #144	; 0x90
 8004de8:	0049      	lsls	r1, r1, #1
 8004dea:	430a      	orrs	r2, r1
 8004dec:	601a      	str	r2, [r3, #0]
 8004dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004df0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df4:	f383 8810 	msr	PRIMASK, r3
}
 8004df8:	e018      	b.n	8004e2c <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dfa:	f3ef 8310 	mrs	r3, PRIMASK
 8004dfe:	613b      	str	r3, [r7, #16]
  return(result);
 8004e00:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004e02:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e04:	2301      	movs	r3, #1
 8004e06:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	f383 8810 	msr	PRIMASK, r3
}
 8004e0e:	46c0      	nop			; (mov r8, r8)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2120      	movs	r1, #32
 8004e1c:	430a      	orrs	r2, r1
 8004e1e:	601a      	str	r2, [r3, #0]
 8004e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e22:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	f383 8810 	msr	PRIMASK, r3
}
 8004e2a:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	0018      	movs	r0, r3
 8004e30:	46bd      	mov	sp, r7
 8004e32:	b010      	add	sp, #64	; 0x40
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	46c0      	nop			; (mov r8, r8)
 8004e38:	000001ff 	.word	0x000001ff
 8004e3c:	08005149 	.word	0x08005149
 8004e40:	08004f91 	.word	0x08004f91

08004e44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b08e      	sub	sp, #56	; 0x38
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e4c:	f3ef 8310 	mrs	r3, PRIMASK
 8004e50:	617b      	str	r3, [r7, #20]
  return(result);
 8004e52:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e54:	637b      	str	r3, [r7, #52]	; 0x34
 8004e56:	2301      	movs	r3, #1
 8004e58:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	f383 8810 	msr	PRIMASK, r3
}
 8004e60:	46c0      	nop			; (mov r8, r8)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4926      	ldr	r1, [pc, #152]	; (8004f08 <UART_EndRxTransfer+0xc4>)
 8004e6e:	400a      	ands	r2, r1
 8004e70:	601a      	str	r2, [r3, #0]
 8004e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e74:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	f383 8810 	msr	PRIMASK, r3
}
 8004e7c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e7e:	f3ef 8310 	mrs	r3, PRIMASK
 8004e82:	623b      	str	r3, [r7, #32]
  return(result);
 8004e84:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e86:	633b      	str	r3, [r7, #48]	; 0x30
 8004e88:	2301      	movs	r3, #1
 8004e8a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8e:	f383 8810 	msr	PRIMASK, r3
}
 8004e92:	46c0      	nop			; (mov r8, r8)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	689a      	ldr	r2, [r3, #8]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2101      	movs	r1, #1
 8004ea0:	438a      	bics	r2, r1
 8004ea2:	609a      	str	r2, [r3, #8]
 8004ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eaa:	f383 8810 	msr	PRIMASK, r3
}
 8004eae:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d118      	bne.n	8004eea <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004eb8:	f3ef 8310 	mrs	r3, PRIMASK
 8004ebc:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ebe:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f383 8810 	msr	PRIMASK, r3
}
 8004ecc:	46c0      	nop			; (mov r8, r8)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2110      	movs	r1, #16
 8004eda:	438a      	bics	r2, r1
 8004edc:	601a      	str	r2, [r3, #0]
 8004ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	f383 8810 	msr	PRIMASK, r3
}
 8004ee8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2280      	movs	r2, #128	; 0x80
 8004eee:	2120      	movs	r1, #32
 8004ef0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004efe:	46c0      	nop			; (mov r8, r8)
 8004f00:	46bd      	mov	sp, r7
 8004f02:	b00e      	add	sp, #56	; 0x38
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	46c0      	nop			; (mov r8, r8)
 8004f08:	fffffedf 	.word	0xfffffedf

08004f0c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f18:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	225a      	movs	r2, #90	; 0x5a
 8004f1e:	2100      	movs	r1, #0
 8004f20:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2252      	movs	r2, #82	; 0x52
 8004f26:	2100      	movs	r1, #0
 8004f28:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	0018      	movs	r0, r3
 8004f2e:	f7fc f8a1 	bl	8001074 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f32:	46c0      	nop			; (mov r8, r8)
 8004f34:	46bd      	mov	sp, r7
 8004f36:	b004      	add	sp, #16
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b086      	sub	sp, #24
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f42:	f3ef 8310 	mrs	r3, PRIMASK
 8004f46:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f48:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f4a:	617b      	str	r3, [r7, #20]
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f383 8810 	msr	PRIMASK, r3
}
 8004f56:	46c0      	nop			; (mov r8, r8)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2140      	movs	r1, #64	; 0x40
 8004f64:	438a      	bics	r2, r1
 8004f66:	601a      	str	r2, [r3, #0]
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	f383 8810 	msr	PRIMASK, r3
}
 8004f72:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2220      	movs	r2, #32
 8004f78:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	0018      	movs	r0, r3
 8004f84:	f7ff fb7a 	bl	800467c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f88:	46c0      	nop			; (mov r8, r8)
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	b006      	add	sp, #24
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b094      	sub	sp, #80	; 0x50
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004f98:	204e      	movs	r0, #78	; 0x4e
 8004f9a:	183b      	adds	r3, r7, r0
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	215c      	movs	r1, #92	; 0x5c
 8004fa0:	5a52      	ldrh	r2, [r2, r1]
 8004fa2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2280      	movs	r2, #128	; 0x80
 8004fa8:	589b      	ldr	r3, [r3, r2]
 8004faa:	2b22      	cmp	r3, #34	; 0x22
 8004fac:	d000      	beq.n	8004fb0 <UART_RxISR_8BIT+0x20>
 8004fae:	e0ba      	b.n	8005126 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	214c      	movs	r1, #76	; 0x4c
 8004fb6:	187b      	adds	r3, r7, r1
 8004fb8:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8004fba:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004fbc:	187b      	adds	r3, r7, r1
 8004fbe:	881b      	ldrh	r3, [r3, #0]
 8004fc0:	b2da      	uxtb	r2, r3
 8004fc2:	183b      	adds	r3, r7, r0
 8004fc4:	881b      	ldrh	r3, [r3, #0]
 8004fc6:	b2d9      	uxtb	r1, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fcc:	400a      	ands	r2, r1
 8004fce:	b2d2      	uxtb	r2, r2
 8004fd0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fd6:	1c5a      	adds	r2, r3, #1
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	225a      	movs	r2, #90	; 0x5a
 8004fe0:	5a9b      	ldrh	r3, [r3, r2]
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	b299      	uxth	r1, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	225a      	movs	r2, #90	; 0x5a
 8004fec:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	225a      	movs	r2, #90	; 0x5a
 8004ff2:	5a9b      	ldrh	r3, [r3, r2]
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d000      	beq.n	8004ffc <UART_RxISR_8BIT+0x6c>
 8004ffa:	e09c      	b.n	8005136 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ffc:	f3ef 8310 	mrs	r3, PRIMASK
 8005000:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005004:	64bb      	str	r3, [r7, #72]	; 0x48
 8005006:	2301      	movs	r3, #1
 8005008:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800500a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800500c:	f383 8810 	msr	PRIMASK, r3
}
 8005010:	46c0      	nop			; (mov r8, r8)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4948      	ldr	r1, [pc, #288]	; (8005140 <UART_RxISR_8BIT+0x1b0>)
 800501e:	400a      	ands	r2, r1
 8005020:	601a      	str	r2, [r3, #0]
 8005022:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005024:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005028:	f383 8810 	msr	PRIMASK, r3
}
 800502c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800502e:	f3ef 8310 	mrs	r3, PRIMASK
 8005032:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005034:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005036:	647b      	str	r3, [r7, #68]	; 0x44
 8005038:	2301      	movs	r3, #1
 800503a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800503c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800503e:	f383 8810 	msr	PRIMASK, r3
}
 8005042:	46c0      	nop			; (mov r8, r8)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	689a      	ldr	r2, [r3, #8]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2101      	movs	r1, #1
 8005050:	438a      	bics	r2, r1
 8005052:	609a      	str	r2, [r3, #8]
 8005054:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005056:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800505a:	f383 8810 	msr	PRIMASK, r3
}
 800505e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2280      	movs	r2, #128	; 0x80
 8005064:	2120      	movs	r1, #32
 8005066:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	685a      	ldr	r2, [r3, #4]
 800507a:	2380      	movs	r3, #128	; 0x80
 800507c:	041b      	lsls	r3, r3, #16
 800507e:	4013      	ands	r3, r2
 8005080:	d018      	beq.n	80050b4 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005082:	f3ef 8310 	mrs	r3, PRIMASK
 8005086:	61bb      	str	r3, [r7, #24]
  return(result);
 8005088:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800508a:	643b      	str	r3, [r7, #64]	; 0x40
 800508c:	2301      	movs	r3, #1
 800508e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	f383 8810 	msr	PRIMASK, r3
}
 8005096:	46c0      	nop			; (mov r8, r8)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4928      	ldr	r1, [pc, #160]	; (8005144 <UART_RxISR_8BIT+0x1b4>)
 80050a4:	400a      	ands	r2, r1
 80050a6:	601a      	str	r2, [r3, #0]
 80050a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050aa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050ac:	6a3b      	ldr	r3, [r7, #32]
 80050ae:	f383 8810 	msr	PRIMASK, r3
}
 80050b2:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d12f      	bne.n	800511c <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050c2:	f3ef 8310 	mrs	r3, PRIMASK
 80050c6:	60fb      	str	r3, [r7, #12]
  return(result);
 80050c8:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050cc:	2301      	movs	r3, #1
 80050ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	f383 8810 	msr	PRIMASK, r3
}
 80050d6:	46c0      	nop			; (mov r8, r8)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	2110      	movs	r1, #16
 80050e4:	438a      	bics	r2, r1
 80050e6:	601a      	str	r2, [r3, #0]
 80050e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	f383 8810 	msr	PRIMASK, r3
}
 80050f2:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	69db      	ldr	r3, [r3, #28]
 80050fa:	2210      	movs	r2, #16
 80050fc:	4013      	ands	r3, r2
 80050fe:	2b10      	cmp	r3, #16
 8005100:	d103      	bne.n	800510a <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2210      	movs	r2, #16
 8005108:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2258      	movs	r2, #88	; 0x58
 800510e:	5a9a      	ldrh	r2, [r3, r2]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	0011      	movs	r1, r2
 8005114:	0018      	movs	r0, r3
 8005116:	f7ff fab9 	bl	800468c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800511a:	e00c      	b.n	8005136 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	0018      	movs	r0, r3
 8005120:	f7fb ff5a 	bl	8000fd8 <HAL_UART_RxCpltCallback>
}
 8005124:	e007      	b.n	8005136 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	699a      	ldr	r2, [r3, #24]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2108      	movs	r1, #8
 8005132:	430a      	orrs	r2, r1
 8005134:	619a      	str	r2, [r3, #24]
}
 8005136:	46c0      	nop			; (mov r8, r8)
 8005138:	46bd      	mov	sp, r7
 800513a:	b014      	add	sp, #80	; 0x50
 800513c:	bd80      	pop	{r7, pc}
 800513e:	46c0      	nop			; (mov r8, r8)
 8005140:	fffffedf 	.word	0xfffffedf
 8005144:	fbffffff 	.word	0xfbffffff

08005148 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b094      	sub	sp, #80	; 0x50
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005150:	204e      	movs	r0, #78	; 0x4e
 8005152:	183b      	adds	r3, r7, r0
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	215c      	movs	r1, #92	; 0x5c
 8005158:	5a52      	ldrh	r2, [r2, r1]
 800515a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2280      	movs	r2, #128	; 0x80
 8005160:	589b      	ldr	r3, [r3, r2]
 8005162:	2b22      	cmp	r3, #34	; 0x22
 8005164:	d000      	beq.n	8005168 <UART_RxISR_16BIT+0x20>
 8005166:	e0ba      	b.n	80052de <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	214c      	movs	r1, #76	; 0x4c
 800516e:	187b      	adds	r3, r7, r1
 8005170:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8005172:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005178:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800517a:	187b      	adds	r3, r7, r1
 800517c:	183a      	adds	r2, r7, r0
 800517e:	881b      	ldrh	r3, [r3, #0]
 8005180:	8812      	ldrh	r2, [r2, #0]
 8005182:	4013      	ands	r3, r2
 8005184:	b29a      	uxth	r2, r3
 8005186:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005188:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800518e:	1c9a      	adds	r2, r3, #2
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	225a      	movs	r2, #90	; 0x5a
 8005198:	5a9b      	ldrh	r3, [r3, r2]
 800519a:	b29b      	uxth	r3, r3
 800519c:	3b01      	subs	r3, #1
 800519e:	b299      	uxth	r1, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	225a      	movs	r2, #90	; 0x5a
 80051a4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	225a      	movs	r2, #90	; 0x5a
 80051aa:	5a9b      	ldrh	r3, [r3, r2]
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d000      	beq.n	80051b4 <UART_RxISR_16BIT+0x6c>
 80051b2:	e09c      	b.n	80052ee <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051b4:	f3ef 8310 	mrs	r3, PRIMASK
 80051b8:	623b      	str	r3, [r7, #32]
  return(result);
 80051ba:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051bc:	647b      	str	r3, [r7, #68]	; 0x44
 80051be:	2301      	movs	r3, #1
 80051c0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c4:	f383 8810 	msr	PRIMASK, r3
}
 80051c8:	46c0      	nop			; (mov r8, r8)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4948      	ldr	r1, [pc, #288]	; (80052f8 <UART_RxISR_16BIT+0x1b0>)
 80051d6:	400a      	ands	r2, r1
 80051d8:	601a      	str	r2, [r3, #0]
 80051da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051dc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e0:	f383 8810 	msr	PRIMASK, r3
}
 80051e4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051e6:	f3ef 8310 	mrs	r3, PRIMASK
 80051ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80051ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ee:	643b      	str	r3, [r7, #64]	; 0x40
 80051f0:	2301      	movs	r3, #1
 80051f2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f6:	f383 8810 	msr	PRIMASK, r3
}
 80051fa:	46c0      	nop			; (mov r8, r8)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	689a      	ldr	r2, [r3, #8]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2101      	movs	r1, #1
 8005208:	438a      	bics	r2, r1
 800520a:	609a      	str	r2, [r3, #8]
 800520c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800520e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005212:	f383 8810 	msr	PRIMASK, r3
}
 8005216:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2280      	movs	r2, #128	; 0x80
 800521c:	2120      	movs	r1, #32
 800521e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	685a      	ldr	r2, [r3, #4]
 8005232:	2380      	movs	r3, #128	; 0x80
 8005234:	041b      	lsls	r3, r3, #16
 8005236:	4013      	ands	r3, r2
 8005238:	d018      	beq.n	800526c <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800523a:	f3ef 8310 	mrs	r3, PRIMASK
 800523e:	617b      	str	r3, [r7, #20]
  return(result);
 8005240:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005242:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005244:	2301      	movs	r3, #1
 8005246:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	f383 8810 	msr	PRIMASK, r3
}
 800524e:	46c0      	nop			; (mov r8, r8)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4928      	ldr	r1, [pc, #160]	; (80052fc <UART_RxISR_16BIT+0x1b4>)
 800525c:	400a      	ands	r2, r1
 800525e:	601a      	str	r2, [r3, #0]
 8005260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005262:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	f383 8810 	msr	PRIMASK, r3
}
 800526a:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005270:	2b01      	cmp	r3, #1
 8005272:	d12f      	bne.n	80052d4 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800527a:	f3ef 8310 	mrs	r3, PRIMASK
 800527e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005280:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005282:	63bb      	str	r3, [r7, #56]	; 0x38
 8005284:	2301      	movs	r3, #1
 8005286:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f383 8810 	msr	PRIMASK, r3
}
 800528e:	46c0      	nop			; (mov r8, r8)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2110      	movs	r1, #16
 800529c:	438a      	bics	r2, r1
 800529e:	601a      	str	r2, [r3, #0]
 80052a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	f383 8810 	msr	PRIMASK, r3
}
 80052aa:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	69db      	ldr	r3, [r3, #28]
 80052b2:	2210      	movs	r2, #16
 80052b4:	4013      	ands	r3, r2
 80052b6:	2b10      	cmp	r3, #16
 80052b8:	d103      	bne.n	80052c2 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2210      	movs	r2, #16
 80052c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2258      	movs	r2, #88	; 0x58
 80052c6:	5a9a      	ldrh	r2, [r3, r2]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	0011      	movs	r1, r2
 80052cc:	0018      	movs	r0, r3
 80052ce:	f7ff f9dd 	bl	800468c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80052d2:	e00c      	b.n	80052ee <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	0018      	movs	r0, r3
 80052d8:	f7fb fe7e 	bl	8000fd8 <HAL_UART_RxCpltCallback>
}
 80052dc:	e007      	b.n	80052ee <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	699a      	ldr	r2, [r3, #24]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2108      	movs	r1, #8
 80052ea:	430a      	orrs	r2, r1
 80052ec:	619a      	str	r2, [r3, #24]
}
 80052ee:	46c0      	nop			; (mov r8, r8)
 80052f0:	46bd      	mov	sp, r7
 80052f2:	b014      	add	sp, #80	; 0x50
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	46c0      	nop			; (mov r8, r8)
 80052f8:	fffffedf 	.word	0xfffffedf
 80052fc:	fbffffff 	.word	0xfbffffff

08005300 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005308:	46c0      	nop			; (mov r8, r8)
 800530a:	46bd      	mov	sp, r7
 800530c:	b002      	add	sp, #8
 800530e:	bd80      	pop	{r7, pc}

08005310 <__errno>:
 8005310:	4b01      	ldr	r3, [pc, #4]	; (8005318 <__errno+0x8>)
 8005312:	6818      	ldr	r0, [r3, #0]
 8005314:	4770      	bx	lr
 8005316:	46c0      	nop			; (mov r8, r8)
 8005318:	2000000c 	.word	0x2000000c

0800531c <__libc_init_array>:
 800531c:	b570      	push	{r4, r5, r6, lr}
 800531e:	2600      	movs	r6, #0
 8005320:	4d0c      	ldr	r5, [pc, #48]	; (8005354 <__libc_init_array+0x38>)
 8005322:	4c0d      	ldr	r4, [pc, #52]	; (8005358 <__libc_init_array+0x3c>)
 8005324:	1b64      	subs	r4, r4, r5
 8005326:	10a4      	asrs	r4, r4, #2
 8005328:	42a6      	cmp	r6, r4
 800532a:	d109      	bne.n	8005340 <__libc_init_array+0x24>
 800532c:	2600      	movs	r6, #0
 800532e:	f000 f8f1 	bl	8005514 <_init>
 8005332:	4d0a      	ldr	r5, [pc, #40]	; (800535c <__libc_init_array+0x40>)
 8005334:	4c0a      	ldr	r4, [pc, #40]	; (8005360 <__libc_init_array+0x44>)
 8005336:	1b64      	subs	r4, r4, r5
 8005338:	10a4      	asrs	r4, r4, #2
 800533a:	42a6      	cmp	r6, r4
 800533c:	d105      	bne.n	800534a <__libc_init_array+0x2e>
 800533e:	bd70      	pop	{r4, r5, r6, pc}
 8005340:	00b3      	lsls	r3, r6, #2
 8005342:	58eb      	ldr	r3, [r5, r3]
 8005344:	4798      	blx	r3
 8005346:	3601      	adds	r6, #1
 8005348:	e7ee      	b.n	8005328 <__libc_init_array+0xc>
 800534a:	00b3      	lsls	r3, r6, #2
 800534c:	58eb      	ldr	r3, [r5, r3]
 800534e:	4798      	blx	r3
 8005350:	3601      	adds	r6, #1
 8005352:	e7f2      	b.n	800533a <__libc_init_array+0x1e>
 8005354:	08005578 	.word	0x08005578
 8005358:	08005578 	.word	0x08005578
 800535c:	08005578 	.word	0x08005578
 8005360:	0800557c 	.word	0x0800557c

08005364 <malloc>:
 8005364:	b510      	push	{r4, lr}
 8005366:	4b03      	ldr	r3, [pc, #12]	; (8005374 <malloc+0x10>)
 8005368:	0001      	movs	r1, r0
 800536a:	6818      	ldr	r0, [r3, #0]
 800536c:	f000 f838 	bl	80053e0 <_malloc_r>
 8005370:	bd10      	pop	{r4, pc}
 8005372:	46c0      	nop			; (mov r8, r8)
 8005374:	2000000c 	.word	0x2000000c

08005378 <memcpy>:
 8005378:	2300      	movs	r3, #0
 800537a:	b510      	push	{r4, lr}
 800537c:	429a      	cmp	r2, r3
 800537e:	d100      	bne.n	8005382 <memcpy+0xa>
 8005380:	bd10      	pop	{r4, pc}
 8005382:	5ccc      	ldrb	r4, [r1, r3]
 8005384:	54c4      	strb	r4, [r0, r3]
 8005386:	3301      	adds	r3, #1
 8005388:	e7f8      	b.n	800537c <memcpy+0x4>

0800538a <memset>:
 800538a:	0003      	movs	r3, r0
 800538c:	1882      	adds	r2, r0, r2
 800538e:	4293      	cmp	r3, r2
 8005390:	d100      	bne.n	8005394 <memset+0xa>
 8005392:	4770      	bx	lr
 8005394:	7019      	strb	r1, [r3, #0]
 8005396:	3301      	adds	r3, #1
 8005398:	e7f9      	b.n	800538e <memset+0x4>
	...

0800539c <sbrk_aligned>:
 800539c:	b570      	push	{r4, r5, r6, lr}
 800539e:	4e0f      	ldr	r6, [pc, #60]	; (80053dc <sbrk_aligned+0x40>)
 80053a0:	000d      	movs	r5, r1
 80053a2:	6831      	ldr	r1, [r6, #0]
 80053a4:	0004      	movs	r4, r0
 80053a6:	2900      	cmp	r1, #0
 80053a8:	d102      	bne.n	80053b0 <sbrk_aligned+0x14>
 80053aa:	f000 f88f 	bl	80054cc <_sbrk_r>
 80053ae:	6030      	str	r0, [r6, #0]
 80053b0:	0029      	movs	r1, r5
 80053b2:	0020      	movs	r0, r4
 80053b4:	f000 f88a 	bl	80054cc <_sbrk_r>
 80053b8:	1c43      	adds	r3, r0, #1
 80053ba:	d00a      	beq.n	80053d2 <sbrk_aligned+0x36>
 80053bc:	2303      	movs	r3, #3
 80053be:	1cc5      	adds	r5, r0, #3
 80053c0:	439d      	bics	r5, r3
 80053c2:	42a8      	cmp	r0, r5
 80053c4:	d007      	beq.n	80053d6 <sbrk_aligned+0x3a>
 80053c6:	1a29      	subs	r1, r5, r0
 80053c8:	0020      	movs	r0, r4
 80053ca:	f000 f87f 	bl	80054cc <_sbrk_r>
 80053ce:	1c43      	adds	r3, r0, #1
 80053d0:	d101      	bne.n	80053d6 <sbrk_aligned+0x3a>
 80053d2:	2501      	movs	r5, #1
 80053d4:	426d      	negs	r5, r5
 80053d6:	0028      	movs	r0, r5
 80053d8:	bd70      	pop	{r4, r5, r6, pc}
 80053da:	46c0      	nop			; (mov r8, r8)
 80053dc:	20000cb0 	.word	0x20000cb0

080053e0 <_malloc_r>:
 80053e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053e2:	2203      	movs	r2, #3
 80053e4:	1ccb      	adds	r3, r1, #3
 80053e6:	4393      	bics	r3, r2
 80053e8:	3308      	adds	r3, #8
 80053ea:	0006      	movs	r6, r0
 80053ec:	001f      	movs	r7, r3
 80053ee:	2b0c      	cmp	r3, #12
 80053f0:	d232      	bcs.n	8005458 <_malloc_r+0x78>
 80053f2:	270c      	movs	r7, #12
 80053f4:	42b9      	cmp	r1, r7
 80053f6:	d831      	bhi.n	800545c <_malloc_r+0x7c>
 80053f8:	0030      	movs	r0, r6
 80053fa:	f000 f879 	bl	80054f0 <__malloc_lock>
 80053fe:	4d32      	ldr	r5, [pc, #200]	; (80054c8 <_malloc_r+0xe8>)
 8005400:	682b      	ldr	r3, [r5, #0]
 8005402:	001c      	movs	r4, r3
 8005404:	2c00      	cmp	r4, #0
 8005406:	d12e      	bne.n	8005466 <_malloc_r+0x86>
 8005408:	0039      	movs	r1, r7
 800540a:	0030      	movs	r0, r6
 800540c:	f7ff ffc6 	bl	800539c <sbrk_aligned>
 8005410:	0004      	movs	r4, r0
 8005412:	1c43      	adds	r3, r0, #1
 8005414:	d11e      	bne.n	8005454 <_malloc_r+0x74>
 8005416:	682c      	ldr	r4, [r5, #0]
 8005418:	0025      	movs	r5, r4
 800541a:	2d00      	cmp	r5, #0
 800541c:	d14a      	bne.n	80054b4 <_malloc_r+0xd4>
 800541e:	6823      	ldr	r3, [r4, #0]
 8005420:	0029      	movs	r1, r5
 8005422:	18e3      	adds	r3, r4, r3
 8005424:	0030      	movs	r0, r6
 8005426:	9301      	str	r3, [sp, #4]
 8005428:	f000 f850 	bl	80054cc <_sbrk_r>
 800542c:	9b01      	ldr	r3, [sp, #4]
 800542e:	4283      	cmp	r3, r0
 8005430:	d143      	bne.n	80054ba <_malloc_r+0xda>
 8005432:	6823      	ldr	r3, [r4, #0]
 8005434:	3703      	adds	r7, #3
 8005436:	1aff      	subs	r7, r7, r3
 8005438:	2303      	movs	r3, #3
 800543a:	439f      	bics	r7, r3
 800543c:	3708      	adds	r7, #8
 800543e:	2f0c      	cmp	r7, #12
 8005440:	d200      	bcs.n	8005444 <_malloc_r+0x64>
 8005442:	270c      	movs	r7, #12
 8005444:	0039      	movs	r1, r7
 8005446:	0030      	movs	r0, r6
 8005448:	f7ff ffa8 	bl	800539c <sbrk_aligned>
 800544c:	1c43      	adds	r3, r0, #1
 800544e:	d034      	beq.n	80054ba <_malloc_r+0xda>
 8005450:	6823      	ldr	r3, [r4, #0]
 8005452:	19df      	adds	r7, r3, r7
 8005454:	6027      	str	r7, [r4, #0]
 8005456:	e013      	b.n	8005480 <_malloc_r+0xa0>
 8005458:	2b00      	cmp	r3, #0
 800545a:	dacb      	bge.n	80053f4 <_malloc_r+0x14>
 800545c:	230c      	movs	r3, #12
 800545e:	2500      	movs	r5, #0
 8005460:	6033      	str	r3, [r6, #0]
 8005462:	0028      	movs	r0, r5
 8005464:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005466:	6822      	ldr	r2, [r4, #0]
 8005468:	1bd1      	subs	r1, r2, r7
 800546a:	d420      	bmi.n	80054ae <_malloc_r+0xce>
 800546c:	290b      	cmp	r1, #11
 800546e:	d917      	bls.n	80054a0 <_malloc_r+0xc0>
 8005470:	19e2      	adds	r2, r4, r7
 8005472:	6027      	str	r7, [r4, #0]
 8005474:	42a3      	cmp	r3, r4
 8005476:	d111      	bne.n	800549c <_malloc_r+0xbc>
 8005478:	602a      	str	r2, [r5, #0]
 800547a:	6863      	ldr	r3, [r4, #4]
 800547c:	6011      	str	r1, [r2, #0]
 800547e:	6053      	str	r3, [r2, #4]
 8005480:	0030      	movs	r0, r6
 8005482:	0025      	movs	r5, r4
 8005484:	f000 f83c 	bl	8005500 <__malloc_unlock>
 8005488:	2207      	movs	r2, #7
 800548a:	350b      	adds	r5, #11
 800548c:	1d23      	adds	r3, r4, #4
 800548e:	4395      	bics	r5, r2
 8005490:	1aea      	subs	r2, r5, r3
 8005492:	429d      	cmp	r5, r3
 8005494:	d0e5      	beq.n	8005462 <_malloc_r+0x82>
 8005496:	1b5b      	subs	r3, r3, r5
 8005498:	50a3      	str	r3, [r4, r2]
 800549a:	e7e2      	b.n	8005462 <_malloc_r+0x82>
 800549c:	605a      	str	r2, [r3, #4]
 800549e:	e7ec      	b.n	800547a <_malloc_r+0x9a>
 80054a0:	6862      	ldr	r2, [r4, #4]
 80054a2:	42a3      	cmp	r3, r4
 80054a4:	d101      	bne.n	80054aa <_malloc_r+0xca>
 80054a6:	602a      	str	r2, [r5, #0]
 80054a8:	e7ea      	b.n	8005480 <_malloc_r+0xa0>
 80054aa:	605a      	str	r2, [r3, #4]
 80054ac:	e7e8      	b.n	8005480 <_malloc_r+0xa0>
 80054ae:	0023      	movs	r3, r4
 80054b0:	6864      	ldr	r4, [r4, #4]
 80054b2:	e7a7      	b.n	8005404 <_malloc_r+0x24>
 80054b4:	002c      	movs	r4, r5
 80054b6:	686d      	ldr	r5, [r5, #4]
 80054b8:	e7af      	b.n	800541a <_malloc_r+0x3a>
 80054ba:	230c      	movs	r3, #12
 80054bc:	0030      	movs	r0, r6
 80054be:	6033      	str	r3, [r6, #0]
 80054c0:	f000 f81e 	bl	8005500 <__malloc_unlock>
 80054c4:	e7cd      	b.n	8005462 <_malloc_r+0x82>
 80054c6:	46c0      	nop			; (mov r8, r8)
 80054c8:	20000cac 	.word	0x20000cac

080054cc <_sbrk_r>:
 80054cc:	2300      	movs	r3, #0
 80054ce:	b570      	push	{r4, r5, r6, lr}
 80054d0:	4d06      	ldr	r5, [pc, #24]	; (80054ec <_sbrk_r+0x20>)
 80054d2:	0004      	movs	r4, r0
 80054d4:	0008      	movs	r0, r1
 80054d6:	602b      	str	r3, [r5, #0]
 80054d8:	f7fb ff94 	bl	8001404 <_sbrk>
 80054dc:	1c43      	adds	r3, r0, #1
 80054de:	d103      	bne.n	80054e8 <_sbrk_r+0x1c>
 80054e0:	682b      	ldr	r3, [r5, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d000      	beq.n	80054e8 <_sbrk_r+0x1c>
 80054e6:	6023      	str	r3, [r4, #0]
 80054e8:	bd70      	pop	{r4, r5, r6, pc}
 80054ea:	46c0      	nop			; (mov r8, r8)
 80054ec:	20000cb4 	.word	0x20000cb4

080054f0 <__malloc_lock>:
 80054f0:	b510      	push	{r4, lr}
 80054f2:	4802      	ldr	r0, [pc, #8]	; (80054fc <__malloc_lock+0xc>)
 80054f4:	f000 f80c 	bl	8005510 <__retarget_lock_acquire_recursive>
 80054f8:	bd10      	pop	{r4, pc}
 80054fa:	46c0      	nop			; (mov r8, r8)
 80054fc:	20000cb8 	.word	0x20000cb8

08005500 <__malloc_unlock>:
 8005500:	b510      	push	{r4, lr}
 8005502:	4802      	ldr	r0, [pc, #8]	; (800550c <__malloc_unlock+0xc>)
 8005504:	f000 f805 	bl	8005512 <__retarget_lock_release_recursive>
 8005508:	bd10      	pop	{r4, pc}
 800550a:	46c0      	nop			; (mov r8, r8)
 800550c:	20000cb8 	.word	0x20000cb8

08005510 <__retarget_lock_acquire_recursive>:
 8005510:	4770      	bx	lr

08005512 <__retarget_lock_release_recursive>:
 8005512:	4770      	bx	lr

08005514 <_init>:
 8005514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005516:	46c0      	nop			; (mov r8, r8)
 8005518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800551a:	bc08      	pop	{r3}
 800551c:	469e      	mov	lr, r3
 800551e:	4770      	bx	lr

08005520 <_fini>:
 8005520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005522:	46c0      	nop			; (mov r8, r8)
 8005524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005526:	bc08      	pop	{r3}
 8005528:	469e      	mov	lr, r3
 800552a:	4770      	bx	lr
