
Reveil_STM32-Matrice.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006988  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08006b14  08006b14  00016b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b5c  08006b5c  000228e4  2**0
                  CONTENTS
  4 .ARM          00000008  08006b5c  08006b5c  00016b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b64  08006b64  000228e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b64  08006b64  00016b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b68  08006b68  00016b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000028e4  20000000  08006b6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d0c  200028e4  08009450  000228e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200035f0  08009450  000235f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000228e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014f86  00000000  00000000  00022914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000298b  00000000  00000000  0003789a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001228  00000000  00000000  0003a228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00002f2d  00000000  00000000  0003b450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00015c71  00000000  00000000  0003e37d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000d991b  00000000  00000000  00053fee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0012d909  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001108  00000000  00000000  0012d960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004e8c  00000000  00000000  0012ea68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	200028e4 	.word	0x200028e4
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08006afc 	.word	0x08006afc

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	200028e8 	.word	0x200028e8
 80001c8:	08006afc 	.word	0x08006afc

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <sendCanvas>:
}



// Fonction pour mettre à jour l'affichage LED
void sendCanvas(Canvas* canvas) {
 80004d0:	b5b0      	push	{r4, r5, r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
    // Copiez les pixels du canevas vers l'écran LED
    for (uint16_t i = 0; i < canvas->numCols * canvas->numRows -1; i++) {  // -1 car résolution bug affichage photodiode inexistante
 80004d8:	2300      	movs	r3, #0
 80004da:	81fb      	strh	r3, [r7, #14]
 80004dc:	e01f      	b.n	800051e <sendCanvas+0x4e>
        setLEDcolor(i, canvas -> pixels[i].R, canvas -> pixels[i].G, canvas -> pixels[i].B);
 80004de:	89f8      	ldrh	r0, [r7, #14]
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	6899      	ldr	r1, [r3, #8]
 80004e4:	89fa      	ldrh	r2, [r7, #14]
 80004e6:	4613      	mov	r3, r2
 80004e8:	005b      	lsls	r3, r3, #1
 80004ea:	4413      	add	r3, r2
 80004ec:	440b      	add	r3, r1
 80004ee:	781c      	ldrb	r4, [r3, #0]
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	6899      	ldr	r1, [r3, #8]
 80004f4:	89fa      	ldrh	r2, [r7, #14]
 80004f6:	4613      	mov	r3, r2
 80004f8:	005b      	lsls	r3, r3, #1
 80004fa:	4413      	add	r3, r2
 80004fc:	440b      	add	r3, r1
 80004fe:	785d      	ldrb	r5, [r3, #1]
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	6899      	ldr	r1, [r3, #8]
 8000504:	89fa      	ldrh	r2, [r7, #14]
 8000506:	4613      	mov	r3, r2
 8000508:	005b      	lsls	r3, r3, #1
 800050a:	4413      	add	r3, r2
 800050c:	440b      	add	r3, r1
 800050e:	789b      	ldrb	r3, [r3, #2]
 8000510:	462a      	mov	r2, r5
 8000512:	4621      	mov	r1, r4
 8000514:	f000 fa16 	bl	8000944 <setLEDcolor>
    for (uint16_t i = 0; i < canvas->numCols * canvas->numRows -1; i++) {  // -1 car résolution bug affichage photodiode inexistante
 8000518:	89fb      	ldrh	r3, [r7, #14]
 800051a:	3301      	adds	r3, #1
 800051c:	81fb      	strh	r3, [r7, #14]
 800051e:	89fa      	ldrh	r2, [r7, #14]
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	6879      	ldr	r1, [r7, #4]
 8000526:	6849      	ldr	r1, [r1, #4]
 8000528:	fb01 f303 	mul.w	r3, r1, r3
 800052c:	3b01      	subs	r3, #1
 800052e:	429a      	cmp	r2, r3
 8000530:	dbd5      	blt.n	80004de <sendCanvas+0xe>
    }
}
 8000532:	bf00      	nop
 8000534:	bf00      	nop
 8000536:	3710      	adds	r7, #16
 8000538:	46bd      	mov	sp, r7
 800053a:	bdb0      	pop	{r4, r5, r7, pc}

0800053c <getPixel>:

Pixel* getPixel(Canvas* canvas, int x, int y) {
 800053c:	b480      	push	{r7}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0
 8000542:	60f8      	str	r0, [r7, #12]
 8000544:	60b9      	str	r1, [r7, #8]
 8000546:	607a      	str	r2, [r7, #4]
    if (x > 0 && x <= canvas->numCols && y > 0 && y <= canvas->numRows) {
 8000548:	68bb      	ldr	r3, [r7, #8]
 800054a:	2b00      	cmp	r3, #0
 800054c:	dd1d      	ble.n	800058a <getPixel+0x4e>
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	68ba      	ldr	r2, [r7, #8]
 8000554:	429a      	cmp	r2, r3
 8000556:	dc18      	bgt.n	800058a <getPixel+0x4e>
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	2b00      	cmp	r3, #0
 800055c:	dd15      	ble.n	800058a <getPixel+0x4e>
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	685b      	ldr	r3, [r3, #4]
 8000562:	687a      	ldr	r2, [r7, #4]
 8000564:	429a      	cmp	r2, r3
 8000566:	dc10      	bgt.n	800058a <getPixel+0x4e>
        return &canvas->pixels[(x-1)*canvas->numRows+(y-1)];
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	689a      	ldr	r2, [r3, #8]
 800056c:	68bb      	ldr	r3, [r7, #8]
 800056e:	3b01      	subs	r3, #1
 8000570:	68f9      	ldr	r1, [r7, #12]
 8000572:	6849      	ldr	r1, [r1, #4]
 8000574:	fb03 f101 	mul.w	r1, r3, r1
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	3b01      	subs	r3, #1
 800057c:	440b      	add	r3, r1
 800057e:	4619      	mov	r1, r3
 8000580:	460b      	mov	r3, r1
 8000582:	005b      	lsls	r3, r3, #1
 8000584:	440b      	add	r3, r1
 8000586:	4413      	add	r3, r2
 8000588:	e000      	b.n	800058c <getPixel+0x50>
    } else {
        return NULL; // Coordonnées hors limites
 800058a:	2300      	movs	r3, #0
    }
}
 800058c:	4618      	mov	r0, r3
 800058e:	3714      	adds	r7, #20
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr

08000598 <drawImage>:
            }
            mask >>= 1;
        }
}

void drawImage(ImageData* imageData, int frame, int x, int y, Canvas* canvas) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b08a      	sub	sp, #40	; 0x28
 800059c:	af00      	add	r7, sp, #0
 800059e:	60f8      	str	r0, [r7, #12]
 80005a0:	60b9      	str	r1, [r7, #8]
 80005a2:	607a      	str	r2, [r7, #4]
 80005a4:	603b      	str	r3, [r7, #0]

//*****************	DECODAGE INDEXED 2BIT	*****************************/


    if (imageData == NULL || canvas == NULL) {
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	f000 80c8 	beq.w	800073e <drawImage+0x1a6>
 80005ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	f000 80c4 	beq.w	800073e <drawImage+0x1a6>
        // Gérez les cas d'erreur ou de paramètres non valides, si nécessaire
        return;
    }
/*********  modif EFV pour alpha toujours MAX  ****************/
    for (int imgY = 0; imgY < imageData->height; imgY++) {
 80005b6:	2300      	movs	r3, #0
 80005b8:	627b      	str	r3, [r7, #36]	; 0x24
 80005ba:	e0b8      	b.n	800072e <drawImage+0x196>
        for (int imgX = 0; imgX < imageData->width; imgX++) {
 80005bc:	2300      	movs	r3, #0
 80005be:	623b      	str	r3, [r7, #32]
 80005c0:	e0ab      	b.n	800071a <drawImage+0x182>
        	//									sel ligne	        + sel col * decal RGB + decal image
            uint8_t* pixel = &imageData->data[(imgY * imageData->width + imgX) * 4      + imageData->height*imageData->width*4*(frame)];  // BGR format
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	689b      	ldr	r3, [r3, #8]
 80005c6:	68fa      	ldr	r2, [r7, #12]
 80005c8:	8812      	ldrh	r2, [r2, #0]
 80005ca:	4611      	mov	r1, r2
 80005cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005ce:	fb02 f101 	mul.w	r1, r2, r1
 80005d2:	6a3a      	ldr	r2, [r7, #32]
 80005d4:	4411      	add	r1, r2
 80005d6:	68fa      	ldr	r2, [r7, #12]
 80005d8:	8892      	ldrh	r2, [r2, #4]
 80005da:	4610      	mov	r0, r2
 80005dc:	68fa      	ldr	r2, [r7, #12]
 80005de:	8812      	ldrh	r2, [r2, #0]
 80005e0:	fb00 f202 	mul.w	r2, r0, r2
 80005e4:	68b8      	ldr	r0, [r7, #8]
 80005e6:	fb00 f202 	mul.w	r2, r0, r2
 80005ea:	440a      	add	r2, r1
 80005ec:	0092      	lsls	r2, r2, #2
 80005ee:	4413      	add	r3, r2
 80005f0:	61fb      	str	r3, [r7, #28]
            // Ignore les pixels totalement transparents (canal alpha à zéro)
            if (pixel[3] == 0x00) {
                continue;
            }
*/
            int canvasX = x + imgX;  // Coordonnée X sur le canevas
 80005f2:	687a      	ldr	r2, [r7, #4]
 80005f4:	6a3b      	ldr	r3, [r7, #32]
 80005f6:	4413      	add	r3, r2
 80005f8:	61bb      	str	r3, [r7, #24]
            int canvasY = y + (imageData->height - 1) - imgY;  // Coordonnée Y sur le canevas
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	889b      	ldrh	r3, [r3, #4]
 80005fe:	1e5a      	subs	r2, r3, #1
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	441a      	add	r2, r3
 8000604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000606:	1ad3      	subs	r3, r2, r3
 8000608:	617b      	str	r3, [r7, #20]

            // Assurez-vous que les coordonnées se trouvent dans les limites du canevas
            if (canvasX > 0 && canvasX <= canvas->numCols && canvasY > 0 && canvasY <= canvas->numRows) {
 800060a:	69bb      	ldr	r3, [r7, #24]
 800060c:	2b00      	cmp	r3, #0
 800060e:	f340 8081 	ble.w	8000714 <drawImage+0x17c>
 8000612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	69ba      	ldr	r2, [r7, #24]
 8000618:	429a      	cmp	r2, r3
 800061a:	dc7b      	bgt.n	8000714 <drawImage+0x17c>
 800061c:	697b      	ldr	r3, [r7, #20]
 800061e:	2b00      	cmp	r3, #0
 8000620:	dd78      	ble.n	8000714 <drawImage+0x17c>
 8000622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000624:	685b      	ldr	r3, [r3, #4]
 8000626:	697a      	ldr	r2, [r7, #20]
 8000628:	429a      	cmp	r2, r3
 800062a:	dc73      	bgt.n	8000714 <drawImage+0x17c>
                // Obtenez le pixel actuel du canevas en utilisant la fonction getPixel
                Pixel* canvasPixel = getPixel(canvas, canvasX, canvasY);
 800062c:	697a      	ldr	r2, [r7, #20]
 800062e:	69b9      	ldr	r1, [r7, #24]
 8000630:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000632:	f7ff ff83 	bl	800053c <getPixel>
 8000636:	6138      	str	r0, [r7, #16]


                // Appliquez la couleur de l'image avec la transparence sur le pixel du canevas
                // Assurez-vous d'ajuster les canaux alpha en conséquence
                canvasPixel->R = (pixel[2] * pixel[3] + canvasPixel->R * (255 - pixel[3])) / 255;
 8000638:	69fb      	ldr	r3, [r7, #28]
 800063a:	3302      	adds	r3, #2
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	461a      	mov	r2, r3
 8000640:	69fb      	ldr	r3, [r7, #28]
 8000642:	3303      	adds	r3, #3
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	fb03 f202 	mul.w	r2, r3, r2
 800064a:	693b      	ldr	r3, [r7, #16]
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	4619      	mov	r1, r3
 8000650:	69fb      	ldr	r3, [r7, #28]
 8000652:	3303      	adds	r3, #3
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800065a:	fb01 f303 	mul.w	r3, r1, r3
 800065e:	4413      	add	r3, r2
 8000660:	4a39      	ldr	r2, [pc, #228]	; (8000748 <drawImage+0x1b0>)
 8000662:	fb82 1203 	smull	r1, r2, r2, r3
 8000666:	441a      	add	r2, r3
 8000668:	11d2      	asrs	r2, r2, #7
 800066a:	17db      	asrs	r3, r3, #31
 800066c:	1ad3      	subs	r3, r2, r3
 800066e:	b2da      	uxtb	r2, r3
 8000670:	693b      	ldr	r3, [r7, #16]
 8000672:	701a      	strb	r2, [r3, #0]
				canvasPixel->G = (pixel[1] * pixel[3] + canvasPixel->G * (255 - pixel[3])) / 255;
 8000674:	69fb      	ldr	r3, [r7, #28]
 8000676:	3301      	adds	r3, #1
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	461a      	mov	r2, r3
 800067c:	69fb      	ldr	r3, [r7, #28]
 800067e:	3303      	adds	r3, #3
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	fb03 f202 	mul.w	r2, r3, r2
 8000686:	693b      	ldr	r3, [r7, #16]
 8000688:	785b      	ldrb	r3, [r3, #1]
 800068a:	4619      	mov	r1, r3
 800068c:	69fb      	ldr	r3, [r7, #28]
 800068e:	3303      	adds	r3, #3
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8000696:	fb01 f303 	mul.w	r3, r1, r3
 800069a:	4413      	add	r3, r2
 800069c:	4a2a      	ldr	r2, [pc, #168]	; (8000748 <drawImage+0x1b0>)
 800069e:	fb82 1203 	smull	r1, r2, r2, r3
 80006a2:	441a      	add	r2, r3
 80006a4:	11d2      	asrs	r2, r2, #7
 80006a6:	17db      	asrs	r3, r3, #31
 80006a8:	1ad3      	subs	r3, r2, r3
 80006aa:	b2da      	uxtb	r2, r3
 80006ac:	693b      	ldr	r3, [r7, #16]
 80006ae:	705a      	strb	r2, [r3, #1]
				canvasPixel->B = (pixel[0] * pixel[3] + canvasPixel->B * (255 - pixel[3])) / 255;
 80006b0:	69fb      	ldr	r3, [r7, #28]
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	461a      	mov	r2, r3
 80006b6:	69fb      	ldr	r3, [r7, #28]
 80006b8:	3303      	adds	r3, #3
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	fb03 f202 	mul.w	r2, r3, r2
 80006c0:	693b      	ldr	r3, [r7, #16]
 80006c2:	789b      	ldrb	r3, [r3, #2]
 80006c4:	4619      	mov	r1, r3
 80006c6:	69fb      	ldr	r3, [r7, #28]
 80006c8:	3303      	adds	r3, #3
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80006d0:	fb01 f303 	mul.w	r3, r1, r3
 80006d4:	4413      	add	r3, r2
 80006d6:	4a1c      	ldr	r2, [pc, #112]	; (8000748 <drawImage+0x1b0>)
 80006d8:	fb82 1203 	smull	r1, r2, r2, r3
 80006dc:	441a      	add	r2, r3
 80006de:	11d2      	asrs	r2, r2, #7
 80006e0:	17db      	asrs	r3, r3, #31
 80006e2:	1ad3      	subs	r3, r2, r3
 80006e4:	b2da      	uxtb	r2, r3
 80006e6:	693b      	ldr	r3, [r7, #16]
 80006e8:	709a      	strb	r2, [r3, #2]
/*				canvasPixel->R = pixel[2];
				canvasPixel->G = pixel[1];
				canvasPixel->B = pixel[0];*/

                // Appliquer le masque pour forcer les valeurs à être paires
                canvasPixel->R &= 0xFE; // Le masque 0xFE force le dernier bit à 0.
 80006ea:	693b      	ldr	r3, [r7, #16]
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	f023 0301 	bic.w	r3, r3, #1
 80006f2:	b2da      	uxtb	r2, r3
 80006f4:	693b      	ldr	r3, [r7, #16]
 80006f6:	701a      	strb	r2, [r3, #0]
                canvasPixel->G &= 0xFE;
 80006f8:	693b      	ldr	r3, [r7, #16]
 80006fa:	785b      	ldrb	r3, [r3, #1]
 80006fc:	f023 0301 	bic.w	r3, r3, #1
 8000700:	b2da      	uxtb	r2, r3
 8000702:	693b      	ldr	r3, [r7, #16]
 8000704:	705a      	strb	r2, [r3, #1]
                canvasPixel->B &= 0xFE;
 8000706:	693b      	ldr	r3, [r7, #16]
 8000708:	789b      	ldrb	r3, [r3, #2]
 800070a:	f023 0301 	bic.w	r3, r3, #1
 800070e:	b2da      	uxtb	r2, r3
 8000710:	693b      	ldr	r3, [r7, #16]
 8000712:	709a      	strb	r2, [r3, #2]
        for (int imgX = 0; imgX < imageData->width; imgX++) {
 8000714:	6a3b      	ldr	r3, [r7, #32]
 8000716:	3301      	adds	r3, #1
 8000718:	623b      	str	r3, [r7, #32]
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	881b      	ldrh	r3, [r3, #0]
 800071e:	461a      	mov	r2, r3
 8000720:	6a3b      	ldr	r3, [r7, #32]
 8000722:	4293      	cmp	r3, r2
 8000724:	f6ff af4d 	blt.w	80005c2 <drawImage+0x2a>
    for (int imgY = 0; imgY < imageData->height; imgY++) {
 8000728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800072a:	3301      	adds	r3, #1
 800072c:	627b      	str	r3, [r7, #36]	; 0x24
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	889b      	ldrh	r3, [r3, #4]
 8000732:	461a      	mov	r2, r3
 8000734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000736:	4293      	cmp	r3, r2
 8000738:	f6ff af40 	blt.w	80005bc <drawImage+0x24>
 800073c:	e000      	b.n	8000740 <drawImage+0x1a8>
        return;
 800073e:	bf00      	nop

            }
        }
    }
}
 8000740:	3728      	adds	r7, #40	; 0x28
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	80808081 	.word	0x80808081

0800074c <drawIndexedImage>:


// Modified drawImage function to use indexed values
void drawIndexedImage(IndexedImageData* indexedImage, int frame, int x, int y, Canvas* canvas) {
 800074c:	b580      	push	{r7, lr}
 800074e:	b08a      	sub	sp, #40	; 0x28
 8000750:	af02      	add	r7, sp, #8
 8000752:	60f8      	str	r0, [r7, #12]
 8000754:	60b9      	str	r1, [r7, #8]
 8000756:	607a      	str	r2, [r7, #4]
 8000758:	603b      	str	r3, [r7, #0]
    if (indexedImage == NULL || canvas == NULL) {
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d017      	beq.n	8000790 <drawIndexedImage+0x44>
 8000760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000762:	2b00      	cmp	r3, #0
 8000764:	d014      	beq.n	8000790 <drawIndexedImage+0x44>
        // Gérez les cas d'erreur ou de paramètres non valides, si nécessaire
        return;
    }

    ImageData rgbaImage;
    convertIndexedToRGBA(indexedImage, frame, &rgbaImage);
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	461a      	mov	r2, r3
 800076c:	68b9      	ldr	r1, [r7, #8]
 800076e:	68f8      	ldr	r0, [r7, #12]
 8000770:	f000 f812 	bl	8000798 <convertIndexedToRGBA>

    drawImage(&rgbaImage, 0, x, y, canvas);
 8000774:	f107 0014 	add.w	r0, r7, #20
 8000778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800077a:	9300      	str	r3, [sp, #0]
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	687a      	ldr	r2, [r7, #4]
 8000780:	2100      	movs	r1, #0
 8000782:	f7ff ff09 	bl	8000598 <drawImage>

    free(rgbaImage.data);
 8000786:	69fb      	ldr	r3, [r7, #28]
 8000788:	4618      	mov	r0, r3
 800078a:	f006 f8a9 	bl	80068e0 <free>
 800078e:	e000      	b.n	8000792 <drawIndexedImage+0x46>
        return;
 8000790:	bf00      	nop
}
 8000792:	3720      	adds	r7, #32
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <convertIndexedToRGBA>:


//Rajout par EFV
void convertIndexedToRGBA(IndexedImageData* indexedImage, int frame, ImageData* rgbaImage) {
 8000798:	b580      	push	{r7, lr}
 800079a:	b08a      	sub	sp, #40	; 0x28
 800079c:	af00      	add	r7, sp, #0
 800079e:	60f8      	str	r0, [r7, #12]
 80007a0:	60b9      	str	r1, [r7, #8]
 80007a2:	607a      	str	r2, [r7, #4]
    rgbaImage->width = indexedImage->width;
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	885a      	ldrh	r2, [r3, #2]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	801a      	strh	r2, [r3, #0]
    rgbaImage->height = indexedImage->height;
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	88da      	ldrh	r2, [r3, #6]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	809a      	strh	r2, [r3, #4]
    rgbaImage->data = (uint8_t*)malloc(indexedImage->width * indexedImage->height * 4);
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	885b      	ldrh	r3, [r3, #2]
 80007b8:	461a      	mov	r2, r3
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	88db      	ldrh	r3, [r3, #6]
 80007be:	fb02 f303 	mul.w	r3, r2, r3
 80007c2:	009b      	lsls	r3, r3, #2
 80007c4:	4618      	mov	r0, r3
 80007c6:	f006 f883 	bl	80068d0 <malloc>
 80007ca:	4603      	mov	r3, r0
 80007cc:	461a      	mov	r2, r3
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	609a      	str	r2, [r3, #8]

    for (int j = 0; j < 5; j++){
 80007d2:	2300      	movs	r3, #0
 80007d4:	627b      	str	r3, [r7, #36]	; 0x24
 80007d6:	e093      	b.n	8000900 <convertIndexedToRGBA+0x168>
    		for (int i = 0; i < 19; i++) {
 80007d8:	2300      	movs	r3, #0
 80007da:	623b      	str	r3, [r7, #32]
 80007dc:	e089      	b.n	80008f2 <convertIndexedToRGBA+0x15a>
    			uint16_t VertProg = indexedImage->LineLen * j;			//vertical progress of frame    24bits in 3 uint8
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	785b      	ldrb	r3, [r3, #1]
 80007e2:	b29a      	uxth	r2, r3
 80007e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e6:	b29b      	uxth	r3, r3
 80007e8:	fb12 f303 	smulbb	r3, r2, r3
 80007ec:	83fb      	strh	r3, [r7, #30]
    			uint16_t DecalFrame = indexedImage->LineLen * indexedImage->height * frame;		// offset for frame selection
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	785b      	ldrb	r3, [r3, #1]
 80007f2:	b29a      	uxth	r2, r3
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	88db      	ldrh	r3, [r3, #6]
 80007f8:	fb12 f303 	smulbb	r3, r2, r3
 80007fc:	b29a      	uxth	r2, r3
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	b29b      	uxth	r3, r3
 8000802:	fb12 f303 	smulbb	r3, r2, r3
 8000806:	83bb      	strh	r3, [r7, #28]
    			uint8_t HoriProg = i;			// Horizontal progress
 8000808:	6a3b      	ldr	r3, [r7, #32]
 800080a:	76fb      	strb	r3, [r7, #27]
    			uint8_t DecalDeBit = 0;
 800080c:	2300      	movs	r3, #0
 800080e:	76bb      	strb	r3, [r7, #26]

    			case 0xff :		//
    				DecalDeBit = 0;
    				HoriProg = i;			// Horizontal progress
    			}*/
    			uint8_t index = (indexedImage->data[HoriProg + DecalFrame+VertProg] >> DecalDeBit) & indexedImage->BitMask;
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	68db      	ldr	r3, [r3, #12]
 8000814:	7ef9      	ldrb	r1, [r7, #27]
 8000816:	8bba      	ldrh	r2, [r7, #28]
 8000818:	4411      	add	r1, r2
 800081a:	8bfa      	ldrh	r2, [r7, #30]
 800081c:	440a      	add	r2, r1
 800081e:	4413      	add	r3, r2
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	461a      	mov	r2, r3
 8000824:	7ebb      	ldrb	r3, [r7, #26]
 8000826:	fa42 f303 	asr.w	r3, r2, r3
 800082a:	b25a      	sxtb	r2, r3
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	b25b      	sxtb	r3, r3
 8000832:	4013      	ands	r3, r2
 8000834:	b25b      	sxtb	r3, r3
 8000836:	767b      	strb	r3, [r7, #25]
    			uint8_t Red = indexedImage->ColorPalette[index*4];
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	689b      	ldr	r3, [r3, #8]
 800083c:	7e7a      	ldrb	r2, [r7, #25]
 800083e:	0092      	lsls	r2, r2, #2
 8000840:	4413      	add	r3, r2
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	763b      	strb	r3, [r7, #24]
    			uint8_t Green = indexedImage->ColorPalette[index*4 +1];
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	689a      	ldr	r2, [r3, #8]
 800084a:	7e7b      	ldrb	r3, [r7, #25]
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	3301      	adds	r3, #1
 8000850:	4413      	add	r3, r2
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	75fb      	strb	r3, [r7, #23]
    			uint8_t Blue = indexedImage->ColorPalette[index*4 +2];
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	689a      	ldr	r2, [r3, #8]
 800085a:	7e7b      	ldrb	r3, [r7, #25]
 800085c:	009b      	lsls	r3, r3, #2
 800085e:	3302      	adds	r3, #2
 8000860:	4413      	add	r3, r2
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	75bb      	strb	r3, [r7, #22]
    			uint8_t Alpha = indexedImage->ColorPalette[index*4 +3];
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	689a      	ldr	r2, [r3, #8]
 800086a:	7e7b      	ldrb	r3, [r7, #25]
 800086c:	009b      	lsls	r3, r3, #2
 800086e:	3303      	adds	r3, #3
 8000870:	4413      	add	r3, r2
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	757b      	strb	r3, [r7, #21]
    			rgbaImage->data[(i+19*j) * 4] = Red;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	6899      	ldr	r1, [r3, #8]
 800087a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800087c:	4613      	mov	r3, r2
 800087e:	00db      	lsls	r3, r3, #3
 8000880:	4413      	add	r3, r2
 8000882:	005b      	lsls	r3, r3, #1
 8000884:	441a      	add	r2, r3
 8000886:	6a3b      	ldr	r3, [r7, #32]
 8000888:	4413      	add	r3, r2
 800088a:	009b      	lsls	r3, r3, #2
 800088c:	440b      	add	r3, r1
 800088e:	7e3a      	ldrb	r2, [r7, #24]
 8000890:	701a      	strb	r2, [r3, #0]
    			rgbaImage->data[(i+19*j) * 4 + 1] = Green;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	6899      	ldr	r1, [r3, #8]
 8000896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000898:	4613      	mov	r3, r2
 800089a:	00db      	lsls	r3, r3, #3
 800089c:	4413      	add	r3, r2
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	441a      	add	r2, r3
 80008a2:	6a3b      	ldr	r3, [r7, #32]
 80008a4:	4413      	add	r3, r2
 80008a6:	009b      	lsls	r3, r3, #2
 80008a8:	3301      	adds	r3, #1
 80008aa:	440b      	add	r3, r1
 80008ac:	7dfa      	ldrb	r2, [r7, #23]
 80008ae:	701a      	strb	r2, [r3, #0]
    			rgbaImage->data[(i+19*j) * 4 + 2] = Blue;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	6899      	ldr	r1, [r3, #8]
 80008b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008b6:	4613      	mov	r3, r2
 80008b8:	00db      	lsls	r3, r3, #3
 80008ba:	4413      	add	r3, r2
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	441a      	add	r2, r3
 80008c0:	6a3b      	ldr	r3, [r7, #32]
 80008c2:	4413      	add	r3, r2
 80008c4:	009b      	lsls	r3, r3, #2
 80008c6:	3302      	adds	r3, #2
 80008c8:	440b      	add	r3, r1
 80008ca:	7dba      	ldrb	r2, [r7, #22]
 80008cc:	701a      	strb	r2, [r3, #0]
    			rgbaImage->data[(i+19*j) * 4 + 3] = Alpha;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	6899      	ldr	r1, [r3, #8]
 80008d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008d4:	4613      	mov	r3, r2
 80008d6:	00db      	lsls	r3, r3, #3
 80008d8:	4413      	add	r3, r2
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	441a      	add	r2, r3
 80008de:	6a3b      	ldr	r3, [r7, #32]
 80008e0:	4413      	add	r3, r2
 80008e2:	009b      	lsls	r3, r3, #2
 80008e4:	3303      	adds	r3, #3
 80008e6:	440b      	add	r3, r1
 80008e8:	7d7a      	ldrb	r2, [r7, #21]
 80008ea:	701a      	strb	r2, [r3, #0]
    		for (int i = 0; i < 19; i++) {
 80008ec:	6a3b      	ldr	r3, [r7, #32]
 80008ee:	3301      	adds	r3, #1
 80008f0:	623b      	str	r3, [r7, #32]
 80008f2:	6a3b      	ldr	r3, [r7, #32]
 80008f4:	2b12      	cmp	r3, #18
 80008f6:	f77f af72 	ble.w	80007de <convertIndexedToRGBA+0x46>
    for (int j = 0; j < 5; j++){
 80008fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008fc:	3301      	adds	r3, #1
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
 8000900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000902:	2b04      	cmp	r3, #4
 8000904:	f77f af68 	ble.w	80007d8 <convertIndexedToRGBA+0x40>
    		}
    }
}
 8000908:	bf00      	nop
 800090a:	bf00      	nop
 800090c:	3728      	adds	r7, #40	; 0x28
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
	...

08000914 <ws2812_start>:
/* Variables -----------------------------------------------*/
static uint8_t LEDbuffer[LED_BUFFER_SIZE];
extern TIM_HandleTypeDef htim2;

/* Functions -----------------------------------------------*/
void ws2812_start(void) {
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
	fillBufferBlack();
 8000918:	f000 f89e 	bl	8000a58 <fillBufferBlack>
	htim2.Init.Period = TIMER_PERIOD - 1;
 800091c:	4b07      	ldr	r3, [pc, #28]	; (800093c <ws2812_start+0x28>)
 800091e:	2209      	movs	r2, #9
 8000920:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Init(&htim2);
 8000922:	4806      	ldr	r0, [pc, #24]	; (800093c <ws2812_start+0x28>)
 8000924:	f003 fbd6 	bl	80040d4 <HAL_TIM_Base_Init>
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *) LEDbuffer,
 8000928:	f640 2361 	movw	r3, #2657	; 0xa61
 800092c:	4a04      	ldr	r2, [pc, #16]	; (8000940 <ws2812_start+0x2c>)
 800092e:	2100      	movs	r1, #0
 8000930:	4802      	ldr	r0, [pc, #8]	; (800093c <ws2812_start+0x28>)
 8000932:	f003 fc87 	bl	8004244 <HAL_TIM_PWM_Start_DMA>
				LED_BUFFER_SIZE);
	//HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20003410 	.word	0x20003410
 8000940:	20002900 	.word	0x20002900

08000944 <setLEDcolor>:
void ws2812_update(void) {
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *) LEDbuffer,
			LED_BUFFER_SIZE);
}

void setLEDcolor(uint32_t LEDnumber, uint8_t RED, uint8_t GREEN, uint8_t BLUE) {
 8000944:	b480      	push	{r7}
 8000946:	b08b      	sub	sp, #44	; 0x2c
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	4608      	mov	r0, r1
 800094e:	4611      	mov	r1, r2
 8000950:	461a      	mov	r2, r3
 8000952:	4603      	mov	r3, r0
 8000954:	70fb      	strb	r3, [r7, #3]
 8000956:	460b      	mov	r3, r1
 8000958:	70bb      	strb	r3, [r7, #2]
 800095a:	4613      	mov	r3, r2
 800095c:	707b      	strb	r3, [r7, #1]
	uint8_t tempBuffer[24];
	uint32_t i;
	uint32_t LEDindex;
	LEDindex = LEDnumber % LED_NUMBER;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4a3b      	ldr	r2, [pc, #236]	; (8000a50 <setLEDcolor+0x10c>)
 8000962:	fba2 1203 	umull	r1, r2, r2, r3
 8000966:	0992      	lsrs	r2, r2, #6
 8000968:	215e      	movs	r1, #94	; 0x5e
 800096a:	fb01 f202 	mul.w	r2, r1, r2
 800096e:	1a9b      	subs	r3, r3, r2
 8000970:	623b      	str	r3, [r7, #32]

	for (i = 0; i < 8; i++) // GREEN data
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
 8000976:	e013      	b.n	80009a0 <setLEDcolor+0x5c>
		tempBuffer[i] = ((GREEN << i) & 0x80) ? WS2812_1 : WS2812_0;
 8000978:	78ba      	ldrb	r2, [r7, #2]
 800097a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800097c:	fa02 f303 	lsl.w	r3, r2, r3
 8000980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <setLEDcolor+0x48>
 8000988:	2106      	movs	r1, #6
 800098a:	e000      	b.n	800098e <setLEDcolor+0x4a>
 800098c:	2103      	movs	r1, #3
 800098e:	f107 0208 	add.w	r2, r7, #8
 8000992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000994:	4413      	add	r3, r2
 8000996:	460a      	mov	r2, r1
 8000998:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) // GREEN data
 800099a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099c:	3301      	adds	r3, #1
 800099e:	627b      	str	r3, [r7, #36]	; 0x24
 80009a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a2:	2b07      	cmp	r3, #7
 80009a4:	d9e8      	bls.n	8000978 <setLEDcolor+0x34>
	for (i = 0; i < 8; i++) // RED
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
 80009aa:	e013      	b.n	80009d4 <setLEDcolor+0x90>
		tempBuffer[8 + i] = ((RED << i) & 0x80) ? WS2812_1 : WS2812_0;
 80009ac:	78fa      	ldrb	r2, [r7, #3]
 80009ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b0:	fa02 f303 	lsl.w	r3, r2, r3
 80009b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <setLEDcolor+0x7c>
 80009bc:	2206      	movs	r2, #6
 80009be:	e000      	b.n	80009c2 <setLEDcolor+0x7e>
 80009c0:	2203      	movs	r2, #3
 80009c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c4:	3308      	adds	r3, #8
 80009c6:	3328      	adds	r3, #40	; 0x28
 80009c8:	443b      	add	r3, r7
 80009ca:	f803 2c20 	strb.w	r2, [r3, #-32]
	for (i = 0; i < 8; i++) // RED
 80009ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d0:	3301      	adds	r3, #1
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
 80009d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d6:	2b07      	cmp	r3, #7
 80009d8:	d9e8      	bls.n	80009ac <setLEDcolor+0x68>
	for (i = 0; i < 8; i++) // BLUE
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
 80009de:	e013      	b.n	8000a08 <setLEDcolor+0xc4>
		tempBuffer[16 + i] = ((BLUE << i) & 0x80) ? WS2812_1 : WS2812_0;
 80009e0:	787a      	ldrb	r2, [r7, #1]
 80009e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e4:	fa02 f303 	lsl.w	r3, r2, r3
 80009e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <setLEDcolor+0xb0>
 80009f0:	2206      	movs	r2, #6
 80009f2:	e000      	b.n	80009f6 <setLEDcolor+0xb2>
 80009f4:	2203      	movs	r2, #3
 80009f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f8:	3310      	adds	r3, #16
 80009fa:	3328      	adds	r3, #40	; 0x28
 80009fc:	443b      	add	r3, r7
 80009fe:	f803 2c20 	strb.w	r2, [r3, #-32]
	for (i = 0; i < 8; i++) // BLUE
 8000a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a04:	3301      	adds	r3, #1
 8000a06:	627b      	str	r3, [r7, #36]	; 0x24
 8000a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a0a:	2b07      	cmp	r3, #7
 8000a0c:	d9e8      	bls.n	80009e0 <setLEDcolor+0x9c>

	for (i = 0; i < 24; i++)
 8000a0e:	2300      	movs	r3, #0
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
 8000a12:	e012      	b.n	8000a3a <setLEDcolor+0xf6>
		LEDbuffer[RESET_SLOTS_BEGIN + LEDindex * 24 + i] = tempBuffer[i];
 8000a14:	6a3a      	ldr	r2, [r7, #32]
 8000a16:	4613      	mov	r3, r2
 8000a18:	005b      	lsls	r3, r3, #1
 8000a1a:	4413      	add	r3, r2
 8000a1c:	00db      	lsls	r3, r3, #3
 8000a1e:	461a      	mov	r2, r3
 8000a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a22:	4413      	add	r3, r2
 8000a24:	33c8      	adds	r3, #200	; 0xc8
 8000a26:	f107 0108 	add.w	r1, r7, #8
 8000a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a2c:	440a      	add	r2, r1
 8000a2e:	7811      	ldrb	r1, [r2, #0]
 8000a30:	4a08      	ldr	r2, [pc, #32]	; (8000a54 <setLEDcolor+0x110>)
 8000a32:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < 24; i++)
 8000a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a36:	3301      	adds	r3, #1
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
 8000a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a3c:	2b17      	cmp	r3, #23
 8000a3e:	d9e9      	bls.n	8000a14 <setLEDcolor+0xd0>
}
 8000a40:	bf00      	nop
 8000a42:	bf00      	nop
 8000a44:	372c      	adds	r7, #44	; 0x2c
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	ae4c415d 	.word	0xae4c415d
 8000a54:	20002900 	.word	0x20002900

08000a58 <fillBufferBlack>:

	for (index = 0; index < LED_NUMBER; index++)
		setLEDcolor(index, RED, GREEN, BLUE);
}

void fillBufferBlack(void) {
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
	/*Fill LED buffer - ALL OFF*/
	uint32_t index, buffIndex;
	buffIndex = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	603b      	str	r3, [r7, #0]

	for (index = 0; index < RESET_SLOTS_BEGIN; index++) {
 8000a62:	2300      	movs	r3, #0
 8000a64:	607b      	str	r3, [r7, #4]
 8000a66:	e00a      	b.n	8000a7e <fillBufferBlack+0x26>
		LEDbuffer[buffIndex] = WS2812_RESET;
 8000a68:	4a1f      	ldr	r2, [pc, #124]	; (8000ae8 <fillBufferBlack+0x90>)
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	2200      	movs	r2, #0
 8000a70:	701a      	strb	r2, [r3, #0]
		buffIndex++;
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	3301      	adds	r3, #1
 8000a76:	603b      	str	r3, [r7, #0]
	for (index = 0; index < RESET_SLOTS_BEGIN; index++) {
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	607b      	str	r3, [r7, #4]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2bc7      	cmp	r3, #199	; 0xc7
 8000a82:	d9f1      	bls.n	8000a68 <fillBufferBlack+0x10>
	}
	for (index = 0; index < LED_DATA_SIZE; index++) {
 8000a84:	2300      	movs	r3, #0
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	e00a      	b.n	8000aa0 <fillBufferBlack+0x48>
		LEDbuffer[buffIndex] = WS2812_0;
 8000a8a:	4a17      	ldr	r2, [pc, #92]	; (8000ae8 <fillBufferBlack+0x90>)
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	4413      	add	r3, r2
 8000a90:	2203      	movs	r2, #3
 8000a92:	701a      	strb	r2, [r3, #0]
		buffIndex++;
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	3301      	adds	r3, #1
 8000a98:	603b      	str	r3, [r7, #0]
	for (index = 0; index < LED_DATA_SIZE; index++) {
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f5b3 6f0d 	cmp.w	r3, #2256	; 0x8d0
 8000aa6:	d3f0      	bcc.n	8000a8a <fillBufferBlack+0x32>
	}
	LEDbuffer[buffIndex] = WS2812_0;
 8000aa8:	4a0f      	ldr	r2, [pc, #60]	; (8000ae8 <fillBufferBlack+0x90>)
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	4413      	add	r3, r2
 8000aae:	2203      	movs	r2, #3
 8000ab0:	701a      	strb	r2, [r3, #0]
	buffIndex++;
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	603b      	str	r3, [r7, #0]
	for (index = 0; index < RESET_SLOTS_END; index++) {
 8000ab8:	2300      	movs	r3, #0
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	e00a      	b.n	8000ad4 <fillBufferBlack+0x7c>
		LEDbuffer[buffIndex] = 0;
 8000abe:	4a0a      	ldr	r2, [pc, #40]	; (8000ae8 <fillBufferBlack+0x90>)
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	701a      	strb	r2, [r3, #0]
		buffIndex++;
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	3301      	adds	r3, #1
 8000acc:	603b      	str	r3, [r7, #0]
	for (index = 0; index < RESET_SLOTS_END; index++) {
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2bc7      	cmp	r3, #199	; 0xc7
 8000ad8:	d9f1      	bls.n	8000abe <fillBufferBlack+0x66>
	}
}
 8000ada:	bf00      	nop
 8000adc:	bf00      	nop
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	20002900 	.word	0x20002900

08000aec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b088      	sub	sp, #32
 8000af0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000af2:	f000 fd50 	bl	8001596 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000af6:	f000 f86d 	bl	8000bd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000afa:	f000 f9fd 	bl	8000ef8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000afe:	f000 f9b9 	bl	8000e74 <MX_DMA_Init>
  MX_ADC1_Init();
 8000b02:	f000 f8ad 	bl	8000c60 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000b06:	f000 f90f 	bl	8000d28 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000b0a:	f000 f983 	bl	8000e14 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  ws2812_start();
 8000b0e:	f7ff ff01 	bl	8000914 <ws2812_start>
  //HAL_UART_Receive_IT(&huart1, Rx_data, 19);

	uint8_t H =0;
 8000b12:	2300      	movs	r3, #0
 8000b14:	75fb      	strb	r3, [r7, #23]
	ImageData* pacManSprite;
	IndexedImageData* IndexedSprite;
	// Déclarez une instance de Canvas
	Canvas myCanvas;
	// Initialisez la structure Canvas
	myCanvas.numCols = NUM_COLS;
 8000b16:	2313      	movs	r3, #19
 8000b18:	607b      	str	r3, [r7, #4]
	myCanvas.numRows = NUM_ROWS;
 8000b1a:	2305      	movs	r3, #5
 8000b1c:	60bb      	str	r3, [r7, #8]
	// Allouez de la mémoire pour les pixels
	myCanvas.pixels = malloc(sizeof(Pixel) * NUM_COLS * NUM_ROWS);
 8000b1e:	f240 101d 	movw	r0, #285	; 0x11d
 8000b22:	f005 fed5 	bl	80068d0 <malloc>
 8000b26:	4603      	mov	r3, r0
 8000b28:	60fb      	str	r3, [r7, #12]
	// Utilisez memset pour initialiser le tableau à zéro
	memset(myCanvas.pixels, 0, sizeof(Pixel) * NUM_COLS * NUM_ROWS);
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	f240 121d 	movw	r2, #285	; 0x11d
 8000b30:	2100      	movs	r1, #0
 8000b32:	4618      	mov	r0, r3
 8000b34:	f005 fedc 	bl	80068f0 <memset>
	  	  displayBCD(&myCanvas, 2, 3, testData, 16);
*/


	  //if (Alarm){
		  IndexedSprite = &NotPickleRickIndexed;
 8000b38:	4b20      	ldr	r3, [pc, #128]	; (8000bbc <main+0xd0>)
 8000b3a:	613b      	str	r3, [r7, #16]
		  drawIndexedImage(IndexedSprite, (loop/5)%98, 1, 1, &myCanvas);
 8000b3c:	4b20      	ldr	r3, [pc, #128]	; (8000bc0 <main+0xd4>)
 8000b3e:	881b      	ldrh	r3, [r3, #0]
 8000b40:	4a20      	ldr	r2, [pc, #128]	; (8000bc4 <main+0xd8>)
 8000b42:	fba2 2303 	umull	r2, r3, r2, r3
 8000b46:	089b      	lsrs	r3, r3, #2
 8000b48:	b29b      	uxth	r3, r3
 8000b4a:	4a1f      	ldr	r2, [pc, #124]	; (8000bc8 <main+0xdc>)
 8000b4c:	fba2 1203 	umull	r1, r2, r2, r3
 8000b50:	0952      	lsrs	r2, r2, #5
 8000b52:	2162      	movs	r1, #98	; 0x62
 8000b54:	fb01 f202 	mul.w	r2, r1, r2
 8000b58:	1a9b      	subs	r3, r3, r2
 8000b5a:	b29b      	uxth	r3, r3
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	1d3b      	adds	r3, r7, #4
 8000b60:	9300      	str	r3, [sp, #0]
 8000b62:	2301      	movs	r3, #1
 8000b64:	2201      	movs	r2, #1
 8000b66:	6938      	ldr	r0, [r7, #16]
 8000b68:	f7ff fdf0 	bl	800074c <drawIndexedImage>
		  	  		  	  }



	 // }*/
if (loop <= IndexedSprite->FrameAmount *5)	loop++;
 8000b6c:	4b14      	ldr	r3, [pc, #80]	; (8000bc0 <main+0xd4>)
 8000b6e:	881b      	ldrh	r3, [r3, #0]
 8000b70:	4619      	mov	r1, r3
 8000b72:	693b      	ldr	r3, [r7, #16]
 8000b74:	889b      	ldrh	r3, [r3, #4]
 8000b76:	461a      	mov	r2, r3
 8000b78:	4613      	mov	r3, r2
 8000b7a:	009b      	lsls	r3, r3, #2
 8000b7c:	4413      	add	r3, r2
 8000b7e:	4299      	cmp	r1, r3
 8000b80:	dc06      	bgt.n	8000b90 <main+0xa4>
 8000b82:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <main+0xd4>)
 8000b84:	881b      	ldrh	r3, [r3, #0]
 8000b86:	3301      	adds	r3, #1
 8000b88:	b29a      	uxth	r2, r3
 8000b8a:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <main+0xd4>)
 8000b8c:	801a      	strh	r2, [r3, #0]
 8000b8e:	e002      	b.n	8000b96 <main+0xaa>
		  	  		  	  else loop = 0;
 8000b90:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <main+0xd4>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	801a      	strh	r2, [r3, #0]


	  	  sendCanvas(&myCanvas);
 8000b96:	1d3b      	adds	r3, r7, #4
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff fc99 	bl	80004d0 <sendCanvas>


  
		  if(HAL_UART_Receive_IT(&huart1, Rx_data, 19) != HAL_BUSY)				//I'm guessing this is the 1min update thing
 8000b9e:	2213      	movs	r2, #19
 8000ba0:	490a      	ldr	r1, [pc, #40]	; (8000bcc <main+0xe0>)
 8000ba2:	480b      	ldr	r0, [pc, #44]	; (8000bd0 <main+0xe4>)
 8000ba4:	f004 fc68 	bl	8005478 <HAL_UART_Receive_IT>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b02      	cmp	r3, #2
 8000bac:	d0c4      	beq.n	8000b38 <main+0x4c>
		  {
			  HAL_UART_Receive_IT(&huart1, Rx_data, 19);
 8000bae:	2213      	movs	r2, #19
 8000bb0:	4906      	ldr	r1, [pc, #24]	; (8000bcc <main+0xe0>)
 8000bb2:	4807      	ldr	r0, [pc, #28]	; (8000bd0 <main+0xe4>)
 8000bb4:	f004 fc60 	bl	8005478 <HAL_UART_Receive_IT>
		  IndexedSprite = &NotPickleRickIndexed;
 8000bb8:	e7be      	b.n	8000b38 <main+0x4c>
 8000bba:	bf00      	nop
 8000bbc:	20002860 	.word	0x20002860
 8000bc0:	200035d4 	.word	0x200035d4
 8000bc4:	cccccccd 	.word	0xcccccccd
 8000bc8:	5397829d 	.word	0x5397829d
 8000bcc:	200035bc 	.word	0x200035bc
 8000bd0:	200034a4 	.word	0x200034a4

08000bd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b096      	sub	sp, #88	; 0x58
 8000bd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bda:	f107 0314 	add.w	r3, r7, #20
 8000bde:	2244      	movs	r2, #68	; 0x44
 8000be0:	2100      	movs	r1, #0
 8000be2:	4618      	mov	r0, r3
 8000be4:	f005 fe84 	bl	80068f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be8:	463b      	mov	r3, r7
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	60da      	str	r2, [r3, #12]
 8000bf4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000bf6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000bfa:	f002 f8f5 	bl	8002de8 <HAL_PWREx_ControlVoltageScaling>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000c04:	f000 fa10 	bl	8001028 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c10:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c12:	2310      	movs	r3, #16
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c16:	2300      	movs	r3, #0
 8000c18:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c1a:	f107 0314 	add.w	r3, r7, #20
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f002 f938 	bl	8002e94 <HAL_RCC_OscConfig>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8000c2a:	f000 f9fd 	bl	8001028 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c2e:	230f      	movs	r3, #15
 8000c30:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c32:	2301      	movs	r3, #1
 8000c34:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000c36:	2380      	movs	r3, #128	; 0x80
 8000c38:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c42:	463b      	mov	r3, r7
 8000c44:	2100      	movs	r1, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f002 fd38 	bl	80036bc <HAL_RCC_ClockConfig>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c52:	f000 f9e9 	bl	8001028 <Error_Handler>
  }
}
 8000c56:	bf00      	nop
 8000c58:	3758      	adds	r7, #88	; 0x58
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
	...

08000c60 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c66:	463b      	mov	r3, r7
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
 8000c74:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c76:	4b29      	ldr	r3, [pc, #164]	; (8000d1c <MX_ADC1_Init+0xbc>)
 8000c78:	4a29      	ldr	r2, [pc, #164]	; (8000d20 <MX_ADC1_Init+0xc0>)
 8000c7a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c7c:	4b27      	ldr	r3, [pc, #156]	; (8000d1c <MX_ADC1_Init+0xbc>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c82:	4b26      	ldr	r3, [pc, #152]	; (8000d1c <MX_ADC1_Init+0xbc>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c88:	4b24      	ldr	r3, [pc, #144]	; (8000d1c <MX_ADC1_Init+0xbc>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c8e:	4b23      	ldr	r3, [pc, #140]	; (8000d1c <MX_ADC1_Init+0xbc>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c94:	4b21      	ldr	r3, [pc, #132]	; (8000d1c <MX_ADC1_Init+0xbc>)
 8000c96:	2204      	movs	r2, #4
 8000c98:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c9a:	4b20      	ldr	r3, [pc, #128]	; (8000d1c <MX_ADC1_Init+0xbc>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ca0:	4b1e      	ldr	r3, [pc, #120]	; (8000d1c <MX_ADC1_Init+0xbc>)
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000ca6:	4b1d      	ldr	r3, [pc, #116]	; (8000d1c <MX_ADC1_Init+0xbc>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cac:	4b1b      	ldr	r3, [pc, #108]	; (8000d1c <MX_ADC1_Init+0xbc>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cb4:	4b19      	ldr	r3, [pc, #100]	; (8000d1c <MX_ADC1_Init+0xbc>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cba:	4b18      	ldr	r3, [pc, #96]	; (8000d1c <MX_ADC1_Init+0xbc>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cc0:	4b16      	ldr	r3, [pc, #88]	; (8000d1c <MX_ADC1_Init+0xbc>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cc8:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <MX_ADC1_Init+0xbc>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000cce:	4b13      	ldr	r3, [pc, #76]	; (8000d1c <MX_ADC1_Init+0xbc>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cd6:	4811      	ldr	r0, [pc, #68]	; (8000d1c <MX_ADC1_Init+0xbc>)
 8000cd8:	f000 fe5e 	bl	8001998 <HAL_ADC_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000ce2:	f000 f9a1 	bl	8001028 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000ce6:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <MX_ADC1_Init+0xc4>)
 8000ce8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cea:	2306      	movs	r3, #6
 8000cec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cf2:	237f      	movs	r3, #127	; 0x7f
 8000cf4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cf6:	2304      	movs	r3, #4
 8000cf8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cfe:	463b      	mov	r3, r7
 8000d00:	4619      	mov	r1, r3
 8000d02:	4806      	ldr	r0, [pc, #24]	; (8000d1c <MX_ADC1_Init+0xbc>)
 8000d04:	f000 ff90 	bl	8001c28 <HAL_ADC_ConfigChannel>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000d0e:	f000 f98b 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d12:	bf00      	nop
 8000d14:	3718      	adds	r7, #24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20003364 	.word	0x20003364
 8000d20:	50040000 	.word	0x50040000
 8000d24:	32601000 	.word	0x32601000

08000d28 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08e      	sub	sp, #56	; 0x38
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
 8000d3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d3c:	f107 031c 	add.w	r3, r7, #28
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d48:	463b      	mov	r3, r7
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	609a      	str	r2, [r3, #8]
 8000d52:	60da      	str	r2, [r3, #12]
 8000d54:	611a      	str	r2, [r3, #16]
 8000d56:	615a      	str	r2, [r3, #20]
 8000d58:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d5a:	4b2d      	ldr	r3, [pc, #180]	; (8000e10 <MX_TIM2_Init+0xe8>)
 8000d5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d60:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d62:	4b2b      	ldr	r3, [pc, #172]	; (8000e10 <MX_TIM2_Init+0xe8>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d68:	4b29      	ldr	r3, [pc, #164]	; (8000e10 <MX_TIM2_Init+0xe8>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 8000d6e:	4b28      	ldr	r3, [pc, #160]	; (8000e10 <MX_TIM2_Init+0xe8>)
 8000d70:	2209      	movs	r2, #9
 8000d72:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d74:	4b26      	ldr	r3, [pc, #152]	; (8000e10 <MX_TIM2_Init+0xe8>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d7a:	4b25      	ldr	r3, [pc, #148]	; (8000e10 <MX_TIM2_Init+0xe8>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d80:	4823      	ldr	r0, [pc, #140]	; (8000e10 <MX_TIM2_Init+0xe8>)
 8000d82:	f003 f9a7 	bl	80040d4 <HAL_TIM_Base_Init>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000d8c:	f000 f94c 	bl	8001028 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d94:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	481c      	ldr	r0, [pc, #112]	; (8000e10 <MX_TIM2_Init+0xe8>)
 8000d9e:	f003 fd5d 	bl	800485c <HAL_TIM_ConfigClockSource>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000da8:	f000 f93e 	bl	8001028 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000dac:	4818      	ldr	r0, [pc, #96]	; (8000e10 <MX_TIM2_Init+0xe8>)
 8000dae:	f003 f9e8 	bl	8004182 <HAL_TIM_PWM_Init>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000db8:	f000 f936 	bl	8001028 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dc4:	f107 031c 	add.w	r3, r7, #28
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4811      	ldr	r0, [pc, #68]	; (8000e10 <MX_TIM2_Init+0xe8>)
 8000dcc:	f004 faa0 	bl	8005310 <HAL_TIMEx_MasterConfigSynchronization>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000dd6:	f000 f927 	bl	8001028 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dda:	2360      	movs	r3, #96	; 0x60
 8000ddc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000de2:	2300      	movs	r3, #0
 8000de4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000de6:	2300      	movs	r3, #0
 8000de8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dea:	463b      	mov	r3, r7
 8000dec:	2200      	movs	r2, #0
 8000dee:	4619      	mov	r1, r3
 8000df0:	4807      	ldr	r0, [pc, #28]	; (8000e10 <MX_TIM2_Init+0xe8>)
 8000df2:	f003 fc1f 	bl	8004634 <HAL_TIM_PWM_ConfigChannel>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000dfc:	f000 f914 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e00:	4803      	ldr	r0, [pc, #12]	; (8000e10 <MX_TIM2_Init+0xe8>)
 8000e02:	f000 fa0b 	bl	800121c <HAL_TIM_MspPostInit>

}
 8000e06:	bf00      	nop
 8000e08:	3738      	adds	r7, #56	; 0x38
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20003410 	.word	0x20003410

08000e14 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e18:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <MX_USART1_UART_Init+0x54>)
 8000e1a:	4a14      	ldr	r2, [pc, #80]	; (8000e6c <MX_USART1_UART_Init+0x58>)
 8000e1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 250000;
 8000e1e:	4b12      	ldr	r3, [pc, #72]	; (8000e68 <MX_USART1_UART_Init+0x54>)
 8000e20:	4a13      	ldr	r2, [pc, #76]	; (8000e70 <MX_USART1_UART_Init+0x5c>)
 8000e22:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e24:	4b10      	ldr	r3, [pc, #64]	; (8000e68 <MX_USART1_UART_Init+0x54>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e2a:	4b0f      	ldr	r3, [pc, #60]	; (8000e68 <MX_USART1_UART_Init+0x54>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e30:	4b0d      	ldr	r3, [pc, #52]	; (8000e68 <MX_USART1_UART_Init+0x54>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e36:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <MX_USART1_UART_Init+0x54>)
 8000e38:	220c      	movs	r2, #12
 8000e3a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e3c:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <MX_USART1_UART_Init+0x54>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e42:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <MX_USART1_UART_Init+0x54>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e48:	4b07      	ldr	r3, [pc, #28]	; (8000e68 <MX_USART1_UART_Init+0x54>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e4e:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <MX_USART1_UART_Init+0x54>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e54:	4804      	ldr	r0, [pc, #16]	; (8000e68 <MX_USART1_UART_Init+0x54>)
 8000e56:	f004 fac1 	bl	80053dc <HAL_UART_Init>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 8000e60:	f000 f8e2 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	200034a4 	.word	0x200034a4
 8000e6c:	40013800 	.word	0x40013800
 8000e70:	0003d090 	.word	0x0003d090

08000e74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e7a:	4b1e      	ldr	r3, [pc, #120]	; (8000ef4 <MX_DMA_Init+0x80>)
 8000e7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e7e:	4a1d      	ldr	r2, [pc, #116]	; (8000ef4 <MX_DMA_Init+0x80>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	6493      	str	r3, [r2, #72]	; 0x48
 8000e86:	4b1b      	ldr	r3, [pc, #108]	; (8000ef4 <MX_DMA_Init+0x80>)
 8000e88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	607b      	str	r3, [r7, #4]
 8000e90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e92:	4b18      	ldr	r3, [pc, #96]	; (8000ef4 <MX_DMA_Init+0x80>)
 8000e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e96:	4a17      	ldr	r2, [pc, #92]	; (8000ef4 <MX_DMA_Init+0x80>)
 8000e98:	f043 0302 	orr.w	r3, r3, #2
 8000e9c:	6493      	str	r3, [r2, #72]	; 0x48
 8000e9e:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <MX_DMA_Init+0x80>)
 8000ea0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ea2:	f003 0302 	and.w	r3, r3, #2
 8000ea6:	603b      	str	r3, [r7, #0]
 8000ea8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2100      	movs	r1, #0
 8000eae:	200b      	movs	r0, #11
 8000eb0:	f001 fb75 	bl	800259e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000eb4:	200b      	movs	r0, #11
 8000eb6:	f001 fb8e 	bl	80025d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	200e      	movs	r0, #14
 8000ec0:	f001 fb6d 	bl	800259e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000ec4:	200e      	movs	r0, #14
 8000ec6:	f001 fb86 	bl	80025d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2100      	movs	r1, #0
 8000ece:	200f      	movs	r0, #15
 8000ed0:	f001 fb65 	bl	800259e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000ed4:	200f      	movs	r0, #15
 8000ed6:	f001 fb7e 	bl	80025d6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 0, 0);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2100      	movs	r1, #0
 8000ede:	2045      	movs	r0, #69	; 0x45
 8000ee0:	f001 fb5d 	bl	800259e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 8000ee4:	2045      	movs	r0, #69	; 0x45
 8000ee6:	f001 fb76 	bl	80025d6 <HAL_NVIC_EnableIRQ>

}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40021000 	.word	0x40021000

08000ef8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efe:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <MX_GPIO_Init+0x44>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f02:	4a0e      	ldr	r2, [pc, #56]	; (8000f3c <MX_GPIO_Init+0x44>)
 8000f04:	f043 0304 	orr.w	r3, r3, #4
 8000f08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0a:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <MX_GPIO_Init+0x44>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0e:	f003 0304 	and.w	r3, r3, #4
 8000f12:	607b      	str	r3, [r7, #4]
 8000f14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <MX_GPIO_Init+0x44>)
 8000f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1a:	4a08      	ldr	r2, [pc, #32]	; (8000f3c <MX_GPIO_Init+0x44>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f22:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <MX_GPIO_Init+0x44>)
 8000f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	603b      	str	r3, [r7, #0]
 8000f2c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	40021000 	.word	0x40021000

08000f40 <HAL_UART_RxCpltCallback>:
* Interruption qui va mettre dans des variables la réception UART comme le	  *
* temps										 								  *
******************************************************************************/

void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]

	if(&huart1 == huart)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4a22      	ldr	r2, [pc, #136]	; (8000fd4 <HAL_UART_RxCpltCallback+0x94>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d13d      	bne.n	8000fcc <HAL_UART_RxCpltCallback+0x8c>
	{
		testData = Rx_data[3];		//Stock data fonction
 8000f50:	4b21      	ldr	r3, [pc, #132]	; (8000fd8 <HAL_UART_RxCpltCallback+0x98>)
 8000f52:	78db      	ldrb	r3, [r3, #3]
 8000f54:	b29a      	uxth	r2, r3
 8000f56:	4b21      	ldr	r3, [pc, #132]	; (8000fdc <HAL_UART_RxCpltCallback+0x9c>)
 8000f58:	801a      	strh	r2, [r3, #0]
		Heures_brt = Rx_data[4];	//Stock le data des heures, "brt" = brute
 8000f5a:	4b1f      	ldr	r3, [pc, #124]	; (8000fd8 <HAL_UART_RxCpltCallback+0x98>)
 8000f5c:	791a      	ldrb	r2, [r3, #4]
 8000f5e:	4b20      	ldr	r3, [pc, #128]	; (8000fe0 <HAL_UART_RxCpltCallback+0xa0>)
 8000f60:	701a      	strb	r2, [r3, #0]
		Minutes_brt = Rx_data[5];	//Stock le data des minutes
 8000f62:	4b1d      	ldr	r3, [pc, #116]	; (8000fd8 <HAL_UART_RxCpltCallback+0x98>)
 8000f64:	795a      	ldrb	r2, [r3, #5]
 8000f66:	4b1f      	ldr	r3, [pc, #124]	; (8000fe4 <HAL_UART_RxCpltCallback+0xa4>)
 8000f68:	701a      	strb	r2, [r3, #0]

		Alarm = (testData >> 3) &0x01;		// Alarm Status
 8000f6a:	4b1c      	ldr	r3, [pc, #112]	; (8000fdc <HAL_UART_RxCpltCallback+0x9c>)
 8000f6c:	881b      	ldrh	r3, [r3, #0]
 8000f6e:	08db      	lsrs	r3, r3, #3
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	f003 0301 	and.w	r3, r3, #1
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	4b1b      	ldr	r3, [pc, #108]	; (8000fe8 <HAL_UART_RxCpltCallback+0xa8>)
 8000f7c:	701a      	strb	r2, [r3, #0]

		Heures_U = Heures_brt & 0x0F;	//Traite le data pour avoir l'Unité des Heures
 8000f7e:	4b18      	ldr	r3, [pc, #96]	; (8000fe0 <HAL_UART_RxCpltCallback+0xa0>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	f003 030f 	and.w	r3, r3, #15
 8000f86:	b2da      	uxtb	r2, r3
 8000f88:	4b18      	ldr	r3, [pc, #96]	; (8000fec <HAL_UART_RxCpltCallback+0xac>)
 8000f8a:	701a      	strb	r2, [r3, #0]

		Heures_D = (Heures_brt & 0xF0) >> 4;	//Traite le data pour avoir la Dizaine des Heures
 8000f8c:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <HAL_UART_RxCpltCallback+0xa0>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	091b      	lsrs	r3, r3, #4
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	4b16      	ldr	r3, [pc, #88]	; (8000ff0 <HAL_UART_RxCpltCallback+0xb0>)
 8000f96:	701a      	strb	r2, [r3, #0]

		Minutes_U = Minutes_brt & 0x0F;	//Traite le data pour avoir l'Unité des Minutes
 8000f98:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <HAL_UART_RxCpltCallback+0xa4>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	f003 030f 	and.w	r3, r3, #15
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <HAL_UART_RxCpltCallback+0xb4>)
 8000fa4:	701a      	strb	r2, [r3, #0]

		Minutes_D = (Minutes_brt & 0xF0) >> 4;	//Traite le data pour avoir la Dizaine des Minutes
 8000fa6:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <HAL_UART_RxCpltCallback+0xa4>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	091b      	lsrs	r3, r3, #4
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <HAL_UART_RxCpltCallback+0xb8>)
 8000fb0:	701a      	strb	r2, [r3, #0]

		if(HAL_UART_Receive_IT(&huart1, Rx_data, 19) == HAL_ERROR)	//Réception d'UART lors d'une erreur
 8000fb2:	2213      	movs	r2, #19
 8000fb4:	4908      	ldr	r1, [pc, #32]	; (8000fd8 <HAL_UART_RxCpltCallback+0x98>)
 8000fb6:	4807      	ldr	r0, [pc, #28]	; (8000fd4 <HAL_UART_RxCpltCallback+0x94>)
 8000fb8:	f004 fa5e 	bl	8005478 <HAL_UART_Receive_IT>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d104      	bne.n	8000fcc <HAL_UART_RxCpltCallback+0x8c>
		{
			HAL_UART_Receive_IT(&huart1, Rx_data, 19);
 8000fc2:	2213      	movs	r2, #19
 8000fc4:	4904      	ldr	r1, [pc, #16]	; (8000fd8 <HAL_UART_RxCpltCallback+0x98>)
 8000fc6:	4803      	ldr	r0, [pc, #12]	; (8000fd4 <HAL_UART_RxCpltCallback+0x94>)
 8000fc8:	f004 fa56 	bl	8005478 <HAL_UART_Receive_IT>
		}
	}
}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	200034a4 	.word	0x200034a4
 8000fd8:	200035bc 	.word	0x200035bc
 8000fdc:	200035d0 	.word	0x200035d0
 8000fe0:	200035b8 	.word	0x200035b8
 8000fe4:	200035ba 	.word	0x200035ba
 8000fe8:	200035d2 	.word	0x200035d2
 8000fec:	20002870 	.word	0x20002870
 8000ff0:	200035b9 	.word	0x200035b9
 8000ff4:	20002871 	.word	0x20002871
 8000ff8:	20002872 	.word	0x20002872

08000ffc <HAL_UART_ErrorCallback>:
* Interruption lorsqu'il y a un problème dans la transmission UART qui permet *
* de refaire une réception									 				  *
******************************************************************************/

void HAL_UART_ErrorCallback (UART_HandleTypeDef * huart)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	if(&huart1 == huart)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a06      	ldr	r2, [pc, #24]	; (8001020 <HAL_UART_ErrorCallback+0x24>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d104      	bne.n	8001016 <HAL_UART_ErrorCallback+0x1a>
	{
		HAL_UART_Receive_IT(&huart1, Rx_data, 19);
 800100c:	2213      	movs	r2, #19
 800100e:	4905      	ldr	r1, [pc, #20]	; (8001024 <HAL_UART_ErrorCallback+0x28>)
 8001010:	4803      	ldr	r0, [pc, #12]	; (8001020 <HAL_UART_ErrorCallback+0x24>)
 8001012:	f004 fa31 	bl	8005478 <HAL_UART_Receive_IT>
	}
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	200034a4 	.word	0x200034a4
 8001024:	200035bc 	.word	0x200035bc

08001028 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800102c:	b672      	cpsid	i
}
 800102e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001030:	e7fe      	b.n	8001030 <Error_Handler+0x8>
	...

08001034 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103a:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <HAL_MspInit+0x44>)
 800103c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800103e:	4a0e      	ldr	r2, [pc, #56]	; (8001078 <HAL_MspInit+0x44>)
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	6613      	str	r3, [r2, #96]	; 0x60
 8001046:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <HAL_MspInit+0x44>)
 8001048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001052:	4b09      	ldr	r3, [pc, #36]	; (8001078 <HAL_MspInit+0x44>)
 8001054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001056:	4a08      	ldr	r2, [pc, #32]	; (8001078 <HAL_MspInit+0x44>)
 8001058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800105c:	6593      	str	r3, [r2, #88]	; 0x58
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <HAL_MspInit+0x44>)
 8001060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001066:	603b      	str	r3, [r7, #0]
 8001068:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800106a:	bf00      	nop
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	40021000 	.word	0x40021000

0800107c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b09e      	sub	sp, #120	; 0x78
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001094:	f107 0310 	add.w	r3, r7, #16
 8001098:	2254      	movs	r2, #84	; 0x54
 800109a:	2100      	movs	r1, #0
 800109c:	4618      	mov	r0, r3
 800109e:	f005 fc27 	bl	80068f0 <memset>
  if(hadc->Instance==ADC1)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a34      	ldr	r2, [pc, #208]	; (8001178 <HAL_ADC_MspInit+0xfc>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d160      	bne.n	800116e <HAL_ADC_MspInit+0xf2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010b0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80010b2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80010b6:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010b8:	f107 0310 	add.w	r3, r7, #16
 80010bc:	4618      	mov	r0, r3
 80010be:	f002 fd21 	bl	8003b04 <HAL_RCCEx_PeriphCLKConfig>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80010c8:	f7ff ffae 	bl	8001028 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80010cc:	4b2b      	ldr	r3, [pc, #172]	; (800117c <HAL_ADC_MspInit+0x100>)
 80010ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d0:	4a2a      	ldr	r2, [pc, #168]	; (800117c <HAL_ADC_MspInit+0x100>)
 80010d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010d8:	4b28      	ldr	r3, [pc, #160]	; (800117c <HAL_ADC_MspInit+0x100>)
 80010da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e4:	4b25      	ldr	r3, [pc, #148]	; (800117c <HAL_ADC_MspInit+0x100>)
 80010e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e8:	4a24      	ldr	r2, [pc, #144]	; (800117c <HAL_ADC_MspInit+0x100>)
 80010ea:	f043 0301 	orr.w	r3, r3, #1
 80010ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f0:	4b22      	ldr	r3, [pc, #136]	; (800117c <HAL_ADC_MspInit+0x100>)
 80010f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f4:	f003 0301 	and.w	r3, r3, #1
 80010f8:	60bb      	str	r3, [r7, #8]
 80010fa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80010fc:	2380      	movs	r3, #128	; 0x80
 80010fe:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001100:	230b      	movs	r3, #11
 8001102:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001108:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800110c:	4619      	mov	r1, r3
 800110e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001112:	f001 fcf1 	bl	8002af8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001116:	4b1a      	ldr	r3, [pc, #104]	; (8001180 <HAL_ADC_MspInit+0x104>)
 8001118:	4a1a      	ldr	r2, [pc, #104]	; (8001184 <HAL_ADC_MspInit+0x108>)
 800111a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800111c:	4b18      	ldr	r3, [pc, #96]	; (8001180 <HAL_ADC_MspInit+0x104>)
 800111e:	2200      	movs	r2, #0
 8001120:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001122:	4b17      	ldr	r3, [pc, #92]	; (8001180 <HAL_ADC_MspInit+0x104>)
 8001124:	2200      	movs	r2, #0
 8001126:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001128:	4b15      	ldr	r3, [pc, #84]	; (8001180 <HAL_ADC_MspInit+0x104>)
 800112a:	2200      	movs	r2, #0
 800112c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800112e:	4b14      	ldr	r3, [pc, #80]	; (8001180 <HAL_ADC_MspInit+0x104>)
 8001130:	2280      	movs	r2, #128	; 0x80
 8001132:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001134:	4b12      	ldr	r3, [pc, #72]	; (8001180 <HAL_ADC_MspInit+0x104>)
 8001136:	f44f 7280 	mov.w	r2, #256	; 0x100
 800113a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800113c:	4b10      	ldr	r3, [pc, #64]	; (8001180 <HAL_ADC_MspInit+0x104>)
 800113e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001142:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001144:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <HAL_ADC_MspInit+0x104>)
 8001146:	2220      	movs	r2, #32
 8001148:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800114a:	4b0d      	ldr	r3, [pc, #52]	; (8001180 <HAL_ADC_MspInit+0x104>)
 800114c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001150:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001152:	480b      	ldr	r0, [pc, #44]	; (8001180 <HAL_ADC_MspInit+0x104>)
 8001154:	f001 fa5a 	bl	800260c <HAL_DMA_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <HAL_ADC_MspInit+0xe6>
    {
      Error_Handler();
 800115e:	f7ff ff63 	bl	8001028 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a06      	ldr	r2, [pc, #24]	; (8001180 <HAL_ADC_MspInit+0x104>)
 8001166:	64da      	str	r2, [r3, #76]	; 0x4c
 8001168:	4a05      	ldr	r2, [pc, #20]	; (8001180 <HAL_ADC_MspInit+0x104>)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800116e:	bf00      	nop
 8001170:	3778      	adds	r7, #120	; 0x78
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	50040000 	.word	0x50040000
 800117c:	40021000 	.word	0x40021000
 8001180:	200033c8 	.word	0x200033c8
 8001184:	40020008 	.word	0x40020008

08001188 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001198:	d136      	bne.n	8001208 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800119a:	4b1d      	ldr	r3, [pc, #116]	; (8001210 <HAL_TIM_Base_MspInit+0x88>)
 800119c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119e:	4a1c      	ldr	r2, [pc, #112]	; (8001210 <HAL_TIM_Base_MspInit+0x88>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	6593      	str	r3, [r2, #88]	; 0x58
 80011a6:	4b1a      	ldr	r3, [pc, #104]	; (8001210 <HAL_TIM_Base_MspInit+0x88>)
 80011a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 80011b2:	4b18      	ldr	r3, [pc, #96]	; (8001214 <HAL_TIM_Base_MspInit+0x8c>)
 80011b4:	4a18      	ldr	r2, [pc, #96]	; (8001218 <HAL_TIM_Base_MspInit+0x90>)
 80011b6:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_4;
 80011b8:	4b16      	ldr	r3, [pc, #88]	; (8001214 <HAL_TIM_Base_MspInit+0x8c>)
 80011ba:	2204      	movs	r2, #4
 80011bc:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011be:	4b15      	ldr	r3, [pc, #84]	; (8001214 <HAL_TIM_Base_MspInit+0x8c>)
 80011c0:	2210      	movs	r2, #16
 80011c2:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011c4:	4b13      	ldr	r3, [pc, #76]	; (8001214 <HAL_TIM_Base_MspInit+0x8c>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80011ca:	4b12      	ldr	r3, [pc, #72]	; (8001214 <HAL_TIM_Base_MspInit+0x8c>)
 80011cc:	2280      	movs	r2, #128	; 0x80
 80011ce:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80011d0:	4b10      	ldr	r3, [pc, #64]	; (8001214 <HAL_TIM_Base_MspInit+0x8c>)
 80011d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011d6:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011d8:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <HAL_TIM_Base_MspInit+0x8c>)
 80011da:	2200      	movs	r2, #0
 80011dc:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 80011de:	4b0d      	ldr	r3, [pc, #52]	; (8001214 <HAL_TIM_Base_MspInit+0x8c>)
 80011e0:	2220      	movs	r2, #32
 80011e2:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80011e4:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <HAL_TIM_Base_MspInit+0x8c>)
 80011e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011ea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80011ec:	4809      	ldr	r0, [pc, #36]	; (8001214 <HAL_TIM_Base_MspInit+0x8c>)
 80011ee:	f001 fa0d 	bl	800260c <HAL_DMA_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 80011f8:	f7ff ff16 	bl	8001028 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4a05      	ldr	r2, [pc, #20]	; (8001214 <HAL_TIM_Base_MspInit+0x8c>)
 8001200:	625a      	str	r2, [r3, #36]	; 0x24
 8001202:	4a04      	ldr	r2, [pc, #16]	; (8001214 <HAL_TIM_Base_MspInit+0x8c>)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001208:	bf00      	nop
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40021000 	.word	0x40021000
 8001214:	2000345c 	.word	0x2000345c
 8001218:	40020058 	.word	0x40020058

0800121c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b088      	sub	sp, #32
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	f107 030c 	add.w	r3, r7, #12
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800123c:	d11c      	bne.n	8001278 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800123e:	4b10      	ldr	r3, [pc, #64]	; (8001280 <HAL_TIM_MspPostInit+0x64>)
 8001240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001242:	4a0f      	ldr	r2, [pc, #60]	; (8001280 <HAL_TIM_MspPostInit+0x64>)
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	64d3      	str	r3, [r2, #76]	; 0x4c
 800124a:	4b0d      	ldr	r3, [pc, #52]	; (8001280 <HAL_TIM_MspPostInit+0x64>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001256:	2301      	movs	r3, #1
 8001258:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125a:	2302      	movs	r3, #2
 800125c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001262:	2300      	movs	r3, #0
 8001264:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001266:	2301      	movs	r3, #1
 8001268:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126a:	f107 030c 	add.w	r3, r7, #12
 800126e:	4619      	mov	r1, r3
 8001270:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001274:	f001 fc40 	bl	8002af8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001278:	bf00      	nop
 800127a:	3720      	adds	r7, #32
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40021000 	.word	0x40021000

08001284 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b09e      	sub	sp, #120	; 0x78
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800129c:	f107 0310 	add.w	r3, r7, #16
 80012a0:	2254      	movs	r2, #84	; 0x54
 80012a2:	2100      	movs	r1, #0
 80012a4:	4618      	mov	r0, r3
 80012a6:	f005 fb23 	bl	80068f0 <memset>
  if(huart->Instance==USART1)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a4d      	ldr	r2, [pc, #308]	; (80013e4 <HAL_UART_MspInit+0x160>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	f040 8093 	bne.w	80013dc <HAL_UART_MspInit+0x158>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80012b6:	2301      	movs	r3, #1
 80012b8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80012ba:	2300      	movs	r3, #0
 80012bc:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012be:	f107 0310 	add.w	r3, r7, #16
 80012c2:	4618      	mov	r0, r3
 80012c4:	f002 fc1e 	bl	8003b04 <HAL_RCCEx_PeriphCLKConfig>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80012ce:	f7ff feab 	bl	8001028 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012d2:	4b45      	ldr	r3, [pc, #276]	; (80013e8 <HAL_UART_MspInit+0x164>)
 80012d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012d6:	4a44      	ldr	r2, [pc, #272]	; (80013e8 <HAL_UART_MspInit+0x164>)
 80012d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012dc:	6613      	str	r3, [r2, #96]	; 0x60
 80012de:	4b42      	ldr	r3, [pc, #264]	; (80013e8 <HAL_UART_MspInit+0x164>)
 80012e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ea:	4b3f      	ldr	r3, [pc, #252]	; (80013e8 <HAL_UART_MspInit+0x164>)
 80012ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ee:	4a3e      	ldr	r2, [pc, #248]	; (80013e8 <HAL_UART_MspInit+0x164>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012f6:	4b3c      	ldr	r3, [pc, #240]	; (80013e8 <HAL_UART_MspInit+0x164>)
 80012f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	60bb      	str	r3, [r7, #8]
 8001300:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001302:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001306:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001308:	2302      	movs	r3, #2
 800130a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001310:	2303      	movs	r3, #3
 8001312:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001314:	2307      	movs	r3, #7
 8001316:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001318:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800131c:	4619      	mov	r1, r3
 800131e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001322:	f001 fbe9 	bl	8002af8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001326:	4b31      	ldr	r3, [pc, #196]	; (80013ec <HAL_UART_MspInit+0x168>)
 8001328:	4a31      	ldr	r2, [pc, #196]	; (80013f0 <HAL_UART_MspInit+0x16c>)
 800132a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 800132c:	4b2f      	ldr	r3, [pc, #188]	; (80013ec <HAL_UART_MspInit+0x168>)
 800132e:	2202      	movs	r2, #2
 8001330:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001332:	4b2e      	ldr	r3, [pc, #184]	; (80013ec <HAL_UART_MspInit+0x168>)
 8001334:	2210      	movs	r2, #16
 8001336:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001338:	4b2c      	ldr	r3, [pc, #176]	; (80013ec <HAL_UART_MspInit+0x168>)
 800133a:	2200      	movs	r2, #0
 800133c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800133e:	4b2b      	ldr	r3, [pc, #172]	; (80013ec <HAL_UART_MspInit+0x168>)
 8001340:	2280      	movs	r2, #128	; 0x80
 8001342:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001344:	4b29      	ldr	r3, [pc, #164]	; (80013ec <HAL_UART_MspInit+0x168>)
 8001346:	2200      	movs	r2, #0
 8001348:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800134a:	4b28      	ldr	r3, [pc, #160]	; (80013ec <HAL_UART_MspInit+0x168>)
 800134c:	2200      	movs	r2, #0
 800134e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001350:	4b26      	ldr	r3, [pc, #152]	; (80013ec <HAL_UART_MspInit+0x168>)
 8001352:	2200      	movs	r2, #0
 8001354:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001356:	4b25      	ldr	r3, [pc, #148]	; (80013ec <HAL_UART_MspInit+0x168>)
 8001358:	2200      	movs	r2, #0
 800135a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800135c:	4823      	ldr	r0, [pc, #140]	; (80013ec <HAL_UART_MspInit+0x168>)
 800135e:	f001 f955 	bl	800260c <HAL_DMA_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8001368:	f7ff fe5e 	bl	8001028 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4a1f      	ldr	r2, [pc, #124]	; (80013ec <HAL_UART_MspInit+0x168>)
 8001370:	66da      	str	r2, [r3, #108]	; 0x6c
 8001372:	4a1e      	ldr	r2, [pc, #120]	; (80013ec <HAL_UART_MspInit+0x168>)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Channel7;
 8001378:	4b1e      	ldr	r3, [pc, #120]	; (80013f4 <HAL_UART_MspInit+0x170>)
 800137a:	4a1f      	ldr	r2, [pc, #124]	; (80013f8 <HAL_UART_MspInit+0x174>)
 800137c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 800137e:	4b1d      	ldr	r3, [pc, #116]	; (80013f4 <HAL_UART_MspInit+0x170>)
 8001380:	2202      	movs	r2, #2
 8001382:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001384:	4b1b      	ldr	r3, [pc, #108]	; (80013f4 <HAL_UART_MspInit+0x170>)
 8001386:	2200      	movs	r2, #0
 8001388:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800138a:	4b1a      	ldr	r3, [pc, #104]	; (80013f4 <HAL_UART_MspInit+0x170>)
 800138c:	2200      	movs	r2, #0
 800138e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001390:	4b18      	ldr	r3, [pc, #96]	; (80013f4 <HAL_UART_MspInit+0x170>)
 8001392:	2280      	movs	r2, #128	; 0x80
 8001394:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001396:	4b17      	ldr	r3, [pc, #92]	; (80013f4 <HAL_UART_MspInit+0x170>)
 8001398:	2200      	movs	r2, #0
 800139a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800139c:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <HAL_UART_MspInit+0x170>)
 800139e:	2200      	movs	r2, #0
 80013a0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80013a2:	4b14      	ldr	r3, [pc, #80]	; (80013f4 <HAL_UART_MspInit+0x170>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80013a8:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <HAL_UART_MspInit+0x170>)
 80013aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013ae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80013b0:	4810      	ldr	r0, [pc, #64]	; (80013f4 <HAL_UART_MspInit+0x170>)
 80013b2:	f001 f92b 	bl	800260c <HAL_DMA_Init>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <HAL_UART_MspInit+0x13c>
    {
      Error_Handler();
 80013bc:	f7ff fe34 	bl	8001028 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4a0c      	ldr	r2, [pc, #48]	; (80013f4 <HAL_UART_MspInit+0x170>)
 80013c4:	671a      	str	r2, [r3, #112]	; 0x70
 80013c6:	4a0b      	ldr	r2, [pc, #44]	; (80013f4 <HAL_UART_MspInit+0x170>)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80013cc:	2200      	movs	r2, #0
 80013ce:	2100      	movs	r1, #0
 80013d0:	2025      	movs	r0, #37	; 0x25
 80013d2:	f001 f8e4 	bl	800259e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80013d6:	2025      	movs	r0, #37	; 0x25
 80013d8:	f001 f8fd 	bl	80025d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013dc:	bf00      	nop
 80013de:	3778      	adds	r7, #120	; 0x78
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40013800 	.word	0x40013800
 80013e8:	40021000 	.word	0x40021000
 80013ec:	20003528 	.word	0x20003528
 80013f0:	40020044 	.word	0x40020044
 80013f4:	20003570 	.word	0x20003570
 80013f8:	40020480 	.word	0x40020480

080013fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001400:	e7fe      	b.n	8001400 <NMI_Handler+0x4>

08001402 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001406:	e7fe      	b.n	8001406 <HardFault_Handler+0x4>

08001408 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800140c:	e7fe      	b.n	800140c <MemManage_Handler+0x4>

0800140e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001412:	e7fe      	b.n	8001412 <BusFault_Handler+0x4>

08001414 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001418:	e7fe      	b.n	8001418 <UsageFault_Handler+0x4>

0800141a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800141a:	b480      	push	{r7}
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001448:	f000 f8fa 	bl	8001640 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}

08001450 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001454:	4802      	ldr	r0, [pc, #8]	; (8001460 <DMA1_Channel1_IRQHandler+0x10>)
 8001456:	f001 fa70 	bl	800293a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	200033c8 	.word	0x200033c8

08001464 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001468:	4802      	ldr	r0, [pc, #8]	; (8001474 <DMA1_Channel4_IRQHandler+0x10>)
 800146a:	f001 fa66 	bl	800293a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20003528 	.word	0x20003528

08001478 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 800147c:	4802      	ldr	r0, [pc, #8]	; (8001488 <DMA1_Channel5_IRQHandler+0x10>)
 800147e:	f001 fa5c 	bl	800293a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	2000345c 	.word	0x2000345c

0800148c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001490:	4802      	ldr	r0, [pc, #8]	; (800149c <USART1_IRQHandler+0x10>)
 8001492:	f004 f847 	bl	8005524 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	200034a4 	.word	0x200034a4

080014a0 <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80014a4:	4802      	ldr	r0, [pc, #8]	; (80014b0 <DMA2_Channel7_IRQHandler+0x10>)
 80014a6:	f001 fa48 	bl	800293a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20003570 	.word	0x20003570

080014b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014bc:	4a14      	ldr	r2, [pc, #80]	; (8001510 <_sbrk+0x5c>)
 80014be:	4b15      	ldr	r3, [pc, #84]	; (8001514 <_sbrk+0x60>)
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014c8:	4b13      	ldr	r3, [pc, #76]	; (8001518 <_sbrk+0x64>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d102      	bne.n	80014d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014d0:	4b11      	ldr	r3, [pc, #68]	; (8001518 <_sbrk+0x64>)
 80014d2:	4a12      	ldr	r2, [pc, #72]	; (800151c <_sbrk+0x68>)
 80014d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014d6:	4b10      	ldr	r3, [pc, #64]	; (8001518 <_sbrk+0x64>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4413      	add	r3, r2
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d207      	bcs.n	80014f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014e4:	f005 f9ca 	bl	800687c <__errno>
 80014e8:	4603      	mov	r3, r0
 80014ea:	220c      	movs	r2, #12
 80014ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ee:	f04f 33ff 	mov.w	r3, #4294967295
 80014f2:	e009      	b.n	8001508 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014f4:	4b08      	ldr	r3, [pc, #32]	; (8001518 <_sbrk+0x64>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014fa:	4b07      	ldr	r3, [pc, #28]	; (8001518 <_sbrk+0x64>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4413      	add	r3, r2
 8001502:	4a05      	ldr	r2, [pc, #20]	; (8001518 <_sbrk+0x64>)
 8001504:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001506:	68fb      	ldr	r3, [r7, #12]
}
 8001508:	4618      	mov	r0, r3
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20010000 	.word	0x20010000
 8001514:	00000400 	.word	0x00000400
 8001518:	200035d8 	.word	0x200035d8
 800151c:	200035f0 	.word	0x200035f0

08001520 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <SystemInit+0x20>)
 8001526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800152a:	4a05      	ldr	r2, [pc, #20]	; (8001540 <SystemInit+0x20>)
 800152c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001530:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   sp, =_estack    /* Set stack pointer */
 8001544:	f8df d034 	ldr.w	sp, [pc, #52]	; 800157c <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001548:	f7ff ffea 	bl	8001520 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800154c:	480c      	ldr	r0, [pc, #48]	; (8001580 <LoopForever+0x6>)
  ldr r1, =_edata
 800154e:	490d      	ldr	r1, [pc, #52]	; (8001584 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001550:	4a0d      	ldr	r2, [pc, #52]	; (8001588 <LoopForever+0xe>)
  movs r3, #0
 8001552:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001554:	e002      	b.n	800155c <LoopCopyDataInit>

08001556 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001556:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001558:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800155a:	3304      	adds	r3, #4

0800155c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800155c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800155e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001560:	d3f9      	bcc.n	8001556 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001562:	4a0a      	ldr	r2, [pc, #40]	; (800158c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001564:	4c0a      	ldr	r4, [pc, #40]	; (8001590 <LoopForever+0x16>)
  movs r3, #0
 8001566:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001568:	e001      	b.n	800156e <LoopFillZerobss>

0800156a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800156a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800156c:	3204      	adds	r2, #4

0800156e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800156e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001570:	d3fb      	bcc.n	800156a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001572:	f005 f989 	bl	8006888 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001576:	f7ff fab9 	bl	8000aec <main>

0800157a <LoopForever>:

LoopForever:
    b LoopForever
 800157a:	e7fe      	b.n	800157a <LoopForever>
Reset_Handler:  ldr   sp, =_estack    /* Set stack pointer */
 800157c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001580:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001584:	200028e4 	.word	0x200028e4
  ldr r2, =_sidata
 8001588:	08006b6c 	.word	0x08006b6c
  ldr r2, =_sbss
 800158c:	200028e4 	.word	0x200028e4
  ldr r4, =_ebss
 8001590:	200035f0 	.word	0x200035f0

08001594 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001594:	e7fe      	b.n	8001594 <ADC1_IRQHandler>

08001596 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b082      	sub	sp, #8
 800159a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800159c:	2300      	movs	r3, #0
 800159e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015a0:	2003      	movs	r0, #3
 80015a2:	f000 fff1 	bl	8002588 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015a6:	2000      	movs	r0, #0
 80015a8:	f000 f80e 	bl	80015c8 <HAL_InitTick>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d002      	beq.n	80015b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	71fb      	strb	r3, [r7, #7]
 80015b6:	e001      	b.n	80015bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015b8:	f7ff fd3c 	bl	8001034 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015bc:	79fb      	ldrb	r3, [r7, #7]
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
	...

080015c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015d0:	2300      	movs	r3, #0
 80015d2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80015d4:	4b17      	ldr	r3, [pc, #92]	; (8001634 <HAL_InitTick+0x6c>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d023      	beq.n	8001624 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80015dc:	4b16      	ldr	r3, [pc, #88]	; (8001638 <HAL_InitTick+0x70>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	4b14      	ldr	r3, [pc, #80]	; (8001634 <HAL_InitTick+0x6c>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	4619      	mov	r1, r3
 80015e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f2:	4618      	mov	r0, r3
 80015f4:	f000 fffd 	bl	80025f2 <HAL_SYSTICK_Config>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d10f      	bne.n	800161e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2b0f      	cmp	r3, #15
 8001602:	d809      	bhi.n	8001618 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001604:	2200      	movs	r2, #0
 8001606:	6879      	ldr	r1, [r7, #4]
 8001608:	f04f 30ff 	mov.w	r0, #4294967295
 800160c:	f000 ffc7 	bl	800259e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001610:	4a0a      	ldr	r2, [pc, #40]	; (800163c <HAL_InitTick+0x74>)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6013      	str	r3, [r2, #0]
 8001616:	e007      	b.n	8001628 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	73fb      	strb	r3, [r7, #15]
 800161c:	e004      	b.n	8001628 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	73fb      	strb	r3, [r7, #15]
 8001622:	e001      	b.n	8001628 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001628:	7bfb      	ldrb	r3, [r7, #15]
}
 800162a:	4618      	mov	r0, r3
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	2000287c 	.word	0x2000287c
 8001638:	20002874 	.word	0x20002874
 800163c:	20002878 	.word	0x20002878

08001640 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001644:	4b06      	ldr	r3, [pc, #24]	; (8001660 <HAL_IncTick+0x20>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	461a      	mov	r2, r3
 800164a:	4b06      	ldr	r3, [pc, #24]	; (8001664 <HAL_IncTick+0x24>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4413      	add	r3, r2
 8001650:	4a04      	ldr	r2, [pc, #16]	; (8001664 <HAL_IncTick+0x24>)
 8001652:	6013      	str	r3, [r2, #0]
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	2000287c 	.word	0x2000287c
 8001664:	200035dc 	.word	0x200035dc

08001668 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  return uwTick;
 800166c:	4b03      	ldr	r3, [pc, #12]	; (800167c <HAL_GetTick+0x14>)
 800166e:	681b      	ldr	r3, [r3, #0]
}
 8001670:	4618      	mov	r0, r3
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	200035dc 	.word	0x200035dc

08001680 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	431a      	orrs	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	609a      	str	r2, [r3, #8]
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80016a6:	b480      	push	{r7}
 80016a8:	b083      	sub	sp, #12
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
 80016ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	431a      	orrs	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	609a      	str	r2, [r3, #8]
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80016dc:	4618      	mov	r0, r3
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b087      	sub	sp, #28
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
 80016f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	3360      	adds	r3, #96	; 0x60
 80016fa:	461a      	mov	r2, r3
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4413      	add	r3, r2
 8001702:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	4b08      	ldr	r3, [pc, #32]	; (800172c <LL_ADC_SetOffset+0x44>)
 800170a:	4013      	ands	r3, r2
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001712:	683a      	ldr	r2, [r7, #0]
 8001714:	430a      	orrs	r2, r1
 8001716:	4313      	orrs	r3, r2
 8001718:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001720:	bf00      	nop
 8001722:	371c      	adds	r7, #28
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	03fff000 	.word	0x03fff000

08001730 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	3360      	adds	r3, #96	; 0x60
 800173e:	461a      	mov	r2, r3
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	4413      	add	r3, r2
 8001746:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001750:	4618      	mov	r0, r3
 8001752:	3714      	adds	r7, #20
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800175c:	b480      	push	{r7}
 800175e:	b087      	sub	sp, #28
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	3360      	adds	r3, #96	; 0x60
 800176c:	461a      	mov	r2, r3
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	431a      	orrs	r2, r3
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001786:	bf00      	nop
 8001788:	371c      	adds	r7, #28
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001792:	b480      	push	{r7}
 8001794:	b087      	sub	sp, #28
 8001796:	af00      	add	r7, sp, #0
 8001798:	60f8      	str	r0, [r7, #12]
 800179a:	60b9      	str	r1, [r7, #8]
 800179c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	3330      	adds	r3, #48	; 0x30
 80017a2:	461a      	mov	r2, r3
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	0a1b      	lsrs	r3, r3, #8
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	f003 030c 	and.w	r3, r3, #12
 80017ae:	4413      	add	r3, r2
 80017b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	f003 031f 	and.w	r3, r3, #31
 80017bc:	211f      	movs	r1, #31
 80017be:	fa01 f303 	lsl.w	r3, r1, r3
 80017c2:	43db      	mvns	r3, r3
 80017c4:	401a      	ands	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	0e9b      	lsrs	r3, r3, #26
 80017ca:	f003 011f 	and.w	r1, r3, #31
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	f003 031f 	and.w	r3, r3, #31
 80017d4:	fa01 f303 	lsl.w	r3, r1, r3
 80017d8:	431a      	orrs	r2, r3
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80017de:	bf00      	nop
 80017e0:	371c      	adds	r7, #28
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b087      	sub	sp, #28
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	60f8      	str	r0, [r7, #12]
 80017f2:	60b9      	str	r1, [r7, #8]
 80017f4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	3314      	adds	r3, #20
 80017fa:	461a      	mov	r2, r3
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	0e5b      	lsrs	r3, r3, #25
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	f003 0304 	and.w	r3, r3, #4
 8001806:	4413      	add	r3, r2
 8001808:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	0d1b      	lsrs	r3, r3, #20
 8001812:	f003 031f 	and.w	r3, r3, #31
 8001816:	2107      	movs	r1, #7
 8001818:	fa01 f303 	lsl.w	r3, r1, r3
 800181c:	43db      	mvns	r3, r3
 800181e:	401a      	ands	r2, r3
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	0d1b      	lsrs	r3, r3, #20
 8001824:	f003 031f 	and.w	r3, r3, #31
 8001828:	6879      	ldr	r1, [r7, #4]
 800182a:	fa01 f303 	lsl.w	r3, r1, r3
 800182e:	431a      	orrs	r2, r3
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001834:	bf00      	nop
 8001836:	371c      	adds	r7, #28
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001858:	43db      	mvns	r3, r3
 800185a:	401a      	ands	r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f003 0318 	and.w	r3, r3, #24
 8001862:	4908      	ldr	r1, [pc, #32]	; (8001884 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001864:	40d9      	lsrs	r1, r3
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	400b      	ands	r3, r1
 800186a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800186e:	431a      	orrs	r2, r3
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001876:	bf00      	nop
 8001878:	3714      	adds	r7, #20
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	0007ffff 	.word	0x0007ffff

08001888 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001898:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	6093      	str	r3, [r2, #8]
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80018bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80018c0:	d101      	bne.n	80018c6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80018c2:	2301      	movs	r3, #1
 80018c4:	e000      	b.n	80018c8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80018e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001910:	d101      	bne.n	8001916 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001912:	2301      	movs	r3, #1
 8001914:	e000      	b.n	8001918 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001916:	2300      	movs	r3, #0
}
 8001918:	4618      	mov	r0, r3
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f003 0301 	and.w	r3, r3, #1
 8001934:	2b01      	cmp	r3, #1
 8001936:	d101      	bne.n	800193c <LL_ADC_IsEnabled+0x18>
 8001938:	2301      	movs	r3, #1
 800193a:	e000      	b.n	800193e <LL_ADC_IsEnabled+0x1a>
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800194a:	b480      	push	{r7}
 800194c:	b083      	sub	sp, #12
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f003 0304 	and.w	r3, r3, #4
 800195a:	2b04      	cmp	r3, #4
 800195c:	d101      	bne.n	8001962 <LL_ADC_REG_IsConversionOngoing+0x18>
 800195e:	2301      	movs	r3, #1
 8001960:	e000      	b.n	8001964 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f003 0308 	and.w	r3, r3, #8
 8001980:	2b08      	cmp	r3, #8
 8001982:	d101      	bne.n	8001988 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001984:	2301      	movs	r3, #1
 8001986:	e000      	b.n	800198a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
	...

08001998 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b088      	sub	sp, #32
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019a0:	2300      	movs	r3, #0
 80019a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e12c      	b.n	8001c0c <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d109      	bne.n	80019d4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f7ff fb5b 	bl	800107c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff ff67 	bl	80018ac <LL_ADC_IsDeepPowerDownEnabled>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d004      	beq.n	80019ee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff ff4d 	bl	8001888 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff ff82 	bl	80018fc <LL_ADC_IsInternalRegulatorEnabled>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d115      	bne.n	8001a2a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff ff66 	bl	80018d4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a08:	4b82      	ldr	r3, [pc, #520]	; (8001c14 <HAL_ADC_Init+0x27c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	099b      	lsrs	r3, r3, #6
 8001a0e:	4a82      	ldr	r2, [pc, #520]	; (8001c18 <HAL_ADC_Init+0x280>)
 8001a10:	fba2 2303 	umull	r2, r3, r2, r3
 8001a14:	099b      	lsrs	r3, r3, #6
 8001a16:	3301      	adds	r3, #1
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a1c:	e002      	b.n	8001a24 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	3b01      	subs	r3, #1
 8001a22:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1f9      	bne.n	8001a1e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff ff64 	bl	80018fc <LL_ADC_IsInternalRegulatorEnabled>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d10d      	bne.n	8001a56 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a3e:	f043 0210 	orr.w	r2, r3, #16
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a4a:	f043 0201 	orr.w	r2, r3, #1
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff ff75 	bl	800194a <LL_ADC_REG_IsConversionOngoing>
 8001a60:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a66:	f003 0310 	and.w	r3, r3, #16
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f040 80c5 	bne.w	8001bfa <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f040 80c1 	bne.w	8001bfa <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a7c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001a80:	f043 0202 	orr.w	r2, r3, #2
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff ff49 	bl	8001924 <LL_ADC_IsEnabled>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d10b      	bne.n	8001ab0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a98:	4860      	ldr	r0, [pc, #384]	; (8001c1c <HAL_ADC_Init+0x284>)
 8001a9a:	f7ff ff43 	bl	8001924 <LL_ADC_IsEnabled>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d105      	bne.n	8001ab0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	485d      	ldr	r0, [pc, #372]	; (8001c20 <HAL_ADC_Init+0x288>)
 8001aac:	f7ff fde8 	bl	8001680 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	7e5b      	ldrb	r3, [r3, #25]
 8001ab4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001aba:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001ac0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001ac6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ace:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d106      	bne.n	8001aec <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	045b      	lsls	r3, r3, #17
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d009      	beq.n	8001b08 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b00:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	68da      	ldr	r2, [r3, #12]
 8001b0e:	4b45      	ldr	r3, [pc, #276]	; (8001c24 <HAL_ADC_Init+0x28c>)
 8001b10:	4013      	ands	r3, r2
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	6812      	ldr	r2, [r2, #0]
 8001b16:	69b9      	ldr	r1, [r7, #24]
 8001b18:	430b      	orrs	r3, r1
 8001b1a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff ff12 	bl	800194a <LL_ADC_REG_IsConversionOngoing>
 8001b26:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff ff1f 	bl	8001970 <LL_ADC_INJ_IsConversionOngoing>
 8001b32:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d13d      	bne.n	8001bb6 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d13a      	bne.n	8001bb6 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b44:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b4c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b5c:	f023 0302 	bic.w	r3, r3, #2
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	6812      	ldr	r2, [r2, #0]
 8001b64:	69b9      	ldr	r1, [r7, #24]
 8001b66:	430b      	orrs	r3, r1
 8001b68:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d118      	bne.n	8001ba6 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001b7e:	f023 0304 	bic.w	r3, r3, #4
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b8a:	4311      	orrs	r1, r2
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001b90:	4311      	orrs	r1, r2
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001b96:	430a      	orrs	r2, r1
 8001b98:	431a      	orrs	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f042 0201 	orr.w	r2, r2, #1
 8001ba2:	611a      	str	r2, [r3, #16]
 8001ba4:	e007      	b.n	8001bb6 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	691a      	ldr	r2, [r3, #16]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f022 0201 	bic.w	r2, r2, #1
 8001bb4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d10c      	bne.n	8001bd8 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc4:	f023 010f 	bic.w	r1, r3, #15
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	69db      	ldr	r3, [r3, #28]
 8001bcc:	1e5a      	subs	r2, r3, #1
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	631a      	str	r2, [r3, #48]	; 0x30
 8001bd6:	e007      	b.n	8001be8 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f022 020f 	bic.w	r2, r2, #15
 8001be6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bec:	f023 0303 	bic.w	r3, r3, #3
 8001bf0:	f043 0201 	orr.w	r2, r3, #1
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	655a      	str	r2, [r3, #84]	; 0x54
 8001bf8:	e007      	b.n	8001c0a <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bfe:	f043 0210 	orr.w	r2, r3, #16
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c0a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3720      	adds	r7, #32
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20002874 	.word	0x20002874
 8001c18:	053e2d63 	.word	0x053e2d63
 8001c1c:	50040000 	.word	0x50040000
 8001c20:	50040300 	.word	0x50040300
 8001c24:	fff0c007 	.word	0xfff0c007

08001c28 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b0b6      	sub	sp, #216	; 0xd8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c32:	2300      	movs	r3, #0
 8001c34:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d101      	bne.n	8001c4a <HAL_ADC_ConfigChannel+0x22>
 8001c46:	2302      	movs	r3, #2
 8001c48:	e3b9      	b.n	80023be <HAL_ADC_ConfigChannel+0x796>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff fe77 	bl	800194a <LL_ADC_REG_IsConversionOngoing>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f040 839e 	bne.w	80023a0 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	2b05      	cmp	r3, #5
 8001c6a:	d824      	bhi.n	8001cb6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	3b02      	subs	r3, #2
 8001c72:	2b03      	cmp	r3, #3
 8001c74:	d81b      	bhi.n	8001cae <HAL_ADC_ConfigChannel+0x86>
 8001c76:	a201      	add	r2, pc, #4	; (adr r2, 8001c7c <HAL_ADC_ConfigChannel+0x54>)
 8001c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c7c:	08001c8d 	.word	0x08001c8d
 8001c80:	08001c95 	.word	0x08001c95
 8001c84:	08001c9d 	.word	0x08001c9d
 8001c88:	08001ca5 	.word	0x08001ca5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	220c      	movs	r2, #12
 8001c90:	605a      	str	r2, [r3, #4]
          break;
 8001c92:	e011      	b.n	8001cb8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	2212      	movs	r2, #18
 8001c98:	605a      	str	r2, [r3, #4]
          break;
 8001c9a:	e00d      	b.n	8001cb8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	2218      	movs	r2, #24
 8001ca0:	605a      	str	r2, [r3, #4]
          break;
 8001ca2:	e009      	b.n	8001cb8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001caa:	605a      	str	r2, [r3, #4]
          break;
 8001cac:	e004      	b.n	8001cb8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	2206      	movs	r2, #6
 8001cb2:	605a      	str	r2, [r3, #4]
          break;
 8001cb4:	e000      	b.n	8001cb8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001cb6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6818      	ldr	r0, [r3, #0]
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	6859      	ldr	r1, [r3, #4]
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	f7ff fd64 	bl	8001792 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff fe3b 	bl	800194a <LL_ADC_REG_IsConversionOngoing>
 8001cd4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff fe47 	bl	8001970 <LL_ADC_INJ_IsConversionOngoing>
 8001ce2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ce6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f040 81a6 	bne.w	800203c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001cf0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	f040 81a1 	bne.w	800203c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6818      	ldr	r0, [r3, #0]
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	6819      	ldr	r1, [r3, #0]
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	461a      	mov	r2, r3
 8001d08:	f7ff fd6f 	bl	80017ea <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	695a      	ldr	r2, [r3, #20]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	08db      	lsrs	r3, r3, #3
 8001d18:	f003 0303 	and.w	r3, r3, #3
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	d00a      	beq.n	8001d44 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6818      	ldr	r0, [r3, #0]
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	6919      	ldr	r1, [r3, #16]
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001d3e:	f7ff fcd3 	bl	80016e8 <LL_ADC_SetOffset>
 8001d42:	e17b      	b.n	800203c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2100      	movs	r1, #0
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff fcf0 	bl	8001730 <LL_ADC_GetOffsetChannel>
 8001d50:	4603      	mov	r3, r0
 8001d52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d10a      	bne.n	8001d70 <HAL_ADC_ConfigChannel+0x148>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2100      	movs	r1, #0
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff fce5 	bl	8001730 <LL_ADC_GetOffsetChannel>
 8001d66:	4603      	mov	r3, r0
 8001d68:	0e9b      	lsrs	r3, r3, #26
 8001d6a:	f003 021f 	and.w	r2, r3, #31
 8001d6e:	e01e      	b.n	8001dae <HAL_ADC_ConfigChannel+0x186>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2100      	movs	r1, #0
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff fcda 	bl	8001730 <LL_ADC_GetOffsetChannel>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d82:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001d86:	fa93 f3a3 	rbit	r3, r3
 8001d8a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001d92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001d96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001d9e:	2320      	movs	r3, #32
 8001da0:	e004      	b.n	8001dac <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001da2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001da6:	fab3 f383 	clz	r3, r3
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d105      	bne.n	8001dc6 <HAL_ADC_ConfigChannel+0x19e>
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	0e9b      	lsrs	r3, r3, #26
 8001dc0:	f003 031f 	and.w	r3, r3, #31
 8001dc4:	e018      	b.n	8001df8 <HAL_ADC_ConfigChannel+0x1d0>
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001dd2:	fa93 f3a3 	rbit	r3, r3
 8001dd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001dda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001dde:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001de2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001dea:	2320      	movs	r3, #32
 8001dec:	e004      	b.n	8001df8 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001dee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001df2:	fab3 f383 	clz	r3, r3
 8001df6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d106      	bne.n	8001e0a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2200      	movs	r2, #0
 8001e02:	2100      	movs	r1, #0
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff fca9 	bl	800175c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2101      	movs	r1, #1
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff fc8d 	bl	8001730 <LL_ADC_GetOffsetChannel>
 8001e16:	4603      	mov	r3, r0
 8001e18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d10a      	bne.n	8001e36 <HAL_ADC_ConfigChannel+0x20e>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2101      	movs	r1, #1
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff fc82 	bl	8001730 <LL_ADC_GetOffsetChannel>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	0e9b      	lsrs	r3, r3, #26
 8001e30:	f003 021f 	and.w	r2, r3, #31
 8001e34:	e01e      	b.n	8001e74 <HAL_ADC_ConfigChannel+0x24c>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff fc77 	bl	8001730 <LL_ADC_GetOffsetChannel>
 8001e42:	4603      	mov	r3, r0
 8001e44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e48:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001e4c:	fa93 f3a3 	rbit	r3, r3
 8001e50:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001e54:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001e58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001e5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d101      	bne.n	8001e68 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001e64:	2320      	movs	r3, #32
 8001e66:	e004      	b.n	8001e72 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001e68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e6c:	fab3 f383 	clz	r3, r3
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d105      	bne.n	8001e8c <HAL_ADC_ConfigChannel+0x264>
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	0e9b      	lsrs	r3, r3, #26
 8001e86:	f003 031f 	and.w	r3, r3, #31
 8001e8a:	e018      	b.n	8001ebe <HAL_ADC_ConfigChannel+0x296>
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e98:	fa93 f3a3 	rbit	r3, r3
 8001e9c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001ea0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001ea4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001ea8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d101      	bne.n	8001eb4 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001eb0:	2320      	movs	r3, #32
 8001eb2:	e004      	b.n	8001ebe <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001eb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001eb8:	fab3 f383 	clz	r3, r3
 8001ebc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d106      	bne.n	8001ed0 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	2101      	movs	r1, #1
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff fc46 	bl	800175c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2102      	movs	r1, #2
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff fc2a 	bl	8001730 <LL_ADC_GetOffsetChannel>
 8001edc:	4603      	mov	r3, r0
 8001ede:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d10a      	bne.n	8001efc <HAL_ADC_ConfigChannel+0x2d4>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2102      	movs	r1, #2
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff fc1f 	bl	8001730 <LL_ADC_GetOffsetChannel>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	0e9b      	lsrs	r3, r3, #26
 8001ef6:	f003 021f 	and.w	r2, r3, #31
 8001efa:	e01e      	b.n	8001f3a <HAL_ADC_ConfigChannel+0x312>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2102      	movs	r1, #2
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff fc14 	bl	8001730 <LL_ADC_GetOffsetChannel>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f12:	fa93 f3a3 	rbit	r3, r3
 8001f16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001f1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001f22:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001f2a:	2320      	movs	r3, #32
 8001f2c:	e004      	b.n	8001f38 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001f2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f32:	fab3 f383 	clz	r3, r3
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d105      	bne.n	8001f52 <HAL_ADC_ConfigChannel+0x32a>
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	0e9b      	lsrs	r3, r3, #26
 8001f4c:	f003 031f 	and.w	r3, r3, #31
 8001f50:	e016      	b.n	8001f80 <HAL_ADC_ConfigChannel+0x358>
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f5e:	fa93 f3a3 	rbit	r3, r3
 8001f62:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001f64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001f6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001f72:	2320      	movs	r3, #32
 8001f74:	e004      	b.n	8001f80 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001f76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f7a:	fab3 f383 	clz	r3, r3
 8001f7e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d106      	bne.n	8001f92 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	2102      	movs	r1, #2
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff fbe5 	bl	800175c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2103      	movs	r1, #3
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff fbc9 	bl	8001730 <LL_ADC_GetOffsetChannel>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d10a      	bne.n	8001fbe <HAL_ADC_ConfigChannel+0x396>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2103      	movs	r1, #3
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff fbbe 	bl	8001730 <LL_ADC_GetOffsetChannel>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	0e9b      	lsrs	r3, r3, #26
 8001fb8:	f003 021f 	and.w	r2, r3, #31
 8001fbc:	e017      	b.n	8001fee <HAL_ADC_ConfigChannel+0x3c6>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2103      	movs	r1, #3
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff fbb3 	bl	8001730 <LL_ADC_GetOffsetChannel>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fd0:	fa93 f3a3 	rbit	r3, r3
 8001fd4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001fd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fd8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001fda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d101      	bne.n	8001fe4 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001fe0:	2320      	movs	r3, #32
 8001fe2:	e003      	b.n	8001fec <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001fe4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001fe6:	fab3 f383 	clz	r3, r3
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d105      	bne.n	8002006 <HAL_ADC_ConfigChannel+0x3de>
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	0e9b      	lsrs	r3, r3, #26
 8002000:	f003 031f 	and.w	r3, r3, #31
 8002004:	e011      	b.n	800202a <HAL_ADC_ConfigChannel+0x402>
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800200e:	fa93 f3a3 	rbit	r3, r3
 8002012:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002014:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002016:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800201e:	2320      	movs	r3, #32
 8002020:	e003      	b.n	800202a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002024:	fab3 f383 	clz	r3, r3
 8002028:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800202a:	429a      	cmp	r2, r3
 800202c:	d106      	bne.n	800203c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2200      	movs	r2, #0
 8002034:	2103      	movs	r1, #3
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff fb90 	bl	800175c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff fc6f 	bl	8001924 <LL_ADC_IsEnabled>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	f040 813f 	bne.w	80022cc <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6818      	ldr	r0, [r3, #0]
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	6819      	ldr	r1, [r3, #0]
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	461a      	mov	r2, r3
 800205c:	f7ff fbf0 	bl	8001840 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	4a8e      	ldr	r2, [pc, #568]	; (80022a0 <HAL_ADC_ConfigChannel+0x678>)
 8002066:	4293      	cmp	r3, r2
 8002068:	f040 8130 	bne.w	80022cc <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002078:	2b00      	cmp	r3, #0
 800207a:	d10b      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x46c>
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	0e9b      	lsrs	r3, r3, #26
 8002082:	3301      	adds	r3, #1
 8002084:	f003 031f 	and.w	r3, r3, #31
 8002088:	2b09      	cmp	r3, #9
 800208a:	bf94      	ite	ls
 800208c:	2301      	movls	r3, #1
 800208e:	2300      	movhi	r3, #0
 8002090:	b2db      	uxtb	r3, r3
 8002092:	e019      	b.n	80020c8 <HAL_ADC_ConfigChannel+0x4a0>
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800209c:	fa93 f3a3 	rbit	r3, r3
 80020a0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80020a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020a4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80020a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d101      	bne.n	80020b0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80020ac:	2320      	movs	r3, #32
 80020ae:	e003      	b.n	80020b8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80020b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020b2:	fab3 f383 	clz	r3, r3
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	3301      	adds	r3, #1
 80020ba:	f003 031f 	and.w	r3, r3, #31
 80020be:	2b09      	cmp	r3, #9
 80020c0:	bf94      	ite	ls
 80020c2:	2301      	movls	r3, #1
 80020c4:	2300      	movhi	r3, #0
 80020c6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d079      	beq.n	80021c0 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d107      	bne.n	80020e8 <HAL_ADC_ConfigChannel+0x4c0>
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	0e9b      	lsrs	r3, r3, #26
 80020de:	3301      	adds	r3, #1
 80020e0:	069b      	lsls	r3, r3, #26
 80020e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020e6:	e015      	b.n	8002114 <HAL_ADC_ConfigChannel+0x4ec>
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020f0:	fa93 f3a3 	rbit	r3, r3
 80020f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80020f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020f8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80020fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d101      	bne.n	8002104 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002100:	2320      	movs	r3, #32
 8002102:	e003      	b.n	800210c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002104:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002106:	fab3 f383 	clz	r3, r3
 800210a:	b2db      	uxtb	r3, r3
 800210c:	3301      	adds	r3, #1
 800210e:	069b      	lsls	r3, r3, #26
 8002110:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800211c:	2b00      	cmp	r3, #0
 800211e:	d109      	bne.n	8002134 <HAL_ADC_ConfigChannel+0x50c>
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	0e9b      	lsrs	r3, r3, #26
 8002126:	3301      	adds	r3, #1
 8002128:	f003 031f 	and.w	r3, r3, #31
 800212c:	2101      	movs	r1, #1
 800212e:	fa01 f303 	lsl.w	r3, r1, r3
 8002132:	e017      	b.n	8002164 <HAL_ADC_ConfigChannel+0x53c>
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800213c:	fa93 f3a3 	rbit	r3, r3
 8002140:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002142:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002144:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002146:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002148:	2b00      	cmp	r3, #0
 800214a:	d101      	bne.n	8002150 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 800214c:	2320      	movs	r3, #32
 800214e:	e003      	b.n	8002158 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002150:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002152:	fab3 f383 	clz	r3, r3
 8002156:	b2db      	uxtb	r3, r3
 8002158:	3301      	adds	r3, #1
 800215a:	f003 031f 	and.w	r3, r3, #31
 800215e:	2101      	movs	r1, #1
 8002160:	fa01 f303 	lsl.w	r3, r1, r3
 8002164:	ea42 0103 	orr.w	r1, r2, r3
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002170:	2b00      	cmp	r3, #0
 8002172:	d10a      	bne.n	800218a <HAL_ADC_ConfigChannel+0x562>
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	0e9b      	lsrs	r3, r3, #26
 800217a:	3301      	adds	r3, #1
 800217c:	f003 021f 	and.w	r2, r3, #31
 8002180:	4613      	mov	r3, r2
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	4413      	add	r3, r2
 8002186:	051b      	lsls	r3, r3, #20
 8002188:	e018      	b.n	80021bc <HAL_ADC_ConfigChannel+0x594>
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002192:	fa93 f3a3 	rbit	r3, r3
 8002196:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800219a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800219c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80021a2:	2320      	movs	r3, #32
 80021a4:	e003      	b.n	80021ae <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80021a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021a8:	fab3 f383 	clz	r3, r3
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	3301      	adds	r3, #1
 80021b0:	f003 021f 	and.w	r2, r3, #31
 80021b4:	4613      	mov	r3, r2
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	4413      	add	r3, r2
 80021ba:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021bc:	430b      	orrs	r3, r1
 80021be:	e080      	b.n	80022c2 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d107      	bne.n	80021dc <HAL_ADC_ConfigChannel+0x5b4>
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	0e9b      	lsrs	r3, r3, #26
 80021d2:	3301      	adds	r3, #1
 80021d4:	069b      	lsls	r3, r3, #26
 80021d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021da:	e015      	b.n	8002208 <HAL_ADC_ConfigChannel+0x5e0>
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021e4:	fa93 f3a3 	rbit	r3, r3
 80021e8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80021ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ec:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80021ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d101      	bne.n	80021f8 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80021f4:	2320      	movs	r3, #32
 80021f6:	e003      	b.n	8002200 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80021f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021fa:	fab3 f383 	clz	r3, r3
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	3301      	adds	r3, #1
 8002202:	069b      	lsls	r3, r3, #26
 8002204:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002210:	2b00      	cmp	r3, #0
 8002212:	d109      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x600>
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	0e9b      	lsrs	r3, r3, #26
 800221a:	3301      	adds	r3, #1
 800221c:	f003 031f 	and.w	r3, r3, #31
 8002220:	2101      	movs	r1, #1
 8002222:	fa01 f303 	lsl.w	r3, r1, r3
 8002226:	e017      	b.n	8002258 <HAL_ADC_ConfigChannel+0x630>
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222e:	6a3b      	ldr	r3, [r7, #32]
 8002230:	fa93 f3a3 	rbit	r3, r3
 8002234:	61fb      	str	r3, [r7, #28]
  return result;
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800223a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223c:	2b00      	cmp	r3, #0
 800223e:	d101      	bne.n	8002244 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002240:	2320      	movs	r3, #32
 8002242:	e003      	b.n	800224c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002246:	fab3 f383 	clz	r3, r3
 800224a:	b2db      	uxtb	r3, r3
 800224c:	3301      	adds	r3, #1
 800224e:	f003 031f 	and.w	r3, r3, #31
 8002252:	2101      	movs	r1, #1
 8002254:	fa01 f303 	lsl.w	r3, r1, r3
 8002258:	ea42 0103 	orr.w	r1, r2, r3
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002264:	2b00      	cmp	r3, #0
 8002266:	d10d      	bne.n	8002284 <HAL_ADC_ConfigChannel+0x65c>
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	0e9b      	lsrs	r3, r3, #26
 800226e:	3301      	adds	r3, #1
 8002270:	f003 021f 	and.w	r2, r3, #31
 8002274:	4613      	mov	r3, r2
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	4413      	add	r3, r2
 800227a:	3b1e      	subs	r3, #30
 800227c:	051b      	lsls	r3, r3, #20
 800227e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002282:	e01d      	b.n	80022c0 <HAL_ADC_ConfigChannel+0x698>
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	fa93 f3a3 	rbit	r3, r3
 8002290:	613b      	str	r3, [r7, #16]
  return result;
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d103      	bne.n	80022a4 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 800229c:	2320      	movs	r3, #32
 800229e:	e005      	b.n	80022ac <HAL_ADC_ConfigChannel+0x684>
 80022a0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	fab3 f383 	clz	r3, r3
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	3301      	adds	r3, #1
 80022ae:	f003 021f 	and.w	r2, r3, #31
 80022b2:	4613      	mov	r3, r2
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	4413      	add	r3, r2
 80022b8:	3b1e      	subs	r3, #30
 80022ba:	051b      	lsls	r3, r3, #20
 80022bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022c0:	430b      	orrs	r3, r1
 80022c2:	683a      	ldr	r2, [r7, #0]
 80022c4:	6892      	ldr	r2, [r2, #8]
 80022c6:	4619      	mov	r1, r3
 80022c8:	f7ff fa8f 	bl	80017ea <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	4b3d      	ldr	r3, [pc, #244]	; (80023c8 <HAL_ADC_ConfigChannel+0x7a0>)
 80022d2:	4013      	ands	r3, r2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d06c      	beq.n	80023b2 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022d8:	483c      	ldr	r0, [pc, #240]	; (80023cc <HAL_ADC_ConfigChannel+0x7a4>)
 80022da:	f7ff f9f7 	bl	80016cc <LL_ADC_GetCommonPathInternalCh>
 80022de:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a3a      	ldr	r2, [pc, #232]	; (80023d0 <HAL_ADC_ConfigChannel+0x7a8>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d127      	bne.n	800233c <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80022ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d121      	bne.n	800233c <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a35      	ldr	r2, [pc, #212]	; (80023d4 <HAL_ADC_ConfigChannel+0x7ac>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d157      	bne.n	80023b2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002302:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002306:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800230a:	4619      	mov	r1, r3
 800230c:	482f      	ldr	r0, [pc, #188]	; (80023cc <HAL_ADC_ConfigChannel+0x7a4>)
 800230e:	f7ff f9ca 	bl	80016a6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002312:	4b31      	ldr	r3, [pc, #196]	; (80023d8 <HAL_ADC_ConfigChannel+0x7b0>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	099b      	lsrs	r3, r3, #6
 8002318:	4a30      	ldr	r2, [pc, #192]	; (80023dc <HAL_ADC_ConfigChannel+0x7b4>)
 800231a:	fba2 2303 	umull	r2, r3, r2, r3
 800231e:	099b      	lsrs	r3, r3, #6
 8002320:	1c5a      	adds	r2, r3, #1
 8002322:	4613      	mov	r3, r2
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	4413      	add	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800232c:	e002      	b.n	8002334 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	3b01      	subs	r3, #1
 8002332:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1f9      	bne.n	800232e <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800233a:	e03a      	b.n	80023b2 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a27      	ldr	r2, [pc, #156]	; (80023e0 <HAL_ADC_ConfigChannel+0x7b8>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d113      	bne.n	800236e <HAL_ADC_ConfigChannel+0x746>
 8002346:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800234a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d10d      	bne.n	800236e <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a1f      	ldr	r2, [pc, #124]	; (80023d4 <HAL_ADC_ConfigChannel+0x7ac>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d12a      	bne.n	80023b2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800235c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002360:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002364:	4619      	mov	r1, r3
 8002366:	4819      	ldr	r0, [pc, #100]	; (80023cc <HAL_ADC_ConfigChannel+0x7a4>)
 8002368:	f7ff f99d 	bl	80016a6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800236c:	e021      	b.n	80023b2 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a1c      	ldr	r2, [pc, #112]	; (80023e4 <HAL_ADC_ConfigChannel+0x7bc>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d11c      	bne.n	80023b2 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002378:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800237c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d116      	bne.n	80023b2 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a12      	ldr	r2, [pc, #72]	; (80023d4 <HAL_ADC_ConfigChannel+0x7ac>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d111      	bne.n	80023b2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800238e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002392:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002396:	4619      	mov	r1, r3
 8002398:	480c      	ldr	r0, [pc, #48]	; (80023cc <HAL_ADC_ConfigChannel+0x7a4>)
 800239a:	f7ff f984 	bl	80016a6 <LL_ADC_SetCommonPathInternalCh>
 800239e:	e008      	b.n	80023b2 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a4:	f043 0220 	orr.w	r2, r3, #32
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80023ba:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80023be:	4618      	mov	r0, r3
 80023c0:	37d8      	adds	r7, #216	; 0xd8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	80080000 	.word	0x80080000
 80023cc:	50040300 	.word	0x50040300
 80023d0:	c7520000 	.word	0xc7520000
 80023d4:	50040000 	.word	0x50040000
 80023d8:	20002874 	.word	0x20002874
 80023dc:	053e2d63 	.word	0x053e2d63
 80023e0:	cb840000 	.word	0xcb840000
 80023e4:	80000001 	.word	0x80000001

080023e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023f8:	4b0c      	ldr	r3, [pc, #48]	; (800242c <__NVIC_SetPriorityGrouping+0x44>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023fe:	68ba      	ldr	r2, [r7, #8]
 8002400:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002404:	4013      	ands	r3, r2
 8002406:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002410:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002414:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002418:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800241a:	4a04      	ldr	r2, [pc, #16]	; (800242c <__NVIC_SetPriorityGrouping+0x44>)
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	60d3      	str	r3, [r2, #12]
}
 8002420:	bf00      	nop
 8002422:	3714      	adds	r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr
 800242c:	e000ed00 	.word	0xe000ed00

08002430 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002434:	4b04      	ldr	r3, [pc, #16]	; (8002448 <__NVIC_GetPriorityGrouping+0x18>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	0a1b      	lsrs	r3, r3, #8
 800243a:	f003 0307 	and.w	r3, r3, #7
}
 800243e:	4618      	mov	r0, r3
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr
 8002448:	e000ed00 	.word	0xe000ed00

0800244c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	4603      	mov	r3, r0
 8002454:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245a:	2b00      	cmp	r3, #0
 800245c:	db0b      	blt.n	8002476 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800245e:	79fb      	ldrb	r3, [r7, #7]
 8002460:	f003 021f 	and.w	r2, r3, #31
 8002464:	4907      	ldr	r1, [pc, #28]	; (8002484 <__NVIC_EnableIRQ+0x38>)
 8002466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246a:	095b      	lsrs	r3, r3, #5
 800246c:	2001      	movs	r0, #1
 800246e:	fa00 f202 	lsl.w	r2, r0, r2
 8002472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	e000e100 	.word	0xe000e100

08002488 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	4603      	mov	r3, r0
 8002490:	6039      	str	r1, [r7, #0]
 8002492:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002498:	2b00      	cmp	r3, #0
 800249a:	db0a      	blt.n	80024b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	b2da      	uxtb	r2, r3
 80024a0:	490c      	ldr	r1, [pc, #48]	; (80024d4 <__NVIC_SetPriority+0x4c>)
 80024a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a6:	0112      	lsls	r2, r2, #4
 80024a8:	b2d2      	uxtb	r2, r2
 80024aa:	440b      	add	r3, r1
 80024ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024b0:	e00a      	b.n	80024c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	b2da      	uxtb	r2, r3
 80024b6:	4908      	ldr	r1, [pc, #32]	; (80024d8 <__NVIC_SetPriority+0x50>)
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	f003 030f 	and.w	r3, r3, #15
 80024be:	3b04      	subs	r3, #4
 80024c0:	0112      	lsls	r2, r2, #4
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	440b      	add	r3, r1
 80024c6:	761a      	strb	r2, [r3, #24]
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	e000e100 	.word	0xe000e100
 80024d8:	e000ed00 	.word	0xe000ed00

080024dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024dc:	b480      	push	{r7}
 80024de:	b089      	sub	sp, #36	; 0x24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	f1c3 0307 	rsb	r3, r3, #7
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	bf28      	it	cs
 80024fa:	2304      	movcs	r3, #4
 80024fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	3304      	adds	r3, #4
 8002502:	2b06      	cmp	r3, #6
 8002504:	d902      	bls.n	800250c <NVIC_EncodePriority+0x30>
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	3b03      	subs	r3, #3
 800250a:	e000      	b.n	800250e <NVIC_EncodePriority+0x32>
 800250c:	2300      	movs	r3, #0
 800250e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002510:	f04f 32ff 	mov.w	r2, #4294967295
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	43da      	mvns	r2, r3
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	401a      	ands	r2, r3
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002524:	f04f 31ff 	mov.w	r1, #4294967295
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	fa01 f303 	lsl.w	r3, r1, r3
 800252e:	43d9      	mvns	r1, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002534:	4313      	orrs	r3, r2
         );
}
 8002536:	4618      	mov	r0, r3
 8002538:	3724      	adds	r7, #36	; 0x24
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
	...

08002544 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	3b01      	subs	r3, #1
 8002550:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002554:	d301      	bcc.n	800255a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002556:	2301      	movs	r3, #1
 8002558:	e00f      	b.n	800257a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800255a:	4a0a      	ldr	r2, [pc, #40]	; (8002584 <SysTick_Config+0x40>)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	3b01      	subs	r3, #1
 8002560:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002562:	210f      	movs	r1, #15
 8002564:	f04f 30ff 	mov.w	r0, #4294967295
 8002568:	f7ff ff8e 	bl	8002488 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800256c:	4b05      	ldr	r3, [pc, #20]	; (8002584 <SysTick_Config+0x40>)
 800256e:	2200      	movs	r2, #0
 8002570:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002572:	4b04      	ldr	r3, [pc, #16]	; (8002584 <SysTick_Config+0x40>)
 8002574:	2207      	movs	r2, #7
 8002576:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	e000e010 	.word	0xe000e010

08002588 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f7ff ff29 	bl	80023e8 <__NVIC_SetPriorityGrouping>
}
 8002596:	bf00      	nop
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b086      	sub	sp, #24
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	4603      	mov	r3, r0
 80025a6:	60b9      	str	r1, [r7, #8]
 80025a8:	607a      	str	r2, [r7, #4]
 80025aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80025ac:	2300      	movs	r3, #0
 80025ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80025b0:	f7ff ff3e 	bl	8002430 <__NVIC_GetPriorityGrouping>
 80025b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	68b9      	ldr	r1, [r7, #8]
 80025ba:	6978      	ldr	r0, [r7, #20]
 80025bc:	f7ff ff8e 	bl	80024dc <NVIC_EncodePriority>
 80025c0:	4602      	mov	r2, r0
 80025c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025c6:	4611      	mov	r1, r2
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff ff5d 	bl	8002488 <__NVIC_SetPriority>
}
 80025ce:	bf00      	nop
 80025d0:	3718      	adds	r7, #24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b082      	sub	sp, #8
 80025da:	af00      	add	r7, sp, #0
 80025dc:	4603      	mov	r3, r0
 80025de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff ff31 	bl	800244c <__NVIC_EnableIRQ>
}
 80025ea:	bf00      	nop
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b082      	sub	sp, #8
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f7ff ffa2 	bl	8002544 <SysTick_Config>
 8002600:	4603      	mov	r3, r0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
	...

0800260c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e098      	b.n	8002750 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	461a      	mov	r2, r3
 8002624:	4b4d      	ldr	r3, [pc, #308]	; (800275c <HAL_DMA_Init+0x150>)
 8002626:	429a      	cmp	r2, r3
 8002628:	d80f      	bhi.n	800264a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	461a      	mov	r2, r3
 8002630:	4b4b      	ldr	r3, [pc, #300]	; (8002760 <HAL_DMA_Init+0x154>)
 8002632:	4413      	add	r3, r2
 8002634:	4a4b      	ldr	r2, [pc, #300]	; (8002764 <HAL_DMA_Init+0x158>)
 8002636:	fba2 2303 	umull	r2, r3, r2, r3
 800263a:	091b      	lsrs	r3, r3, #4
 800263c:	009a      	lsls	r2, r3, #2
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a48      	ldr	r2, [pc, #288]	; (8002768 <HAL_DMA_Init+0x15c>)
 8002646:	641a      	str	r2, [r3, #64]	; 0x40
 8002648:	e00e      	b.n	8002668 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	461a      	mov	r2, r3
 8002650:	4b46      	ldr	r3, [pc, #280]	; (800276c <HAL_DMA_Init+0x160>)
 8002652:	4413      	add	r3, r2
 8002654:	4a43      	ldr	r2, [pc, #268]	; (8002764 <HAL_DMA_Init+0x158>)
 8002656:	fba2 2303 	umull	r2, r3, r2, r3
 800265a:	091b      	lsrs	r3, r3, #4
 800265c:	009a      	lsls	r2, r3, #2
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a42      	ldr	r2, [pc, #264]	; (8002770 <HAL_DMA_Init+0x164>)
 8002666:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2202      	movs	r2, #2
 800266c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800267e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002682:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800268c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002698:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026c2:	d039      	beq.n	8002738 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c8:	4a27      	ldr	r2, [pc, #156]	; (8002768 <HAL_DMA_Init+0x15c>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d11a      	bne.n	8002704 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80026ce:	4b29      	ldr	r3, [pc, #164]	; (8002774 <HAL_DMA_Init+0x168>)
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d6:	f003 031c 	and.w	r3, r3, #28
 80026da:	210f      	movs	r1, #15
 80026dc:	fa01 f303 	lsl.w	r3, r1, r3
 80026e0:	43db      	mvns	r3, r3
 80026e2:	4924      	ldr	r1, [pc, #144]	; (8002774 <HAL_DMA_Init+0x168>)
 80026e4:	4013      	ands	r3, r2
 80026e6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80026e8:	4b22      	ldr	r3, [pc, #136]	; (8002774 <HAL_DMA_Init+0x168>)
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6859      	ldr	r1, [r3, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f4:	f003 031c 	and.w	r3, r3, #28
 80026f8:	fa01 f303 	lsl.w	r3, r1, r3
 80026fc:	491d      	ldr	r1, [pc, #116]	; (8002774 <HAL_DMA_Init+0x168>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	600b      	str	r3, [r1, #0]
 8002702:	e019      	b.n	8002738 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002704:	4b1c      	ldr	r3, [pc, #112]	; (8002778 <HAL_DMA_Init+0x16c>)
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270c:	f003 031c 	and.w	r3, r3, #28
 8002710:	210f      	movs	r1, #15
 8002712:	fa01 f303 	lsl.w	r3, r1, r3
 8002716:	43db      	mvns	r3, r3
 8002718:	4917      	ldr	r1, [pc, #92]	; (8002778 <HAL_DMA_Init+0x16c>)
 800271a:	4013      	ands	r3, r2
 800271c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800271e:	4b16      	ldr	r3, [pc, #88]	; (8002778 <HAL_DMA_Init+0x16c>)
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6859      	ldr	r1, [r3, #4]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272a:	f003 031c 	and.w	r3, r3, #28
 800272e:	fa01 f303 	lsl.w	r3, r1, r3
 8002732:	4911      	ldr	r1, [pc, #68]	; (8002778 <HAL_DMA_Init+0x16c>)
 8002734:	4313      	orrs	r3, r2
 8002736:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	3714      	adds	r7, #20
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	40020407 	.word	0x40020407
 8002760:	bffdfff8 	.word	0xbffdfff8
 8002764:	cccccccd 	.word	0xcccccccd
 8002768:	40020000 	.word	0x40020000
 800276c:	bffdfbf8 	.word	0xbffdfbf8
 8002770:	40020400 	.word	0x40020400
 8002774:	400200a8 	.word	0x400200a8
 8002778:	400204a8 	.word	0x400204a8

0800277c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
 8002788:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800278a:	2300      	movs	r3, #0
 800278c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002794:	2b01      	cmp	r3, #1
 8002796:	d101      	bne.n	800279c <HAL_DMA_Start_IT+0x20>
 8002798:	2302      	movs	r3, #2
 800279a:	e04b      	b.n	8002834 <HAL_DMA_Start_IT+0xb8>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d13a      	bne.n	8002826 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2202      	movs	r2, #2
 80027b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f022 0201 	bic.w	r2, r2, #1
 80027cc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	68b9      	ldr	r1, [r7, #8]
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	f000 f95f 	bl	8002a98 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d008      	beq.n	80027f4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f042 020e 	orr.w	r2, r2, #14
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	e00f      	b.n	8002814 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 0204 	bic.w	r2, r2, #4
 8002802:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f042 020a 	orr.w	r2, r2, #10
 8002812:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f042 0201 	orr.w	r2, r2, #1
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	e005      	b.n	8002832 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800282e:	2302      	movs	r3, #2
 8002830:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002832:	7dfb      	ldrb	r3, [r7, #23]
}
 8002834:	4618      	mov	r0, r3
 8002836:	3718      	adds	r7, #24
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002844:	2300      	movs	r3, #0
 8002846:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800284e:	b2db      	uxtb	r3, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d008      	beq.n	8002866 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2204      	movs	r2, #4
 8002858:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e022      	b.n	80028ac <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f022 020e 	bic.w	r2, r2, #14
 8002874:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f022 0201 	bic.w	r2, r2, #1
 8002884:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288a:	f003 021c 	and.w	r2, r3, #28
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	2101      	movs	r1, #1
 8002894:	fa01 f202 	lsl.w	r2, r1, r2
 8002898:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2201      	movs	r2, #1
 800289e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80028aa:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3714      	adds	r7, #20
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028c0:	2300      	movs	r3, #0
 80028c2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d005      	beq.n	80028dc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2204      	movs	r2, #4
 80028d4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	73fb      	strb	r3, [r7, #15]
 80028da:	e029      	b.n	8002930 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 020e 	bic.w	r2, r2, #14
 80028ea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 0201 	bic.w	r2, r2, #1
 80028fa:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002900:	f003 021c 	and.w	r2, r3, #28
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	2101      	movs	r1, #1
 800290a:	fa01 f202 	lsl.w	r2, r1, r2
 800290e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002924:	2b00      	cmp	r3, #0
 8002926:	d003      	beq.n	8002930 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	4798      	blx	r3
    }
  }
  return status;
 8002930:	7bfb      	ldrb	r3, [r7, #15]
}
 8002932:	4618      	mov	r0, r3
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b084      	sub	sp, #16
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002956:	f003 031c 	and.w	r3, r3, #28
 800295a:	2204      	movs	r2, #4
 800295c:	409a      	lsls	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	4013      	ands	r3, r2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d026      	beq.n	80029b4 <HAL_DMA_IRQHandler+0x7a>
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	f003 0304 	and.w	r3, r3, #4
 800296c:	2b00      	cmp	r3, #0
 800296e:	d021      	beq.n	80029b4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0320 	and.w	r3, r3, #32
 800297a:	2b00      	cmp	r3, #0
 800297c:	d107      	bne.n	800298e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f022 0204 	bic.w	r2, r2, #4
 800298c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002992:	f003 021c 	and.w	r2, r3, #28
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	2104      	movs	r1, #4
 800299c:	fa01 f202 	lsl.w	r2, r1, r2
 80029a0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d071      	beq.n	8002a8e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80029b2:	e06c      	b.n	8002a8e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b8:	f003 031c 	and.w	r3, r3, #28
 80029bc:	2202      	movs	r2, #2
 80029be:	409a      	lsls	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	4013      	ands	r3, r2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d02e      	beq.n	8002a26 <HAL_DMA_IRQHandler+0xec>
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d029      	beq.n	8002a26 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0320 	and.w	r3, r3, #32
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d10b      	bne.n	80029f8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f022 020a 	bic.w	r2, r2, #10
 80029ee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fc:	f003 021c 	and.w	r2, r3, #28
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a04:	2102      	movs	r1, #2
 8002a06:	fa01 f202 	lsl.w	r2, r1, r2
 8002a0a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d038      	beq.n	8002a8e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002a24:	e033      	b.n	8002a8e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2a:	f003 031c 	and.w	r3, r3, #28
 8002a2e:	2208      	movs	r2, #8
 8002a30:	409a      	lsls	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	4013      	ands	r3, r2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d02a      	beq.n	8002a90 <HAL_DMA_IRQHandler+0x156>
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	f003 0308 	and.w	r3, r3, #8
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d025      	beq.n	8002a90 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f022 020e 	bic.w	r2, r2, #14
 8002a52:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a58:	f003 021c 	and.w	r2, r3, #28
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a60:	2101      	movs	r1, #1
 8002a62:	fa01 f202 	lsl.w	r2, r1, r2
 8002a66:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d004      	beq.n	8002a90 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002a8e:	bf00      	nop
 8002a90:	bf00      	nop
}
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
 8002aa4:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aaa:	f003 021c 	and.w	r2, r3, #28
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ab8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	2b10      	cmp	r3, #16
 8002ac8:	d108      	bne.n	8002adc <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68ba      	ldr	r2, [r7, #8]
 8002ad8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002ada:	e007      	b.n	8002aec <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68ba      	ldr	r2, [r7, #8]
 8002ae2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	60da      	str	r2, [r3, #12]
}
 8002aec:	bf00      	nop
 8002aee:	3714      	adds	r7, #20
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b087      	sub	sp, #28
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b02:	2300      	movs	r3, #0
 8002b04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b06:	e148      	b.n	8002d9a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	fa01 f303 	lsl.w	r3, r1, r3
 8002b14:	4013      	ands	r3, r2
 8002b16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	f000 813a 	beq.w	8002d94 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f003 0303 	and.w	r3, r3, #3
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d005      	beq.n	8002b38 <HAL_GPIO_Init+0x40>
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f003 0303 	and.w	r3, r3, #3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d130      	bne.n	8002b9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	2203      	movs	r2, #3
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	68da      	ldr	r2, [r3, #12]
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b6e:	2201      	movs	r2, #1
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	43db      	mvns	r3, r3
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	091b      	lsrs	r3, r3, #4
 8002b84:	f003 0201 	and.w	r2, r3, #1
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f003 0303 	and.w	r3, r3, #3
 8002ba2:	2b03      	cmp	r3, #3
 8002ba4:	d017      	beq.n	8002bd6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	2203      	movs	r2, #3
 8002bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb6:	43db      	mvns	r3, r3
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	689a      	ldr	r2, [r3, #8]
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f003 0303 	and.w	r3, r3, #3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d123      	bne.n	8002c2a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	08da      	lsrs	r2, r3, #3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	3208      	adds	r2, #8
 8002bea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	f003 0307 	and.w	r3, r3, #7
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	220f      	movs	r2, #15
 8002bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	693a      	ldr	r2, [r7, #16]
 8002c02:	4013      	ands	r3, r2
 8002c04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	691a      	ldr	r2, [r3, #16]
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	fa02 f303 	lsl.w	r3, r2, r3
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	08da      	lsrs	r2, r3, #3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	3208      	adds	r2, #8
 8002c24:	6939      	ldr	r1, [r7, #16]
 8002c26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	2203      	movs	r2, #3
 8002c36:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3a:	43db      	mvns	r3, r3
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	4013      	ands	r3, r2
 8002c40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f003 0203 	and.w	r2, r3, #3
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f000 8094 	beq.w	8002d94 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c6c:	4b52      	ldr	r3, [pc, #328]	; (8002db8 <HAL_GPIO_Init+0x2c0>)
 8002c6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c70:	4a51      	ldr	r2, [pc, #324]	; (8002db8 <HAL_GPIO_Init+0x2c0>)
 8002c72:	f043 0301 	orr.w	r3, r3, #1
 8002c76:	6613      	str	r3, [r2, #96]	; 0x60
 8002c78:	4b4f      	ldr	r3, [pc, #316]	; (8002db8 <HAL_GPIO_Init+0x2c0>)
 8002c7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c7c:	f003 0301 	and.w	r3, r3, #1
 8002c80:	60bb      	str	r3, [r7, #8]
 8002c82:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c84:	4a4d      	ldr	r2, [pc, #308]	; (8002dbc <HAL_GPIO_Init+0x2c4>)
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	089b      	lsrs	r3, r3, #2
 8002c8a:	3302      	adds	r3, #2
 8002c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	f003 0303 	and.w	r3, r3, #3
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	220f      	movs	r2, #15
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002cae:	d00d      	beq.n	8002ccc <HAL_GPIO_Init+0x1d4>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a43      	ldr	r2, [pc, #268]	; (8002dc0 <HAL_GPIO_Init+0x2c8>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d007      	beq.n	8002cc8 <HAL_GPIO_Init+0x1d0>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a42      	ldr	r2, [pc, #264]	; (8002dc4 <HAL_GPIO_Init+0x2cc>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d101      	bne.n	8002cc4 <HAL_GPIO_Init+0x1cc>
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	e004      	b.n	8002cce <HAL_GPIO_Init+0x1d6>
 8002cc4:	2307      	movs	r3, #7
 8002cc6:	e002      	b.n	8002cce <HAL_GPIO_Init+0x1d6>
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e000      	b.n	8002cce <HAL_GPIO_Init+0x1d6>
 8002ccc:	2300      	movs	r3, #0
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	f002 0203 	and.w	r2, r2, #3
 8002cd4:	0092      	lsls	r2, r2, #2
 8002cd6:	4093      	lsls	r3, r2
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002cde:	4937      	ldr	r1, [pc, #220]	; (8002dbc <HAL_GPIO_Init+0x2c4>)
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	089b      	lsrs	r3, r3, #2
 8002ce4:	3302      	adds	r3, #2
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002cec:	4b36      	ldr	r3, [pc, #216]	; (8002dc8 <HAL_GPIO_Init+0x2d0>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d003      	beq.n	8002d10 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002d08:	693a      	ldr	r2, [r7, #16]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d10:	4a2d      	ldr	r2, [pc, #180]	; (8002dc8 <HAL_GPIO_Init+0x2d0>)
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d16:	4b2c      	ldr	r3, [pc, #176]	; (8002dc8 <HAL_GPIO_Init+0x2d0>)
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	43db      	mvns	r3, r3
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	4013      	ands	r3, r2
 8002d24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d003      	beq.n	8002d3a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d3a:	4a23      	ldr	r2, [pc, #140]	; (8002dc8 <HAL_GPIO_Init+0x2d0>)
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002d40:	4b21      	ldr	r3, [pc, #132]	; (8002dc8 <HAL_GPIO_Init+0x2d0>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d003      	beq.n	8002d64 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d64:	4a18      	ldr	r2, [pc, #96]	; (8002dc8 <HAL_GPIO_Init+0x2d0>)
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002d6a:	4b17      	ldr	r3, [pc, #92]	; (8002dc8 <HAL_GPIO_Init+0x2d0>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	43db      	mvns	r3, r3
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	4013      	ands	r3, r2
 8002d78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d8e:	4a0e      	ldr	r2, [pc, #56]	; (8002dc8 <HAL_GPIO_Init+0x2d0>)
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	3301      	adds	r3, #1
 8002d98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	fa22 f303 	lsr.w	r3, r2, r3
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f47f aeaf 	bne.w	8002b08 <HAL_GPIO_Init+0x10>
  }
}
 8002daa:	bf00      	nop
 8002dac:	bf00      	nop
 8002dae:	371c      	adds	r7, #28
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	40010000 	.word	0x40010000
 8002dc0:	48000400 	.word	0x48000400
 8002dc4:	48000800 	.word	0x48000800
 8002dc8:	40010400 	.word	0x40010400

08002dcc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002dd0:	4b04      	ldr	r3, [pc, #16]	; (8002de4 <HAL_PWREx_GetVoltageRange+0x18>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	40007000 	.word	0x40007000

08002de8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002df6:	d130      	bne.n	8002e5a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002df8:	4b23      	ldr	r3, [pc, #140]	; (8002e88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e04:	d038      	beq.n	8002e78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e06:	4b20      	ldr	r3, [pc, #128]	; (8002e88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e0e:	4a1e      	ldr	r2, [pc, #120]	; (8002e88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e14:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e16:	4b1d      	ldr	r3, [pc, #116]	; (8002e8c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2232      	movs	r2, #50	; 0x32
 8002e1c:	fb02 f303 	mul.w	r3, r2, r3
 8002e20:	4a1b      	ldr	r2, [pc, #108]	; (8002e90 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002e22:	fba2 2303 	umull	r2, r3, r2, r3
 8002e26:	0c9b      	lsrs	r3, r3, #18
 8002e28:	3301      	adds	r3, #1
 8002e2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e2c:	e002      	b.n	8002e34 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	3b01      	subs	r3, #1
 8002e32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e34:	4b14      	ldr	r3, [pc, #80]	; (8002e88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e36:	695b      	ldr	r3, [r3, #20]
 8002e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e40:	d102      	bne.n	8002e48 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d1f2      	bne.n	8002e2e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e48:	4b0f      	ldr	r3, [pc, #60]	; (8002e88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e4a:	695b      	ldr	r3, [r3, #20]
 8002e4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e54:	d110      	bne.n	8002e78 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e00f      	b.n	8002e7a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e5a:	4b0b      	ldr	r3, [pc, #44]	; (8002e88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e66:	d007      	beq.n	8002e78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e68:	4b07      	ldr	r3, [pc, #28]	; (8002e88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e70:	4a05      	ldr	r2, [pc, #20]	; (8002e88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e76:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3714      	adds	r7, #20
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	40007000 	.word	0x40007000
 8002e8c:	20002874 	.word	0x20002874
 8002e90:	431bde83 	.word	0x431bde83

08002e94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b088      	sub	sp, #32
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d102      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	f000 bc02 	b.w	80036ac <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ea8:	4b96      	ldr	r3, [pc, #600]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f003 030c 	and.w	r3, r3, #12
 8002eb0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002eb2:	4b94      	ldr	r3, [pc, #592]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	f003 0303 	and.w	r3, r3, #3
 8002eba:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0310 	and.w	r3, r3, #16
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f000 80e4 	beq.w	8003092 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d007      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x4c>
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	2b0c      	cmp	r3, #12
 8002ed4:	f040 808b 	bne.w	8002fee <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	f040 8087 	bne.w	8002fee <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ee0:	4b88      	ldr	r3, [pc, #544]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d005      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x64>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d101      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e3d9      	b.n	80036ac <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a1a      	ldr	r2, [r3, #32]
 8002efc:	4b81      	ldr	r3, [pc, #516]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0308 	and.w	r3, r3, #8
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d004      	beq.n	8002f12 <HAL_RCC_OscConfig+0x7e>
 8002f08:	4b7e      	ldr	r3, [pc, #504]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f10:	e005      	b.n	8002f1e <HAL_RCC_OscConfig+0x8a>
 8002f12:	4b7c      	ldr	r3, [pc, #496]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 8002f14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f18:	091b      	lsrs	r3, r3, #4
 8002f1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d223      	bcs.n	8002f6a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a1b      	ldr	r3, [r3, #32]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f000 fd8c 	bl	8003a44 <RCC_SetFlashLatencyFromMSIRange>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e3ba      	b.n	80036ac <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f36:	4b73      	ldr	r3, [pc, #460]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a72      	ldr	r2, [pc, #456]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 8002f3c:	f043 0308 	orr.w	r3, r3, #8
 8002f40:	6013      	str	r3, [r2, #0]
 8002f42:	4b70      	ldr	r3, [pc, #448]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	496d      	ldr	r1, [pc, #436]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f54:	4b6b      	ldr	r3, [pc, #428]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	69db      	ldr	r3, [r3, #28]
 8002f60:	021b      	lsls	r3, r3, #8
 8002f62:	4968      	ldr	r1, [pc, #416]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	604b      	str	r3, [r1, #4]
 8002f68:	e025      	b.n	8002fb6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f6a:	4b66      	ldr	r3, [pc, #408]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a65      	ldr	r2, [pc, #404]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 8002f70:	f043 0308 	orr.w	r3, r3, #8
 8002f74:	6013      	str	r3, [r2, #0]
 8002f76:	4b63      	ldr	r3, [pc, #396]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	4960      	ldr	r1, [pc, #384]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f88:	4b5e      	ldr	r3, [pc, #376]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	69db      	ldr	r3, [r3, #28]
 8002f94:	021b      	lsls	r3, r3, #8
 8002f96:	495b      	ldr	r1, [pc, #364]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d109      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f000 fd4c 	bl	8003a44 <RCC_SetFlashLatencyFromMSIRange>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e37a      	b.n	80036ac <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fb6:	f000 fc81 	bl	80038bc <HAL_RCC_GetSysClockFreq>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	4b51      	ldr	r3, [pc, #324]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	091b      	lsrs	r3, r3, #4
 8002fc2:	f003 030f 	and.w	r3, r3, #15
 8002fc6:	4950      	ldr	r1, [pc, #320]	; (8003108 <HAL_RCC_OscConfig+0x274>)
 8002fc8:	5ccb      	ldrb	r3, [r1, r3]
 8002fca:	f003 031f 	and.w	r3, r3, #31
 8002fce:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd2:	4a4e      	ldr	r2, [pc, #312]	; (800310c <HAL_RCC_OscConfig+0x278>)
 8002fd4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002fd6:	4b4e      	ldr	r3, [pc, #312]	; (8003110 <HAL_RCC_OscConfig+0x27c>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fe faf4 	bl	80015c8 <HAL_InitTick>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002fe4:	7bfb      	ldrb	r3, [r7, #15]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d052      	beq.n	8003090 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002fea:	7bfb      	ldrb	r3, [r7, #15]
 8002fec:	e35e      	b.n	80036ac <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d032      	beq.n	800305c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ff6:	4b43      	ldr	r3, [pc, #268]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a42      	ldr	r2, [pc, #264]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 8002ffc:	f043 0301 	orr.w	r3, r3, #1
 8003000:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003002:	f7fe fb31 	bl	8001668 <HAL_GetTick>
 8003006:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003008:	e008      	b.n	800301c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800300a:	f7fe fb2d 	bl	8001668 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	2b02      	cmp	r3, #2
 8003016:	d901      	bls.n	800301c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e347      	b.n	80036ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800301c:	4b39      	ldr	r3, [pc, #228]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d0f0      	beq.n	800300a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003028:	4b36      	ldr	r3, [pc, #216]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a35      	ldr	r2, [pc, #212]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 800302e:	f043 0308 	orr.w	r3, r3, #8
 8003032:	6013      	str	r3, [r2, #0]
 8003034:	4b33      	ldr	r3, [pc, #204]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a1b      	ldr	r3, [r3, #32]
 8003040:	4930      	ldr	r1, [pc, #192]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 8003042:	4313      	orrs	r3, r2
 8003044:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003046:	4b2f      	ldr	r3, [pc, #188]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	021b      	lsls	r3, r3, #8
 8003054:	492b      	ldr	r1, [pc, #172]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 8003056:	4313      	orrs	r3, r2
 8003058:	604b      	str	r3, [r1, #4]
 800305a:	e01a      	b.n	8003092 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800305c:	4b29      	ldr	r3, [pc, #164]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a28      	ldr	r2, [pc, #160]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 8003062:	f023 0301 	bic.w	r3, r3, #1
 8003066:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003068:	f7fe fafe 	bl	8001668 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003070:	f7fe fafa 	bl	8001668 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e314      	b.n	80036ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003082:	4b20      	ldr	r3, [pc, #128]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1f0      	bne.n	8003070 <HAL_RCC_OscConfig+0x1dc>
 800308e:	e000      	b.n	8003092 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003090:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b00      	cmp	r3, #0
 800309c:	d073      	beq.n	8003186 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	2b08      	cmp	r3, #8
 80030a2:	d005      	beq.n	80030b0 <HAL_RCC_OscConfig+0x21c>
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	2b0c      	cmp	r3, #12
 80030a8:	d10e      	bne.n	80030c8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	2b03      	cmp	r3, #3
 80030ae:	d10b      	bne.n	80030c8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030b0:	4b14      	ldr	r3, [pc, #80]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d063      	beq.n	8003184 <HAL_RCC_OscConfig+0x2f0>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d15f      	bne.n	8003184 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e2f1      	b.n	80036ac <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030d0:	d106      	bne.n	80030e0 <HAL_RCC_OscConfig+0x24c>
 80030d2:	4b0c      	ldr	r3, [pc, #48]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a0b      	ldr	r2, [pc, #44]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 80030d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030dc:	6013      	str	r3, [r2, #0]
 80030de:	e025      	b.n	800312c <HAL_RCC_OscConfig+0x298>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030e8:	d114      	bne.n	8003114 <HAL_RCC_OscConfig+0x280>
 80030ea:	4b06      	ldr	r3, [pc, #24]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a05      	ldr	r2, [pc, #20]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 80030f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030f4:	6013      	str	r3, [r2, #0]
 80030f6:	4b03      	ldr	r3, [pc, #12]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a02      	ldr	r2, [pc, #8]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 80030fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003100:	6013      	str	r3, [r2, #0]
 8003102:	e013      	b.n	800312c <HAL_RCC_OscConfig+0x298>
 8003104:	40021000 	.word	0x40021000
 8003108:	08006b14 	.word	0x08006b14
 800310c:	20002874 	.word	0x20002874
 8003110:	20002878 	.word	0x20002878
 8003114:	4ba0      	ldr	r3, [pc, #640]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a9f      	ldr	r2, [pc, #636]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 800311a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800311e:	6013      	str	r3, [r2, #0]
 8003120:	4b9d      	ldr	r3, [pc, #628]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a9c      	ldr	r2, [pc, #624]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 8003126:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800312a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d013      	beq.n	800315c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003134:	f7fe fa98 	bl	8001668 <HAL_GetTick>
 8003138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800313a:	e008      	b.n	800314e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800313c:	f7fe fa94 	bl	8001668 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b64      	cmp	r3, #100	; 0x64
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e2ae      	b.n	80036ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800314e:	4b92      	ldr	r3, [pc, #584]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d0f0      	beq.n	800313c <HAL_RCC_OscConfig+0x2a8>
 800315a:	e014      	b.n	8003186 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315c:	f7fe fa84 	bl	8001668 <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003164:	f7fe fa80 	bl	8001668 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b64      	cmp	r3, #100	; 0x64
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e29a      	b.n	80036ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003176:	4b88      	ldr	r3, [pc, #544]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1f0      	bne.n	8003164 <HAL_RCC_OscConfig+0x2d0>
 8003182:	e000      	b.n	8003186 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003184:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d060      	beq.n	8003254 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	2b04      	cmp	r3, #4
 8003196:	d005      	beq.n	80031a4 <HAL_RCC_OscConfig+0x310>
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	2b0c      	cmp	r3, #12
 800319c:	d119      	bne.n	80031d2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d116      	bne.n	80031d2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031a4:	4b7c      	ldr	r3, [pc, #496]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d005      	beq.n	80031bc <HAL_RCC_OscConfig+0x328>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d101      	bne.n	80031bc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e277      	b.n	80036ac <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031bc:	4b76      	ldr	r3, [pc, #472]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	061b      	lsls	r3, r3, #24
 80031ca:	4973      	ldr	r1, [pc, #460]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031d0:	e040      	b.n	8003254 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d023      	beq.n	8003222 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031da:	4b6f      	ldr	r3, [pc, #444]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a6e      	ldr	r2, [pc, #440]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 80031e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e6:	f7fe fa3f 	bl	8001668 <HAL_GetTick>
 80031ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031ec:	e008      	b.n	8003200 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031ee:	f7fe fa3b 	bl	8001668 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d901      	bls.n	8003200 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e255      	b.n	80036ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003200:	4b65      	ldr	r3, [pc, #404]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003208:	2b00      	cmp	r3, #0
 800320a:	d0f0      	beq.n	80031ee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800320c:	4b62      	ldr	r3, [pc, #392]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	061b      	lsls	r3, r3, #24
 800321a:	495f      	ldr	r1, [pc, #380]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 800321c:	4313      	orrs	r3, r2
 800321e:	604b      	str	r3, [r1, #4]
 8003220:	e018      	b.n	8003254 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003222:	4b5d      	ldr	r3, [pc, #372]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a5c      	ldr	r2, [pc, #368]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 8003228:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800322c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800322e:	f7fe fa1b 	bl	8001668 <HAL_GetTick>
 8003232:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003234:	e008      	b.n	8003248 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003236:	f7fe fa17 	bl	8001668 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d901      	bls.n	8003248 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e231      	b.n	80036ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003248:	4b53      	ldr	r3, [pc, #332]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1f0      	bne.n	8003236 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0308 	and.w	r3, r3, #8
 800325c:	2b00      	cmp	r3, #0
 800325e:	d03c      	beq.n	80032da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	695b      	ldr	r3, [r3, #20]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d01c      	beq.n	80032a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003268:	4b4b      	ldr	r3, [pc, #300]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 800326a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800326e:	4a4a      	ldr	r2, [pc, #296]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 8003270:	f043 0301 	orr.w	r3, r3, #1
 8003274:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003278:	f7fe f9f6 	bl	8001668 <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003280:	f7fe f9f2 	bl	8001668 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b02      	cmp	r3, #2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e20c      	b.n	80036ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003292:	4b41      	ldr	r3, [pc, #260]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 8003294:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d0ef      	beq.n	8003280 <HAL_RCC_OscConfig+0x3ec>
 80032a0:	e01b      	b.n	80032da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032a2:	4b3d      	ldr	r3, [pc, #244]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 80032a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032a8:	4a3b      	ldr	r2, [pc, #236]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 80032aa:	f023 0301 	bic.w	r3, r3, #1
 80032ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b2:	f7fe f9d9 	bl	8001668 <HAL_GetTick>
 80032b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032b8:	e008      	b.n	80032cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032ba:	f7fe f9d5 	bl	8001668 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d901      	bls.n	80032cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e1ef      	b.n	80036ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032cc:	4b32      	ldr	r3, [pc, #200]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 80032ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1ef      	bne.n	80032ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0304 	and.w	r3, r3, #4
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f000 80a6 	beq.w	8003434 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032e8:	2300      	movs	r3, #0
 80032ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80032ec:	4b2a      	ldr	r3, [pc, #168]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 80032ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d10d      	bne.n	8003314 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032f8:	4b27      	ldr	r3, [pc, #156]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 80032fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032fc:	4a26      	ldr	r2, [pc, #152]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 80032fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003302:	6593      	str	r3, [r2, #88]	; 0x58
 8003304:	4b24      	ldr	r3, [pc, #144]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 8003306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800330c:	60bb      	str	r3, [r7, #8]
 800330e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003310:	2301      	movs	r3, #1
 8003312:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003314:	4b21      	ldr	r3, [pc, #132]	; (800339c <HAL_RCC_OscConfig+0x508>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331c:	2b00      	cmp	r3, #0
 800331e:	d118      	bne.n	8003352 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003320:	4b1e      	ldr	r3, [pc, #120]	; (800339c <HAL_RCC_OscConfig+0x508>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a1d      	ldr	r2, [pc, #116]	; (800339c <HAL_RCC_OscConfig+0x508>)
 8003326:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800332a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800332c:	f7fe f99c 	bl	8001668 <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003334:	f7fe f998 	bl	8001668 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e1b2      	b.n	80036ac <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003346:	4b15      	ldr	r3, [pc, #84]	; (800339c <HAL_RCC_OscConfig+0x508>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800334e:	2b00      	cmp	r3, #0
 8003350:	d0f0      	beq.n	8003334 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d108      	bne.n	800336c <HAL_RCC_OscConfig+0x4d8>
 800335a:	4b0f      	ldr	r3, [pc, #60]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 800335c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003360:	4a0d      	ldr	r2, [pc, #52]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 8003362:	f043 0301 	orr.w	r3, r3, #1
 8003366:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800336a:	e029      	b.n	80033c0 <HAL_RCC_OscConfig+0x52c>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	2b05      	cmp	r3, #5
 8003372:	d115      	bne.n	80033a0 <HAL_RCC_OscConfig+0x50c>
 8003374:	4b08      	ldr	r3, [pc, #32]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 8003376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800337a:	4a07      	ldr	r2, [pc, #28]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 800337c:	f043 0304 	orr.w	r3, r3, #4
 8003380:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003384:	4b04      	ldr	r3, [pc, #16]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 8003386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800338a:	4a03      	ldr	r2, [pc, #12]	; (8003398 <HAL_RCC_OscConfig+0x504>)
 800338c:	f043 0301 	orr.w	r3, r3, #1
 8003390:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003394:	e014      	b.n	80033c0 <HAL_RCC_OscConfig+0x52c>
 8003396:	bf00      	nop
 8003398:	40021000 	.word	0x40021000
 800339c:	40007000 	.word	0x40007000
 80033a0:	4b9a      	ldr	r3, [pc, #616]	; (800360c <HAL_RCC_OscConfig+0x778>)
 80033a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a6:	4a99      	ldr	r2, [pc, #612]	; (800360c <HAL_RCC_OscConfig+0x778>)
 80033a8:	f023 0301 	bic.w	r3, r3, #1
 80033ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033b0:	4b96      	ldr	r3, [pc, #600]	; (800360c <HAL_RCC_OscConfig+0x778>)
 80033b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b6:	4a95      	ldr	r2, [pc, #596]	; (800360c <HAL_RCC_OscConfig+0x778>)
 80033b8:	f023 0304 	bic.w	r3, r3, #4
 80033bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d016      	beq.n	80033f6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c8:	f7fe f94e 	bl	8001668 <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033ce:	e00a      	b.n	80033e6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033d0:	f7fe f94a 	bl	8001668 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	f241 3288 	movw	r2, #5000	; 0x1388
 80033de:	4293      	cmp	r3, r2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e162      	b.n	80036ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033e6:	4b89      	ldr	r3, [pc, #548]	; (800360c <HAL_RCC_OscConfig+0x778>)
 80033e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d0ed      	beq.n	80033d0 <HAL_RCC_OscConfig+0x53c>
 80033f4:	e015      	b.n	8003422 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f6:	f7fe f937 	bl	8001668 <HAL_GetTick>
 80033fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033fc:	e00a      	b.n	8003414 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033fe:	f7fe f933 	bl	8001668 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	f241 3288 	movw	r2, #5000	; 0x1388
 800340c:	4293      	cmp	r3, r2
 800340e:	d901      	bls.n	8003414 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e14b      	b.n	80036ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003414:	4b7d      	ldr	r3, [pc, #500]	; (800360c <HAL_RCC_OscConfig+0x778>)
 8003416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1ed      	bne.n	80033fe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003422:	7ffb      	ldrb	r3, [r7, #31]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d105      	bne.n	8003434 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003428:	4b78      	ldr	r3, [pc, #480]	; (800360c <HAL_RCC_OscConfig+0x778>)
 800342a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342c:	4a77      	ldr	r2, [pc, #476]	; (800360c <HAL_RCC_OscConfig+0x778>)
 800342e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003432:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0320 	and.w	r3, r3, #32
 800343c:	2b00      	cmp	r3, #0
 800343e:	d03c      	beq.n	80034ba <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003444:	2b00      	cmp	r3, #0
 8003446:	d01c      	beq.n	8003482 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003448:	4b70      	ldr	r3, [pc, #448]	; (800360c <HAL_RCC_OscConfig+0x778>)
 800344a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800344e:	4a6f      	ldr	r2, [pc, #444]	; (800360c <HAL_RCC_OscConfig+0x778>)
 8003450:	f043 0301 	orr.w	r3, r3, #1
 8003454:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003458:	f7fe f906 	bl	8001668 <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800345e:	e008      	b.n	8003472 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003460:	f7fe f902 	bl	8001668 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e11c      	b.n	80036ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003472:	4b66      	ldr	r3, [pc, #408]	; (800360c <HAL_RCC_OscConfig+0x778>)
 8003474:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d0ef      	beq.n	8003460 <HAL_RCC_OscConfig+0x5cc>
 8003480:	e01b      	b.n	80034ba <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003482:	4b62      	ldr	r3, [pc, #392]	; (800360c <HAL_RCC_OscConfig+0x778>)
 8003484:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003488:	4a60      	ldr	r2, [pc, #384]	; (800360c <HAL_RCC_OscConfig+0x778>)
 800348a:	f023 0301 	bic.w	r3, r3, #1
 800348e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003492:	f7fe f8e9 	bl	8001668 <HAL_GetTick>
 8003496:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003498:	e008      	b.n	80034ac <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800349a:	f7fe f8e5 	bl	8001668 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d901      	bls.n	80034ac <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e0ff      	b.n	80036ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034ac:	4b57      	ldr	r3, [pc, #348]	; (800360c <HAL_RCC_OscConfig+0x778>)
 80034ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1ef      	bne.n	800349a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f000 80f3 	beq.w	80036aa <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	f040 80c9 	bne.w	8003660 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80034ce:	4b4f      	ldr	r3, [pc, #316]	; (800360c <HAL_RCC_OscConfig+0x778>)
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	f003 0203 	and.w	r2, r3, #3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034de:	429a      	cmp	r2, r3
 80034e0:	d12c      	bne.n	800353c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ec:	3b01      	subs	r3, #1
 80034ee:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d123      	bne.n	800353c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034fe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003500:	429a      	cmp	r2, r3
 8003502:	d11b      	bne.n	800353c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003510:	429a      	cmp	r2, r3
 8003512:	d113      	bne.n	800353c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800351e:	085b      	lsrs	r3, r3, #1
 8003520:	3b01      	subs	r3, #1
 8003522:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003524:	429a      	cmp	r2, r3
 8003526:	d109      	bne.n	800353c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003532:	085b      	lsrs	r3, r3, #1
 8003534:	3b01      	subs	r3, #1
 8003536:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003538:	429a      	cmp	r2, r3
 800353a:	d06b      	beq.n	8003614 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	2b0c      	cmp	r3, #12
 8003540:	d062      	beq.n	8003608 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003542:	4b32      	ldr	r3, [pc, #200]	; (800360c <HAL_RCC_OscConfig+0x778>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e0ac      	b.n	80036ac <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003552:	4b2e      	ldr	r3, [pc, #184]	; (800360c <HAL_RCC_OscConfig+0x778>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a2d      	ldr	r2, [pc, #180]	; (800360c <HAL_RCC_OscConfig+0x778>)
 8003558:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800355c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800355e:	f7fe f883 	bl	8001668 <HAL_GetTick>
 8003562:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003564:	e008      	b.n	8003578 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003566:	f7fe f87f 	bl	8001668 <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	2b02      	cmp	r3, #2
 8003572:	d901      	bls.n	8003578 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e099      	b.n	80036ac <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003578:	4b24      	ldr	r3, [pc, #144]	; (800360c <HAL_RCC_OscConfig+0x778>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d1f0      	bne.n	8003566 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003584:	4b21      	ldr	r3, [pc, #132]	; (800360c <HAL_RCC_OscConfig+0x778>)
 8003586:	68da      	ldr	r2, [r3, #12]
 8003588:	4b21      	ldr	r3, [pc, #132]	; (8003610 <HAL_RCC_OscConfig+0x77c>)
 800358a:	4013      	ands	r3, r2
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003594:	3a01      	subs	r2, #1
 8003596:	0112      	lsls	r2, r2, #4
 8003598:	4311      	orrs	r1, r2
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800359e:	0212      	lsls	r2, r2, #8
 80035a0:	4311      	orrs	r1, r2
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80035a6:	0852      	lsrs	r2, r2, #1
 80035a8:	3a01      	subs	r2, #1
 80035aa:	0552      	lsls	r2, r2, #21
 80035ac:	4311      	orrs	r1, r2
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80035b2:	0852      	lsrs	r2, r2, #1
 80035b4:	3a01      	subs	r2, #1
 80035b6:	0652      	lsls	r2, r2, #25
 80035b8:	4311      	orrs	r1, r2
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035be:	06d2      	lsls	r2, r2, #27
 80035c0:	430a      	orrs	r2, r1
 80035c2:	4912      	ldr	r1, [pc, #72]	; (800360c <HAL_RCC_OscConfig+0x778>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80035c8:	4b10      	ldr	r3, [pc, #64]	; (800360c <HAL_RCC_OscConfig+0x778>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a0f      	ldr	r2, [pc, #60]	; (800360c <HAL_RCC_OscConfig+0x778>)
 80035ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035d2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035d4:	4b0d      	ldr	r3, [pc, #52]	; (800360c <HAL_RCC_OscConfig+0x778>)
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	4a0c      	ldr	r2, [pc, #48]	; (800360c <HAL_RCC_OscConfig+0x778>)
 80035da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035e0:	f7fe f842 	bl	8001668 <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035e8:	f7fe f83e 	bl	8001668 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e058      	b.n	80036ac <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035fa:	4b04      	ldr	r3, [pc, #16]	; (800360c <HAL_RCC_OscConfig+0x778>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d0f0      	beq.n	80035e8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003606:	e050      	b.n	80036aa <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e04f      	b.n	80036ac <HAL_RCC_OscConfig+0x818>
 800360c:	40021000 	.word	0x40021000
 8003610:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003614:	4b27      	ldr	r3, [pc, #156]	; (80036b4 <HAL_RCC_OscConfig+0x820>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d144      	bne.n	80036aa <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003620:	4b24      	ldr	r3, [pc, #144]	; (80036b4 <HAL_RCC_OscConfig+0x820>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a23      	ldr	r2, [pc, #140]	; (80036b4 <HAL_RCC_OscConfig+0x820>)
 8003626:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800362a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800362c:	4b21      	ldr	r3, [pc, #132]	; (80036b4 <HAL_RCC_OscConfig+0x820>)
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	4a20      	ldr	r2, [pc, #128]	; (80036b4 <HAL_RCC_OscConfig+0x820>)
 8003632:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003636:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003638:	f7fe f816 	bl	8001668 <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003640:	f7fe f812 	bl	8001668 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e02c      	b.n	80036ac <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003652:	4b18      	ldr	r3, [pc, #96]	; (80036b4 <HAL_RCC_OscConfig+0x820>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0f0      	beq.n	8003640 <HAL_RCC_OscConfig+0x7ac>
 800365e:	e024      	b.n	80036aa <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	2b0c      	cmp	r3, #12
 8003664:	d01f      	beq.n	80036a6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003666:	4b13      	ldr	r3, [pc, #76]	; (80036b4 <HAL_RCC_OscConfig+0x820>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a12      	ldr	r2, [pc, #72]	; (80036b4 <HAL_RCC_OscConfig+0x820>)
 800366c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003670:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003672:	f7fd fff9 	bl	8001668 <HAL_GetTick>
 8003676:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003678:	e008      	b.n	800368c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800367a:	f7fd fff5 	bl	8001668 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	2b02      	cmp	r3, #2
 8003686:	d901      	bls.n	800368c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e00f      	b.n	80036ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800368c:	4b09      	ldr	r3, [pc, #36]	; (80036b4 <HAL_RCC_OscConfig+0x820>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1f0      	bne.n	800367a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003698:	4b06      	ldr	r3, [pc, #24]	; (80036b4 <HAL_RCC_OscConfig+0x820>)
 800369a:	68da      	ldr	r2, [r3, #12]
 800369c:	4905      	ldr	r1, [pc, #20]	; (80036b4 <HAL_RCC_OscConfig+0x820>)
 800369e:	4b06      	ldr	r3, [pc, #24]	; (80036b8 <HAL_RCC_OscConfig+0x824>)
 80036a0:	4013      	ands	r3, r2
 80036a2:	60cb      	str	r3, [r1, #12]
 80036a4:	e001      	b.n	80036aa <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e000      	b.n	80036ac <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3720      	adds	r7, #32
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	40021000 	.word	0x40021000
 80036b8:	feeefffc 	.word	0xfeeefffc

080036bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d101      	bne.n	80036d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e0e7      	b.n	80038a0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036d0:	4b75      	ldr	r3, [pc, #468]	; (80038a8 <HAL_RCC_ClockConfig+0x1ec>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0307 	and.w	r3, r3, #7
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d910      	bls.n	8003700 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036de:	4b72      	ldr	r3, [pc, #456]	; (80038a8 <HAL_RCC_ClockConfig+0x1ec>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f023 0207 	bic.w	r2, r3, #7
 80036e6:	4970      	ldr	r1, [pc, #448]	; (80038a8 <HAL_RCC_ClockConfig+0x1ec>)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ee:	4b6e      	ldr	r3, [pc, #440]	; (80038a8 <HAL_RCC_ClockConfig+0x1ec>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0307 	and.w	r3, r3, #7
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d001      	beq.n	8003700 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e0cf      	b.n	80038a0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d010      	beq.n	800372e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	4b66      	ldr	r3, [pc, #408]	; (80038ac <HAL_RCC_ClockConfig+0x1f0>)
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003718:	429a      	cmp	r2, r3
 800371a:	d908      	bls.n	800372e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800371c:	4b63      	ldr	r3, [pc, #396]	; (80038ac <HAL_RCC_ClockConfig+0x1f0>)
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	4960      	ldr	r1, [pc, #384]	; (80038ac <HAL_RCC_ClockConfig+0x1f0>)
 800372a:	4313      	orrs	r3, r2
 800372c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b00      	cmp	r3, #0
 8003738:	d04c      	beq.n	80037d4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	2b03      	cmp	r3, #3
 8003740:	d107      	bne.n	8003752 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003742:	4b5a      	ldr	r3, [pc, #360]	; (80038ac <HAL_RCC_ClockConfig+0x1f0>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d121      	bne.n	8003792 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e0a6      	b.n	80038a0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	2b02      	cmp	r3, #2
 8003758:	d107      	bne.n	800376a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800375a:	4b54      	ldr	r3, [pc, #336]	; (80038ac <HAL_RCC_ClockConfig+0x1f0>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d115      	bne.n	8003792 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e09a      	b.n	80038a0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d107      	bne.n	8003782 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003772:	4b4e      	ldr	r3, [pc, #312]	; (80038ac <HAL_RCC_ClockConfig+0x1f0>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d109      	bne.n	8003792 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e08e      	b.n	80038a0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003782:	4b4a      	ldr	r3, [pc, #296]	; (80038ac <HAL_RCC_ClockConfig+0x1f0>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800378a:	2b00      	cmp	r3, #0
 800378c:	d101      	bne.n	8003792 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e086      	b.n	80038a0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003792:	4b46      	ldr	r3, [pc, #280]	; (80038ac <HAL_RCC_ClockConfig+0x1f0>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f023 0203 	bic.w	r2, r3, #3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	4943      	ldr	r1, [pc, #268]	; (80038ac <HAL_RCC_ClockConfig+0x1f0>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037a4:	f7fd ff60 	bl	8001668 <HAL_GetTick>
 80037a8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037aa:	e00a      	b.n	80037c2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037ac:	f7fd ff5c 	bl	8001668 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e06e      	b.n	80038a0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037c2:	4b3a      	ldr	r3, [pc, #232]	; (80038ac <HAL_RCC_ClockConfig+0x1f0>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f003 020c 	and.w	r2, r3, #12
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d1eb      	bne.n	80037ac <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d010      	beq.n	8003802 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	4b31      	ldr	r3, [pc, #196]	; (80038ac <HAL_RCC_ClockConfig+0x1f0>)
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d208      	bcs.n	8003802 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037f0:	4b2e      	ldr	r3, [pc, #184]	; (80038ac <HAL_RCC_ClockConfig+0x1f0>)
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	492b      	ldr	r1, [pc, #172]	; (80038ac <HAL_RCC_ClockConfig+0x1f0>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003802:	4b29      	ldr	r3, [pc, #164]	; (80038a8 <HAL_RCC_ClockConfig+0x1ec>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0307 	and.w	r3, r3, #7
 800380a:	683a      	ldr	r2, [r7, #0]
 800380c:	429a      	cmp	r2, r3
 800380e:	d210      	bcs.n	8003832 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003810:	4b25      	ldr	r3, [pc, #148]	; (80038a8 <HAL_RCC_ClockConfig+0x1ec>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f023 0207 	bic.w	r2, r3, #7
 8003818:	4923      	ldr	r1, [pc, #140]	; (80038a8 <HAL_RCC_ClockConfig+0x1ec>)
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	4313      	orrs	r3, r2
 800381e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003820:	4b21      	ldr	r3, [pc, #132]	; (80038a8 <HAL_RCC_ClockConfig+0x1ec>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0307 	and.w	r3, r3, #7
 8003828:	683a      	ldr	r2, [r7, #0]
 800382a:	429a      	cmp	r2, r3
 800382c:	d001      	beq.n	8003832 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e036      	b.n	80038a0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0304 	and.w	r3, r3, #4
 800383a:	2b00      	cmp	r3, #0
 800383c:	d008      	beq.n	8003850 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800383e:	4b1b      	ldr	r3, [pc, #108]	; (80038ac <HAL_RCC_ClockConfig+0x1f0>)
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	4918      	ldr	r1, [pc, #96]	; (80038ac <HAL_RCC_ClockConfig+0x1f0>)
 800384c:	4313      	orrs	r3, r2
 800384e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0308 	and.w	r3, r3, #8
 8003858:	2b00      	cmp	r3, #0
 800385a:	d009      	beq.n	8003870 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800385c:	4b13      	ldr	r3, [pc, #76]	; (80038ac <HAL_RCC_ClockConfig+0x1f0>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	00db      	lsls	r3, r3, #3
 800386a:	4910      	ldr	r1, [pc, #64]	; (80038ac <HAL_RCC_ClockConfig+0x1f0>)
 800386c:	4313      	orrs	r3, r2
 800386e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003870:	f000 f824 	bl	80038bc <HAL_RCC_GetSysClockFreq>
 8003874:	4602      	mov	r2, r0
 8003876:	4b0d      	ldr	r3, [pc, #52]	; (80038ac <HAL_RCC_ClockConfig+0x1f0>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	091b      	lsrs	r3, r3, #4
 800387c:	f003 030f 	and.w	r3, r3, #15
 8003880:	490b      	ldr	r1, [pc, #44]	; (80038b0 <HAL_RCC_ClockConfig+0x1f4>)
 8003882:	5ccb      	ldrb	r3, [r1, r3]
 8003884:	f003 031f 	and.w	r3, r3, #31
 8003888:	fa22 f303 	lsr.w	r3, r2, r3
 800388c:	4a09      	ldr	r2, [pc, #36]	; (80038b4 <HAL_RCC_ClockConfig+0x1f8>)
 800388e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003890:	4b09      	ldr	r3, [pc, #36]	; (80038b8 <HAL_RCC_ClockConfig+0x1fc>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4618      	mov	r0, r3
 8003896:	f7fd fe97 	bl	80015c8 <HAL_InitTick>
 800389a:	4603      	mov	r3, r0
 800389c:	72fb      	strb	r3, [r7, #11]

  return status;
 800389e:	7afb      	ldrb	r3, [r7, #11]
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3710      	adds	r7, #16
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	40022000 	.word	0x40022000
 80038ac:	40021000 	.word	0x40021000
 80038b0:	08006b14 	.word	0x08006b14
 80038b4:	20002874 	.word	0x20002874
 80038b8:	20002878 	.word	0x20002878

080038bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038bc:	b480      	push	{r7}
 80038be:	b089      	sub	sp, #36	; 0x24
 80038c0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80038c2:	2300      	movs	r3, #0
 80038c4:	61fb      	str	r3, [r7, #28]
 80038c6:	2300      	movs	r3, #0
 80038c8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038ca:	4b3e      	ldr	r3, [pc, #248]	; (80039c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f003 030c 	and.w	r3, r3, #12
 80038d2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038d4:	4b3b      	ldr	r3, [pc, #236]	; (80039c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	f003 0303 	and.w	r3, r3, #3
 80038dc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d005      	beq.n	80038f0 <HAL_RCC_GetSysClockFreq+0x34>
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	2b0c      	cmp	r3, #12
 80038e8:	d121      	bne.n	800392e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d11e      	bne.n	800392e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80038f0:	4b34      	ldr	r3, [pc, #208]	; (80039c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0308 	and.w	r3, r3, #8
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d107      	bne.n	800390c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80038fc:	4b31      	ldr	r3, [pc, #196]	; (80039c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80038fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003902:	0a1b      	lsrs	r3, r3, #8
 8003904:	f003 030f 	and.w	r3, r3, #15
 8003908:	61fb      	str	r3, [r7, #28]
 800390a:	e005      	b.n	8003918 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800390c:	4b2d      	ldr	r3, [pc, #180]	; (80039c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	091b      	lsrs	r3, r3, #4
 8003912:	f003 030f 	and.w	r3, r3, #15
 8003916:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003918:	4a2b      	ldr	r2, [pc, #172]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003920:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d10d      	bne.n	8003944 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800392c:	e00a      	b.n	8003944 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	2b04      	cmp	r3, #4
 8003932:	d102      	bne.n	800393a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003934:	4b25      	ldr	r3, [pc, #148]	; (80039cc <HAL_RCC_GetSysClockFreq+0x110>)
 8003936:	61bb      	str	r3, [r7, #24]
 8003938:	e004      	b.n	8003944 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	2b08      	cmp	r3, #8
 800393e:	d101      	bne.n	8003944 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003940:	4b23      	ldr	r3, [pc, #140]	; (80039d0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003942:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	2b0c      	cmp	r3, #12
 8003948:	d134      	bne.n	80039b4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800394a:	4b1e      	ldr	r3, [pc, #120]	; (80039c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	f003 0303 	and.w	r3, r3, #3
 8003952:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	2b02      	cmp	r3, #2
 8003958:	d003      	beq.n	8003962 <HAL_RCC_GetSysClockFreq+0xa6>
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	2b03      	cmp	r3, #3
 800395e:	d003      	beq.n	8003968 <HAL_RCC_GetSysClockFreq+0xac>
 8003960:	e005      	b.n	800396e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003962:	4b1a      	ldr	r3, [pc, #104]	; (80039cc <HAL_RCC_GetSysClockFreq+0x110>)
 8003964:	617b      	str	r3, [r7, #20]
      break;
 8003966:	e005      	b.n	8003974 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003968:	4b19      	ldr	r3, [pc, #100]	; (80039d0 <HAL_RCC_GetSysClockFreq+0x114>)
 800396a:	617b      	str	r3, [r7, #20]
      break;
 800396c:	e002      	b.n	8003974 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	617b      	str	r3, [r7, #20]
      break;
 8003972:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003974:	4b13      	ldr	r3, [pc, #76]	; (80039c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	091b      	lsrs	r3, r3, #4
 800397a:	f003 0307 	and.w	r3, r3, #7
 800397e:	3301      	adds	r3, #1
 8003980:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003982:	4b10      	ldr	r3, [pc, #64]	; (80039c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	0a1b      	lsrs	r3, r3, #8
 8003988:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800398c:	697a      	ldr	r2, [r7, #20]
 800398e:	fb03 f202 	mul.w	r2, r3, r2
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	fbb2 f3f3 	udiv	r3, r2, r3
 8003998:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800399a:	4b0a      	ldr	r3, [pc, #40]	; (80039c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	0e5b      	lsrs	r3, r3, #25
 80039a0:	f003 0303 	and.w	r3, r3, #3
 80039a4:	3301      	adds	r3, #1
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80039aa:	697a      	ldr	r2, [r7, #20]
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80039b4:	69bb      	ldr	r3, [r7, #24]
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3724      	adds	r7, #36	; 0x24
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	40021000 	.word	0x40021000
 80039c8:	08006b2c 	.word	0x08006b2c
 80039cc:	00f42400 	.word	0x00f42400
 80039d0:	007a1200 	.word	0x007a1200

080039d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039d4:	b480      	push	{r7}
 80039d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039d8:	4b03      	ldr	r3, [pc, #12]	; (80039e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80039da:	681b      	ldr	r3, [r3, #0]
}
 80039dc:	4618      	mov	r0, r3
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	20002874 	.word	0x20002874

080039ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80039f0:	f7ff fff0 	bl	80039d4 <HAL_RCC_GetHCLKFreq>
 80039f4:	4602      	mov	r2, r0
 80039f6:	4b06      	ldr	r3, [pc, #24]	; (8003a10 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	0a1b      	lsrs	r3, r3, #8
 80039fc:	f003 0307 	and.w	r3, r3, #7
 8003a00:	4904      	ldr	r1, [pc, #16]	; (8003a14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a02:	5ccb      	ldrb	r3, [r1, r3]
 8003a04:	f003 031f 	and.w	r3, r3, #31
 8003a08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	40021000 	.word	0x40021000
 8003a14:	08006b24 	.word	0x08006b24

08003a18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a1c:	f7ff ffda 	bl	80039d4 <HAL_RCC_GetHCLKFreq>
 8003a20:	4602      	mov	r2, r0
 8003a22:	4b06      	ldr	r3, [pc, #24]	; (8003a3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	0adb      	lsrs	r3, r3, #11
 8003a28:	f003 0307 	and.w	r3, r3, #7
 8003a2c:	4904      	ldr	r1, [pc, #16]	; (8003a40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a2e:	5ccb      	ldrb	r3, [r1, r3]
 8003a30:	f003 031f 	and.w	r3, r3, #31
 8003a34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	08006b24 	.word	0x08006b24

08003a44 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b086      	sub	sp, #24
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003a50:	4b2a      	ldr	r3, [pc, #168]	; (8003afc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d003      	beq.n	8003a64 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003a5c:	f7ff f9b6 	bl	8002dcc <HAL_PWREx_GetVoltageRange>
 8003a60:	6178      	str	r0, [r7, #20]
 8003a62:	e014      	b.n	8003a8e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a64:	4b25      	ldr	r3, [pc, #148]	; (8003afc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a68:	4a24      	ldr	r2, [pc, #144]	; (8003afc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a6e:	6593      	str	r3, [r2, #88]	; 0x58
 8003a70:	4b22      	ldr	r3, [pc, #136]	; (8003afc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a78:	60fb      	str	r3, [r7, #12]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003a7c:	f7ff f9a6 	bl	8002dcc <HAL_PWREx_GetVoltageRange>
 8003a80:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003a82:	4b1e      	ldr	r3, [pc, #120]	; (8003afc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a86:	4a1d      	ldr	r2, [pc, #116]	; (8003afc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a8c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a94:	d10b      	bne.n	8003aae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2b80      	cmp	r3, #128	; 0x80
 8003a9a:	d919      	bls.n	8003ad0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2ba0      	cmp	r3, #160	; 0xa0
 8003aa0:	d902      	bls.n	8003aa8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	613b      	str	r3, [r7, #16]
 8003aa6:	e013      	b.n	8003ad0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	613b      	str	r3, [r7, #16]
 8003aac:	e010      	b.n	8003ad0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2b80      	cmp	r3, #128	; 0x80
 8003ab2:	d902      	bls.n	8003aba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	613b      	str	r3, [r7, #16]
 8003ab8:	e00a      	b.n	8003ad0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2b80      	cmp	r3, #128	; 0x80
 8003abe:	d102      	bne.n	8003ac6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	613b      	str	r3, [r7, #16]
 8003ac4:	e004      	b.n	8003ad0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2b70      	cmp	r3, #112	; 0x70
 8003aca:	d101      	bne.n	8003ad0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003acc:	2301      	movs	r3, #1
 8003ace:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003ad0:	4b0b      	ldr	r3, [pc, #44]	; (8003b00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f023 0207 	bic.w	r2, r3, #7
 8003ad8:	4909      	ldr	r1, [pc, #36]	; (8003b00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ae0:	4b07      	ldr	r3, [pc, #28]	; (8003b00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0307 	and.w	r3, r3, #7
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d001      	beq.n	8003af2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e000      	b.n	8003af4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3718      	adds	r7, #24
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	40021000 	.word	0x40021000
 8003b00:	40022000 	.word	0x40022000

08003b04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b10:	2300      	movs	r3, #0
 8003b12:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d031      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b24:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b28:	d01a      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003b2a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b2e:	d814      	bhi.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d009      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003b34:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b38:	d10f      	bne.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003b3a:	4b5d      	ldr	r3, [pc, #372]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	4a5c      	ldr	r2, [pc, #368]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b44:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b46:	e00c      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	3304      	adds	r3, #4
 8003b4c:	2100      	movs	r1, #0
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f000 f9ce 	bl	8003ef0 <RCCEx_PLLSAI1_Config>
 8003b54:	4603      	mov	r3, r0
 8003b56:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b58:	e003      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	74fb      	strb	r3, [r7, #19]
      break;
 8003b5e:	e000      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003b60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b62:	7cfb      	ldrb	r3, [r7, #19]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d10b      	bne.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b68:	4b51      	ldr	r3, [pc, #324]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b6e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b76:	494e      	ldr	r1, [pc, #312]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003b7e:	e001      	b.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b80:	7cfb      	ldrb	r3, [r7, #19]
 8003b82:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f000 809e 	beq.w	8003cce <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b92:	2300      	movs	r3, #0
 8003b94:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b96:	4b46      	ldr	r3, [pc, #280]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e000      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00d      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bac:	4b40      	ldr	r3, [pc, #256]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb0:	4a3f      	ldr	r2, [pc, #252]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bb6:	6593      	str	r3, [r2, #88]	; 0x58
 8003bb8:	4b3d      	ldr	r3, [pc, #244]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bc0:	60bb      	str	r3, [r7, #8]
 8003bc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bc8:	4b3a      	ldr	r3, [pc, #232]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a39      	ldr	r2, [pc, #228]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003bce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bd2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bd4:	f7fd fd48 	bl	8001668 <HAL_GetTick>
 8003bd8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003bda:	e009      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bdc:	f7fd fd44 	bl	8001668 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d902      	bls.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	74fb      	strb	r3, [r7, #19]
        break;
 8003bee:	e005      	b.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003bf0:	4b30      	ldr	r3, [pc, #192]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d0ef      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003bfc:	7cfb      	ldrb	r3, [r7, #19]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d15a      	bne.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c02:	4b2b      	ldr	r3, [pc, #172]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c0c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d01e      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d019      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c1e:	4b24      	ldr	r3, [pc, #144]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c28:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c2a:	4b21      	ldr	r3, [pc, #132]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c30:	4a1f      	ldr	r2, [pc, #124]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c3a:	4b1d      	ldr	r3, [pc, #116]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c40:	4a1b      	ldr	r2, [pc, #108]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c4a:	4a19      	ldr	r2, [pc, #100]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	f003 0301 	and.w	r3, r3, #1
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d016      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5c:	f7fd fd04 	bl	8001668 <HAL_GetTick>
 8003c60:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c62:	e00b      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c64:	f7fd fd00 	bl	8001668 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d902      	bls.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	74fb      	strb	r3, [r7, #19]
            break;
 8003c7a:	e006      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c7c:	4b0c      	ldr	r3, [pc, #48]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d0ec      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003c8a:	7cfb      	ldrb	r3, [r7, #19]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10b      	bne.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c90:	4b07      	ldr	r3, [pc, #28]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c96:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c9e:	4904      	ldr	r1, [pc, #16]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003ca6:	e009      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ca8:	7cfb      	ldrb	r3, [r7, #19]
 8003caa:	74bb      	strb	r3, [r7, #18]
 8003cac:	e006      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003cae:	bf00      	nop
 8003cb0:	40021000 	.word	0x40021000
 8003cb4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cb8:	7cfb      	ldrb	r3, [r7, #19]
 8003cba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cbc:	7c7b      	ldrb	r3, [r7, #17]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d105      	bne.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cc2:	4b8a      	ldr	r3, [pc, #552]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc6:	4a89      	ldr	r2, [pc, #548]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ccc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0301 	and.w	r3, r3, #1
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00a      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cda:	4b84      	ldr	r3, [pc, #528]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce0:	f023 0203 	bic.w	r2, r3, #3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
 8003ce8:	4980      	ldr	r1, [pc, #512]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0302 	and.w	r3, r3, #2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00a      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cfc:	4b7b      	ldr	r3, [pc, #492]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d02:	f023 020c 	bic.w	r2, r3, #12
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0a:	4978      	ldr	r1, [pc, #480]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0320 	and.w	r3, r3, #32
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00a      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d1e:	4b73      	ldr	r3, [pc, #460]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d24:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2c:	496f      	ldr	r1, [pc, #444]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00a      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d40:	4b6a      	ldr	r3, [pc, #424]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d46:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d4e:	4967      	ldr	r1, [pc, #412]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00a      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d62:	4b62      	ldr	r3, [pc, #392]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d70:	495e      	ldr	r1, [pc, #376]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00a      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d84:	4b59      	ldr	r3, [pc, #356]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d8a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d92:	4956      	ldr	r1, [pc, #344]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00a      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003da6:	4b51      	ldr	r3, [pc, #324]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db4:	494d      	ldr	r1, [pc, #308]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d028      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003dc8:	4b48      	ldr	r3, [pc, #288]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd6:	4945      	ldr	r1, [pc, #276]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003de6:	d106      	bne.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003de8:	4b40      	ldr	r3, [pc, #256]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	4a3f      	ldr	r2, [pc, #252]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003dee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003df2:	60d3      	str	r3, [r2, #12]
 8003df4:	e011      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003dfe:	d10c      	bne.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	3304      	adds	r3, #4
 8003e04:	2101      	movs	r1, #1
 8003e06:	4618      	mov	r0, r3
 8003e08:	f000 f872 	bl	8003ef0 <RCCEx_PLLSAI1_Config>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003e10:	7cfb      	ldrb	r3, [r7, #19]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003e16:	7cfb      	ldrb	r3, [r7, #19]
 8003e18:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d028      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e26:	4b31      	ldr	r3, [pc, #196]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e2c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e34:	492d      	ldr	r1, [pc, #180]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e44:	d106      	bne.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e46:	4b29      	ldr	r3, [pc, #164]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	4a28      	ldr	r2, [pc, #160]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e50:	60d3      	str	r3, [r2, #12]
 8003e52:	e011      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e5c:	d10c      	bne.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	3304      	adds	r3, #4
 8003e62:	2101      	movs	r1, #1
 8003e64:	4618      	mov	r0, r3
 8003e66:	f000 f843 	bl	8003ef0 <RCCEx_PLLSAI1_Config>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e6e:	7cfb      	ldrb	r3, [r7, #19]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d001      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003e74:	7cfb      	ldrb	r3, [r7, #19]
 8003e76:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d01c      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e84:	4b19      	ldr	r3, [pc, #100]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e8a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e92:	4916      	ldr	r1, [pc, #88]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ea2:	d10c      	bne.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	3304      	adds	r3, #4
 8003ea8:	2102      	movs	r1, #2
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f000 f820 	bl	8003ef0 <RCCEx_PLLSAI1_Config>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003eb4:	7cfb      	ldrb	r3, [r7, #19]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d001      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003eba:	7cfb      	ldrb	r3, [r7, #19]
 8003ebc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00a      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003eca:	4b08      	ldr	r3, [pc, #32]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ed8:	4904      	ldr	r1, [pc, #16]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003ee0:	7cbb      	ldrb	r3, [r7, #18]
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3718      	adds	r7, #24
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	40021000 	.word	0x40021000

08003ef0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003efa:	2300      	movs	r3, #0
 8003efc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003efe:	4b74      	ldr	r3, [pc, #464]	; (80040d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	f003 0303 	and.w	r3, r3, #3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d018      	beq.n	8003f3c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003f0a:	4b71      	ldr	r3, [pc, #452]	; (80040d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	f003 0203 	and.w	r2, r3, #3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d10d      	bne.n	8003f36 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
       ||
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d009      	beq.n	8003f36 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003f22:	4b6b      	ldr	r3, [pc, #428]	; (80040d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	091b      	lsrs	r3, r3, #4
 8003f28:	f003 0307 	and.w	r3, r3, #7
 8003f2c:	1c5a      	adds	r2, r3, #1
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
       ||
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d047      	beq.n	8003fc6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	73fb      	strb	r3, [r7, #15]
 8003f3a:	e044      	b.n	8003fc6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2b03      	cmp	r3, #3
 8003f42:	d018      	beq.n	8003f76 <RCCEx_PLLSAI1_Config+0x86>
 8003f44:	2b03      	cmp	r3, #3
 8003f46:	d825      	bhi.n	8003f94 <RCCEx_PLLSAI1_Config+0xa4>
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d002      	beq.n	8003f52 <RCCEx_PLLSAI1_Config+0x62>
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d009      	beq.n	8003f64 <RCCEx_PLLSAI1_Config+0x74>
 8003f50:	e020      	b.n	8003f94 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f52:	4b5f      	ldr	r3, [pc, #380]	; (80040d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d11d      	bne.n	8003f9a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f62:	e01a      	b.n	8003f9a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f64:	4b5a      	ldr	r3, [pc, #360]	; (80040d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d116      	bne.n	8003f9e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f74:	e013      	b.n	8003f9e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f76:	4b56      	ldr	r3, [pc, #344]	; (80040d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10f      	bne.n	8003fa2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f82:	4b53      	ldr	r3, [pc, #332]	; (80040d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d109      	bne.n	8003fa2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f92:	e006      	b.n	8003fa2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	73fb      	strb	r3, [r7, #15]
      break;
 8003f98:	e004      	b.n	8003fa4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f9a:	bf00      	nop
 8003f9c:	e002      	b.n	8003fa4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f9e:	bf00      	nop
 8003fa0:	e000      	b.n	8003fa4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003fa2:	bf00      	nop
    }

    if(status == HAL_OK)
 8003fa4:	7bfb      	ldrb	r3, [r7, #15]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d10d      	bne.n	8003fc6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003faa:	4b49      	ldr	r3, [pc, #292]	; (80040d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6819      	ldr	r1, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	011b      	lsls	r3, r3, #4
 8003fbe:	430b      	orrs	r3, r1
 8003fc0:	4943      	ldr	r1, [pc, #268]	; (80040d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003fc6:	7bfb      	ldrb	r3, [r7, #15]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d17c      	bne.n	80040c6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003fcc:	4b40      	ldr	r3, [pc, #256]	; (80040d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a3f      	ldr	r2, [pc, #252]	; (80040d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fd2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003fd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fd8:	f7fd fb46 	bl	8001668 <HAL_GetTick>
 8003fdc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003fde:	e009      	b.n	8003ff4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003fe0:	f7fd fb42 	bl	8001668 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d902      	bls.n	8003ff4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	73fb      	strb	r3, [r7, #15]
        break;
 8003ff2:	e005      	b.n	8004000 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ff4:	4b36      	ldr	r3, [pc, #216]	; (80040d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1ef      	bne.n	8003fe0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004000:	7bfb      	ldrb	r3, [r7, #15]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d15f      	bne.n	80040c6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d110      	bne.n	800402e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800400c:	4b30      	ldr	r3, [pc, #192]	; (80040d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004014:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	6892      	ldr	r2, [r2, #8]
 800401c:	0211      	lsls	r1, r2, #8
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	68d2      	ldr	r2, [r2, #12]
 8004022:	06d2      	lsls	r2, r2, #27
 8004024:	430a      	orrs	r2, r1
 8004026:	492a      	ldr	r1, [pc, #168]	; (80040d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004028:	4313      	orrs	r3, r2
 800402a:	610b      	str	r3, [r1, #16]
 800402c:	e027      	b.n	800407e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d112      	bne.n	800405a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004034:	4b26      	ldr	r3, [pc, #152]	; (80040d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800403c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	6892      	ldr	r2, [r2, #8]
 8004044:	0211      	lsls	r1, r2, #8
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	6912      	ldr	r2, [r2, #16]
 800404a:	0852      	lsrs	r2, r2, #1
 800404c:	3a01      	subs	r2, #1
 800404e:	0552      	lsls	r2, r2, #21
 8004050:	430a      	orrs	r2, r1
 8004052:	491f      	ldr	r1, [pc, #124]	; (80040d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004054:	4313      	orrs	r3, r2
 8004056:	610b      	str	r3, [r1, #16]
 8004058:	e011      	b.n	800407e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800405a:	4b1d      	ldr	r3, [pc, #116]	; (80040d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004062:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	6892      	ldr	r2, [r2, #8]
 800406a:	0211      	lsls	r1, r2, #8
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	6952      	ldr	r2, [r2, #20]
 8004070:	0852      	lsrs	r2, r2, #1
 8004072:	3a01      	subs	r2, #1
 8004074:	0652      	lsls	r2, r2, #25
 8004076:	430a      	orrs	r2, r1
 8004078:	4915      	ldr	r1, [pc, #84]	; (80040d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800407a:	4313      	orrs	r3, r2
 800407c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800407e:	4b14      	ldr	r3, [pc, #80]	; (80040d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a13      	ldr	r2, [pc, #76]	; (80040d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004084:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004088:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800408a:	f7fd faed 	bl	8001668 <HAL_GetTick>
 800408e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004090:	e009      	b.n	80040a6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004092:	f7fd fae9 	bl	8001668 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b02      	cmp	r3, #2
 800409e:	d902      	bls.n	80040a6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	73fb      	strb	r3, [r7, #15]
          break;
 80040a4:	e005      	b.n	80040b2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040a6:	4b0a      	ldr	r3, [pc, #40]	; (80040d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d0ef      	beq.n	8004092 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80040b2:	7bfb      	ldrb	r3, [r7, #15]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d106      	bne.n	80040c6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80040b8:	4b05      	ldr	r3, [pc, #20]	; (80040d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040ba:	691a      	ldr	r2, [r3, #16]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	4903      	ldr	r1, [pc, #12]	; (80040d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80040c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3710      	adds	r7, #16
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	40021000 	.word	0x40021000

080040d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d101      	bne.n	80040e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e049      	b.n	800417a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d106      	bne.n	8004100 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f7fd f844 	bl	8001188 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2202      	movs	r2, #2
 8004104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	3304      	adds	r3, #4
 8004110:	4619      	mov	r1, r3
 8004112:	4610      	mov	r0, r2
 8004114:	f000 fd5a 	bl	8004bcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3708      	adds	r7, #8
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004182:	b580      	push	{r7, lr}
 8004184:	b082      	sub	sp, #8
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d101      	bne.n	8004194 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e049      	b.n	8004228 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800419a:	b2db      	uxtb	r3, r3
 800419c:	2b00      	cmp	r3, #0
 800419e:	d106      	bne.n	80041ae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f000 f841 	bl	8004230 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2202      	movs	r2, #2
 80041b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	3304      	adds	r3, #4
 80041be:	4619      	mov	r1, r3
 80041c0:	4610      	mov	r0, r2
 80041c2:	f000 fd03 	bl	8004bcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2201      	movs	r2, #1
 80041da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2201      	movs	r2, #1
 80041e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2201      	movs	r2, #1
 80041fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2201      	movs	r2, #1
 8004202:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2201      	movs	r2, #1
 800420a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2201      	movs	r2, #1
 800421a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2201      	movs	r2, #1
 8004222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	4618      	mov	r0, r3
 800422a:	3708      	adds	r7, #8
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004238:	bf00      	nop
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b086      	sub	sp, #24
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
 8004250:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004252:	2300      	movs	r3, #0
 8004254:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d109      	bne.n	8004270 <HAL_TIM_PWM_Start_DMA+0x2c>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004262:	b2db      	uxtb	r3, r3
 8004264:	2b02      	cmp	r3, #2
 8004266:	bf0c      	ite	eq
 8004268:	2301      	moveq	r3, #1
 800426a:	2300      	movne	r3, #0
 800426c:	b2db      	uxtb	r3, r3
 800426e:	e03c      	b.n	80042ea <HAL_TIM_PWM_Start_DMA+0xa6>
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	2b04      	cmp	r3, #4
 8004274:	d109      	bne.n	800428a <HAL_TIM_PWM_Start_DMA+0x46>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b02      	cmp	r3, #2
 8004280:	bf0c      	ite	eq
 8004282:	2301      	moveq	r3, #1
 8004284:	2300      	movne	r3, #0
 8004286:	b2db      	uxtb	r3, r3
 8004288:	e02f      	b.n	80042ea <HAL_TIM_PWM_Start_DMA+0xa6>
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	2b08      	cmp	r3, #8
 800428e:	d109      	bne.n	80042a4 <HAL_TIM_PWM_Start_DMA+0x60>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b02      	cmp	r3, #2
 800429a:	bf0c      	ite	eq
 800429c:	2301      	moveq	r3, #1
 800429e:	2300      	movne	r3, #0
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	e022      	b.n	80042ea <HAL_TIM_PWM_Start_DMA+0xa6>
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	2b0c      	cmp	r3, #12
 80042a8:	d109      	bne.n	80042be <HAL_TIM_PWM_Start_DMA+0x7a>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	bf0c      	ite	eq
 80042b6:	2301      	moveq	r3, #1
 80042b8:	2300      	movne	r3, #0
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	e015      	b.n	80042ea <HAL_TIM_PWM_Start_DMA+0xa6>
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	2b10      	cmp	r3, #16
 80042c2:	d109      	bne.n	80042d8 <HAL_TIM_PWM_Start_DMA+0x94>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	bf0c      	ite	eq
 80042d0:	2301      	moveq	r3, #1
 80042d2:	2300      	movne	r3, #0
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	e008      	b.n	80042ea <HAL_TIM_PWM_Start_DMA+0xa6>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	bf0c      	ite	eq
 80042e4:	2301      	moveq	r3, #1
 80042e6:	2300      	movne	r3, #0
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d001      	beq.n	80042f2 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 80042ee:	2302      	movs	r3, #2
 80042f0:	e18d      	b.n	800460e <HAL_TIM_PWM_Start_DMA+0x3ca>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d109      	bne.n	800430c <HAL_TIM_PWM_Start_DMA+0xc8>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	2b01      	cmp	r3, #1
 8004302:	bf0c      	ite	eq
 8004304:	2301      	moveq	r3, #1
 8004306:	2300      	movne	r3, #0
 8004308:	b2db      	uxtb	r3, r3
 800430a:	e03c      	b.n	8004386 <HAL_TIM_PWM_Start_DMA+0x142>
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	2b04      	cmp	r3, #4
 8004310:	d109      	bne.n	8004326 <HAL_TIM_PWM_Start_DMA+0xe2>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b01      	cmp	r3, #1
 800431c:	bf0c      	ite	eq
 800431e:	2301      	moveq	r3, #1
 8004320:	2300      	movne	r3, #0
 8004322:	b2db      	uxtb	r3, r3
 8004324:	e02f      	b.n	8004386 <HAL_TIM_PWM_Start_DMA+0x142>
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	2b08      	cmp	r3, #8
 800432a:	d109      	bne.n	8004340 <HAL_TIM_PWM_Start_DMA+0xfc>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004332:	b2db      	uxtb	r3, r3
 8004334:	2b01      	cmp	r3, #1
 8004336:	bf0c      	ite	eq
 8004338:	2301      	moveq	r3, #1
 800433a:	2300      	movne	r3, #0
 800433c:	b2db      	uxtb	r3, r3
 800433e:	e022      	b.n	8004386 <HAL_TIM_PWM_Start_DMA+0x142>
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	2b0c      	cmp	r3, #12
 8004344:	d109      	bne.n	800435a <HAL_TIM_PWM_Start_DMA+0x116>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b01      	cmp	r3, #1
 8004350:	bf0c      	ite	eq
 8004352:	2301      	moveq	r3, #1
 8004354:	2300      	movne	r3, #0
 8004356:	b2db      	uxtb	r3, r3
 8004358:	e015      	b.n	8004386 <HAL_TIM_PWM_Start_DMA+0x142>
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	2b10      	cmp	r3, #16
 800435e:	d109      	bne.n	8004374 <HAL_TIM_PWM_Start_DMA+0x130>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004366:	b2db      	uxtb	r3, r3
 8004368:	2b01      	cmp	r3, #1
 800436a:	bf0c      	ite	eq
 800436c:	2301      	moveq	r3, #1
 800436e:	2300      	movne	r3, #0
 8004370:	b2db      	uxtb	r3, r3
 8004372:	e008      	b.n	8004386 <HAL_TIM_PWM_Start_DMA+0x142>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800437a:	b2db      	uxtb	r3, r3
 800437c:	2b01      	cmp	r3, #1
 800437e:	bf0c      	ite	eq
 8004380:	2301      	moveq	r3, #1
 8004382:	2300      	movne	r3, #0
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d034      	beq.n	80043f4 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d002      	beq.n	8004396 <HAL_TIM_PWM_Start_DMA+0x152>
 8004390:	887b      	ldrh	r3, [r7, #2]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d101      	bne.n	800439a <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e139      	b.n	800460e <HAL_TIM_PWM_Start_DMA+0x3ca>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d104      	bne.n	80043aa <HAL_TIM_PWM_Start_DMA+0x166>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2202      	movs	r2, #2
 80043a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043a8:	e026      	b.n	80043f8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	2b04      	cmp	r3, #4
 80043ae:	d104      	bne.n	80043ba <HAL_TIM_PWM_Start_DMA+0x176>
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2202      	movs	r2, #2
 80043b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043b8:	e01e      	b.n	80043f8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	2b08      	cmp	r3, #8
 80043be:	d104      	bne.n	80043ca <HAL_TIM_PWM_Start_DMA+0x186>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2202      	movs	r2, #2
 80043c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043c8:	e016      	b.n	80043f8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	2b0c      	cmp	r3, #12
 80043ce:	d104      	bne.n	80043da <HAL_TIM_PWM_Start_DMA+0x196>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2202      	movs	r2, #2
 80043d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043d8:	e00e      	b.n	80043f8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	2b10      	cmp	r3, #16
 80043de:	d104      	bne.n	80043ea <HAL_TIM_PWM_Start_DMA+0x1a6>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2202      	movs	r2, #2
 80043e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043e8:	e006      	b.n	80043f8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2202      	movs	r2, #2
 80043ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043f2:	e001      	b.n	80043f8 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e10a      	b.n	800460e <HAL_TIM_PWM_Start_DMA+0x3ca>
  }

  switch (Channel)
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	2b0c      	cmp	r3, #12
 80043fc:	f200 80ae 	bhi.w	800455c <HAL_TIM_PWM_Start_DMA+0x318>
 8004400:	a201      	add	r2, pc, #4	; (adr r2, 8004408 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8004402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004406:	bf00      	nop
 8004408:	0800443d 	.word	0x0800443d
 800440c:	0800455d 	.word	0x0800455d
 8004410:	0800455d 	.word	0x0800455d
 8004414:	0800455d 	.word	0x0800455d
 8004418:	08004485 	.word	0x08004485
 800441c:	0800455d 	.word	0x0800455d
 8004420:	0800455d 	.word	0x0800455d
 8004424:	0800455d 	.word	0x0800455d
 8004428:	080044cd 	.word	0x080044cd
 800442c:	0800455d 	.word	0x0800455d
 8004430:	0800455d 	.word	0x0800455d
 8004434:	0800455d 	.word	0x0800455d
 8004438:	08004515 	.word	0x08004515
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004440:	4a75      	ldr	r2, [pc, #468]	; (8004618 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8004442:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004448:	4a74      	ldr	r2, [pc, #464]	; (800461c <HAL_TIM_PWM_Start_DMA+0x3d8>)
 800444a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004450:	4a73      	ldr	r2, [pc, #460]	; (8004620 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8004452:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004458:	6879      	ldr	r1, [r7, #4]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	3334      	adds	r3, #52	; 0x34
 8004460:	461a      	mov	r2, r3
 8004462:	887b      	ldrh	r3, [r7, #2]
 8004464:	f7fe f98a 	bl	800277c <HAL_DMA_Start_IT>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d001      	beq.n	8004472 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e0cd      	b.n	800460e <HAL_TIM_PWM_Start_DMA+0x3ca>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68da      	ldr	r2, [r3, #12]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004480:	60da      	str	r2, [r3, #12]
      break;
 8004482:	e06e      	b.n	8004562 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004488:	4a63      	ldr	r2, [pc, #396]	; (8004618 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 800448a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004490:	4a62      	ldr	r2, [pc, #392]	; (800461c <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8004492:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004498:	4a61      	ldr	r2, [pc, #388]	; (8004620 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 800449a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80044a0:	6879      	ldr	r1, [r7, #4]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	3338      	adds	r3, #56	; 0x38
 80044a8:	461a      	mov	r2, r3
 80044aa:	887b      	ldrh	r3, [r7, #2]
 80044ac:	f7fe f966 	bl	800277c <HAL_DMA_Start_IT>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d001      	beq.n	80044ba <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e0a9      	b.n	800460e <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68da      	ldr	r2, [r3, #12]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80044c8:	60da      	str	r2, [r3, #12]
      break;
 80044ca:	e04a      	b.n	8004562 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d0:	4a51      	ldr	r2, [pc, #324]	; (8004618 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 80044d2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d8:	4a50      	ldr	r2, [pc, #320]	; (800461c <HAL_TIM_PWM_Start_DMA+0x3d8>)
 80044da:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e0:	4a4f      	ldr	r2, [pc, #316]	; (8004620 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 80044e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80044e8:	6879      	ldr	r1, [r7, #4]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	333c      	adds	r3, #60	; 0x3c
 80044f0:	461a      	mov	r2, r3
 80044f2:	887b      	ldrh	r3, [r7, #2]
 80044f4:	f7fe f942 	bl	800277c <HAL_DMA_Start_IT>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e085      	b.n	800460e <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68da      	ldr	r2, [r3, #12]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004510:	60da      	str	r2, [r3, #12]
      break;
 8004512:	e026      	b.n	8004562 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004518:	4a3f      	ldr	r2, [pc, #252]	; (8004618 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 800451a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004520:	4a3e      	ldr	r2, [pc, #248]	; (800461c <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8004522:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004528:	4a3d      	ldr	r2, [pc, #244]	; (8004620 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 800452a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004530:	6879      	ldr	r1, [r7, #4]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	3340      	adds	r3, #64	; 0x40
 8004538:	461a      	mov	r2, r3
 800453a:	887b      	ldrh	r3, [r7, #2]
 800453c:	f7fe f91e 	bl	800277c <HAL_DMA_Start_IT>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d001      	beq.n	800454a <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e061      	b.n	800460e <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68da      	ldr	r2, [r3, #12]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004558:	60da      	str	r2, [r3, #12]
      break;
 800455a:	e002      	b.n	8004562 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	75fb      	strb	r3, [r7, #23]
      break;
 8004560:	bf00      	nop
  }

  if (status == HAL_OK)
 8004562:	7dfb      	ldrb	r3, [r7, #23]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d151      	bne.n	800460c <HAL_TIM_PWM_Start_DMA+0x3c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2201      	movs	r2, #1
 800456e:	68b9      	ldr	r1, [r7, #8]
 8004570:	4618      	mov	r0, r3
 8004572:	f000 fea7 	bl	80052c4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a2a      	ldr	r2, [pc, #168]	; (8004624 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d009      	beq.n	8004594 <HAL_TIM_PWM_Start_DMA+0x350>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a28      	ldr	r2, [pc, #160]	; (8004628 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d004      	beq.n	8004594 <HAL_TIM_PWM_Start_DMA+0x350>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a27      	ldr	r2, [pc, #156]	; (800462c <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d101      	bne.n	8004598 <HAL_TIM_PWM_Start_DMA+0x354>
 8004594:	2301      	movs	r3, #1
 8004596:	e000      	b.n	800459a <HAL_TIM_PWM_Start_DMA+0x356>
 8004598:	2300      	movs	r3, #0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d007      	beq.n	80045ae <HAL_TIM_PWM_Start_DMA+0x36a>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045ac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a1c      	ldr	r2, [pc, #112]	; (8004624 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d009      	beq.n	80045cc <HAL_TIM_PWM_Start_DMA+0x388>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045c0:	d004      	beq.n	80045cc <HAL_TIM_PWM_Start_DMA+0x388>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a18      	ldr	r2, [pc, #96]	; (8004628 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d115      	bne.n	80045f8 <HAL_TIM_PWM_Start_DMA+0x3b4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	689a      	ldr	r2, [r3, #8]
 80045d2:	4b17      	ldr	r3, [pc, #92]	; (8004630 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 80045d4:	4013      	ands	r3, r2
 80045d6:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	2b06      	cmp	r3, #6
 80045dc:	d015      	beq.n	800460a <HAL_TIM_PWM_Start_DMA+0x3c6>
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045e4:	d011      	beq.n	800460a <HAL_TIM_PWM_Start_DMA+0x3c6>
      {
        __HAL_TIM_ENABLE(htim);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f042 0201 	orr.w	r2, r2, #1
 80045f4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045f6:	e008      	b.n	800460a <HAL_TIM_PWM_Start_DMA+0x3c6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f042 0201 	orr.w	r2, r2, #1
 8004606:	601a      	str	r2, [r3, #0]
 8004608:	e000      	b.n	800460c <HAL_TIM_PWM_Start_DMA+0x3c8>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800460a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800460c:	7dfb      	ldrb	r3, [r7, #23]
}
 800460e:	4618      	mov	r0, r3
 8004610:	3718      	adds	r7, #24
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	08004abd 	.word	0x08004abd
 800461c:	08004b65 	.word	0x08004b65
 8004620:	08004a2b 	.word	0x08004a2b
 8004624:	40012c00 	.word	0x40012c00
 8004628:	40014000 	.word	0x40014000
 800462c:	40014400 	.word	0x40014400
 8004630:	00010007 	.word	0x00010007

08004634 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b086      	sub	sp, #24
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004640:	2300      	movs	r3, #0
 8004642:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800464a:	2b01      	cmp	r3, #1
 800464c:	d101      	bne.n	8004652 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800464e:	2302      	movs	r3, #2
 8004650:	e0ff      	b.n	8004852 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2b14      	cmp	r3, #20
 800465e:	f200 80f0 	bhi.w	8004842 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004662:	a201      	add	r2, pc, #4	; (adr r2, 8004668 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004668:	080046bd 	.word	0x080046bd
 800466c:	08004843 	.word	0x08004843
 8004670:	08004843 	.word	0x08004843
 8004674:	08004843 	.word	0x08004843
 8004678:	080046fd 	.word	0x080046fd
 800467c:	08004843 	.word	0x08004843
 8004680:	08004843 	.word	0x08004843
 8004684:	08004843 	.word	0x08004843
 8004688:	0800473f 	.word	0x0800473f
 800468c:	08004843 	.word	0x08004843
 8004690:	08004843 	.word	0x08004843
 8004694:	08004843 	.word	0x08004843
 8004698:	0800477f 	.word	0x0800477f
 800469c:	08004843 	.word	0x08004843
 80046a0:	08004843 	.word	0x08004843
 80046a4:	08004843 	.word	0x08004843
 80046a8:	080047c1 	.word	0x080047c1
 80046ac:	08004843 	.word	0x08004843
 80046b0:	08004843 	.word	0x08004843
 80046b4:	08004843 	.word	0x08004843
 80046b8:	08004801 	.word	0x08004801
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68b9      	ldr	r1, [r7, #8]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f000 fae6 	bl	8004c94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	699a      	ldr	r2, [r3, #24]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f042 0208 	orr.w	r2, r2, #8
 80046d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	699a      	ldr	r2, [r3, #24]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f022 0204 	bic.w	r2, r2, #4
 80046e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6999      	ldr	r1, [r3, #24]
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	691a      	ldr	r2, [r3, #16]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	619a      	str	r2, [r3, #24]
      break;
 80046fa:	e0a5      	b.n	8004848 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68b9      	ldr	r1, [r7, #8]
 8004702:	4618      	mov	r0, r3
 8004704:	f000 fb42 	bl	8004d8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	699a      	ldr	r2, [r3, #24]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004716:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	699a      	ldr	r2, [r3, #24]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004726:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	6999      	ldr	r1, [r3, #24]
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	021a      	lsls	r2, r3, #8
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	430a      	orrs	r2, r1
 800473a:	619a      	str	r2, [r3, #24]
      break;
 800473c:	e084      	b.n	8004848 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68b9      	ldr	r1, [r7, #8]
 8004744:	4618      	mov	r0, r3
 8004746:	f000 fb9b 	bl	8004e80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	69da      	ldr	r2, [r3, #28]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f042 0208 	orr.w	r2, r2, #8
 8004758:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	69da      	ldr	r2, [r3, #28]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f022 0204 	bic.w	r2, r2, #4
 8004768:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	69d9      	ldr	r1, [r3, #28]
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	691a      	ldr	r2, [r3, #16]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	430a      	orrs	r2, r1
 800477a:	61da      	str	r2, [r3, #28]
      break;
 800477c:	e064      	b.n	8004848 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68b9      	ldr	r1, [r7, #8]
 8004784:	4618      	mov	r0, r3
 8004786:	f000 fbf3 	bl	8004f70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	69da      	ldr	r2, [r3, #28]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004798:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	69da      	ldr	r2, [r3, #28]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	69d9      	ldr	r1, [r3, #28]
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	021a      	lsls	r2, r3, #8
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	430a      	orrs	r2, r1
 80047bc:	61da      	str	r2, [r3, #28]
      break;
 80047be:	e043      	b.n	8004848 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68b9      	ldr	r1, [r7, #8]
 80047c6:	4618      	mov	r0, r3
 80047c8:	f000 fc30 	bl	800502c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f042 0208 	orr.w	r2, r2, #8
 80047da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f022 0204 	bic.w	r2, r2, #4
 80047ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	691a      	ldr	r2, [r3, #16]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	430a      	orrs	r2, r1
 80047fc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80047fe:	e023      	b.n	8004848 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68b9      	ldr	r1, [r7, #8]
 8004806:	4618      	mov	r0, r3
 8004808:	f000 fc68 	bl	80050dc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800481a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800482a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	021a      	lsls	r2, r3, #8
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	430a      	orrs	r2, r1
 800483e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004840:	e002      	b.n	8004848 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	75fb      	strb	r3, [r7, #23]
      break;
 8004846:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2200      	movs	r2, #0
 800484c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004850:	7dfb      	ldrb	r3, [r7, #23]
}
 8004852:	4618      	mov	r0, r3
 8004854:	3718      	adds	r7, #24
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop

0800485c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004866:	2300      	movs	r3, #0
 8004868:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004870:	2b01      	cmp	r3, #1
 8004872:	d101      	bne.n	8004878 <HAL_TIM_ConfigClockSource+0x1c>
 8004874:	2302      	movs	r3, #2
 8004876:	e0b6      	b.n	80049e6 <HAL_TIM_ConfigClockSource+0x18a>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2202      	movs	r2, #2
 8004884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004896:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800489a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68ba      	ldr	r2, [r7, #8]
 80048aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048b4:	d03e      	beq.n	8004934 <HAL_TIM_ConfigClockSource+0xd8>
 80048b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048ba:	f200 8087 	bhi.w	80049cc <HAL_TIM_ConfigClockSource+0x170>
 80048be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048c2:	f000 8086 	beq.w	80049d2 <HAL_TIM_ConfigClockSource+0x176>
 80048c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ca:	d87f      	bhi.n	80049cc <HAL_TIM_ConfigClockSource+0x170>
 80048cc:	2b70      	cmp	r3, #112	; 0x70
 80048ce:	d01a      	beq.n	8004906 <HAL_TIM_ConfigClockSource+0xaa>
 80048d0:	2b70      	cmp	r3, #112	; 0x70
 80048d2:	d87b      	bhi.n	80049cc <HAL_TIM_ConfigClockSource+0x170>
 80048d4:	2b60      	cmp	r3, #96	; 0x60
 80048d6:	d050      	beq.n	800497a <HAL_TIM_ConfigClockSource+0x11e>
 80048d8:	2b60      	cmp	r3, #96	; 0x60
 80048da:	d877      	bhi.n	80049cc <HAL_TIM_ConfigClockSource+0x170>
 80048dc:	2b50      	cmp	r3, #80	; 0x50
 80048de:	d03c      	beq.n	800495a <HAL_TIM_ConfigClockSource+0xfe>
 80048e0:	2b50      	cmp	r3, #80	; 0x50
 80048e2:	d873      	bhi.n	80049cc <HAL_TIM_ConfigClockSource+0x170>
 80048e4:	2b40      	cmp	r3, #64	; 0x40
 80048e6:	d058      	beq.n	800499a <HAL_TIM_ConfigClockSource+0x13e>
 80048e8:	2b40      	cmp	r3, #64	; 0x40
 80048ea:	d86f      	bhi.n	80049cc <HAL_TIM_ConfigClockSource+0x170>
 80048ec:	2b30      	cmp	r3, #48	; 0x30
 80048ee:	d064      	beq.n	80049ba <HAL_TIM_ConfigClockSource+0x15e>
 80048f0:	2b30      	cmp	r3, #48	; 0x30
 80048f2:	d86b      	bhi.n	80049cc <HAL_TIM_ConfigClockSource+0x170>
 80048f4:	2b20      	cmp	r3, #32
 80048f6:	d060      	beq.n	80049ba <HAL_TIM_ConfigClockSource+0x15e>
 80048f8:	2b20      	cmp	r3, #32
 80048fa:	d867      	bhi.n	80049cc <HAL_TIM_ConfigClockSource+0x170>
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d05c      	beq.n	80049ba <HAL_TIM_ConfigClockSource+0x15e>
 8004900:	2b10      	cmp	r3, #16
 8004902:	d05a      	beq.n	80049ba <HAL_TIM_ConfigClockSource+0x15e>
 8004904:	e062      	b.n	80049cc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6818      	ldr	r0, [r3, #0]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	6899      	ldr	r1, [r3, #8]
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	685a      	ldr	r2, [r3, #4]
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	f000 fcb5 	bl	8005284 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004928:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68ba      	ldr	r2, [r7, #8]
 8004930:	609a      	str	r2, [r3, #8]
      break;
 8004932:	e04f      	b.n	80049d4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6818      	ldr	r0, [r3, #0]
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	6899      	ldr	r1, [r3, #8]
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	685a      	ldr	r2, [r3, #4]
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	f000 fc9e 	bl	8005284 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	689a      	ldr	r2, [r3, #8]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004956:	609a      	str	r2, [r3, #8]
      break;
 8004958:	e03c      	b.n	80049d4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6818      	ldr	r0, [r3, #0]
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	6859      	ldr	r1, [r3, #4]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	461a      	mov	r2, r3
 8004968:	f000 fc12 	bl	8005190 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2150      	movs	r1, #80	; 0x50
 8004972:	4618      	mov	r0, r3
 8004974:	f000 fc6b 	bl	800524e <TIM_ITRx_SetConfig>
      break;
 8004978:	e02c      	b.n	80049d4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6818      	ldr	r0, [r3, #0]
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	6859      	ldr	r1, [r3, #4]
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	461a      	mov	r2, r3
 8004988:	f000 fc31 	bl	80051ee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2160      	movs	r1, #96	; 0x60
 8004992:	4618      	mov	r0, r3
 8004994:	f000 fc5b 	bl	800524e <TIM_ITRx_SetConfig>
      break;
 8004998:	e01c      	b.n	80049d4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6818      	ldr	r0, [r3, #0]
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	6859      	ldr	r1, [r3, #4]
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	461a      	mov	r2, r3
 80049a8:	f000 fbf2 	bl	8005190 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2140      	movs	r1, #64	; 0x40
 80049b2:	4618      	mov	r0, r3
 80049b4:	f000 fc4b 	bl	800524e <TIM_ITRx_SetConfig>
      break;
 80049b8:	e00c      	b.n	80049d4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4619      	mov	r1, r3
 80049c4:	4610      	mov	r0, r2
 80049c6:	f000 fc42 	bl	800524e <TIM_ITRx_SetConfig>
      break;
 80049ca:	e003      	b.n	80049d4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	73fb      	strb	r3, [r7, #15]
      break;
 80049d0:	e000      	b.n	80049d4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80049d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80049e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3710      	adds	r7, #16
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049ee:	b480      	push	{r7}
 80049f0:	b083      	sub	sp, #12
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049f6:	bf00      	nop
 80049f8:	370c      	adds	r7, #12
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr

08004a02 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b083      	sub	sp, #12
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004a0a:	bf00      	nop
 8004a0c:	370c      	adds	r7, #12
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr

08004a16 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004a16:	b480      	push	{r7}
 8004a18:	b083      	sub	sp, #12
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004a1e:	bf00      	nop
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr

08004a2a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a2a:	b580      	push	{r7, lr}
 8004a2c:	b084      	sub	sp, #16
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a36:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d107      	bne.n	8004a52 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2201      	movs	r2, #1
 8004a46:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a50:	e02a      	b.n	8004aa8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d107      	bne.n	8004a6c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2202      	movs	r2, #2
 8004a60:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2201      	movs	r2, #1
 8004a66:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a6a:	e01d      	b.n	8004aa8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d107      	bne.n	8004a86 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2204      	movs	r2, #4
 8004a7a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a84:	e010      	b.n	8004aa8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d107      	bne.n	8004aa0 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2208      	movs	r2, #8
 8004a94:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a9e:	e003      	b.n	8004aa8 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004aa8:	68f8      	ldr	r0, [r7, #12]
 8004aaa:	f7ff ffb4 	bl	8004a16 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	771a      	strb	r2, [r3, #28]
}
 8004ab4:	bf00      	nop
 8004ab6:	3710      	adds	r7, #16
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d10b      	bne.n	8004aec <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	69db      	ldr	r3, [r3, #28]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d136      	bne.n	8004b50 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004aea:	e031      	b.n	8004b50 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d10b      	bne.n	8004b0e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2202      	movs	r2, #2
 8004afa:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	69db      	ldr	r3, [r3, #28]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d125      	bne.n	8004b50 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b0c:	e020      	b.n	8004b50 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d10b      	bne.n	8004b30 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2204      	movs	r2, #4
 8004b1c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	69db      	ldr	r3, [r3, #28]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d114      	bne.n	8004b50 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b2e:	e00f      	b.n	8004b50 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d10a      	bne.n	8004b50 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2208      	movs	r2, #8
 8004b3e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	69db      	ldr	r3, [r3, #28]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d103      	bne.n	8004b50 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	f7ff ff4c 	bl	80049ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	771a      	strb	r2, [r3, #28]
}
 8004b5c:	bf00      	nop
 8004b5e:	3710      	adds	r7, #16
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b70:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d103      	bne.n	8004b84 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	771a      	strb	r2, [r3, #28]
 8004b82:	e019      	b.n	8004bb8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d103      	bne.n	8004b96 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2202      	movs	r2, #2
 8004b92:	771a      	strb	r2, [r3, #28]
 8004b94:	e010      	b.n	8004bb8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d103      	bne.n	8004ba8 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2204      	movs	r2, #4
 8004ba4:	771a      	strb	r2, [r3, #28]
 8004ba6:	e007      	b.n	8004bb8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d102      	bne.n	8004bb8 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2208      	movs	r2, #8
 8004bb6:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004bb8:	68f8      	ldr	r0, [r7, #12]
 8004bba:	f7ff ff22 	bl	8004a02 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	771a      	strb	r2, [r3, #28]
}
 8004bc4:	bf00      	nop
 8004bc6:	3710      	adds	r7, #16
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a2a      	ldr	r2, [pc, #168]	; (8004c88 <TIM_Base_SetConfig+0xbc>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d003      	beq.n	8004bec <TIM_Base_SetConfig+0x20>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bea:	d108      	bne.n	8004bfe <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a21      	ldr	r2, [pc, #132]	; (8004c88 <TIM_Base_SetConfig+0xbc>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d00b      	beq.n	8004c1e <TIM_Base_SetConfig+0x52>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c0c:	d007      	beq.n	8004c1e <TIM_Base_SetConfig+0x52>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a1e      	ldr	r2, [pc, #120]	; (8004c8c <TIM_Base_SetConfig+0xc0>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d003      	beq.n	8004c1e <TIM_Base_SetConfig+0x52>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a1d      	ldr	r2, [pc, #116]	; (8004c90 <TIM_Base_SetConfig+0xc4>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d108      	bne.n	8004c30 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	689a      	ldr	r2, [r3, #8]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a0c      	ldr	r2, [pc, #48]	; (8004c88 <TIM_Base_SetConfig+0xbc>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d007      	beq.n	8004c6c <TIM_Base_SetConfig+0xa0>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a0b      	ldr	r2, [pc, #44]	; (8004c8c <TIM_Base_SetConfig+0xc0>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d003      	beq.n	8004c6c <TIM_Base_SetConfig+0xa0>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a0a      	ldr	r2, [pc, #40]	; (8004c90 <TIM_Base_SetConfig+0xc4>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d103      	bne.n	8004c74 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	691a      	ldr	r2, [r3, #16]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	615a      	str	r2, [r3, #20]
}
 8004c7a:	bf00      	nop
 8004c7c:	3714      	adds	r7, #20
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	40012c00 	.word	0x40012c00
 8004c8c:	40014000 	.word	0x40014000
 8004c90:	40014400 	.word	0x40014400

08004c94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b087      	sub	sp, #28
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	f023 0201 	bic.w	r2, r3, #1
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f023 0303 	bic.w	r3, r3, #3
 8004cce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	f023 0302 	bic.w	r3, r3, #2
 8004ce0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a24      	ldr	r2, [pc, #144]	; (8004d80 <TIM_OC1_SetConfig+0xec>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d007      	beq.n	8004d04 <TIM_OC1_SetConfig+0x70>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a23      	ldr	r2, [pc, #140]	; (8004d84 <TIM_OC1_SetConfig+0xf0>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d003      	beq.n	8004d04 <TIM_OC1_SetConfig+0x70>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a22      	ldr	r2, [pc, #136]	; (8004d88 <TIM_OC1_SetConfig+0xf4>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d10c      	bne.n	8004d1e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	f023 0308 	bic.w	r3, r3, #8
 8004d0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	f023 0304 	bic.w	r3, r3, #4
 8004d1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a17      	ldr	r2, [pc, #92]	; (8004d80 <TIM_OC1_SetConfig+0xec>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d007      	beq.n	8004d36 <TIM_OC1_SetConfig+0xa2>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a16      	ldr	r2, [pc, #88]	; (8004d84 <TIM_OC1_SetConfig+0xf0>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d003      	beq.n	8004d36 <TIM_OC1_SetConfig+0xa2>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a15      	ldr	r2, [pc, #84]	; (8004d88 <TIM_OC1_SetConfig+0xf4>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d111      	bne.n	8004d5a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	699b      	ldr	r3, [r3, #24]
 8004d54:	693a      	ldr	r2, [r7, #16]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	693a      	ldr	r2, [r7, #16]
 8004d5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	685a      	ldr	r2, [r3, #4]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	697a      	ldr	r2, [r7, #20]
 8004d72:	621a      	str	r2, [r3, #32]
}
 8004d74:	bf00      	nop
 8004d76:	371c      	adds	r7, #28
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr
 8004d80:	40012c00 	.word	0x40012c00
 8004d84:	40014000 	.word	0x40014000
 8004d88:	40014400 	.word	0x40014400

08004d8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b087      	sub	sp, #28
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a1b      	ldr	r3, [r3, #32]
 8004d9a:	f023 0210 	bic.w	r2, r3, #16
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a1b      	ldr	r3, [r3, #32]
 8004da6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004dba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	021b      	lsls	r3, r3, #8
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	f023 0320 	bic.w	r3, r3, #32
 8004dda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	011b      	lsls	r3, r3, #4
 8004de2:	697a      	ldr	r2, [r7, #20]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a22      	ldr	r2, [pc, #136]	; (8004e74 <TIM_OC2_SetConfig+0xe8>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d10d      	bne.n	8004e0c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004df6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	011b      	lsls	r3, r3, #4
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e0a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a19      	ldr	r2, [pc, #100]	; (8004e74 <TIM_OC2_SetConfig+0xe8>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d007      	beq.n	8004e24 <TIM_OC2_SetConfig+0x98>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a18      	ldr	r2, [pc, #96]	; (8004e78 <TIM_OC2_SetConfig+0xec>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d003      	beq.n	8004e24 <TIM_OC2_SetConfig+0x98>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a17      	ldr	r2, [pc, #92]	; (8004e7c <TIM_OC2_SetConfig+0xf0>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d113      	bne.n	8004e4c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	695b      	ldr	r3, [r3, #20]
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	693a      	ldr	r2, [r7, #16]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	699b      	ldr	r3, [r3, #24]
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	693a      	ldr	r2, [r7, #16]
 8004e50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	685a      	ldr	r2, [r3, #4]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	621a      	str	r2, [r3, #32]
}
 8004e66:	bf00      	nop
 8004e68:	371c      	adds	r7, #28
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	40012c00 	.word	0x40012c00
 8004e78:	40014000 	.word	0x40014000
 8004e7c:	40014400 	.word	0x40014400

08004e80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b087      	sub	sp, #28
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	69db      	ldr	r3, [r3, #28]
 8004ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f023 0303 	bic.w	r3, r3, #3
 8004eba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ecc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	021b      	lsls	r3, r3, #8
 8004ed4:	697a      	ldr	r2, [r7, #20]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a21      	ldr	r2, [pc, #132]	; (8004f64 <TIM_OC3_SetConfig+0xe4>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d10d      	bne.n	8004efe <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ee8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	021b      	lsls	r3, r3, #8
 8004ef0:	697a      	ldr	r2, [r7, #20]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004efc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a18      	ldr	r2, [pc, #96]	; (8004f64 <TIM_OC3_SetConfig+0xe4>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d007      	beq.n	8004f16 <TIM_OC3_SetConfig+0x96>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a17      	ldr	r2, [pc, #92]	; (8004f68 <TIM_OC3_SetConfig+0xe8>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d003      	beq.n	8004f16 <TIM_OC3_SetConfig+0x96>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a16      	ldr	r2, [pc, #88]	; (8004f6c <TIM_OC3_SetConfig+0xec>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d113      	bne.n	8004f3e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	011b      	lsls	r3, r3, #4
 8004f2c:	693a      	ldr	r2, [r7, #16]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	011b      	lsls	r3, r3, #4
 8004f38:	693a      	ldr	r2, [r7, #16]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	693a      	ldr	r2, [r7, #16]
 8004f42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	685a      	ldr	r2, [r3, #4]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	697a      	ldr	r2, [r7, #20]
 8004f56:	621a      	str	r2, [r3, #32]
}
 8004f58:	bf00      	nop
 8004f5a:	371c      	adds	r7, #28
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr
 8004f64:	40012c00 	.word	0x40012c00
 8004f68:	40014000 	.word	0x40014000
 8004f6c:	40014400 	.word	0x40014400

08004f70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b087      	sub	sp, #28
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a1b      	ldr	r3, [r3, #32]
 8004f7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a1b      	ldr	r3, [r3, #32]
 8004f8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	69db      	ldr	r3, [r3, #28]
 8004f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004faa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	021b      	lsls	r3, r3, #8
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004fbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	031b      	lsls	r3, r3, #12
 8004fc6:	693a      	ldr	r2, [r7, #16]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a14      	ldr	r2, [pc, #80]	; (8005020 <TIM_OC4_SetConfig+0xb0>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d007      	beq.n	8004fe4 <TIM_OC4_SetConfig+0x74>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a13      	ldr	r2, [pc, #76]	; (8005024 <TIM_OC4_SetConfig+0xb4>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d003      	beq.n	8004fe4 <TIM_OC4_SetConfig+0x74>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a12      	ldr	r2, [pc, #72]	; (8005028 <TIM_OC4_SetConfig+0xb8>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d109      	bne.n	8004ff8 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	695b      	ldr	r3, [r3, #20]
 8004ff0:	019b      	lsls	r3, r3, #6
 8004ff2:	697a      	ldr	r2, [r7, #20]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	685a      	ldr	r2, [r3, #4]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	693a      	ldr	r2, [r7, #16]
 8005010:	621a      	str	r2, [r3, #32]
}
 8005012:	bf00      	nop
 8005014:	371c      	adds	r7, #28
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	40012c00 	.word	0x40012c00
 8005024:	40014000 	.word	0x40014000
 8005028:	40014400 	.word	0x40014400

0800502c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800502c:	b480      	push	{r7}
 800502e:	b087      	sub	sp, #28
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a1b      	ldr	r3, [r3, #32]
 800503a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6a1b      	ldr	r3, [r3, #32]
 8005046:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800505a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800505e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	4313      	orrs	r3, r2
 8005068:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005070:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	041b      	lsls	r3, r3, #16
 8005078:	693a      	ldr	r2, [r7, #16]
 800507a:	4313      	orrs	r3, r2
 800507c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a13      	ldr	r2, [pc, #76]	; (80050d0 <TIM_OC5_SetConfig+0xa4>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d007      	beq.n	8005096 <TIM_OC5_SetConfig+0x6a>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a12      	ldr	r2, [pc, #72]	; (80050d4 <TIM_OC5_SetConfig+0xa8>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d003      	beq.n	8005096 <TIM_OC5_SetConfig+0x6a>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a11      	ldr	r2, [pc, #68]	; (80050d8 <TIM_OC5_SetConfig+0xac>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d109      	bne.n	80050aa <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800509c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	021b      	lsls	r3, r3, #8
 80050a4:	697a      	ldr	r2, [r7, #20]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	697a      	ldr	r2, [r7, #20]
 80050ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	685a      	ldr	r2, [r3, #4]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	693a      	ldr	r2, [r7, #16]
 80050c2:	621a      	str	r2, [r3, #32]
}
 80050c4:	bf00      	nop
 80050c6:	371c      	adds	r7, #28
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr
 80050d0:	40012c00 	.word	0x40012c00
 80050d4:	40014000 	.word	0x40014000
 80050d8:	40014400 	.word	0x40014400

080050dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80050dc:	b480      	push	{r7}
 80050de:	b087      	sub	sp, #28
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a1b      	ldr	r3, [r3, #32]
 80050ea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a1b      	ldr	r3, [r3, #32]
 80050f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800510a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800510e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	021b      	lsls	r3, r3, #8
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	4313      	orrs	r3, r2
 800511a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005122:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	051b      	lsls	r3, r3, #20
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	4313      	orrs	r3, r2
 800512e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a14      	ldr	r2, [pc, #80]	; (8005184 <TIM_OC6_SetConfig+0xa8>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d007      	beq.n	8005148 <TIM_OC6_SetConfig+0x6c>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a13      	ldr	r2, [pc, #76]	; (8005188 <TIM_OC6_SetConfig+0xac>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d003      	beq.n	8005148 <TIM_OC6_SetConfig+0x6c>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a12      	ldr	r2, [pc, #72]	; (800518c <TIM_OC6_SetConfig+0xb0>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d109      	bne.n	800515c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800514e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	695b      	ldr	r3, [r3, #20]
 8005154:	029b      	lsls	r3, r3, #10
 8005156:	697a      	ldr	r2, [r7, #20]
 8005158:	4313      	orrs	r3, r2
 800515a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	685a      	ldr	r2, [r3, #4]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	693a      	ldr	r2, [r7, #16]
 8005174:	621a      	str	r2, [r3, #32]
}
 8005176:	bf00      	nop
 8005178:	371c      	adds	r7, #28
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	40012c00 	.word	0x40012c00
 8005188:	40014000 	.word	0x40014000
 800518c:	40014400 	.word	0x40014400

08005190 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005190:	b480      	push	{r7}
 8005192:	b087      	sub	sp, #28
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6a1b      	ldr	r3, [r3, #32]
 80051a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6a1b      	ldr	r3, [r3, #32]
 80051a6:	f023 0201 	bic.w	r2, r3, #1
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	011b      	lsls	r3, r3, #4
 80051c0:	693a      	ldr	r2, [r7, #16]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	f023 030a 	bic.w	r3, r3, #10
 80051cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051ce:	697a      	ldr	r2, [r7, #20]
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	693a      	ldr	r2, [r7, #16]
 80051da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	697a      	ldr	r2, [r7, #20]
 80051e0:	621a      	str	r2, [r3, #32]
}
 80051e2:	bf00      	nop
 80051e4:	371c      	adds	r7, #28
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr

080051ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051ee:	b480      	push	{r7}
 80051f0:	b087      	sub	sp, #28
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	60f8      	str	r0, [r7, #12]
 80051f6:	60b9      	str	r1, [r7, #8]
 80051f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6a1b      	ldr	r3, [r3, #32]
 80051fe:	f023 0210 	bic.w	r2, r3, #16
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6a1b      	ldr	r3, [r3, #32]
 8005210:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005218:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	031b      	lsls	r3, r3, #12
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	4313      	orrs	r3, r2
 8005222:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800522a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	011b      	lsls	r3, r3, #4
 8005230:	693a      	ldr	r2, [r7, #16]
 8005232:	4313      	orrs	r3, r2
 8005234:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	697a      	ldr	r2, [r7, #20]
 800523a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	693a      	ldr	r2, [r7, #16]
 8005240:	621a      	str	r2, [r3, #32]
}
 8005242:	bf00      	nop
 8005244:	371c      	adds	r7, #28
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr

0800524e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800524e:	b480      	push	{r7}
 8005250:	b085      	sub	sp, #20
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
 8005256:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005264:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005266:	683a      	ldr	r2, [r7, #0]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	4313      	orrs	r3, r2
 800526c:	f043 0307 	orr.w	r3, r3, #7
 8005270:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	609a      	str	r2, [r3, #8]
}
 8005278:	bf00      	nop
 800527a:	3714      	adds	r7, #20
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005284:	b480      	push	{r7}
 8005286:	b087      	sub	sp, #28
 8005288:	af00      	add	r7, sp, #0
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	607a      	str	r2, [r7, #4]
 8005290:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800529e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	021a      	lsls	r2, r3, #8
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	431a      	orrs	r2, r3
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	697a      	ldr	r2, [r7, #20]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	697a      	ldr	r2, [r7, #20]
 80052b6:	609a      	str	r2, [r3, #8]
}
 80052b8:	bf00      	nop
 80052ba:	371c      	adds	r7, #28
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b087      	sub	sp, #28
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	f003 031f 	and.w	r3, r3, #31
 80052d6:	2201      	movs	r2, #1
 80052d8:	fa02 f303 	lsl.w	r3, r2, r3
 80052dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6a1a      	ldr	r2, [r3, #32]
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	43db      	mvns	r3, r3
 80052e6:	401a      	ands	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6a1a      	ldr	r2, [r3, #32]
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	f003 031f 	and.w	r3, r3, #31
 80052f6:	6879      	ldr	r1, [r7, #4]
 80052f8:	fa01 f303 	lsl.w	r3, r1, r3
 80052fc:	431a      	orrs	r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	621a      	str	r2, [r3, #32]
}
 8005302:	bf00      	nop
 8005304:	371c      	adds	r7, #28
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
	...

08005310 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005320:	2b01      	cmp	r3, #1
 8005322:	d101      	bne.n	8005328 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005324:	2302      	movs	r3, #2
 8005326:	e04f      	b.n	80053c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2202      	movs	r2, #2
 8005334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a21      	ldr	r2, [pc, #132]	; (80053d4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d108      	bne.n	8005364 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005358:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	68fa      	ldr	r2, [r7, #12]
 8005360:	4313      	orrs	r3, r2
 8005362:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800536a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	4313      	orrs	r3, r2
 8005374:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a14      	ldr	r2, [pc, #80]	; (80053d4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d009      	beq.n	800539c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005390:	d004      	beq.n	800539c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a10      	ldr	r2, [pc, #64]	; (80053d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d10c      	bne.n	80053b6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	68ba      	ldr	r2, [r7, #8]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68ba      	ldr	r2, [r7, #8]
 80053b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3714      	adds	r7, #20
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr
 80053d4:	40012c00 	.word	0x40012c00
 80053d8:	40014000 	.word	0x40014000

080053dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d101      	bne.n	80053ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e040      	b.n	8005470 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d106      	bne.n	8005404 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f7fb ff40 	bl	8001284 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2224      	movs	r2, #36	; 0x24
 8005408:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f022 0201 	bic.w	r2, r2, #1
 8005418:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 fb7a 	bl	8005b14 <UART_SetConfig>
 8005420:	4603      	mov	r3, r0
 8005422:	2b01      	cmp	r3, #1
 8005424:	d101      	bne.n	800542a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e022      	b.n	8005470 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542e:	2b00      	cmp	r3, #0
 8005430:	d002      	beq.n	8005438 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 fd9a 	bl	8005f6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	685a      	ldr	r2, [r3, #4]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005446:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	689a      	ldr	r2, [r3, #8]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005456:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f042 0201 	orr.w	r2, r2, #1
 8005466:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 fe21 	bl	80060b0 <UART_CheckIdleState>
 800546e:	4603      	mov	r3, r0
}
 8005470:	4618      	mov	r0, r3
 8005472:	3708      	adds	r7, #8
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b08a      	sub	sp, #40	; 0x28
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	4613      	mov	r3, r2
 8005484:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800548a:	2b20      	cmp	r3, #32
 800548c:	d142      	bne.n	8005514 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d002      	beq.n	800549a <HAL_UART_Receive_IT+0x22>
 8005494:	88fb      	ldrh	r3, [r7, #6]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d101      	bne.n	800549e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e03b      	b.n	8005516 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d101      	bne.n	80054ac <HAL_UART_Receive_IT+0x34>
 80054a8:	2302      	movs	r3, #2
 80054aa:	e034      	b.n	8005516 <HAL_UART_Receive_IT+0x9e>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a18      	ldr	r2, [pc, #96]	; (8005520 <HAL_UART_Receive_IT+0xa8>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d01f      	beq.n	8005504 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d018      	beq.n	8005504 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	e853 3f00 	ldrex	r3, [r3]
 80054de:	613b      	str	r3, [r7, #16]
   return(result);
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80054e6:	627b      	str	r3, [r7, #36]	; 0x24
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	461a      	mov	r2, r3
 80054ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f0:	623b      	str	r3, [r7, #32]
 80054f2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f4:	69f9      	ldr	r1, [r7, #28]
 80054f6:	6a3a      	ldr	r2, [r7, #32]
 80054f8:	e841 2300 	strex	r3, r2, [r1]
 80054fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d1e6      	bne.n	80054d2 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005504:	88fb      	ldrh	r3, [r7, #6]
 8005506:	461a      	mov	r2, r3
 8005508:	68b9      	ldr	r1, [r7, #8]
 800550a:	68f8      	ldr	r0, [r7, #12]
 800550c:	f000 fede 	bl	80062cc <UART_Start_Receive_IT>
 8005510:	4603      	mov	r3, r0
 8005512:	e000      	b.n	8005516 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005514:	2302      	movs	r3, #2
  }
}
 8005516:	4618      	mov	r0, r3
 8005518:	3728      	adds	r7, #40	; 0x28
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	40008000 	.word	0x40008000

08005524 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b0ba      	sub	sp, #232	; 0xe8
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	69db      	ldr	r3, [r3, #28]
 8005532:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800554a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800554e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005552:	4013      	ands	r3, r2
 8005554:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005558:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800555c:	2b00      	cmp	r3, #0
 800555e:	d115      	bne.n	800558c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005564:	f003 0320 	and.w	r3, r3, #32
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00f      	beq.n	800558c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800556c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005570:	f003 0320 	and.w	r3, r3, #32
 8005574:	2b00      	cmp	r3, #0
 8005576:	d009      	beq.n	800558c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800557c:	2b00      	cmp	r3, #0
 800557e:	f000 82a6 	beq.w	8005ace <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	4798      	blx	r3
      }
      return;
 800558a:	e2a0      	b.n	8005ace <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800558c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005590:	2b00      	cmp	r3, #0
 8005592:	f000 8117 	beq.w	80057c4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005596:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d106      	bne.n	80055b0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80055a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80055a6:	4b85      	ldr	r3, [pc, #532]	; (80057bc <HAL_UART_IRQHandler+0x298>)
 80055a8:	4013      	ands	r3, r2
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	f000 810a 	beq.w	80057c4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80055b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055b4:	f003 0301 	and.w	r3, r3, #1
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d011      	beq.n	80055e0 <HAL_UART_IRQHandler+0xbc>
 80055bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00b      	beq.n	80055e0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2201      	movs	r2, #1
 80055ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055d6:	f043 0201 	orr.w	r2, r3, #1
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055e4:	f003 0302 	and.w	r3, r3, #2
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d011      	beq.n	8005610 <HAL_UART_IRQHandler+0xec>
 80055ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055f0:	f003 0301 	and.w	r3, r3, #1
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d00b      	beq.n	8005610 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2202      	movs	r2, #2
 80055fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005606:	f043 0204 	orr.w	r2, r3, #4
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005614:	f003 0304 	and.w	r3, r3, #4
 8005618:	2b00      	cmp	r3, #0
 800561a:	d011      	beq.n	8005640 <HAL_UART_IRQHandler+0x11c>
 800561c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005620:	f003 0301 	and.w	r3, r3, #1
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00b      	beq.n	8005640 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2204      	movs	r2, #4
 800562e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005636:	f043 0202 	orr.w	r2, r3, #2
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005644:	f003 0308 	and.w	r3, r3, #8
 8005648:	2b00      	cmp	r3, #0
 800564a:	d017      	beq.n	800567c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800564c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005650:	f003 0320 	and.w	r3, r3, #32
 8005654:	2b00      	cmp	r3, #0
 8005656:	d105      	bne.n	8005664 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005658:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800565c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00b      	beq.n	800567c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2208      	movs	r2, #8
 800566a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005672:	f043 0208 	orr.w	r2, r3, #8
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800567c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005680:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005684:	2b00      	cmp	r3, #0
 8005686:	d012      	beq.n	80056ae <HAL_UART_IRQHandler+0x18a>
 8005688:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800568c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005690:	2b00      	cmp	r3, #0
 8005692:	d00c      	beq.n	80056ae <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800569c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056a4:	f043 0220 	orr.w	r2, r3, #32
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	f000 820c 	beq.w	8005ad2 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80056ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056be:	f003 0320 	and.w	r3, r3, #32
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00d      	beq.n	80056e2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80056c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056ca:	f003 0320 	and.w	r3, r3, #32
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d007      	beq.n	80056e2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d003      	beq.n	80056e2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f6:	2b40      	cmp	r3, #64	; 0x40
 80056f8:	d005      	beq.n	8005706 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80056fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005702:	2b00      	cmp	r3, #0
 8005704:	d04f      	beq.n	80057a6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 feaa 	bl	8006460 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005716:	2b40      	cmp	r3, #64	; 0x40
 8005718:	d141      	bne.n	800579e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	3308      	adds	r3, #8
 8005720:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005724:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005728:	e853 3f00 	ldrex	r3, [r3]
 800572c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005730:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005734:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005738:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	3308      	adds	r3, #8
 8005742:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005746:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800574a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005752:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005756:	e841 2300 	strex	r3, r2, [r1]
 800575a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800575e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d1d9      	bne.n	800571a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800576a:	2b00      	cmp	r3, #0
 800576c:	d013      	beq.n	8005796 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005772:	4a13      	ldr	r2, [pc, #76]	; (80057c0 <HAL_UART_IRQHandler+0x29c>)
 8005774:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800577a:	4618      	mov	r0, r3
 800577c:	f7fd f89c 	bl	80028b8 <HAL_DMA_Abort_IT>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d017      	beq.n	80057b6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800578a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005790:	4610      	mov	r0, r2
 8005792:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005794:	e00f      	b.n	80057b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f7fb fc30 	bl	8000ffc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800579c:	e00b      	b.n	80057b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f7fb fc2c 	bl	8000ffc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057a4:	e007      	b.n	80057b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f7fb fc28 	bl	8000ffc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80057b4:	e18d      	b.n	8005ad2 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057b6:	bf00      	nop
    return;
 80057b8:	e18b      	b.n	8005ad2 <HAL_UART_IRQHandler+0x5ae>
 80057ba:	bf00      	nop
 80057bc:	04000120 	.word	0x04000120
 80057c0:	08006527 	.word	0x08006527

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	f040 8146 	bne.w	8005a5a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80057ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057d2:	f003 0310 	and.w	r3, r3, #16
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	f000 813f 	beq.w	8005a5a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80057dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057e0:	f003 0310 	and.w	r3, r3, #16
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f000 8138 	beq.w	8005a5a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2210      	movs	r2, #16
 80057f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057fc:	2b40      	cmp	r3, #64	; 0x40
 80057fe:	f040 80b4 	bne.w	800596a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800580e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005812:	2b00      	cmp	r3, #0
 8005814:	f000 815f 	beq.w	8005ad6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800581e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005822:	429a      	cmp	r2, r3
 8005824:	f080 8157 	bcs.w	8005ad6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800582e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0320 	and.w	r3, r3, #32
 800583e:	2b00      	cmp	r3, #0
 8005840:	f040 8085 	bne.w	800594e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005850:	e853 3f00 	ldrex	r3, [r3]
 8005854:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005858:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800585c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005860:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	461a      	mov	r2, r3
 800586a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800586e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005872:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005876:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800587a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800587e:	e841 2300 	strex	r3, r2, [r1]
 8005882:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005886:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1da      	bne.n	8005844 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	3308      	adds	r3, #8
 8005894:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005896:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005898:	e853 3f00 	ldrex	r3, [r3]
 800589c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800589e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058a0:	f023 0301 	bic.w	r3, r3, #1
 80058a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	3308      	adds	r3, #8
 80058ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80058b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80058b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80058ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80058be:	e841 2300 	strex	r3, r2, [r1]
 80058c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80058c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1e1      	bne.n	800588e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	3308      	adds	r3, #8
 80058d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058d4:	e853 3f00 	ldrex	r3, [r3]
 80058d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80058da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	3308      	adds	r3, #8
 80058ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80058ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80058f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80058f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80058f6:	e841 2300 	strex	r3, r2, [r1]
 80058fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80058fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d1e3      	bne.n	80058ca <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2220      	movs	r2, #32
 8005906:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005914:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005916:	e853 3f00 	ldrex	r3, [r3]
 800591a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800591c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800591e:	f023 0310 	bic.w	r3, r3, #16
 8005922:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	461a      	mov	r2, r3
 800592c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005930:	65bb      	str	r3, [r7, #88]	; 0x58
 8005932:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005934:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005936:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005938:	e841 2300 	strex	r3, r2, [r1]
 800593c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800593e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005940:	2b00      	cmp	r3, #0
 8005942:	d1e4      	bne.n	800590e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005948:	4618      	mov	r0, r3
 800594a:	f7fc ff77 	bl	800283c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800595a:	b29b      	uxth	r3, r3
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	b29b      	uxth	r3, r3
 8005960:	4619      	mov	r1, r3
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 f8ca 	bl	8005afc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005968:	e0b5      	b.n	8005ad6 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005976:	b29b      	uxth	r3, r3
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005984:	b29b      	uxth	r3, r3
 8005986:	2b00      	cmp	r3, #0
 8005988:	f000 80a7 	beq.w	8005ada <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800598c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005990:	2b00      	cmp	r3, #0
 8005992:	f000 80a2 	beq.w	8005ada <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800599e:	e853 3f00 	ldrex	r3, [r3]
 80059a2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80059a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	461a      	mov	r2, r3
 80059b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80059b8:	647b      	str	r3, [r7, #68]	; 0x44
 80059ba:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80059be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059c0:	e841 2300 	strex	r3, r2, [r1]
 80059c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80059c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d1e4      	bne.n	8005996 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	3308      	adds	r3, #8
 80059d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d6:	e853 3f00 	ldrex	r3, [r3]
 80059da:	623b      	str	r3, [r7, #32]
   return(result);
 80059dc:	6a3b      	ldr	r3, [r7, #32]
 80059de:	f023 0301 	bic.w	r3, r3, #1
 80059e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	3308      	adds	r3, #8
 80059ec:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80059f0:	633a      	str	r2, [r7, #48]	; 0x30
 80059f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059f8:	e841 2300 	strex	r3, r2, [r1]
 80059fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80059fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d1e3      	bne.n	80059cc <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2220      	movs	r2, #32
 8005a08:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	e853 3f00 	ldrex	r3, [r3]
 8005a22:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f023 0310 	bic.w	r3, r3, #16
 8005a2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	461a      	mov	r2, r3
 8005a34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005a38:	61fb      	str	r3, [r7, #28]
 8005a3a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3c:	69b9      	ldr	r1, [r7, #24]
 8005a3e:	69fa      	ldr	r2, [r7, #28]
 8005a40:	e841 2300 	strex	r3, r2, [r1]
 8005a44:	617b      	str	r3, [r7, #20]
   return(result);
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1e4      	bne.n	8005a16 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a50:	4619      	mov	r1, r3
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 f852 	bl	8005afc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005a58:	e03f      	b.n	8005ada <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00e      	beq.n	8005a84 <HAL_UART_IRQHandler+0x560>
 8005a66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d008      	beq.n	8005a84 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005a7a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f000 fef2 	bl	8006866 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005a82:	e02d      	b.n	8005ae0 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00e      	beq.n	8005aae <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005a90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d008      	beq.n	8005aae <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d01c      	beq.n	8005ade <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	4798      	blx	r3
    }
    return;
 8005aac:	e017      	b.n	8005ade <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d012      	beq.n	8005ae0 <HAL_UART_IRQHandler+0x5bc>
 8005aba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d00c      	beq.n	8005ae0 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 fd43 	bl	8006552 <UART_EndTransmit_IT>
    return;
 8005acc:	e008      	b.n	8005ae0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005ace:	bf00      	nop
 8005ad0:	e006      	b.n	8005ae0 <HAL_UART_IRQHandler+0x5bc>
    return;
 8005ad2:	bf00      	nop
 8005ad4:	e004      	b.n	8005ae0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005ad6:	bf00      	nop
 8005ad8:	e002      	b.n	8005ae0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005ada:	bf00      	nop
 8005adc:	e000      	b.n	8005ae0 <HAL_UART_IRQHandler+0x5bc>
    return;
 8005ade:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005ae0:	37e8      	adds	r7, #232	; 0xe8
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop

08005ae8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005af0:	bf00      	nop
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	460b      	mov	r3, r1
 8005b06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b08:	bf00      	nop
 8005b0a:	370c      	adds	r7, #12
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b18:	b08a      	sub	sp, #40	; 0x28
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	689a      	ldr	r2, [r3, #8]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	431a      	orrs	r2, r3
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	695b      	ldr	r3, [r3, #20]
 8005b32:	431a      	orrs	r2, r3
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	69db      	ldr	r3, [r3, #28]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	4bb4      	ldr	r3, [pc, #720]	; (8005e14 <UART_SetConfig+0x300>)
 8005b44:	4013      	ands	r3, r2
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	6812      	ldr	r2, [r2, #0]
 8005b4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b4c:	430b      	orrs	r3, r1
 8005b4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	68da      	ldr	r2, [r3, #12]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	430a      	orrs	r2, r1
 8005b64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	699b      	ldr	r3, [r3, #24]
 8005b6a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4aa9      	ldr	r2, [pc, #676]	; (8005e18 <UART_SetConfig+0x304>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d004      	beq.n	8005b80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6a1b      	ldr	r3, [r3, #32]
 8005b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b90:	430a      	orrs	r2, r1
 8005b92:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4aa0      	ldr	r2, [pc, #640]	; (8005e1c <UART_SetConfig+0x308>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d126      	bne.n	8005bec <UART_SetConfig+0xd8>
 8005b9e:	4ba0      	ldr	r3, [pc, #640]	; (8005e20 <UART_SetConfig+0x30c>)
 8005ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ba4:	f003 0303 	and.w	r3, r3, #3
 8005ba8:	2b03      	cmp	r3, #3
 8005baa:	d81b      	bhi.n	8005be4 <UART_SetConfig+0xd0>
 8005bac:	a201      	add	r2, pc, #4	; (adr r2, 8005bb4 <UART_SetConfig+0xa0>)
 8005bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb2:	bf00      	nop
 8005bb4:	08005bc5 	.word	0x08005bc5
 8005bb8:	08005bd5 	.word	0x08005bd5
 8005bbc:	08005bcd 	.word	0x08005bcd
 8005bc0:	08005bdd 	.word	0x08005bdd
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bca:	e080      	b.n	8005cce <UART_SetConfig+0x1ba>
 8005bcc:	2302      	movs	r3, #2
 8005bce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bd2:	e07c      	b.n	8005cce <UART_SetConfig+0x1ba>
 8005bd4:	2304      	movs	r3, #4
 8005bd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bda:	e078      	b.n	8005cce <UART_SetConfig+0x1ba>
 8005bdc:	2308      	movs	r3, #8
 8005bde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005be2:	e074      	b.n	8005cce <UART_SetConfig+0x1ba>
 8005be4:	2310      	movs	r3, #16
 8005be6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bea:	e070      	b.n	8005cce <UART_SetConfig+0x1ba>
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a8c      	ldr	r2, [pc, #560]	; (8005e24 <UART_SetConfig+0x310>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d138      	bne.n	8005c68 <UART_SetConfig+0x154>
 8005bf6:	4b8a      	ldr	r3, [pc, #552]	; (8005e20 <UART_SetConfig+0x30c>)
 8005bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bfc:	f003 030c 	and.w	r3, r3, #12
 8005c00:	2b0c      	cmp	r3, #12
 8005c02:	d82d      	bhi.n	8005c60 <UART_SetConfig+0x14c>
 8005c04:	a201      	add	r2, pc, #4	; (adr r2, 8005c0c <UART_SetConfig+0xf8>)
 8005c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c0a:	bf00      	nop
 8005c0c:	08005c41 	.word	0x08005c41
 8005c10:	08005c61 	.word	0x08005c61
 8005c14:	08005c61 	.word	0x08005c61
 8005c18:	08005c61 	.word	0x08005c61
 8005c1c:	08005c51 	.word	0x08005c51
 8005c20:	08005c61 	.word	0x08005c61
 8005c24:	08005c61 	.word	0x08005c61
 8005c28:	08005c61 	.word	0x08005c61
 8005c2c:	08005c49 	.word	0x08005c49
 8005c30:	08005c61 	.word	0x08005c61
 8005c34:	08005c61 	.word	0x08005c61
 8005c38:	08005c61 	.word	0x08005c61
 8005c3c:	08005c59 	.word	0x08005c59
 8005c40:	2300      	movs	r3, #0
 8005c42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c46:	e042      	b.n	8005cce <UART_SetConfig+0x1ba>
 8005c48:	2302      	movs	r3, #2
 8005c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c4e:	e03e      	b.n	8005cce <UART_SetConfig+0x1ba>
 8005c50:	2304      	movs	r3, #4
 8005c52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c56:	e03a      	b.n	8005cce <UART_SetConfig+0x1ba>
 8005c58:	2308      	movs	r3, #8
 8005c5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c5e:	e036      	b.n	8005cce <UART_SetConfig+0x1ba>
 8005c60:	2310      	movs	r3, #16
 8005c62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c66:	e032      	b.n	8005cce <UART_SetConfig+0x1ba>
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a6a      	ldr	r2, [pc, #424]	; (8005e18 <UART_SetConfig+0x304>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d12a      	bne.n	8005cc8 <UART_SetConfig+0x1b4>
 8005c72:	4b6b      	ldr	r3, [pc, #428]	; (8005e20 <UART_SetConfig+0x30c>)
 8005c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c78:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005c7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c80:	d01a      	beq.n	8005cb8 <UART_SetConfig+0x1a4>
 8005c82:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c86:	d81b      	bhi.n	8005cc0 <UART_SetConfig+0x1ac>
 8005c88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c8c:	d00c      	beq.n	8005ca8 <UART_SetConfig+0x194>
 8005c8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c92:	d815      	bhi.n	8005cc0 <UART_SetConfig+0x1ac>
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d003      	beq.n	8005ca0 <UART_SetConfig+0x18c>
 8005c98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c9c:	d008      	beq.n	8005cb0 <UART_SetConfig+0x19c>
 8005c9e:	e00f      	b.n	8005cc0 <UART_SetConfig+0x1ac>
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ca6:	e012      	b.n	8005cce <UART_SetConfig+0x1ba>
 8005ca8:	2302      	movs	r3, #2
 8005caa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cae:	e00e      	b.n	8005cce <UART_SetConfig+0x1ba>
 8005cb0:	2304      	movs	r3, #4
 8005cb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cb6:	e00a      	b.n	8005cce <UART_SetConfig+0x1ba>
 8005cb8:	2308      	movs	r3, #8
 8005cba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cbe:	e006      	b.n	8005cce <UART_SetConfig+0x1ba>
 8005cc0:	2310      	movs	r3, #16
 8005cc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cc6:	e002      	b.n	8005cce <UART_SetConfig+0x1ba>
 8005cc8:	2310      	movs	r3, #16
 8005cca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a51      	ldr	r2, [pc, #324]	; (8005e18 <UART_SetConfig+0x304>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d17a      	bne.n	8005dce <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005cd8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005cdc:	2b08      	cmp	r3, #8
 8005cde:	d824      	bhi.n	8005d2a <UART_SetConfig+0x216>
 8005ce0:	a201      	add	r2, pc, #4	; (adr r2, 8005ce8 <UART_SetConfig+0x1d4>)
 8005ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce6:	bf00      	nop
 8005ce8:	08005d0d 	.word	0x08005d0d
 8005cec:	08005d2b 	.word	0x08005d2b
 8005cf0:	08005d15 	.word	0x08005d15
 8005cf4:	08005d2b 	.word	0x08005d2b
 8005cf8:	08005d1b 	.word	0x08005d1b
 8005cfc:	08005d2b 	.word	0x08005d2b
 8005d00:	08005d2b 	.word	0x08005d2b
 8005d04:	08005d2b 	.word	0x08005d2b
 8005d08:	08005d23 	.word	0x08005d23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d0c:	f7fd fe6e 	bl	80039ec <HAL_RCC_GetPCLK1Freq>
 8005d10:	61f8      	str	r0, [r7, #28]
        break;
 8005d12:	e010      	b.n	8005d36 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d14:	4b44      	ldr	r3, [pc, #272]	; (8005e28 <UART_SetConfig+0x314>)
 8005d16:	61fb      	str	r3, [r7, #28]
        break;
 8005d18:	e00d      	b.n	8005d36 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d1a:	f7fd fdcf 	bl	80038bc <HAL_RCC_GetSysClockFreq>
 8005d1e:	61f8      	str	r0, [r7, #28]
        break;
 8005d20:	e009      	b.n	8005d36 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d22:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8005d26:	61fb      	str	r3, [r7, #28]
        break;
 8005d28:	e005      	b.n	8005d36 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005d34:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f000 8107 	beq.w	8005f4c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	685a      	ldr	r2, [r3, #4]
 8005d42:	4613      	mov	r3, r2
 8005d44:	005b      	lsls	r3, r3, #1
 8005d46:	4413      	add	r3, r2
 8005d48:	69fa      	ldr	r2, [r7, #28]
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d305      	bcc.n	8005d5a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005d54:	69fa      	ldr	r2, [r7, #28]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d903      	bls.n	8005d62 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005d60:	e0f4      	b.n	8005f4c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	2200      	movs	r2, #0
 8005d66:	461c      	mov	r4, r3
 8005d68:	4615      	mov	r5, r2
 8005d6a:	f04f 0200 	mov.w	r2, #0
 8005d6e:	f04f 0300 	mov.w	r3, #0
 8005d72:	022b      	lsls	r3, r5, #8
 8005d74:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005d78:	0222      	lsls	r2, r4, #8
 8005d7a:	68f9      	ldr	r1, [r7, #12]
 8005d7c:	6849      	ldr	r1, [r1, #4]
 8005d7e:	0849      	lsrs	r1, r1, #1
 8005d80:	2000      	movs	r0, #0
 8005d82:	4688      	mov	r8, r1
 8005d84:	4681      	mov	r9, r0
 8005d86:	eb12 0a08 	adds.w	sl, r2, r8
 8005d8a:	eb43 0b09 	adc.w	fp, r3, r9
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	603b      	str	r3, [r7, #0]
 8005d96:	607a      	str	r2, [r7, #4]
 8005d98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d9c:	4650      	mov	r0, sl
 8005d9e:	4659      	mov	r1, fp
 8005da0:	f7fa fa14 	bl	80001cc <__aeabi_uldivmod>
 8005da4:	4602      	mov	r2, r0
 8005da6:	460b      	mov	r3, r1
 8005da8:	4613      	mov	r3, r2
 8005daa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005db2:	d308      	bcc.n	8005dc6 <UART_SetConfig+0x2b2>
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dba:	d204      	bcs.n	8005dc6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	69ba      	ldr	r2, [r7, #24]
 8005dc2:	60da      	str	r2, [r3, #12]
 8005dc4:	e0c2      	b.n	8005f4c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005dcc:	e0be      	b.n	8005f4c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	69db      	ldr	r3, [r3, #28]
 8005dd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dd6:	d16a      	bne.n	8005eae <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005dd8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ddc:	2b08      	cmp	r3, #8
 8005dde:	d834      	bhi.n	8005e4a <UART_SetConfig+0x336>
 8005de0:	a201      	add	r2, pc, #4	; (adr r2, 8005de8 <UART_SetConfig+0x2d4>)
 8005de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de6:	bf00      	nop
 8005de8:	08005e0d 	.word	0x08005e0d
 8005dec:	08005e2d 	.word	0x08005e2d
 8005df0:	08005e35 	.word	0x08005e35
 8005df4:	08005e4b 	.word	0x08005e4b
 8005df8:	08005e3b 	.word	0x08005e3b
 8005dfc:	08005e4b 	.word	0x08005e4b
 8005e00:	08005e4b 	.word	0x08005e4b
 8005e04:	08005e4b 	.word	0x08005e4b
 8005e08:	08005e43 	.word	0x08005e43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e0c:	f7fd fdee 	bl	80039ec <HAL_RCC_GetPCLK1Freq>
 8005e10:	61f8      	str	r0, [r7, #28]
        break;
 8005e12:	e020      	b.n	8005e56 <UART_SetConfig+0x342>
 8005e14:	efff69f3 	.word	0xefff69f3
 8005e18:	40008000 	.word	0x40008000
 8005e1c:	40013800 	.word	0x40013800
 8005e20:	40021000 	.word	0x40021000
 8005e24:	40004400 	.word	0x40004400
 8005e28:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e2c:	f7fd fdf4 	bl	8003a18 <HAL_RCC_GetPCLK2Freq>
 8005e30:	61f8      	str	r0, [r7, #28]
        break;
 8005e32:	e010      	b.n	8005e56 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e34:	4b4c      	ldr	r3, [pc, #304]	; (8005f68 <UART_SetConfig+0x454>)
 8005e36:	61fb      	str	r3, [r7, #28]
        break;
 8005e38:	e00d      	b.n	8005e56 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e3a:	f7fd fd3f 	bl	80038bc <HAL_RCC_GetSysClockFreq>
 8005e3e:	61f8      	str	r0, [r7, #28]
        break;
 8005e40:	e009      	b.n	8005e56 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e42:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8005e46:	61fb      	str	r3, [r7, #28]
        break;
 8005e48:	e005      	b.n	8005e56 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005e54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d077      	beq.n	8005f4c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	005a      	lsls	r2, r3, #1
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	085b      	lsrs	r3, r3, #1
 8005e66:	441a      	add	r2, r3
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e70:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	2b0f      	cmp	r3, #15
 8005e76:	d916      	bls.n	8005ea6 <UART_SetConfig+0x392>
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e7e:	d212      	bcs.n	8005ea6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	f023 030f 	bic.w	r3, r3, #15
 8005e88:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	085b      	lsrs	r3, r3, #1
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	f003 0307 	and.w	r3, r3, #7
 8005e94:	b29a      	uxth	r2, r3
 8005e96:	8afb      	ldrh	r3, [r7, #22]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	8afa      	ldrh	r2, [r7, #22]
 8005ea2:	60da      	str	r2, [r3, #12]
 8005ea4:	e052      	b.n	8005f4c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005eac:	e04e      	b.n	8005f4c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005eae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005eb2:	2b08      	cmp	r3, #8
 8005eb4:	d827      	bhi.n	8005f06 <UART_SetConfig+0x3f2>
 8005eb6:	a201      	add	r2, pc, #4	; (adr r2, 8005ebc <UART_SetConfig+0x3a8>)
 8005eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ebc:	08005ee1 	.word	0x08005ee1
 8005ec0:	08005ee9 	.word	0x08005ee9
 8005ec4:	08005ef1 	.word	0x08005ef1
 8005ec8:	08005f07 	.word	0x08005f07
 8005ecc:	08005ef7 	.word	0x08005ef7
 8005ed0:	08005f07 	.word	0x08005f07
 8005ed4:	08005f07 	.word	0x08005f07
 8005ed8:	08005f07 	.word	0x08005f07
 8005edc:	08005eff 	.word	0x08005eff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ee0:	f7fd fd84 	bl	80039ec <HAL_RCC_GetPCLK1Freq>
 8005ee4:	61f8      	str	r0, [r7, #28]
        break;
 8005ee6:	e014      	b.n	8005f12 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ee8:	f7fd fd96 	bl	8003a18 <HAL_RCC_GetPCLK2Freq>
 8005eec:	61f8      	str	r0, [r7, #28]
        break;
 8005eee:	e010      	b.n	8005f12 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ef0:	4b1d      	ldr	r3, [pc, #116]	; (8005f68 <UART_SetConfig+0x454>)
 8005ef2:	61fb      	str	r3, [r7, #28]
        break;
 8005ef4:	e00d      	b.n	8005f12 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ef6:	f7fd fce1 	bl	80038bc <HAL_RCC_GetSysClockFreq>
 8005efa:	61f8      	str	r0, [r7, #28]
        break;
 8005efc:	e009      	b.n	8005f12 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005efe:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8005f02:	61fb      	str	r3, [r7, #28]
        break;
 8005f04:	e005      	b.n	8005f12 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8005f06:	2300      	movs	r3, #0
 8005f08:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005f10:	bf00      	nop
    }

    if (pclk != 0U)
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d019      	beq.n	8005f4c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	085a      	lsrs	r2, r3, #1
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	441a      	add	r2, r3
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f2a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	2b0f      	cmp	r3, #15
 8005f30:	d909      	bls.n	8005f46 <UART_SetConfig+0x432>
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f38:	d205      	bcs.n	8005f46 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	b29a      	uxth	r2, r3
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	60da      	str	r2, [r3, #12]
 8005f44:	e002      	b.n	8005f4c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2200      	movs	r2, #0
 8005f56:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005f58:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3728      	adds	r7, #40	; 0x28
 8005f60:	46bd      	mov	sp, r7
 8005f62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f66:	bf00      	nop
 8005f68:	00f42400 	.word	0x00f42400

08005f6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f78:	f003 0301 	and.w	r3, r3, #1
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d00a      	beq.n	8005f96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	430a      	orrs	r2, r1
 8005f94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9a:	f003 0302 	and.w	r3, r3, #2
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d00a      	beq.n	8005fb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	430a      	orrs	r2, r1
 8005fb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fbc:	f003 0304 	and.w	r3, r3, #4
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d00a      	beq.n	8005fda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	430a      	orrs	r2, r1
 8005fd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fde:	f003 0308 	and.w	r3, r3, #8
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00a      	beq.n	8005ffc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	430a      	orrs	r2, r1
 8005ffa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006000:	f003 0310 	and.w	r3, r3, #16
 8006004:	2b00      	cmp	r3, #0
 8006006:	d00a      	beq.n	800601e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	430a      	orrs	r2, r1
 800601c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006022:	f003 0320 	and.w	r3, r3, #32
 8006026:	2b00      	cmp	r3, #0
 8006028:	d00a      	beq.n	8006040 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	430a      	orrs	r2, r1
 800603e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006048:	2b00      	cmp	r3, #0
 800604a:	d01a      	beq.n	8006082 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	430a      	orrs	r2, r1
 8006060:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006066:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800606a:	d10a      	bne.n	8006082 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	430a      	orrs	r2, r1
 8006080:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00a      	beq.n	80060a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	430a      	orrs	r2, r1
 80060a2:	605a      	str	r2, [r3, #4]
  }
}
 80060a4:	bf00      	nop
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b086      	sub	sp, #24
 80060b4:	af02      	add	r7, sp, #8
 80060b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80060c0:	f7fb fad2 	bl	8001668 <HAL_GetTick>
 80060c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f003 0308 	and.w	r3, r3, #8
 80060d0:	2b08      	cmp	r3, #8
 80060d2:	d10e      	bne.n	80060f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060d8:	9300      	str	r3, [sp, #0]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2200      	movs	r2, #0
 80060de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 f82d 	bl	8006142 <UART_WaitOnFlagUntilTimeout>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d001      	beq.n	80060f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	e023      	b.n	800613a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 0304 	and.w	r3, r3, #4
 80060fc:	2b04      	cmp	r3, #4
 80060fe:	d10e      	bne.n	800611e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006100:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006104:	9300      	str	r3, [sp, #0]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2200      	movs	r2, #0
 800610a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 f817 	bl	8006142 <UART_WaitOnFlagUntilTimeout>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d001      	beq.n	800611e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800611a:	2303      	movs	r3, #3
 800611c:	e00d      	b.n	800613a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2220      	movs	r2, #32
 8006122:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2220      	movs	r2, #32
 8006128:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3710      	adds	r7, #16
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}

08006142 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006142:	b580      	push	{r7, lr}
 8006144:	b09c      	sub	sp, #112	; 0x70
 8006146:	af00      	add	r7, sp, #0
 8006148:	60f8      	str	r0, [r7, #12]
 800614a:	60b9      	str	r1, [r7, #8]
 800614c:	603b      	str	r3, [r7, #0]
 800614e:	4613      	mov	r3, r2
 8006150:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006152:	e0a5      	b.n	80062a0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006154:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800615a:	f000 80a1 	beq.w	80062a0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800615e:	f7fb fa83 	bl	8001668 <HAL_GetTick>
 8006162:	4602      	mov	r2, r0
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800616a:	429a      	cmp	r2, r3
 800616c:	d302      	bcc.n	8006174 <UART_WaitOnFlagUntilTimeout+0x32>
 800616e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006170:	2b00      	cmp	r3, #0
 8006172:	d13e      	bne.n	80061f2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800617a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800617c:	e853 3f00 	ldrex	r3, [r3]
 8006180:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006182:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006184:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006188:	667b      	str	r3, [r7, #100]	; 0x64
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	461a      	mov	r2, r3
 8006190:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006192:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006194:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006196:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006198:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800619a:	e841 2300 	strex	r3, r2, [r1]
 800619e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80061a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d1e6      	bne.n	8006174 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	3308      	adds	r3, #8
 80061ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061b0:	e853 3f00 	ldrex	r3, [r3]
 80061b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80061b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b8:	f023 0301 	bic.w	r3, r3, #1
 80061bc:	663b      	str	r3, [r7, #96]	; 0x60
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	3308      	adds	r3, #8
 80061c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80061c6:	64ba      	str	r2, [r7, #72]	; 0x48
 80061c8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80061cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061ce:	e841 2300 	strex	r3, r2, [r1]
 80061d2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80061d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1e5      	bne.n	80061a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2220      	movs	r2, #32
 80061de:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2220      	movs	r2, #32
 80061e4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80061ee:	2303      	movs	r3, #3
 80061f0:	e067      	b.n	80062c2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 0304 	and.w	r3, r3, #4
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d04f      	beq.n	80062a0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	69db      	ldr	r3, [r3, #28]
 8006206:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800620a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800620e:	d147      	bne.n	80062a0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006218:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006222:	e853 3f00 	ldrex	r3, [r3]
 8006226:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800622e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	461a      	mov	r2, r3
 8006236:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006238:	637b      	str	r3, [r7, #52]	; 0x34
 800623a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800623e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006240:	e841 2300 	strex	r3, r2, [r1]
 8006244:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006248:	2b00      	cmp	r3, #0
 800624a:	d1e6      	bne.n	800621a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	3308      	adds	r3, #8
 8006252:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	e853 3f00 	ldrex	r3, [r3]
 800625a:	613b      	str	r3, [r7, #16]
   return(result);
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	f023 0301 	bic.w	r3, r3, #1
 8006262:	66bb      	str	r3, [r7, #104]	; 0x68
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	3308      	adds	r3, #8
 800626a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800626c:	623a      	str	r2, [r7, #32]
 800626e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006270:	69f9      	ldr	r1, [r7, #28]
 8006272:	6a3a      	ldr	r2, [r7, #32]
 8006274:	e841 2300 	strex	r3, r2, [r1]
 8006278:	61bb      	str	r3, [r7, #24]
   return(result);
 800627a:	69bb      	ldr	r3, [r7, #24]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d1e5      	bne.n	800624c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2220      	movs	r2, #32
 8006284:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2220      	movs	r2, #32
 800628a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2220      	movs	r2, #32
 8006290:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2200      	movs	r2, #0
 8006298:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800629c:	2303      	movs	r3, #3
 800629e:	e010      	b.n	80062c2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	69da      	ldr	r2, [r3, #28]
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	4013      	ands	r3, r2
 80062aa:	68ba      	ldr	r2, [r7, #8]
 80062ac:	429a      	cmp	r2, r3
 80062ae:	bf0c      	ite	eq
 80062b0:	2301      	moveq	r3, #1
 80062b2:	2300      	movne	r3, #0
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	461a      	mov	r2, r3
 80062b8:	79fb      	ldrb	r3, [r7, #7]
 80062ba:	429a      	cmp	r2, r3
 80062bc:	f43f af4a 	beq.w	8006154 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3770      	adds	r7, #112	; 0x70
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
	...

080062cc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b097      	sub	sp, #92	; 0x5c
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	4613      	mov	r3, r2
 80062d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	68ba      	ldr	r2, [r7, #8]
 80062de:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	88fa      	ldrh	r2, [r7, #6]
 80062e4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	88fa      	ldrh	r2, [r7, #6]
 80062ec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2200      	movs	r2, #0
 80062f4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062fe:	d10e      	bne.n	800631e <UART_Start_Receive_IT+0x52>
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d105      	bne.n	8006314 <UART_Start_Receive_IT+0x48>
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800630e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006312:	e02d      	b.n	8006370 <UART_Start_Receive_IT+0xa4>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	22ff      	movs	r2, #255	; 0xff
 8006318:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800631c:	e028      	b.n	8006370 <UART_Start_Receive_IT+0xa4>
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d10d      	bne.n	8006342 <UART_Start_Receive_IT+0x76>
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d104      	bne.n	8006338 <UART_Start_Receive_IT+0x6c>
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	22ff      	movs	r2, #255	; 0xff
 8006332:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006336:	e01b      	b.n	8006370 <UART_Start_Receive_IT+0xa4>
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	227f      	movs	r2, #127	; 0x7f
 800633c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006340:	e016      	b.n	8006370 <UART_Start_Receive_IT+0xa4>
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800634a:	d10d      	bne.n	8006368 <UART_Start_Receive_IT+0x9c>
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d104      	bne.n	800635e <UART_Start_Receive_IT+0x92>
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	227f      	movs	r2, #127	; 0x7f
 8006358:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800635c:	e008      	b.n	8006370 <UART_Start_Receive_IT+0xa4>
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	223f      	movs	r2, #63	; 0x3f
 8006362:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006366:	e003      	b.n	8006370 <UART_Start_Receive_IT+0xa4>
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2200      	movs	r2, #0
 800636c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2200      	movs	r2, #0
 8006374:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2222      	movs	r2, #34	; 0x22
 800637c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	3308      	adds	r3, #8
 8006384:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006388:	e853 3f00 	ldrex	r3, [r3]
 800638c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800638e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006390:	f043 0301 	orr.w	r3, r3, #1
 8006394:	657b      	str	r3, [r7, #84]	; 0x54
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	3308      	adds	r3, #8
 800639c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800639e:	64ba      	str	r2, [r7, #72]	; 0x48
 80063a0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80063a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063a6:	e841 2300 	strex	r3, r2, [r1]
 80063aa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80063ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d1e5      	bne.n	800637e <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063ba:	d107      	bne.n	80063cc <UART_Start_Receive_IT+0x100>
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	691b      	ldr	r3, [r3, #16]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d103      	bne.n	80063cc <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	4a24      	ldr	r2, [pc, #144]	; (8006458 <UART_Start_Receive_IT+0x18c>)
 80063c8:	665a      	str	r2, [r3, #100]	; 0x64
 80063ca:	e002      	b.n	80063d2 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	4a23      	ldr	r2, [pc, #140]	; (800645c <UART_Start_Receive_IT+0x190>)
 80063d0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d019      	beq.n	8006416 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ea:	e853 3f00 	ldrex	r3, [r3]
 80063ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80063f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	461a      	mov	r2, r3
 80063fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006400:	637b      	str	r3, [r7, #52]	; 0x34
 8006402:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006404:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006406:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006408:	e841 2300 	strex	r3, r2, [r1]
 800640c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800640e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006410:	2b00      	cmp	r3, #0
 8006412:	d1e6      	bne.n	80063e2 <UART_Start_Receive_IT+0x116>
 8006414:	e018      	b.n	8006448 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	e853 3f00 	ldrex	r3, [r3]
 8006422:	613b      	str	r3, [r7, #16]
   return(result);
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	f043 0320 	orr.w	r3, r3, #32
 800642a:	653b      	str	r3, [r7, #80]	; 0x50
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	461a      	mov	r2, r3
 8006432:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006434:	623b      	str	r3, [r7, #32]
 8006436:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006438:	69f9      	ldr	r1, [r7, #28]
 800643a:	6a3a      	ldr	r2, [r7, #32]
 800643c:	e841 2300 	strex	r3, r2, [r1]
 8006440:	61bb      	str	r3, [r7, #24]
   return(result);
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d1e6      	bne.n	8006416 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	375c      	adds	r7, #92	; 0x5c
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr
 8006456:	bf00      	nop
 8006458:	08006707 	.word	0x08006707
 800645c:	080065a7 	.word	0x080065a7

08006460 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006460:	b480      	push	{r7}
 8006462:	b095      	sub	sp, #84	; 0x54
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006470:	e853 3f00 	ldrex	r3, [r3]
 8006474:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006478:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800647c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	461a      	mov	r2, r3
 8006484:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006486:	643b      	str	r3, [r7, #64]	; 0x40
 8006488:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800648a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800648c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800648e:	e841 2300 	strex	r3, r2, [r1]
 8006492:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006496:	2b00      	cmp	r3, #0
 8006498:	d1e6      	bne.n	8006468 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	3308      	adds	r3, #8
 80064a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a2:	6a3b      	ldr	r3, [r7, #32]
 80064a4:	e853 3f00 	ldrex	r3, [r3]
 80064a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	f023 0301 	bic.w	r3, r3, #1
 80064b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	3308      	adds	r3, #8
 80064b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064c2:	e841 2300 	strex	r3, r2, [r1]
 80064c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d1e5      	bne.n	800649a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d118      	bne.n	8006508 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	e853 3f00 	ldrex	r3, [r3]
 80064e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	f023 0310 	bic.w	r3, r3, #16
 80064ea:	647b      	str	r3, [r7, #68]	; 0x44
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	461a      	mov	r2, r3
 80064f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064f4:	61bb      	str	r3, [r7, #24]
 80064f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f8:	6979      	ldr	r1, [r7, #20]
 80064fa:	69ba      	ldr	r2, [r7, #24]
 80064fc:	e841 2300 	strex	r3, r2, [r1]
 8006500:	613b      	str	r3, [r7, #16]
   return(result);
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d1e6      	bne.n	80064d6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2220      	movs	r2, #32
 800650c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	665a      	str	r2, [r3, #100]	; 0x64
}
 800651a:	bf00      	nop
 800651c:	3754      	adds	r7, #84	; 0x54
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr

08006526 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006526:	b580      	push	{r7, lr}
 8006528:	b084      	sub	sp, #16
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006532:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2200      	movs	r2, #0
 8006538:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2200      	movs	r2, #0
 8006540:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	f7fa fd59 	bl	8000ffc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800654a:	bf00      	nop
 800654c:	3710      	adds	r7, #16
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}

08006552 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006552:	b580      	push	{r7, lr}
 8006554:	b088      	sub	sp, #32
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	e853 3f00 	ldrex	r3, [r3]
 8006566:	60bb      	str	r3, [r7, #8]
   return(result);
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800656e:	61fb      	str	r3, [r7, #28]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	461a      	mov	r2, r3
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	61bb      	str	r3, [r7, #24]
 800657a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800657c:	6979      	ldr	r1, [r7, #20]
 800657e:	69ba      	ldr	r2, [r7, #24]
 8006580:	e841 2300 	strex	r3, r2, [r1]
 8006584:	613b      	str	r3, [r7, #16]
   return(result);
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d1e6      	bne.n	800655a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2220      	movs	r2, #32
 8006590:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f7ff faa5 	bl	8005ae8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800659e:	bf00      	nop
 80065a0:	3720      	adds	r7, #32
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}

080065a6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b096      	sub	sp, #88	; 0x58
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80065b4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065bc:	2b22      	cmp	r3, #34	; 0x22
 80065be:	f040 8094 	bne.w	80066ea <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80065c8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80065cc:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80065d0:	b2d9      	uxtb	r1, r3
 80065d2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80065d6:	b2da      	uxtb	r2, r3
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065dc:	400a      	ands	r2, r1
 80065de:	b2d2      	uxtb	r2, r2
 80065e0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065e6:	1c5a      	adds	r2, r3, #1
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	3b01      	subs	r3, #1
 80065f6:	b29a      	uxth	r2, r3
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006604:	b29b      	uxth	r3, r3
 8006606:	2b00      	cmp	r3, #0
 8006608:	d179      	bne.n	80066fe <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006612:	e853 3f00 	ldrex	r3, [r3]
 8006616:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800661a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800661e:	653b      	str	r3, [r7, #80]	; 0x50
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	461a      	mov	r2, r3
 8006626:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006628:	647b      	str	r3, [r7, #68]	; 0x44
 800662a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800662e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006630:	e841 2300 	strex	r3, r2, [r1]
 8006634:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006638:	2b00      	cmp	r3, #0
 800663a:	d1e6      	bne.n	800660a <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	3308      	adds	r3, #8
 8006642:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006646:	e853 3f00 	ldrex	r3, [r3]
 800664a:	623b      	str	r3, [r7, #32]
   return(result);
 800664c:	6a3b      	ldr	r3, [r7, #32]
 800664e:	f023 0301 	bic.w	r3, r3, #1
 8006652:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	3308      	adds	r3, #8
 800665a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800665c:	633a      	str	r2, [r7, #48]	; 0x30
 800665e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006660:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006662:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006664:	e841 2300 	strex	r3, r2, [r1]
 8006668:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800666a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666c:	2b00      	cmp	r3, #0
 800666e:	d1e5      	bne.n	800663c <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2220      	movs	r2, #32
 8006674:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006680:	2b01      	cmp	r3, #1
 8006682:	d12e      	bne.n	80066e2 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	e853 3f00 	ldrex	r3, [r3]
 8006696:	60fb      	str	r3, [r7, #12]
   return(result);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f023 0310 	bic.w	r3, r3, #16
 800669e:	64bb      	str	r3, [r7, #72]	; 0x48
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	461a      	mov	r2, r3
 80066a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066a8:	61fb      	str	r3, [r7, #28]
 80066aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ac:	69b9      	ldr	r1, [r7, #24]
 80066ae:	69fa      	ldr	r2, [r7, #28]
 80066b0:	e841 2300 	strex	r3, r2, [r1]
 80066b4:	617b      	str	r3, [r7, #20]
   return(result);
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d1e6      	bne.n	800668a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	69db      	ldr	r3, [r3, #28]
 80066c2:	f003 0310 	and.w	r3, r3, #16
 80066c6:	2b10      	cmp	r3, #16
 80066c8:	d103      	bne.n	80066d2 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2210      	movs	r2, #16
 80066d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80066d8:	4619      	mov	r1, r3
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f7ff fa0e 	bl	8005afc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80066e0:	e00d      	b.n	80066fe <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f7fa fc2c 	bl	8000f40 <HAL_UART_RxCpltCallback>
}
 80066e8:	e009      	b.n	80066fe <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	8b1b      	ldrh	r3, [r3, #24]
 80066f0:	b29a      	uxth	r2, r3
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f042 0208 	orr.w	r2, r2, #8
 80066fa:	b292      	uxth	r2, r2
 80066fc:	831a      	strh	r2, [r3, #24]
}
 80066fe:	bf00      	nop
 8006700:	3758      	adds	r7, #88	; 0x58
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}

08006706 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006706:	b580      	push	{r7, lr}
 8006708:	b096      	sub	sp, #88	; 0x58
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006714:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800671c:	2b22      	cmp	r3, #34	; 0x22
 800671e:	f040 8094 	bne.w	800684a <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006728:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006730:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006732:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006736:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800673a:	4013      	ands	r3, r2
 800673c:	b29a      	uxth	r2, r3
 800673e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006740:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006746:	1c9a      	adds	r2, r3, #2
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006752:	b29b      	uxth	r3, r3
 8006754:	3b01      	subs	r3, #1
 8006756:	b29a      	uxth	r2, r3
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006764:	b29b      	uxth	r3, r3
 8006766:	2b00      	cmp	r3, #0
 8006768:	d179      	bne.n	800685e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006772:	e853 3f00 	ldrex	r3, [r3]
 8006776:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800677e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	461a      	mov	r2, r3
 8006786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006788:	643b      	str	r3, [r7, #64]	; 0x40
 800678a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800678c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800678e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006790:	e841 2300 	strex	r3, r2, [r1]
 8006794:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006798:	2b00      	cmp	r3, #0
 800679a:	d1e6      	bne.n	800676a <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	3308      	adds	r3, #8
 80067a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a4:	6a3b      	ldr	r3, [r7, #32]
 80067a6:	e853 3f00 	ldrex	r3, [r3]
 80067aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	f023 0301 	bic.w	r3, r3, #1
 80067b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	3308      	adds	r3, #8
 80067ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067c4:	e841 2300 	strex	r3, r2, [r1]
 80067c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d1e5      	bne.n	800679c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2220      	movs	r2, #32
 80067d4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d12e      	bne.n	8006842 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	e853 3f00 	ldrex	r3, [r3]
 80067f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	f023 0310 	bic.w	r3, r3, #16
 80067fe:	647b      	str	r3, [r7, #68]	; 0x44
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	461a      	mov	r2, r3
 8006806:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006808:	61bb      	str	r3, [r7, #24]
 800680a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680c:	6979      	ldr	r1, [r7, #20]
 800680e:	69ba      	ldr	r2, [r7, #24]
 8006810:	e841 2300 	strex	r3, r2, [r1]
 8006814:	613b      	str	r3, [r7, #16]
   return(result);
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d1e6      	bne.n	80067ea <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	69db      	ldr	r3, [r3, #28]
 8006822:	f003 0310 	and.w	r3, r3, #16
 8006826:	2b10      	cmp	r3, #16
 8006828:	d103      	bne.n	8006832 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	2210      	movs	r2, #16
 8006830:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006838:	4619      	mov	r1, r3
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f7ff f95e 	bl	8005afc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006840:	e00d      	b.n	800685e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f7fa fb7c 	bl	8000f40 <HAL_UART_RxCpltCallback>
}
 8006848:	e009      	b.n	800685e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	8b1b      	ldrh	r3, [r3, #24]
 8006850:	b29a      	uxth	r2, r3
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f042 0208 	orr.w	r2, r2, #8
 800685a:	b292      	uxth	r2, r2
 800685c:	831a      	strh	r2, [r3, #24]
}
 800685e:	bf00      	nop
 8006860:	3758      	adds	r7, #88	; 0x58
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}

08006866 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006866:	b480      	push	{r7}
 8006868:	b083      	sub	sp, #12
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800686e:	bf00      	nop
 8006870:	370c      	adds	r7, #12
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr
	...

0800687c <__errno>:
 800687c:	4b01      	ldr	r3, [pc, #4]	; (8006884 <__errno+0x8>)
 800687e:	6818      	ldr	r0, [r3, #0]
 8006880:	4770      	bx	lr
 8006882:	bf00      	nop
 8006884:	20002880 	.word	0x20002880

08006888 <__libc_init_array>:
 8006888:	b570      	push	{r4, r5, r6, lr}
 800688a:	4d0d      	ldr	r5, [pc, #52]	; (80068c0 <__libc_init_array+0x38>)
 800688c:	4c0d      	ldr	r4, [pc, #52]	; (80068c4 <__libc_init_array+0x3c>)
 800688e:	1b64      	subs	r4, r4, r5
 8006890:	10a4      	asrs	r4, r4, #2
 8006892:	2600      	movs	r6, #0
 8006894:	42a6      	cmp	r6, r4
 8006896:	d109      	bne.n	80068ac <__libc_init_array+0x24>
 8006898:	4d0b      	ldr	r5, [pc, #44]	; (80068c8 <__libc_init_array+0x40>)
 800689a:	4c0c      	ldr	r4, [pc, #48]	; (80068cc <__libc_init_array+0x44>)
 800689c:	f000 f92e 	bl	8006afc <_init>
 80068a0:	1b64      	subs	r4, r4, r5
 80068a2:	10a4      	asrs	r4, r4, #2
 80068a4:	2600      	movs	r6, #0
 80068a6:	42a6      	cmp	r6, r4
 80068a8:	d105      	bne.n	80068b6 <__libc_init_array+0x2e>
 80068aa:	bd70      	pop	{r4, r5, r6, pc}
 80068ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80068b0:	4798      	blx	r3
 80068b2:	3601      	adds	r6, #1
 80068b4:	e7ee      	b.n	8006894 <__libc_init_array+0xc>
 80068b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80068ba:	4798      	blx	r3
 80068bc:	3601      	adds	r6, #1
 80068be:	e7f2      	b.n	80068a6 <__libc_init_array+0x1e>
 80068c0:	08006b64 	.word	0x08006b64
 80068c4:	08006b64 	.word	0x08006b64
 80068c8:	08006b64 	.word	0x08006b64
 80068cc:	08006b68 	.word	0x08006b68

080068d0 <malloc>:
 80068d0:	4b02      	ldr	r3, [pc, #8]	; (80068dc <malloc+0xc>)
 80068d2:	4601      	mov	r1, r0
 80068d4:	6818      	ldr	r0, [r3, #0]
 80068d6:	f000 b87f 	b.w	80069d8 <_malloc_r>
 80068da:	bf00      	nop
 80068dc:	20002880 	.word	0x20002880

080068e0 <free>:
 80068e0:	4b02      	ldr	r3, [pc, #8]	; (80068ec <free+0xc>)
 80068e2:	4601      	mov	r1, r0
 80068e4:	6818      	ldr	r0, [r3, #0]
 80068e6:	f000 b80b 	b.w	8006900 <_free_r>
 80068ea:	bf00      	nop
 80068ec:	20002880 	.word	0x20002880

080068f0 <memset>:
 80068f0:	4402      	add	r2, r0
 80068f2:	4603      	mov	r3, r0
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d100      	bne.n	80068fa <memset+0xa>
 80068f8:	4770      	bx	lr
 80068fa:	f803 1b01 	strb.w	r1, [r3], #1
 80068fe:	e7f9      	b.n	80068f4 <memset+0x4>

08006900 <_free_r>:
 8006900:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006902:	2900      	cmp	r1, #0
 8006904:	d044      	beq.n	8006990 <_free_r+0x90>
 8006906:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800690a:	9001      	str	r0, [sp, #4]
 800690c:	2b00      	cmp	r3, #0
 800690e:	f1a1 0404 	sub.w	r4, r1, #4
 8006912:	bfb8      	it	lt
 8006914:	18e4      	addlt	r4, r4, r3
 8006916:	f000 f8e3 	bl	8006ae0 <__malloc_lock>
 800691a:	4a1e      	ldr	r2, [pc, #120]	; (8006994 <_free_r+0x94>)
 800691c:	9801      	ldr	r0, [sp, #4]
 800691e:	6813      	ldr	r3, [r2, #0]
 8006920:	b933      	cbnz	r3, 8006930 <_free_r+0x30>
 8006922:	6063      	str	r3, [r4, #4]
 8006924:	6014      	str	r4, [r2, #0]
 8006926:	b003      	add	sp, #12
 8006928:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800692c:	f000 b8de 	b.w	8006aec <__malloc_unlock>
 8006930:	42a3      	cmp	r3, r4
 8006932:	d908      	bls.n	8006946 <_free_r+0x46>
 8006934:	6825      	ldr	r5, [r4, #0]
 8006936:	1961      	adds	r1, r4, r5
 8006938:	428b      	cmp	r3, r1
 800693a:	bf01      	itttt	eq
 800693c:	6819      	ldreq	r1, [r3, #0]
 800693e:	685b      	ldreq	r3, [r3, #4]
 8006940:	1949      	addeq	r1, r1, r5
 8006942:	6021      	streq	r1, [r4, #0]
 8006944:	e7ed      	b.n	8006922 <_free_r+0x22>
 8006946:	461a      	mov	r2, r3
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	b10b      	cbz	r3, 8006950 <_free_r+0x50>
 800694c:	42a3      	cmp	r3, r4
 800694e:	d9fa      	bls.n	8006946 <_free_r+0x46>
 8006950:	6811      	ldr	r1, [r2, #0]
 8006952:	1855      	adds	r5, r2, r1
 8006954:	42a5      	cmp	r5, r4
 8006956:	d10b      	bne.n	8006970 <_free_r+0x70>
 8006958:	6824      	ldr	r4, [r4, #0]
 800695a:	4421      	add	r1, r4
 800695c:	1854      	adds	r4, r2, r1
 800695e:	42a3      	cmp	r3, r4
 8006960:	6011      	str	r1, [r2, #0]
 8006962:	d1e0      	bne.n	8006926 <_free_r+0x26>
 8006964:	681c      	ldr	r4, [r3, #0]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	6053      	str	r3, [r2, #4]
 800696a:	4421      	add	r1, r4
 800696c:	6011      	str	r1, [r2, #0]
 800696e:	e7da      	b.n	8006926 <_free_r+0x26>
 8006970:	d902      	bls.n	8006978 <_free_r+0x78>
 8006972:	230c      	movs	r3, #12
 8006974:	6003      	str	r3, [r0, #0]
 8006976:	e7d6      	b.n	8006926 <_free_r+0x26>
 8006978:	6825      	ldr	r5, [r4, #0]
 800697a:	1961      	adds	r1, r4, r5
 800697c:	428b      	cmp	r3, r1
 800697e:	bf04      	itt	eq
 8006980:	6819      	ldreq	r1, [r3, #0]
 8006982:	685b      	ldreq	r3, [r3, #4]
 8006984:	6063      	str	r3, [r4, #4]
 8006986:	bf04      	itt	eq
 8006988:	1949      	addeq	r1, r1, r5
 800698a:	6021      	streq	r1, [r4, #0]
 800698c:	6054      	str	r4, [r2, #4]
 800698e:	e7ca      	b.n	8006926 <_free_r+0x26>
 8006990:	b003      	add	sp, #12
 8006992:	bd30      	pop	{r4, r5, pc}
 8006994:	200035e0 	.word	0x200035e0

08006998 <sbrk_aligned>:
 8006998:	b570      	push	{r4, r5, r6, lr}
 800699a:	4e0e      	ldr	r6, [pc, #56]	; (80069d4 <sbrk_aligned+0x3c>)
 800699c:	460c      	mov	r4, r1
 800699e:	6831      	ldr	r1, [r6, #0]
 80069a0:	4605      	mov	r5, r0
 80069a2:	b911      	cbnz	r1, 80069aa <sbrk_aligned+0x12>
 80069a4:	f000 f88c 	bl	8006ac0 <_sbrk_r>
 80069a8:	6030      	str	r0, [r6, #0]
 80069aa:	4621      	mov	r1, r4
 80069ac:	4628      	mov	r0, r5
 80069ae:	f000 f887 	bl	8006ac0 <_sbrk_r>
 80069b2:	1c43      	adds	r3, r0, #1
 80069b4:	d00a      	beq.n	80069cc <sbrk_aligned+0x34>
 80069b6:	1cc4      	adds	r4, r0, #3
 80069b8:	f024 0403 	bic.w	r4, r4, #3
 80069bc:	42a0      	cmp	r0, r4
 80069be:	d007      	beq.n	80069d0 <sbrk_aligned+0x38>
 80069c0:	1a21      	subs	r1, r4, r0
 80069c2:	4628      	mov	r0, r5
 80069c4:	f000 f87c 	bl	8006ac0 <_sbrk_r>
 80069c8:	3001      	adds	r0, #1
 80069ca:	d101      	bne.n	80069d0 <sbrk_aligned+0x38>
 80069cc:	f04f 34ff 	mov.w	r4, #4294967295
 80069d0:	4620      	mov	r0, r4
 80069d2:	bd70      	pop	{r4, r5, r6, pc}
 80069d4:	200035e4 	.word	0x200035e4

080069d8 <_malloc_r>:
 80069d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069dc:	1ccd      	adds	r5, r1, #3
 80069de:	f025 0503 	bic.w	r5, r5, #3
 80069e2:	3508      	adds	r5, #8
 80069e4:	2d0c      	cmp	r5, #12
 80069e6:	bf38      	it	cc
 80069e8:	250c      	movcc	r5, #12
 80069ea:	2d00      	cmp	r5, #0
 80069ec:	4607      	mov	r7, r0
 80069ee:	db01      	blt.n	80069f4 <_malloc_r+0x1c>
 80069f0:	42a9      	cmp	r1, r5
 80069f2:	d905      	bls.n	8006a00 <_malloc_r+0x28>
 80069f4:	230c      	movs	r3, #12
 80069f6:	603b      	str	r3, [r7, #0]
 80069f8:	2600      	movs	r6, #0
 80069fa:	4630      	mov	r0, r6
 80069fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a00:	4e2e      	ldr	r6, [pc, #184]	; (8006abc <_malloc_r+0xe4>)
 8006a02:	f000 f86d 	bl	8006ae0 <__malloc_lock>
 8006a06:	6833      	ldr	r3, [r6, #0]
 8006a08:	461c      	mov	r4, r3
 8006a0a:	bb34      	cbnz	r4, 8006a5a <_malloc_r+0x82>
 8006a0c:	4629      	mov	r1, r5
 8006a0e:	4638      	mov	r0, r7
 8006a10:	f7ff ffc2 	bl	8006998 <sbrk_aligned>
 8006a14:	1c43      	adds	r3, r0, #1
 8006a16:	4604      	mov	r4, r0
 8006a18:	d14d      	bne.n	8006ab6 <_malloc_r+0xde>
 8006a1a:	6834      	ldr	r4, [r6, #0]
 8006a1c:	4626      	mov	r6, r4
 8006a1e:	2e00      	cmp	r6, #0
 8006a20:	d140      	bne.n	8006aa4 <_malloc_r+0xcc>
 8006a22:	6823      	ldr	r3, [r4, #0]
 8006a24:	4631      	mov	r1, r6
 8006a26:	4638      	mov	r0, r7
 8006a28:	eb04 0803 	add.w	r8, r4, r3
 8006a2c:	f000 f848 	bl	8006ac0 <_sbrk_r>
 8006a30:	4580      	cmp	r8, r0
 8006a32:	d13a      	bne.n	8006aaa <_malloc_r+0xd2>
 8006a34:	6821      	ldr	r1, [r4, #0]
 8006a36:	3503      	adds	r5, #3
 8006a38:	1a6d      	subs	r5, r5, r1
 8006a3a:	f025 0503 	bic.w	r5, r5, #3
 8006a3e:	3508      	adds	r5, #8
 8006a40:	2d0c      	cmp	r5, #12
 8006a42:	bf38      	it	cc
 8006a44:	250c      	movcc	r5, #12
 8006a46:	4629      	mov	r1, r5
 8006a48:	4638      	mov	r0, r7
 8006a4a:	f7ff ffa5 	bl	8006998 <sbrk_aligned>
 8006a4e:	3001      	adds	r0, #1
 8006a50:	d02b      	beq.n	8006aaa <_malloc_r+0xd2>
 8006a52:	6823      	ldr	r3, [r4, #0]
 8006a54:	442b      	add	r3, r5
 8006a56:	6023      	str	r3, [r4, #0]
 8006a58:	e00e      	b.n	8006a78 <_malloc_r+0xa0>
 8006a5a:	6822      	ldr	r2, [r4, #0]
 8006a5c:	1b52      	subs	r2, r2, r5
 8006a5e:	d41e      	bmi.n	8006a9e <_malloc_r+0xc6>
 8006a60:	2a0b      	cmp	r2, #11
 8006a62:	d916      	bls.n	8006a92 <_malloc_r+0xba>
 8006a64:	1961      	adds	r1, r4, r5
 8006a66:	42a3      	cmp	r3, r4
 8006a68:	6025      	str	r5, [r4, #0]
 8006a6a:	bf18      	it	ne
 8006a6c:	6059      	strne	r1, [r3, #4]
 8006a6e:	6863      	ldr	r3, [r4, #4]
 8006a70:	bf08      	it	eq
 8006a72:	6031      	streq	r1, [r6, #0]
 8006a74:	5162      	str	r2, [r4, r5]
 8006a76:	604b      	str	r3, [r1, #4]
 8006a78:	4638      	mov	r0, r7
 8006a7a:	f104 060b 	add.w	r6, r4, #11
 8006a7e:	f000 f835 	bl	8006aec <__malloc_unlock>
 8006a82:	f026 0607 	bic.w	r6, r6, #7
 8006a86:	1d23      	adds	r3, r4, #4
 8006a88:	1af2      	subs	r2, r6, r3
 8006a8a:	d0b6      	beq.n	80069fa <_malloc_r+0x22>
 8006a8c:	1b9b      	subs	r3, r3, r6
 8006a8e:	50a3      	str	r3, [r4, r2]
 8006a90:	e7b3      	b.n	80069fa <_malloc_r+0x22>
 8006a92:	6862      	ldr	r2, [r4, #4]
 8006a94:	42a3      	cmp	r3, r4
 8006a96:	bf0c      	ite	eq
 8006a98:	6032      	streq	r2, [r6, #0]
 8006a9a:	605a      	strne	r2, [r3, #4]
 8006a9c:	e7ec      	b.n	8006a78 <_malloc_r+0xa0>
 8006a9e:	4623      	mov	r3, r4
 8006aa0:	6864      	ldr	r4, [r4, #4]
 8006aa2:	e7b2      	b.n	8006a0a <_malloc_r+0x32>
 8006aa4:	4634      	mov	r4, r6
 8006aa6:	6876      	ldr	r6, [r6, #4]
 8006aa8:	e7b9      	b.n	8006a1e <_malloc_r+0x46>
 8006aaa:	230c      	movs	r3, #12
 8006aac:	603b      	str	r3, [r7, #0]
 8006aae:	4638      	mov	r0, r7
 8006ab0:	f000 f81c 	bl	8006aec <__malloc_unlock>
 8006ab4:	e7a1      	b.n	80069fa <_malloc_r+0x22>
 8006ab6:	6025      	str	r5, [r4, #0]
 8006ab8:	e7de      	b.n	8006a78 <_malloc_r+0xa0>
 8006aba:	bf00      	nop
 8006abc:	200035e0 	.word	0x200035e0

08006ac0 <_sbrk_r>:
 8006ac0:	b538      	push	{r3, r4, r5, lr}
 8006ac2:	4d06      	ldr	r5, [pc, #24]	; (8006adc <_sbrk_r+0x1c>)
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	4604      	mov	r4, r0
 8006ac8:	4608      	mov	r0, r1
 8006aca:	602b      	str	r3, [r5, #0]
 8006acc:	f7fa fcf2 	bl	80014b4 <_sbrk>
 8006ad0:	1c43      	adds	r3, r0, #1
 8006ad2:	d102      	bne.n	8006ada <_sbrk_r+0x1a>
 8006ad4:	682b      	ldr	r3, [r5, #0]
 8006ad6:	b103      	cbz	r3, 8006ada <_sbrk_r+0x1a>
 8006ad8:	6023      	str	r3, [r4, #0]
 8006ada:	bd38      	pop	{r3, r4, r5, pc}
 8006adc:	200035e8 	.word	0x200035e8

08006ae0 <__malloc_lock>:
 8006ae0:	4801      	ldr	r0, [pc, #4]	; (8006ae8 <__malloc_lock+0x8>)
 8006ae2:	f000 b809 	b.w	8006af8 <__retarget_lock_acquire_recursive>
 8006ae6:	bf00      	nop
 8006ae8:	200035ec 	.word	0x200035ec

08006aec <__malloc_unlock>:
 8006aec:	4801      	ldr	r0, [pc, #4]	; (8006af4 <__malloc_unlock+0x8>)
 8006aee:	f000 b804 	b.w	8006afa <__retarget_lock_release_recursive>
 8006af2:	bf00      	nop
 8006af4:	200035ec 	.word	0x200035ec

08006af8 <__retarget_lock_acquire_recursive>:
 8006af8:	4770      	bx	lr

08006afa <__retarget_lock_release_recursive>:
 8006afa:	4770      	bx	lr

08006afc <_init>:
 8006afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006afe:	bf00      	nop
 8006b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b02:	bc08      	pop	{r3}
 8006b04:	469e      	mov	lr, r3
 8006b06:	4770      	bx	lr

08006b08 <_fini>:
 8006b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b0a:	bf00      	nop
 8006b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b0e:	bc08      	pop	{r3}
 8006b10:	469e      	mov	lr, r3
 8006b12:	4770      	bx	lr
