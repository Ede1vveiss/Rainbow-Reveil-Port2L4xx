
Reveil_STM32-Matrice.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061ec  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08006378  08006378  00016378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063c4  080063c4  00024528  2**0
                  CONTENTS
  4 .ARM          00000008  080063c4  080063c4  000163c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063cc  080063cc  00024528  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063cc  080063cc  000163cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063d0  080063d0  000163d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00004528  20000000  080063d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ca8  20004528  0800a8fc  00024528  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200051d0  0800a8fc  000251d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00024528  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014e24  00000000  00000000  00024558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000298a  00000000  00000000  0003937c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001210  00000000  00000000  0003bd08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000230d8  00000000  00000000  0003cf18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00015ab0  00000000  00000000  0005fff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000d98a3  00000000  00000000  00075aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0014f343  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000010f0  00000000  00000000  0014f398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004e28  00000000  00000000  00150488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20004528 	.word	0x20004528
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08006360 	.word	0x08006360

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	2000452c 	.word	0x2000452c
 80001c8:	08006360 	.word	0x08006360

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <sendCanvas>:
}



// Fonction pour mettre à jour l'affichage LED
void sendCanvas(Canvas* canvas) {
 80004d0:	b5b0      	push	{r4, r5, r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
    // Copiez les pixels du canevas vers l'écran LED
    for (uint16_t i = 0; i < canvas->numCols * canvas->numRows -1; i++) {  // -1 car résolution bug affichage photodiode inexistante
 80004d8:	2300      	movs	r3, #0
 80004da:	81fb      	strh	r3, [r7, #14]
 80004dc:	e01f      	b.n	800051e <sendCanvas+0x4e>
        setLEDcolor(i, canvas -> pixels[i].R, canvas -> pixels[i].G, canvas -> pixels[i].B);
 80004de:	89f8      	ldrh	r0, [r7, #14]
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	6899      	ldr	r1, [r3, #8]
 80004e4:	89fa      	ldrh	r2, [r7, #14]
 80004e6:	4613      	mov	r3, r2
 80004e8:	005b      	lsls	r3, r3, #1
 80004ea:	4413      	add	r3, r2
 80004ec:	440b      	add	r3, r1
 80004ee:	781c      	ldrb	r4, [r3, #0]
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	6899      	ldr	r1, [r3, #8]
 80004f4:	89fa      	ldrh	r2, [r7, #14]
 80004f6:	4613      	mov	r3, r2
 80004f8:	005b      	lsls	r3, r3, #1
 80004fa:	4413      	add	r3, r2
 80004fc:	440b      	add	r3, r1
 80004fe:	785d      	ldrb	r5, [r3, #1]
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	6899      	ldr	r1, [r3, #8]
 8000504:	89fa      	ldrh	r2, [r7, #14]
 8000506:	4613      	mov	r3, r2
 8000508:	005b      	lsls	r3, r3, #1
 800050a:	4413      	add	r3, r2
 800050c:	440b      	add	r3, r1
 800050e:	789b      	ldrb	r3, [r3, #2]
 8000510:	462a      	mov	r2, r5
 8000512:	4621      	mov	r1, r4
 8000514:	f000 f9a0 	bl	8000858 <setLEDcolor>
    for (uint16_t i = 0; i < canvas->numCols * canvas->numRows -1; i++) {  // -1 car résolution bug affichage photodiode inexistante
 8000518:	89fb      	ldrh	r3, [r7, #14]
 800051a:	3301      	adds	r3, #1
 800051c:	81fb      	strh	r3, [r7, #14]
 800051e:	89fa      	ldrh	r2, [r7, #14]
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	6879      	ldr	r1, [r7, #4]
 8000526:	6849      	ldr	r1, [r1, #4]
 8000528:	fb01 f303 	mul.w	r3, r1, r3
 800052c:	3b01      	subs	r3, #1
 800052e:	429a      	cmp	r2, r3
 8000530:	dbd5      	blt.n	80004de <sendCanvas+0xe>
    }
}
 8000532:	bf00      	nop
 8000534:	bf00      	nop
 8000536:	3710      	adds	r7, #16
 8000538:	46bd      	mov	sp, r7
 800053a:	bdb0      	pop	{r4, r5, r7, pc}

0800053c <getPixel>:

Pixel* getPixel(Canvas* canvas, int x, int y) {
 800053c:	b480      	push	{r7}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0
 8000542:	60f8      	str	r0, [r7, #12]
 8000544:	60b9      	str	r1, [r7, #8]
 8000546:	607a      	str	r2, [r7, #4]
    if (x > 0 && x <= canvas->numCols && y > 0 && y <= canvas->numRows) {
 8000548:	68bb      	ldr	r3, [r7, #8]
 800054a:	2b00      	cmp	r3, #0
 800054c:	dd1d      	ble.n	800058a <getPixel+0x4e>
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	68ba      	ldr	r2, [r7, #8]
 8000554:	429a      	cmp	r2, r3
 8000556:	dc18      	bgt.n	800058a <getPixel+0x4e>
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	2b00      	cmp	r3, #0
 800055c:	dd15      	ble.n	800058a <getPixel+0x4e>
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	685b      	ldr	r3, [r3, #4]
 8000562:	687a      	ldr	r2, [r7, #4]
 8000564:	429a      	cmp	r2, r3
 8000566:	dc10      	bgt.n	800058a <getPixel+0x4e>
        return &canvas->pixels[(x-1)*canvas->numRows+(y-1)];
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	689a      	ldr	r2, [r3, #8]
 800056c:	68bb      	ldr	r3, [r7, #8]
 800056e:	3b01      	subs	r3, #1
 8000570:	68f9      	ldr	r1, [r7, #12]
 8000572:	6849      	ldr	r1, [r1, #4]
 8000574:	fb03 f101 	mul.w	r1, r3, r1
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	3b01      	subs	r3, #1
 800057c:	440b      	add	r3, r1
 800057e:	4619      	mov	r1, r3
 8000580:	460b      	mov	r3, r1
 8000582:	005b      	lsls	r3, r3, #1
 8000584:	440b      	add	r3, r1
 8000586:	4413      	add	r3, r2
 8000588:	e000      	b.n	800058c <getPixel+0x50>
    } else {
        return NULL; // Coordonnées hors limites
 800058a:	2300      	movs	r3, #0
    }
}
 800058c:	4618      	mov	r0, r3
 800058e:	3714      	adds	r7, #20
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr

08000598 <drawImage>:
            }
            mask >>= 1;
        }
}

void drawImage(ImageData* imageData, int frame, int x, int y, Canvas* canvas) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b08a      	sub	sp, #40	; 0x28
 800059c:	af00      	add	r7, sp, #0
 800059e:	60f8      	str	r0, [r7, #12]
 80005a0:	60b9      	str	r1, [r7, #8]
 80005a2:	607a      	str	r2, [r7, #4]
 80005a4:	603b      	str	r3, [r7, #0]

//*****************	DECODAGE INDEXED 2BIT	*****************************/


    if (imageData == NULL || canvas == NULL) {
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d06d      	beq.n	8000688 <drawImage+0xf0>
 80005ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d06a      	beq.n	8000688 <drawImage+0xf0>
        // Gérez les cas d'erreur ou de paramètres non valides, si nécessaire
        return;
    }
/*********  modif EFV pour alpha toujours MAX  ****************/
    for (int imgY = 0; imgY < imageData->height; imgY++) {
 80005b2:	2300      	movs	r3, #0
 80005b4:	627b      	str	r3, [r7, #36]	; 0x24
 80005b6:	e060      	b.n	800067a <drawImage+0xe2>
        for (int imgX = 0; imgX < imageData->width; imgX++) {
 80005b8:	2300      	movs	r3, #0
 80005ba:	623b      	str	r3, [r7, #32]
 80005bc:	e054      	b.n	8000668 <drawImage+0xd0>
        	//									sel ligne	        + sel col * decal RGB + decal image
            uint8_t* pixel = &imageData->data[(imgY * imageData->width + imgX) * 3     /* + imageData->height*imageData->width*3*(frame)*/];  // BGR format
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	6899      	ldr	r1, [r3, #8]
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	881b      	ldrh	r3, [r3, #0]
 80005c6:	461a      	mov	r2, r3
 80005c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ca:	fb03 f202 	mul.w	r2, r3, r2
 80005ce:	6a3b      	ldr	r3, [r7, #32]
 80005d0:	441a      	add	r2, r3
 80005d2:	4613      	mov	r3, r2
 80005d4:	005b      	lsls	r3, r3, #1
 80005d6:	4413      	add	r3, r2
 80005d8:	440b      	add	r3, r1
 80005da:	61fb      	str	r3, [r7, #28]
            // Ignore les pixels totalement transparents (canal alpha à zéro)
            if (pixel[3] == 0x00) {
                continue;
            }
*/
            int canvasX = x + imgX;  // Coordonnée X sur le canevas
 80005dc:	687a      	ldr	r2, [r7, #4]
 80005de:	6a3b      	ldr	r3, [r7, #32]
 80005e0:	4413      	add	r3, r2
 80005e2:	61bb      	str	r3, [r7, #24]
            int canvasY = y + (imageData->height - 1) - imgY;  // Coordonnée Y sur le canevas
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	889b      	ldrh	r3, [r3, #4]
 80005e8:	1e5a      	subs	r2, r3, #1
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	441a      	add	r2, r3
 80005ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005f0:	1ad3      	subs	r3, r2, r3
 80005f2:	617b      	str	r3, [r7, #20]

            // Assurez-vous que les coordonnées se trouvent dans les limites du canevas
            if (canvasX > 0 && canvasX <= canvas->numCols && canvasY > 0 && canvasY <= canvas->numRows) {
 80005f4:	69bb      	ldr	r3, [r7, #24]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	dd33      	ble.n	8000662 <drawImage+0xca>
 80005fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	69ba      	ldr	r2, [r7, #24]
 8000600:	429a      	cmp	r2, r3
 8000602:	dc2e      	bgt.n	8000662 <drawImage+0xca>
 8000604:	697b      	ldr	r3, [r7, #20]
 8000606:	2b00      	cmp	r3, #0
 8000608:	dd2b      	ble.n	8000662 <drawImage+0xca>
 800060a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800060c:	685b      	ldr	r3, [r3, #4]
 800060e:	697a      	ldr	r2, [r7, #20]
 8000610:	429a      	cmp	r2, r3
 8000612:	dc26      	bgt.n	8000662 <drawImage+0xca>
                // Obtenez le pixel actuel du canevas en utilisant la fonction getPixel
                Pixel* canvasPixel = getPixel(canvas, canvasX, canvasY);
 8000614:	697a      	ldr	r2, [r7, #20]
 8000616:	69b9      	ldr	r1, [r7, #24]
 8000618:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800061a:	f7ff ff8f 	bl	800053c <getPixel>
 800061e:	6138      	str	r0, [r7, #16]


                // Appliquez la couleur de l'image avec la transparence sur le pixel du canevas
                // Assurez-vous d'ajuster les canaux alpha en conséquence
                canvasPixel->R = pixel[2];
 8000620:	69fb      	ldr	r3, [r7, #28]
 8000622:	789a      	ldrb	r2, [r3, #2]
 8000624:	693b      	ldr	r3, [r7, #16]
 8000626:	701a      	strb	r2, [r3, #0]
                canvasPixel->G = pixel[1];
 8000628:	69fb      	ldr	r3, [r7, #28]
 800062a:	785a      	ldrb	r2, [r3, #1]
 800062c:	693b      	ldr	r3, [r7, #16]
 800062e:	705a      	strb	r2, [r3, #1]
                canvasPixel->B = pixel[0];
 8000630:	69fb      	ldr	r3, [r7, #28]
 8000632:	781a      	ldrb	r2, [r3, #0]
 8000634:	693b      	ldr	r3, [r7, #16]
 8000636:	709a      	strb	r2, [r3, #2]
                // Appliquer le masque pour forcer les valeurs à être paires
                canvasPixel->R &= 0xFE; // Le masque 0xFE force le dernier bit à 0.
 8000638:	693b      	ldr	r3, [r7, #16]
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	f023 0301 	bic.w	r3, r3, #1
 8000640:	b2da      	uxtb	r2, r3
 8000642:	693b      	ldr	r3, [r7, #16]
 8000644:	701a      	strb	r2, [r3, #0]
                canvasPixel->G &= 0xFE;
 8000646:	693b      	ldr	r3, [r7, #16]
 8000648:	785b      	ldrb	r3, [r3, #1]
 800064a:	f023 0301 	bic.w	r3, r3, #1
 800064e:	b2da      	uxtb	r2, r3
 8000650:	693b      	ldr	r3, [r7, #16]
 8000652:	705a      	strb	r2, [r3, #1]
                canvasPixel->B &= 0xFE;
 8000654:	693b      	ldr	r3, [r7, #16]
 8000656:	789b      	ldrb	r3, [r3, #2]
 8000658:	f023 0301 	bic.w	r3, r3, #1
 800065c:	b2da      	uxtb	r2, r3
 800065e:	693b      	ldr	r3, [r7, #16]
 8000660:	709a      	strb	r2, [r3, #2]
        for (int imgX = 0; imgX < imageData->width; imgX++) {
 8000662:	6a3b      	ldr	r3, [r7, #32]
 8000664:	3301      	adds	r3, #1
 8000666:	623b      	str	r3, [r7, #32]
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	881b      	ldrh	r3, [r3, #0]
 800066c:	461a      	mov	r2, r3
 800066e:	6a3b      	ldr	r3, [r7, #32]
 8000670:	4293      	cmp	r3, r2
 8000672:	dba4      	blt.n	80005be <drawImage+0x26>
    for (int imgY = 0; imgY < imageData->height; imgY++) {
 8000674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000676:	3301      	adds	r3, #1
 8000678:	627b      	str	r3, [r7, #36]	; 0x24
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	889b      	ldrh	r3, [r3, #4]
 800067e:	461a      	mov	r2, r3
 8000680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000682:	4293      	cmp	r3, r2
 8000684:	db98      	blt.n	80005b8 <drawImage+0x20>
 8000686:	e000      	b.n	800068a <drawImage+0xf2>
        return;
 8000688:	bf00      	nop

            }
        }
    }
}
 800068a:	3728      	adds	r7, #40	; 0x28
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <drawIndexedImage>:


// Modified drawImage function to use indexed values
void drawIndexedImage(IndexedImageData* indexedImage, int frame, int x, int y, Canvas* canvas) {
 8000690:	b580      	push	{r7, lr}
 8000692:	b08a      	sub	sp, #40	; 0x28
 8000694:	af02      	add	r7, sp, #8
 8000696:	60f8      	str	r0, [r7, #12]
 8000698:	60b9      	str	r1, [r7, #8]
 800069a:	607a      	str	r2, [r7, #4]
 800069c:	603b      	str	r3, [r7, #0]
    if (indexedImage == NULL || canvas == NULL) {
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d017      	beq.n	80006d4 <drawIndexedImage+0x44>
 80006a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d014      	beq.n	80006d4 <drawIndexedImage+0x44>
        // Gérez les cas d'erreur ou de paramètres non valides, si nécessaire
        return;
    }

    ImageData rgbaImage;
    convertIndexedToRGBA(indexedImage, frame, &rgbaImage);
 80006aa:	f107 0314 	add.w	r3, r7, #20
 80006ae:	461a      	mov	r2, r3
 80006b0:	68b9      	ldr	r1, [r7, #8]
 80006b2:	68f8      	ldr	r0, [r7, #12]
 80006b4:	f000 f812 	bl	80006dc <convertIndexedToRGBA>

    drawImage(&rgbaImage, 0, x, y, canvas);
 80006b8:	f107 0014 	add.w	r0, r7, #20
 80006bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006be:	9300      	str	r3, [sp, #0]
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	687a      	ldr	r2, [r7, #4]
 80006c4:	2100      	movs	r1, #0
 80006c6:	f7ff ff67 	bl	8000598 <drawImage>

    free(rgbaImage.data);
 80006ca:	69fb      	ldr	r3, [r7, #28]
 80006cc:	4618      	mov	r0, r3
 80006ce:	f005 fd39 	bl	8006144 <free>
 80006d2:	e000      	b.n	80006d6 <drawIndexedImage+0x46>
        return;
 80006d4:	bf00      	nop
}
 80006d6:	3720      	adds	r7, #32
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <convertIndexedToRGBA>:
    //0xff000010, // Color of index 2
    //0xff000000,  // Color of index 3
};

//Rajout par EFV
void convertIndexedToRGBA(IndexedImageData* indexedImage, int frame, ImageData* rgbaImage) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08a      	sub	sp, #40	; 0x28
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
    rgbaImage->width = indexedImage->width;
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	885a      	ldrh	r2, [r3, #2]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	801a      	strh	r2, [r3, #0]
    rgbaImage->height = indexedImage->height;
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	88da      	ldrh	r2, [r3, #6]
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	809a      	strh	r2, [r3, #4]
    rgbaImage->data = (uint8_t*)malloc(indexedImage->width * indexedImage->height * 3);
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	885b      	ldrh	r3, [r3, #2]
 80006fc:	461a      	mov	r2, r3
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	88db      	ldrh	r3, [r3, #6]
 8000702:	fb03 f202 	mul.w	r2, r3, r2
 8000706:	4613      	mov	r3, r2
 8000708:	005b      	lsls	r3, r3, #1
 800070a:	4413      	add	r3, r2
 800070c:	4618      	mov	r0, r3
 800070e:	f005 fd11 	bl	8006134 <malloc>
 8000712:	4603      	mov	r3, r0
 8000714:	461a      	mov	r2, r3
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	609a      	str	r2, [r3, #8]

    for (int j = 0; j < 5; j++){
 800071a:	2300      	movs	r3, #0
 800071c:	627b      	str	r3, [r7, #36]	; 0x24
 800071e:	e078      	b.n	8000812 <convertIndexedToRGBA+0x136>
    		for (int i = 0; i < 19; i++) {
 8000720:	2300      	movs	r3, #0
 8000722:	623b      	str	r3, [r7, #32]
 8000724:	e06f      	b.n	8000806 <convertIndexedToRGBA+0x12a>
    			uint8_t VertProg = 3*j;			//vertical progress of frame    24bits in 3 uint8
 8000726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000728:	b2db      	uxtb	r3, r3
 800072a:	461a      	mov	r2, r3
 800072c:	0052      	lsls	r2, r2, #1
 800072e:	4413      	add	r3, r2
 8000730:	77fb      	strb	r3, [r7, #31]
    			uint16_t DecalFrame = 3*indexedImage->height*frame;		// offset for frame selection
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	88da      	ldrh	r2, [r3, #6]
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	b29b      	uxth	r3, r3
 800073a:	fb12 f303 	smulbb	r3, r2, r3
 800073e:	b29b      	uxth	r3, r3
 8000740:	461a      	mov	r2, r3
 8000742:	0052      	lsls	r2, r2, #1
 8000744:	4413      	add	r3, r2
 8000746:	83bb      	strh	r3, [r7, #28]
    			uint8_t HoriProg = i/8;			// Horizontal progress
 8000748:	6a3b      	ldr	r3, [r7, #32]
 800074a:	2b00      	cmp	r3, #0
 800074c:	da00      	bge.n	8000750 <convertIndexedToRGBA+0x74>
 800074e:	3307      	adds	r3, #7
 8000750:	10db      	asrs	r3, r3, #3
 8000752:	76fb      	strb	r3, [r7, #27]
    			uint8_t DecalDeBit = 7 - i % 8;		// amount of bits to move to the right ONLY FOR 1bit index
 8000754:	6a3b      	ldr	r3, [r7, #32]
 8000756:	425a      	negs	r2, r3
 8000758:	f003 0307 	and.w	r3, r3, #7
 800075c:	f002 0207 	and.w	r2, r2, #7
 8000760:	bf58      	it	pl
 8000762:	4253      	negpl	r3, r2
 8000764:	b2db      	uxtb	r3, r3
 8000766:	f1c3 0307 	rsb	r3, r3, #7
 800076a:	76bb      	strb	r3, [r7, #26]
    			uint8_t index = (indexedImage->data[HoriProg + DecalFrame+VertProg] >> DecalDeBit) & 0x01;
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	689b      	ldr	r3, [r3, #8]
 8000770:	7ef9      	ldrb	r1, [r7, #27]
 8000772:	8bba      	ldrh	r2, [r7, #28]
 8000774:	4411      	add	r1, r2
 8000776:	7ffa      	ldrb	r2, [r7, #31]
 8000778:	440a      	add	r2, r1
 800077a:	4413      	add	r3, r2
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	461a      	mov	r2, r3
 8000780:	7ebb      	ldrb	r3, [r7, #26]
 8000782:	fa42 f303 	asr.w	r3, r2, r3
 8000786:	b2db      	uxtb	r3, r3
 8000788:	f003 0301 	and.w	r3, r3, #1
 800078c:	767b      	strb	r3, [r7, #25]
    			uint32_t color = colorPalette[index];
 800078e:	7e7b      	ldrb	r3, [r7, #25]
 8000790:	4a24      	ldr	r2, [pc, #144]	; (8000824 <convertIndexedToRGBA+0x148>)
 8000792:	5cd3      	ldrb	r3, [r2, r3]
 8000794:	617b      	str	r3, [r7, #20]
    			rgbaImage->data[(i+19*j) * 3] = color;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	6899      	ldr	r1, [r3, #8]
 800079a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800079c:	4613      	mov	r3, r2
 800079e:	00db      	lsls	r3, r3, #3
 80007a0:	4413      	add	r3, r2
 80007a2:	005b      	lsls	r3, r3, #1
 80007a4:	441a      	add	r2, r3
 80007a6:	6a3b      	ldr	r3, [r7, #32]
 80007a8:	441a      	add	r2, r3
 80007aa:	4613      	mov	r3, r2
 80007ac:	005b      	lsls	r3, r3, #1
 80007ae:	4413      	add	r3, r2
 80007b0:	440b      	add	r3, r1
 80007b2:	697a      	ldr	r2, [r7, #20]
 80007b4:	b2d2      	uxtb	r2, r2
 80007b6:	701a      	strb	r2, [r3, #0]
    			rgbaImage->data[(i+19*j) * 3 + 1] = color;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	6899      	ldr	r1, [r3, #8]
 80007bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007be:	4613      	mov	r3, r2
 80007c0:	00db      	lsls	r3, r3, #3
 80007c2:	4413      	add	r3, r2
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	441a      	add	r2, r3
 80007c8:	6a3b      	ldr	r3, [r7, #32]
 80007ca:	441a      	add	r2, r3
 80007cc:	4613      	mov	r3, r2
 80007ce:	005b      	lsls	r3, r3, #1
 80007d0:	4413      	add	r3, r2
 80007d2:	3301      	adds	r3, #1
 80007d4:	440b      	add	r3, r1
 80007d6:	697a      	ldr	r2, [r7, #20]
 80007d8:	b2d2      	uxtb	r2, r2
 80007da:	701a      	strb	r2, [r3, #0]
    			rgbaImage->data[(i+19*j) * 3 + 2] = color;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	6899      	ldr	r1, [r3, #8]
 80007e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007e2:	4613      	mov	r3, r2
 80007e4:	00db      	lsls	r3, r3, #3
 80007e6:	4413      	add	r3, r2
 80007e8:	005b      	lsls	r3, r3, #1
 80007ea:	441a      	add	r2, r3
 80007ec:	6a3b      	ldr	r3, [r7, #32]
 80007ee:	441a      	add	r2, r3
 80007f0:	4613      	mov	r3, r2
 80007f2:	005b      	lsls	r3, r3, #1
 80007f4:	4413      	add	r3, r2
 80007f6:	3302      	adds	r3, #2
 80007f8:	440b      	add	r3, r1
 80007fa:	697a      	ldr	r2, [r7, #20]
 80007fc:	b2d2      	uxtb	r2, r2
 80007fe:	701a      	strb	r2, [r3, #0]
    		for (int i = 0; i < 19; i++) {
 8000800:	6a3b      	ldr	r3, [r7, #32]
 8000802:	3301      	adds	r3, #1
 8000804:	623b      	str	r3, [r7, #32]
 8000806:	6a3b      	ldr	r3, [r7, #32]
 8000808:	2b12      	cmp	r3, #18
 800080a:	dd8c      	ble.n	8000726 <convertIndexedToRGBA+0x4a>
    for (int j = 0; j < 5; j++){
 800080c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800080e:	3301      	adds	r3, #1
 8000810:	627b      	str	r3, [r7, #36]	; 0x24
 8000812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000814:	2b04      	cmp	r3, #4
 8000816:	dd83      	ble.n	8000720 <convertIndexedToRGBA+0x44>
    		}
    }
}
 8000818:	bf00      	nop
 800081a:	bf00      	nop
 800081c:	3728      	adds	r7, #40	; 0x28
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	08006378 	.word	0x08006378

08000828 <ws2812_start>:
/* Variables -----------------------------------------------*/
static uint8_t LEDbuffer[LED_BUFFER_SIZE];
extern TIM_HandleTypeDef htim2;

/* Functions -----------------------------------------------*/
void ws2812_start(void) {
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
	fillBufferBlack();
 800082c:	f000 f89e 	bl	800096c <fillBufferBlack>
	htim2.Init.Period = TIMER_PERIOD - 1;
 8000830:	4b07      	ldr	r3, [pc, #28]	; (8000850 <ws2812_start+0x28>)
 8000832:	2209      	movs	r2, #9
 8000834:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Init(&htim2);
 8000836:	4806      	ldr	r0, [pc, #24]	; (8000850 <ws2812_start+0x28>)
 8000838:	f003 faf6 	bl	8003e28 <HAL_TIM_Base_Init>
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *) LEDbuffer,
 800083c:	f640 2361 	movw	r3, #2657	; 0xa61
 8000840:	4a04      	ldr	r2, [pc, #16]	; (8000854 <ws2812_start+0x2c>)
 8000842:	2100      	movs	r1, #0
 8000844:	4802      	ldr	r0, [pc, #8]	; (8000850 <ws2812_start+0x28>)
 8000846:	f003 fba7 	bl	8003f98 <HAL_TIM_PWM_Start_DMA>
				LED_BUFFER_SIZE);
	//HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20005054 	.word	0x20005054
 8000854:	20004544 	.word	0x20004544

08000858 <setLEDcolor>:
void ws2812_update(void) {
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *) LEDbuffer,
			LED_BUFFER_SIZE);
}

void setLEDcolor(uint32_t LEDnumber, uint8_t RED, uint8_t GREEN, uint8_t BLUE) {
 8000858:	b480      	push	{r7}
 800085a:	b08b      	sub	sp, #44	; 0x2c
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	4608      	mov	r0, r1
 8000862:	4611      	mov	r1, r2
 8000864:	461a      	mov	r2, r3
 8000866:	4603      	mov	r3, r0
 8000868:	70fb      	strb	r3, [r7, #3]
 800086a:	460b      	mov	r3, r1
 800086c:	70bb      	strb	r3, [r7, #2]
 800086e:	4613      	mov	r3, r2
 8000870:	707b      	strb	r3, [r7, #1]
	uint8_t tempBuffer[24];
	uint32_t i;
	uint32_t LEDindex;
	LEDindex = LEDnumber % LED_NUMBER;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4a3b      	ldr	r2, [pc, #236]	; (8000964 <setLEDcolor+0x10c>)
 8000876:	fba2 1203 	umull	r1, r2, r2, r3
 800087a:	0992      	lsrs	r2, r2, #6
 800087c:	215e      	movs	r1, #94	; 0x5e
 800087e:	fb01 f202 	mul.w	r2, r1, r2
 8000882:	1a9b      	subs	r3, r3, r2
 8000884:	623b      	str	r3, [r7, #32]

	for (i = 0; i < 8; i++) // GREEN data
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
 800088a:	e013      	b.n	80008b4 <setLEDcolor+0x5c>
		tempBuffer[i] = ((GREEN << i) & 0x80) ? WS2812_1 : WS2812_0;
 800088c:	78ba      	ldrb	r2, [r7, #2]
 800088e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000890:	fa02 f303 	lsl.w	r3, r2, r3
 8000894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <setLEDcolor+0x48>
 800089c:	2106      	movs	r1, #6
 800089e:	e000      	b.n	80008a2 <setLEDcolor+0x4a>
 80008a0:	2103      	movs	r1, #3
 80008a2:	f107 0208 	add.w	r2, r7, #8
 80008a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a8:	4413      	add	r3, r2
 80008aa:	460a      	mov	r2, r1
 80008ac:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) // GREEN data
 80008ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b0:	3301      	adds	r3, #1
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
 80008b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b6:	2b07      	cmp	r3, #7
 80008b8:	d9e8      	bls.n	800088c <setLEDcolor+0x34>
	for (i = 0; i < 8; i++) // RED
 80008ba:	2300      	movs	r3, #0
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
 80008be:	e013      	b.n	80008e8 <setLEDcolor+0x90>
		tempBuffer[8 + i] = ((RED << i) & 0x80) ? WS2812_1 : WS2812_0;
 80008c0:	78fa      	ldrb	r2, [r7, #3]
 80008c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c4:	fa02 f303 	lsl.w	r3, r2, r3
 80008c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <setLEDcolor+0x7c>
 80008d0:	2206      	movs	r2, #6
 80008d2:	e000      	b.n	80008d6 <setLEDcolor+0x7e>
 80008d4:	2203      	movs	r2, #3
 80008d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d8:	3308      	adds	r3, #8
 80008da:	3328      	adds	r3, #40	; 0x28
 80008dc:	443b      	add	r3, r7
 80008de:	f803 2c20 	strb.w	r2, [r3, #-32]
	for (i = 0; i < 8; i++) // RED
 80008e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e4:	3301      	adds	r3, #1
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
 80008e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ea:	2b07      	cmp	r3, #7
 80008ec:	d9e8      	bls.n	80008c0 <setLEDcolor+0x68>
	for (i = 0; i < 8; i++) // BLUE
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
 80008f2:	e013      	b.n	800091c <setLEDcolor+0xc4>
		tempBuffer[16 + i] = ((BLUE << i) & 0x80) ? WS2812_1 : WS2812_0;
 80008f4:	787a      	ldrb	r2, [r7, #1]
 80008f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f8:	fa02 f303 	lsl.w	r3, r2, r3
 80008fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <setLEDcolor+0xb0>
 8000904:	2206      	movs	r2, #6
 8000906:	e000      	b.n	800090a <setLEDcolor+0xb2>
 8000908:	2203      	movs	r2, #3
 800090a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800090c:	3310      	adds	r3, #16
 800090e:	3328      	adds	r3, #40	; 0x28
 8000910:	443b      	add	r3, r7
 8000912:	f803 2c20 	strb.w	r2, [r3, #-32]
	for (i = 0; i < 8; i++) // BLUE
 8000916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000918:	3301      	adds	r3, #1
 800091a:	627b      	str	r3, [r7, #36]	; 0x24
 800091c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800091e:	2b07      	cmp	r3, #7
 8000920:	d9e8      	bls.n	80008f4 <setLEDcolor+0x9c>

	for (i = 0; i < 24; i++)
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
 8000926:	e012      	b.n	800094e <setLEDcolor+0xf6>
		LEDbuffer[RESET_SLOTS_BEGIN + LEDindex * 24 + i] = tempBuffer[i];
 8000928:	6a3a      	ldr	r2, [r7, #32]
 800092a:	4613      	mov	r3, r2
 800092c:	005b      	lsls	r3, r3, #1
 800092e:	4413      	add	r3, r2
 8000930:	00db      	lsls	r3, r3, #3
 8000932:	461a      	mov	r2, r3
 8000934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000936:	4413      	add	r3, r2
 8000938:	33c8      	adds	r3, #200	; 0xc8
 800093a:	f107 0108 	add.w	r1, r7, #8
 800093e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000940:	440a      	add	r2, r1
 8000942:	7811      	ldrb	r1, [r2, #0]
 8000944:	4a08      	ldr	r2, [pc, #32]	; (8000968 <setLEDcolor+0x110>)
 8000946:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < 24; i++)
 8000948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800094a:	3301      	adds	r3, #1
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
 800094e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000950:	2b17      	cmp	r3, #23
 8000952:	d9e9      	bls.n	8000928 <setLEDcolor+0xd0>
}
 8000954:	bf00      	nop
 8000956:	bf00      	nop
 8000958:	372c      	adds	r7, #44	; 0x2c
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	ae4c415d 	.word	0xae4c415d
 8000968:	20004544 	.word	0x20004544

0800096c <fillBufferBlack>:

	for (index = 0; index < LED_NUMBER; index++)
		setLEDcolor(index, RED, GREEN, BLUE);
}

void fillBufferBlack(void) {
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
	/*Fill LED buffer - ALL OFF*/
	uint32_t index, buffIndex;
	buffIndex = 0;
 8000972:	2300      	movs	r3, #0
 8000974:	603b      	str	r3, [r7, #0]

	for (index = 0; index < RESET_SLOTS_BEGIN; index++) {
 8000976:	2300      	movs	r3, #0
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	e00a      	b.n	8000992 <fillBufferBlack+0x26>
		LEDbuffer[buffIndex] = WS2812_RESET;
 800097c:	4a1f      	ldr	r2, [pc, #124]	; (80009fc <fillBufferBlack+0x90>)
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	4413      	add	r3, r2
 8000982:	2200      	movs	r2, #0
 8000984:	701a      	strb	r2, [r3, #0]
		buffIndex++;
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	3301      	adds	r3, #1
 800098a:	603b      	str	r3, [r7, #0]
	for (index = 0; index < RESET_SLOTS_BEGIN; index++) {
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	3301      	adds	r3, #1
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2bc7      	cmp	r3, #199	; 0xc7
 8000996:	d9f1      	bls.n	800097c <fillBufferBlack+0x10>
	}
	for (index = 0; index < LED_DATA_SIZE; index++) {
 8000998:	2300      	movs	r3, #0
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	e00a      	b.n	80009b4 <fillBufferBlack+0x48>
		LEDbuffer[buffIndex] = WS2812_0;
 800099e:	4a17      	ldr	r2, [pc, #92]	; (80009fc <fillBufferBlack+0x90>)
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	4413      	add	r3, r2
 80009a4:	2203      	movs	r2, #3
 80009a6:	701a      	strb	r2, [r3, #0]
		buffIndex++;
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	3301      	adds	r3, #1
 80009ac:	603b      	str	r3, [r7, #0]
	for (index = 0; index < LED_DATA_SIZE; index++) {
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	3301      	adds	r3, #1
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	f5b3 6f0d 	cmp.w	r3, #2256	; 0x8d0
 80009ba:	d3f0      	bcc.n	800099e <fillBufferBlack+0x32>
	}
	LEDbuffer[buffIndex] = WS2812_0;
 80009bc:	4a0f      	ldr	r2, [pc, #60]	; (80009fc <fillBufferBlack+0x90>)
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	4413      	add	r3, r2
 80009c2:	2203      	movs	r2, #3
 80009c4:	701a      	strb	r2, [r3, #0]
	buffIndex++;
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	3301      	adds	r3, #1
 80009ca:	603b      	str	r3, [r7, #0]
	for (index = 0; index < RESET_SLOTS_END; index++) {
 80009cc:	2300      	movs	r3, #0
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	e00a      	b.n	80009e8 <fillBufferBlack+0x7c>
		LEDbuffer[buffIndex] = 0;
 80009d2:	4a0a      	ldr	r2, [pc, #40]	; (80009fc <fillBufferBlack+0x90>)
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	4413      	add	r3, r2
 80009d8:	2200      	movs	r2, #0
 80009da:	701a      	strb	r2, [r3, #0]
		buffIndex++;
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	3301      	adds	r3, #1
 80009e0:	603b      	str	r3, [r7, #0]
	for (index = 0; index < RESET_SLOTS_END; index++) {
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	3301      	adds	r3, #1
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2bc7      	cmp	r3, #199	; 0xc7
 80009ec:	d9f1      	bls.n	80009d2 <fillBufferBlack+0x66>
	}
}
 80009ee:	bf00      	nop
 80009f0:	bf00      	nop
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	20004544 	.word	0x20004544

08000a00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b088      	sub	sp, #32
 8000a04:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a06:	f000 fc70 	bl	80012ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a0a:	f000 f84f 	bl	8000aac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a0e:	f000 f9cb 	bl	8000da8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a12:	f000 f99b 	bl	8000d4c <MX_DMA_Init>
  MX_ADC1_Init();
 8000a16:	f000 f88f 	bl	8000b38 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000a1a:	f000 f8f1 	bl	8000c00 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000a1e:	f000 f965 	bl	8000cec <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  ws2812_start();
 8000a22:	f7ff ff01 	bl	8000828 <ws2812_start>
  //HAL_UART_Receive_IT(&huart1, Rx_data, 19);

	uint8_t H =0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	75fb      	strb	r3, [r7, #23]
	ImageData* pacManSprite;
	IndexedImageData* IndexedSprite;
	// Déclarez une instance de Canvas
	Canvas myCanvas;
	// Initialisez la structure Canvas
	myCanvas.numCols = NUM_COLS;
 8000a2a:	2313      	movs	r3, #19
 8000a2c:	607b      	str	r3, [r7, #4]
	myCanvas.numRows = NUM_ROWS;
 8000a2e:	2305      	movs	r3, #5
 8000a30:	60bb      	str	r3, [r7, #8]
	// Allouez de la mémoire pour les pixels
	myCanvas.pixels = malloc(sizeof(Pixel) * NUM_COLS * NUM_ROWS);
 8000a32:	f240 101d 	movw	r0, #285	; 0x11d
 8000a36:	f005 fb7d 	bl	8006134 <malloc>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	60fb      	str	r3, [r7, #12]
	// Utilisez memset pour initialiser le tableau à zéro
	memset(myCanvas.pixels, 0, sizeof(Pixel) * NUM_COLS * NUM_ROWS);
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	f240 121d 	movw	r2, #285	; 0x11d
 8000a44:	2100      	movs	r1, #0
 8000a46:	4618      	mov	r0, r3
 8000a48:	f005 fb84 	bl	8006154 <memset>

	  	//switch((loop/2)%98){
	  	//	  	  case 0 : pacManSprite = &NotPickleRick; break;

	  	  //pacManSprite = &NotPickleRick;
	  	  IndexedSprite = &BadApple;
 8000a4c:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <main+0xa4>)
 8000a4e:	613b      	str	r3, [r7, #16]


	  	  //drawImage(pacManSprite, (loop/2)%98, 1, 1, &myCanvas);

	  	  drawIndexedImage(IndexedSprite, (loop/4), 1, 1, &myCanvas);
 8000a50:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <main+0xa8>)
 8000a52:	881b      	ldrh	r3, [r3, #0]
 8000a54:	089b      	lsrs	r3, r3, #2
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	4619      	mov	r1, r3
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	9300      	str	r3, [sp, #0]
 8000a5e:	2301      	movs	r3, #1
 8000a60:	2201      	movs	r2, #1
 8000a62:	6938      	ldr	r0, [r7, #16]
 8000a64:	f7ff fe14 	bl	8000690 <drawIndexedImage>



	  	  sendCanvas(&myCanvas);
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff fd30 	bl	80004d0 <sendCanvas>

	  	  if (H >= 255){
 8000a70:	7dfb      	ldrb	r3, [r7, #23]
 8000a72:	2bff      	cmp	r3, #255	; 0xff
 8000a74:	d102      	bne.n	8000a7c <main+0x7c>
	  		  H=0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	75fb      	strb	r3, [r7, #23]
 8000a7a:	e002      	b.n	8000a82 <main+0x82>

	  	  }
	  	  else{
	  		  H++;
 8000a7c:	7dfb      	ldrb	r3, [r7, #23]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	75fb      	strb	r3, [r7, #23]
	  	  }

	  	  if (loop <= 4688)	loop++;
 8000a82:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <main+0xa8>)
 8000a84:	881b      	ldrh	r3, [r3, #0]
 8000a86:	f241 2250 	movw	r2, #4688	; 0x1250
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d806      	bhi.n	8000a9c <main+0x9c>
 8000a8e:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <main+0xa8>)
 8000a90:	881b      	ldrh	r3, [r3, #0]
 8000a92:	3301      	adds	r3, #1
 8000a94:	b29a      	uxth	r2, r3
 8000a96:	4b04      	ldr	r3, [pc, #16]	; (8000aa8 <main+0xa8>)
 8000a98:	801a      	strh	r2, [r3, #0]
 8000a9a:	e7d7      	b.n	8000a4c <main+0x4c>
	  	  else loop = 0;
 8000a9c:	4b02      	ldr	r3, [pc, #8]	; (8000aa8 <main+0xa8>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	801a      	strh	r2, [r3, #0]
	  	  IndexedSprite = &BadApple;
 8000aa2:	e7d3      	b.n	8000a4c <main+0x4c>
 8000aa4:	200044ac 	.word	0x200044ac
 8000aa8:	200051b4 	.word	0x200051b4

08000aac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b096      	sub	sp, #88	; 0x58
 8000ab0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab2:	f107 0314 	add.w	r3, r7, #20
 8000ab6:	2244      	movs	r2, #68	; 0x44
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4618      	mov	r0, r3
 8000abc:	f005 fb4a 	bl	8006154 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac0:	463b      	mov	r3, r7
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]
 8000acc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ace:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ad2:	f002 f833 	bl	8002b3c <HAL_PWREx_ControlVoltageScaling>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000adc:	f000 f988 	bl	8000df0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ae4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ae8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aea:	2310      	movs	r3, #16
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000aee:	2300      	movs	r3, #0
 8000af0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af2:	f107 0314 	add.w	r3, r7, #20
 8000af6:	4618      	mov	r0, r3
 8000af8:	f002 f876 	bl	8002be8 <HAL_RCC_OscConfig>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8000b02:	f000 f975 	bl	8000df0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b06:	230f      	movs	r3, #15
 8000b08:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000b0e:	2380      	movs	r3, #128	; 0x80
 8000b10:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b12:	2300      	movs	r3, #0
 8000b14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b16:	2300      	movs	r3, #0
 8000b18:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b1a:	463b      	mov	r3, r7
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f002 fc76 	bl	8003410 <HAL_RCC_ClockConfig>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000b2a:	f000 f961 	bl	8000df0 <Error_Handler>
  }
}
 8000b2e:	bf00      	nop
 8000b30:	3758      	adds	r7, #88	; 0x58
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
	...

08000b38 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b3e:	463b      	mov	r3, r7
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	611a      	str	r2, [r3, #16]
 8000b4c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b4e:	4b29      	ldr	r3, [pc, #164]	; (8000bf4 <MX_ADC1_Init+0xbc>)
 8000b50:	4a29      	ldr	r2, [pc, #164]	; (8000bf8 <MX_ADC1_Init+0xc0>)
 8000b52:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b54:	4b27      	ldr	r3, [pc, #156]	; (8000bf4 <MX_ADC1_Init+0xbc>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b5a:	4b26      	ldr	r3, [pc, #152]	; (8000bf4 <MX_ADC1_Init+0xbc>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b60:	4b24      	ldr	r3, [pc, #144]	; (8000bf4 <MX_ADC1_Init+0xbc>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b66:	4b23      	ldr	r3, [pc, #140]	; (8000bf4 <MX_ADC1_Init+0xbc>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b6c:	4b21      	ldr	r3, [pc, #132]	; (8000bf4 <MX_ADC1_Init+0xbc>)
 8000b6e:	2204      	movs	r2, #4
 8000b70:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b72:	4b20      	ldr	r3, [pc, #128]	; (8000bf4 <MX_ADC1_Init+0xbc>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b78:	4b1e      	ldr	r3, [pc, #120]	; (8000bf4 <MX_ADC1_Init+0xbc>)
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000b7e:	4b1d      	ldr	r3, [pc, #116]	; (8000bf4 <MX_ADC1_Init+0xbc>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b84:	4b1b      	ldr	r3, [pc, #108]	; (8000bf4 <MX_ADC1_Init+0xbc>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b8c:	4b19      	ldr	r3, [pc, #100]	; (8000bf4 <MX_ADC1_Init+0xbc>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b92:	4b18      	ldr	r3, [pc, #96]	; (8000bf4 <MX_ADC1_Init+0xbc>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b98:	4b16      	ldr	r3, [pc, #88]	; (8000bf4 <MX_ADC1_Init+0xbc>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ba0:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <MX_ADC1_Init+0xbc>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000ba6:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <MX_ADC1_Init+0xbc>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bae:	4811      	ldr	r0, [pc, #68]	; (8000bf4 <MX_ADC1_Init+0xbc>)
 8000bb0:	f000 fd9c 	bl	80016ec <HAL_ADC_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000bba:	f000 f919 	bl	8000df0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000bbe:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <MX_ADC1_Init+0xc4>)
 8000bc0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bc2:	2306      	movs	r3, #6
 8000bc4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bca:	237f      	movs	r3, #127	; 0x7f
 8000bcc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bce:	2304      	movs	r3, #4
 8000bd0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bd6:	463b      	mov	r3, r7
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4806      	ldr	r0, [pc, #24]	; (8000bf4 <MX_ADC1_Init+0xbc>)
 8000bdc:	f000 fece 	bl	800197c <HAL_ADC_ConfigChannel>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000be6:	f000 f903 	bl	8000df0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bea:	bf00      	nop
 8000bec:	3718      	adds	r7, #24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20004fa8 	.word	0x20004fa8
 8000bf8:	50040000 	.word	0x50040000
 8000bfc:	32601000 	.word	0x32601000

08000c00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08e      	sub	sp, #56	; 0x38
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c14:	f107 031c 	add.w	r3, r7, #28
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c20:	463b      	mov	r3, r7
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]
 8000c28:	609a      	str	r2, [r3, #8]
 8000c2a:	60da      	str	r2, [r3, #12]
 8000c2c:	611a      	str	r2, [r3, #16]
 8000c2e:	615a      	str	r2, [r3, #20]
 8000c30:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c32:	4b2d      	ldr	r3, [pc, #180]	; (8000ce8 <MX_TIM2_Init+0xe8>)
 8000c34:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c38:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c3a:	4b2b      	ldr	r3, [pc, #172]	; (8000ce8 <MX_TIM2_Init+0xe8>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c40:	4b29      	ldr	r3, [pc, #164]	; (8000ce8 <MX_TIM2_Init+0xe8>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 8000c46:	4b28      	ldr	r3, [pc, #160]	; (8000ce8 <MX_TIM2_Init+0xe8>)
 8000c48:	2209      	movs	r2, #9
 8000c4a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c4c:	4b26      	ldr	r3, [pc, #152]	; (8000ce8 <MX_TIM2_Init+0xe8>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c52:	4b25      	ldr	r3, [pc, #148]	; (8000ce8 <MX_TIM2_Init+0xe8>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c58:	4823      	ldr	r0, [pc, #140]	; (8000ce8 <MX_TIM2_Init+0xe8>)
 8000c5a:	f003 f8e5 	bl	8003e28 <HAL_TIM_Base_Init>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000c64:	f000 f8c4 	bl	8000df0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c6c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c72:	4619      	mov	r1, r3
 8000c74:	481c      	ldr	r0, [pc, #112]	; (8000ce8 <MX_TIM2_Init+0xe8>)
 8000c76:	f003 fc9b 	bl	80045b0 <HAL_TIM_ConfigClockSource>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000c80:	f000 f8b6 	bl	8000df0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c84:	4818      	ldr	r0, [pc, #96]	; (8000ce8 <MX_TIM2_Init+0xe8>)
 8000c86:	f003 f926 	bl	8003ed6 <HAL_TIM_PWM_Init>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000c90:	f000 f8ae 	bl	8000df0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c94:	2300      	movs	r3, #0
 8000c96:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c9c:	f107 031c 	add.w	r3, r7, #28
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4811      	ldr	r0, [pc, #68]	; (8000ce8 <MX_TIM2_Init+0xe8>)
 8000ca4:	f004 f9de 	bl	8005064 <HAL_TIMEx_MasterConfigSynchronization>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000cae:	f000 f89f 	bl	8000df0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cb2:	2360      	movs	r3, #96	; 0x60
 8000cb4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cc2:	463b      	mov	r3, r7
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4807      	ldr	r0, [pc, #28]	; (8000ce8 <MX_TIM2_Init+0xe8>)
 8000cca:	f003 fb5d 	bl	8004388 <HAL_TIM_PWM_ConfigChannel>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000cd4:	f000 f88c 	bl	8000df0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000cd8:	4803      	ldr	r0, [pc, #12]	; (8000ce8 <MX_TIM2_Init+0xe8>)
 8000cda:	f000 f981 	bl	8000fe0 <HAL_TIM_MspPostInit>

}
 8000cde:	bf00      	nop
 8000ce0:	3738      	adds	r7, #56	; 0x38
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20005054 	.word	0x20005054

08000cec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cf0:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <MX_USART1_UART_Init+0x54>)
 8000cf2:	4a14      	ldr	r2, [pc, #80]	; (8000d44 <MX_USART1_UART_Init+0x58>)
 8000cf4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 250000;
 8000cf6:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <MX_USART1_UART_Init+0x54>)
 8000cf8:	4a13      	ldr	r2, [pc, #76]	; (8000d48 <MX_USART1_UART_Init+0x5c>)
 8000cfa:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cfc:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <MX_USART1_UART_Init+0x54>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d02:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <MX_USART1_UART_Init+0x54>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d08:	4b0d      	ldr	r3, [pc, #52]	; (8000d40 <MX_USART1_UART_Init+0x54>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d0e:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <MX_USART1_UART_Init+0x54>)
 8000d10:	220c      	movs	r2, #12
 8000d12:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d14:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <MX_USART1_UART_Init+0x54>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d1a:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <MX_USART1_UART_Init+0x54>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <MX_USART1_UART_Init+0x54>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d26:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <MX_USART1_UART_Init+0x54>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d2c:	4804      	ldr	r0, [pc, #16]	; (8000d40 <MX_USART1_UART_Init+0x54>)
 8000d2e:	f004 f9ff 	bl	8005130 <HAL_UART_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 8000d38:	f000 f85a 	bl	8000df0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	200050e8 	.word	0x200050e8
 8000d44:	40013800 	.word	0x40013800
 8000d48:	0003d090 	.word	0x0003d090

08000d4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d52:	4b14      	ldr	r3, [pc, #80]	; (8000da4 <MX_DMA_Init+0x58>)
 8000d54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d56:	4a13      	ldr	r2, [pc, #76]	; (8000da4 <MX_DMA_Init+0x58>)
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	6493      	str	r3, [r2, #72]	; 0x48
 8000d5e:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <MX_DMA_Init+0x58>)
 8000d60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	200b      	movs	r0, #11
 8000d70:	f001 fabf 	bl	80022f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d74:	200b      	movs	r0, #11
 8000d76:	f001 fad8 	bl	800232a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	200e      	movs	r0, #14
 8000d80:	f001 fab7 	bl	80022f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000d84:	200e      	movs	r0, #14
 8000d86:	f001 fad0 	bl	800232a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	200f      	movs	r0, #15
 8000d90:	f001 faaf 	bl	80022f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000d94:	200f      	movs	r0, #15
 8000d96:	f001 fac8 	bl	800232a <HAL_NVIC_EnableIRQ>

}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40021000 	.word	0x40021000

08000da8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dae:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <MX_GPIO_Init+0x44>)
 8000db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db2:	4a0e      	ldr	r2, [pc, #56]	; (8000dec <MX_GPIO_Init+0x44>)
 8000db4:	f043 0304 	orr.w	r3, r3, #4
 8000db8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <MX_GPIO_Init+0x44>)
 8000dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dbe:	f003 0304 	and.w	r3, r3, #4
 8000dc2:	607b      	str	r3, [r7, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc6:	4b09      	ldr	r3, [pc, #36]	; (8000dec <MX_GPIO_Init+0x44>)
 8000dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dca:	4a08      	ldr	r2, [pc, #32]	; (8000dec <MX_GPIO_Init+0x44>)
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd2:	4b06      	ldr	r3, [pc, #24]	; (8000dec <MX_GPIO_Init+0x44>)
 8000dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	603b      	str	r3, [r7, #0]
 8000ddc:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	40021000 	.word	0x40021000

08000df0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000df4:	b672      	cpsid	i
}
 8000df6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <Error_Handler+0x8>
	...

08000dfc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e02:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <HAL_MspInit+0x44>)
 8000e04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e06:	4a0e      	ldr	r2, [pc, #56]	; (8000e40 <HAL_MspInit+0x44>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	6613      	str	r3, [r2, #96]	; 0x60
 8000e0e:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <HAL_MspInit+0x44>)
 8000e10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	607b      	str	r3, [r7, #4]
 8000e18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e1a:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <HAL_MspInit+0x44>)
 8000e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e1e:	4a08      	ldr	r2, [pc, #32]	; (8000e40 <HAL_MspInit+0x44>)
 8000e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e24:	6593      	str	r3, [r2, #88]	; 0x58
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_MspInit+0x44>)
 8000e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e2e:	603b      	str	r3, [r7, #0]
 8000e30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e32:	bf00      	nop
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	40021000 	.word	0x40021000

08000e44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b09e      	sub	sp, #120	; 0x78
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e5c:	f107 0310 	add.w	r3, r7, #16
 8000e60:	2254      	movs	r2, #84	; 0x54
 8000e62:	2100      	movs	r1, #0
 8000e64:	4618      	mov	r0, r3
 8000e66:	f005 f975 	bl	8006154 <memset>
  if(hadc->Instance==ADC1)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a33      	ldr	r2, [pc, #204]	; (8000f3c <HAL_ADC_MspInit+0xf8>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d15f      	bne.n	8000f34 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e74:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e78:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000e7a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000e7e:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e80:	f107 0310 	add.w	r3, r7, #16
 8000e84:	4618      	mov	r0, r3
 8000e86:	f002 fce7 	bl	8003858 <HAL_RCCEx_PeriphCLKConfig>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000e90:	f7ff ffae 	bl	8000df0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000e94:	4b2a      	ldr	r3, [pc, #168]	; (8000f40 <HAL_ADC_MspInit+0xfc>)
 8000e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e98:	4a29      	ldr	r2, [pc, #164]	; (8000f40 <HAL_ADC_MspInit+0xfc>)
 8000e9a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ea0:	4b27      	ldr	r3, [pc, #156]	; (8000f40 <HAL_ADC_MspInit+0xfc>)
 8000ea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eac:	4b24      	ldr	r3, [pc, #144]	; (8000f40 <HAL_ADC_MspInit+0xfc>)
 8000eae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb0:	4a23      	ldr	r2, [pc, #140]	; (8000f40 <HAL_ADC_MspInit+0xfc>)
 8000eb2:	f043 0301 	orr.w	r3, r3, #1
 8000eb6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eb8:	4b21      	ldr	r3, [pc, #132]	; (8000f40 <HAL_ADC_MspInit+0xfc>)
 8000eba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ebc:	f003 0301 	and.w	r3, r3, #1
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ec4:	2380      	movs	r3, #128	; 0x80
 8000ec6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ec8:	230b      	movs	r3, #11
 8000eca:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eda:	f001 fcb7 	bl	800284c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000ede:	4b19      	ldr	r3, [pc, #100]	; (8000f44 <HAL_ADC_MspInit+0x100>)
 8000ee0:	4a19      	ldr	r2, [pc, #100]	; (8000f48 <HAL_ADC_MspInit+0x104>)
 8000ee2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000ee4:	4b17      	ldr	r3, [pc, #92]	; (8000f44 <HAL_ADC_MspInit+0x100>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000eea:	4b16      	ldr	r3, [pc, #88]	; (8000f44 <HAL_ADC_MspInit+0x100>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ef0:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <HAL_ADC_MspInit+0x100>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ef6:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <HAL_ADC_MspInit+0x100>)
 8000ef8:	2280      	movs	r2, #128	; 0x80
 8000efa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000efc:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <HAL_ADC_MspInit+0x100>)
 8000efe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f02:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f04:	4b0f      	ldr	r3, [pc, #60]	; (8000f44 <HAL_ADC_MspInit+0x100>)
 8000f06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f0a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f0c:	4b0d      	ldr	r3, [pc, #52]	; (8000f44 <HAL_ADC_MspInit+0x100>)
 8000f0e:	2220      	movs	r2, #32
 8000f10:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f12:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <HAL_ADC_MspInit+0x100>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f18:	480a      	ldr	r0, [pc, #40]	; (8000f44 <HAL_ADC_MspInit+0x100>)
 8000f1a:	f001 fa21 	bl	8002360 <HAL_DMA_Init>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8000f24:	f7ff ff64 	bl	8000df0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4a06      	ldr	r2, [pc, #24]	; (8000f44 <HAL_ADC_MspInit+0x100>)
 8000f2c:	64da      	str	r2, [r3, #76]	; 0x4c
 8000f2e:	4a05      	ldr	r2, [pc, #20]	; (8000f44 <HAL_ADC_MspInit+0x100>)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f34:	bf00      	nop
 8000f36:	3778      	adds	r7, #120	; 0x78
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	50040000 	.word	0x50040000
 8000f40:	40021000 	.word	0x40021000
 8000f44:	2000500c 	.word	0x2000500c
 8000f48:	40020008 	.word	0x40020008

08000f4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f5c:	d136      	bne.n	8000fcc <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f5e:	4b1d      	ldr	r3, [pc, #116]	; (8000fd4 <HAL_TIM_Base_MspInit+0x88>)
 8000f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f62:	4a1c      	ldr	r2, [pc, #112]	; (8000fd4 <HAL_TIM_Base_MspInit+0x88>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6593      	str	r3, [r2, #88]	; 0x58
 8000f6a:	4b1a      	ldr	r3, [pc, #104]	; (8000fd4 <HAL_TIM_Base_MspInit+0x88>)
 8000f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8000f76:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <HAL_TIM_Base_MspInit+0x8c>)
 8000f78:	4a18      	ldr	r2, [pc, #96]	; (8000fdc <HAL_TIM_Base_MspInit+0x90>)
 8000f7a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_4;
 8000f7c:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <HAL_TIM_Base_MspInit+0x8c>)
 8000f7e:	2204      	movs	r2, #4
 8000f80:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f82:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <HAL_TIM_Base_MspInit+0x8c>)
 8000f84:	2210      	movs	r2, #16
 8000f86:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f88:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <HAL_TIM_Base_MspInit+0x8c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000f8e:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <HAL_TIM_Base_MspInit+0x8c>)
 8000f90:	2280      	movs	r2, #128	; 0x80
 8000f92:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f94:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <HAL_TIM_Base_MspInit+0x8c>)
 8000f96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f9a:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f9c:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <HAL_TIM_Base_MspInit+0x8c>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8000fa2:	4b0d      	ldr	r3, [pc, #52]	; (8000fd8 <HAL_TIM_Base_MspInit+0x8c>)
 8000fa4:	2220      	movs	r2, #32
 8000fa6:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8000fa8:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <HAL_TIM_Base_MspInit+0x8c>)
 8000faa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8000fb0:	4809      	ldr	r0, [pc, #36]	; (8000fd8 <HAL_TIM_Base_MspInit+0x8c>)
 8000fb2:	f001 f9d5 	bl	8002360 <HAL_DMA_Init>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 8000fbc:	f7ff ff18 	bl	8000df0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4a05      	ldr	r2, [pc, #20]	; (8000fd8 <HAL_TIM_Base_MspInit+0x8c>)
 8000fc4:	625a      	str	r2, [r3, #36]	; 0x24
 8000fc6:	4a04      	ldr	r2, [pc, #16]	; (8000fd8 <HAL_TIM_Base_MspInit+0x8c>)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000fcc:	bf00      	nop
 8000fce:	3710      	adds	r7, #16
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	200050a0 	.word	0x200050a0
 8000fdc:	40020058 	.word	0x40020058

08000fe0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b088      	sub	sp, #32
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe8:	f107 030c 	add.w	r3, r7, #12
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001000:	d11c      	bne.n	800103c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001002:	4b10      	ldr	r3, [pc, #64]	; (8001044 <HAL_TIM_MspPostInit+0x64>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001006:	4a0f      	ldr	r2, [pc, #60]	; (8001044 <HAL_TIM_MspPostInit+0x64>)
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800100e:	4b0d      	ldr	r3, [pc, #52]	; (8001044 <HAL_TIM_MspPostInit+0x64>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	60bb      	str	r3, [r7, #8]
 8001018:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800101a:	2301      	movs	r3, #1
 800101c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101e:	2302      	movs	r3, #2
 8001020:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	2300      	movs	r3, #0
 8001028:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800102a:	2301      	movs	r3, #1
 800102c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102e:	f107 030c 	add.w	r3, r7, #12
 8001032:	4619      	mov	r1, r3
 8001034:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001038:	f001 fc08 	bl	800284c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800103c:	bf00      	nop
 800103e:	3720      	adds	r7, #32
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40021000 	.word	0x40021000

08001048 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b09e      	sub	sp, #120	; 0x78
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001050:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001060:	f107 0310 	add.w	r3, r7, #16
 8001064:	2254      	movs	r2, #84	; 0x54
 8001066:	2100      	movs	r1, #0
 8001068:	4618      	mov	r0, r3
 800106a:	f005 f873 	bl	8006154 <memset>
  if(huart->Instance==USART1)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a38      	ldr	r2, [pc, #224]	; (8001154 <HAL_UART_MspInit+0x10c>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d169      	bne.n	800114c <HAL_UART_MspInit+0x104>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001078:	2301      	movs	r3, #1
 800107a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800107c:	2300      	movs	r3, #0
 800107e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001080:	f107 0310 	add.w	r3, r7, #16
 8001084:	4618      	mov	r0, r3
 8001086:	f002 fbe7 	bl	8003858 <HAL_RCCEx_PeriphCLKConfig>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001090:	f7ff feae 	bl	8000df0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001094:	4b30      	ldr	r3, [pc, #192]	; (8001158 <HAL_UART_MspInit+0x110>)
 8001096:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001098:	4a2f      	ldr	r2, [pc, #188]	; (8001158 <HAL_UART_MspInit+0x110>)
 800109a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800109e:	6613      	str	r3, [r2, #96]	; 0x60
 80010a0:	4b2d      	ldr	r3, [pc, #180]	; (8001158 <HAL_UART_MspInit+0x110>)
 80010a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ac:	4b2a      	ldr	r3, [pc, #168]	; (8001158 <HAL_UART_MspInit+0x110>)
 80010ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b0:	4a29      	ldr	r2, [pc, #164]	; (8001158 <HAL_UART_MspInit+0x110>)
 80010b2:	f043 0301 	orr.w	r3, r3, #1
 80010b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010b8:	4b27      	ldr	r3, [pc, #156]	; (8001158 <HAL_UART_MspInit+0x110>)
 80010ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010bc:	f003 0301 	and.w	r3, r3, #1
 80010c0:	60bb      	str	r3, [r7, #8]
 80010c2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80010c4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80010c8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ca:	2302      	movs	r3, #2
 80010cc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d2:	2303      	movs	r3, #3
 80010d4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010d6:	2307      	movs	r3, #7
 80010d8:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010da:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010de:	4619      	mov	r1, r3
 80010e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e4:	f001 fbb2 	bl	800284c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80010e8:	4b1c      	ldr	r3, [pc, #112]	; (800115c <HAL_UART_MspInit+0x114>)
 80010ea:	4a1d      	ldr	r2, [pc, #116]	; (8001160 <HAL_UART_MspInit+0x118>)
 80010ec:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 80010ee:	4b1b      	ldr	r3, [pc, #108]	; (800115c <HAL_UART_MspInit+0x114>)
 80010f0:	2202      	movs	r2, #2
 80010f2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010f4:	4b19      	ldr	r3, [pc, #100]	; (800115c <HAL_UART_MspInit+0x114>)
 80010f6:	2210      	movs	r2, #16
 80010f8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010fa:	4b18      	ldr	r3, [pc, #96]	; (800115c <HAL_UART_MspInit+0x114>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001100:	4b16      	ldr	r3, [pc, #88]	; (800115c <HAL_UART_MspInit+0x114>)
 8001102:	2280      	movs	r2, #128	; 0x80
 8001104:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001106:	4b15      	ldr	r3, [pc, #84]	; (800115c <HAL_UART_MspInit+0x114>)
 8001108:	2200      	movs	r2, #0
 800110a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800110c:	4b13      	ldr	r3, [pc, #76]	; (800115c <HAL_UART_MspInit+0x114>)
 800110e:	2200      	movs	r2, #0
 8001110:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001112:	4b12      	ldr	r3, [pc, #72]	; (800115c <HAL_UART_MspInit+0x114>)
 8001114:	2200      	movs	r2, #0
 8001116:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001118:	4b10      	ldr	r3, [pc, #64]	; (800115c <HAL_UART_MspInit+0x114>)
 800111a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800111e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001120:	480e      	ldr	r0, [pc, #56]	; (800115c <HAL_UART_MspInit+0x114>)
 8001122:	f001 f91d 	bl	8002360 <HAL_DMA_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 800112c:	f7ff fe60 	bl	8000df0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4a0a      	ldr	r2, [pc, #40]	; (800115c <HAL_UART_MspInit+0x114>)
 8001134:	66da      	str	r2, [r3, #108]	; 0x6c
 8001136:	4a09      	ldr	r2, [pc, #36]	; (800115c <HAL_UART_MspInit+0x114>)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800113c:	2200      	movs	r2, #0
 800113e:	2100      	movs	r1, #0
 8001140:	2025      	movs	r0, #37	; 0x25
 8001142:	f001 f8d6 	bl	80022f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001146:	2025      	movs	r0, #37	; 0x25
 8001148:	f001 f8ef 	bl	800232a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800114c:	bf00      	nop
 800114e:	3778      	adds	r7, #120	; 0x78
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40013800 	.word	0x40013800
 8001158:	40021000 	.word	0x40021000
 800115c:	2000516c 	.word	0x2000516c
 8001160:	40020044 	.word	0x40020044

08001164 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001168:	e7fe      	b.n	8001168 <NMI_Handler+0x4>

0800116a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800116e:	e7fe      	b.n	800116e <HardFault_Handler+0x4>

08001170 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001174:	e7fe      	b.n	8001174 <MemManage_Handler+0x4>

08001176 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800117a:	e7fe      	b.n	800117a <BusFault_Handler+0x4>

0800117c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001180:	e7fe      	b.n	8001180 <UsageFault_Handler+0x4>

08001182 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011b0:	f000 f8f0 	bl	8001394 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80011bc:	4802      	ldr	r0, [pc, #8]	; (80011c8 <DMA1_Channel1_IRQHandler+0x10>)
 80011be:	f001 fa66 	bl	800268e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	2000500c 	.word	0x2000500c

080011cc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80011d0:	4802      	ldr	r0, [pc, #8]	; (80011dc <DMA1_Channel4_IRQHandler+0x10>)
 80011d2:	f001 fa5c 	bl	800268e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	2000516c 	.word	0x2000516c

080011e0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80011e4:	4802      	ldr	r0, [pc, #8]	; (80011f0 <DMA1_Channel5_IRQHandler+0x10>)
 80011e6:	f001 fa52 	bl	800268e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	200050a0 	.word	0x200050a0

080011f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80011f8:	4802      	ldr	r0, [pc, #8]	; (8001204 <USART1_IRQHandler+0x10>)
 80011fa:	f003 ffe7 	bl	80051cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	200050e8 	.word	0x200050e8

08001208 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001210:	4a14      	ldr	r2, [pc, #80]	; (8001264 <_sbrk+0x5c>)
 8001212:	4b15      	ldr	r3, [pc, #84]	; (8001268 <_sbrk+0x60>)
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800121c:	4b13      	ldr	r3, [pc, #76]	; (800126c <_sbrk+0x64>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d102      	bne.n	800122a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001224:	4b11      	ldr	r3, [pc, #68]	; (800126c <_sbrk+0x64>)
 8001226:	4a12      	ldr	r2, [pc, #72]	; (8001270 <_sbrk+0x68>)
 8001228:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800122a:	4b10      	ldr	r3, [pc, #64]	; (800126c <_sbrk+0x64>)
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4413      	add	r3, r2
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	429a      	cmp	r2, r3
 8001236:	d207      	bcs.n	8001248 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001238:	f004 ff52 	bl	80060e0 <__errno>
 800123c:	4603      	mov	r3, r0
 800123e:	220c      	movs	r2, #12
 8001240:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001242:	f04f 33ff 	mov.w	r3, #4294967295
 8001246:	e009      	b.n	800125c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001248:	4b08      	ldr	r3, [pc, #32]	; (800126c <_sbrk+0x64>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800124e:	4b07      	ldr	r3, [pc, #28]	; (800126c <_sbrk+0x64>)
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4413      	add	r3, r2
 8001256:	4a05      	ldr	r2, [pc, #20]	; (800126c <_sbrk+0x64>)
 8001258:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800125a:	68fb      	ldr	r3, [r7, #12]
}
 800125c:	4618      	mov	r0, r3
 800125e:	3718      	adds	r7, #24
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20010000 	.word	0x20010000
 8001268:	00000400 	.word	0x00000400
 800126c:	200051b8 	.word	0x200051b8
 8001270:	200051d0 	.word	0x200051d0

08001274 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001278:	4b06      	ldr	r3, [pc, #24]	; (8001294 <SystemInit+0x20>)
 800127a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800127e:	4a05      	ldr	r2, [pc, #20]	; (8001294 <SystemInit+0x20>)
 8001280:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001284:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001298:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012d0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800129c:	f7ff ffea 	bl	8001274 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012a0:	480c      	ldr	r0, [pc, #48]	; (80012d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80012a2:	490d      	ldr	r1, [pc, #52]	; (80012d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012a4:	4a0d      	ldr	r2, [pc, #52]	; (80012dc <LoopForever+0xe>)
  movs r3, #0
 80012a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a8:	e002      	b.n	80012b0 <LoopCopyDataInit>

080012aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ae:	3304      	adds	r3, #4

080012b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012b4:	d3f9      	bcc.n	80012aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012b6:	4a0a      	ldr	r2, [pc, #40]	; (80012e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012b8:	4c0a      	ldr	r4, [pc, #40]	; (80012e4 <LoopForever+0x16>)
  movs r3, #0
 80012ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012bc:	e001      	b.n	80012c2 <LoopFillZerobss>

080012be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c0:	3204      	adds	r2, #4

080012c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012c4:	d3fb      	bcc.n	80012be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012c6:	f004 ff11 	bl	80060ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012ca:	f7ff fb99 	bl	8000a00 <main>

080012ce <LoopForever>:

LoopForever:
    b LoopForever
 80012ce:	e7fe      	b.n	80012ce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80012d0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80012d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012d8:	20004528 	.word	0x20004528
  ldr r2, =_sidata
 80012dc:	080063d4 	.word	0x080063d4
  ldr r2, =_sbss
 80012e0:	20004528 	.word	0x20004528
  ldr r4, =_ebss
 80012e4:	200051d0 	.word	0x200051d0

080012e8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012e8:	e7fe      	b.n	80012e8 <ADC1_IRQHandler>

080012ea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b082      	sub	sp, #8
 80012ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012f0:	2300      	movs	r3, #0
 80012f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f4:	2003      	movs	r0, #3
 80012f6:	f000 fff1 	bl	80022dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012fa:	2000      	movs	r0, #0
 80012fc:	f000 f80e 	bl	800131c <HAL_InitTick>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d002      	beq.n	800130c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	71fb      	strb	r3, [r7, #7]
 800130a:	e001      	b.n	8001310 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800130c:	f7ff fd76 	bl	8000dfc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001310:	79fb      	ldrb	r3, [r7, #7]
}
 8001312:	4618      	mov	r0, r3
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
	...

0800131c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001324:	2300      	movs	r3, #0
 8001326:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001328:	4b17      	ldr	r3, [pc, #92]	; (8001388 <HAL_InitTick+0x6c>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d023      	beq.n	8001378 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001330:	4b16      	ldr	r3, [pc, #88]	; (800138c <HAL_InitTick+0x70>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	4b14      	ldr	r3, [pc, #80]	; (8001388 <HAL_InitTick+0x6c>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	4619      	mov	r1, r3
 800133a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800133e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001342:	fbb2 f3f3 	udiv	r3, r2, r3
 8001346:	4618      	mov	r0, r3
 8001348:	f000 fffd 	bl	8002346 <HAL_SYSTICK_Config>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d10f      	bne.n	8001372 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2b0f      	cmp	r3, #15
 8001356:	d809      	bhi.n	800136c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001358:	2200      	movs	r2, #0
 800135a:	6879      	ldr	r1, [r7, #4]
 800135c:	f04f 30ff 	mov.w	r0, #4294967295
 8001360:	f000 ffc7 	bl	80022f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001364:	4a0a      	ldr	r2, [pc, #40]	; (8001390 <HAL_InitTick+0x74>)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6013      	str	r3, [r2, #0]
 800136a:	e007      	b.n	800137c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	73fb      	strb	r3, [r7, #15]
 8001370:	e004      	b.n	800137c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	73fb      	strb	r3, [r7, #15]
 8001376:	e001      	b.n	800137c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800137c:	7bfb      	ldrb	r3, [r7, #15]
}
 800137e:	4618      	mov	r0, r3
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	200044c0 	.word	0x200044c0
 800138c:	200044b8 	.word	0x200044b8
 8001390:	200044bc 	.word	0x200044bc

08001394 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001398:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <HAL_IncTick+0x20>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	461a      	mov	r2, r3
 800139e:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <HAL_IncTick+0x24>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4413      	add	r3, r2
 80013a4:	4a04      	ldr	r2, [pc, #16]	; (80013b8 <HAL_IncTick+0x24>)
 80013a6:	6013      	str	r3, [r2, #0]
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	200044c0 	.word	0x200044c0
 80013b8:	200051bc 	.word	0x200051bc

080013bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  return uwTick;
 80013c0:	4b03      	ldr	r3, [pc, #12]	; (80013d0 <HAL_GetTick+0x14>)
 80013c2:	681b      	ldr	r3, [r3, #0]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	200051bc 	.word	0x200051bc

080013d4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	431a      	orrs	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	609a      	str	r2, [r3, #8]
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80013fa:	b480      	push	{r7}
 80013fc:	b083      	sub	sp, #12
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
 8001402:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	431a      	orrs	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	609a      	str	r2, [r3, #8]
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001430:	4618      	mov	r0, r3
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800143c:	b480      	push	{r7}
 800143e:	b087      	sub	sp, #28
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
 8001448:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	3360      	adds	r3, #96	; 0x60
 800144e:	461a      	mov	r2, r3
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	4413      	add	r3, r2
 8001456:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	4b08      	ldr	r3, [pc, #32]	; (8001480 <LL_ADC_SetOffset+0x44>)
 800145e:	4013      	ands	r3, r2
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001466:	683a      	ldr	r2, [r7, #0]
 8001468:	430a      	orrs	r2, r1
 800146a:	4313      	orrs	r3, r2
 800146c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001474:	bf00      	nop
 8001476:	371c      	adds	r7, #28
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	03fff000 	.word	0x03fff000

08001484 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	3360      	adds	r3, #96	; 0x60
 8001492:	461a      	mov	r2, r3
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	4413      	add	r3, r2
 800149a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b087      	sub	sp, #28
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	3360      	adds	r3, #96	; 0x60
 80014c0:	461a      	mov	r2, r3
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	4413      	add	r3, r2
 80014c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	431a      	orrs	r2, r3
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80014da:	bf00      	nop
 80014dc:	371c      	adds	r7, #28
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b087      	sub	sp, #28
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	60f8      	str	r0, [r7, #12]
 80014ee:	60b9      	str	r1, [r7, #8]
 80014f0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	3330      	adds	r3, #48	; 0x30
 80014f6:	461a      	mov	r2, r3
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	0a1b      	lsrs	r3, r3, #8
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	f003 030c 	and.w	r3, r3, #12
 8001502:	4413      	add	r3, r2
 8001504:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	f003 031f 	and.w	r3, r3, #31
 8001510:	211f      	movs	r1, #31
 8001512:	fa01 f303 	lsl.w	r3, r1, r3
 8001516:	43db      	mvns	r3, r3
 8001518:	401a      	ands	r2, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	0e9b      	lsrs	r3, r3, #26
 800151e:	f003 011f 	and.w	r1, r3, #31
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	f003 031f 	and.w	r3, r3, #31
 8001528:	fa01 f303 	lsl.w	r3, r1, r3
 800152c:	431a      	orrs	r2, r3
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001532:	bf00      	nop
 8001534:	371c      	adds	r7, #28
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr

0800153e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800153e:	b480      	push	{r7}
 8001540:	b087      	sub	sp, #28
 8001542:	af00      	add	r7, sp, #0
 8001544:	60f8      	str	r0, [r7, #12]
 8001546:	60b9      	str	r1, [r7, #8]
 8001548:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	3314      	adds	r3, #20
 800154e:	461a      	mov	r2, r3
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	0e5b      	lsrs	r3, r3, #25
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	f003 0304 	and.w	r3, r3, #4
 800155a:	4413      	add	r3, r2
 800155c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	0d1b      	lsrs	r3, r3, #20
 8001566:	f003 031f 	and.w	r3, r3, #31
 800156a:	2107      	movs	r1, #7
 800156c:	fa01 f303 	lsl.w	r3, r1, r3
 8001570:	43db      	mvns	r3, r3
 8001572:	401a      	ands	r2, r3
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	0d1b      	lsrs	r3, r3, #20
 8001578:	f003 031f 	and.w	r3, r3, #31
 800157c:	6879      	ldr	r1, [r7, #4]
 800157e:	fa01 f303 	lsl.w	r3, r1, r3
 8001582:	431a      	orrs	r2, r3
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001588:	bf00      	nop
 800158a:	371c      	adds	r7, #28
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015ac:	43db      	mvns	r3, r3
 80015ae:	401a      	ands	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f003 0318 	and.w	r3, r3, #24
 80015b6:	4908      	ldr	r1, [pc, #32]	; (80015d8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80015b8:	40d9      	lsrs	r1, r3
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	400b      	ands	r3, r1
 80015be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015c2:	431a      	orrs	r2, r3
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80015ca:	bf00      	nop
 80015cc:	3714      	adds	r7, #20
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	0007ffff 	.word	0x0007ffff

080015dc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80015ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	6093      	str	r3, [r2, #8]
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001610:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001614:	d101      	bne.n	800161a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001616:	2301      	movs	r3, #1
 8001618:	e000      	b.n	800161c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001638:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800163c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001660:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001664:	d101      	bne.n	800166a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001666:	2301      	movs	r3, #1
 8001668:	e000      	b.n	800166c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800166a:	2300      	movs	r3, #0
}
 800166c:	4618      	mov	r0, r3
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	2b01      	cmp	r3, #1
 800168a:	d101      	bne.n	8001690 <LL_ADC_IsEnabled+0x18>
 800168c:	2301      	movs	r3, #1
 800168e:	e000      	b.n	8001692 <LL_ADC_IsEnabled+0x1a>
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800169e:	b480      	push	{r7}
 80016a0:	b083      	sub	sp, #12
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f003 0304 	and.w	r3, r3, #4
 80016ae:	2b04      	cmp	r3, #4
 80016b0:	d101      	bne.n	80016b6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80016b2:	2301      	movs	r3, #1
 80016b4:	e000      	b.n	80016b8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f003 0308 	and.w	r3, r3, #8
 80016d4:	2b08      	cmp	r3, #8
 80016d6:	d101      	bne.n	80016dc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80016d8:	2301      	movs	r3, #1
 80016da:	e000      	b.n	80016de <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
	...

080016ec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b088      	sub	sp, #32
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016f4:	2300      	movs	r3, #0
 80016f6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e12c      	b.n	8001960 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001710:	2b00      	cmp	r3, #0
 8001712:	d109      	bne.n	8001728 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f7ff fb95 	bl	8000e44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff ff67 	bl	8001600 <LL_ADC_IsDeepPowerDownEnabled>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d004      	beq.n	8001742 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff ff4d 	bl	80015dc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff ff82 	bl	8001650 <LL_ADC_IsInternalRegulatorEnabled>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d115      	bne.n	800177e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff ff66 	bl	8001628 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800175c:	4b82      	ldr	r3, [pc, #520]	; (8001968 <HAL_ADC_Init+0x27c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	099b      	lsrs	r3, r3, #6
 8001762:	4a82      	ldr	r2, [pc, #520]	; (800196c <HAL_ADC_Init+0x280>)
 8001764:	fba2 2303 	umull	r2, r3, r2, r3
 8001768:	099b      	lsrs	r3, r3, #6
 800176a:	3301      	adds	r3, #1
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001770:	e002      	b.n	8001778 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	3b01      	subs	r3, #1
 8001776:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1f9      	bne.n	8001772 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff ff64 	bl	8001650 <LL_ADC_IsInternalRegulatorEnabled>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d10d      	bne.n	80017aa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001792:	f043 0210 	orr.w	r2, r3, #16
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800179e:	f043 0201 	orr.w	r2, r3, #1
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff ff75 	bl	800169e <LL_ADC_REG_IsConversionOngoing>
 80017b4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ba:	f003 0310 	and.w	r3, r3, #16
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f040 80c5 	bne.w	800194e <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	f040 80c1 	bne.w	800194e <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017d0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80017d4:	f043 0202 	orr.w	r2, r3, #2
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff ff49 	bl	8001678 <LL_ADC_IsEnabled>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d10b      	bne.n	8001804 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80017ec:	4860      	ldr	r0, [pc, #384]	; (8001970 <HAL_ADC_Init+0x284>)
 80017ee:	f7ff ff43 	bl	8001678 <LL_ADC_IsEnabled>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d105      	bne.n	8001804 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	4619      	mov	r1, r3
 80017fe:	485d      	ldr	r0, [pc, #372]	; (8001974 <HAL_ADC_Init+0x288>)
 8001800:	f7ff fde8 	bl	80013d4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	7e5b      	ldrb	r3, [r3, #25]
 8001808:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800180e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001814:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800181a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001822:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001824:	4313      	orrs	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d106      	bne.n	8001840 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001836:	3b01      	subs	r3, #1
 8001838:	045b      	lsls	r3, r3, #17
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4313      	orrs	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001844:	2b00      	cmp	r3, #0
 8001846:	d009      	beq.n	800185c <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001854:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	4313      	orrs	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	68da      	ldr	r2, [r3, #12]
 8001862:	4b45      	ldr	r3, [pc, #276]	; (8001978 <HAL_ADC_Init+0x28c>)
 8001864:	4013      	ands	r3, r2
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	6812      	ldr	r2, [r2, #0]
 800186a:	69b9      	ldr	r1, [r7, #24]
 800186c:	430b      	orrs	r3, r1
 800186e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff ff12 	bl	800169e <LL_ADC_REG_IsConversionOngoing>
 800187a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff ff1f 	bl	80016c4 <LL_ADC_INJ_IsConversionOngoing>
 8001886:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d13d      	bne.n	800190a <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d13a      	bne.n	800190a <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001898:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018a0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80018a2:	4313      	orrs	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018b0:	f023 0302 	bic.w	r3, r3, #2
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	6812      	ldr	r2, [r2, #0]
 80018b8:	69b9      	ldr	r1, [r7, #24]
 80018ba:	430b      	orrs	r3, r1
 80018bc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d118      	bne.n	80018fa <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80018d2:	f023 0304 	bic.w	r3, r3, #4
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80018de:	4311      	orrs	r1, r2
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80018e4:	4311      	orrs	r1, r2
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80018ea:	430a      	orrs	r2, r1
 80018ec:	431a      	orrs	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f042 0201 	orr.w	r2, r2, #1
 80018f6:	611a      	str	r2, [r3, #16]
 80018f8:	e007      	b.n	800190a <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	691a      	ldr	r2, [r3, #16]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f022 0201 	bic.w	r2, r2, #1
 8001908:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d10c      	bne.n	800192c <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001918:	f023 010f 	bic.w	r1, r3, #15
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	69db      	ldr	r3, [r3, #28]
 8001920:	1e5a      	subs	r2, r3, #1
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	430a      	orrs	r2, r1
 8001928:	631a      	str	r2, [r3, #48]	; 0x30
 800192a:	e007      	b.n	800193c <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f022 020f 	bic.w	r2, r2, #15
 800193a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001940:	f023 0303 	bic.w	r3, r3, #3
 8001944:	f043 0201 	orr.w	r2, r3, #1
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	655a      	str	r2, [r3, #84]	; 0x54
 800194c:	e007      	b.n	800195e <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001952:	f043 0210 	orr.w	r2, r3, #16
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800195e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001960:	4618      	mov	r0, r3
 8001962:	3720      	adds	r7, #32
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	200044b8 	.word	0x200044b8
 800196c:	053e2d63 	.word	0x053e2d63
 8001970:	50040000 	.word	0x50040000
 8001974:	50040300 	.word	0x50040300
 8001978:	fff0c007 	.word	0xfff0c007

0800197c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b0b6      	sub	sp, #216	; 0xd8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001986:	2300      	movs	r3, #0
 8001988:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800198c:	2300      	movs	r3, #0
 800198e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001996:	2b01      	cmp	r3, #1
 8001998:	d101      	bne.n	800199e <HAL_ADC_ConfigChannel+0x22>
 800199a:	2302      	movs	r3, #2
 800199c:	e3b9      	b.n	8002112 <HAL_ADC_ConfigChannel+0x796>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2201      	movs	r2, #1
 80019a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff fe77 	bl	800169e <LL_ADC_REG_IsConversionOngoing>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f040 839e 	bne.w	80020f4 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	2b05      	cmp	r3, #5
 80019be:	d824      	bhi.n	8001a0a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	3b02      	subs	r3, #2
 80019c6:	2b03      	cmp	r3, #3
 80019c8:	d81b      	bhi.n	8001a02 <HAL_ADC_ConfigChannel+0x86>
 80019ca:	a201      	add	r2, pc, #4	; (adr r2, 80019d0 <HAL_ADC_ConfigChannel+0x54>)
 80019cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019d0:	080019e1 	.word	0x080019e1
 80019d4:	080019e9 	.word	0x080019e9
 80019d8:	080019f1 	.word	0x080019f1
 80019dc:	080019f9 	.word	0x080019f9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	220c      	movs	r2, #12
 80019e4:	605a      	str	r2, [r3, #4]
          break;
 80019e6:	e011      	b.n	8001a0c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	2212      	movs	r2, #18
 80019ec:	605a      	str	r2, [r3, #4]
          break;
 80019ee:	e00d      	b.n	8001a0c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	2218      	movs	r2, #24
 80019f4:	605a      	str	r2, [r3, #4]
          break;
 80019f6:	e009      	b.n	8001a0c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019fe:	605a      	str	r2, [r3, #4]
          break;
 8001a00:	e004      	b.n	8001a0c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	2206      	movs	r2, #6
 8001a06:	605a      	str	r2, [r3, #4]
          break;
 8001a08:	e000      	b.n	8001a0c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001a0a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6818      	ldr	r0, [r3, #0]
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	6859      	ldr	r1, [r3, #4]
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	f7ff fd64 	bl	80014e6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff fe3b 	bl	800169e <LL_ADC_REG_IsConversionOngoing>
 8001a28:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff fe47 	bl	80016c4 <LL_ADC_INJ_IsConversionOngoing>
 8001a36:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a3a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f040 81a6 	bne.w	8001d90 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f040 81a1 	bne.w	8001d90 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6818      	ldr	r0, [r3, #0]
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	6819      	ldr	r1, [r3, #0]
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	f7ff fd6f 	bl	800153e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	695a      	ldr	r2, [r3, #20]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	08db      	lsrs	r3, r3, #3
 8001a6c:	f003 0303 	and.w	r3, r3, #3
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	2b04      	cmp	r3, #4
 8001a80:	d00a      	beq.n	8001a98 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6818      	ldr	r0, [r3, #0]
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	6919      	ldr	r1, [r3, #16]
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001a92:	f7ff fcd3 	bl	800143c <LL_ADC_SetOffset>
 8001a96:	e17b      	b.n	8001d90 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff fcf0 	bl	8001484 <LL_ADC_GetOffsetChannel>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d10a      	bne.n	8001ac4 <HAL_ADC_ConfigChannel+0x148>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff fce5 	bl	8001484 <LL_ADC_GetOffsetChannel>
 8001aba:	4603      	mov	r3, r0
 8001abc:	0e9b      	lsrs	r3, r3, #26
 8001abe:	f003 021f 	and.w	r2, r3, #31
 8001ac2:	e01e      	b.n	8001b02 <HAL_ADC_ConfigChannel+0x186>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2100      	movs	r1, #0
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff fcda 	bl	8001484 <LL_ADC_GetOffsetChannel>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001ada:	fa93 f3a3 	rbit	r3, r3
 8001ade:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ae2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001ae6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001aea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001af2:	2320      	movs	r3, #32
 8001af4:	e004      	b.n	8001b00 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001af6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001afa:	fab3 f383 	clz	r3, r3
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d105      	bne.n	8001b1a <HAL_ADC_ConfigChannel+0x19e>
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	0e9b      	lsrs	r3, r3, #26
 8001b14:	f003 031f 	and.w	r3, r3, #31
 8001b18:	e018      	b.n	8001b4c <HAL_ADC_ConfigChannel+0x1d0>
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b22:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001b26:	fa93 f3a3 	rbit	r3, r3
 8001b2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001b2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001b36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001b3e:	2320      	movs	r3, #32
 8001b40:	e004      	b.n	8001b4c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001b42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001b46:	fab3 f383 	clz	r3, r3
 8001b4a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d106      	bne.n	8001b5e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2200      	movs	r2, #0
 8001b56:	2100      	movs	r1, #0
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff fca9 	bl	80014b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2101      	movs	r1, #1
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff fc8d 	bl	8001484 <LL_ADC_GetOffsetChannel>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d10a      	bne.n	8001b8a <HAL_ADC_ConfigChannel+0x20e>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2101      	movs	r1, #1
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff fc82 	bl	8001484 <LL_ADC_GetOffsetChannel>
 8001b80:	4603      	mov	r3, r0
 8001b82:	0e9b      	lsrs	r3, r3, #26
 8001b84:	f003 021f 	and.w	r2, r3, #31
 8001b88:	e01e      	b.n	8001bc8 <HAL_ADC_ConfigChannel+0x24c>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2101      	movs	r1, #1
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff fc77 	bl	8001484 <LL_ADC_GetOffsetChannel>
 8001b96:	4603      	mov	r3, r0
 8001b98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001ba0:	fa93 f3a3 	rbit	r3, r3
 8001ba4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001ba8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001bac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001bb0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d101      	bne.n	8001bbc <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001bb8:	2320      	movs	r3, #32
 8001bba:	e004      	b.n	8001bc6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001bbc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001bc0:	fab3 f383 	clz	r3, r3
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d105      	bne.n	8001be0 <HAL_ADC_ConfigChannel+0x264>
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	0e9b      	lsrs	r3, r3, #26
 8001bda:	f003 031f 	and.w	r3, r3, #31
 8001bde:	e018      	b.n	8001c12 <HAL_ADC_ConfigChannel+0x296>
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001bec:	fa93 f3a3 	rbit	r3, r3
 8001bf0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001bf4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001bf8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001bfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d101      	bne.n	8001c08 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001c04:	2320      	movs	r3, #32
 8001c06:	e004      	b.n	8001c12 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001c08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c0c:	fab3 f383 	clz	r3, r3
 8001c10:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d106      	bne.n	8001c24 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff fc46 	bl	80014b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2102      	movs	r1, #2
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff fc2a 	bl	8001484 <LL_ADC_GetOffsetChannel>
 8001c30:	4603      	mov	r3, r0
 8001c32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d10a      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x2d4>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2102      	movs	r1, #2
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff fc1f 	bl	8001484 <LL_ADC_GetOffsetChannel>
 8001c46:	4603      	mov	r3, r0
 8001c48:	0e9b      	lsrs	r3, r3, #26
 8001c4a:	f003 021f 	and.w	r2, r3, #31
 8001c4e:	e01e      	b.n	8001c8e <HAL_ADC_ConfigChannel+0x312>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2102      	movs	r1, #2
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff fc14 	bl	8001484 <LL_ADC_GetOffsetChannel>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c66:	fa93 f3a3 	rbit	r3, r3
 8001c6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001c6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001c76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001c7e:	2320      	movs	r3, #32
 8001c80:	e004      	b.n	8001c8c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001c82:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c86:	fab3 f383 	clz	r3, r3
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d105      	bne.n	8001ca6 <HAL_ADC_ConfigChannel+0x32a>
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	0e9b      	lsrs	r3, r3, #26
 8001ca0:	f003 031f 	and.w	r3, r3, #31
 8001ca4:	e016      	b.n	8001cd4 <HAL_ADC_ConfigChannel+0x358>
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001cb2:	fa93 f3a3 	rbit	r3, r3
 8001cb6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001cb8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001cba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001cbe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001cc6:	2320      	movs	r3, #32
 8001cc8:	e004      	b.n	8001cd4 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001cca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001cce:	fab3 f383 	clz	r3, r3
 8001cd2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d106      	bne.n	8001ce6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	2102      	movs	r1, #2
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff fbe5 	bl	80014b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2103      	movs	r1, #3
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff fbc9 	bl	8001484 <LL_ADC_GetOffsetChannel>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d10a      	bne.n	8001d12 <HAL_ADC_ConfigChannel+0x396>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2103      	movs	r1, #3
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff fbbe 	bl	8001484 <LL_ADC_GetOffsetChannel>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	0e9b      	lsrs	r3, r3, #26
 8001d0c:	f003 021f 	and.w	r2, r3, #31
 8001d10:	e017      	b.n	8001d42 <HAL_ADC_ConfigChannel+0x3c6>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2103      	movs	r1, #3
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff fbb3 	bl	8001484 <LL_ADC_GetOffsetChannel>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d24:	fa93 f3a3 	rbit	r3, r3
 8001d28:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001d2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d2c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001d2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d101      	bne.n	8001d38 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001d34:	2320      	movs	r3, #32
 8001d36:	e003      	b.n	8001d40 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001d38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d3a:	fab3 f383 	clz	r3, r3
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d105      	bne.n	8001d5a <HAL_ADC_ConfigChannel+0x3de>
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	0e9b      	lsrs	r3, r3, #26
 8001d54:	f003 031f 	and.w	r3, r3, #31
 8001d58:	e011      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x402>
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d62:	fa93 f3a3 	rbit	r3, r3
 8001d66:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001d68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d6a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001d6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001d72:	2320      	movs	r3, #32
 8001d74:	e003      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d78:	fab3 f383 	clz	r3, r3
 8001d7c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d106      	bne.n	8001d90 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2200      	movs	r2, #0
 8001d88:	2103      	movs	r1, #3
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff fb90 	bl	80014b0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff fc6f 	bl	8001678 <LL_ADC_IsEnabled>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f040 813f 	bne.w	8002020 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6818      	ldr	r0, [r3, #0]
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	6819      	ldr	r1, [r3, #0]
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	461a      	mov	r2, r3
 8001db0:	f7ff fbf0 	bl	8001594 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	4a8e      	ldr	r2, [pc, #568]	; (8001ff4 <HAL_ADC_ConfigChannel+0x678>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	f040 8130 	bne.w	8002020 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d10b      	bne.n	8001de8 <HAL_ADC_ConfigChannel+0x46c>
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	0e9b      	lsrs	r3, r3, #26
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	f003 031f 	and.w	r3, r3, #31
 8001ddc:	2b09      	cmp	r3, #9
 8001dde:	bf94      	ite	ls
 8001de0:	2301      	movls	r3, #1
 8001de2:	2300      	movhi	r3, #0
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	e019      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x4a0>
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001df0:	fa93 f3a3 	rbit	r3, r3
 8001df4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001df6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001df8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001dfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d101      	bne.n	8001e04 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001e00:	2320      	movs	r3, #32
 8001e02:	e003      	b.n	8001e0c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001e04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e06:	fab3 f383 	clz	r3, r3
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	f003 031f 	and.w	r3, r3, #31
 8001e12:	2b09      	cmp	r3, #9
 8001e14:	bf94      	ite	ls
 8001e16:	2301      	movls	r3, #1
 8001e18:	2300      	movhi	r3, #0
 8001e1a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d079      	beq.n	8001f14 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d107      	bne.n	8001e3c <HAL_ADC_ConfigChannel+0x4c0>
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	0e9b      	lsrs	r3, r3, #26
 8001e32:	3301      	adds	r3, #1
 8001e34:	069b      	lsls	r3, r3, #26
 8001e36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e3a:	e015      	b.n	8001e68 <HAL_ADC_ConfigChannel+0x4ec>
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e44:	fa93 f3a3 	rbit	r3, r3
 8001e48:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001e4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e4c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001e4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d101      	bne.n	8001e58 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001e54:	2320      	movs	r3, #32
 8001e56:	e003      	b.n	8001e60 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001e58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e5a:	fab3 f383 	clz	r3, r3
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	3301      	adds	r3, #1
 8001e62:	069b      	lsls	r3, r3, #26
 8001e64:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d109      	bne.n	8001e88 <HAL_ADC_ConfigChannel+0x50c>
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	0e9b      	lsrs	r3, r3, #26
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	f003 031f 	and.w	r3, r3, #31
 8001e80:	2101      	movs	r1, #1
 8001e82:	fa01 f303 	lsl.w	r3, r1, r3
 8001e86:	e017      	b.n	8001eb8 <HAL_ADC_ConfigChannel+0x53c>
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e90:	fa93 f3a3 	rbit	r3, r3
 8001e94:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001e96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e98:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001e9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d101      	bne.n	8001ea4 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001ea0:	2320      	movs	r3, #32
 8001ea2:	e003      	b.n	8001eac <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001ea4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ea6:	fab3 f383 	clz	r3, r3
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	3301      	adds	r3, #1
 8001eae:	f003 031f 	and.w	r3, r3, #31
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb8:	ea42 0103 	orr.w	r1, r2, r3
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d10a      	bne.n	8001ede <HAL_ADC_ConfigChannel+0x562>
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	0e9b      	lsrs	r3, r3, #26
 8001ece:	3301      	adds	r3, #1
 8001ed0:	f003 021f 	and.w	r2, r3, #31
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	4413      	add	r3, r2
 8001eda:	051b      	lsls	r3, r3, #20
 8001edc:	e018      	b.n	8001f10 <HAL_ADC_ConfigChannel+0x594>
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ee6:	fa93 f3a3 	rbit	r3, r3
 8001eea:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001ef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d101      	bne.n	8001efa <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001ef6:	2320      	movs	r3, #32
 8001ef8:	e003      	b.n	8001f02 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001efa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001efc:	fab3 f383 	clz	r3, r3
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	3301      	adds	r3, #1
 8001f04:	f003 021f 	and.w	r2, r3, #31
 8001f08:	4613      	mov	r3, r2
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	4413      	add	r3, r2
 8001f0e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f10:	430b      	orrs	r3, r1
 8001f12:	e080      	b.n	8002016 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d107      	bne.n	8001f30 <HAL_ADC_ConfigChannel+0x5b4>
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	0e9b      	lsrs	r3, r3, #26
 8001f26:	3301      	adds	r3, #1
 8001f28:	069b      	lsls	r3, r3, #26
 8001f2a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f2e:	e015      	b.n	8001f5c <HAL_ADC_ConfigChannel+0x5e0>
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f38:	fa93 f3a3 	rbit	r3, r3
 8001f3c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f40:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d101      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001f48:	2320      	movs	r3, #32
 8001f4a:	e003      	b.n	8001f54 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f4e:	fab3 f383 	clz	r3, r3
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	3301      	adds	r3, #1
 8001f56:	069b      	lsls	r3, r3, #26
 8001f58:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d109      	bne.n	8001f7c <HAL_ADC_ConfigChannel+0x600>
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	0e9b      	lsrs	r3, r3, #26
 8001f6e:	3301      	adds	r3, #1
 8001f70:	f003 031f 	and.w	r3, r3, #31
 8001f74:	2101      	movs	r1, #1
 8001f76:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7a:	e017      	b.n	8001fac <HAL_ADC_ConfigChannel+0x630>
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f82:	6a3b      	ldr	r3, [r7, #32]
 8001f84:	fa93 f3a3 	rbit	r3, r3
 8001f88:	61fb      	str	r3, [r7, #28]
  return result;
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d101      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001f94:	2320      	movs	r3, #32
 8001f96:	e003      	b.n	8001fa0 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9a:	fab3 f383 	clz	r3, r3
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	f003 031f 	and.w	r3, r3, #31
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fac:	ea42 0103 	orr.w	r1, r2, r3
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d10d      	bne.n	8001fd8 <HAL_ADC_ConfigChannel+0x65c>
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	0e9b      	lsrs	r3, r3, #26
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	f003 021f 	and.w	r2, r3, #31
 8001fc8:	4613      	mov	r3, r2
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	4413      	add	r3, r2
 8001fce:	3b1e      	subs	r3, #30
 8001fd0:	051b      	lsls	r3, r3, #20
 8001fd2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fd6:	e01d      	b.n	8002014 <HAL_ADC_ConfigChannel+0x698>
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	fa93 f3a3 	rbit	r3, r3
 8001fe4:	613b      	str	r3, [r7, #16]
  return result;
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d103      	bne.n	8001ff8 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001ff0:	2320      	movs	r3, #32
 8001ff2:	e005      	b.n	8002000 <HAL_ADC_ConfigChannel+0x684>
 8001ff4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	fab3 f383 	clz	r3, r3
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	3301      	adds	r3, #1
 8002002:	f003 021f 	and.w	r2, r3, #31
 8002006:	4613      	mov	r3, r2
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	4413      	add	r3, r2
 800200c:	3b1e      	subs	r3, #30
 800200e:	051b      	lsls	r3, r3, #20
 8002010:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002014:	430b      	orrs	r3, r1
 8002016:	683a      	ldr	r2, [r7, #0]
 8002018:	6892      	ldr	r2, [r2, #8]
 800201a:	4619      	mov	r1, r3
 800201c:	f7ff fa8f 	bl	800153e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	4b3d      	ldr	r3, [pc, #244]	; (800211c <HAL_ADC_ConfigChannel+0x7a0>)
 8002026:	4013      	ands	r3, r2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d06c      	beq.n	8002106 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800202c:	483c      	ldr	r0, [pc, #240]	; (8002120 <HAL_ADC_ConfigChannel+0x7a4>)
 800202e:	f7ff f9f7 	bl	8001420 <LL_ADC_GetCommonPathInternalCh>
 8002032:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a3a      	ldr	r2, [pc, #232]	; (8002124 <HAL_ADC_ConfigChannel+0x7a8>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d127      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002040:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002044:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d121      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a35      	ldr	r2, [pc, #212]	; (8002128 <HAL_ADC_ConfigChannel+0x7ac>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d157      	bne.n	8002106 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002056:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800205a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800205e:	4619      	mov	r1, r3
 8002060:	482f      	ldr	r0, [pc, #188]	; (8002120 <HAL_ADC_ConfigChannel+0x7a4>)
 8002062:	f7ff f9ca 	bl	80013fa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002066:	4b31      	ldr	r3, [pc, #196]	; (800212c <HAL_ADC_ConfigChannel+0x7b0>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	099b      	lsrs	r3, r3, #6
 800206c:	4a30      	ldr	r2, [pc, #192]	; (8002130 <HAL_ADC_ConfigChannel+0x7b4>)
 800206e:	fba2 2303 	umull	r2, r3, r2, r3
 8002072:	099b      	lsrs	r3, r3, #6
 8002074:	1c5a      	adds	r2, r3, #1
 8002076:	4613      	mov	r3, r2
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	4413      	add	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002080:	e002      	b.n	8002088 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	3b01      	subs	r3, #1
 8002086:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1f9      	bne.n	8002082 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800208e:	e03a      	b.n	8002106 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a27      	ldr	r2, [pc, #156]	; (8002134 <HAL_ADC_ConfigChannel+0x7b8>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d113      	bne.n	80020c2 <HAL_ADC_ConfigChannel+0x746>
 800209a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800209e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d10d      	bne.n	80020c2 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a1f      	ldr	r2, [pc, #124]	; (8002128 <HAL_ADC_ConfigChannel+0x7ac>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d12a      	bne.n	8002106 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020b8:	4619      	mov	r1, r3
 80020ba:	4819      	ldr	r0, [pc, #100]	; (8002120 <HAL_ADC_ConfigChannel+0x7a4>)
 80020bc:	f7ff f99d 	bl	80013fa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80020c0:	e021      	b.n	8002106 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a1c      	ldr	r2, [pc, #112]	; (8002138 <HAL_ADC_ConfigChannel+0x7bc>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d11c      	bne.n	8002106 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80020cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d116      	bne.n	8002106 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a12      	ldr	r2, [pc, #72]	; (8002128 <HAL_ADC_ConfigChannel+0x7ac>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d111      	bne.n	8002106 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020ea:	4619      	mov	r1, r3
 80020ec:	480c      	ldr	r0, [pc, #48]	; (8002120 <HAL_ADC_ConfigChannel+0x7a4>)
 80020ee:	f7ff f984 	bl	80013fa <LL_ADC_SetCommonPathInternalCh>
 80020f2:	e008      	b.n	8002106 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f8:	f043 0220 	orr.w	r2, r3, #32
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800210e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002112:	4618      	mov	r0, r3
 8002114:	37d8      	adds	r7, #216	; 0xd8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	80080000 	.word	0x80080000
 8002120:	50040300 	.word	0x50040300
 8002124:	c7520000 	.word	0xc7520000
 8002128:	50040000 	.word	0x50040000
 800212c:	200044b8 	.word	0x200044b8
 8002130:	053e2d63 	.word	0x053e2d63
 8002134:	cb840000 	.word	0xcb840000
 8002138:	80000001 	.word	0x80000001

0800213c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f003 0307 	and.w	r3, r3, #7
 800214a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800214c:	4b0c      	ldr	r3, [pc, #48]	; (8002180 <__NVIC_SetPriorityGrouping+0x44>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002152:	68ba      	ldr	r2, [r7, #8]
 8002154:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002158:	4013      	ands	r3, r2
 800215a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002164:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002168:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800216c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800216e:	4a04      	ldr	r2, [pc, #16]	; (8002180 <__NVIC_SetPriorityGrouping+0x44>)
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	60d3      	str	r3, [r2, #12]
}
 8002174:	bf00      	nop
 8002176:	3714      	adds	r7, #20
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002188:	4b04      	ldr	r3, [pc, #16]	; (800219c <__NVIC_GetPriorityGrouping+0x18>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	0a1b      	lsrs	r3, r3, #8
 800218e:	f003 0307 	and.w	r3, r3, #7
}
 8002192:	4618      	mov	r0, r3
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	e000ed00 	.word	0xe000ed00

080021a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	db0b      	blt.n	80021ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021b2:	79fb      	ldrb	r3, [r7, #7]
 80021b4:	f003 021f 	and.w	r2, r3, #31
 80021b8:	4907      	ldr	r1, [pc, #28]	; (80021d8 <__NVIC_EnableIRQ+0x38>)
 80021ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021be:	095b      	lsrs	r3, r3, #5
 80021c0:	2001      	movs	r0, #1
 80021c2:	fa00 f202 	lsl.w	r2, r0, r2
 80021c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	e000e100 	.word	0xe000e100

080021dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	6039      	str	r1, [r7, #0]
 80021e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	db0a      	blt.n	8002206 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	b2da      	uxtb	r2, r3
 80021f4:	490c      	ldr	r1, [pc, #48]	; (8002228 <__NVIC_SetPriority+0x4c>)
 80021f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fa:	0112      	lsls	r2, r2, #4
 80021fc:	b2d2      	uxtb	r2, r2
 80021fe:	440b      	add	r3, r1
 8002200:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002204:	e00a      	b.n	800221c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	b2da      	uxtb	r2, r3
 800220a:	4908      	ldr	r1, [pc, #32]	; (800222c <__NVIC_SetPriority+0x50>)
 800220c:	79fb      	ldrb	r3, [r7, #7]
 800220e:	f003 030f 	and.w	r3, r3, #15
 8002212:	3b04      	subs	r3, #4
 8002214:	0112      	lsls	r2, r2, #4
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	440b      	add	r3, r1
 800221a:	761a      	strb	r2, [r3, #24]
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	e000e100 	.word	0xe000e100
 800222c:	e000ed00 	.word	0xe000ed00

08002230 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002230:	b480      	push	{r7}
 8002232:	b089      	sub	sp, #36	; 0x24
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f003 0307 	and.w	r3, r3, #7
 8002242:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	f1c3 0307 	rsb	r3, r3, #7
 800224a:	2b04      	cmp	r3, #4
 800224c:	bf28      	it	cs
 800224e:	2304      	movcs	r3, #4
 8002250:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	3304      	adds	r3, #4
 8002256:	2b06      	cmp	r3, #6
 8002258:	d902      	bls.n	8002260 <NVIC_EncodePriority+0x30>
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	3b03      	subs	r3, #3
 800225e:	e000      	b.n	8002262 <NVIC_EncodePriority+0x32>
 8002260:	2300      	movs	r3, #0
 8002262:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002264:	f04f 32ff 	mov.w	r2, #4294967295
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	43da      	mvns	r2, r3
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	401a      	ands	r2, r3
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002278:	f04f 31ff 	mov.w	r1, #4294967295
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	fa01 f303 	lsl.w	r3, r1, r3
 8002282:	43d9      	mvns	r1, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002288:	4313      	orrs	r3, r2
         );
}
 800228a:	4618      	mov	r0, r3
 800228c:	3724      	adds	r7, #36	; 0x24
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
	...

08002298 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022a8:	d301      	bcc.n	80022ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022aa:	2301      	movs	r3, #1
 80022ac:	e00f      	b.n	80022ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ae:	4a0a      	ldr	r2, [pc, #40]	; (80022d8 <SysTick_Config+0x40>)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3b01      	subs	r3, #1
 80022b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022b6:	210f      	movs	r1, #15
 80022b8:	f04f 30ff 	mov.w	r0, #4294967295
 80022bc:	f7ff ff8e 	bl	80021dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022c0:	4b05      	ldr	r3, [pc, #20]	; (80022d8 <SysTick_Config+0x40>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022c6:	4b04      	ldr	r3, [pc, #16]	; (80022d8 <SysTick_Config+0x40>)
 80022c8:	2207      	movs	r2, #7
 80022ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	e000e010 	.word	0xe000e010

080022dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f7ff ff29 	bl	800213c <__NVIC_SetPriorityGrouping>
}
 80022ea:	bf00      	nop
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b086      	sub	sp, #24
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	4603      	mov	r3, r0
 80022fa:	60b9      	str	r1, [r7, #8]
 80022fc:	607a      	str	r2, [r7, #4]
 80022fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002300:	2300      	movs	r3, #0
 8002302:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002304:	f7ff ff3e 	bl	8002184 <__NVIC_GetPriorityGrouping>
 8002308:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	68b9      	ldr	r1, [r7, #8]
 800230e:	6978      	ldr	r0, [r7, #20]
 8002310:	f7ff ff8e 	bl	8002230 <NVIC_EncodePriority>
 8002314:	4602      	mov	r2, r0
 8002316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800231a:	4611      	mov	r1, r2
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff ff5d 	bl	80021dc <__NVIC_SetPriority>
}
 8002322:	bf00      	nop
 8002324:	3718      	adds	r7, #24
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b082      	sub	sp, #8
 800232e:	af00      	add	r7, sp, #0
 8002330:	4603      	mov	r3, r0
 8002332:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff ff31 	bl	80021a0 <__NVIC_EnableIRQ>
}
 800233e:	bf00      	nop
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b082      	sub	sp, #8
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f7ff ffa2 	bl	8002298 <SysTick_Config>
 8002354:	4603      	mov	r3, r0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
	...

08002360 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e098      	b.n	80024a4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	461a      	mov	r2, r3
 8002378:	4b4d      	ldr	r3, [pc, #308]	; (80024b0 <HAL_DMA_Init+0x150>)
 800237a:	429a      	cmp	r2, r3
 800237c:	d80f      	bhi.n	800239e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	461a      	mov	r2, r3
 8002384:	4b4b      	ldr	r3, [pc, #300]	; (80024b4 <HAL_DMA_Init+0x154>)
 8002386:	4413      	add	r3, r2
 8002388:	4a4b      	ldr	r2, [pc, #300]	; (80024b8 <HAL_DMA_Init+0x158>)
 800238a:	fba2 2303 	umull	r2, r3, r2, r3
 800238e:	091b      	lsrs	r3, r3, #4
 8002390:	009a      	lsls	r2, r3, #2
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a48      	ldr	r2, [pc, #288]	; (80024bc <HAL_DMA_Init+0x15c>)
 800239a:	641a      	str	r2, [r3, #64]	; 0x40
 800239c:	e00e      	b.n	80023bc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	461a      	mov	r2, r3
 80023a4:	4b46      	ldr	r3, [pc, #280]	; (80024c0 <HAL_DMA_Init+0x160>)
 80023a6:	4413      	add	r3, r2
 80023a8:	4a43      	ldr	r2, [pc, #268]	; (80024b8 <HAL_DMA_Init+0x158>)
 80023aa:	fba2 2303 	umull	r2, r3, r2, r3
 80023ae:	091b      	lsrs	r3, r3, #4
 80023b0:	009a      	lsls	r2, r3, #2
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a42      	ldr	r2, [pc, #264]	; (80024c4 <HAL_DMA_Init+0x164>)
 80023ba:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2202      	movs	r2, #2
 80023c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80023d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80023e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	4313      	orrs	r3, r2
 8002404:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002416:	d039      	beq.n	800248c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241c:	4a27      	ldr	r2, [pc, #156]	; (80024bc <HAL_DMA_Init+0x15c>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d11a      	bne.n	8002458 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002422:	4b29      	ldr	r3, [pc, #164]	; (80024c8 <HAL_DMA_Init+0x168>)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242a:	f003 031c 	and.w	r3, r3, #28
 800242e:	210f      	movs	r1, #15
 8002430:	fa01 f303 	lsl.w	r3, r1, r3
 8002434:	43db      	mvns	r3, r3
 8002436:	4924      	ldr	r1, [pc, #144]	; (80024c8 <HAL_DMA_Init+0x168>)
 8002438:	4013      	ands	r3, r2
 800243a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800243c:	4b22      	ldr	r3, [pc, #136]	; (80024c8 <HAL_DMA_Init+0x168>)
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6859      	ldr	r1, [r3, #4]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002448:	f003 031c 	and.w	r3, r3, #28
 800244c:	fa01 f303 	lsl.w	r3, r1, r3
 8002450:	491d      	ldr	r1, [pc, #116]	; (80024c8 <HAL_DMA_Init+0x168>)
 8002452:	4313      	orrs	r3, r2
 8002454:	600b      	str	r3, [r1, #0]
 8002456:	e019      	b.n	800248c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002458:	4b1c      	ldr	r3, [pc, #112]	; (80024cc <HAL_DMA_Init+0x16c>)
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002460:	f003 031c 	and.w	r3, r3, #28
 8002464:	210f      	movs	r1, #15
 8002466:	fa01 f303 	lsl.w	r3, r1, r3
 800246a:	43db      	mvns	r3, r3
 800246c:	4917      	ldr	r1, [pc, #92]	; (80024cc <HAL_DMA_Init+0x16c>)
 800246e:	4013      	ands	r3, r2
 8002470:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002472:	4b16      	ldr	r3, [pc, #88]	; (80024cc <HAL_DMA_Init+0x16c>)
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6859      	ldr	r1, [r3, #4]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247e:	f003 031c 	and.w	r3, r3, #28
 8002482:	fa01 f303 	lsl.w	r3, r1, r3
 8002486:	4911      	ldr	r1, [pc, #68]	; (80024cc <HAL_DMA_Init+0x16c>)
 8002488:	4313      	orrs	r3, r2
 800248a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2201      	movs	r2, #1
 8002496:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3714      	adds	r7, #20
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	40020407 	.word	0x40020407
 80024b4:	bffdfff8 	.word	0xbffdfff8
 80024b8:	cccccccd 	.word	0xcccccccd
 80024bc:	40020000 	.word	0x40020000
 80024c0:	bffdfbf8 	.word	0xbffdfbf8
 80024c4:	40020400 	.word	0x40020400
 80024c8:	400200a8 	.word	0x400200a8
 80024cc:	400204a8 	.word	0x400204a8

080024d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
 80024dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024de:	2300      	movs	r3, #0
 80024e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d101      	bne.n	80024f0 <HAL_DMA_Start_IT+0x20>
 80024ec:	2302      	movs	r3, #2
 80024ee:	e04b      	b.n	8002588 <HAL_DMA_Start_IT+0xb8>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2b01      	cmp	r3, #1
 8002502:	d13a      	bne.n	800257a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2202      	movs	r2, #2
 8002508:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2200      	movs	r2, #0
 8002510:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 0201 	bic.w	r2, r2, #1
 8002520:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	68b9      	ldr	r1, [r7, #8]
 8002528:	68f8      	ldr	r0, [r7, #12]
 800252a:	f000 f95f 	bl	80027ec <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	2b00      	cmp	r3, #0
 8002534:	d008      	beq.n	8002548 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f042 020e 	orr.w	r2, r2, #14
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	e00f      	b.n	8002568 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f022 0204 	bic.w	r2, r2, #4
 8002556:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f042 020a 	orr.w	r2, r2, #10
 8002566:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f042 0201 	orr.w	r2, r2, #1
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	e005      	b.n	8002586 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002582:	2302      	movs	r3, #2
 8002584:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002586:	7dfb      	ldrb	r3, [r7, #23]
}
 8002588:	4618      	mov	r0, r3
 800258a:	3718      	adds	r7, #24
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002598:	2300      	movs	r3, #0
 800259a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d008      	beq.n	80025ba <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2204      	movs	r2, #4
 80025ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e022      	b.n	8002600 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 020e 	bic.w	r2, r2, #14
 80025c8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f022 0201 	bic.w	r2, r2, #1
 80025d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025de:	f003 021c 	and.w	r2, r3, #28
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	2101      	movs	r1, #1
 80025e8:	fa01 f202 	lsl.w	r2, r1, r2
 80025ec:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2201      	movs	r2, #1
 80025f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80025fe:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002600:	4618      	mov	r0, r3
 8002602:	3714      	adds	r7, #20
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002614:	2300      	movs	r3, #0
 8002616:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800261e:	b2db      	uxtb	r3, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d005      	beq.n	8002630 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2204      	movs	r2, #4
 8002628:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	73fb      	strb	r3, [r7, #15]
 800262e:	e029      	b.n	8002684 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 020e 	bic.w	r2, r2, #14
 800263e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f022 0201 	bic.w	r2, r2, #1
 800264e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002654:	f003 021c 	and.w	r2, r3, #28
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265c:	2101      	movs	r1, #1
 800265e:	fa01 f202 	lsl.w	r2, r1, r2
 8002662:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002678:	2b00      	cmp	r3, #0
 800267a:	d003      	beq.n	8002684 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	4798      	blx	r3
    }
  }
  return status;
 8002684:	7bfb      	ldrb	r3, [r7, #15]
}
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b084      	sub	sp, #16
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026aa:	f003 031c 	and.w	r3, r3, #28
 80026ae:	2204      	movs	r2, #4
 80026b0:	409a      	lsls	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	4013      	ands	r3, r2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d026      	beq.n	8002708 <HAL_DMA_IRQHandler+0x7a>
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	f003 0304 	and.w	r3, r3, #4
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d021      	beq.n	8002708 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0320 	and.w	r3, r3, #32
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d107      	bne.n	80026e2 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 0204 	bic.w	r2, r2, #4
 80026e0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e6:	f003 021c 	and.w	r2, r3, #28
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	2104      	movs	r1, #4
 80026f0:	fa01 f202 	lsl.w	r2, r1, r2
 80026f4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d071      	beq.n	80027e2 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002706:	e06c      	b.n	80027e2 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270c:	f003 031c 	and.w	r3, r3, #28
 8002710:	2202      	movs	r2, #2
 8002712:	409a      	lsls	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	4013      	ands	r3, r2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d02e      	beq.n	800277a <HAL_DMA_IRQHandler+0xec>
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d029      	beq.n	800277a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0320 	and.w	r3, r3, #32
 8002730:	2b00      	cmp	r3, #0
 8002732:	d10b      	bne.n	800274c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f022 020a 	bic.w	r2, r2, #10
 8002742:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002750:	f003 021c 	and.w	r2, r3, #28
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002758:	2102      	movs	r1, #2
 800275a:	fa01 f202 	lsl.w	r2, r1, r2
 800275e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276c:	2b00      	cmp	r3, #0
 800276e:	d038      	beq.n	80027e2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002778:	e033      	b.n	80027e2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277e:	f003 031c 	and.w	r3, r3, #28
 8002782:	2208      	movs	r2, #8
 8002784:	409a      	lsls	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	4013      	ands	r3, r2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d02a      	beq.n	80027e4 <HAL_DMA_IRQHandler+0x156>
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	f003 0308 	and.w	r3, r3, #8
 8002794:	2b00      	cmp	r3, #0
 8002796:	d025      	beq.n	80027e4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 020e 	bic.w	r2, r2, #14
 80027a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ac:	f003 021c 	and.w	r2, r3, #28
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b4:	2101      	movs	r1, #1
 80027b6:	fa01 f202 	lsl.w	r2, r1, r2
 80027ba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2201      	movs	r2, #1
 80027c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d004      	beq.n	80027e4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80027e2:	bf00      	nop
 80027e4:	bf00      	nop
}
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
 80027f8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fe:	f003 021c 	and.w	r2, r3, #28
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	2101      	movs	r1, #1
 8002808:	fa01 f202 	lsl.w	r2, r1, r2
 800280c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	683a      	ldr	r2, [r7, #0]
 8002814:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	2b10      	cmp	r3, #16
 800281c:	d108      	bne.n	8002830 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68ba      	ldr	r2, [r7, #8]
 800282c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800282e:	e007      	b.n	8002840 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68ba      	ldr	r2, [r7, #8]
 8002836:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	60da      	str	r2, [r3, #12]
}
 8002840:	bf00      	nop
 8002842:	3714      	adds	r7, #20
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800284c:	b480      	push	{r7}
 800284e:	b087      	sub	sp, #28
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002856:	2300      	movs	r3, #0
 8002858:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800285a:	e148      	b.n	8002aee <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	2101      	movs	r1, #1
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	fa01 f303 	lsl.w	r3, r1, r3
 8002868:	4013      	ands	r3, r2
 800286a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2b00      	cmp	r3, #0
 8002870:	f000 813a 	beq.w	8002ae8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f003 0303 	and.w	r3, r3, #3
 800287c:	2b01      	cmp	r3, #1
 800287e:	d005      	beq.n	800288c <HAL_GPIO_Init+0x40>
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f003 0303 	and.w	r3, r3, #3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d130      	bne.n	80028ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	2203      	movs	r2, #3
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	43db      	mvns	r3, r3
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	4013      	ands	r3, r2
 80028a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	68da      	ldr	r2, [r3, #12]
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028c2:	2201      	movs	r2, #1
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ca:	43db      	mvns	r3, r3
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	4013      	ands	r3, r2
 80028d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	091b      	lsrs	r3, r3, #4
 80028d8:	f003 0201 	and.w	r2, r3, #1
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f003 0303 	and.w	r3, r3, #3
 80028f6:	2b03      	cmp	r3, #3
 80028f8:	d017      	beq.n	800292a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	2203      	movs	r2, #3
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	43db      	mvns	r3, r3
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	4013      	ands	r3, r2
 8002910:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	689a      	ldr	r2, [r3, #8]
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	4313      	orrs	r3, r2
 8002922:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f003 0303 	and.w	r3, r3, #3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d123      	bne.n	800297e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	08da      	lsrs	r2, r3, #3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	3208      	adds	r2, #8
 800293e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002942:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	220f      	movs	r2, #15
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	43db      	mvns	r3, r3
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	4013      	ands	r3, r2
 8002958:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	691a      	ldr	r2, [r3, #16]
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	f003 0307 	and.w	r3, r3, #7
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	4313      	orrs	r3, r2
 800296e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	08da      	lsrs	r2, r3, #3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	3208      	adds	r2, #8
 8002978:	6939      	ldr	r1, [r7, #16]
 800297a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	2203      	movs	r2, #3
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	43db      	mvns	r3, r3
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	4013      	ands	r3, r2
 8002994:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f003 0203 	and.w	r2, r3, #3
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f000 8094 	beq.w	8002ae8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029c0:	4b52      	ldr	r3, [pc, #328]	; (8002b0c <HAL_GPIO_Init+0x2c0>)
 80029c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029c4:	4a51      	ldr	r2, [pc, #324]	; (8002b0c <HAL_GPIO_Init+0x2c0>)
 80029c6:	f043 0301 	orr.w	r3, r3, #1
 80029ca:	6613      	str	r3, [r2, #96]	; 0x60
 80029cc:	4b4f      	ldr	r3, [pc, #316]	; (8002b0c <HAL_GPIO_Init+0x2c0>)
 80029ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	60bb      	str	r3, [r7, #8]
 80029d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80029d8:	4a4d      	ldr	r2, [pc, #308]	; (8002b10 <HAL_GPIO_Init+0x2c4>)
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	089b      	lsrs	r3, r3, #2
 80029de:	3302      	adds	r3, #2
 80029e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	f003 0303 	and.w	r3, r3, #3
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	220f      	movs	r2, #15
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	43db      	mvns	r3, r3
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	4013      	ands	r3, r2
 80029fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a02:	d00d      	beq.n	8002a20 <HAL_GPIO_Init+0x1d4>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a43      	ldr	r2, [pc, #268]	; (8002b14 <HAL_GPIO_Init+0x2c8>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d007      	beq.n	8002a1c <HAL_GPIO_Init+0x1d0>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a42      	ldr	r2, [pc, #264]	; (8002b18 <HAL_GPIO_Init+0x2cc>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d101      	bne.n	8002a18 <HAL_GPIO_Init+0x1cc>
 8002a14:	2302      	movs	r3, #2
 8002a16:	e004      	b.n	8002a22 <HAL_GPIO_Init+0x1d6>
 8002a18:	2307      	movs	r3, #7
 8002a1a:	e002      	b.n	8002a22 <HAL_GPIO_Init+0x1d6>
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e000      	b.n	8002a22 <HAL_GPIO_Init+0x1d6>
 8002a20:	2300      	movs	r3, #0
 8002a22:	697a      	ldr	r2, [r7, #20]
 8002a24:	f002 0203 	and.w	r2, r2, #3
 8002a28:	0092      	lsls	r2, r2, #2
 8002a2a:	4093      	lsls	r3, r2
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a32:	4937      	ldr	r1, [pc, #220]	; (8002b10 <HAL_GPIO_Init+0x2c4>)
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	089b      	lsrs	r3, r3, #2
 8002a38:	3302      	adds	r3, #2
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a40:	4b36      	ldr	r3, [pc, #216]	; (8002b1c <HAL_GPIO_Init+0x2d0>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d003      	beq.n	8002a64 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a64:	4a2d      	ldr	r2, [pc, #180]	; (8002b1c <HAL_GPIO_Init+0x2d0>)
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a6a:	4b2c      	ldr	r3, [pc, #176]	; (8002b1c <HAL_GPIO_Init+0x2d0>)
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	43db      	mvns	r3, r3
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	4013      	ands	r3, r2
 8002a78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a8e:	4a23      	ldr	r2, [pc, #140]	; (8002b1c <HAL_GPIO_Init+0x2d0>)
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002a94:	4b21      	ldr	r3, [pc, #132]	; (8002b1c <HAL_GPIO_Init+0x2d0>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d003      	beq.n	8002ab8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ab8:	4a18      	ldr	r2, [pc, #96]	; (8002b1c <HAL_GPIO_Init+0x2d0>)
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002abe:	4b17      	ldr	r3, [pc, #92]	; (8002b1c <HAL_GPIO_Init+0x2d0>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	43db      	mvns	r3, r3
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	4013      	ands	r3, r2
 8002acc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ae2:	4a0e      	ldr	r2, [pc, #56]	; (8002b1c <HAL_GPIO_Init+0x2d0>)
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	3301      	adds	r3, #1
 8002aec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	fa22 f303 	lsr.w	r3, r2, r3
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f47f aeaf 	bne.w	800285c <HAL_GPIO_Init+0x10>
  }
}
 8002afe:	bf00      	nop
 8002b00:	bf00      	nop
 8002b02:	371c      	adds	r7, #28
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	40010000 	.word	0x40010000
 8002b14:	48000400 	.word	0x48000400
 8002b18:	48000800 	.word	0x48000800
 8002b1c:	40010400 	.word	0x40010400

08002b20 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002b24:	4b04      	ldr	r3, [pc, #16]	; (8002b38 <HAL_PWREx_GetVoltageRange+0x18>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	40007000 	.word	0x40007000

08002b3c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b4a:	d130      	bne.n	8002bae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b4c:	4b23      	ldr	r3, [pc, #140]	; (8002bdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b58:	d038      	beq.n	8002bcc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b5a:	4b20      	ldr	r3, [pc, #128]	; (8002bdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b62:	4a1e      	ldr	r2, [pc, #120]	; (8002bdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b68:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b6a:	4b1d      	ldr	r3, [pc, #116]	; (8002be0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2232      	movs	r2, #50	; 0x32
 8002b70:	fb02 f303 	mul.w	r3, r2, r3
 8002b74:	4a1b      	ldr	r2, [pc, #108]	; (8002be4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002b76:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7a:	0c9b      	lsrs	r3, r3, #18
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b80:	e002      	b.n	8002b88 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	3b01      	subs	r3, #1
 8002b86:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b88:	4b14      	ldr	r3, [pc, #80]	; (8002bdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b94:	d102      	bne.n	8002b9c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1f2      	bne.n	8002b82 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b9c:	4b0f      	ldr	r3, [pc, #60]	; (8002bdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b9e:	695b      	ldr	r3, [r3, #20]
 8002ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ba4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ba8:	d110      	bne.n	8002bcc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e00f      	b.n	8002bce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002bae:	4b0b      	ldr	r3, [pc, #44]	; (8002bdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002bb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bba:	d007      	beq.n	8002bcc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002bbc:	4b07      	ldr	r3, [pc, #28]	; (8002bdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002bc4:	4a05      	ldr	r2, [pc, #20]	; (8002bdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3714      	adds	r7, #20
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	40007000 	.word	0x40007000
 8002be0:	200044b8 	.word	0x200044b8
 8002be4:	431bde83 	.word	0x431bde83

08002be8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b088      	sub	sp, #32
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d102      	bne.n	8002bfc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	f000 bc02 	b.w	8003400 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bfc:	4b96      	ldr	r3, [pc, #600]	; (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f003 030c 	and.w	r3, r3, #12
 8002c04:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c06:	4b94      	ldr	r3, [pc, #592]	; (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	f003 0303 	and.w	r3, r3, #3
 8002c0e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0310 	and.w	r3, r3, #16
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f000 80e4 	beq.w	8002de6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d007      	beq.n	8002c34 <HAL_RCC_OscConfig+0x4c>
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	2b0c      	cmp	r3, #12
 8002c28:	f040 808b 	bne.w	8002d42 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	f040 8087 	bne.w	8002d42 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c34:	4b88      	ldr	r3, [pc, #544]	; (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d005      	beq.n	8002c4c <HAL_RCC_OscConfig+0x64>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d101      	bne.n	8002c4c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e3d9      	b.n	8003400 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a1a      	ldr	r2, [r3, #32]
 8002c50:	4b81      	ldr	r3, [pc, #516]	; (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0308 	and.w	r3, r3, #8
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d004      	beq.n	8002c66 <HAL_RCC_OscConfig+0x7e>
 8002c5c:	4b7e      	ldr	r3, [pc, #504]	; (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c64:	e005      	b.n	8002c72 <HAL_RCC_OscConfig+0x8a>
 8002c66:	4b7c      	ldr	r3, [pc, #496]	; (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002c68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c6c:	091b      	lsrs	r3, r3, #4
 8002c6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d223      	bcs.n	8002cbe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a1b      	ldr	r3, [r3, #32]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f000 fd8c 	bl	8003798 <RCC_SetFlashLatencyFromMSIRange>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e3ba      	b.n	8003400 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c8a:	4b73      	ldr	r3, [pc, #460]	; (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a72      	ldr	r2, [pc, #456]	; (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002c90:	f043 0308 	orr.w	r3, r3, #8
 8002c94:	6013      	str	r3, [r2, #0]
 8002c96:	4b70      	ldr	r3, [pc, #448]	; (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	496d      	ldr	r1, [pc, #436]	; (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ca8:	4b6b      	ldr	r3, [pc, #428]	; (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	69db      	ldr	r3, [r3, #28]
 8002cb4:	021b      	lsls	r3, r3, #8
 8002cb6:	4968      	ldr	r1, [pc, #416]	; (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	604b      	str	r3, [r1, #4]
 8002cbc:	e025      	b.n	8002d0a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cbe:	4b66      	ldr	r3, [pc, #408]	; (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a65      	ldr	r2, [pc, #404]	; (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002cc4:	f043 0308 	orr.w	r3, r3, #8
 8002cc8:	6013      	str	r3, [r2, #0]
 8002cca:	4b63      	ldr	r3, [pc, #396]	; (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	4960      	ldr	r1, [pc, #384]	; (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cdc:	4b5e      	ldr	r3, [pc, #376]	; (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	69db      	ldr	r3, [r3, #28]
 8002ce8:	021b      	lsls	r3, r3, #8
 8002cea:	495b      	ldr	r1, [pc, #364]	; (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d109      	bne.n	8002d0a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f000 fd4c 	bl	8003798 <RCC_SetFlashLatencyFromMSIRange>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e37a      	b.n	8003400 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d0a:	f000 fc81 	bl	8003610 <HAL_RCC_GetSysClockFreq>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	4b51      	ldr	r3, [pc, #324]	; (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	091b      	lsrs	r3, r3, #4
 8002d16:	f003 030f 	and.w	r3, r3, #15
 8002d1a:	4950      	ldr	r1, [pc, #320]	; (8002e5c <HAL_RCC_OscConfig+0x274>)
 8002d1c:	5ccb      	ldrb	r3, [r1, r3]
 8002d1e:	f003 031f 	and.w	r3, r3, #31
 8002d22:	fa22 f303 	lsr.w	r3, r2, r3
 8002d26:	4a4e      	ldr	r2, [pc, #312]	; (8002e60 <HAL_RCC_OscConfig+0x278>)
 8002d28:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002d2a:	4b4e      	ldr	r3, [pc, #312]	; (8002e64 <HAL_RCC_OscConfig+0x27c>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fe faf4 	bl	800131c <HAL_InitTick>
 8002d34:	4603      	mov	r3, r0
 8002d36:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002d38:	7bfb      	ldrb	r3, [r7, #15]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d052      	beq.n	8002de4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002d3e:	7bfb      	ldrb	r3, [r7, #15]
 8002d40:	e35e      	b.n	8003400 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d032      	beq.n	8002db0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d4a:	4b43      	ldr	r3, [pc, #268]	; (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a42      	ldr	r2, [pc, #264]	; (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002d50:	f043 0301 	orr.w	r3, r3, #1
 8002d54:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d56:	f7fe fb31 	bl	80013bc <HAL_GetTick>
 8002d5a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d5c:	e008      	b.n	8002d70 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d5e:	f7fe fb2d 	bl	80013bc <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e347      	b.n	8003400 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d70:	4b39      	ldr	r3, [pc, #228]	; (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d0f0      	beq.n	8002d5e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d7c:	4b36      	ldr	r3, [pc, #216]	; (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a35      	ldr	r2, [pc, #212]	; (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002d82:	f043 0308 	orr.w	r3, r3, #8
 8002d86:	6013      	str	r3, [r2, #0]
 8002d88:	4b33      	ldr	r3, [pc, #204]	; (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a1b      	ldr	r3, [r3, #32]
 8002d94:	4930      	ldr	r1, [pc, #192]	; (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d9a:	4b2f      	ldr	r3, [pc, #188]	; (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	021b      	lsls	r3, r3, #8
 8002da8:	492b      	ldr	r1, [pc, #172]	; (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	604b      	str	r3, [r1, #4]
 8002dae:	e01a      	b.n	8002de6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002db0:	4b29      	ldr	r3, [pc, #164]	; (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a28      	ldr	r2, [pc, #160]	; (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002db6:	f023 0301 	bic.w	r3, r3, #1
 8002dba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002dbc:	f7fe fafe 	bl	80013bc <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002dc4:	f7fe fafa 	bl	80013bc <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e314      	b.n	8003400 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002dd6:	4b20      	ldr	r3, [pc, #128]	; (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1f0      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x1dc>
 8002de2:	e000      	b.n	8002de6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002de4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d073      	beq.n	8002eda <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	2b08      	cmp	r3, #8
 8002df6:	d005      	beq.n	8002e04 <HAL_RCC_OscConfig+0x21c>
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	2b0c      	cmp	r3, #12
 8002dfc:	d10e      	bne.n	8002e1c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	2b03      	cmp	r3, #3
 8002e02:	d10b      	bne.n	8002e1c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e04:	4b14      	ldr	r3, [pc, #80]	; (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d063      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x2f0>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d15f      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e2f1      	b.n	8003400 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e24:	d106      	bne.n	8002e34 <HAL_RCC_OscConfig+0x24c>
 8002e26:	4b0c      	ldr	r3, [pc, #48]	; (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a0b      	ldr	r2, [pc, #44]	; (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e30:	6013      	str	r3, [r2, #0]
 8002e32:	e025      	b.n	8002e80 <HAL_RCC_OscConfig+0x298>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e3c:	d114      	bne.n	8002e68 <HAL_RCC_OscConfig+0x280>
 8002e3e:	4b06      	ldr	r3, [pc, #24]	; (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a05      	ldr	r2, [pc, #20]	; (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002e44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e48:	6013      	str	r3, [r2, #0]
 8002e4a:	4b03      	ldr	r3, [pc, #12]	; (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a02      	ldr	r2, [pc, #8]	; (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e54:	6013      	str	r3, [r2, #0]
 8002e56:	e013      	b.n	8002e80 <HAL_RCC_OscConfig+0x298>
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	0800637c 	.word	0x0800637c
 8002e60:	200044b8 	.word	0x200044b8
 8002e64:	200044bc 	.word	0x200044bc
 8002e68:	4ba0      	ldr	r3, [pc, #640]	; (80030ec <HAL_RCC_OscConfig+0x504>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a9f      	ldr	r2, [pc, #636]	; (80030ec <HAL_RCC_OscConfig+0x504>)
 8002e6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e72:	6013      	str	r3, [r2, #0]
 8002e74:	4b9d      	ldr	r3, [pc, #628]	; (80030ec <HAL_RCC_OscConfig+0x504>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a9c      	ldr	r2, [pc, #624]	; (80030ec <HAL_RCC_OscConfig+0x504>)
 8002e7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d013      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e88:	f7fe fa98 	bl	80013bc <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e90:	f7fe fa94 	bl	80013bc <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b64      	cmp	r3, #100	; 0x64
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e2ae      	b.n	8003400 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ea2:	4b92      	ldr	r3, [pc, #584]	; (80030ec <HAL_RCC_OscConfig+0x504>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d0f0      	beq.n	8002e90 <HAL_RCC_OscConfig+0x2a8>
 8002eae:	e014      	b.n	8002eda <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb0:	f7fe fa84 	bl	80013bc <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eb8:	f7fe fa80 	bl	80013bc <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b64      	cmp	r3, #100	; 0x64
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e29a      	b.n	8003400 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002eca:	4b88      	ldr	r3, [pc, #544]	; (80030ec <HAL_RCC_OscConfig+0x504>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1f0      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x2d0>
 8002ed6:	e000      	b.n	8002eda <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ed8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d060      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	2b04      	cmp	r3, #4
 8002eea:	d005      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x310>
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	2b0c      	cmp	r3, #12
 8002ef0:	d119      	bne.n	8002f26 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d116      	bne.n	8002f26 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ef8:	4b7c      	ldr	r3, [pc, #496]	; (80030ec <HAL_RCC_OscConfig+0x504>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d005      	beq.n	8002f10 <HAL_RCC_OscConfig+0x328>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d101      	bne.n	8002f10 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e277      	b.n	8003400 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f10:	4b76      	ldr	r3, [pc, #472]	; (80030ec <HAL_RCC_OscConfig+0x504>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	061b      	lsls	r3, r3, #24
 8002f1e:	4973      	ldr	r1, [pc, #460]	; (80030ec <HAL_RCC_OscConfig+0x504>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f24:	e040      	b.n	8002fa8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d023      	beq.n	8002f76 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f2e:	4b6f      	ldr	r3, [pc, #444]	; (80030ec <HAL_RCC_OscConfig+0x504>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a6e      	ldr	r2, [pc, #440]	; (80030ec <HAL_RCC_OscConfig+0x504>)
 8002f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3a:	f7fe fa3f 	bl	80013bc <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f40:	e008      	b.n	8002f54 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f42:	f7fe fa3b 	bl	80013bc <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e255      	b.n	8003400 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f54:	4b65      	ldr	r3, [pc, #404]	; (80030ec <HAL_RCC_OscConfig+0x504>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d0f0      	beq.n	8002f42 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f60:	4b62      	ldr	r3, [pc, #392]	; (80030ec <HAL_RCC_OscConfig+0x504>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	061b      	lsls	r3, r3, #24
 8002f6e:	495f      	ldr	r1, [pc, #380]	; (80030ec <HAL_RCC_OscConfig+0x504>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	604b      	str	r3, [r1, #4]
 8002f74:	e018      	b.n	8002fa8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f76:	4b5d      	ldr	r3, [pc, #372]	; (80030ec <HAL_RCC_OscConfig+0x504>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a5c      	ldr	r2, [pc, #368]	; (80030ec <HAL_RCC_OscConfig+0x504>)
 8002f7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f82:	f7fe fa1b 	bl	80013bc <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f88:	e008      	b.n	8002f9c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f8a:	f7fe fa17 	bl	80013bc <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e231      	b.n	8003400 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f9c:	4b53      	ldr	r3, [pc, #332]	; (80030ec <HAL_RCC_OscConfig+0x504>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1f0      	bne.n	8002f8a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0308 	and.w	r3, r3, #8
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d03c      	beq.n	800302e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d01c      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fbc:	4b4b      	ldr	r3, [pc, #300]	; (80030ec <HAL_RCC_OscConfig+0x504>)
 8002fbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fc2:	4a4a      	ldr	r2, [pc, #296]	; (80030ec <HAL_RCC_OscConfig+0x504>)
 8002fc4:	f043 0301 	orr.w	r3, r3, #1
 8002fc8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fcc:	f7fe f9f6 	bl	80013bc <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fd4:	f7fe f9f2 	bl	80013bc <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e20c      	b.n	8003400 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fe6:	4b41      	ldr	r3, [pc, #260]	; (80030ec <HAL_RCC_OscConfig+0x504>)
 8002fe8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d0ef      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x3ec>
 8002ff4:	e01b      	b.n	800302e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ff6:	4b3d      	ldr	r3, [pc, #244]	; (80030ec <HAL_RCC_OscConfig+0x504>)
 8002ff8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ffc:	4a3b      	ldr	r2, [pc, #236]	; (80030ec <HAL_RCC_OscConfig+0x504>)
 8002ffe:	f023 0301 	bic.w	r3, r3, #1
 8003002:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003006:	f7fe f9d9 	bl	80013bc <HAL_GetTick>
 800300a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800300c:	e008      	b.n	8003020 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800300e:	f7fe f9d5 	bl	80013bc <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	2b02      	cmp	r3, #2
 800301a:	d901      	bls.n	8003020 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e1ef      	b.n	8003400 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003020:	4b32      	ldr	r3, [pc, #200]	; (80030ec <HAL_RCC_OscConfig+0x504>)
 8003022:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1ef      	bne.n	800300e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0304 	and.w	r3, r3, #4
 8003036:	2b00      	cmp	r3, #0
 8003038:	f000 80a6 	beq.w	8003188 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800303c:	2300      	movs	r3, #0
 800303e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003040:	4b2a      	ldr	r3, [pc, #168]	; (80030ec <HAL_RCC_OscConfig+0x504>)
 8003042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d10d      	bne.n	8003068 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800304c:	4b27      	ldr	r3, [pc, #156]	; (80030ec <HAL_RCC_OscConfig+0x504>)
 800304e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003050:	4a26      	ldr	r2, [pc, #152]	; (80030ec <HAL_RCC_OscConfig+0x504>)
 8003052:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003056:	6593      	str	r3, [r2, #88]	; 0x58
 8003058:	4b24      	ldr	r3, [pc, #144]	; (80030ec <HAL_RCC_OscConfig+0x504>)
 800305a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800305c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003060:	60bb      	str	r3, [r7, #8]
 8003062:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003064:	2301      	movs	r3, #1
 8003066:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003068:	4b21      	ldr	r3, [pc, #132]	; (80030f0 <HAL_RCC_OscConfig+0x508>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003070:	2b00      	cmp	r3, #0
 8003072:	d118      	bne.n	80030a6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003074:	4b1e      	ldr	r3, [pc, #120]	; (80030f0 <HAL_RCC_OscConfig+0x508>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a1d      	ldr	r2, [pc, #116]	; (80030f0 <HAL_RCC_OscConfig+0x508>)
 800307a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800307e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003080:	f7fe f99c 	bl	80013bc <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003088:	f7fe f998 	bl	80013bc <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e1b2      	b.n	8003400 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800309a:	4b15      	ldr	r3, [pc, #84]	; (80030f0 <HAL_RCC_OscConfig+0x508>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d0f0      	beq.n	8003088 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d108      	bne.n	80030c0 <HAL_RCC_OscConfig+0x4d8>
 80030ae:	4b0f      	ldr	r3, [pc, #60]	; (80030ec <HAL_RCC_OscConfig+0x504>)
 80030b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b4:	4a0d      	ldr	r2, [pc, #52]	; (80030ec <HAL_RCC_OscConfig+0x504>)
 80030b6:	f043 0301 	orr.w	r3, r3, #1
 80030ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030be:	e029      	b.n	8003114 <HAL_RCC_OscConfig+0x52c>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	2b05      	cmp	r3, #5
 80030c6:	d115      	bne.n	80030f4 <HAL_RCC_OscConfig+0x50c>
 80030c8:	4b08      	ldr	r3, [pc, #32]	; (80030ec <HAL_RCC_OscConfig+0x504>)
 80030ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ce:	4a07      	ldr	r2, [pc, #28]	; (80030ec <HAL_RCC_OscConfig+0x504>)
 80030d0:	f043 0304 	orr.w	r3, r3, #4
 80030d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030d8:	4b04      	ldr	r3, [pc, #16]	; (80030ec <HAL_RCC_OscConfig+0x504>)
 80030da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030de:	4a03      	ldr	r2, [pc, #12]	; (80030ec <HAL_RCC_OscConfig+0x504>)
 80030e0:	f043 0301 	orr.w	r3, r3, #1
 80030e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030e8:	e014      	b.n	8003114 <HAL_RCC_OscConfig+0x52c>
 80030ea:	bf00      	nop
 80030ec:	40021000 	.word	0x40021000
 80030f0:	40007000 	.word	0x40007000
 80030f4:	4b9a      	ldr	r3, [pc, #616]	; (8003360 <HAL_RCC_OscConfig+0x778>)
 80030f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fa:	4a99      	ldr	r2, [pc, #612]	; (8003360 <HAL_RCC_OscConfig+0x778>)
 80030fc:	f023 0301 	bic.w	r3, r3, #1
 8003100:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003104:	4b96      	ldr	r3, [pc, #600]	; (8003360 <HAL_RCC_OscConfig+0x778>)
 8003106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800310a:	4a95      	ldr	r2, [pc, #596]	; (8003360 <HAL_RCC_OscConfig+0x778>)
 800310c:	f023 0304 	bic.w	r3, r3, #4
 8003110:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d016      	beq.n	800314a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800311c:	f7fe f94e 	bl	80013bc <HAL_GetTick>
 8003120:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003122:	e00a      	b.n	800313a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003124:	f7fe f94a 	bl	80013bc <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003132:	4293      	cmp	r3, r2
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e162      	b.n	8003400 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800313a:	4b89      	ldr	r3, [pc, #548]	; (8003360 <HAL_RCC_OscConfig+0x778>)
 800313c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d0ed      	beq.n	8003124 <HAL_RCC_OscConfig+0x53c>
 8003148:	e015      	b.n	8003176 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800314a:	f7fe f937 	bl	80013bc <HAL_GetTick>
 800314e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003150:	e00a      	b.n	8003168 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003152:	f7fe f933 	bl	80013bc <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003160:	4293      	cmp	r3, r2
 8003162:	d901      	bls.n	8003168 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e14b      	b.n	8003400 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003168:	4b7d      	ldr	r3, [pc, #500]	; (8003360 <HAL_RCC_OscConfig+0x778>)
 800316a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1ed      	bne.n	8003152 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003176:	7ffb      	ldrb	r3, [r7, #31]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d105      	bne.n	8003188 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800317c:	4b78      	ldr	r3, [pc, #480]	; (8003360 <HAL_RCC_OscConfig+0x778>)
 800317e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003180:	4a77      	ldr	r2, [pc, #476]	; (8003360 <HAL_RCC_OscConfig+0x778>)
 8003182:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003186:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0320 	and.w	r3, r3, #32
 8003190:	2b00      	cmp	r3, #0
 8003192:	d03c      	beq.n	800320e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	2b00      	cmp	r3, #0
 800319a:	d01c      	beq.n	80031d6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800319c:	4b70      	ldr	r3, [pc, #448]	; (8003360 <HAL_RCC_OscConfig+0x778>)
 800319e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031a2:	4a6f      	ldr	r2, [pc, #444]	; (8003360 <HAL_RCC_OscConfig+0x778>)
 80031a4:	f043 0301 	orr.w	r3, r3, #1
 80031a8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ac:	f7fe f906 	bl	80013bc <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031b4:	f7fe f902 	bl	80013bc <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e11c      	b.n	8003400 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031c6:	4b66      	ldr	r3, [pc, #408]	; (8003360 <HAL_RCC_OscConfig+0x778>)
 80031c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d0ef      	beq.n	80031b4 <HAL_RCC_OscConfig+0x5cc>
 80031d4:	e01b      	b.n	800320e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80031d6:	4b62      	ldr	r3, [pc, #392]	; (8003360 <HAL_RCC_OscConfig+0x778>)
 80031d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031dc:	4a60      	ldr	r2, [pc, #384]	; (8003360 <HAL_RCC_OscConfig+0x778>)
 80031de:	f023 0301 	bic.w	r3, r3, #1
 80031e2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e6:	f7fe f8e9 	bl	80013bc <HAL_GetTick>
 80031ea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031ec:	e008      	b.n	8003200 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031ee:	f7fe f8e5 	bl	80013bc <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d901      	bls.n	8003200 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e0ff      	b.n	8003400 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003200:	4b57      	ldr	r3, [pc, #348]	; (8003360 <HAL_RCC_OscConfig+0x778>)
 8003202:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1ef      	bne.n	80031ee <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003212:	2b00      	cmp	r3, #0
 8003214:	f000 80f3 	beq.w	80033fe <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321c:	2b02      	cmp	r3, #2
 800321e:	f040 80c9 	bne.w	80033b4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003222:	4b4f      	ldr	r3, [pc, #316]	; (8003360 <HAL_RCC_OscConfig+0x778>)
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	f003 0203 	and.w	r2, r3, #3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003232:	429a      	cmp	r2, r3
 8003234:	d12c      	bne.n	8003290 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003240:	3b01      	subs	r3, #1
 8003242:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003244:	429a      	cmp	r2, r3
 8003246:	d123      	bne.n	8003290 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003252:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003254:	429a      	cmp	r2, r3
 8003256:	d11b      	bne.n	8003290 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003262:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003264:	429a      	cmp	r2, r3
 8003266:	d113      	bne.n	8003290 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003272:	085b      	lsrs	r3, r3, #1
 8003274:	3b01      	subs	r3, #1
 8003276:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003278:	429a      	cmp	r2, r3
 800327a:	d109      	bne.n	8003290 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003286:	085b      	lsrs	r3, r3, #1
 8003288:	3b01      	subs	r3, #1
 800328a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800328c:	429a      	cmp	r2, r3
 800328e:	d06b      	beq.n	8003368 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	2b0c      	cmp	r3, #12
 8003294:	d062      	beq.n	800335c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003296:	4b32      	ldr	r3, [pc, #200]	; (8003360 <HAL_RCC_OscConfig+0x778>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e0ac      	b.n	8003400 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80032a6:	4b2e      	ldr	r3, [pc, #184]	; (8003360 <HAL_RCC_OscConfig+0x778>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a2d      	ldr	r2, [pc, #180]	; (8003360 <HAL_RCC_OscConfig+0x778>)
 80032ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032b0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032b2:	f7fe f883 	bl	80013bc <HAL_GetTick>
 80032b6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032b8:	e008      	b.n	80032cc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ba:	f7fe f87f 	bl	80013bc <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d901      	bls.n	80032cc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e099      	b.n	8003400 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032cc:	4b24      	ldr	r3, [pc, #144]	; (8003360 <HAL_RCC_OscConfig+0x778>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d1f0      	bne.n	80032ba <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032d8:	4b21      	ldr	r3, [pc, #132]	; (8003360 <HAL_RCC_OscConfig+0x778>)
 80032da:	68da      	ldr	r2, [r3, #12]
 80032dc:	4b21      	ldr	r3, [pc, #132]	; (8003364 <HAL_RCC_OscConfig+0x77c>)
 80032de:	4013      	ands	r3, r2
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80032e8:	3a01      	subs	r2, #1
 80032ea:	0112      	lsls	r2, r2, #4
 80032ec:	4311      	orrs	r1, r2
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032f2:	0212      	lsls	r2, r2, #8
 80032f4:	4311      	orrs	r1, r2
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80032fa:	0852      	lsrs	r2, r2, #1
 80032fc:	3a01      	subs	r2, #1
 80032fe:	0552      	lsls	r2, r2, #21
 8003300:	4311      	orrs	r1, r2
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003306:	0852      	lsrs	r2, r2, #1
 8003308:	3a01      	subs	r2, #1
 800330a:	0652      	lsls	r2, r2, #25
 800330c:	4311      	orrs	r1, r2
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003312:	06d2      	lsls	r2, r2, #27
 8003314:	430a      	orrs	r2, r1
 8003316:	4912      	ldr	r1, [pc, #72]	; (8003360 <HAL_RCC_OscConfig+0x778>)
 8003318:	4313      	orrs	r3, r2
 800331a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800331c:	4b10      	ldr	r3, [pc, #64]	; (8003360 <HAL_RCC_OscConfig+0x778>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a0f      	ldr	r2, [pc, #60]	; (8003360 <HAL_RCC_OscConfig+0x778>)
 8003322:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003326:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003328:	4b0d      	ldr	r3, [pc, #52]	; (8003360 <HAL_RCC_OscConfig+0x778>)
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	4a0c      	ldr	r2, [pc, #48]	; (8003360 <HAL_RCC_OscConfig+0x778>)
 800332e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003332:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003334:	f7fe f842 	bl	80013bc <HAL_GetTick>
 8003338:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800333a:	e008      	b.n	800334e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800333c:	f7fe f83e 	bl	80013bc <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d901      	bls.n	800334e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e058      	b.n	8003400 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800334e:	4b04      	ldr	r3, [pc, #16]	; (8003360 <HAL_RCC_OscConfig+0x778>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d0f0      	beq.n	800333c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800335a:	e050      	b.n	80033fe <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e04f      	b.n	8003400 <HAL_RCC_OscConfig+0x818>
 8003360:	40021000 	.word	0x40021000
 8003364:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003368:	4b27      	ldr	r3, [pc, #156]	; (8003408 <HAL_RCC_OscConfig+0x820>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d144      	bne.n	80033fe <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003374:	4b24      	ldr	r3, [pc, #144]	; (8003408 <HAL_RCC_OscConfig+0x820>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a23      	ldr	r2, [pc, #140]	; (8003408 <HAL_RCC_OscConfig+0x820>)
 800337a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800337e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003380:	4b21      	ldr	r3, [pc, #132]	; (8003408 <HAL_RCC_OscConfig+0x820>)
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	4a20      	ldr	r2, [pc, #128]	; (8003408 <HAL_RCC_OscConfig+0x820>)
 8003386:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800338a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800338c:	f7fe f816 	bl	80013bc <HAL_GetTick>
 8003390:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003392:	e008      	b.n	80033a6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003394:	f7fe f812 	bl	80013bc <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e02c      	b.n	8003400 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033a6:	4b18      	ldr	r3, [pc, #96]	; (8003408 <HAL_RCC_OscConfig+0x820>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d0f0      	beq.n	8003394 <HAL_RCC_OscConfig+0x7ac>
 80033b2:	e024      	b.n	80033fe <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	2b0c      	cmp	r3, #12
 80033b8:	d01f      	beq.n	80033fa <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ba:	4b13      	ldr	r3, [pc, #76]	; (8003408 <HAL_RCC_OscConfig+0x820>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a12      	ldr	r2, [pc, #72]	; (8003408 <HAL_RCC_OscConfig+0x820>)
 80033c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c6:	f7fd fff9 	bl	80013bc <HAL_GetTick>
 80033ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033cc:	e008      	b.n	80033e0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ce:	f7fd fff5 	bl	80013bc <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d901      	bls.n	80033e0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e00f      	b.n	8003400 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033e0:	4b09      	ldr	r3, [pc, #36]	; (8003408 <HAL_RCC_OscConfig+0x820>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1f0      	bne.n	80033ce <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80033ec:	4b06      	ldr	r3, [pc, #24]	; (8003408 <HAL_RCC_OscConfig+0x820>)
 80033ee:	68da      	ldr	r2, [r3, #12]
 80033f0:	4905      	ldr	r1, [pc, #20]	; (8003408 <HAL_RCC_OscConfig+0x820>)
 80033f2:	4b06      	ldr	r3, [pc, #24]	; (800340c <HAL_RCC_OscConfig+0x824>)
 80033f4:	4013      	ands	r3, r2
 80033f6:	60cb      	str	r3, [r1, #12]
 80033f8:	e001      	b.n	80033fe <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e000      	b.n	8003400 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	3720      	adds	r7, #32
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	40021000 	.word	0x40021000
 800340c:	feeefffc 	.word	0xfeeefffc

08003410 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d101      	bne.n	8003424 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e0e7      	b.n	80035f4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003424:	4b75      	ldr	r3, [pc, #468]	; (80035fc <HAL_RCC_ClockConfig+0x1ec>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0307 	and.w	r3, r3, #7
 800342c:	683a      	ldr	r2, [r7, #0]
 800342e:	429a      	cmp	r2, r3
 8003430:	d910      	bls.n	8003454 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003432:	4b72      	ldr	r3, [pc, #456]	; (80035fc <HAL_RCC_ClockConfig+0x1ec>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f023 0207 	bic.w	r2, r3, #7
 800343a:	4970      	ldr	r1, [pc, #448]	; (80035fc <HAL_RCC_ClockConfig+0x1ec>)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	4313      	orrs	r3, r2
 8003440:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003442:	4b6e      	ldr	r3, [pc, #440]	; (80035fc <HAL_RCC_ClockConfig+0x1ec>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0307 	and.w	r3, r3, #7
 800344a:	683a      	ldr	r2, [r7, #0]
 800344c:	429a      	cmp	r2, r3
 800344e:	d001      	beq.n	8003454 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e0cf      	b.n	80035f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d010      	beq.n	8003482 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	4b66      	ldr	r3, [pc, #408]	; (8003600 <HAL_RCC_ClockConfig+0x1f0>)
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800346c:	429a      	cmp	r2, r3
 800346e:	d908      	bls.n	8003482 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003470:	4b63      	ldr	r3, [pc, #396]	; (8003600 <HAL_RCC_ClockConfig+0x1f0>)
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	4960      	ldr	r1, [pc, #384]	; (8003600 <HAL_RCC_ClockConfig+0x1f0>)
 800347e:	4313      	orrs	r3, r2
 8003480:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b00      	cmp	r3, #0
 800348c:	d04c      	beq.n	8003528 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	2b03      	cmp	r3, #3
 8003494:	d107      	bne.n	80034a6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003496:	4b5a      	ldr	r3, [pc, #360]	; (8003600 <HAL_RCC_ClockConfig+0x1f0>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d121      	bne.n	80034e6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e0a6      	b.n	80035f4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d107      	bne.n	80034be <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034ae:	4b54      	ldr	r3, [pc, #336]	; (8003600 <HAL_RCC_ClockConfig+0x1f0>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d115      	bne.n	80034e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e09a      	b.n	80035f4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d107      	bne.n	80034d6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034c6:	4b4e      	ldr	r3, [pc, #312]	; (8003600 <HAL_RCC_ClockConfig+0x1f0>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d109      	bne.n	80034e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e08e      	b.n	80035f4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034d6:	4b4a      	ldr	r3, [pc, #296]	; (8003600 <HAL_RCC_ClockConfig+0x1f0>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e086      	b.n	80035f4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034e6:	4b46      	ldr	r3, [pc, #280]	; (8003600 <HAL_RCC_ClockConfig+0x1f0>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f023 0203 	bic.w	r2, r3, #3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	4943      	ldr	r1, [pc, #268]	; (8003600 <HAL_RCC_ClockConfig+0x1f0>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034f8:	f7fd ff60 	bl	80013bc <HAL_GetTick>
 80034fc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034fe:	e00a      	b.n	8003516 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003500:	f7fd ff5c 	bl	80013bc <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	f241 3288 	movw	r2, #5000	; 0x1388
 800350e:	4293      	cmp	r3, r2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e06e      	b.n	80035f4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003516:	4b3a      	ldr	r3, [pc, #232]	; (8003600 <HAL_RCC_ClockConfig+0x1f0>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 020c 	and.w	r2, r3, #12
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	429a      	cmp	r2, r3
 8003526:	d1eb      	bne.n	8003500 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d010      	beq.n	8003556 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689a      	ldr	r2, [r3, #8]
 8003538:	4b31      	ldr	r3, [pc, #196]	; (8003600 <HAL_RCC_ClockConfig+0x1f0>)
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003540:	429a      	cmp	r2, r3
 8003542:	d208      	bcs.n	8003556 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003544:	4b2e      	ldr	r3, [pc, #184]	; (8003600 <HAL_RCC_ClockConfig+0x1f0>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	492b      	ldr	r1, [pc, #172]	; (8003600 <HAL_RCC_ClockConfig+0x1f0>)
 8003552:	4313      	orrs	r3, r2
 8003554:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003556:	4b29      	ldr	r3, [pc, #164]	; (80035fc <HAL_RCC_ClockConfig+0x1ec>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0307 	and.w	r3, r3, #7
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	429a      	cmp	r2, r3
 8003562:	d210      	bcs.n	8003586 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003564:	4b25      	ldr	r3, [pc, #148]	; (80035fc <HAL_RCC_ClockConfig+0x1ec>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f023 0207 	bic.w	r2, r3, #7
 800356c:	4923      	ldr	r1, [pc, #140]	; (80035fc <HAL_RCC_ClockConfig+0x1ec>)
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	4313      	orrs	r3, r2
 8003572:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003574:	4b21      	ldr	r3, [pc, #132]	; (80035fc <HAL_RCC_ClockConfig+0x1ec>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0307 	and.w	r3, r3, #7
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	429a      	cmp	r2, r3
 8003580:	d001      	beq.n	8003586 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e036      	b.n	80035f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0304 	and.w	r3, r3, #4
 800358e:	2b00      	cmp	r3, #0
 8003590:	d008      	beq.n	80035a4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003592:	4b1b      	ldr	r3, [pc, #108]	; (8003600 <HAL_RCC_ClockConfig+0x1f0>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	4918      	ldr	r1, [pc, #96]	; (8003600 <HAL_RCC_ClockConfig+0x1f0>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0308 	and.w	r3, r3, #8
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d009      	beq.n	80035c4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035b0:	4b13      	ldr	r3, [pc, #76]	; (8003600 <HAL_RCC_ClockConfig+0x1f0>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	00db      	lsls	r3, r3, #3
 80035be:	4910      	ldr	r1, [pc, #64]	; (8003600 <HAL_RCC_ClockConfig+0x1f0>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035c4:	f000 f824 	bl	8003610 <HAL_RCC_GetSysClockFreq>
 80035c8:	4602      	mov	r2, r0
 80035ca:	4b0d      	ldr	r3, [pc, #52]	; (8003600 <HAL_RCC_ClockConfig+0x1f0>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	091b      	lsrs	r3, r3, #4
 80035d0:	f003 030f 	and.w	r3, r3, #15
 80035d4:	490b      	ldr	r1, [pc, #44]	; (8003604 <HAL_RCC_ClockConfig+0x1f4>)
 80035d6:	5ccb      	ldrb	r3, [r1, r3]
 80035d8:	f003 031f 	and.w	r3, r3, #31
 80035dc:	fa22 f303 	lsr.w	r3, r2, r3
 80035e0:	4a09      	ldr	r2, [pc, #36]	; (8003608 <HAL_RCC_ClockConfig+0x1f8>)
 80035e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80035e4:	4b09      	ldr	r3, [pc, #36]	; (800360c <HAL_RCC_ClockConfig+0x1fc>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7fd fe97 	bl	800131c <HAL_InitTick>
 80035ee:	4603      	mov	r3, r0
 80035f0:	72fb      	strb	r3, [r7, #11]

  return status;
 80035f2:	7afb      	ldrb	r3, [r7, #11]
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	40022000 	.word	0x40022000
 8003600:	40021000 	.word	0x40021000
 8003604:	0800637c 	.word	0x0800637c
 8003608:	200044b8 	.word	0x200044b8
 800360c:	200044bc 	.word	0x200044bc

08003610 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003610:	b480      	push	{r7}
 8003612:	b089      	sub	sp, #36	; 0x24
 8003614:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003616:	2300      	movs	r3, #0
 8003618:	61fb      	str	r3, [r7, #28]
 800361a:	2300      	movs	r3, #0
 800361c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800361e:	4b3e      	ldr	r3, [pc, #248]	; (8003718 <HAL_RCC_GetSysClockFreq+0x108>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f003 030c 	and.w	r3, r3, #12
 8003626:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003628:	4b3b      	ldr	r3, [pc, #236]	; (8003718 <HAL_RCC_GetSysClockFreq+0x108>)
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	f003 0303 	and.w	r3, r3, #3
 8003630:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d005      	beq.n	8003644 <HAL_RCC_GetSysClockFreq+0x34>
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	2b0c      	cmp	r3, #12
 800363c:	d121      	bne.n	8003682 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d11e      	bne.n	8003682 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003644:	4b34      	ldr	r3, [pc, #208]	; (8003718 <HAL_RCC_GetSysClockFreq+0x108>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0308 	and.w	r3, r3, #8
 800364c:	2b00      	cmp	r3, #0
 800364e:	d107      	bne.n	8003660 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003650:	4b31      	ldr	r3, [pc, #196]	; (8003718 <HAL_RCC_GetSysClockFreq+0x108>)
 8003652:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003656:	0a1b      	lsrs	r3, r3, #8
 8003658:	f003 030f 	and.w	r3, r3, #15
 800365c:	61fb      	str	r3, [r7, #28]
 800365e:	e005      	b.n	800366c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003660:	4b2d      	ldr	r3, [pc, #180]	; (8003718 <HAL_RCC_GetSysClockFreq+0x108>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	091b      	lsrs	r3, r3, #4
 8003666:	f003 030f 	and.w	r3, r3, #15
 800366a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800366c:	4a2b      	ldr	r2, [pc, #172]	; (800371c <HAL_RCC_GetSysClockFreq+0x10c>)
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003674:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d10d      	bne.n	8003698 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003680:	e00a      	b.n	8003698 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	2b04      	cmp	r3, #4
 8003686:	d102      	bne.n	800368e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003688:	4b25      	ldr	r3, [pc, #148]	; (8003720 <HAL_RCC_GetSysClockFreq+0x110>)
 800368a:	61bb      	str	r3, [r7, #24]
 800368c:	e004      	b.n	8003698 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	2b08      	cmp	r3, #8
 8003692:	d101      	bne.n	8003698 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003694:	4b23      	ldr	r3, [pc, #140]	; (8003724 <HAL_RCC_GetSysClockFreq+0x114>)
 8003696:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	2b0c      	cmp	r3, #12
 800369c:	d134      	bne.n	8003708 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800369e:	4b1e      	ldr	r3, [pc, #120]	; (8003718 <HAL_RCC_GetSysClockFreq+0x108>)
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	f003 0303 	and.w	r3, r3, #3
 80036a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d003      	beq.n	80036b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	2b03      	cmp	r3, #3
 80036b2:	d003      	beq.n	80036bc <HAL_RCC_GetSysClockFreq+0xac>
 80036b4:	e005      	b.n	80036c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80036b6:	4b1a      	ldr	r3, [pc, #104]	; (8003720 <HAL_RCC_GetSysClockFreq+0x110>)
 80036b8:	617b      	str	r3, [r7, #20]
      break;
 80036ba:	e005      	b.n	80036c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80036bc:	4b19      	ldr	r3, [pc, #100]	; (8003724 <HAL_RCC_GetSysClockFreq+0x114>)
 80036be:	617b      	str	r3, [r7, #20]
      break;
 80036c0:	e002      	b.n	80036c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	617b      	str	r3, [r7, #20]
      break;
 80036c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036c8:	4b13      	ldr	r3, [pc, #76]	; (8003718 <HAL_RCC_GetSysClockFreq+0x108>)
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	091b      	lsrs	r3, r3, #4
 80036ce:	f003 0307 	and.w	r3, r3, #7
 80036d2:	3301      	adds	r3, #1
 80036d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80036d6:	4b10      	ldr	r3, [pc, #64]	; (8003718 <HAL_RCC_GetSysClockFreq+0x108>)
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	0a1b      	lsrs	r3, r3, #8
 80036dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	fb03 f202 	mul.w	r2, r3, r2
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036ee:	4b0a      	ldr	r3, [pc, #40]	; (8003718 <HAL_RCC_GetSysClockFreq+0x108>)
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	0e5b      	lsrs	r3, r3, #25
 80036f4:	f003 0303 	and.w	r3, r3, #3
 80036f8:	3301      	adds	r3, #1
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	fbb2 f3f3 	udiv	r3, r2, r3
 8003706:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003708:	69bb      	ldr	r3, [r7, #24]
}
 800370a:	4618      	mov	r0, r3
 800370c:	3724      	adds	r7, #36	; 0x24
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	40021000 	.word	0x40021000
 800371c:	08006394 	.word	0x08006394
 8003720:	00f42400 	.word	0x00f42400
 8003724:	007a1200 	.word	0x007a1200

08003728 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800372c:	4b03      	ldr	r3, [pc, #12]	; (800373c <HAL_RCC_GetHCLKFreq+0x14>)
 800372e:	681b      	ldr	r3, [r3, #0]
}
 8003730:	4618      	mov	r0, r3
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	200044b8 	.word	0x200044b8

08003740 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003744:	f7ff fff0 	bl	8003728 <HAL_RCC_GetHCLKFreq>
 8003748:	4602      	mov	r2, r0
 800374a:	4b06      	ldr	r3, [pc, #24]	; (8003764 <HAL_RCC_GetPCLK1Freq+0x24>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	0a1b      	lsrs	r3, r3, #8
 8003750:	f003 0307 	and.w	r3, r3, #7
 8003754:	4904      	ldr	r1, [pc, #16]	; (8003768 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003756:	5ccb      	ldrb	r3, [r1, r3]
 8003758:	f003 031f 	and.w	r3, r3, #31
 800375c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003760:	4618      	mov	r0, r3
 8003762:	bd80      	pop	{r7, pc}
 8003764:	40021000 	.word	0x40021000
 8003768:	0800638c 	.word	0x0800638c

0800376c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003770:	f7ff ffda 	bl	8003728 <HAL_RCC_GetHCLKFreq>
 8003774:	4602      	mov	r2, r0
 8003776:	4b06      	ldr	r3, [pc, #24]	; (8003790 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	0adb      	lsrs	r3, r3, #11
 800377c:	f003 0307 	and.w	r3, r3, #7
 8003780:	4904      	ldr	r1, [pc, #16]	; (8003794 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003782:	5ccb      	ldrb	r3, [r1, r3]
 8003784:	f003 031f 	and.w	r3, r3, #31
 8003788:	fa22 f303 	lsr.w	r3, r2, r3
}
 800378c:	4618      	mov	r0, r3
 800378e:	bd80      	pop	{r7, pc}
 8003790:	40021000 	.word	0x40021000
 8003794:	0800638c 	.word	0x0800638c

08003798 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80037a0:	2300      	movs	r3, #0
 80037a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80037a4:	4b2a      	ldr	r3, [pc, #168]	; (8003850 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d003      	beq.n	80037b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80037b0:	f7ff f9b6 	bl	8002b20 <HAL_PWREx_GetVoltageRange>
 80037b4:	6178      	str	r0, [r7, #20]
 80037b6:	e014      	b.n	80037e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80037b8:	4b25      	ldr	r3, [pc, #148]	; (8003850 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037bc:	4a24      	ldr	r2, [pc, #144]	; (8003850 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037c2:	6593      	str	r3, [r2, #88]	; 0x58
 80037c4:	4b22      	ldr	r3, [pc, #136]	; (8003850 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037cc:	60fb      	str	r3, [r7, #12]
 80037ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80037d0:	f7ff f9a6 	bl	8002b20 <HAL_PWREx_GetVoltageRange>
 80037d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80037d6:	4b1e      	ldr	r3, [pc, #120]	; (8003850 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037da:	4a1d      	ldr	r2, [pc, #116]	; (8003850 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037e0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037e8:	d10b      	bne.n	8003802 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2b80      	cmp	r3, #128	; 0x80
 80037ee:	d919      	bls.n	8003824 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2ba0      	cmp	r3, #160	; 0xa0
 80037f4:	d902      	bls.n	80037fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80037f6:	2302      	movs	r3, #2
 80037f8:	613b      	str	r3, [r7, #16]
 80037fa:	e013      	b.n	8003824 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80037fc:	2301      	movs	r3, #1
 80037fe:	613b      	str	r3, [r7, #16]
 8003800:	e010      	b.n	8003824 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2b80      	cmp	r3, #128	; 0x80
 8003806:	d902      	bls.n	800380e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003808:	2303      	movs	r3, #3
 800380a:	613b      	str	r3, [r7, #16]
 800380c:	e00a      	b.n	8003824 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2b80      	cmp	r3, #128	; 0x80
 8003812:	d102      	bne.n	800381a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003814:	2302      	movs	r3, #2
 8003816:	613b      	str	r3, [r7, #16]
 8003818:	e004      	b.n	8003824 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2b70      	cmp	r3, #112	; 0x70
 800381e:	d101      	bne.n	8003824 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003820:	2301      	movs	r3, #1
 8003822:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003824:	4b0b      	ldr	r3, [pc, #44]	; (8003854 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f023 0207 	bic.w	r2, r3, #7
 800382c:	4909      	ldr	r1, [pc, #36]	; (8003854 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	4313      	orrs	r3, r2
 8003832:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003834:	4b07      	ldr	r3, [pc, #28]	; (8003854 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0307 	and.w	r3, r3, #7
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	429a      	cmp	r2, r3
 8003840:	d001      	beq.n	8003846 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e000      	b.n	8003848 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3718      	adds	r7, #24
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	40021000 	.word	0x40021000
 8003854:	40022000 	.word	0x40022000

08003858 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003860:	2300      	movs	r3, #0
 8003862:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003864:	2300      	movs	r3, #0
 8003866:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003870:	2b00      	cmp	r3, #0
 8003872:	d031      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003878:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800387c:	d01a      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800387e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003882:	d814      	bhi.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003884:	2b00      	cmp	r3, #0
 8003886:	d009      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003888:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800388c:	d10f      	bne.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800388e:	4b5d      	ldr	r3, [pc, #372]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	4a5c      	ldr	r2, [pc, #368]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003898:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800389a:	e00c      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	3304      	adds	r3, #4
 80038a0:	2100      	movs	r1, #0
 80038a2:	4618      	mov	r0, r3
 80038a4:	f000 f9ce 	bl	8003c44 <RCCEx_PLLSAI1_Config>
 80038a8:	4603      	mov	r3, r0
 80038aa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80038ac:	e003      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	74fb      	strb	r3, [r7, #19]
      break;
 80038b2:	e000      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80038b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038b6:	7cfb      	ldrb	r3, [r7, #19]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d10b      	bne.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038bc:	4b51      	ldr	r3, [pc, #324]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ca:	494e      	ldr	r1, [pc, #312]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80038d2:	e001      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d4:	7cfb      	ldrb	r3, [r7, #19]
 80038d6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f000 809e 	beq.w	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038e6:	2300      	movs	r3, #0
 80038e8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80038ea:	4b46      	ldr	r3, [pc, #280]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80038f6:	2301      	movs	r3, #1
 80038f8:	e000      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80038fa:	2300      	movs	r3, #0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00d      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003900:	4b40      	ldr	r3, [pc, #256]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003904:	4a3f      	ldr	r2, [pc, #252]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800390a:	6593      	str	r3, [r2, #88]	; 0x58
 800390c:	4b3d      	ldr	r3, [pc, #244]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800390e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003914:	60bb      	str	r3, [r7, #8]
 8003916:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003918:	2301      	movs	r3, #1
 800391a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800391c:	4b3a      	ldr	r3, [pc, #232]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a39      	ldr	r2, [pc, #228]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003926:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003928:	f7fd fd48 	bl	80013bc <HAL_GetTick>
 800392c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800392e:	e009      	b.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003930:	f7fd fd44 	bl	80013bc <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b02      	cmp	r3, #2
 800393c:	d902      	bls.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	74fb      	strb	r3, [r7, #19]
        break;
 8003942:	e005      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003944:	4b30      	ldr	r3, [pc, #192]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800394c:	2b00      	cmp	r3, #0
 800394e:	d0ef      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003950:	7cfb      	ldrb	r3, [r7, #19]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d15a      	bne.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003956:	4b2b      	ldr	r3, [pc, #172]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800395c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003960:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d01e      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	429a      	cmp	r2, r3
 8003970:	d019      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003972:	4b24      	ldr	r3, [pc, #144]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003978:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800397c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800397e:	4b21      	ldr	r3, [pc, #132]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003984:	4a1f      	ldr	r2, [pc, #124]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003986:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800398a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800398e:	4b1d      	ldr	r3, [pc, #116]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003994:	4a1b      	ldr	r2, [pc, #108]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003996:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800399a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800399e:	4a19      	ldr	r2, [pc, #100]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	f003 0301 	and.w	r3, r3, #1
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d016      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b0:	f7fd fd04 	bl	80013bc <HAL_GetTick>
 80039b4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039b6:	e00b      	b.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039b8:	f7fd fd00 	bl	80013bc <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d902      	bls.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	74fb      	strb	r3, [r7, #19]
            break;
 80039ce:	e006      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039d0:	4b0c      	ldr	r3, [pc, #48]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d0ec      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80039de:	7cfb      	ldrb	r3, [r7, #19]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10b      	bne.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039e4:	4b07      	ldr	r3, [pc, #28]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039f2:	4904      	ldr	r1, [pc, #16]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80039fa:	e009      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039fc:	7cfb      	ldrb	r3, [r7, #19]
 80039fe:	74bb      	strb	r3, [r7, #18]
 8003a00:	e006      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003a02:	bf00      	nop
 8003a04:	40021000 	.word	0x40021000
 8003a08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a0c:	7cfb      	ldrb	r3, [r7, #19]
 8003a0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a10:	7c7b      	ldrb	r3, [r7, #17]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d105      	bne.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a16:	4b8a      	ldr	r3, [pc, #552]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1a:	4a89      	ldr	r2, [pc, #548]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a20:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00a      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a2e:	4b84      	ldr	r3, [pc, #528]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a34:	f023 0203 	bic.w	r2, r3, #3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	4980      	ldr	r1, [pc, #512]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d00a      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a50:	4b7b      	ldr	r3, [pc, #492]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a56:	f023 020c 	bic.w	r2, r3, #12
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5e:	4978      	ldr	r1, [pc, #480]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0320 	and.w	r3, r3, #32
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00a      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a72:	4b73      	ldr	r3, [pc, #460]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a78:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a80:	496f      	ldr	r1, [pc, #444]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00a      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a94:	4b6a      	ldr	r3, [pc, #424]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a9a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aa2:	4967      	ldr	r1, [pc, #412]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00a      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ab6:	4b62      	ldr	r3, [pc, #392]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003abc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac4:	495e      	ldr	r1, [pc, #376]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00a      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ad8:	4b59      	ldr	r3, [pc, #356]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ade:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae6:	4956      	ldr	r1, [pc, #344]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00a      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003afa:	4b51      	ldr	r3, [pc, #324]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b08:	494d      	ldr	r1, [pc, #308]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d028      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b1c:	4b48      	ldr	r3, [pc, #288]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b22:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2a:	4945      	ldr	r1, [pc, #276]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b3a:	d106      	bne.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b3c:	4b40      	ldr	r3, [pc, #256]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	4a3f      	ldr	r2, [pc, #252]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b46:	60d3      	str	r3, [r2, #12]
 8003b48:	e011      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b52:	d10c      	bne.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	3304      	adds	r3, #4
 8003b58:	2101      	movs	r1, #1
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f000 f872 	bl	8003c44 <RCCEx_PLLSAI1_Config>
 8003b60:	4603      	mov	r3, r0
 8003b62:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003b64:	7cfb      	ldrb	r3, [r7, #19]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003b6a:	7cfb      	ldrb	r3, [r7, #19]
 8003b6c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d028      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b7a:	4b31      	ldr	r3, [pc, #196]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b80:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b88:	492d      	ldr	r1, [pc, #180]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b98:	d106      	bne.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b9a:	4b29      	ldr	r3, [pc, #164]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	4a28      	ldr	r2, [pc, #160]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ba0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ba4:	60d3      	str	r3, [r2, #12]
 8003ba6:	e011      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bb0:	d10c      	bne.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	3304      	adds	r3, #4
 8003bb6:	2101      	movs	r1, #1
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f000 f843 	bl	8003c44 <RCCEx_PLLSAI1_Config>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bc2:	7cfb      	ldrb	r3, [r7, #19]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d001      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003bc8:	7cfb      	ldrb	r3, [r7, #19]
 8003bca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d01c      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bd8:	4b19      	ldr	r3, [pc, #100]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bde:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003be6:	4916      	ldr	r1, [pc, #88]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bf2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bf6:	d10c      	bne.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	3304      	adds	r3, #4
 8003bfc:	2102      	movs	r1, #2
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f000 f820 	bl	8003c44 <RCCEx_PLLSAI1_Config>
 8003c04:	4603      	mov	r3, r0
 8003c06:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c08:	7cfb      	ldrb	r3, [r7, #19]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003c0e:	7cfb      	ldrb	r3, [r7, #19]
 8003c10:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00a      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c1e:	4b08      	ldr	r3, [pc, #32]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c24:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c2c:	4904      	ldr	r1, [pc, #16]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003c34:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3718      	adds	r7, #24
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	40021000 	.word	0x40021000

08003c44 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c52:	4b74      	ldr	r3, [pc, #464]	; (8003e24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	f003 0303 	and.w	r3, r3, #3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d018      	beq.n	8003c90 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003c5e:	4b71      	ldr	r3, [pc, #452]	; (8003e24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	f003 0203 	and.w	r2, r3, #3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d10d      	bne.n	8003c8a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
       ||
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d009      	beq.n	8003c8a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003c76:	4b6b      	ldr	r3, [pc, #428]	; (8003e24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	091b      	lsrs	r3, r3, #4
 8003c7c:	f003 0307 	and.w	r3, r3, #7
 8003c80:	1c5a      	adds	r2, r3, #1
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
       ||
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d047      	beq.n	8003d1a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	73fb      	strb	r3, [r7, #15]
 8003c8e:	e044      	b.n	8003d1a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2b03      	cmp	r3, #3
 8003c96:	d018      	beq.n	8003cca <RCCEx_PLLSAI1_Config+0x86>
 8003c98:	2b03      	cmp	r3, #3
 8003c9a:	d825      	bhi.n	8003ce8 <RCCEx_PLLSAI1_Config+0xa4>
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d002      	beq.n	8003ca6 <RCCEx_PLLSAI1_Config+0x62>
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d009      	beq.n	8003cb8 <RCCEx_PLLSAI1_Config+0x74>
 8003ca4:	e020      	b.n	8003ce8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ca6:	4b5f      	ldr	r3, [pc, #380]	; (8003e24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d11d      	bne.n	8003cee <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cb6:	e01a      	b.n	8003cee <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003cb8:	4b5a      	ldr	r3, [pc, #360]	; (8003e24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d116      	bne.n	8003cf2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cc8:	e013      	b.n	8003cf2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003cca:	4b56      	ldr	r3, [pc, #344]	; (8003e24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10f      	bne.n	8003cf6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003cd6:	4b53      	ldr	r3, [pc, #332]	; (8003e24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d109      	bne.n	8003cf6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ce6:	e006      	b.n	8003cf6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	73fb      	strb	r3, [r7, #15]
      break;
 8003cec:	e004      	b.n	8003cf8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003cee:	bf00      	nop
 8003cf0:	e002      	b.n	8003cf8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003cf2:	bf00      	nop
 8003cf4:	e000      	b.n	8003cf8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003cf6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003cf8:	7bfb      	ldrb	r3, [r7, #15]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10d      	bne.n	8003d1a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003cfe:	4b49      	ldr	r3, [pc, #292]	; (8003e24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6819      	ldr	r1, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	011b      	lsls	r3, r3, #4
 8003d12:	430b      	orrs	r3, r1
 8003d14:	4943      	ldr	r1, [pc, #268]	; (8003e24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d1a:	7bfb      	ldrb	r3, [r7, #15]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d17c      	bne.n	8003e1a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003d20:	4b40      	ldr	r3, [pc, #256]	; (8003e24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a3f      	ldr	r2, [pc, #252]	; (8003e24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d26:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d2c:	f7fd fb46 	bl	80013bc <HAL_GetTick>
 8003d30:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d32:	e009      	b.n	8003d48 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d34:	f7fd fb42 	bl	80013bc <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d902      	bls.n	8003d48 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	73fb      	strb	r3, [r7, #15]
        break;
 8003d46:	e005      	b.n	8003d54 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d48:	4b36      	ldr	r3, [pc, #216]	; (8003e24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1ef      	bne.n	8003d34 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d54:	7bfb      	ldrb	r3, [r7, #15]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d15f      	bne.n	8003e1a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d110      	bne.n	8003d82 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d60:	4b30      	ldr	r3, [pc, #192]	; (8003e24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d62:	691b      	ldr	r3, [r3, #16]
 8003d64:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003d68:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	6892      	ldr	r2, [r2, #8]
 8003d70:	0211      	lsls	r1, r2, #8
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	68d2      	ldr	r2, [r2, #12]
 8003d76:	06d2      	lsls	r2, r2, #27
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	492a      	ldr	r1, [pc, #168]	; (8003e24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	610b      	str	r3, [r1, #16]
 8003d80:	e027      	b.n	8003dd2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d112      	bne.n	8003dae <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d88:	4b26      	ldr	r3, [pc, #152]	; (8003e24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003d90:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	6892      	ldr	r2, [r2, #8]
 8003d98:	0211      	lsls	r1, r2, #8
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	6912      	ldr	r2, [r2, #16]
 8003d9e:	0852      	lsrs	r2, r2, #1
 8003da0:	3a01      	subs	r2, #1
 8003da2:	0552      	lsls	r2, r2, #21
 8003da4:	430a      	orrs	r2, r1
 8003da6:	491f      	ldr	r1, [pc, #124]	; (8003e24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	610b      	str	r3, [r1, #16]
 8003dac:	e011      	b.n	8003dd2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003dae:	4b1d      	ldr	r3, [pc, #116]	; (8003e24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003db6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	6892      	ldr	r2, [r2, #8]
 8003dbe:	0211      	lsls	r1, r2, #8
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	6952      	ldr	r2, [r2, #20]
 8003dc4:	0852      	lsrs	r2, r2, #1
 8003dc6:	3a01      	subs	r2, #1
 8003dc8:	0652      	lsls	r2, r2, #25
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	4915      	ldr	r1, [pc, #84]	; (8003e24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003dd2:	4b14      	ldr	r3, [pc, #80]	; (8003e24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a13      	ldr	r2, [pc, #76]	; (8003e24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dd8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ddc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dde:	f7fd faed 	bl	80013bc <HAL_GetTick>
 8003de2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003de4:	e009      	b.n	8003dfa <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003de6:	f7fd fae9 	bl	80013bc <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d902      	bls.n	8003dfa <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	73fb      	strb	r3, [r7, #15]
          break;
 8003df8:	e005      	b.n	8003e06 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003dfa:	4b0a      	ldr	r3, [pc, #40]	; (8003e24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d0ef      	beq.n	8003de6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003e06:	7bfb      	ldrb	r3, [r7, #15]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d106      	bne.n	8003e1a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003e0c:	4b05      	ldr	r3, [pc, #20]	; (8003e24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e0e:	691a      	ldr	r2, [r3, #16]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	4903      	ldr	r1, [pc, #12]	; (8003e24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3710      	adds	r7, #16
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	40021000 	.word	0x40021000

08003e28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e049      	b.n	8003ece <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d106      	bne.n	8003e54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7fd f87c 	bl	8000f4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2202      	movs	r2, #2
 8003e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	3304      	adds	r3, #4
 8003e64:	4619      	mov	r1, r3
 8003e66:	4610      	mov	r0, r2
 8003e68:	f000 fd5a 	bl	8004920 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3708      	adds	r7, #8
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b082      	sub	sp, #8
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d101      	bne.n	8003ee8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e049      	b.n	8003f7c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d106      	bne.n	8003f02 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f000 f841 	bl	8003f84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2202      	movs	r2, #2
 8003f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	3304      	adds	r3, #4
 8003f12:	4619      	mov	r1, r3
 8003f14:	4610      	mov	r0, r2
 8003f16:	f000 fd03 	bl	8004920 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2201      	movs	r2, #1
 8003f56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3708      	adds	r7, #8
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b086      	sub	sp, #24
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
 8003fa4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d109      	bne.n	8003fc4 <HAL_TIM_PWM_Start_DMA+0x2c>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	bf0c      	ite	eq
 8003fbc:	2301      	moveq	r3, #1
 8003fbe:	2300      	movne	r3, #0
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	e03c      	b.n	800403e <HAL_TIM_PWM_Start_DMA+0xa6>
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	2b04      	cmp	r3, #4
 8003fc8:	d109      	bne.n	8003fde <HAL_TIM_PWM_Start_DMA+0x46>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	bf0c      	ite	eq
 8003fd6:	2301      	moveq	r3, #1
 8003fd8:	2300      	movne	r3, #0
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	e02f      	b.n	800403e <HAL_TIM_PWM_Start_DMA+0xa6>
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	2b08      	cmp	r3, #8
 8003fe2:	d109      	bne.n	8003ff8 <HAL_TIM_PWM_Start_DMA+0x60>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	bf0c      	ite	eq
 8003ff0:	2301      	moveq	r3, #1
 8003ff2:	2300      	movne	r3, #0
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	e022      	b.n	800403e <HAL_TIM_PWM_Start_DMA+0xa6>
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	2b0c      	cmp	r3, #12
 8003ffc:	d109      	bne.n	8004012 <HAL_TIM_PWM_Start_DMA+0x7a>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b02      	cmp	r3, #2
 8004008:	bf0c      	ite	eq
 800400a:	2301      	moveq	r3, #1
 800400c:	2300      	movne	r3, #0
 800400e:	b2db      	uxtb	r3, r3
 8004010:	e015      	b.n	800403e <HAL_TIM_PWM_Start_DMA+0xa6>
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	2b10      	cmp	r3, #16
 8004016:	d109      	bne.n	800402c <HAL_TIM_PWM_Start_DMA+0x94>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800401e:	b2db      	uxtb	r3, r3
 8004020:	2b02      	cmp	r3, #2
 8004022:	bf0c      	ite	eq
 8004024:	2301      	moveq	r3, #1
 8004026:	2300      	movne	r3, #0
 8004028:	b2db      	uxtb	r3, r3
 800402a:	e008      	b.n	800403e <HAL_TIM_PWM_Start_DMA+0xa6>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b02      	cmp	r3, #2
 8004036:	bf0c      	ite	eq
 8004038:	2301      	moveq	r3, #1
 800403a:	2300      	movne	r3, #0
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8004042:	2302      	movs	r3, #2
 8004044:	e18d      	b.n	8004362 <HAL_TIM_PWM_Start_DMA+0x3ca>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d109      	bne.n	8004060 <HAL_TIM_PWM_Start_DMA+0xc8>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004052:	b2db      	uxtb	r3, r3
 8004054:	2b01      	cmp	r3, #1
 8004056:	bf0c      	ite	eq
 8004058:	2301      	moveq	r3, #1
 800405a:	2300      	movne	r3, #0
 800405c:	b2db      	uxtb	r3, r3
 800405e:	e03c      	b.n	80040da <HAL_TIM_PWM_Start_DMA+0x142>
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	2b04      	cmp	r3, #4
 8004064:	d109      	bne.n	800407a <HAL_TIM_PWM_Start_DMA+0xe2>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b01      	cmp	r3, #1
 8004070:	bf0c      	ite	eq
 8004072:	2301      	moveq	r3, #1
 8004074:	2300      	movne	r3, #0
 8004076:	b2db      	uxtb	r3, r3
 8004078:	e02f      	b.n	80040da <HAL_TIM_PWM_Start_DMA+0x142>
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	2b08      	cmp	r3, #8
 800407e:	d109      	bne.n	8004094 <HAL_TIM_PWM_Start_DMA+0xfc>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004086:	b2db      	uxtb	r3, r3
 8004088:	2b01      	cmp	r3, #1
 800408a:	bf0c      	ite	eq
 800408c:	2301      	moveq	r3, #1
 800408e:	2300      	movne	r3, #0
 8004090:	b2db      	uxtb	r3, r3
 8004092:	e022      	b.n	80040da <HAL_TIM_PWM_Start_DMA+0x142>
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	2b0c      	cmp	r3, #12
 8004098:	d109      	bne.n	80040ae <HAL_TIM_PWM_Start_DMA+0x116>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	bf0c      	ite	eq
 80040a6:	2301      	moveq	r3, #1
 80040a8:	2300      	movne	r3, #0
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	e015      	b.n	80040da <HAL_TIM_PWM_Start_DMA+0x142>
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	2b10      	cmp	r3, #16
 80040b2:	d109      	bne.n	80040c8 <HAL_TIM_PWM_Start_DMA+0x130>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	2b01      	cmp	r3, #1
 80040be:	bf0c      	ite	eq
 80040c0:	2301      	moveq	r3, #1
 80040c2:	2300      	movne	r3, #0
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	e008      	b.n	80040da <HAL_TIM_PWM_Start_DMA+0x142>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	bf0c      	ite	eq
 80040d4:	2301      	moveq	r3, #1
 80040d6:	2300      	movne	r3, #0
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d034      	beq.n	8004148 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d002      	beq.n	80040ea <HAL_TIM_PWM_Start_DMA+0x152>
 80040e4:	887b      	ldrh	r3, [r7, #2]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e139      	b.n	8004362 <HAL_TIM_PWM_Start_DMA+0x3ca>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d104      	bne.n	80040fe <HAL_TIM_PWM_Start_DMA+0x166>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2202      	movs	r2, #2
 80040f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040fc:	e026      	b.n	800414c <HAL_TIM_PWM_Start_DMA+0x1b4>
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	2b04      	cmp	r3, #4
 8004102:	d104      	bne.n	800410e <HAL_TIM_PWM_Start_DMA+0x176>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2202      	movs	r2, #2
 8004108:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800410c:	e01e      	b.n	800414c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	2b08      	cmp	r3, #8
 8004112:	d104      	bne.n	800411e <HAL_TIM_PWM_Start_DMA+0x186>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2202      	movs	r2, #2
 8004118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800411c:	e016      	b.n	800414c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	2b0c      	cmp	r3, #12
 8004122:	d104      	bne.n	800412e <HAL_TIM_PWM_Start_DMA+0x196>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2202      	movs	r2, #2
 8004128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800412c:	e00e      	b.n	800414c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	2b10      	cmp	r3, #16
 8004132:	d104      	bne.n	800413e <HAL_TIM_PWM_Start_DMA+0x1a6>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2202      	movs	r2, #2
 8004138:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800413c:	e006      	b.n	800414c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2202      	movs	r2, #2
 8004142:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004146:	e001      	b.n	800414c <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e10a      	b.n	8004362 <HAL_TIM_PWM_Start_DMA+0x3ca>
  }

  switch (Channel)
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	2b0c      	cmp	r3, #12
 8004150:	f200 80ae 	bhi.w	80042b0 <HAL_TIM_PWM_Start_DMA+0x318>
 8004154:	a201      	add	r2, pc, #4	; (adr r2, 800415c <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8004156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800415a:	bf00      	nop
 800415c:	08004191 	.word	0x08004191
 8004160:	080042b1 	.word	0x080042b1
 8004164:	080042b1 	.word	0x080042b1
 8004168:	080042b1 	.word	0x080042b1
 800416c:	080041d9 	.word	0x080041d9
 8004170:	080042b1 	.word	0x080042b1
 8004174:	080042b1 	.word	0x080042b1
 8004178:	080042b1 	.word	0x080042b1
 800417c:	08004221 	.word	0x08004221
 8004180:	080042b1 	.word	0x080042b1
 8004184:	080042b1 	.word	0x080042b1
 8004188:	080042b1 	.word	0x080042b1
 800418c:	08004269 	.word	0x08004269
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004194:	4a75      	ldr	r2, [pc, #468]	; (800436c <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8004196:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419c:	4a74      	ldr	r2, [pc, #464]	; (8004370 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 800419e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a4:	4a73      	ldr	r2, [pc, #460]	; (8004374 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 80041a6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80041ac:	6879      	ldr	r1, [r7, #4]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	3334      	adds	r3, #52	; 0x34
 80041b4:	461a      	mov	r2, r3
 80041b6:	887b      	ldrh	r3, [r7, #2]
 80041b8:	f7fe f98a 	bl	80024d0 <HAL_DMA_Start_IT>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d001      	beq.n	80041c6 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e0cd      	b.n	8004362 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68da      	ldr	r2, [r3, #12]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041d4:	60da      	str	r2, [r3, #12]
      break;
 80041d6:	e06e      	b.n	80042b6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041dc:	4a63      	ldr	r2, [pc, #396]	; (800436c <HAL_TIM_PWM_Start_DMA+0x3d4>)
 80041de:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e4:	4a62      	ldr	r2, [pc, #392]	; (8004370 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 80041e6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ec:	4a61      	ldr	r2, [pc, #388]	; (8004374 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 80041ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80041f4:	6879      	ldr	r1, [r7, #4]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	3338      	adds	r3, #56	; 0x38
 80041fc:	461a      	mov	r2, r3
 80041fe:	887b      	ldrh	r3, [r7, #2]
 8004200:	f7fe f966 	bl	80024d0 <HAL_DMA_Start_IT>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e0a9      	b.n	8004362 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68da      	ldr	r2, [r3, #12]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800421c:	60da      	str	r2, [r3, #12]
      break;
 800421e:	e04a      	b.n	80042b6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004224:	4a51      	ldr	r2, [pc, #324]	; (800436c <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8004226:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422c:	4a50      	ldr	r2, [pc, #320]	; (8004370 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 800422e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004234:	4a4f      	ldr	r2, [pc, #316]	; (8004374 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8004236:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800423c:	6879      	ldr	r1, [r7, #4]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	333c      	adds	r3, #60	; 0x3c
 8004244:	461a      	mov	r2, r3
 8004246:	887b      	ldrh	r3, [r7, #2]
 8004248:	f7fe f942 	bl	80024d0 <HAL_DMA_Start_IT>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d001      	beq.n	8004256 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e085      	b.n	8004362 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68da      	ldr	r2, [r3, #12]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004264:	60da      	str	r2, [r3, #12]
      break;
 8004266:	e026      	b.n	80042b6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426c:	4a3f      	ldr	r2, [pc, #252]	; (800436c <HAL_TIM_PWM_Start_DMA+0x3d4>)
 800426e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004274:	4a3e      	ldr	r2, [pc, #248]	; (8004370 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8004276:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427c:	4a3d      	ldr	r2, [pc, #244]	; (8004374 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 800427e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004284:	6879      	ldr	r1, [r7, #4]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	3340      	adds	r3, #64	; 0x40
 800428c:	461a      	mov	r2, r3
 800428e:	887b      	ldrh	r3, [r7, #2]
 8004290:	f7fe f91e 	bl	80024d0 <HAL_DMA_Start_IT>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d001      	beq.n	800429e <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e061      	b.n	8004362 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68da      	ldr	r2, [r3, #12]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80042ac:	60da      	str	r2, [r3, #12]
      break;
 80042ae:	e002      	b.n	80042b6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	75fb      	strb	r3, [r7, #23]
      break;
 80042b4:	bf00      	nop
  }

  if (status == HAL_OK)
 80042b6:	7dfb      	ldrb	r3, [r7, #23]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d151      	bne.n	8004360 <HAL_TIM_PWM_Start_DMA+0x3c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2201      	movs	r2, #1
 80042c2:	68b9      	ldr	r1, [r7, #8]
 80042c4:	4618      	mov	r0, r3
 80042c6:	f000 fea7 	bl	8005018 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a2a      	ldr	r2, [pc, #168]	; (8004378 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d009      	beq.n	80042e8 <HAL_TIM_PWM_Start_DMA+0x350>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a28      	ldr	r2, [pc, #160]	; (800437c <HAL_TIM_PWM_Start_DMA+0x3e4>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d004      	beq.n	80042e8 <HAL_TIM_PWM_Start_DMA+0x350>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a27      	ldr	r2, [pc, #156]	; (8004380 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d101      	bne.n	80042ec <HAL_TIM_PWM_Start_DMA+0x354>
 80042e8:	2301      	movs	r3, #1
 80042ea:	e000      	b.n	80042ee <HAL_TIM_PWM_Start_DMA+0x356>
 80042ec:	2300      	movs	r3, #0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d007      	beq.n	8004302 <HAL_TIM_PWM_Start_DMA+0x36a>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004300:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a1c      	ldr	r2, [pc, #112]	; (8004378 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d009      	beq.n	8004320 <HAL_TIM_PWM_Start_DMA+0x388>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004314:	d004      	beq.n	8004320 <HAL_TIM_PWM_Start_DMA+0x388>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a18      	ldr	r2, [pc, #96]	; (800437c <HAL_TIM_PWM_Start_DMA+0x3e4>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d115      	bne.n	800434c <HAL_TIM_PWM_Start_DMA+0x3b4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	689a      	ldr	r2, [r3, #8]
 8004326:	4b17      	ldr	r3, [pc, #92]	; (8004384 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8004328:	4013      	ands	r3, r2
 800432a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	2b06      	cmp	r3, #6
 8004330:	d015      	beq.n	800435e <HAL_TIM_PWM_Start_DMA+0x3c6>
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004338:	d011      	beq.n	800435e <HAL_TIM_PWM_Start_DMA+0x3c6>
      {
        __HAL_TIM_ENABLE(htim);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f042 0201 	orr.w	r2, r2, #1
 8004348:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800434a:	e008      	b.n	800435e <HAL_TIM_PWM_Start_DMA+0x3c6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f042 0201 	orr.w	r2, r2, #1
 800435a:	601a      	str	r2, [r3, #0]
 800435c:	e000      	b.n	8004360 <HAL_TIM_PWM_Start_DMA+0x3c8>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800435e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004360:	7dfb      	ldrb	r3, [r7, #23]
}
 8004362:	4618      	mov	r0, r3
 8004364:	3718      	adds	r7, #24
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	08004811 	.word	0x08004811
 8004370:	080048b9 	.word	0x080048b9
 8004374:	0800477f 	.word	0x0800477f
 8004378:	40012c00 	.word	0x40012c00
 800437c:	40014000 	.word	0x40014000
 8004380:	40014400 	.word	0x40014400
 8004384:	00010007 	.word	0x00010007

08004388 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b086      	sub	sp, #24
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004394:	2300      	movs	r3, #0
 8004396:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d101      	bne.n	80043a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80043a2:	2302      	movs	r3, #2
 80043a4:	e0ff      	b.n	80045a6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2201      	movs	r2, #1
 80043aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2b14      	cmp	r3, #20
 80043b2:	f200 80f0 	bhi.w	8004596 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80043b6:	a201      	add	r2, pc, #4	; (adr r2, 80043bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80043b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043bc:	08004411 	.word	0x08004411
 80043c0:	08004597 	.word	0x08004597
 80043c4:	08004597 	.word	0x08004597
 80043c8:	08004597 	.word	0x08004597
 80043cc:	08004451 	.word	0x08004451
 80043d0:	08004597 	.word	0x08004597
 80043d4:	08004597 	.word	0x08004597
 80043d8:	08004597 	.word	0x08004597
 80043dc:	08004493 	.word	0x08004493
 80043e0:	08004597 	.word	0x08004597
 80043e4:	08004597 	.word	0x08004597
 80043e8:	08004597 	.word	0x08004597
 80043ec:	080044d3 	.word	0x080044d3
 80043f0:	08004597 	.word	0x08004597
 80043f4:	08004597 	.word	0x08004597
 80043f8:	08004597 	.word	0x08004597
 80043fc:	08004515 	.word	0x08004515
 8004400:	08004597 	.word	0x08004597
 8004404:	08004597 	.word	0x08004597
 8004408:	08004597 	.word	0x08004597
 800440c:	08004555 	.word	0x08004555
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68b9      	ldr	r1, [r7, #8]
 8004416:	4618      	mov	r0, r3
 8004418:	f000 fae6 	bl	80049e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	699a      	ldr	r2, [r3, #24]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f042 0208 	orr.w	r2, r2, #8
 800442a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	699a      	ldr	r2, [r3, #24]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f022 0204 	bic.w	r2, r2, #4
 800443a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	6999      	ldr	r1, [r3, #24]
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	691a      	ldr	r2, [r3, #16]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	430a      	orrs	r2, r1
 800444c:	619a      	str	r2, [r3, #24]
      break;
 800444e:	e0a5      	b.n	800459c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68b9      	ldr	r1, [r7, #8]
 8004456:	4618      	mov	r0, r3
 8004458:	f000 fb42 	bl	8004ae0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	699a      	ldr	r2, [r3, #24]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800446a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	699a      	ldr	r2, [r3, #24]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800447a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6999      	ldr	r1, [r3, #24]
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	021a      	lsls	r2, r3, #8
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	430a      	orrs	r2, r1
 800448e:	619a      	str	r2, [r3, #24]
      break;
 8004490:	e084      	b.n	800459c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68b9      	ldr	r1, [r7, #8]
 8004498:	4618      	mov	r0, r3
 800449a:	f000 fb9b 	bl	8004bd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	69da      	ldr	r2, [r3, #28]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f042 0208 	orr.w	r2, r2, #8
 80044ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	69da      	ldr	r2, [r3, #28]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f022 0204 	bic.w	r2, r2, #4
 80044bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	69d9      	ldr	r1, [r3, #28]
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	691a      	ldr	r2, [r3, #16]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	430a      	orrs	r2, r1
 80044ce:	61da      	str	r2, [r3, #28]
      break;
 80044d0:	e064      	b.n	800459c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68b9      	ldr	r1, [r7, #8]
 80044d8:	4618      	mov	r0, r3
 80044da:	f000 fbf3 	bl	8004cc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	69da      	ldr	r2, [r3, #28]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	69da      	ldr	r2, [r3, #28]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	69d9      	ldr	r1, [r3, #28]
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	021a      	lsls	r2, r3, #8
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	430a      	orrs	r2, r1
 8004510:	61da      	str	r2, [r3, #28]
      break;
 8004512:	e043      	b.n	800459c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68b9      	ldr	r1, [r7, #8]
 800451a:	4618      	mov	r0, r3
 800451c:	f000 fc30 	bl	8004d80 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f042 0208 	orr.w	r2, r2, #8
 800452e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f022 0204 	bic.w	r2, r2, #4
 800453e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	691a      	ldr	r2, [r3, #16]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	430a      	orrs	r2, r1
 8004550:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004552:	e023      	b.n	800459c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68b9      	ldr	r1, [r7, #8]
 800455a:	4618      	mov	r0, r3
 800455c:	f000 fc68 	bl	8004e30 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800456e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800457e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	021a      	lsls	r2, r3, #8
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	430a      	orrs	r2, r1
 8004592:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004594:	e002      	b.n	800459c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	75fb      	strb	r3, [r7, #23]
      break;
 800459a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3718      	adds	r7, #24
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop

080045b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045ba:	2300      	movs	r3, #0
 80045bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d101      	bne.n	80045cc <HAL_TIM_ConfigClockSource+0x1c>
 80045c8:	2302      	movs	r3, #2
 80045ca:	e0b6      	b.n	800473a <HAL_TIM_ConfigClockSource+0x18a>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2202      	movs	r2, #2
 80045d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80045ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68ba      	ldr	r2, [r7, #8]
 80045fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004608:	d03e      	beq.n	8004688 <HAL_TIM_ConfigClockSource+0xd8>
 800460a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800460e:	f200 8087 	bhi.w	8004720 <HAL_TIM_ConfigClockSource+0x170>
 8004612:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004616:	f000 8086 	beq.w	8004726 <HAL_TIM_ConfigClockSource+0x176>
 800461a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800461e:	d87f      	bhi.n	8004720 <HAL_TIM_ConfigClockSource+0x170>
 8004620:	2b70      	cmp	r3, #112	; 0x70
 8004622:	d01a      	beq.n	800465a <HAL_TIM_ConfigClockSource+0xaa>
 8004624:	2b70      	cmp	r3, #112	; 0x70
 8004626:	d87b      	bhi.n	8004720 <HAL_TIM_ConfigClockSource+0x170>
 8004628:	2b60      	cmp	r3, #96	; 0x60
 800462a:	d050      	beq.n	80046ce <HAL_TIM_ConfigClockSource+0x11e>
 800462c:	2b60      	cmp	r3, #96	; 0x60
 800462e:	d877      	bhi.n	8004720 <HAL_TIM_ConfigClockSource+0x170>
 8004630:	2b50      	cmp	r3, #80	; 0x50
 8004632:	d03c      	beq.n	80046ae <HAL_TIM_ConfigClockSource+0xfe>
 8004634:	2b50      	cmp	r3, #80	; 0x50
 8004636:	d873      	bhi.n	8004720 <HAL_TIM_ConfigClockSource+0x170>
 8004638:	2b40      	cmp	r3, #64	; 0x40
 800463a:	d058      	beq.n	80046ee <HAL_TIM_ConfigClockSource+0x13e>
 800463c:	2b40      	cmp	r3, #64	; 0x40
 800463e:	d86f      	bhi.n	8004720 <HAL_TIM_ConfigClockSource+0x170>
 8004640:	2b30      	cmp	r3, #48	; 0x30
 8004642:	d064      	beq.n	800470e <HAL_TIM_ConfigClockSource+0x15e>
 8004644:	2b30      	cmp	r3, #48	; 0x30
 8004646:	d86b      	bhi.n	8004720 <HAL_TIM_ConfigClockSource+0x170>
 8004648:	2b20      	cmp	r3, #32
 800464a:	d060      	beq.n	800470e <HAL_TIM_ConfigClockSource+0x15e>
 800464c:	2b20      	cmp	r3, #32
 800464e:	d867      	bhi.n	8004720 <HAL_TIM_ConfigClockSource+0x170>
 8004650:	2b00      	cmp	r3, #0
 8004652:	d05c      	beq.n	800470e <HAL_TIM_ConfigClockSource+0x15e>
 8004654:	2b10      	cmp	r3, #16
 8004656:	d05a      	beq.n	800470e <HAL_TIM_ConfigClockSource+0x15e>
 8004658:	e062      	b.n	8004720 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6818      	ldr	r0, [r3, #0]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	6899      	ldr	r1, [r3, #8]
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	f000 fcb5 	bl	8004fd8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800467c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68ba      	ldr	r2, [r7, #8]
 8004684:	609a      	str	r2, [r3, #8]
      break;
 8004686:	e04f      	b.n	8004728 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6818      	ldr	r0, [r3, #0]
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	6899      	ldr	r1, [r3, #8]
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	685a      	ldr	r2, [r3, #4]
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	f000 fc9e 	bl	8004fd8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	689a      	ldr	r2, [r3, #8]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046aa:	609a      	str	r2, [r3, #8]
      break;
 80046ac:	e03c      	b.n	8004728 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6818      	ldr	r0, [r3, #0]
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	6859      	ldr	r1, [r3, #4]
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	461a      	mov	r2, r3
 80046bc:	f000 fc12 	bl	8004ee4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2150      	movs	r1, #80	; 0x50
 80046c6:	4618      	mov	r0, r3
 80046c8:	f000 fc6b 	bl	8004fa2 <TIM_ITRx_SetConfig>
      break;
 80046cc:	e02c      	b.n	8004728 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6818      	ldr	r0, [r3, #0]
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	6859      	ldr	r1, [r3, #4]
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	461a      	mov	r2, r3
 80046dc:	f000 fc31 	bl	8004f42 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2160      	movs	r1, #96	; 0x60
 80046e6:	4618      	mov	r0, r3
 80046e8:	f000 fc5b 	bl	8004fa2 <TIM_ITRx_SetConfig>
      break;
 80046ec:	e01c      	b.n	8004728 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6818      	ldr	r0, [r3, #0]
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	6859      	ldr	r1, [r3, #4]
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	461a      	mov	r2, r3
 80046fc:	f000 fbf2 	bl	8004ee4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2140      	movs	r1, #64	; 0x40
 8004706:	4618      	mov	r0, r3
 8004708:	f000 fc4b 	bl	8004fa2 <TIM_ITRx_SetConfig>
      break;
 800470c:	e00c      	b.n	8004728 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4619      	mov	r1, r3
 8004718:	4610      	mov	r0, r2
 800471a:	f000 fc42 	bl	8004fa2 <TIM_ITRx_SetConfig>
      break;
 800471e:	e003      	b.n	8004728 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	73fb      	strb	r3, [r7, #15]
      break;
 8004724:	e000      	b.n	8004728 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004726:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004738:	7bfb      	ldrb	r3, [r7, #15]
}
 800473a:	4618      	mov	r0, r3
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004742:	b480      	push	{r7}
 8004744:	b083      	sub	sp, #12
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800474a:	bf00      	nop
 800474c:	370c      	adds	r7, #12
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr

08004756 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004756:	b480      	push	{r7}
 8004758:	b083      	sub	sp, #12
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800475e:	bf00      	nop
 8004760:	370c      	adds	r7, #12
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr

0800476a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800476a:	b480      	push	{r7}
 800476c:	b083      	sub	sp, #12
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004772:	bf00      	nop
 8004774:	370c      	adds	r7, #12
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr

0800477e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b084      	sub	sp, #16
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	429a      	cmp	r2, r3
 8004794:	d107      	bne.n	80047a6 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2201      	movs	r2, #1
 800479a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047a4:	e02a      	b.n	80047fc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d107      	bne.n	80047c0 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2202      	movs	r2, #2
 80047b4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047be:	e01d      	b.n	80047fc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d107      	bne.n	80047da <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2204      	movs	r2, #4
 80047ce:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047d8:	e010      	b.n	80047fc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d107      	bne.n	80047f4 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2208      	movs	r2, #8
 80047e8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047f2:	e003      	b.n	80047fc <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80047fc:	68f8      	ldr	r0, [r7, #12]
 80047fe:	f7ff ffb4 	bl	800476a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	771a      	strb	r2, [r3, #28]
}
 8004808:	bf00      	nop
 800480a:	3710      	adds	r7, #16
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	429a      	cmp	r2, r3
 8004826:	d10b      	bne.n	8004840 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2201      	movs	r2, #1
 800482c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	69db      	ldr	r3, [r3, #28]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d136      	bne.n	80048a4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2201      	movs	r2, #1
 800483a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800483e:	e031      	b.n	80048a4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	429a      	cmp	r2, r3
 8004848:	d10b      	bne.n	8004862 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2202      	movs	r2, #2
 800484e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	69db      	ldr	r3, [r3, #28]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d125      	bne.n	80048a4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004860:	e020      	b.n	80048a4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	429a      	cmp	r2, r3
 800486a:	d10b      	bne.n	8004884 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2204      	movs	r2, #4
 8004870:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	69db      	ldr	r3, [r3, #28]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d114      	bne.n	80048a4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004882:	e00f      	b.n	80048a4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	429a      	cmp	r2, r3
 800488c:	d10a      	bne.n	80048a4 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2208      	movs	r2, #8
 8004892:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	69db      	ldr	r3, [r3, #28]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d103      	bne.n	80048a4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048a4:	68f8      	ldr	r0, [r7, #12]
 80048a6:	f7ff ff4c 	bl	8004742 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	771a      	strb	r2, [r3, #28]
}
 80048b0:	bf00      	nop
 80048b2:	3710      	adds	r7, #16
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d103      	bne.n	80048d8 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2201      	movs	r2, #1
 80048d4:	771a      	strb	r2, [r3, #28]
 80048d6:	e019      	b.n	800490c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d103      	bne.n	80048ea <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2202      	movs	r2, #2
 80048e6:	771a      	strb	r2, [r3, #28]
 80048e8:	e010      	b.n	800490c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d103      	bne.n	80048fc <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2204      	movs	r2, #4
 80048f8:	771a      	strb	r2, [r3, #28]
 80048fa:	e007      	b.n	800490c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	429a      	cmp	r2, r3
 8004904:	d102      	bne.n	800490c <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2208      	movs	r2, #8
 800490a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800490c:	68f8      	ldr	r0, [r7, #12]
 800490e:	f7ff ff22 	bl	8004756 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	771a      	strb	r2, [r3, #28]
}
 8004918:	bf00      	nop
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a2a      	ldr	r2, [pc, #168]	; (80049dc <TIM_Base_SetConfig+0xbc>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d003      	beq.n	8004940 <TIM_Base_SetConfig+0x20>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800493e:	d108      	bne.n	8004952 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004946:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	4313      	orrs	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a21      	ldr	r2, [pc, #132]	; (80049dc <TIM_Base_SetConfig+0xbc>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d00b      	beq.n	8004972 <TIM_Base_SetConfig+0x52>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004960:	d007      	beq.n	8004972 <TIM_Base_SetConfig+0x52>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a1e      	ldr	r2, [pc, #120]	; (80049e0 <TIM_Base_SetConfig+0xc0>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d003      	beq.n	8004972 <TIM_Base_SetConfig+0x52>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a1d      	ldr	r2, [pc, #116]	; (80049e4 <TIM_Base_SetConfig+0xc4>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d108      	bne.n	8004984 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004978:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	4313      	orrs	r3, r2
 8004982:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	4313      	orrs	r3, r2
 8004990:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	689a      	ldr	r2, [r3, #8]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a0c      	ldr	r2, [pc, #48]	; (80049dc <TIM_Base_SetConfig+0xbc>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d007      	beq.n	80049c0 <TIM_Base_SetConfig+0xa0>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a0b      	ldr	r2, [pc, #44]	; (80049e0 <TIM_Base_SetConfig+0xc0>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d003      	beq.n	80049c0 <TIM_Base_SetConfig+0xa0>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a0a      	ldr	r2, [pc, #40]	; (80049e4 <TIM_Base_SetConfig+0xc4>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d103      	bne.n	80049c8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	691a      	ldr	r2, [r3, #16]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	615a      	str	r2, [r3, #20]
}
 80049ce:	bf00      	nop
 80049d0:	3714      	adds	r7, #20
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	40012c00 	.word	0x40012c00
 80049e0:	40014000 	.word	0x40014000
 80049e4:	40014400 	.word	0x40014400

080049e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b087      	sub	sp, #28
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	f023 0201 	bic.w	r2, r3, #1
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f023 0303 	bic.w	r3, r3, #3
 8004a22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	f023 0302 	bic.w	r3, r3, #2
 8004a34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a24      	ldr	r2, [pc, #144]	; (8004ad4 <TIM_OC1_SetConfig+0xec>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d007      	beq.n	8004a58 <TIM_OC1_SetConfig+0x70>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a23      	ldr	r2, [pc, #140]	; (8004ad8 <TIM_OC1_SetConfig+0xf0>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d003      	beq.n	8004a58 <TIM_OC1_SetConfig+0x70>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a22      	ldr	r2, [pc, #136]	; (8004adc <TIM_OC1_SetConfig+0xf4>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d10c      	bne.n	8004a72 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	f023 0308 	bic.w	r3, r3, #8
 8004a5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	f023 0304 	bic.w	r3, r3, #4
 8004a70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a17      	ldr	r2, [pc, #92]	; (8004ad4 <TIM_OC1_SetConfig+0xec>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d007      	beq.n	8004a8a <TIM_OC1_SetConfig+0xa2>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a16      	ldr	r2, [pc, #88]	; (8004ad8 <TIM_OC1_SetConfig+0xf0>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d003      	beq.n	8004a8a <TIM_OC1_SetConfig+0xa2>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a15      	ldr	r2, [pc, #84]	; (8004adc <TIM_OC1_SetConfig+0xf4>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d111      	bne.n	8004aae <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	693a      	ldr	r2, [r7, #16]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	693a      	ldr	r2, [r7, #16]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	685a      	ldr	r2, [r3, #4]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	697a      	ldr	r2, [r7, #20]
 8004ac6:	621a      	str	r2, [r3, #32]
}
 8004ac8:	bf00      	nop
 8004aca:	371c      	adds	r7, #28
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr
 8004ad4:	40012c00 	.word	0x40012c00
 8004ad8:	40014000 	.word	0x40014000
 8004adc:	40014400 	.word	0x40014400

08004ae0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b087      	sub	sp, #28
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a1b      	ldr	r3, [r3, #32]
 8004aee:	f023 0210 	bic.w	r2, r3, #16
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a1b      	ldr	r3, [r3, #32]
 8004afa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	699b      	ldr	r3, [r3, #24]
 8004b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	021b      	lsls	r3, r3, #8
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	f023 0320 	bic.w	r3, r3, #32
 8004b2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	011b      	lsls	r3, r3, #4
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4a22      	ldr	r2, [pc, #136]	; (8004bc8 <TIM_OC2_SetConfig+0xe8>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d10d      	bne.n	8004b60 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	011b      	lsls	r3, r3, #4
 8004b52:	697a      	ldr	r2, [r7, #20]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a19      	ldr	r2, [pc, #100]	; (8004bc8 <TIM_OC2_SetConfig+0xe8>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d007      	beq.n	8004b78 <TIM_OC2_SetConfig+0x98>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a18      	ldr	r2, [pc, #96]	; (8004bcc <TIM_OC2_SetConfig+0xec>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d003      	beq.n	8004b78 <TIM_OC2_SetConfig+0x98>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a17      	ldr	r2, [pc, #92]	; (8004bd0 <TIM_OC2_SetConfig+0xf0>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d113      	bne.n	8004ba0 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	695b      	ldr	r3, [r3, #20]
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	693a      	ldr	r2, [r7, #16]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	693a      	ldr	r2, [r7, #16]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	621a      	str	r2, [r3, #32]
}
 8004bba:	bf00      	nop
 8004bbc:	371c      	adds	r7, #28
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	40012c00 	.word	0x40012c00
 8004bcc:	40014000 	.word	0x40014000
 8004bd0:	40014400 	.word	0x40014400

08004bd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b087      	sub	sp, #28
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a1b      	ldr	r3, [r3, #32]
 8004be2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	69db      	ldr	r3, [r3, #28]
 8004bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f023 0303 	bic.w	r3, r3, #3
 8004c0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	021b      	lsls	r3, r3, #8
 8004c28:	697a      	ldr	r2, [r7, #20]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a21      	ldr	r2, [pc, #132]	; (8004cb8 <TIM_OC3_SetConfig+0xe4>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d10d      	bne.n	8004c52 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	021b      	lsls	r3, r3, #8
 8004c44:	697a      	ldr	r2, [r7, #20]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a18      	ldr	r2, [pc, #96]	; (8004cb8 <TIM_OC3_SetConfig+0xe4>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d007      	beq.n	8004c6a <TIM_OC3_SetConfig+0x96>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a17      	ldr	r2, [pc, #92]	; (8004cbc <TIM_OC3_SetConfig+0xe8>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d003      	beq.n	8004c6a <TIM_OC3_SetConfig+0x96>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a16      	ldr	r2, [pc, #88]	; (8004cc0 <TIM_OC3_SetConfig+0xec>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d113      	bne.n	8004c92 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	695b      	ldr	r3, [r3, #20]
 8004c7e:	011b      	lsls	r3, r3, #4
 8004c80:	693a      	ldr	r2, [r7, #16]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	699b      	ldr	r3, [r3, #24]
 8004c8a:	011b      	lsls	r3, r3, #4
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	693a      	ldr	r2, [r7, #16]
 8004c96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	685a      	ldr	r2, [r3, #4]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	697a      	ldr	r2, [r7, #20]
 8004caa:	621a      	str	r2, [r3, #32]
}
 8004cac:	bf00      	nop
 8004cae:	371c      	adds	r7, #28
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr
 8004cb8:	40012c00 	.word	0x40012c00
 8004cbc:	40014000 	.word	0x40014000
 8004cc0:	40014400 	.word	0x40014400

08004cc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b087      	sub	sp, #28
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a1b      	ldr	r3, [r3, #32]
 8004cd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a1b      	ldr	r3, [r3, #32]
 8004cde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	69db      	ldr	r3, [r3, #28]
 8004cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	021b      	lsls	r3, r3, #8
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	031b      	lsls	r3, r3, #12
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a14      	ldr	r2, [pc, #80]	; (8004d74 <TIM_OC4_SetConfig+0xb0>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d007      	beq.n	8004d38 <TIM_OC4_SetConfig+0x74>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a13      	ldr	r2, [pc, #76]	; (8004d78 <TIM_OC4_SetConfig+0xb4>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d003      	beq.n	8004d38 <TIM_OC4_SetConfig+0x74>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a12      	ldr	r2, [pc, #72]	; (8004d7c <TIM_OC4_SetConfig+0xb8>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d109      	bne.n	8004d4c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	695b      	ldr	r3, [r3, #20]
 8004d44:	019b      	lsls	r3, r3, #6
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	685a      	ldr	r2, [r3, #4]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	621a      	str	r2, [r3, #32]
}
 8004d66:	bf00      	nop
 8004d68:	371c      	adds	r7, #28
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	40012c00 	.word	0x40012c00
 8004d78:	40014000 	.word	0x40014000
 8004d7c:	40014400 	.word	0x40014400

08004d80 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b087      	sub	sp, #28
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a1b      	ldr	r3, [r3, #32]
 8004d8e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a1b      	ldr	r3, [r3, #32]
 8004d9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004db2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004dc4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	041b      	lsls	r3, r3, #16
 8004dcc:	693a      	ldr	r2, [r7, #16]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a13      	ldr	r2, [pc, #76]	; (8004e24 <TIM_OC5_SetConfig+0xa4>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d007      	beq.n	8004dea <TIM_OC5_SetConfig+0x6a>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a12      	ldr	r2, [pc, #72]	; (8004e28 <TIM_OC5_SetConfig+0xa8>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d003      	beq.n	8004dea <TIM_OC5_SetConfig+0x6a>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a11      	ldr	r2, [pc, #68]	; (8004e2c <TIM_OC5_SetConfig+0xac>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d109      	bne.n	8004dfe <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004df0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	021b      	lsls	r3, r3, #8
 8004df8:	697a      	ldr	r2, [r7, #20]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	685a      	ldr	r2, [r3, #4]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	621a      	str	r2, [r3, #32]
}
 8004e18:	bf00      	nop
 8004e1a:	371c      	adds	r7, #28
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr
 8004e24:	40012c00 	.word	0x40012c00
 8004e28:	40014000 	.word	0x40014000
 8004e2c:	40014400 	.word	0x40014400

08004e30 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b087      	sub	sp, #28
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a1b      	ldr	r3, [r3, #32]
 8004e3e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a1b      	ldr	r3, [r3, #32]
 8004e4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	021b      	lsls	r3, r3, #8
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	051b      	lsls	r3, r3, #20
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a14      	ldr	r2, [pc, #80]	; (8004ed8 <TIM_OC6_SetConfig+0xa8>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d007      	beq.n	8004e9c <TIM_OC6_SetConfig+0x6c>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a13      	ldr	r2, [pc, #76]	; (8004edc <TIM_OC6_SetConfig+0xac>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d003      	beq.n	8004e9c <TIM_OC6_SetConfig+0x6c>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a12      	ldr	r2, [pc, #72]	; (8004ee0 <TIM_OC6_SetConfig+0xb0>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d109      	bne.n	8004eb0 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ea2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	695b      	ldr	r3, [r3, #20]
 8004ea8:	029b      	lsls	r3, r3, #10
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	697a      	ldr	r2, [r7, #20]
 8004eb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	685a      	ldr	r2, [r3, #4]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	693a      	ldr	r2, [r7, #16]
 8004ec8:	621a      	str	r2, [r3, #32]
}
 8004eca:	bf00      	nop
 8004ecc:	371c      	adds	r7, #28
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	40012c00 	.word	0x40012c00
 8004edc:	40014000 	.word	0x40014000
 8004ee0:	40014400 	.word	0x40014400

08004ee4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b087      	sub	sp, #28
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6a1b      	ldr	r3, [r3, #32]
 8004ef4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6a1b      	ldr	r3, [r3, #32]
 8004efa:	f023 0201 	bic.w	r2, r3, #1
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	699b      	ldr	r3, [r3, #24]
 8004f06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	011b      	lsls	r3, r3, #4
 8004f14:	693a      	ldr	r2, [r7, #16]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	f023 030a 	bic.w	r3, r3, #10
 8004f20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	693a      	ldr	r2, [r7, #16]
 8004f2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	621a      	str	r2, [r3, #32]
}
 8004f36:	bf00      	nop
 8004f38:	371c      	adds	r7, #28
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr

08004f42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f42:	b480      	push	{r7}
 8004f44:	b087      	sub	sp, #28
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	60f8      	str	r0, [r7, #12]
 8004f4a:	60b9      	str	r1, [r7, #8]
 8004f4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6a1b      	ldr	r3, [r3, #32]
 8004f52:	f023 0210 	bic.w	r2, r3, #16
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6a1b      	ldr	r3, [r3, #32]
 8004f64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	031b      	lsls	r3, r3, #12
 8004f72:	697a      	ldr	r2, [r7, #20]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f7e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	011b      	lsls	r3, r3, #4
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	697a      	ldr	r2, [r7, #20]
 8004f8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	621a      	str	r2, [r3, #32]
}
 8004f96:	bf00      	nop
 8004f98:	371c      	adds	r7, #28
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr

08004fa2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	b085      	sub	sp, #20
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
 8004faa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fba:	683a      	ldr	r2, [r7, #0]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	f043 0307 	orr.w	r3, r3, #7
 8004fc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	609a      	str	r2, [r3, #8]
}
 8004fcc:	bf00      	nop
 8004fce:	3714      	adds	r7, #20
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b087      	sub	sp, #28
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	607a      	str	r2, [r7, #4]
 8004fe4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ff2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	021a      	lsls	r2, r3, #8
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	431a      	orrs	r2, r3
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	4313      	orrs	r3, r2
 8005004:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	697a      	ldr	r2, [r7, #20]
 800500a:	609a      	str	r2, [r3, #8]
}
 800500c:	bf00      	nop
 800500e:	371c      	adds	r7, #28
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005018:	b480      	push	{r7}
 800501a:	b087      	sub	sp, #28
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	f003 031f 	and.w	r3, r3, #31
 800502a:	2201      	movs	r2, #1
 800502c:	fa02 f303 	lsl.w	r3, r2, r3
 8005030:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6a1a      	ldr	r2, [r3, #32]
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	43db      	mvns	r3, r3
 800503a:	401a      	ands	r2, r3
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6a1a      	ldr	r2, [r3, #32]
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	f003 031f 	and.w	r3, r3, #31
 800504a:	6879      	ldr	r1, [r7, #4]
 800504c:	fa01 f303 	lsl.w	r3, r1, r3
 8005050:	431a      	orrs	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	621a      	str	r2, [r3, #32]
}
 8005056:	bf00      	nop
 8005058:	371c      	adds	r7, #28
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
	...

08005064 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005064:	b480      	push	{r7}
 8005066:	b085      	sub	sp, #20
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005074:	2b01      	cmp	r3, #1
 8005076:	d101      	bne.n	800507c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005078:	2302      	movs	r3, #2
 800507a:	e04f      	b.n	800511c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2202      	movs	r2, #2
 8005088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a21      	ldr	r2, [pc, #132]	; (8005128 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d108      	bne.n	80050b8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80050ac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a14      	ldr	r2, [pc, #80]	; (8005128 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d009      	beq.n	80050f0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050e4:	d004      	beq.n	80050f0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a10      	ldr	r2, [pc, #64]	; (800512c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d10c      	bne.n	800510a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	68ba      	ldr	r2, [r7, #8]
 80050fe:	4313      	orrs	r3, r2
 8005100:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68ba      	ldr	r2, [r7, #8]
 8005108:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2201      	movs	r2, #1
 800510e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800511a:	2300      	movs	r3, #0
}
 800511c:	4618      	mov	r0, r3
 800511e:	3714      	adds	r7, #20
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr
 8005128:	40012c00 	.word	0x40012c00
 800512c:	40014000 	.word	0x40014000

08005130 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d101      	bne.n	8005142 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e040      	b.n	80051c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005146:	2b00      	cmp	r3, #0
 8005148:	d106      	bne.n	8005158 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f7fb ff78 	bl	8001048 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2224      	movs	r2, #36	; 0x24
 800515c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f022 0201 	bic.w	r2, r2, #1
 800516c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 fb2e 	bl	80057d0 <UART_SetConfig>
 8005174:	4603      	mov	r3, r0
 8005176:	2b01      	cmp	r3, #1
 8005178:	d101      	bne.n	800517e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e022      	b.n	80051c4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005182:	2b00      	cmp	r3, #0
 8005184:	d002      	beq.n	800518c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 fd4e 	bl	8005c28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	685a      	ldr	r2, [r3, #4]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800519a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689a      	ldr	r2, [r3, #8]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f042 0201 	orr.w	r2, r2, #1
 80051ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f000 fdd5 	bl	8005d6c <UART_CheckIdleState>
 80051c2:	4603      	mov	r3, r0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3708      	adds	r7, #8
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b0ba      	sub	sp, #232	; 0xe8
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	69db      	ldr	r3, [r3, #28]
 80051da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80051f2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80051f6:	f640 030f 	movw	r3, #2063	; 0x80f
 80051fa:	4013      	ands	r3, r2
 80051fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005200:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005204:	2b00      	cmp	r3, #0
 8005206:	d115      	bne.n	8005234 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800520c:	f003 0320 	and.w	r3, r3, #32
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00f      	beq.n	8005234 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005218:	f003 0320 	and.w	r3, r3, #32
 800521c:	2b00      	cmp	r3, #0
 800521e:	d009      	beq.n	8005234 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005224:	2b00      	cmp	r3, #0
 8005226:	f000 82a6 	beq.w	8005776 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	4798      	blx	r3
      }
      return;
 8005232:	e2a0      	b.n	8005776 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005234:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005238:	2b00      	cmp	r3, #0
 800523a:	f000 8117 	beq.w	800546c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800523e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005242:	f003 0301 	and.w	r3, r3, #1
 8005246:	2b00      	cmp	r3, #0
 8005248:	d106      	bne.n	8005258 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800524a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800524e:	4b85      	ldr	r3, [pc, #532]	; (8005464 <HAL_UART_IRQHandler+0x298>)
 8005250:	4013      	ands	r3, r2
 8005252:	2b00      	cmp	r3, #0
 8005254:	f000 810a 	beq.w	800546c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800525c:	f003 0301 	and.w	r3, r3, #1
 8005260:	2b00      	cmp	r3, #0
 8005262:	d011      	beq.n	8005288 <HAL_UART_IRQHandler+0xbc>
 8005264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800526c:	2b00      	cmp	r3, #0
 800526e:	d00b      	beq.n	8005288 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2201      	movs	r2, #1
 8005276:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800527e:	f043 0201 	orr.w	r2, r3, #1
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005288:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800528c:	f003 0302 	and.w	r3, r3, #2
 8005290:	2b00      	cmp	r3, #0
 8005292:	d011      	beq.n	80052b8 <HAL_UART_IRQHandler+0xec>
 8005294:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005298:	f003 0301 	and.w	r3, r3, #1
 800529c:	2b00      	cmp	r3, #0
 800529e:	d00b      	beq.n	80052b8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2202      	movs	r2, #2
 80052a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052ae:	f043 0204 	orr.w	r2, r3, #4
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052bc:	f003 0304 	and.w	r3, r3, #4
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d011      	beq.n	80052e8 <HAL_UART_IRQHandler+0x11c>
 80052c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052c8:	f003 0301 	and.w	r3, r3, #1
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00b      	beq.n	80052e8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2204      	movs	r2, #4
 80052d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052de:	f043 0202 	orr.w	r2, r3, #2
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80052e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ec:	f003 0308 	and.w	r3, r3, #8
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d017      	beq.n	8005324 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80052f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052f8:	f003 0320 	and.w	r3, r3, #32
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d105      	bne.n	800530c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005300:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005304:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005308:	2b00      	cmp	r3, #0
 800530a:	d00b      	beq.n	8005324 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2208      	movs	r2, #8
 8005312:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800531a:	f043 0208 	orr.w	r2, r3, #8
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005328:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800532c:	2b00      	cmp	r3, #0
 800532e:	d012      	beq.n	8005356 <HAL_UART_IRQHandler+0x18a>
 8005330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005334:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005338:	2b00      	cmp	r3, #0
 800533a:	d00c      	beq.n	8005356 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005344:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800534c:	f043 0220 	orr.w	r2, r3, #32
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800535c:	2b00      	cmp	r3, #0
 800535e:	f000 820c 	beq.w	800577a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005366:	f003 0320 	and.w	r3, r3, #32
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00d      	beq.n	800538a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800536e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005372:	f003 0320 	and.w	r3, r3, #32
 8005376:	2b00      	cmp	r3, #0
 8005378:	d007      	beq.n	800538a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800537e:	2b00      	cmp	r3, #0
 8005380:	d003      	beq.n	800538a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005390:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800539e:	2b40      	cmp	r3, #64	; 0x40
 80053a0:	d005      	beq.n	80053ae <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80053a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80053a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d04f      	beq.n	800544e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 fde9 	bl	8005f86 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053be:	2b40      	cmp	r3, #64	; 0x40
 80053c0:	d141      	bne.n	8005446 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	3308      	adds	r3, #8
 80053c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80053d0:	e853 3f00 	ldrex	r3, [r3]
 80053d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80053d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80053dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	3308      	adds	r3, #8
 80053ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80053ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80053f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80053fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80053fe:	e841 2300 	strex	r3, r2, [r1]
 8005402:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005406:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d1d9      	bne.n	80053c2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005412:	2b00      	cmp	r3, #0
 8005414:	d013      	beq.n	800543e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800541a:	4a13      	ldr	r2, [pc, #76]	; (8005468 <HAL_UART_IRQHandler+0x29c>)
 800541c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005422:	4618      	mov	r0, r3
 8005424:	f7fd f8f2 	bl	800260c <HAL_DMA_Abort_IT>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d017      	beq.n	800545e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005438:	4610      	mov	r0, r2
 800543a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800543c:	e00f      	b.n	800545e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 f9b0 	bl	80057a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005444:	e00b      	b.n	800545e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 f9ac 	bl	80057a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800544c:	e007      	b.n	800545e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 f9a8 	bl	80057a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800545c:	e18d      	b.n	800577a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800545e:	bf00      	nop
    return;
 8005460:	e18b      	b.n	800577a <HAL_UART_IRQHandler+0x5ae>
 8005462:	bf00      	nop
 8005464:	04000120 	.word	0x04000120
 8005468:	0800604d 	.word	0x0800604d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005470:	2b01      	cmp	r3, #1
 8005472:	f040 8146 	bne.w	8005702 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800547a:	f003 0310 	and.w	r3, r3, #16
 800547e:	2b00      	cmp	r3, #0
 8005480:	f000 813f 	beq.w	8005702 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005488:	f003 0310 	and.w	r3, r3, #16
 800548c:	2b00      	cmp	r3, #0
 800548e:	f000 8138 	beq.w	8005702 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2210      	movs	r2, #16
 8005498:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054a4:	2b40      	cmp	r3, #64	; 0x40
 80054a6:	f040 80b4 	bne.w	8005612 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80054b6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	f000 815f 	beq.w	800577e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80054c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80054ca:	429a      	cmp	r2, r3
 80054cc:	f080 8157 	bcs.w	800577e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80054d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0320 	and.w	r3, r3, #32
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	f040 8085 	bne.w	80055f6 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80054f8:	e853 3f00 	ldrex	r3, [r3]
 80054fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005500:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005504:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005508:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	461a      	mov	r2, r3
 8005512:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005516:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800551a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005522:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005526:	e841 2300 	strex	r3, r2, [r1]
 800552a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800552e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1da      	bne.n	80054ec <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	3308      	adds	r3, #8
 800553c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800553e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005540:	e853 3f00 	ldrex	r3, [r3]
 8005544:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005546:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005548:	f023 0301 	bic.w	r3, r3, #1
 800554c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	3308      	adds	r3, #8
 8005556:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800555a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800555e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005560:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005562:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005566:	e841 2300 	strex	r3, r2, [r1]
 800556a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800556c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1e1      	bne.n	8005536 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	3308      	adds	r3, #8
 8005578:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800557c:	e853 3f00 	ldrex	r3, [r3]
 8005580:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005582:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005584:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005588:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	3308      	adds	r3, #8
 8005592:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005596:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005598:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800559c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800559e:	e841 2300 	strex	r3, r2, [r1]
 80055a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80055a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1e3      	bne.n	8005572 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2220      	movs	r2, #32
 80055ae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055be:	e853 3f00 	ldrex	r3, [r3]
 80055c2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80055c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055c6:	f023 0310 	bic.w	r3, r3, #16
 80055ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	461a      	mov	r2, r3
 80055d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80055d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80055da:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80055de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80055e0:	e841 2300 	strex	r3, r2, [r1]
 80055e4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80055e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d1e4      	bne.n	80055b6 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055f0:	4618      	mov	r0, r3
 80055f2:	f7fc ffcd 	bl	8002590 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005602:	b29b      	uxth	r3, r3
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	b29b      	uxth	r3, r3
 8005608:	4619      	mov	r1, r3
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f8d4 	bl	80057b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005610:	e0b5      	b.n	800577e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800561e:	b29b      	uxth	r3, r3
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800562c:	b29b      	uxth	r3, r3
 800562e:	2b00      	cmp	r3, #0
 8005630:	f000 80a7 	beq.w	8005782 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8005634:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005638:	2b00      	cmp	r3, #0
 800563a:	f000 80a2 	beq.w	8005782 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005646:	e853 3f00 	ldrex	r3, [r3]
 800564a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800564c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800564e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005652:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	461a      	mov	r2, r3
 800565c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005660:	647b      	str	r3, [r7, #68]	; 0x44
 8005662:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005664:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005666:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005668:	e841 2300 	strex	r3, r2, [r1]
 800566c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800566e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005670:	2b00      	cmp	r3, #0
 8005672:	d1e4      	bne.n	800563e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	3308      	adds	r3, #8
 800567a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567e:	e853 3f00 	ldrex	r3, [r3]
 8005682:	623b      	str	r3, [r7, #32]
   return(result);
 8005684:	6a3b      	ldr	r3, [r7, #32]
 8005686:	f023 0301 	bic.w	r3, r3, #1
 800568a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	3308      	adds	r3, #8
 8005694:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005698:	633a      	str	r2, [r7, #48]	; 0x30
 800569a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800569e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056a0:	e841 2300 	strex	r3, r2, [r1]
 80056a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80056a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d1e3      	bne.n	8005674 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2220      	movs	r2, #32
 80056b0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	e853 3f00 	ldrex	r3, [r3]
 80056ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f023 0310 	bic.w	r3, r3, #16
 80056d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	461a      	mov	r2, r3
 80056dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80056e0:	61fb      	str	r3, [r7, #28]
 80056e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e4:	69b9      	ldr	r1, [r7, #24]
 80056e6:	69fa      	ldr	r2, [r7, #28]
 80056e8:	e841 2300 	strex	r3, r2, [r1]
 80056ec:	617b      	str	r3, [r7, #20]
   return(result);
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d1e4      	bne.n	80056be <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80056f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80056f8:	4619      	mov	r1, r3
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 f85c 	bl	80057b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005700:	e03f      	b.n	8005782 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005706:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00e      	beq.n	800572c <HAL_UART_IRQHandler+0x560>
 800570e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005712:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005716:	2b00      	cmp	r3, #0
 8005718:	d008      	beq.n	800572c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005722:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 fcd1 	bl	80060cc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800572a:	e02d      	b.n	8005788 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800572c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005734:	2b00      	cmp	r3, #0
 8005736:	d00e      	beq.n	8005756 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800573c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005740:	2b00      	cmp	r3, #0
 8005742:	d008      	beq.n	8005756 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005748:	2b00      	cmp	r3, #0
 800574a:	d01c      	beq.n	8005786 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	4798      	blx	r3
    }
    return;
 8005754:	e017      	b.n	8005786 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800575a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800575e:	2b00      	cmp	r3, #0
 8005760:	d012      	beq.n	8005788 <HAL_UART_IRQHandler+0x5bc>
 8005762:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00c      	beq.n	8005788 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 fc82 	bl	8006078 <UART_EndTransmit_IT>
    return;
 8005774:	e008      	b.n	8005788 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005776:	bf00      	nop
 8005778:	e006      	b.n	8005788 <HAL_UART_IRQHandler+0x5bc>
    return;
 800577a:	bf00      	nop
 800577c:	e004      	b.n	8005788 <HAL_UART_IRQHandler+0x5bc>
      return;
 800577e:	bf00      	nop
 8005780:	e002      	b.n	8005788 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005782:	bf00      	nop
 8005784:	e000      	b.n	8005788 <HAL_UART_IRQHandler+0x5bc>
    return;
 8005786:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005788:	37e8      	adds	r7, #232	; 0xe8
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop

08005790 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005798:	bf00      	nop
 800579a:	370c      	adds	r7, #12
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80057ac:	bf00      	nop
 80057ae:	370c      	adds	r7, #12
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	460b      	mov	r3, r1
 80057c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80057c4:	bf00      	nop
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057d4:	b08a      	sub	sp, #40	; 0x28
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80057da:	2300      	movs	r3, #0
 80057dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	689a      	ldr	r2, [r3, #8]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	431a      	orrs	r2, r3
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	695b      	ldr	r3, [r3, #20]
 80057ee:	431a      	orrs	r2, r3
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	69db      	ldr	r3, [r3, #28]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	4bb4      	ldr	r3, [pc, #720]	; (8005ad0 <UART_SetConfig+0x300>)
 8005800:	4013      	ands	r3, r2
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	6812      	ldr	r2, [r2, #0]
 8005806:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005808:	430b      	orrs	r3, r1
 800580a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	68da      	ldr	r2, [r3, #12]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	430a      	orrs	r2, r1
 8005820:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	699b      	ldr	r3, [r3, #24]
 8005826:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4aa9      	ldr	r2, [pc, #676]	; (8005ad4 <UART_SetConfig+0x304>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d004      	beq.n	800583c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6a1b      	ldr	r3, [r3, #32]
 8005836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005838:	4313      	orrs	r3, r2
 800583a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800584c:	430a      	orrs	r2, r1
 800584e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4aa0      	ldr	r2, [pc, #640]	; (8005ad8 <UART_SetConfig+0x308>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d126      	bne.n	80058a8 <UART_SetConfig+0xd8>
 800585a:	4ba0      	ldr	r3, [pc, #640]	; (8005adc <UART_SetConfig+0x30c>)
 800585c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005860:	f003 0303 	and.w	r3, r3, #3
 8005864:	2b03      	cmp	r3, #3
 8005866:	d81b      	bhi.n	80058a0 <UART_SetConfig+0xd0>
 8005868:	a201      	add	r2, pc, #4	; (adr r2, 8005870 <UART_SetConfig+0xa0>)
 800586a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800586e:	bf00      	nop
 8005870:	08005881 	.word	0x08005881
 8005874:	08005891 	.word	0x08005891
 8005878:	08005889 	.word	0x08005889
 800587c:	08005899 	.word	0x08005899
 8005880:	2301      	movs	r3, #1
 8005882:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005886:	e080      	b.n	800598a <UART_SetConfig+0x1ba>
 8005888:	2302      	movs	r3, #2
 800588a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800588e:	e07c      	b.n	800598a <UART_SetConfig+0x1ba>
 8005890:	2304      	movs	r3, #4
 8005892:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005896:	e078      	b.n	800598a <UART_SetConfig+0x1ba>
 8005898:	2308      	movs	r3, #8
 800589a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800589e:	e074      	b.n	800598a <UART_SetConfig+0x1ba>
 80058a0:	2310      	movs	r3, #16
 80058a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058a6:	e070      	b.n	800598a <UART_SetConfig+0x1ba>
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a8c      	ldr	r2, [pc, #560]	; (8005ae0 <UART_SetConfig+0x310>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d138      	bne.n	8005924 <UART_SetConfig+0x154>
 80058b2:	4b8a      	ldr	r3, [pc, #552]	; (8005adc <UART_SetConfig+0x30c>)
 80058b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058b8:	f003 030c 	and.w	r3, r3, #12
 80058bc:	2b0c      	cmp	r3, #12
 80058be:	d82d      	bhi.n	800591c <UART_SetConfig+0x14c>
 80058c0:	a201      	add	r2, pc, #4	; (adr r2, 80058c8 <UART_SetConfig+0xf8>)
 80058c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c6:	bf00      	nop
 80058c8:	080058fd 	.word	0x080058fd
 80058cc:	0800591d 	.word	0x0800591d
 80058d0:	0800591d 	.word	0x0800591d
 80058d4:	0800591d 	.word	0x0800591d
 80058d8:	0800590d 	.word	0x0800590d
 80058dc:	0800591d 	.word	0x0800591d
 80058e0:	0800591d 	.word	0x0800591d
 80058e4:	0800591d 	.word	0x0800591d
 80058e8:	08005905 	.word	0x08005905
 80058ec:	0800591d 	.word	0x0800591d
 80058f0:	0800591d 	.word	0x0800591d
 80058f4:	0800591d 	.word	0x0800591d
 80058f8:	08005915 	.word	0x08005915
 80058fc:	2300      	movs	r3, #0
 80058fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005902:	e042      	b.n	800598a <UART_SetConfig+0x1ba>
 8005904:	2302      	movs	r3, #2
 8005906:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800590a:	e03e      	b.n	800598a <UART_SetConfig+0x1ba>
 800590c:	2304      	movs	r3, #4
 800590e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005912:	e03a      	b.n	800598a <UART_SetConfig+0x1ba>
 8005914:	2308      	movs	r3, #8
 8005916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800591a:	e036      	b.n	800598a <UART_SetConfig+0x1ba>
 800591c:	2310      	movs	r3, #16
 800591e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005922:	e032      	b.n	800598a <UART_SetConfig+0x1ba>
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a6a      	ldr	r2, [pc, #424]	; (8005ad4 <UART_SetConfig+0x304>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d12a      	bne.n	8005984 <UART_SetConfig+0x1b4>
 800592e:	4b6b      	ldr	r3, [pc, #428]	; (8005adc <UART_SetConfig+0x30c>)
 8005930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005934:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005938:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800593c:	d01a      	beq.n	8005974 <UART_SetConfig+0x1a4>
 800593e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005942:	d81b      	bhi.n	800597c <UART_SetConfig+0x1ac>
 8005944:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005948:	d00c      	beq.n	8005964 <UART_SetConfig+0x194>
 800594a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800594e:	d815      	bhi.n	800597c <UART_SetConfig+0x1ac>
 8005950:	2b00      	cmp	r3, #0
 8005952:	d003      	beq.n	800595c <UART_SetConfig+0x18c>
 8005954:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005958:	d008      	beq.n	800596c <UART_SetConfig+0x19c>
 800595a:	e00f      	b.n	800597c <UART_SetConfig+0x1ac>
 800595c:	2300      	movs	r3, #0
 800595e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005962:	e012      	b.n	800598a <UART_SetConfig+0x1ba>
 8005964:	2302      	movs	r3, #2
 8005966:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800596a:	e00e      	b.n	800598a <UART_SetConfig+0x1ba>
 800596c:	2304      	movs	r3, #4
 800596e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005972:	e00a      	b.n	800598a <UART_SetConfig+0x1ba>
 8005974:	2308      	movs	r3, #8
 8005976:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800597a:	e006      	b.n	800598a <UART_SetConfig+0x1ba>
 800597c:	2310      	movs	r3, #16
 800597e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005982:	e002      	b.n	800598a <UART_SetConfig+0x1ba>
 8005984:	2310      	movs	r3, #16
 8005986:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a51      	ldr	r2, [pc, #324]	; (8005ad4 <UART_SetConfig+0x304>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d17a      	bne.n	8005a8a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005994:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005998:	2b08      	cmp	r3, #8
 800599a:	d824      	bhi.n	80059e6 <UART_SetConfig+0x216>
 800599c:	a201      	add	r2, pc, #4	; (adr r2, 80059a4 <UART_SetConfig+0x1d4>)
 800599e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a2:	bf00      	nop
 80059a4:	080059c9 	.word	0x080059c9
 80059a8:	080059e7 	.word	0x080059e7
 80059ac:	080059d1 	.word	0x080059d1
 80059b0:	080059e7 	.word	0x080059e7
 80059b4:	080059d7 	.word	0x080059d7
 80059b8:	080059e7 	.word	0x080059e7
 80059bc:	080059e7 	.word	0x080059e7
 80059c0:	080059e7 	.word	0x080059e7
 80059c4:	080059df 	.word	0x080059df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059c8:	f7fd feba 	bl	8003740 <HAL_RCC_GetPCLK1Freq>
 80059cc:	61f8      	str	r0, [r7, #28]
        break;
 80059ce:	e010      	b.n	80059f2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059d0:	4b44      	ldr	r3, [pc, #272]	; (8005ae4 <UART_SetConfig+0x314>)
 80059d2:	61fb      	str	r3, [r7, #28]
        break;
 80059d4:	e00d      	b.n	80059f2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059d6:	f7fd fe1b 	bl	8003610 <HAL_RCC_GetSysClockFreq>
 80059da:	61f8      	str	r0, [r7, #28]
        break;
 80059dc:	e009      	b.n	80059f2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059de:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80059e2:	61fb      	str	r3, [r7, #28]
        break;
 80059e4:	e005      	b.n	80059f2 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80059e6:	2300      	movs	r3, #0
 80059e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80059f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	f000 8107 	beq.w	8005c08 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	685a      	ldr	r2, [r3, #4]
 80059fe:	4613      	mov	r3, r2
 8005a00:	005b      	lsls	r3, r3, #1
 8005a02:	4413      	add	r3, r2
 8005a04:	69fa      	ldr	r2, [r7, #28]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d305      	bcc.n	8005a16 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005a10:	69fa      	ldr	r2, [r7, #28]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d903      	bls.n	8005a1e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005a1c:	e0f4      	b.n	8005c08 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	2200      	movs	r2, #0
 8005a22:	461c      	mov	r4, r3
 8005a24:	4615      	mov	r5, r2
 8005a26:	f04f 0200 	mov.w	r2, #0
 8005a2a:	f04f 0300 	mov.w	r3, #0
 8005a2e:	022b      	lsls	r3, r5, #8
 8005a30:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005a34:	0222      	lsls	r2, r4, #8
 8005a36:	68f9      	ldr	r1, [r7, #12]
 8005a38:	6849      	ldr	r1, [r1, #4]
 8005a3a:	0849      	lsrs	r1, r1, #1
 8005a3c:	2000      	movs	r0, #0
 8005a3e:	4688      	mov	r8, r1
 8005a40:	4681      	mov	r9, r0
 8005a42:	eb12 0a08 	adds.w	sl, r2, r8
 8005a46:	eb43 0b09 	adc.w	fp, r3, r9
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	603b      	str	r3, [r7, #0]
 8005a52:	607a      	str	r2, [r7, #4]
 8005a54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a58:	4650      	mov	r0, sl
 8005a5a:	4659      	mov	r1, fp
 8005a5c:	f7fa fbb6 	bl	80001cc <__aeabi_uldivmod>
 8005a60:	4602      	mov	r2, r0
 8005a62:	460b      	mov	r3, r1
 8005a64:	4613      	mov	r3, r2
 8005a66:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a6e:	d308      	bcc.n	8005a82 <UART_SetConfig+0x2b2>
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a76:	d204      	bcs.n	8005a82 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	69ba      	ldr	r2, [r7, #24]
 8005a7e:	60da      	str	r2, [r3, #12]
 8005a80:	e0c2      	b.n	8005c08 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005a88:	e0be      	b.n	8005c08 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	69db      	ldr	r3, [r3, #28]
 8005a8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a92:	d16a      	bne.n	8005b6a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005a94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a98:	2b08      	cmp	r3, #8
 8005a9a:	d834      	bhi.n	8005b06 <UART_SetConfig+0x336>
 8005a9c:	a201      	add	r2, pc, #4	; (adr r2, 8005aa4 <UART_SetConfig+0x2d4>)
 8005a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa2:	bf00      	nop
 8005aa4:	08005ac9 	.word	0x08005ac9
 8005aa8:	08005ae9 	.word	0x08005ae9
 8005aac:	08005af1 	.word	0x08005af1
 8005ab0:	08005b07 	.word	0x08005b07
 8005ab4:	08005af7 	.word	0x08005af7
 8005ab8:	08005b07 	.word	0x08005b07
 8005abc:	08005b07 	.word	0x08005b07
 8005ac0:	08005b07 	.word	0x08005b07
 8005ac4:	08005aff 	.word	0x08005aff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ac8:	f7fd fe3a 	bl	8003740 <HAL_RCC_GetPCLK1Freq>
 8005acc:	61f8      	str	r0, [r7, #28]
        break;
 8005ace:	e020      	b.n	8005b12 <UART_SetConfig+0x342>
 8005ad0:	efff69f3 	.word	0xefff69f3
 8005ad4:	40008000 	.word	0x40008000
 8005ad8:	40013800 	.word	0x40013800
 8005adc:	40021000 	.word	0x40021000
 8005ae0:	40004400 	.word	0x40004400
 8005ae4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ae8:	f7fd fe40 	bl	800376c <HAL_RCC_GetPCLK2Freq>
 8005aec:	61f8      	str	r0, [r7, #28]
        break;
 8005aee:	e010      	b.n	8005b12 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005af0:	4b4c      	ldr	r3, [pc, #304]	; (8005c24 <UART_SetConfig+0x454>)
 8005af2:	61fb      	str	r3, [r7, #28]
        break;
 8005af4:	e00d      	b.n	8005b12 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005af6:	f7fd fd8b 	bl	8003610 <HAL_RCC_GetSysClockFreq>
 8005afa:	61f8      	str	r0, [r7, #28]
        break;
 8005afc:	e009      	b.n	8005b12 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005afe:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8005b02:	61fb      	str	r3, [r7, #28]
        break;
 8005b04:	e005      	b.n	8005b12 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8005b06:	2300      	movs	r3, #0
 8005b08:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005b10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d077      	beq.n	8005c08 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	005a      	lsls	r2, r3, #1
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	085b      	lsrs	r3, r3, #1
 8005b22:	441a      	add	r2, r3
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b2c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	2b0f      	cmp	r3, #15
 8005b32:	d916      	bls.n	8005b62 <UART_SetConfig+0x392>
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b3a:	d212      	bcs.n	8005b62 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	f023 030f 	bic.w	r3, r3, #15
 8005b44:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	085b      	lsrs	r3, r3, #1
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	f003 0307 	and.w	r3, r3, #7
 8005b50:	b29a      	uxth	r2, r3
 8005b52:	8afb      	ldrh	r3, [r7, #22]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	8afa      	ldrh	r2, [r7, #22]
 8005b5e:	60da      	str	r2, [r3, #12]
 8005b60:	e052      	b.n	8005c08 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005b68:	e04e      	b.n	8005c08 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b6e:	2b08      	cmp	r3, #8
 8005b70:	d827      	bhi.n	8005bc2 <UART_SetConfig+0x3f2>
 8005b72:	a201      	add	r2, pc, #4	; (adr r2, 8005b78 <UART_SetConfig+0x3a8>)
 8005b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b78:	08005b9d 	.word	0x08005b9d
 8005b7c:	08005ba5 	.word	0x08005ba5
 8005b80:	08005bad 	.word	0x08005bad
 8005b84:	08005bc3 	.word	0x08005bc3
 8005b88:	08005bb3 	.word	0x08005bb3
 8005b8c:	08005bc3 	.word	0x08005bc3
 8005b90:	08005bc3 	.word	0x08005bc3
 8005b94:	08005bc3 	.word	0x08005bc3
 8005b98:	08005bbb 	.word	0x08005bbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b9c:	f7fd fdd0 	bl	8003740 <HAL_RCC_GetPCLK1Freq>
 8005ba0:	61f8      	str	r0, [r7, #28]
        break;
 8005ba2:	e014      	b.n	8005bce <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ba4:	f7fd fde2 	bl	800376c <HAL_RCC_GetPCLK2Freq>
 8005ba8:	61f8      	str	r0, [r7, #28]
        break;
 8005baa:	e010      	b.n	8005bce <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bac:	4b1d      	ldr	r3, [pc, #116]	; (8005c24 <UART_SetConfig+0x454>)
 8005bae:	61fb      	str	r3, [r7, #28]
        break;
 8005bb0:	e00d      	b.n	8005bce <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bb2:	f7fd fd2d 	bl	8003610 <HAL_RCC_GetSysClockFreq>
 8005bb6:	61f8      	str	r0, [r7, #28]
        break;
 8005bb8:	e009      	b.n	8005bce <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bba:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8005bbe:	61fb      	str	r3, [r7, #28]
        break;
 8005bc0:	e005      	b.n	8005bce <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005bcc:	bf00      	nop
    }

    if (pclk != 0U)
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d019      	beq.n	8005c08 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	085a      	lsrs	r2, r3, #1
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	441a      	add	r2, r3
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005be6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	2b0f      	cmp	r3, #15
 8005bec:	d909      	bls.n	8005c02 <UART_SetConfig+0x432>
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bf4:	d205      	bcs.n	8005c02 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	b29a      	uxth	r2, r3
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	60da      	str	r2, [r3, #12]
 8005c00:	e002      	b.n	8005c08 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005c14:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3728      	adds	r7, #40	; 0x28
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c22:	bf00      	nop
 8005c24:	00f42400 	.word	0x00f42400

08005c28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c34:	f003 0301 	and.w	r3, r3, #1
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d00a      	beq.n	8005c52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	430a      	orrs	r2, r1
 8005c50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c56:	f003 0302 	and.w	r3, r3, #2
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00a      	beq.n	8005c74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	430a      	orrs	r2, r1
 8005c72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c78:	f003 0304 	and.w	r3, r3, #4
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d00a      	beq.n	8005c96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	430a      	orrs	r2, r1
 8005c94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9a:	f003 0308 	and.w	r3, r3, #8
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d00a      	beq.n	8005cb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	430a      	orrs	r2, r1
 8005cb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cbc:	f003 0310 	and.w	r3, r3, #16
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d00a      	beq.n	8005cda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	430a      	orrs	r2, r1
 8005cd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cde:	f003 0320 	and.w	r3, r3, #32
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00a      	beq.n	8005cfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	430a      	orrs	r2, r1
 8005cfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d01a      	beq.n	8005d3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	430a      	orrs	r2, r1
 8005d1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d26:	d10a      	bne.n	8005d3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	430a      	orrs	r2, r1
 8005d3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00a      	beq.n	8005d60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	430a      	orrs	r2, r1
 8005d5e:	605a      	str	r2, [r3, #4]
  }
}
 8005d60:	bf00      	nop
 8005d62:	370c      	adds	r7, #12
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b086      	sub	sp, #24
 8005d70:	af02      	add	r7, sp, #8
 8005d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d7c:	f7fb fb1e 	bl	80013bc <HAL_GetTick>
 8005d80:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 0308 	and.w	r3, r3, #8
 8005d8c:	2b08      	cmp	r3, #8
 8005d8e:	d10e      	bne.n	8005dae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d94:	9300      	str	r3, [sp, #0]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 f82d 	bl	8005dfe <UART_WaitOnFlagUntilTimeout>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d001      	beq.n	8005dae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e023      	b.n	8005df6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0304 	and.w	r3, r3, #4
 8005db8:	2b04      	cmp	r3, #4
 8005dba:	d10e      	bne.n	8005dda <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005dc0:	9300      	str	r3, [sp, #0]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 f817 	bl	8005dfe <UART_WaitOnFlagUntilTimeout>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d001      	beq.n	8005dda <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e00d      	b.n	8005df6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2220      	movs	r2, #32
 8005dde:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2220      	movs	r2, #32
 8005de4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005dfe:	b580      	push	{r7, lr}
 8005e00:	b09c      	sub	sp, #112	; 0x70
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	60f8      	str	r0, [r7, #12]
 8005e06:	60b9      	str	r1, [r7, #8]
 8005e08:	603b      	str	r3, [r7, #0]
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e0e:	e0a5      	b.n	8005f5c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e16:	f000 80a1 	beq.w	8005f5c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e1a:	f7fb facf 	bl	80013bc <HAL_GetTick>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	1ad3      	subs	r3, r2, r3
 8005e24:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d302      	bcc.n	8005e30 <UART_WaitOnFlagUntilTimeout+0x32>
 8005e2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d13e      	bne.n	8005eae <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e38:	e853 3f00 	ldrex	r3, [r3]
 8005e3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e40:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e44:	667b      	str	r3, [r7, #100]	; 0x64
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e50:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005e54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005e56:	e841 2300 	strex	r3, r2, [r1]
 8005e5a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005e5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1e6      	bne.n	8005e30 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	3308      	adds	r3, #8
 8005e68:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e6c:	e853 3f00 	ldrex	r3, [r3]
 8005e70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e74:	f023 0301 	bic.w	r3, r3, #1
 8005e78:	663b      	str	r3, [r7, #96]	; 0x60
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	3308      	adds	r3, #8
 8005e80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005e82:	64ba      	str	r2, [r7, #72]	; 0x48
 8005e84:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005e88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e8a:	e841 2300 	strex	r3, r2, [r1]
 8005e8e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005e90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d1e5      	bne.n	8005e62 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2220      	movs	r2, #32
 8005e9a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2220      	movs	r2, #32
 8005ea0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e067      	b.n	8005f7e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 0304 	and.w	r3, r3, #4
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d04f      	beq.n	8005f5c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	69db      	ldr	r3, [r3, #28]
 8005ec2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ec6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005eca:	d147      	bne.n	8005f5c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ed4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ede:	e853 3f00 	ldrex	r3, [r3]
 8005ee2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005eea:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ef4:	637b      	str	r3, [r7, #52]	; 0x34
 8005ef6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005efa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005efc:	e841 2300 	strex	r3, r2, [r1]
 8005f00:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d1e6      	bne.n	8005ed6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	3308      	adds	r3, #8
 8005f0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	e853 3f00 	ldrex	r3, [r3]
 8005f16:	613b      	str	r3, [r7, #16]
   return(result);
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	f023 0301 	bic.w	r3, r3, #1
 8005f1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	3308      	adds	r3, #8
 8005f26:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005f28:	623a      	str	r2, [r7, #32]
 8005f2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f2c:	69f9      	ldr	r1, [r7, #28]
 8005f2e:	6a3a      	ldr	r2, [r7, #32]
 8005f30:	e841 2300 	strex	r3, r2, [r1]
 8005f34:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d1e5      	bne.n	8005f08 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2220      	movs	r2, #32
 8005f40:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2220      	movs	r2, #32
 8005f46:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2220      	movs	r2, #32
 8005f4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005f58:	2303      	movs	r3, #3
 8005f5a:	e010      	b.n	8005f7e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	69da      	ldr	r2, [r3, #28]
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	4013      	ands	r3, r2
 8005f66:	68ba      	ldr	r2, [r7, #8]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	bf0c      	ite	eq
 8005f6c:	2301      	moveq	r3, #1
 8005f6e:	2300      	movne	r3, #0
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	461a      	mov	r2, r3
 8005f74:	79fb      	ldrb	r3, [r7, #7]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	f43f af4a 	beq.w	8005e10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3770      	adds	r7, #112	; 0x70
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}

08005f86 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f86:	b480      	push	{r7}
 8005f88:	b095      	sub	sp, #84	; 0x54
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f96:	e853 3f00 	ldrex	r3, [r3]
 8005f9a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	461a      	mov	r2, r3
 8005faa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fac:	643b      	str	r3, [r7, #64]	; 0x40
 8005fae:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005fb2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fb4:	e841 2300 	strex	r3, r2, [r1]
 8005fb8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d1e6      	bne.n	8005f8e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	3308      	adds	r3, #8
 8005fc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc8:	6a3b      	ldr	r3, [r7, #32]
 8005fca:	e853 3f00 	ldrex	r3, [r3]
 8005fce:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	f023 0301 	bic.w	r3, r3, #1
 8005fd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	3308      	adds	r3, #8
 8005fde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fe0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fe2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fe6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fe8:	e841 2300 	strex	r3, r2, [r1]
 8005fec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d1e5      	bne.n	8005fc0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d118      	bne.n	800602e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	e853 3f00 	ldrex	r3, [r3]
 8006008:	60bb      	str	r3, [r7, #8]
   return(result);
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	f023 0310 	bic.w	r3, r3, #16
 8006010:	647b      	str	r3, [r7, #68]	; 0x44
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	461a      	mov	r2, r3
 8006018:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800601a:	61bb      	str	r3, [r7, #24]
 800601c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800601e:	6979      	ldr	r1, [r7, #20]
 8006020:	69ba      	ldr	r2, [r7, #24]
 8006022:	e841 2300 	strex	r3, r2, [r1]
 8006026:	613b      	str	r3, [r7, #16]
   return(result);
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d1e6      	bne.n	8005ffc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2220      	movs	r2, #32
 8006032:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006040:	bf00      	nop
 8006042:	3754      	adds	r7, #84	; 0x54
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006058:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2200      	movs	r2, #0
 800605e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2200      	movs	r2, #0
 8006066:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800606a:	68f8      	ldr	r0, [r7, #12]
 800606c:	f7ff fb9a 	bl	80057a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006070:	bf00      	nop
 8006072:	3710      	adds	r7, #16
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b088      	sub	sp, #32
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	e853 3f00 	ldrex	r3, [r3]
 800608c:	60bb      	str	r3, [r7, #8]
   return(result);
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006094:	61fb      	str	r3, [r7, #28]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	461a      	mov	r2, r3
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	61bb      	str	r3, [r7, #24]
 80060a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a2:	6979      	ldr	r1, [r7, #20]
 80060a4:	69ba      	ldr	r2, [r7, #24]
 80060a6:	e841 2300 	strex	r3, r2, [r1]
 80060aa:	613b      	str	r3, [r7, #16]
   return(result);
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d1e6      	bne.n	8006080 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2220      	movs	r2, #32
 80060b6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f7ff fb66 	bl	8005790 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060c4:	bf00      	nop
 80060c6:	3720      	adds	r7, #32
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80060d4:	bf00      	nop
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <__errno>:
 80060e0:	4b01      	ldr	r3, [pc, #4]	; (80060e8 <__errno+0x8>)
 80060e2:	6818      	ldr	r0, [r3, #0]
 80060e4:	4770      	bx	lr
 80060e6:	bf00      	nop
 80060e8:	200044c4 	.word	0x200044c4

080060ec <__libc_init_array>:
 80060ec:	b570      	push	{r4, r5, r6, lr}
 80060ee:	4d0d      	ldr	r5, [pc, #52]	; (8006124 <__libc_init_array+0x38>)
 80060f0:	4c0d      	ldr	r4, [pc, #52]	; (8006128 <__libc_init_array+0x3c>)
 80060f2:	1b64      	subs	r4, r4, r5
 80060f4:	10a4      	asrs	r4, r4, #2
 80060f6:	2600      	movs	r6, #0
 80060f8:	42a6      	cmp	r6, r4
 80060fa:	d109      	bne.n	8006110 <__libc_init_array+0x24>
 80060fc:	4d0b      	ldr	r5, [pc, #44]	; (800612c <__libc_init_array+0x40>)
 80060fe:	4c0c      	ldr	r4, [pc, #48]	; (8006130 <__libc_init_array+0x44>)
 8006100:	f000 f92e 	bl	8006360 <_init>
 8006104:	1b64      	subs	r4, r4, r5
 8006106:	10a4      	asrs	r4, r4, #2
 8006108:	2600      	movs	r6, #0
 800610a:	42a6      	cmp	r6, r4
 800610c:	d105      	bne.n	800611a <__libc_init_array+0x2e>
 800610e:	bd70      	pop	{r4, r5, r6, pc}
 8006110:	f855 3b04 	ldr.w	r3, [r5], #4
 8006114:	4798      	blx	r3
 8006116:	3601      	adds	r6, #1
 8006118:	e7ee      	b.n	80060f8 <__libc_init_array+0xc>
 800611a:	f855 3b04 	ldr.w	r3, [r5], #4
 800611e:	4798      	blx	r3
 8006120:	3601      	adds	r6, #1
 8006122:	e7f2      	b.n	800610a <__libc_init_array+0x1e>
 8006124:	080063cc 	.word	0x080063cc
 8006128:	080063cc 	.word	0x080063cc
 800612c:	080063cc 	.word	0x080063cc
 8006130:	080063d0 	.word	0x080063d0

08006134 <malloc>:
 8006134:	4b02      	ldr	r3, [pc, #8]	; (8006140 <malloc+0xc>)
 8006136:	4601      	mov	r1, r0
 8006138:	6818      	ldr	r0, [r3, #0]
 800613a:	f000 b87f 	b.w	800623c <_malloc_r>
 800613e:	bf00      	nop
 8006140:	200044c4 	.word	0x200044c4

08006144 <free>:
 8006144:	4b02      	ldr	r3, [pc, #8]	; (8006150 <free+0xc>)
 8006146:	4601      	mov	r1, r0
 8006148:	6818      	ldr	r0, [r3, #0]
 800614a:	f000 b80b 	b.w	8006164 <_free_r>
 800614e:	bf00      	nop
 8006150:	200044c4 	.word	0x200044c4

08006154 <memset>:
 8006154:	4402      	add	r2, r0
 8006156:	4603      	mov	r3, r0
 8006158:	4293      	cmp	r3, r2
 800615a:	d100      	bne.n	800615e <memset+0xa>
 800615c:	4770      	bx	lr
 800615e:	f803 1b01 	strb.w	r1, [r3], #1
 8006162:	e7f9      	b.n	8006158 <memset+0x4>

08006164 <_free_r>:
 8006164:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006166:	2900      	cmp	r1, #0
 8006168:	d044      	beq.n	80061f4 <_free_r+0x90>
 800616a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800616e:	9001      	str	r0, [sp, #4]
 8006170:	2b00      	cmp	r3, #0
 8006172:	f1a1 0404 	sub.w	r4, r1, #4
 8006176:	bfb8      	it	lt
 8006178:	18e4      	addlt	r4, r4, r3
 800617a:	f000 f8e3 	bl	8006344 <__malloc_lock>
 800617e:	4a1e      	ldr	r2, [pc, #120]	; (80061f8 <_free_r+0x94>)
 8006180:	9801      	ldr	r0, [sp, #4]
 8006182:	6813      	ldr	r3, [r2, #0]
 8006184:	b933      	cbnz	r3, 8006194 <_free_r+0x30>
 8006186:	6063      	str	r3, [r4, #4]
 8006188:	6014      	str	r4, [r2, #0]
 800618a:	b003      	add	sp, #12
 800618c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006190:	f000 b8de 	b.w	8006350 <__malloc_unlock>
 8006194:	42a3      	cmp	r3, r4
 8006196:	d908      	bls.n	80061aa <_free_r+0x46>
 8006198:	6825      	ldr	r5, [r4, #0]
 800619a:	1961      	adds	r1, r4, r5
 800619c:	428b      	cmp	r3, r1
 800619e:	bf01      	itttt	eq
 80061a0:	6819      	ldreq	r1, [r3, #0]
 80061a2:	685b      	ldreq	r3, [r3, #4]
 80061a4:	1949      	addeq	r1, r1, r5
 80061a6:	6021      	streq	r1, [r4, #0]
 80061a8:	e7ed      	b.n	8006186 <_free_r+0x22>
 80061aa:	461a      	mov	r2, r3
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	b10b      	cbz	r3, 80061b4 <_free_r+0x50>
 80061b0:	42a3      	cmp	r3, r4
 80061b2:	d9fa      	bls.n	80061aa <_free_r+0x46>
 80061b4:	6811      	ldr	r1, [r2, #0]
 80061b6:	1855      	adds	r5, r2, r1
 80061b8:	42a5      	cmp	r5, r4
 80061ba:	d10b      	bne.n	80061d4 <_free_r+0x70>
 80061bc:	6824      	ldr	r4, [r4, #0]
 80061be:	4421      	add	r1, r4
 80061c0:	1854      	adds	r4, r2, r1
 80061c2:	42a3      	cmp	r3, r4
 80061c4:	6011      	str	r1, [r2, #0]
 80061c6:	d1e0      	bne.n	800618a <_free_r+0x26>
 80061c8:	681c      	ldr	r4, [r3, #0]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	6053      	str	r3, [r2, #4]
 80061ce:	4421      	add	r1, r4
 80061d0:	6011      	str	r1, [r2, #0]
 80061d2:	e7da      	b.n	800618a <_free_r+0x26>
 80061d4:	d902      	bls.n	80061dc <_free_r+0x78>
 80061d6:	230c      	movs	r3, #12
 80061d8:	6003      	str	r3, [r0, #0]
 80061da:	e7d6      	b.n	800618a <_free_r+0x26>
 80061dc:	6825      	ldr	r5, [r4, #0]
 80061de:	1961      	adds	r1, r4, r5
 80061e0:	428b      	cmp	r3, r1
 80061e2:	bf04      	itt	eq
 80061e4:	6819      	ldreq	r1, [r3, #0]
 80061e6:	685b      	ldreq	r3, [r3, #4]
 80061e8:	6063      	str	r3, [r4, #4]
 80061ea:	bf04      	itt	eq
 80061ec:	1949      	addeq	r1, r1, r5
 80061ee:	6021      	streq	r1, [r4, #0]
 80061f0:	6054      	str	r4, [r2, #4]
 80061f2:	e7ca      	b.n	800618a <_free_r+0x26>
 80061f4:	b003      	add	sp, #12
 80061f6:	bd30      	pop	{r4, r5, pc}
 80061f8:	200051c0 	.word	0x200051c0

080061fc <sbrk_aligned>:
 80061fc:	b570      	push	{r4, r5, r6, lr}
 80061fe:	4e0e      	ldr	r6, [pc, #56]	; (8006238 <sbrk_aligned+0x3c>)
 8006200:	460c      	mov	r4, r1
 8006202:	6831      	ldr	r1, [r6, #0]
 8006204:	4605      	mov	r5, r0
 8006206:	b911      	cbnz	r1, 800620e <sbrk_aligned+0x12>
 8006208:	f000 f88c 	bl	8006324 <_sbrk_r>
 800620c:	6030      	str	r0, [r6, #0]
 800620e:	4621      	mov	r1, r4
 8006210:	4628      	mov	r0, r5
 8006212:	f000 f887 	bl	8006324 <_sbrk_r>
 8006216:	1c43      	adds	r3, r0, #1
 8006218:	d00a      	beq.n	8006230 <sbrk_aligned+0x34>
 800621a:	1cc4      	adds	r4, r0, #3
 800621c:	f024 0403 	bic.w	r4, r4, #3
 8006220:	42a0      	cmp	r0, r4
 8006222:	d007      	beq.n	8006234 <sbrk_aligned+0x38>
 8006224:	1a21      	subs	r1, r4, r0
 8006226:	4628      	mov	r0, r5
 8006228:	f000 f87c 	bl	8006324 <_sbrk_r>
 800622c:	3001      	adds	r0, #1
 800622e:	d101      	bne.n	8006234 <sbrk_aligned+0x38>
 8006230:	f04f 34ff 	mov.w	r4, #4294967295
 8006234:	4620      	mov	r0, r4
 8006236:	bd70      	pop	{r4, r5, r6, pc}
 8006238:	200051c4 	.word	0x200051c4

0800623c <_malloc_r>:
 800623c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006240:	1ccd      	adds	r5, r1, #3
 8006242:	f025 0503 	bic.w	r5, r5, #3
 8006246:	3508      	adds	r5, #8
 8006248:	2d0c      	cmp	r5, #12
 800624a:	bf38      	it	cc
 800624c:	250c      	movcc	r5, #12
 800624e:	2d00      	cmp	r5, #0
 8006250:	4607      	mov	r7, r0
 8006252:	db01      	blt.n	8006258 <_malloc_r+0x1c>
 8006254:	42a9      	cmp	r1, r5
 8006256:	d905      	bls.n	8006264 <_malloc_r+0x28>
 8006258:	230c      	movs	r3, #12
 800625a:	603b      	str	r3, [r7, #0]
 800625c:	2600      	movs	r6, #0
 800625e:	4630      	mov	r0, r6
 8006260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006264:	4e2e      	ldr	r6, [pc, #184]	; (8006320 <_malloc_r+0xe4>)
 8006266:	f000 f86d 	bl	8006344 <__malloc_lock>
 800626a:	6833      	ldr	r3, [r6, #0]
 800626c:	461c      	mov	r4, r3
 800626e:	bb34      	cbnz	r4, 80062be <_malloc_r+0x82>
 8006270:	4629      	mov	r1, r5
 8006272:	4638      	mov	r0, r7
 8006274:	f7ff ffc2 	bl	80061fc <sbrk_aligned>
 8006278:	1c43      	adds	r3, r0, #1
 800627a:	4604      	mov	r4, r0
 800627c:	d14d      	bne.n	800631a <_malloc_r+0xde>
 800627e:	6834      	ldr	r4, [r6, #0]
 8006280:	4626      	mov	r6, r4
 8006282:	2e00      	cmp	r6, #0
 8006284:	d140      	bne.n	8006308 <_malloc_r+0xcc>
 8006286:	6823      	ldr	r3, [r4, #0]
 8006288:	4631      	mov	r1, r6
 800628a:	4638      	mov	r0, r7
 800628c:	eb04 0803 	add.w	r8, r4, r3
 8006290:	f000 f848 	bl	8006324 <_sbrk_r>
 8006294:	4580      	cmp	r8, r0
 8006296:	d13a      	bne.n	800630e <_malloc_r+0xd2>
 8006298:	6821      	ldr	r1, [r4, #0]
 800629a:	3503      	adds	r5, #3
 800629c:	1a6d      	subs	r5, r5, r1
 800629e:	f025 0503 	bic.w	r5, r5, #3
 80062a2:	3508      	adds	r5, #8
 80062a4:	2d0c      	cmp	r5, #12
 80062a6:	bf38      	it	cc
 80062a8:	250c      	movcc	r5, #12
 80062aa:	4629      	mov	r1, r5
 80062ac:	4638      	mov	r0, r7
 80062ae:	f7ff ffa5 	bl	80061fc <sbrk_aligned>
 80062b2:	3001      	adds	r0, #1
 80062b4:	d02b      	beq.n	800630e <_malloc_r+0xd2>
 80062b6:	6823      	ldr	r3, [r4, #0]
 80062b8:	442b      	add	r3, r5
 80062ba:	6023      	str	r3, [r4, #0]
 80062bc:	e00e      	b.n	80062dc <_malloc_r+0xa0>
 80062be:	6822      	ldr	r2, [r4, #0]
 80062c0:	1b52      	subs	r2, r2, r5
 80062c2:	d41e      	bmi.n	8006302 <_malloc_r+0xc6>
 80062c4:	2a0b      	cmp	r2, #11
 80062c6:	d916      	bls.n	80062f6 <_malloc_r+0xba>
 80062c8:	1961      	adds	r1, r4, r5
 80062ca:	42a3      	cmp	r3, r4
 80062cc:	6025      	str	r5, [r4, #0]
 80062ce:	bf18      	it	ne
 80062d0:	6059      	strne	r1, [r3, #4]
 80062d2:	6863      	ldr	r3, [r4, #4]
 80062d4:	bf08      	it	eq
 80062d6:	6031      	streq	r1, [r6, #0]
 80062d8:	5162      	str	r2, [r4, r5]
 80062da:	604b      	str	r3, [r1, #4]
 80062dc:	4638      	mov	r0, r7
 80062de:	f104 060b 	add.w	r6, r4, #11
 80062e2:	f000 f835 	bl	8006350 <__malloc_unlock>
 80062e6:	f026 0607 	bic.w	r6, r6, #7
 80062ea:	1d23      	adds	r3, r4, #4
 80062ec:	1af2      	subs	r2, r6, r3
 80062ee:	d0b6      	beq.n	800625e <_malloc_r+0x22>
 80062f0:	1b9b      	subs	r3, r3, r6
 80062f2:	50a3      	str	r3, [r4, r2]
 80062f4:	e7b3      	b.n	800625e <_malloc_r+0x22>
 80062f6:	6862      	ldr	r2, [r4, #4]
 80062f8:	42a3      	cmp	r3, r4
 80062fa:	bf0c      	ite	eq
 80062fc:	6032      	streq	r2, [r6, #0]
 80062fe:	605a      	strne	r2, [r3, #4]
 8006300:	e7ec      	b.n	80062dc <_malloc_r+0xa0>
 8006302:	4623      	mov	r3, r4
 8006304:	6864      	ldr	r4, [r4, #4]
 8006306:	e7b2      	b.n	800626e <_malloc_r+0x32>
 8006308:	4634      	mov	r4, r6
 800630a:	6876      	ldr	r6, [r6, #4]
 800630c:	e7b9      	b.n	8006282 <_malloc_r+0x46>
 800630e:	230c      	movs	r3, #12
 8006310:	603b      	str	r3, [r7, #0]
 8006312:	4638      	mov	r0, r7
 8006314:	f000 f81c 	bl	8006350 <__malloc_unlock>
 8006318:	e7a1      	b.n	800625e <_malloc_r+0x22>
 800631a:	6025      	str	r5, [r4, #0]
 800631c:	e7de      	b.n	80062dc <_malloc_r+0xa0>
 800631e:	bf00      	nop
 8006320:	200051c0 	.word	0x200051c0

08006324 <_sbrk_r>:
 8006324:	b538      	push	{r3, r4, r5, lr}
 8006326:	4d06      	ldr	r5, [pc, #24]	; (8006340 <_sbrk_r+0x1c>)
 8006328:	2300      	movs	r3, #0
 800632a:	4604      	mov	r4, r0
 800632c:	4608      	mov	r0, r1
 800632e:	602b      	str	r3, [r5, #0]
 8006330:	f7fa ff6a 	bl	8001208 <_sbrk>
 8006334:	1c43      	adds	r3, r0, #1
 8006336:	d102      	bne.n	800633e <_sbrk_r+0x1a>
 8006338:	682b      	ldr	r3, [r5, #0]
 800633a:	b103      	cbz	r3, 800633e <_sbrk_r+0x1a>
 800633c:	6023      	str	r3, [r4, #0]
 800633e:	bd38      	pop	{r3, r4, r5, pc}
 8006340:	200051c8 	.word	0x200051c8

08006344 <__malloc_lock>:
 8006344:	4801      	ldr	r0, [pc, #4]	; (800634c <__malloc_lock+0x8>)
 8006346:	f000 b809 	b.w	800635c <__retarget_lock_acquire_recursive>
 800634a:	bf00      	nop
 800634c:	200051cc 	.word	0x200051cc

08006350 <__malloc_unlock>:
 8006350:	4801      	ldr	r0, [pc, #4]	; (8006358 <__malloc_unlock+0x8>)
 8006352:	f000 b804 	b.w	800635e <__retarget_lock_release_recursive>
 8006356:	bf00      	nop
 8006358:	200051cc 	.word	0x200051cc

0800635c <__retarget_lock_acquire_recursive>:
 800635c:	4770      	bx	lr

0800635e <__retarget_lock_release_recursive>:
 800635e:	4770      	bx	lr

08006360 <_init>:
 8006360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006362:	bf00      	nop
 8006364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006366:	bc08      	pop	{r3}
 8006368:	469e      	mov	lr, r3
 800636a:	4770      	bx	lr

0800636c <_fini>:
 800636c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800636e:	bf00      	nop
 8006370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006372:	bc08      	pop	{r3}
 8006374:	469e      	mov	lr, r3
 8006376:	4770      	bx	lr
